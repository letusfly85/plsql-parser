package br.com.porcelli.parser;


import org.antlr.runtime.*;

import org.antlr.runtime.tree.*;


/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class PLSQLParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMPERSAND", "APPROXIMATE_NUM_LIT", "ASSIGN_OP", "ASTERISK", "AT_SIGN", "BINDVAR", "BIT_STRING_LIT", "CARRET_OPERATOR_PART", "CHAR_STRING", "CHAR_STRING_PERL", "COLON", "COMMA", "COMMENT", "CONCATENATION_OP", "DELIMITED_ID", "DOUBLE_ASTERISK", "DOUBLE_PERIOD", "EQUALS_OP", "EXACT_NUM_LIT", "EXCLAMATION_OPERATOR_PART", "FOR_NOTATION", "GREATER_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "HEX_STRING_LIT", "INTRODUCER", "LEFT_BRACKET", "LEFT_PAREN", "LESS_THAN_OP", "LESS_THAN_OR_EQUALS_OP", "MINUS_SIGN", "NATIONAL_CHAR_STRING_LIT", "NEWLINE", "NOT_EQUAL_OP", "PERCENT", "PERIOD", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_NON_RESERVED_ELSIF", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", "PLSQL_NON_RESERVED_USING", "PLSQL_RESERVED_CLUSTERS", "PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "PLSQL_RESERVED_CRASH", "PLSQL_RESERVED_EXCLUSIVE", "PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", "PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", "PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "PLSQL_RESERVED_NOWAIT", "PLSQL_RESERVED_RESOURCE", "PLSQL_RESERVED_SHARE", "PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "PLSQL_RESERVED_VIEWS", "PLUS_SIGN", "PROMPT", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_OTHER", "QS_OTHER_CH", "QS_PAREN", "QUESTION_MARK", "QUOTE", "REGULAR_ID", "RIGHT_BRACKET", "RIGHT_PAREN", "SEMICOLON", "SEPARATOR", "SIMPLE_LETTER", "SOLIDUS", "SPACE", "SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", "SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "SQL92_RESERVED_CONNECT", "SQL92_RESERVED_CREATE", "SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", "SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", "SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", "SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", "SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", "SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", "SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "SQL92_RESERVED_IN", "SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", "SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "SQL92_RESERVED_NOT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", "SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_PROCEDURE", "SQL92_RESERVED_PUBLIC", "SQL92_RESERVED_REVOKE", "SQL92_RESERVED_SELECT", "SQL92_RESERVED_SIZE", "SQL92_RESERVED_TABLE", "SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", "SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", "SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "SQL92_RESERVED_WHEN", "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "TILDE_OPERATOR_PART", "UNDERSCORE", "UNSIGNED_INTEGER", "VERTICAL_BAR", "ZV", "ADD_VK", "AFTER_EACH_ROW", "AFTER_STATEMENT", "AFTER_VK", "AGENT_VK", "AGGREGATE_VK", "ALIAS", "ALTER_ATTRIBUTE", "ALTER_COLLECTION", "ALTER_FUNCTION", "ALTER_METHOD", "ALTER_METHOD_ELEMENT", "ALTER_PACKAGE", "ALTER_PROCEDURE", "ALTER_SEQUENCE", "ALTER_TRIGGER", "ALTER_TYPE", "ANALYZE_VK", "ANY_ELEMENT", "ANY_MODE", "ARGUMENT", "ARGUMENTS", "ASSIGN", "ASSOCIATE_VK", "ATTRIBUTE", "ATTRIBUTES", "ATTRIBUTE_NAME", "AT_VK", "AUDIT_VK", "AUTHID_VK", "AUTOMATIC_VK", "AUTONOMOUS_TRANSACTION_VK", "AUTO_VK", "BATCH_VK", "BEFORE_EACH_ROW", "BEFORE_STATEMENT", "BEFORE_VK", "BFILE_VK", "BINARY_DOUBLE_VK", "BINARY_FLOAT_VK", "BINARY_INTEGER_VK", "BIT_VK", "BLOB_VK", "BLOCK", "BLOCK_VK", "BODY", "BODY_MODE", "BODY_VK", "BOOLEAN_VK", "BOTH_VK", "BREADTH_VK", "BULK_VK", "BYTE_VK", "CACHE_VK", "CALL_MODE", "CALL_VK", "CANONICAL_VK", "CASCADE_VK", "CASCATED_ELEMENT", "CAST_VK", "CHARACTER_VK", "CHAR_CS_VK", "CHAR_SET_NAME", "CHAR_VK", "CHR_VK", "CLOB_VK", "CLOSE_VK", "CLUSTER_VK", "COLLECTION_MODE", "COLLECTION_NAME", "COLLECT_VK", "COLUMNS", "COLUMN_NAME", "COMMENT_VK", "COMMITTED_VK", "COMMIT_VK", "COMPATIBILITY_VK", "COMPILATION_UNIT", "COMPILER_PARAMETER", "COMPILE_VK", "COMPOUND_DML", "COMPOUND_VK", "CONDITIONAL_INSERT", "CONSTANT_VK", "CONSTRAINT_NAME", "CONSTRUCTOR_SPEC", "CONSTRUCTOR_VK", "CONTENT_VK", "CONTEXT_VK", "CONTINUE_VK", "CONVERT_VK", "CORRUPT_XID_ALL_VK", "CORRUPT_XID_VK", "COST_CLASS_NAME", "COST_VK", "COUNT_VK", "CREATE_FUNCTION", "CREATE_PACKAGE_BODY", "CREATE_PACKAGE_SPEC", "CREATE_PROCEDURE", "CREATE_SEQUENCE", "CREATE_TRIGGER", "CREATE_TYPE_BODY", "CREATE_TYPE_SPEC", "CROSS_VK", "CUBE_VK", "CURRENT_USER_VK", "CURRENT_VK", "CURSOR_BASED_FOR", "CURSOR_DECLARE", "CURSOR_NAME", "CUSTOMDATUM_VK", "CUSTOM_TYPE", "CYCLE_VK", "C_VK", "DATABASE_VK", "DATETIME_OP", "DAY_VK", "DBTIMEZONE_VK", "DB_ROLE_CHANGE_VK", "DDL_VK", "DEBUG_VK", "DECIMAL_VK", "DECOMPOSE_VK", "DECREMENT_VK", "DEC_VK", "DEFAULTS_VK", "DEFAULT_VALUE", "DEFERRED_VK", "DEFINER_VK", "DENSE_RANK_VK", "DEPENDENT_HANDLING", "DEPTH_VK", "DETERMINISTIC_VK", "DIMENSION_VK", "DIRECT_MODE", "DISABLE_VK", "DISASSOCIATE_VK", "DML_EVENT", "DML_EVENT_ELEMENT", "DOCUMENT_VK", "DOT_ASTERISK", "DOUBLE_VK", "DROP_FUNCTION", "DROP_PACKAGE", "DROP_PROCEDURE", "DROP_SEQUENCE", "DROP_TRIGGER", "DROP_TYPE", "DSINTERVAL_UNCONSTRAINED_VK", "DYNAMIC_RETURN", "ELEMENT", "ELEMENTS_MODE", "ELEMENT_SPEC", "ENABLE_VK", "ENCODING_VK", "ENTITYESCAPING_VK", "EVALNAME_VK", "EXCEPTIONS_VK", "EXCEPTION_DECLARE", "EXCEPTION_INIT_VK", "EXCEPTION_NAME", "EXCLUDE_VK", "EXECUTE_VK", "EXIT_VK", "EXPLAIN_STATEMENT", "EXPR", "EXPR_LIST", "EXTERNAL_MODE", "EXTERNAL_VK", "EXTRACT_VK", "FACTORING", "FIELDS", "FIELD_SPEC", "FINAL_VK", "FIRST_VALUE_VK", "FIRST_VK", "FLOAT_VK", "FOLLOWING_VK", "FOLLOWS_VK", "FORALL_VK", "FORCE_VK", "FOR_EACH_ROW", "FOR_LOOP", "FOR_MULTI_COLUMN", "FOR_SINGLE_COLUMN", "FULL_VK", "FUNCTION_ENABLING_OVER", "FUNCTION_ENABLING_USING", "FUNCTION_ENABLING_WITHIN_OR_OVER", "FUNCTION_NAME", "FUNCTION_SPEC", "GROUPING_VK", "GROUPIN_SET", "GROUP_BY_ELEMENT", "HASH_VK", "HIDE_VK", "HIERARCHICAL", "HOSTED_VARIABLE", "HOSTED_VARIABLE_NAME", "HOSTED_VARIABLE_ROUTINE_CALL", "HOUR_VK", "ID", "IGNORE_VK", "IMMEDIATE_VK", "IMPLEMENTATION_TYPE_NAME", "INCLUDE_VK", "INCLUDING_VK", "INCREMENT_VK", "INDENT_VK", "INDEXED_BY", "INDEXED_FOR", "INDEX_NAME", "INDICES_BOUND", "INLINE_VK", "INNER_VK", "INOUT_VK", "INSTANTIABLE_VK", "INSTEAD_VK", "INTEGER_VK", "INTERVAL_DATATYPE", "INT_VK", "INVALIDATE_VK", "ISOLATION_VK", "IS_A_SET", "IS_EMPTY", "IS_INFINITE", "IS_NAN", "IS_NOT_A_SET", "IS_NOT_EMPTY", "IS_NOT_INFINITE", "IS_NOT_NAN", "IS_NOT_NULL", "IS_NOT_OF_TYPE", "IS_NOT_PRESENT", "IS_NULL", "IS_OF_TYPE", "IS_PRESENT", "ITERATE_VK", "JAVA_VK", "JOIN_DEF", "KEEP_VK", "LABEL_DECLARE", "LABEL_NAME", "LANGUAGE_VK", "LAST_VALUE_VK", "LAST_VK", "LEADING_VK", "LEFT_VK", "LIBRARY_VK", "LIKE2_VK", "LIKE4_VK", "LIKEC_VK", "LIMIT_VK", "LINK_NAME", "LOCAL_VK", "LOCK_TABLE_ELEMENT", "LOGIC_EXPR", "LOGOFF_VK", "LOGON_VK", "LOG_VK", "LONG_VK", "LOOP_VK", "MAIN_MODEL", "MAIN_MODEL_NAME", "MAP_VK", "MAXVALUE_VK", "MEASURES_VK", "MEMBER_VK", "MERGE_INSERT", "MERGE_UPDATE", "MERGE_VK", "MINUTE_VK", "MINVALUE_VK", "MLSLABEL_VK", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_EXPRESSION", "MODEL_RULE", "MODEL_RULES", "MODIFIER", "MODIFY_VK", "MONTH_VK", "MULTI_TABLE_MODE", "NAME_VK", "NATIVE_DATATYPE", "NATURALN_VK", "NATURAL_VK", "NAV_VK", "NCHAR_CS_VK", "NCHAR_VK", "NCLOB_VK", "NESTED_TABLE_TYPE_DEF", "NESTED_VK", "NEW_VK", "NOAUDIT_VK", "NOCACHE_VK", "NOCOPY_VK", "NOCYCLE_VK", "NOENTITYESCAPING_VK", "NOMAXVALUE_VK", "NOMINVALUE_VK", "NON_DML", "NOORDER_VK", "NOSCHEMACHECK_VK", "NOT_BETWEEN", "NOT_IN", "NOT_LIKE", "NO_VK", "NULLS_VK", "NUMBER_VK", "NUMERIC_VK", "NVARCHAR2_VK", "OBJECT_AS", "OBJECT_MEMBERS", "OBJECT_TYPE_DEF", "OBJECT_VK", "OFF_VK", "OLD_VK", "ONLY_VK", "OPEN_VK", "ORADATA_VK", "ORDER_BY_ELEMENT", "ORDER_BY_ELEMENTS", "ORDINALITY_VK", "OUT_VK", "OVERRIDING_VK", "OVER_VK", "PACKAGE_NAME", "PACKAGE_VK", "PARALLEL_ENABLE_VK", "PARAMETER", "PARAMETERS", "PARAMETERS_VK", "PARAMETER_NAME", "PARENT_VK", "PARTITION_VK", "PASSING_VK", "PERCENT_FOUND_VK", "PERCENT_ISOPEN_VK", "PERCENT_NOTFOUND_VK", "PERCENT_ROWCOUNT_VK", "PERCENT_ROWTYPE_VK", "PERCENT_TYPE_VK", "PIPELINED_VK", "PIVOT_ALIAS", "PIVOT_ELEMENT", "PIVOT_IN_ELEMENT", "PIVOT_VK", "PLS_INTEGER_VK", "POSITIVEN_VK", "POSITIVE_VK", "PRAGMA_DECLARE", "PRAGMA_VK", "PRECEDING_VK", "PRECISION", "PRECISION_VK", "PREDICTION_FUNCTION", "PROCEDURE_NAME", "PROCEDURE_SPEC", "QUERY_NAME", "RAISE_VK", "RANGE_VK", "RAW_VK", "READ_VK", "REAL_VK", "RECORD_NAME", "RECORD_TYPE_DECLARE", "RECORD_VAR_DECLARE", "REFERENCE_MODEL_NAME", "REFERENCE_VK", "REFERENCING_VK", "REF_VK", "REJECT_VK", "RELIES_ON_VK", "RENAME_VK", "REPLACE_VK", "RESPECT_VK", "RESTRICT_REFERENCES_VK", "RESULT_CACHE_VK", "RETURN_VK", "REUSE_VK", "REVERSE_VK", "RIGHT_VK", "ROLLBACK_SEGMENT_NAME", "ROLLBACK_VK", "ROLLUP_VK", "ROUTINE_CALL", "ROUTINE_NAME", "ROWID_VK", "ROWS_VK", "ROW_VK", "RULES_VK", "SAMPLE_VK", "SAVEPOINT_NAME", "SAVEPOINT_VK", "SCHEMACHECK_VK", "SCHEMA_NAME", "SCHEMA_VK", "SCN_VK", "SEARCHED_CASE", "SEARCH_VK", "SECOND_VK", "SEED_VK", "SELECTED_TABLEVIEW", "SELECT_BASED_FOR", "SELECT_ITEM", "SELECT_LIST", "SELECT_MODE", "SELECT_STATEMENT", "SELF_VK", "SEQUENCE_NAME", "SEQUENCE_VK", "SEQUENTIAL_VK", "SERIALIZABLE_VK", "SERIALLY_REUSABLE_VK", "SERVERERROR_VK", "SESSIONTIMEZONE_VK", "SET_CONSTRAINT", "SET_SERVEROUTPUT", "SET_TRANSACTION", "SET_VK", "SHOW_VK", "SHUTDOWN_VK", "SIBLINGS_VK", "SIGNTYPE_VK", "SIMPLE_BOUND", "SIMPLE_CASE", "SIMPLE_DML", "SIMPLE_INTEGER_VK", "SINGLE_TABLE_MODE", "SINGLE_VK", "SKIP_VK", "SMALLINT_VK", "SOME_VK", "SPECIFICATION_VK", "SQLDATA_VK", "SQL_SCRIPT", "STANDALONE_VK", "STANDARD_FUNCTION", "STARTUP_VK", "STATEMENTS", "STATIC_RETURNING", "STATIC_VK", "STATISTICS_VK", "STREAMING_CLAUSE", "STRING_VK", "SUBMULTISET_VK", "SUBPARTITION_VK", "SUBQUERY", "SUBTYPE_DECLARE", "SUSPEND_VK", "TABLEVIEW_NAME", "TABLE_ELEMENT", "TABLE_EXPRESSION", "TABLE_REF", "TABLE_REF_ELEMENT", "TABLE_TYPE_DECLARE", "TABLE_VAR_DECLARE", "TABLE_VAR_NAME", "THREE_DOTS", "TIMESTAMP_LTZ_UNCONSTRAINED_VK", "TIMESTAMP_TZ_UNCONSTRAINED_VK", "TIMESTAMP_UNCONSTRAINED_VK", "TIMESTAMP_VK", "TIMEZONE_ABBR_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", "TIMEZONE_REGION_VK", "TIME_VK", "TRAILING_VK", "TRANSLATE_VK", "TREAT_VK", "TRIGGER_NAME", "TRIM_VK", "TRUNCATE_VK", "TYPE_BODY_ELEMENTS", "TYPE_NAME", "TYPE_VK", "UNARY_OPERATOR", "UNBOUNDED_VK", "UNDER_VK", "UNLIMITED_VK", "UNPIVOT_IN_ELEMENT", "UNPIVOT_VK", "UNTIL_VK", "UPDATED_VK", "UPSERT_VK", "UROWID_VK", "USING_MODE", "VALIDATE_VK", "VALUES_BOUND", "VALUE_VK", "VARCHAR2_VK", "VARCHAR_VK", "VARIABLE_DECLARE", "VARIABLE_NAME", "VARR_ARRAY_DEF", "VECTOR_EXPR", "VERSIONS_VK", "VERSION_VK", "WAIT_VK", "WELLFORMED_VK", "WHILE_LOOP", "WITHIN_VK", "WORK_VK", "WRITE_VK", "XMLAGG_VK", "XMLATTRIBUTES_VK", "XMLCAST_VK", "XMLCOLATTVAL_VK", "XMLELEMENT_VK", "XMLEXISTS_VK", "XMLFOREST_VK", "XMLNAMESPACES_VK", "XMLPARSE_VK", "XMLPI_VK", "XMLQUERY_VK", "XMLROOT_VK", "XMLSERIALIZE_VK", "XMLTABLE_VK", "XML_ALIAS", "XML_COLUMN", "XML_COLUMN_NAME", "XML_ELEMENT", "XML_VK", "YEAR_VK", "YES_VK", "YMINTERVAL_UNCONSTRAINED_VK"
    };

    public static final int EOF=-1;
    public static final int AMPERSAND=4;
    public static final int APPROXIMATE_NUM_LIT=5;
    public static final int ASSIGN_OP=6;
    public static final int ASTERISK=7;
    public static final int AT_SIGN=8;
    public static final int BINDVAR=9;
    public static final int BIT_STRING_LIT=10;
    public static final int CARRET_OPERATOR_PART=11;
    public static final int CHAR_STRING=12;
    public static final int CHAR_STRING_PERL=13;
    public static final int COLON=14;
    public static final int COMMA=15;
    public static final int COMMENT=16;
    public static final int CONCATENATION_OP=17;
    public static final int DELIMITED_ID=18;
    public static final int DOUBLE_ASTERISK=19;
    public static final int DOUBLE_PERIOD=20;
    public static final int EQUALS_OP=21;
    public static final int EXACT_NUM_LIT=22;
    public static final int EXCLAMATION_OPERATOR_PART=23;
    public static final int FOR_NOTATION=24;
    public static final int GREATER_THAN_OP=25;
    public static final int GREATER_THAN_OR_EQUALS_OP=26;
    public static final int HEX_STRING_LIT=27;
    public static final int INTRODUCER=28;
    public static final int LEFT_BRACKET=29;
    public static final int LEFT_PAREN=30;
    public static final int LESS_THAN_OP=31;
    public static final int LESS_THAN_OR_EQUALS_OP=32;
    public static final int MINUS_SIGN=33;
    public static final int NATIONAL_CHAR_STRING_LIT=34;
    public static final int NEWLINE=35;
    public static final int NOT_EQUAL_OP=36;
    public static final int PERCENT=37;
    public static final int PERIOD=38;
    public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=39;
    public static final int PLSQL_NON_RESERVED_ELSIF=40;
    public static final int PLSQL_NON_RESERVED_MODEL=41;
    public static final int PLSQL_NON_RESERVED_PIVOT=42;
    public static final int PLSQL_NON_RESERVED_UNPIVOT=43;
    public static final int PLSQL_NON_RESERVED_USING=44;
    public static final int PLSQL_RESERVED_CLUSTERS=45;
    public static final int PLSQL_RESERVED_COLAUTH=46;
    public static final int PLSQL_RESERVED_COMPRESS=47;
    public static final int PLSQL_RESERVED_CRASH=48;
    public static final int PLSQL_RESERVED_EXCLUSIVE=49;
    public static final int PLSQL_RESERVED_IDENTIFIED=50;
    public static final int PLSQL_RESERVED_IF=51;
    public static final int PLSQL_RESERVED_INDEX=52;
    public static final int PLSQL_RESERVED_INDEXES=53;
    public static final int PLSQL_RESERVED_LOCK=54;
    public static final int PLSQL_RESERVED_MINUS=55;
    public static final int PLSQL_RESERVED_MODE=56;
    public static final int PLSQL_RESERVED_NOCOMPRESS=57;
    public static final int PLSQL_RESERVED_NOWAIT=58;
    public static final int PLSQL_RESERVED_RESOURCE=59;
    public static final int PLSQL_RESERVED_SHARE=60;
    public static final int PLSQL_RESERVED_START=61;
    public static final int PLSQL_RESERVED_TABAUTH=62;
    public static final int PLSQL_RESERVED_VIEWS=63;
    public static final int PLUS_SIGN=64;
    public static final int PROMPT=65;
    public static final int QS_ANGLE=66;
    public static final int QS_BRACE=67;
    public static final int QS_BRACK=68;
    public static final int QS_OTHER=69;
    public static final int QS_OTHER_CH=70;
    public static final int QS_PAREN=71;
    public static final int QUESTION_MARK=72;
    public static final int QUOTE=73;
    public static final int REGULAR_ID=74;
    public static final int RIGHT_BRACKET=75;
    public static final int RIGHT_PAREN=76;
    public static final int SEMICOLON=77;
    public static final int SEPARATOR=78;
    public static final int SIMPLE_LETTER=79;
    public static final int SOLIDUS=80;
    public static final int SPACE=81;
    public static final int SQL92_RESERVED_ALL=82;
    public static final int SQL92_RESERVED_ALTER=83;
    public static final int SQL92_RESERVED_AND=84;
    public static final int SQL92_RESERVED_ANY=85;
    public static final int SQL92_RESERVED_AS=86;
    public static final int SQL92_RESERVED_ASC=87;
    public static final int SQL92_RESERVED_BEGIN=88;
    public static final int SQL92_RESERVED_BETWEEN=89;
    public static final int SQL92_RESERVED_BY=90;
    public static final int SQL92_RESERVED_CASE=91;
    public static final int SQL92_RESERVED_CHECK=92;
    public static final int SQL92_RESERVED_CONNECT=93;
    public static final int SQL92_RESERVED_CREATE=94;
    public static final int SQL92_RESERVED_CURRENT=95;
    public static final int SQL92_RESERVED_CURSOR=96;
    public static final int SQL92_RESERVED_DATE=97;
    public static final int SQL92_RESERVED_DECLARE=98;
    public static final int SQL92_RESERVED_DEFAULT=99;
    public static final int SQL92_RESERVED_DELETE=100;
    public static final int SQL92_RESERVED_DESC=101;
    public static final int SQL92_RESERVED_DISTINCT=102;
    public static final int SQL92_RESERVED_DROP=103;
    public static final int SQL92_RESERVED_ELSE=104;
    public static final int SQL92_RESERVED_END=105;
    public static final int SQL92_RESERVED_EXCEPTION=106;
    public static final int SQL92_RESERVED_EXISTS=107;
    public static final int SQL92_RESERVED_FALSE=108;
    public static final int SQL92_RESERVED_FETCH=109;
    public static final int SQL92_RESERVED_FOR=110;
    public static final int SQL92_RESERVED_FROM=111;
    public static final int SQL92_RESERVED_GOTO=112;
    public static final int SQL92_RESERVED_GRANT=113;
    public static final int SQL92_RESERVED_GROUP=114;
    public static final int SQL92_RESERVED_HAVING=115;
    public static final int SQL92_RESERVED_IN=116;
    public static final int SQL92_RESERVED_INSERT=117;
    public static final int SQL92_RESERVED_INTERSECT=118;
    public static final int SQL92_RESERVED_INTO=119;
    public static final int SQL92_RESERVED_IS=120;
    public static final int SQL92_RESERVED_LIKE=121;
    public static final int SQL92_RESERVED_NOT=122;
    public static final int SQL92_RESERVED_NULL=123;
    public static final int SQL92_RESERVED_OF=124;
    public static final int SQL92_RESERVED_ON=125;
    public static final int SQL92_RESERVED_OPTION=126;
    public static final int SQL92_RESERVED_OR=127;
    public static final int SQL92_RESERVED_ORDER=128;
    public static final int SQL92_RESERVED_OVERLAPS=129;
    public static final int SQL92_RESERVED_PRIOR=130;
    public static final int SQL92_RESERVED_PROCEDURE=131;
    public static final int SQL92_RESERVED_PUBLIC=132;
    public static final int SQL92_RESERVED_REVOKE=133;
    public static final int SQL92_RESERVED_SELECT=134;
    public static final int SQL92_RESERVED_SIZE=135;
    public static final int SQL92_RESERVED_TABLE=136;
    public static final int SQL92_RESERVED_THE=137;
    public static final int SQL92_RESERVED_THEN=138;
    public static final int SQL92_RESERVED_TO=139;
    public static final int SQL92_RESERVED_TRUE=140;
    public static final int SQL92_RESERVED_UNION=141;
    public static final int SQL92_RESERVED_UNIQUE=142;
    public static final int SQL92_RESERVED_UPDATE=143;
    public static final int SQL92_RESERVED_VALUES=144;
    public static final int SQL92_RESERVED_VIEW=145;
    public static final int SQL92_RESERVED_WHEN=146;
    public static final int SQL92_RESERVED_WHERE=147;
    public static final int SQL92_RESERVED_WITH=148;
    public static final int TILDE_OPERATOR_PART=149;
    public static final int UNDERSCORE=150;
    public static final int UNSIGNED_INTEGER=151;
    public static final int VERTICAL_BAR=152;
    public static final int ZV=153;
    public static final int ADD_VK=154;
    public static final int AFTER_EACH_ROW=155;
    public static final int AFTER_STATEMENT=156;
    public static final int AFTER_VK=157;
    public static final int AGENT_VK=158;
    public static final int AGGREGATE_VK=159;
    public static final int ALIAS=160;
    public static final int ALTER_ATTRIBUTE=161;
    public static final int ALTER_COLLECTION=162;
    public static final int ALTER_FUNCTION=163;
    public static final int ALTER_METHOD=164;
    public static final int ALTER_METHOD_ELEMENT=165;
    public static final int ALTER_PACKAGE=166;
    public static final int ALTER_PROCEDURE=167;
    public static final int ALTER_SEQUENCE=168;
    public static final int ALTER_TRIGGER=169;
    public static final int ALTER_TYPE=170;
    public static final int ANALYZE_VK=171;
    public static final int ANY_ELEMENT=172;
    public static final int ANY_MODE=173;
    public static final int ARGUMENT=175;
    public static final int ARGUMENTS=176;
    public static final int ASSIGN=177;
    public static final int ASSOCIATE_VK=178;
    public static final int ATTRIBUTE=180;
    public static final int ATTRIBUTES=181;
    public static final int ATTRIBUTE_NAME=182;
    public static final int AT_VK=184;
    public static final int AUDIT_VK=185;
    public static final int AUTHID_VK=186;
    public static final int AUTOMATIC_VK=187;
    public static final int AUTONOMOUS_TRANSACTION_VK=188;
    public static final int AUTO_VK=189;
    public static final int BATCH_VK=190;
    public static final int BEFORE_EACH_ROW=191;
    public static final int BEFORE_STATEMENT=192;
    public static final int BEFORE_VK=193;
    public static final int BFILE_VK=194;
    public static final int BINARY_DOUBLE_VK=195;
    public static final int BINARY_FLOAT_VK=196;
    public static final int BINARY_INTEGER_VK=197;
    public static final int BIT_VK=199;
    public static final int BLOB_VK=200;
    public static final int BLOCK=201;
    public static final int BLOCK_VK=202;
    public static final int BODY=203;
    public static final int BODY_MODE=204;
    public static final int BODY_VK=205;
    public static final int BOOLEAN_VK=206;
    public static final int BOTH_VK=207;
    public static final int BREADTH_VK=208;
    public static final int BULK_VK=209;
    public static final int BYTE_VK=210;
    public static final int CACHE_VK=211;
    public static final int CALL_MODE=212;
    public static final int CALL_VK=213;
    public static final int CANONICAL_VK=214;
    public static final int CASCADE_VK=216;
    public static final int CASCATED_ELEMENT=217;
    public static final int CAST_VK=218;
    public static final int CHARACTER_VK=219;
    public static final int CHAR_CS_VK=220;
    public static final int CHAR_SET_NAME=221;
    public static final int CHAR_VK=224;
    public static final int CHR_VK=225;
    public static final int CLOB_VK=226;
    public static final int CLOSE_VK=227;
    public static final int CLUSTER_VK=228;
    public static final int COLLECTION_MODE=229;
    public static final int COLLECTION_NAME=230;
    public static final int COLLECT_VK=231;
    public static final int COLUMNS=233;
    public static final int COLUMN_NAME=234;
    public static final int COMMENT_VK=236;
    public static final int COMMITTED_VK=237;
    public static final int COMMIT_VK=238;
    public static final int COMPATIBILITY_VK=239;
    public static final int COMPILATION_UNIT=240;
    public static final int COMPILER_PARAMETER=241;
    public static final int COMPILE_VK=242;
    public static final int COMPOUND_DML=243;
    public static final int COMPOUND_VK=244;
    public static final int CONDITIONAL_INSERT=246;
    public static final int CONSTANT_VK=247;
    public static final int CONSTRAINT_NAME=248;
    public static final int CONSTRUCTOR_SPEC=249;
    public static final int CONSTRUCTOR_VK=250;
    public static final int CONTENT_VK=251;
    public static final int CONTEXT_VK=252;
    public static final int CONTINUE_VK=253;
    public static final int CONVERT_VK=254;
    public static final int CORRUPT_XID_ALL_VK=255;
    public static final int CORRUPT_XID_VK=256;
    public static final int COST_CLASS_NAME=257;
    public static final int COST_VK=258;
    public static final int COUNT_VK=259;
    public static final int CREATE_FUNCTION=260;
    public static final int CREATE_PACKAGE_BODY=261;
    public static final int CREATE_PACKAGE_SPEC=262;
    public static final int CREATE_PROCEDURE=263;
    public static final int CREATE_SEQUENCE=264;
    public static final int CREATE_TRIGGER=265;
    public static final int CREATE_TYPE_BODY=266;
    public static final int CREATE_TYPE_SPEC=267;
    public static final int CROSS_VK=268;
    public static final int CUBE_VK=269;
    public static final int CURRENT_USER_VK=270;
    public static final int CURRENT_VK=271;
    public static final int CURSOR_BASED_FOR=272;
    public static final int CURSOR_DECLARE=273;
    public static final int CURSOR_NAME=274;
    public static final int CUSTOMDATUM_VK=275;
    public static final int CUSTOM_TYPE=276;
    public static final int CYCLE_VK=277;
    public static final int C_VK=278;
    public static final int DATABASE_VK=279;
    public static final int DATETIME_OP=280;
    public static final int DAY_VK=281;
    public static final int DBTIMEZONE_VK=282;
    public static final int DB_ROLE_CHANGE_VK=283;
    public static final int DDL_VK=284;
    public static final int DEBUG_VK=285;
    public static final int DECIMAL_VK=286;
    public static final int DECOMPOSE_VK=287;
    public static final int DECREMENT_VK=288;
    public static final int DEC_VK=289;
    public static final int DEFAULTS_VK=290;
    public static final int DEFAULT_VALUE=291;
    public static final int DEFERRED_VK=292;
    public static final int DEFINER_VK=293;
    public static final int DENSE_RANK_VK=295;
    public static final int DEPENDENT_HANDLING=296;
    public static final int DEPTH_VK=297;
    public static final int DETERMINISTIC_VK=298;
    public static final int DIMENSION_VK=299;
    public static final int DIRECT_MODE=300;
    public static final int DISABLE_VK=301;
    public static final int DISASSOCIATE_VK=302;
    public static final int DML_EVENT=303;
    public static final int DML_EVENT_ELEMENT=304;
    public static final int DOCUMENT_VK=305;
    public static final int DOT_ASTERISK=306;
    public static final int DOUBLE_VK=307;
    public static final int DROP_FUNCTION=308;
    public static final int DROP_PACKAGE=309;
    public static final int DROP_PROCEDURE=310;
    public static final int DROP_SEQUENCE=311;
    public static final int DROP_TRIGGER=312;
    public static final int DROP_TYPE=313;
    public static final int DSINTERVAL_UNCONSTRAINED_VK=314;
    public static final int DYNAMIC_RETURN=315;
    public static final int ELEMENT=316;
    public static final int ELEMENTS_MODE=317;
    public static final int ELEMENT_SPEC=318;
    public static final int ENABLE_VK=319;
    public static final int ENCODING_VK=320;
    public static final int ENTITYESCAPING_VK=321;
    public static final int EVALNAME_VK=323;
    public static final int EXCEPTIONS_VK=325;
    public static final int EXCEPTION_DECLARE=326;
    public static final int EXCEPTION_INIT_VK=327;
    public static final int EXCEPTION_NAME=328;
    public static final int EXCLUDE_VK=330;
    public static final int EXECUTE_VK=331;
    public static final int EXIT_VK=332;
    public static final int EXPLAIN_STATEMENT=333;
    public static final int EXPR=334;
    public static final int EXPR_LIST=335;
    public static final int EXTERNAL_MODE=336;
    public static final int EXTERNAL_VK=337;
    public static final int EXTRACT_VK=338;
    public static final int FACTORING=339;
    public static final int FIELDS=340;
    public static final int FIELD_SPEC=341;
    public static final int FINAL_VK=342;
    public static final int FIRST_VALUE_VK=343;
    public static final int FIRST_VK=344;
    public static final int FLOAT_VK=345;
    public static final int FOLLOWING_VK=346;
    public static final int FOLLOWS_VK=347;
    public static final int FORALL_VK=348;
    public static final int FORCE_VK=349;
    public static final int FOR_EACH_ROW=350;
    public static final int FOR_LOOP=351;
    public static final int FOR_MULTI_COLUMN=352;
    public static final int FOR_SINGLE_COLUMN=353;
    public static final int FULL_VK=354;
    public static final int FUNCTION_ENABLING_OVER=355;
    public static final int FUNCTION_ENABLING_USING=356;
    public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=357;
    public static final int FUNCTION_NAME=358;
    public static final int FUNCTION_SPEC=359;
    public static final int GROUPING_VK=362;
    public static final int GROUPIN_SET=363;
    public static final int GROUP_BY_ELEMENT=364;
    public static final int HASH_VK=365;
    public static final int HIDE_VK=366;
    public static final int HIERARCHICAL=367;
    public static final int HOSTED_VARIABLE=368;
    public static final int HOSTED_VARIABLE_NAME=369;
    public static final int HOSTED_VARIABLE_ROUTINE_CALL=370;
    public static final int HOUR_VK=371;
    public static final int ID=372;
    public static final int IGNORE_VK=373;
    public static final int IMMEDIATE_VK=374;
    public static final int IMPLEMENTATION_TYPE_NAME=375;
    public static final int INCLUDE_VK=376;
    public static final int INCLUDING_VK=377;
    public static final int INCREMENT_VK=378;
    public static final int INDENT_VK=379;
    public static final int INDEXED_BY=380;
    public static final int INDEXED_FOR=381;
    public static final int INDEX_NAME=382;
    public static final int INDICES_BOUND=383;
    public static final int INLINE_VK=384;
    public static final int INNER_VK=385;
    public static final int INOUT_VK=386;
    public static final int INSTANTIABLE_VK=387;
    public static final int INSTEAD_VK=388;
    public static final int INTEGER_VK=389;
    public static final int INTERVAL_DATATYPE=390;
    public static final int INT_VK=392;
    public static final int INVALIDATE_VK=393;
    public static final int ISOLATION_VK=394;
    public static final int IS_A_SET=395;
    public static final int IS_EMPTY=396;
    public static final int IS_INFINITE=397;
    public static final int IS_NAN=398;
    public static final int IS_NOT_A_SET=399;
    public static final int IS_NOT_EMPTY=400;
    public static final int IS_NOT_INFINITE=401;
    public static final int IS_NOT_NAN=402;
    public static final int IS_NOT_NULL=403;
    public static final int IS_NOT_OF_TYPE=404;
    public static final int IS_NOT_PRESENT=405;
    public static final int IS_NULL=406;
    public static final int IS_OF_TYPE=407;
    public static final int IS_PRESENT=408;
    public static final int ITERATE_VK=409;
    public static final int JAVA_VK=410;
    public static final int JOIN_DEF=411;
    public static final int KEEP_VK=412;
    public static final int LABEL_DECLARE=413;
    public static final int LABEL_NAME=414;
    public static final int LANGUAGE_VK=415;
    public static final int LAST_VALUE_VK=416;
    public static final int LAST_VK=417;
    public static final int LEADING_VK=418;
    public static final int LEFT_VK=421;
    public static final int LIBRARY_VK=424;
    public static final int LIKE2_VK=425;
    public static final int LIKE4_VK=426;
    public static final int LIKEC_VK=427;
    public static final int LIMIT_VK=428;
    public static final int LINK_NAME=429;
    public static final int LOCAL_VK=430;
    public static final int LOCK_TABLE_ELEMENT=431;
    public static final int LOGIC_EXPR=432;
    public static final int LOGOFF_VK=433;
    public static final int LOGON_VK=434;
    public static final int LOG_VK=435;
    public static final int LONG_VK=436;
    public static final int LOOP_VK=437;
    public static final int MAIN_MODEL=438;
    public static final int MAIN_MODEL_NAME=439;
    public static final int MAP_VK=440;
    public static final int MAXVALUE_VK=441;
    public static final int MEASURES_VK=442;
    public static final int MEMBER_VK=443;
    public static final int MERGE_INSERT=444;
    public static final int MERGE_UPDATE=445;
    public static final int MERGE_VK=446;
    public static final int MINUTE_VK=448;
    public static final int MINVALUE_VK=449;
    public static final int MLSLABEL_VK=450;
    public static final int MODEL_COLUMN=451;
    public static final int MODEL_COLUMNS=452;
    public static final int MODEL_EXPRESSION=453;
    public static final int MODEL_RULE=454;
    public static final int MODEL_RULES=455;
    public static final int MODIFIER=456;
    public static final int MODIFY_VK=457;
    public static final int MONTH_VK=458;
    public static final int MULTI_TABLE_MODE=459;
    public static final int NAME_VK=460;
    public static final int NATIVE_DATATYPE=462;
    public static final int NATURALN_VK=463;
    public static final int NATURAL_VK=464;
    public static final int NAV_VK=465;
    public static final int NCHAR_CS_VK=466;
    public static final int NCHAR_VK=467;
    public static final int NCLOB_VK=468;
    public static final int NESTED_TABLE_TYPE_DEF=469;
    public static final int NESTED_VK=470;
    public static final int NEW_VK=471;
    public static final int NOAUDIT_VK=472;
    public static final int NOCACHE_VK=473;
    public static final int NOCOPY_VK=474;
    public static final int NOCYCLE_VK=475;
    public static final int NOENTITYESCAPING_VK=476;
    public static final int NOMAXVALUE_VK=477;
    public static final int NOMINVALUE_VK=478;
    public static final int NON_DML=479;
    public static final int NOORDER_VK=480;
    public static final int NOSCHEMACHECK_VK=481;
    public static final int NOT_BETWEEN=482;
    public static final int NOT_IN=484;
    public static final int NOT_LIKE=485;
    public static final int NO_VK=486;
    public static final int NULLS_VK=487;
    public static final int NUMBER_VK=488;
    public static final int NUMERIC_VK=489;
    public static final int NVARCHAR2_VK=490;
    public static final int OBJECT_AS=491;
    public static final int OBJECT_MEMBERS=492;
    public static final int OBJECT_TYPE_DEF=493;
    public static final int OBJECT_VK=494;
    public static final int OFF_VK=495;
    public static final int OLD_VK=496;
    public static final int ONLY_VK=497;
    public static final int OPEN_VK=498;
    public static final int ORADATA_VK=499;
    public static final int ORDER_BY_ELEMENT=500;
    public static final int ORDER_BY_ELEMENTS=501;
    public static final int ORDINALITY_VK=502;
    public static final int OUT_VK=503;
    public static final int OVERRIDING_VK=504;
    public static final int OVER_VK=505;
    public static final int PACKAGE_NAME=506;
    public static final int PACKAGE_VK=507;
    public static final int PARALLEL_ENABLE_VK=508;
    public static final int PARAMETER=509;
    public static final int PARAMETERS=510;
    public static final int PARAMETERS_VK=511;
    public static final int PARAMETER_NAME=512;
    public static final int PARENT_VK=513;
    public static final int PARTITION_VK=514;
    public static final int PASSING_VK=515;
    public static final int PERCENT_FOUND_VK=517;
    public static final int PERCENT_ISOPEN_VK=518;
    public static final int PERCENT_NOTFOUND_VK=519;
    public static final int PERCENT_ROWCOUNT_VK=520;
    public static final int PERCENT_ROWTYPE_VK=521;
    public static final int PERCENT_TYPE_VK=522;
    public static final int PIPELINED_VK=524;
    public static final int PIVOT_ALIAS=525;
    public static final int PIVOT_ELEMENT=526;
    public static final int PIVOT_IN_ELEMENT=527;
    public static final int PIVOT_VK=528;
    public static final int PLS_INTEGER_VK=543;
    public static final int POSITIVEN_VK=545;
    public static final int POSITIVE_VK=546;
    public static final int PRAGMA_DECLARE=547;
    public static final int PRAGMA_VK=548;
    public static final int PRECEDING_VK=549;
    public static final int PRECISION=550;
    public static final int PRECISION_VK=551;
    public static final int PREDICTION_FUNCTION=552;
    public static final int PROCEDURE_NAME=553;
    public static final int PROCEDURE_SPEC=554;
    public static final int QUERY_NAME=556;
    public static final int RAISE_VK=557;
    public static final int RANGE_VK=558;
    public static final int RAW_VK=559;
    public static final int READ_VK=560;
    public static final int REAL_VK=561;
    public static final int RECORD_NAME=562;
    public static final int RECORD_TYPE_DECLARE=563;
    public static final int RECORD_VAR_DECLARE=564;
    public static final int REFERENCE_MODEL_NAME=565;
    public static final int REFERENCE_VK=566;
    public static final int REFERENCING_VK=567;
    public static final int REF_VK=568;
    public static final int REJECT_VK=570;
    public static final int RELIES_ON_VK=571;
    public static final int RENAME_VK=572;
    public static final int REPLACE_VK=573;
    public static final int RESPECT_VK=574;
    public static final int RESTRICT_REFERENCES_VK=575;
    public static final int RESULT_CACHE_VK=576;
    public static final int RETURN_VK=577;
    public static final int REUSE_VK=578;
    public static final int REVERSE_VK=579;
    public static final int RIGHT_VK=582;
    public static final int ROLLBACK_SEGMENT_NAME=583;
    public static final int ROLLBACK_VK=584;
    public static final int ROLLUP_VK=585;
    public static final int ROUTINE_CALL=586;
    public static final int ROUTINE_NAME=587;
    public static final int ROWID_VK=588;
    public static final int ROWS_VK=589;
    public static final int ROW_VK=590;
    public static final int RULES_VK=591;
    public static final int SAMPLE_VK=592;
    public static final int SAVEPOINT_NAME=593;
    public static final int SAVEPOINT_VK=594;
    public static final int SCHEMACHECK_VK=595;
    public static final int SCHEMA_NAME=596;
    public static final int SCHEMA_VK=597;
    public static final int SCN_VK=598;
    public static final int SEARCHED_CASE=599;
    public static final int SEARCH_VK=600;
    public static final int SECOND_VK=601;
    public static final int SEED_VK=602;
    public static final int SELECTED_TABLEVIEW=603;
    public static final int SELECT_BASED_FOR=604;
    public static final int SELECT_ITEM=605;
    public static final int SELECT_LIST=606;
    public static final int SELECT_MODE=607;
    public static final int SELECT_STATEMENT=608;
    public static final int SELF_VK=609;
    public static final int SEQUENCE_NAME=611;
    public static final int SEQUENCE_VK=612;
    public static final int SEQUENTIAL_VK=613;
    public static final int SERIALIZABLE_VK=614;
    public static final int SERIALLY_REUSABLE_VK=615;
    public static final int SERVERERROR_VK=616;
    public static final int SESSIONTIMEZONE_VK=617;
    public static final int SET_CONSTRAINT=618;
    public static final int SET_SERVEROUTPUT=619;
    public static final int SET_TRANSACTION=620;
    public static final int SET_VK=621;
    public static final int SHOW_VK=622;
    public static final int SHUTDOWN_VK=623;
    public static final int SIBLINGS_VK=624;
    public static final int SIGNTYPE_VK=625;
    public static final int SIMPLE_BOUND=626;
    public static final int SIMPLE_CASE=627;
    public static final int SIMPLE_DML=628;
    public static final int SIMPLE_INTEGER_VK=629;
    public static final int SINGLE_TABLE_MODE=630;
    public static final int SINGLE_VK=631;
    public static final int SKIP_VK=632;
    public static final int SMALLINT_VK=633;
    public static final int SOME_VK=635;
    public static final int SPECIFICATION_VK=636;
    public static final int SQLDATA_VK=701;
    public static final int SQL_SCRIPT=702;
    public static final int STANDALONE_VK=703;
    public static final int STANDARD_FUNCTION=704;
    public static final int STARTUP_VK=705;
    public static final int STATEMENTS=706;
    public static final int STATIC_RETURNING=707;
    public static final int STATIC_VK=708;
    public static final int STATISTICS_VK=709;
    public static final int STREAMING_CLAUSE=710;
    public static final int STRING_VK=711;
    public static final int SUBMULTISET_VK=712;
    public static final int SUBPARTITION_VK=713;
    public static final int SUBQUERY=714;
    public static final int SUBTYPE_DECLARE=715;
    public static final int SUSPEND_VK=716;
    public static final int TABLEVIEW_NAME=717;
    public static final int TABLE_ELEMENT=718;
    public static final int TABLE_EXPRESSION=719;
    public static final int TABLE_REF=720;
    public static final int TABLE_REF_ELEMENT=721;
    public static final int TABLE_TYPE_DECLARE=722;
    public static final int TABLE_VAR_DECLARE=723;
    public static final int TABLE_VAR_NAME=724;
    public static final int THREE_DOTS=725;
    public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=726;
    public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=727;
    public static final int TIMESTAMP_UNCONSTRAINED_VK=728;
    public static final int TIMESTAMP_VK=729;
    public static final int TIMEZONE_ABBR_VK=730;
    public static final int TIMEZONE_HOUR_VK=731;
    public static final int TIMEZONE_MINUTE_VK=732;
    public static final int TIMEZONE_REGION_VK=733;
    public static final int TIME_VK=734;
    public static final int TRAILING_VK=735;
    public static final int TRANSLATE_VK=736;
    public static final int TREAT_VK=737;
    public static final int TRIGGER_NAME=738;
    public static final int TRIM_VK=739;
    public static final int TRUNCATE_VK=740;
    public static final int TYPE_BODY_ELEMENTS=741;
    public static final int TYPE_NAME=742;
    public static final int TYPE_VK=743;
    public static final int UNARY_OPERATOR=744;
    public static final int UNBOUNDED_VK=745;
    public static final int UNDER_VK=746;
    public static final int UNLIMITED_VK=747;
    public static final int UNPIVOT_IN_ELEMENT=748;
    public static final int UNPIVOT_VK=749;
    public static final int UNTIL_VK=751;
    public static final int UPDATED_VK=752;
    public static final int UPSERT_VK=753;
    public static final int UROWID_VK=754;
    public static final int USING_MODE=755;
    public static final int VALIDATE_VK=756;
    public static final int VALUES_BOUND=757;
    public static final int VALUE_VK=758;
    public static final int VARCHAR2_VK=759;
    public static final int VARCHAR_VK=760;
    public static final int VARIABLE_DECLARE=761;
    public static final int VARIABLE_NAME=762;
    public static final int VARR_ARRAY_DEF=763;
    public static final int VECTOR_EXPR=764;
    public static final int VERSIONS_VK=765;
    public static final int VERSION_VK=766;
    public static final int WAIT_VK=768;
    public static final int WELLFORMED_VK=769;
    public static final int WHILE_LOOP=770;
    public static final int WITHIN_VK=771;
    public static final int WORK_VK=772;
    public static final int WRITE_VK=773;
    public static final int XMLAGG_VK=774;
    public static final int XMLATTRIBUTES_VK=775;
    public static final int XMLCAST_VK=776;
    public static final int XMLCOLATTVAL_VK=777;
    public static final int XMLELEMENT_VK=778;
    public static final int XMLEXISTS_VK=779;
    public static final int XMLFOREST_VK=780;
    public static final int XMLNAMESPACES_VK=781;
    public static final int XMLPARSE_VK=782;
    public static final int XMLPI_VK=783;
    public static final int XMLQUERY_VK=784;
    public static final int XMLROOT_VK=785;
    public static final int XMLSERIALIZE_VK=786;
    public static final int XMLTABLE_VK=787;
    public static final int XML_ALIAS=788;
    public static final int XML_COLUMN=789;
    public static final int XML_COLUMN_NAME=790;
    public static final int XML_ELEMENT=791;
    public static final int XML_VK=792;
    public static final int YEAR_VK=793;
    public static final int YES_VK=794;
    public static final int YMINTERVAL_UNCONSTRAINED_VK=795;

    // delegates
    public PLSQLParser_PLSQLKeys gPLSQLKeys;
    public PLSQLParser_PLSQLCommons gPLSQLCommons;
    public PLSQLParser_PLSQL_DMLParser gPLSQL_DMLParser;
    public PLSQLParser_SQLPLUSParser gSQLPLUSParser;
    public Parser[] getDelegates() {
        return new Parser[] {gPLSQLKeys, gPLSQLCommons, gPLSQL_DMLParser, gSQLPLUSParser};
    }

    // delegators


    public PLSQLParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public PLSQLParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        gPLSQLKeys = new PLSQLParser_PLSQLKeys(input, state, this);
        gPLSQLCommons = new PLSQLParser_PLSQLCommons(input, state, this);
        gPLSQL_DMLParser = new PLSQLParser_PLSQL_DMLParser(input, state, this);
        gSQLPLUSParser = new PLSQLParser_SQLPLUSParser(input, state, this);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
    gPLSQLKeys.setTreeAdaptor(this.adaptor);gPLSQLCommons.setTreeAdaptor(this.adaptor);gPLSQL_DMLParser.setTreeAdaptor(this.adaptor);gSQLPLUSParser.setTreeAdaptor(this.adaptor);
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return PLSQLParser.tokenNames; }
    public String getGrammarFileName() { return "PLSQLParser.g"; }


    public static class swallow_to_semi_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "swallow_to_semi"
    // PLSQLParser.g:147:1: swallow_to_semi : (~ ( SEMICOLON ) )+ ;
    public final swallow_to_semi_return swallow_to_semi() throws RecognitionException {
        swallow_to_semi_return retval = new swallow_to_semi_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set1=null;

        Object set1_tree=null;

        try {
            // PLSQLParser.g:148:5: ( (~ ( SEMICOLON ) )+ )
            // PLSQLParser.g:148:10: (~ ( SEMICOLON ) )+
            {
            root_0 = (Object)adaptor.nil();


            // PLSQLParser.g:148:10: (~ ( SEMICOLON ) )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( ((LA1_0 >= AMPERSAND && LA1_0 <= RIGHT_PAREN)||(LA1_0 >= SEPARATOR && LA1_0 <= YMINTERVAL_UNCONSTRAINED_VK)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // PLSQLParser.g:
            	    {
            	    set1=(Token)input.LT(1);

            	    if ( (input.LA(1) >= AMPERSAND && input.LA(1) <= RIGHT_PAREN)||(input.LA(1) >= SEPARATOR && input.LA(1) <= YMINTERVAL_UNCONSTRAINED_VK) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set1)
            	        );
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "swallow_to_semi"


    public static class compilation_unit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compilation_unit"
    // PLSQLParser.g:151:1: compilation_unit : ( unit_statement )* EOF -> ^( COMPILATION_UNIT ( unit_statement )* ) ;
    public final compilation_unit_return compilation_unit() throws RecognitionException {
        compilation_unit_return retval = new compilation_unit_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF3=null;
        unit_statement_return unit_statement2 =null;


        Object EOF3_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_unit_statement=new RewriteRuleSubtreeStream(adaptor,"rule unit_statement");
        try {
            // PLSQLParser.g:152:5: ( ( unit_statement )* EOF -> ^( COMPILATION_UNIT ( unit_statement )* ) )
            // PLSQLParser.g:152:10: ( unit_statement )* EOF
            {
            // PLSQLParser.g:152:10: ( unit_statement )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==SQL92_RESERVED_ALTER||LA2_0==SQL92_RESERVED_CREATE) ) {
                    alt2=1;
                }
                else if ( (LA2_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                    alt2=1;
                }
                else if ( (LA2_0==SQL92_RESERVED_DROP||LA2_0==SQL92_RESERVED_PROCEDURE) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // PLSQLParser.g:152:10: unit_statement
            	    {
            	    pushFollow(FOLLOW_unit_statement_in_compilation_unit761);
            	    unit_statement2=unit_statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_unit_statement.add(unit_statement2.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_compilation_unit764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF3);


            // AST REWRITE
            // elements: unit_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 153:9: -> ^( COMPILATION_UNIT ( unit_statement )* )
            {
                // PLSQLParser.g:153:12: ^( COMPILATION_UNIT ( unit_statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(COMPILATION_UNIT, "COMPILATION_UNIT")
                , root_1);

                // PLSQLParser.g:153:31: ( unit_statement )*
                while ( stream_unit_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_unit_statement.nextTree());

                }
                stream_unit_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compilation_unit"


    public static class sql_script_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_script"
    // PLSQLParser.g:156:1: sql_script : ( unit_statement | sql_plus_command )* EOF -> ^( SQL_SCRIPT ( sql_plus_command )* ( unit_statement )* ) ;
    public final sql_script_return sql_script() throws RecognitionException {
        sql_script_return retval = new sql_script_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EOF6=null;
        unit_statement_return unit_statement4 =null;

        PLSQLParser_SQLPLUSParser.sql_plus_command_return sql_plus_command5 =null;


        Object EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_unit_statement=new RewriteRuleSubtreeStream(adaptor,"rule unit_statement");
        RewriteRuleSubtreeStream stream_sql_plus_command=new RewriteRuleSubtreeStream(adaptor,"rule sql_plus_command");
        try {
            // PLSQLParser.g:157:5: ( ( unit_statement | sql_plus_command )* EOF -> ^( SQL_SCRIPT ( sql_plus_command )* ( unit_statement )* ) )
            // PLSQLParser.g:157:9: ( unit_statement | sql_plus_command )* EOF
            {
            // PLSQLParser.g:157:9: ( unit_statement | sql_plus_command )*
            loop3:
            do {
                int alt3=3;
                switch ( input.LA(1) ) {
                case SQL92_RESERVED_ALTER:
                case SQL92_RESERVED_CREATE:
                case SQL92_RESERVED_DROP:
                case SQL92_RESERVED_PROCEDURE:
                    {
                    alt3=1;
                    }
                    break;
                case REGULAR_ID:
                    {
                    int LA3_3 = input.LA(2);

                    if ( (LA3_3==EOF||LA3_3==PROMPT||LA3_3==SEMICOLON||LA3_3==SOLIDUS||LA3_3==SQL92_RESERVED_ALTER||LA3_3==SQL92_RESERVED_CREATE||LA3_3==SQL92_RESERVED_DROP||LA3_3==SQL92_RESERVED_PROCEDURE) ) {
                        alt3=2;
                    }
                    else if ( (LA3_3==DELIMITED_ID||LA3_3==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                        alt3=1;
                    }
                    else if ( (LA3_3==REGULAR_ID) ) {
                        int LA3_6 = input.LA(3);

                        if ( (LA3_6==LEFT_PAREN||LA3_6==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                            alt3=1;
                        }
                        else if ( (LA3_6==EOF||LA3_6==DELIMITED_ID||LA3_6==INTRODUCER||LA3_6==PROMPT||LA3_6==SEMICOLON||LA3_6==SOLIDUS||LA3_6==SQL92_RESERVED_ALTER||LA3_6==SQL92_RESERVED_CREATE||LA3_6==SQL92_RESERVED_DROP||LA3_6==SQL92_RESERVED_PROCEDURE) ) {
                            alt3=2;
                        }
                        else if ( (LA3_6==REGULAR_ID) ) {
                            int LA3_7 = input.LA(4);

                            if ( (LA3_7==EOF||LA3_7==CHAR_STRING||LA3_7==EXACT_NUM_LIT||LA3_7==INTRODUCER||LA3_7==LEFT_PAREN||LA3_7==PERIOD||LA3_7==PROMPT||LA3_7==SEMICOLON||LA3_7==SOLIDUS||LA3_7==SQL92_RESERVED_ALTER||LA3_7==SQL92_RESERVED_CREATE||LA3_7==SQL92_RESERVED_DROP||LA3_7==SQL92_RESERVED_ON||LA3_7==SQL92_RESERVED_PROCEDURE) ) {
                                alt3=2;
                            }
                            else if ( (LA3_7==REGULAR_ID) ) {
                                int LA3_10 = input.LA(5);

                                if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
                                    alt3=1;
                                }
                                else if ( (((input.LT(1).getText().equalsIgnoreCase("whenever"))||(input.LT(1).getText().equalsIgnoreCase("exit"))||(input.LT(1).getText().equalsIgnoreCase("set")))) ) {
                                    alt3=2;
                                }


                            }
                            else if ( (LA3_7==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                                alt3=1;
                            }
                            else if ( (LA3_7==DELIMITED_ID) ) {
                                int LA3_11 = input.LA(5);

                                if ( (LA3_11==PERIOD) ) {
                                    int LA3_12 = input.LA(6);

                                    if ( (LA3_12==REGULAR_ID) ) {
                                        int LA3_14 = input.LA(7);

                                        if ( ((LA3_14 >= PERCENT && LA3_14 <= PERIOD)||LA3_14==SQL92_RESERVED_AS||LA3_14==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                                            alt3=1;
                                        }
                                        else if ( (LA3_14==REGULAR_ID) ) {
                                            int LA3_13 = input.LA(8);

                                            if ( (LA3_13==REGULAR_ID) ) {
                                                int LA3_16 = input.LA(9);

                                                if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
                                                    alt3=1;
                                                }
                                                else if ( ((input.LT(1).getText().equalsIgnoreCase("exit"))) ) {
                                                    alt3=2;
                                                }


                                            }
                                            else if ( (LA3_13==LEFT_PAREN||LA3_13==PLSQL_NON_RESERVED_USING||LA3_13==SQL92_RESERVED_AS||LA3_13==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                                                alt3=1;
                                            }
                                            else if ( (LA3_13==DELIMITED_ID||LA3_13==SQL92_RESERVED_DATE) ) {
                                                alt3=2;
                                            }


                                        }
                                        else if ( (LA3_14==LEFT_PAREN) ) {
                                            alt3=2;
                                        }


                                    }
                                    else if ( (LA3_12==DELIMITED_ID) ) {
                                        int LA3_15 = input.LA(7);

                                        if ( ((LA3_15 >= PERCENT && LA3_15 <= PERIOD)||LA3_15==SQL92_RESERVED_AS||LA3_15==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                                            alt3=1;
                                        }
                                        else if ( (LA3_15==REGULAR_ID) ) {
                                            int LA3_13 = input.LA(8);

                                            if ( (LA3_13==REGULAR_ID) ) {
                                                int LA3_16 = input.LA(9);

                                                if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
                                                    alt3=1;
                                                }
                                                else if ( ((input.LT(1).getText().equalsIgnoreCase("exit"))) ) {
                                                    alt3=2;
                                                }


                                            }
                                            else if ( (LA3_13==LEFT_PAREN||LA3_13==PLSQL_NON_RESERVED_USING||LA3_13==SQL92_RESERVED_AS||LA3_13==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                                                alt3=1;
                                            }
                                            else if ( (LA3_13==DELIMITED_ID||LA3_13==SQL92_RESERVED_DATE) ) {
                                                alt3=2;
                                            }


                                        }
                                        else if ( (LA3_15==LEFT_PAREN) ) {
                                            alt3=2;
                                        }


                                    }


                                }
                                else if ( (LA3_11==PERCENT||LA3_11==SQL92_RESERVED_AS||LA3_11==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                                    alt3=1;
                                }
                                else if ( (LA3_11==REGULAR_ID) ) {
                                    int LA3_13 = input.LA(6);

                                    if ( (LA3_13==REGULAR_ID) ) {
                                        int LA3_16 = input.LA(7);

                                        if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
                                            alt3=1;
                                        }
                                        else if ( ((input.LT(1).getText().equalsIgnoreCase("exit"))) ) {
                                            alt3=2;
                                        }


                                    }
                                    else if ( (LA3_13==LEFT_PAREN||LA3_13==PLSQL_NON_RESERVED_USING||LA3_13==SQL92_RESERVED_AS||LA3_13==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                                        alt3=1;
                                    }
                                    else if ( (LA3_13==DELIMITED_ID||LA3_13==SQL92_RESERVED_DATE) ) {
                                        alt3=2;
                                    }


                                }
                                else if ( (LA3_11==LEFT_PAREN) ) {
                                    alt3=2;
                                }


                            }


                        }
                        else if ( (LA3_6==CHAR_STRING||LA3_6==EXACT_NUM_LIT||LA3_6==SQL92_RESERVED_ON) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {
                            alt3=2;
                        }


                    }


                    }
                    break;
                case PROMPT:
                case SOLIDUS:
                    {
                    alt3=2;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // PLSQLParser.g:157:10: unit_statement
            	    {
            	    pushFollow(FOLLOW_unit_statement_in_sql_script801);
            	    unit_statement4=unit_statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_unit_statement.add(unit_statement4.getTree());

            	    }
            	    break;
            	case 2 :
            	    // PLSQLParser.g:157:25: sql_plus_command
            	    {
            	    pushFollow(FOLLOW_sql_plus_command_in_sql_script803);
            	    sql_plus_command5=sql_plus_command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sql_plus_command.add(sql_plus_command5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_sql_script807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);


            // AST REWRITE
            // elements: unit_statement, sql_plus_command
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:9: -> ^( SQL_SCRIPT ( sql_plus_command )* ( unit_statement )* )
            {
                // PLSQLParser.g:158:12: ^( SQL_SCRIPT ( sql_plus_command )* ( unit_statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SQL_SCRIPT, "SQL_SCRIPT")
                , root_1);

                // PLSQLParser.g:158:25: ( sql_plus_command )*
                while ( stream_sql_plus_command.hasNext() ) {
                    adaptor.addChild(root_1, stream_sql_plus_command.nextTree());

                }
                stream_sql_plus_command.reset();

                // PLSQLParser.g:158:43: ( unit_statement )*
                while ( stream_unit_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_unit_statement.nextTree());

                }
                stream_unit_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sql_script"


    public static class unit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unit_statement"
    // PLSQLParser.g:161:1: unit_statement options {backtrack=true; } : ( alter_function | alter_package | alter_procedure | alter_sequence | alter_trigger | alter_type | create_function_body | create_procedure_body | create_package | create_sequence | create_trigger | create_type | drop_function | drop_package | drop_procedure | drop_sequence | drop_trigger | drop_type );
    public final unit_statement_return unit_statement() throws RecognitionException {
        unit_statement_return retval = new unit_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        alter_function_return alter_function7 =null;

        alter_package_return alter_package8 =null;

        alter_procedure_return alter_procedure9 =null;

        alter_sequence_return alter_sequence10 =null;

        alter_trigger_return alter_trigger11 =null;

        alter_type_return alter_type12 =null;

        create_function_body_return create_function_body13 =null;

        create_procedure_body_return create_procedure_body14 =null;

        create_package_return create_package15 =null;

        create_sequence_return create_sequence16 =null;

        create_trigger_return create_trigger17 =null;

        create_type_return create_type18 =null;

        drop_function_return drop_function19 =null;

        drop_package_return drop_package20 =null;

        drop_procedure_return drop_procedure21 =null;

        drop_sequence_return drop_sequence22 =null;

        drop_trigger_return drop_trigger23 =null;

        drop_type_return drop_type24 =null;



        try {
            // PLSQLParser.g:164:6: ( alter_function | alter_package | alter_procedure | alter_sequence | alter_trigger | alter_type | create_function_body | create_procedure_body | create_package | create_sequence | create_trigger | create_type | drop_function | drop_package | drop_procedure | drop_sequence | drop_trigger | drop_type )
            int alt4=18;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==SQL92_RESERVED_ALTER) ) {
                int LA4_1 = input.LA(2);

                if ( (synpred1_PLSQLParser()) ) {
                    alt4=1;
                }
                else if ( (synpred2_PLSQLParser()) ) {
                    alt4=2;
                }
                else if ( (synpred3_PLSQLParser()) ) {
                    alt4=3;
                }
                else if ( (synpred4_PLSQLParser()) ) {
                    alt4=4;
                }
                else if ( (synpred5_PLSQLParser()) ) {
                    alt4=5;
                }
                else if ( (synpred6_PLSQLParser()) ) {
                    alt4=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 4, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA4_0==SQL92_RESERVED_CREATE) ) {
                int LA4_2 = input.LA(2);

                if ( (synpred7_PLSQLParser()) ) {
                    alt4=7;
                }
                else if ( (synpred8_PLSQLParser()) ) {
                    alt4=8;
                }
                else if ( (synpred9_PLSQLParser()) ) {
                    alt4=9;
                }
                else if ( (synpred10_PLSQLParser()) ) {
                    alt4=10;
                }
                else if ( (synpred11_PLSQLParser()) ) {
                    alt4=11;
                }
                else if ( (synpred12_PLSQLParser()) ) {
                    alt4=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 4, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA4_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                alt4=7;
            }
            else if ( (LA4_0==SQL92_RESERVED_PROCEDURE) ) {
                alt4=8;
            }
            else if ( (LA4_0==SQL92_RESERVED_DROP) ) {
                int LA4_5 = input.LA(2);

                if ( (synpred13_PLSQLParser()) ) {
                    alt4=13;
                }
                else if ( (synpred14_PLSQLParser()) ) {
                    alt4=14;
                }
                else if ( (synpred15_PLSQLParser()) ) {
                    alt4=15;
                }
                else if ( (synpred16_PLSQLParser()) ) {
                    alt4=16;
                }
                else if ( (synpred17_PLSQLParser()) ) {
                    alt4=17;
                }
                else if ( (true) ) {
                    alt4=18;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 4, 5, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;

            }
            switch (alt4) {
                case 1 :
                    // PLSQLParser.g:164:11: alter_function
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alter_function_in_unit_statement855);
                    alter_function7=alter_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_function7.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:165:10: alter_package
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alter_package_in_unit_statement866);
                    alter_package8=alter_package();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_package8.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:166:10: alter_procedure
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alter_procedure_in_unit_statement877);
                    alter_procedure9=alter_procedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_procedure9.getTree());

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:167:10: alter_sequence
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alter_sequence_in_unit_statement888);
                    alter_sequence10=alter_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_sequence10.getTree());

                    }
                    break;
                case 5 :
                    // PLSQLParser.g:168:10: alter_trigger
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alter_trigger_in_unit_statement899);
                    alter_trigger11=alter_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_trigger11.getTree());

                    }
                    break;
                case 6 :
                    // PLSQLParser.g:169:10: alter_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alter_type_in_unit_statement910);
                    alter_type12=alter_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_type12.getTree());

                    }
                    break;
                case 7 :
                    // PLSQLParser.g:170:10: create_function_body
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_function_body_in_unit_statement921);
                    create_function_body13=create_function_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_function_body13.getTree());

                    }
                    break;
                case 8 :
                    // PLSQLParser.g:171:10: create_procedure_body
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_procedure_body_in_unit_statement932);
                    create_procedure_body14=create_procedure_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_procedure_body14.getTree());

                    }
                    break;
                case 9 :
                    // PLSQLParser.g:172:10: create_package
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_package_in_unit_statement943);
                    create_package15=create_package();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_package15.getTree());

                    }
                    break;
                case 10 :
                    // PLSQLParser.g:173:10: create_sequence
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_sequence_in_unit_statement954);
                    create_sequence16=create_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_sequence16.getTree());

                    }
                    break;
                case 11 :
                    // PLSQLParser.g:181:10: create_trigger
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_trigger_in_unit_statement972);
                    create_trigger17=create_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_trigger17.getTree());

                    }
                    break;
                case 12 :
                    // PLSQLParser.g:182:10: create_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_type_in_unit_statement983);
                    create_type18=create_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_type18.getTree());

                    }
                    break;
                case 13 :
                    // PLSQLParser.g:183:10: drop_function
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_drop_function_in_unit_statement994);
                    drop_function19=drop_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_function19.getTree());

                    }
                    break;
                case 14 :
                    // PLSQLParser.g:184:10: drop_package
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_drop_package_in_unit_statement1005);
                    drop_package20=drop_package();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_package20.getTree());

                    }
                    break;
                case 15 :
                    // PLSQLParser.g:185:10: drop_procedure
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_drop_procedure_in_unit_statement1016);
                    drop_procedure21=drop_procedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_procedure21.getTree());

                    }
                    break;
                case 16 :
                    // PLSQLParser.g:186:10: drop_sequence
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_drop_sequence_in_unit_statement1027);
                    drop_sequence22=drop_sequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_sequence22.getTree());

                    }
                    break;
                case 17 :
                    // PLSQLParser.g:187:10: drop_trigger
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_drop_trigger_in_unit_statement1038);
                    drop_trigger23=drop_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_trigger23.getTree());

                    }
                    break;
                case 18 :
                    // PLSQLParser.g:188:10: drop_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_drop_type_in_unit_statement1049);
                    drop_type24=drop_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_type24.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unit_statement"


    public static class drop_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "drop_function"
    // PLSQLParser.g:195:1: drop_function : drop_key function_key function_name SEMICOLON -> ^( DROP_FUNCTION[$drop_key.start] function_name ) ;
    public final drop_function_return drop_function() throws RecognitionException {
        drop_function_return retval = new drop_function_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON28=null;
        PLSQLParser_PLSQLKeys.drop_key_return drop_key25 =null;

        PLSQLParser_PLSQLKeys.function_key_return function_key26 =null;

        PLSQLParser_PLSQLCommons.function_name_return function_name27 =null;


        Object SEMICOLON28_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
        RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
        try {
            // PLSQLParser.g:196:5: ( drop_key function_key function_name SEMICOLON -> ^( DROP_FUNCTION[$drop_key.start] function_name ) )
            // PLSQLParser.g:196:10: drop_key function_key function_name SEMICOLON
            {
            pushFollow(FOLLOW_drop_key_in_drop_function1073);
            drop_key25=drop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_drop_key.add(drop_key25.getTree());

            pushFollow(FOLLOW_function_key_in_drop_function1075);
            function_key26=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key26.getTree());

            pushFollow(FOLLOW_function_name_in_drop_function1077);
            function_name27=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_name.add(function_name27.getTree());

            SEMICOLON28=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_function1087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON28);


            // AST REWRITE
            // elements: function_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 198:9: -> ^( DROP_FUNCTION[$drop_key.start] function_name )
            {
                // PLSQLParser.g:198:12: ^( DROP_FUNCTION[$drop_key.start] function_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DROP_FUNCTION, (drop_key25!=null?((Token)drop_key25.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_function_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "drop_function"


    public static class alter_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_function"
    // PLSQLParser.g:201:1: alter_function : alter_key function_key function_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_FUNCTION[$alter_key.start] function_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) ;
    public final alter_function_return alter_function() throws RecognitionException {
        alter_function_return retval = new alter_function_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON37=null;
        PLSQLParser_PLSQLKeys.alter_key_return alter_key29 =null;

        PLSQLParser_PLSQLKeys.function_key_return function_key30 =null;

        PLSQLParser_PLSQLCommons.function_name_return function_name31 =null;

        PLSQLParser_PLSQLKeys.compile_key_return compile_key32 =null;

        PLSQLParser_PLSQLKeys.debug_key_return debug_key33 =null;

        compiler_parameters_clause_return compiler_parameters_clause34 =null;

        PLSQLParser_PLSQLKeys.reuse_key_return reuse_key35 =null;

        PLSQLParser_PLSQLKeys.settings_key_return settings_key36 =null;


        Object SEMICOLON37_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_reuse_key=new RewriteRuleSubtreeStream(adaptor,"rule reuse_key");
        RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
        RewriteRuleSubtreeStream stream_compiler_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule compiler_parameters_clause");
        RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
        RewriteRuleSubtreeStream stream_debug_key=new RewriteRuleSubtreeStream(adaptor,"rule debug_key");
        RewriteRuleSubtreeStream stream_compile_key=new RewriteRuleSubtreeStream(adaptor,"rule compile_key");
        RewriteRuleSubtreeStream stream_settings_key=new RewriteRuleSubtreeStream(adaptor,"rule settings_key");
        try {
            // PLSQLParser.g:202:5: ( alter_key function_key function_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_FUNCTION[$alter_key.start] function_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) )
            // PLSQLParser.g:202:10: alter_key function_key function_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON
            {
            pushFollow(FOLLOW_alter_key_in_alter_function1124);
            alter_key29=alter_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alter_key.add(alter_key29.getTree());

            pushFollow(FOLLOW_function_key_in_alter_function1126);
            function_key30=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key30.getTree());

            pushFollow(FOLLOW_function_name_in_alter_function1128);
            function_name31=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_name.add(function_name31.getTree());

            pushFollow(FOLLOW_compile_key_in_alter_function1138);
            compile_key32=compile_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compile_key.add(compile_key32.getTree());

            // PLSQLParser.g:203:21: ( debug_key )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==REGULAR_ID) ) {
                int LA5_1 = input.LA(2);

                if ( (LA5_1==DELIMITED_ID||LA5_1==INTRODUCER||LA5_1==SEMICOLON) ) {
                    alt5=1;
                }
                else if ( (LA5_1==REGULAR_ID) ) {
                    int LA5_4 = input.LA(3);

                    if ( (LA5_4==EQUALS_OP||LA5_4==REGULAR_ID) ) {
                        alt5=1;
                    }
                }
            }
            switch (alt5) {
                case 1 :
                    // PLSQLParser.g:203:21: debug_key
                    {
                    pushFollow(FOLLOW_debug_key_in_alter_function1140);
                    debug_key33=debug_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_debug_key.add(debug_key33.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:203:32: ( compiler_parameters_clause )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==REGULAR_ID) ) {
                    int LA6_1 = input.LA(2);

                    if ( (LA6_1==EQUALS_OP) ) {
                        alt6=1;
                    }


                }
                else if ( (LA6_0==DELIMITED_ID||LA6_0==INTRODUCER) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // PLSQLParser.g:203:32: compiler_parameters_clause
            	    {
            	    pushFollow(FOLLOW_compiler_parameters_clause_in_alter_function1143);
            	    compiler_parameters_clause34=compiler_parameters_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_compiler_parameters_clause.add(compiler_parameters_clause34.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            // PLSQLParser.g:204:9: ( reuse_key settings_key )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==REGULAR_ID) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // PLSQLParser.g:204:10: reuse_key settings_key
                    {
                    pushFollow(FOLLOW_reuse_key_in_alter_function1155);
                    reuse_key35=reuse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reuse_key.add(reuse_key35.getTree());

                    pushFollow(FOLLOW_settings_key_in_alter_function1157);
                    settings_key36=settings_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_settings_key.add(settings_key36.getTree());

                    }
                    break;

            }


            SEMICOLON37=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_function1169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON37);


            // AST REWRITE
            // elements: reuse_key, debug_key, function_name, compiler_parameters_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 206:9: -> ^( ALTER_FUNCTION[$alter_key.start] function_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
            {
                // PLSQLParser.g:206:12: ^( ALTER_FUNCTION[$alter_key.start] function_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_FUNCTION, (alter_key29!=null?((Token)alter_key29.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_function_name.nextTree());

                // PLSQLParser.g:206:61: ( debug_key )?
                if ( stream_debug_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_debug_key.nextTree());

                }
                stream_debug_key.reset();

                // PLSQLParser.g:206:72: ( reuse_key )?
                if ( stream_reuse_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_reuse_key.nextTree());

                }
                stream_reuse_key.reset();

                // PLSQLParser.g:206:83: ( compiler_parameters_clause )*
                while ( stream_compiler_parameters_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_compiler_parameters_clause.nextTree());

                }
                stream_compiler_parameters_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_function"


    public static class create_function_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create_function_body"
    // PLSQLParser.g:209:1: create_function_body : ( create_key ( or_key replace_key )? )? function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec ( invoker_rights_clause | parallel_enable_clause | result_cache_clause | deterministic_key )* ( ( ( pipelined_key )? ( is_key | as_key ) ( ( declare_key )? ( declare_spec )* body | call_spec ) ) | ( pipelined_key | aggregate_key ) using_key implementation_type_name ) SEMICOLON -> {mode == 1}? ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( USING_MODE ( pipelined_key )? ( aggregate_key )? implementation_type_name ) ) -> {mode == 2}? ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( CALL_MODE ( pipelined_key )? call_spec ) ) -> ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( BODY_MODE ( pipelined_key )? ( declare_spec )* body ) ) ;
    public final create_function_body_return create_function_body() throws RecognitionException {
        create_function_body_return retval = new create_function_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN43=null;
        Token COMMA45=null;
        Token RIGHT_PAREN47=null;
        Token SEMICOLON65=null;
        PLSQLParser_PLSQLKeys.create_key_return create_key38 =null;

        PLSQLParser_PLSQLKeys.or_key_return or_key39 =null;

        PLSQLParser_PLSQLKeys.replace_key_return replace_key40 =null;

        PLSQLParser_PLSQLKeys.function_key_return function_key41 =null;

        PLSQLParser_PLSQLCommons.function_name_return function_name42 =null;

        parameter_return parameter44 =null;

        parameter_return parameter46 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key48 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec49 =null;

        invoker_rights_clause_return invoker_rights_clause50 =null;

        parallel_enable_clause_return parallel_enable_clause51 =null;

        result_cache_clause_return result_cache_clause52 =null;

        PLSQLParser_PLSQLKeys.deterministic_key_return deterministic_key53 =null;

        PLSQLParser_PLSQLKeys.pipelined_key_return pipelined_key54 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key55 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key56 =null;

        PLSQLParser_PLSQLKeys.declare_key_return declare_key57 =null;

        declare_spec_return declare_spec58 =null;

        body_return body59 =null;

        call_spec_return call_spec60 =null;

        PLSQLParser_PLSQLKeys.pipelined_key_return pipelined_key61 =null;

        PLSQLParser_PLSQLKeys.aggregate_key_return aggregate_key62 =null;

        PLSQLParser_PLSQLKeys.using_key_return using_key63 =null;

        PLSQLParser_PLSQLCommons.implementation_type_name_return implementation_type_name64 =null;


        Object LEFT_PAREN43_tree=null;
        Object COMMA45_tree=null;
        Object RIGHT_PAREN47_tree=null;
        Object SEMICOLON65_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_using_key=new RewriteRuleSubtreeStream(adaptor,"rule using_key");
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_result_cache_clause=new RewriteRuleSubtreeStream(adaptor,"rule result_cache_clause");
        RewriteRuleSubtreeStream stream_declare_spec=new RewriteRuleSubtreeStream(adaptor,"rule declare_spec");
        RewriteRuleSubtreeStream stream_deterministic_key=new RewriteRuleSubtreeStream(adaptor,"rule deterministic_key");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
        RewriteRuleSubtreeStream stream_invoker_rights_clause=new RewriteRuleSubtreeStream(adaptor,"rule invoker_rights_clause");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_parallel_enable_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_enable_clause");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
        RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
        RewriteRuleSubtreeStream stream_pipelined_key=new RewriteRuleSubtreeStream(adaptor,"rule pipelined_key");
        RewriteRuleSubtreeStream stream_implementation_type_name=new RewriteRuleSubtreeStream(adaptor,"rule implementation_type_name");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
        RewriteRuleSubtreeStream stream_aggregate_key=new RewriteRuleSubtreeStream(adaptor,"rule aggregate_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:211:5: ( ( create_key ( or_key replace_key )? )? function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec ( invoker_rights_clause | parallel_enable_clause | result_cache_clause | deterministic_key )* ( ( ( pipelined_key )? ( is_key | as_key ) ( ( declare_key )? ( declare_spec )* body | call_spec ) ) | ( pipelined_key | aggregate_key ) using_key implementation_type_name ) SEMICOLON -> {mode == 1}? ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( USING_MODE ( pipelined_key )? ( aggregate_key )? implementation_type_name ) ) -> {mode == 2}? ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( CALL_MODE ( pipelined_key )? call_spec ) ) -> ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( BODY_MODE ( pipelined_key )? ( declare_spec )* body ) ) )
            // PLSQLParser.g:211:10: ( create_key ( or_key replace_key )? )? function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec ( invoker_rights_clause | parallel_enable_clause | result_cache_clause | deterministic_key )* ( ( ( pipelined_key )? ( is_key | as_key ) ( ( declare_key )? ( declare_spec )* body | call_spec ) ) | ( pipelined_key | aggregate_key ) using_key implementation_type_name ) SEMICOLON
            {
            // PLSQLParser.g:211:10: ( create_key ( or_key replace_key )? )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==SQL92_RESERVED_CREATE) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // PLSQLParser.g:211:11: create_key ( or_key replace_key )?
                    {
                    pushFollow(FOLLOW_create_key_in_create_function_body1224);
                    create_key38=create_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_create_key.add(create_key38.getTree());

                    // PLSQLParser.g:211:22: ( or_key replace_key )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==SQL92_RESERVED_OR) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // PLSQLParser.g:211:24: or_key replace_key
                            {
                            pushFollow(FOLLOW_or_key_in_create_function_body1228);
                            or_key39=or_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_or_key.add(or_key39.getTree());

                            pushFollow(FOLLOW_replace_key_in_create_function_body1230);
                            replace_key40=replace_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_replace_key.add(replace_key40.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_function_key_in_create_function_body1237);
            function_key41=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key41.getTree());

            pushFollow(FOLLOW_function_name_in_create_function_body1239);
            function_name42=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_name.add(function_name42.getTree());

            // PLSQLParser.g:212:15: ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==LEFT_PAREN) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // PLSQLParser.g:212:17: LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN
                    {
                    LEFT_PAREN43=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_create_function_body1258); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN43);


                    pushFollow(FOLLOW_parameter_in_create_function_body1260);
                    parameter44=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(parameter44.getTree());

                    // PLSQLParser.g:212:38: ( COMMA parameter )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==COMMA) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // PLSQLParser.g:212:39: COMMA parameter
                    	    {
                    	    COMMA45=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_function_body1263); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA45);


                    	    pushFollow(FOLLOW_parameter_in_create_function_body1265);
                    	    parameter46=parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter.add(parameter46.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    RIGHT_PAREN47=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_create_function_body1269); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN47);


                    }
                    break;

            }


            pushFollow(FOLLOW_return_key_in_create_function_body1281);
            return_key48=return_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_return_key.add(return_key48.getTree());

            pushFollow(FOLLOW_type_spec_in_create_function_body1283);
            type_spec49=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec49.getTree());

            // PLSQLParser.g:214:17: ( invoker_rights_clause | parallel_enable_clause | result_cache_clause | deterministic_key )*
            loop12:
            do {
                int alt12=5;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==REGULAR_ID) ) {
                    int LA12_1 = input.LA(2);

                    if ( (LA12_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
                        alt12=1;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("parallel_enable"))) ) {
                        alt12=2;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("result_cache"))) ) {
                        alt12=3;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("deterministic"))) ) {
                        alt12=4;
                    }


                }


                switch (alt12) {
            	case 1 :
            	    // PLSQLParser.g:214:18: invoker_rights_clause
            	    {
            	    pushFollow(FOLLOW_invoker_rights_clause_in_create_function_body1302);
            	    invoker_rights_clause50=invoker_rights_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_invoker_rights_clause.add(invoker_rights_clause50.getTree());

            	    }
            	    break;
            	case 2 :
            	    // PLSQLParser.g:214:40: parallel_enable_clause
            	    {
            	    pushFollow(FOLLOW_parallel_enable_clause_in_create_function_body1304);
            	    parallel_enable_clause51=parallel_enable_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_parallel_enable_clause.add(parallel_enable_clause51.getTree());

            	    }
            	    break;
            	case 3 :
            	    // PLSQLParser.g:214:63: result_cache_clause
            	    {
            	    pushFollow(FOLLOW_result_cache_clause_in_create_function_body1306);
            	    result_cache_clause52=result_cache_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_result_cache_clause.add(result_cache_clause52.getTree());

            	    }
            	    break;
            	case 4 :
            	    // PLSQLParser.g:214:83: deterministic_key
            	    {
            	    pushFollow(FOLLOW_deterministic_key_in_create_function_body1308);
            	    deterministic_key53=deterministic_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_deterministic_key.add(deterministic_key53.getTree());

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            // PLSQLParser.g:215:9: ( ( ( pipelined_key )? ( is_key | as_key ) ( ( declare_key )? ( declare_spec )* body | call_spec ) ) | ( pipelined_key | aggregate_key ) using_key implementation_type_name )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==REGULAR_ID) ) {
                int LA19_1 = input.LA(2);

                if ( (LA19_1==SQL92_RESERVED_AS||LA19_1==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("pipelined")))) {
                    alt19=1;
                }
                else if ( (LA19_1==PLSQL_NON_RESERVED_USING) ) {
                    alt19=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==SQL92_RESERVED_AS||LA19_0==SQL92_RESERVED_IS) ) {
                alt19=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // PLSQLParser.g:216:13: ( ( pipelined_key )? ( is_key | as_key ) ( ( declare_key )? ( declare_spec )* body | call_spec ) )
                    {
                    // PLSQLParser.g:216:13: ( ( pipelined_key )? ( is_key | as_key ) ( ( declare_key )? ( declare_spec )* body | call_spec ) )
                    // PLSQLParser.g:216:18: ( pipelined_key )? ( is_key | as_key ) ( ( declare_key )? ( declare_spec )* body | call_spec )
                    {
                    // PLSQLParser.g:216:18: ( pipelined_key )?
                    int alt13=2;
                    int LA13_0 = input.LA(1);

                    if ( (LA13_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("pipelined")))) {
                        alt13=1;
                    }
                    switch (alt13) {
                        case 1 :
                            // PLSQLParser.g:216:18: pipelined_key
                            {
                            pushFollow(FOLLOW_pipelined_key_in_create_function_body1339);
                            pipelined_key54=pipelined_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pipelined_key.add(pipelined_key54.getTree());

                            }
                            break;

                    }


                    // PLSQLParser.g:216:33: ( is_key | as_key )
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==SQL92_RESERVED_IS) ) {
                        alt14=1;
                    }
                    else if ( (LA14_0==SQL92_RESERVED_AS) ) {
                        alt14=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 14, 0, input);

                        throw nvae;

                    }
                    switch (alt14) {
                        case 1 :
                            // PLSQLParser.g:216:35: is_key
                            {
                            pushFollow(FOLLOW_is_key_in_create_function_body1344);
                            is_key55=is_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_is_key.add(is_key55.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:216:44: as_key
                            {
                            pushFollow(FOLLOW_as_key_in_create_function_body1348);
                            as_key56=as_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_as_key.add(as_key56.getTree());

                            }
                            break;

                    }


                    // PLSQLParser.g:217:23: ( ( declare_key )? ( declare_spec )* body | call_spec )
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==BINDVAR||LA17_0==COLON||LA17_0==DELIMITED_ID||LA17_0==INTRODUCER||LA17_0==SQL92_RESERVED_BEGIN||LA17_0==SQL92_RESERVED_CREATE||LA17_0==SQL92_RESERVED_CURSOR||LA17_0==SQL92_RESERVED_DECLARE||LA17_0==SQL92_RESERVED_PROCEDURE) ) {
                        alt17=1;
                    }
                    else if ( (LA17_0==REGULAR_ID) ) {
                        int LA17_3 = input.LA(2);

                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("language"))))) ) {
                            alt17=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
                            alt17=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 17, 3, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 17, 0, input);

                        throw nvae;

                    }
                    switch (alt17) {
                        case 1 :
                            // PLSQLParser.g:217:28: ( declare_key )? ( declare_spec )* body
                            {
                            // PLSQLParser.g:217:28: ( declare_key )?
                            int alt15=2;
                            int LA15_0 = input.LA(1);

                            if ( (LA15_0==SQL92_RESERVED_DECLARE) ) {
                                alt15=1;
                            }
                            switch (alt15) {
                                case 1 :
                                    // PLSQLParser.g:217:28: declare_key
                                    {
                                    pushFollow(FOLLOW_declare_key_in_create_function_body1379);
                                    declare_key57=declare_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_declare_key.add(declare_key57.getTree());

                                    }
                                    break;

                            }


                            // PLSQLParser.g:217:41: ( declare_spec )*
                            loop16:
                            do {
                                int alt16=2;
                                int LA16_0 = input.LA(1);

                                if ( (LA16_0==BINDVAR||LA16_0==COLON||LA16_0==DELIMITED_ID||LA16_0==INTRODUCER||LA16_0==REGULAR_ID||LA16_0==SQL92_RESERVED_CREATE||LA16_0==SQL92_RESERVED_CURSOR||LA16_0==SQL92_RESERVED_PROCEDURE) ) {
                                    alt16=1;
                                }


                                switch (alt16) {
                            	case 1 :
                            	    // PLSQLParser.g:217:41: declare_spec
                            	    {
                            	    pushFollow(FOLLOW_declare_spec_in_create_function_body1382);
                            	    declare_spec58=declare_spec();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_declare_spec.add(declare_spec58.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop16;
                                }
                            } while (true);


                            pushFollow(FOLLOW_body_in_create_function_body1385);
                            body59=body();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_body.add(body59.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:218:28: call_spec
                            {
                            pushFollow(FOLLOW_call_spec_in_create_function_body1415);
                            call_spec60=call_spec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_call_spec.add(call_spec60.getTree());

                            if ( state.backtracking==0 ) {mode = 2;}

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // PLSQLParser.g:220:14: ( pipelined_key | aggregate_key ) using_key implementation_type_name
                    {
                    // PLSQLParser.g:220:14: ( pipelined_key | aggregate_key )
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==REGULAR_ID) ) {
                        int LA18_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("pipelined"))) ) {
                            alt18=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("aggregate"))) ) {
                            alt18=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 18, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 18, 0, input);

                        throw nvae;

                    }
                    switch (alt18) {
                        case 1 :
                            // PLSQLParser.g:220:15: pipelined_key
                            {
                            pushFollow(FOLLOW_pipelined_key_in_create_function_body1448);
                            pipelined_key61=pipelined_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pipelined_key.add(pipelined_key61.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:220:29: aggregate_key
                            {
                            pushFollow(FOLLOW_aggregate_key_in_create_function_body1450);
                            aggregate_key62=aggregate_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_aggregate_key.add(aggregate_key62.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_using_key_in_create_function_body1453);
                    using_key63=using_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_using_key.add(using_key63.getTree());

                    pushFollow(FOLLOW_implementation_type_name_in_create_function_body1455);
                    implementation_type_name64=implementation_type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implementation_type_name.add(implementation_type_name64.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            SEMICOLON65=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_function_body1483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON65);


            // AST REWRITE
            // elements: pipelined_key, type_spec, function_name, invoker_rights_clause, function_name, pipelined_key, parameter, implementation_type_name, deterministic_key, function_name, declare_spec, invoker_rights_clause, parallel_enable_clause, pipelined_key, type_spec, aggregate_key, result_cache_clause, replace_key, result_cache_clause, invoker_rights_clause, parameter, parallel_enable_clause, deterministic_key, call_spec, type_spec, replace_key, deterministic_key, result_cache_clause, replace_key, body, parallel_enable_clause, parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 223:9: -> {mode == 1}? ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( USING_MODE ( pipelined_key )? ( aggregate_key )? implementation_type_name ) )
            if (mode == 1) {
                // PLSQLParser.g:224:13: ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( USING_MODE ( pipelined_key )? ( aggregate_key )? implementation_type_name ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_FUNCTION, (function_key41!=null?((Token)function_key41.start):null))
                , root_1);

                // PLSQLParser.g:224:52: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_function_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:224:89: ^( PARAMETERS ( parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:224:102: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:225:17: ( invoker_rights_clause )*
                while ( stream_invoker_rights_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());

                }
                stream_invoker_rights_clause.reset();

                // PLSQLParser.g:225:40: ( parallel_enable_clause )*
                while ( stream_parallel_enable_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_parallel_enable_clause.nextTree());

                }
                stream_parallel_enable_clause.reset();

                // PLSQLParser.g:225:64: ( result_cache_clause )*
                while ( stream_result_cache_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_result_cache_clause.nextTree());

                }
                stream_result_cache_clause.reset();

                // PLSQLParser.g:225:85: ( deterministic_key )*
                while ( stream_deterministic_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_deterministic_key.nextTree());

                }
                stream_deterministic_key.reset();

                // PLSQLParser.g:226:17: ^( USING_MODE ( pipelined_key )? ( aggregate_key )? implementation_type_name )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(USING_MODE, "USING_MODE")
                , root_2);

                // PLSQLParser.g:226:30: ( pipelined_key )?
                if ( stream_pipelined_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_pipelined_key.nextTree());

                }
                stream_pipelined_key.reset();

                // PLSQLParser.g:226:45: ( aggregate_key )?
                if ( stream_aggregate_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_aggregate_key.nextTree());

                }
                stream_aggregate_key.reset();

                adaptor.addChild(root_2, stream_implementation_type_name.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 227:9: -> {mode == 2}? ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( CALL_MODE ( pipelined_key )? call_spec ) )
            if (mode == 2) {
                // PLSQLParser.g:228:13: ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( CALL_MODE ( pipelined_key )? call_spec ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_FUNCTION, (function_key41!=null?((Token)function_key41.start):null))
                , root_1);

                // PLSQLParser.g:228:52: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_function_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:228:89: ^( PARAMETERS ( parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:228:102: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:229:17: ( invoker_rights_clause )*
                while ( stream_invoker_rights_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());

                }
                stream_invoker_rights_clause.reset();

                // PLSQLParser.g:229:40: ( parallel_enable_clause )*
                while ( stream_parallel_enable_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_parallel_enable_clause.nextTree());

                }
                stream_parallel_enable_clause.reset();

                // PLSQLParser.g:229:64: ( result_cache_clause )*
                while ( stream_result_cache_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_result_cache_clause.nextTree());

                }
                stream_result_cache_clause.reset();

                // PLSQLParser.g:229:85: ( deterministic_key )*
                while ( stream_deterministic_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_deterministic_key.nextTree());

                }
                stream_deterministic_key.reset();

                // PLSQLParser.g:230:17: ^( CALL_MODE ( pipelined_key )? call_spec )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CALL_MODE, "CALL_MODE")
                , root_2);

                // PLSQLParser.g:230:29: ( pipelined_key )?
                if ( stream_pipelined_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_pipelined_key.nextTree());

                }
                stream_pipelined_key.reset();

                adaptor.addChild(root_2, stream_call_spec.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 231:9: -> ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( BODY_MODE ( pipelined_key )? ( declare_spec )* body ) )
            {
                // PLSQLParser.g:231:15: ^( CREATE_FUNCTION[$function_key.start] ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ^( BODY_MODE ( pipelined_key )? ( declare_spec )* body ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_FUNCTION, (function_key41!=null?((Token)function_key41.start):null))
                , root_1);

                // PLSQLParser.g:231:54: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_function_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:231:91: ^( PARAMETERS ( parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:231:104: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:232:17: ( invoker_rights_clause )*
                while ( stream_invoker_rights_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());

                }
                stream_invoker_rights_clause.reset();

                // PLSQLParser.g:232:40: ( parallel_enable_clause )*
                while ( stream_parallel_enable_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_parallel_enable_clause.nextTree());

                }
                stream_parallel_enable_clause.reset();

                // PLSQLParser.g:232:64: ( result_cache_clause )*
                while ( stream_result_cache_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_result_cache_clause.nextTree());

                }
                stream_result_cache_clause.reset();

                // PLSQLParser.g:232:85: ( deterministic_key )*
                while ( stream_deterministic_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_deterministic_key.nextTree());

                }
                stream_deterministic_key.reset();

                // PLSQLParser.g:233:17: ^( BODY_MODE ( pipelined_key )? ( declare_spec )* body )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BODY_MODE, "BODY_MODE")
                , root_2);

                // PLSQLParser.g:233:29: ( pipelined_key )?
                if ( stream_pipelined_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_pipelined_key.nextTree());

                }
                stream_pipelined_key.reset();

                // PLSQLParser.g:233:44: ( declare_spec )*
                while ( stream_declare_spec.hasNext() ) {
                    adaptor.addChild(root_2, stream_declare_spec.nextTree());

                }
                stream_declare_spec.reset();

                adaptor.addChild(root_2, stream_body.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "create_function_body"


    public static class parallel_enable_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_enable_clause"
    // PLSQLParser.g:238:1: parallel_enable_clause : parallel_enable_key ^ ( partition_by_clause )? ;
    public final parallel_enable_clause_return parallel_enable_clause() throws RecognitionException {
        parallel_enable_clause_return retval = new parallel_enable_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.parallel_enable_key_return parallel_enable_key66 =null;

        partition_by_clause_return partition_by_clause67 =null;



        try {
            // PLSQLParser.g:239:5: ( parallel_enable_key ^ ( partition_by_clause )? )
            // PLSQLParser.g:239:10: parallel_enable_key ^ ( partition_by_clause )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_parallel_enable_key_in_parallel_enable_clause1791);
            parallel_enable_key66=parallel_enable_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(parallel_enable_key66.getTree(), root_0);

            // PLSQLParser.g:239:31: ( partition_by_clause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==LEFT_PAREN) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // PLSQLParser.g:239:31: partition_by_clause
                    {
                    pushFollow(FOLLOW_partition_by_clause_in_parallel_enable_clause1794);
                    partition_by_clause67=partition_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_by_clause67.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_enable_clause"


    public static class partition_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_by_clause"
    // PLSQLParser.g:242:1: partition_by_clause : LEFT_PAREN partition_key expression by_key ( any_key | ( hash_key | range_key ) LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( streaming_clause )? RIGHT_PAREN -> {mode == 1}? ^( partition_key ^( EXPR expression ) any_key ( streaming_clause )? ) -> {mode == 2}? ^( partition_key ^( EXPR expression ) ^( hash_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? ) -> ^( partition_key ^( EXPR expression ) ^( range_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? ) ;
    public final partition_by_clause_return partition_by_clause() throws RecognitionException {
        partition_by_clause_return retval = new partition_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN68=null;
        Token LEFT_PAREN75=null;
        Token COMMA77=null;
        Token RIGHT_PAREN79=null;
        Token RIGHT_PAREN81=null;
        PLSQLParser_PLSQLKeys.partition_key_return partition_key69 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression70 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key71 =null;

        PLSQLParser_PLSQLKeys.any_key_return any_key72 =null;

        PLSQLParser_PLSQLKeys.hash_key_return hash_key73 =null;

        PLSQLParser_PLSQLKeys.range_key_return range_key74 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name76 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name78 =null;

        streaming_clause_return streaming_clause80 =null;


        Object LEFT_PAREN68_tree=null;
        Object LEFT_PAREN75_tree=null;
        Object COMMA77_tree=null;
        Object RIGHT_PAREN79_tree=null;
        Object RIGHT_PAREN81_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_streaming_clause=new RewriteRuleSubtreeStream(adaptor,"rule streaming_clause");
        RewriteRuleSubtreeStream stream_partition_key=new RewriteRuleSubtreeStream(adaptor,"rule partition_key");
        RewriteRuleSubtreeStream stream_any_key=new RewriteRuleSubtreeStream(adaptor,"rule any_key");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_hash_key=new RewriteRuleSubtreeStream(adaptor,"rule hash_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_range_key=new RewriteRuleSubtreeStream(adaptor,"rule range_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:244:5: ( LEFT_PAREN partition_key expression by_key ( any_key | ( hash_key | range_key ) LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( streaming_clause )? RIGHT_PAREN -> {mode == 1}? ^( partition_key ^( EXPR expression ) any_key ( streaming_clause )? ) -> {mode == 2}? ^( partition_key ^( EXPR expression ) ^( hash_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? ) -> ^( partition_key ^( EXPR expression ) ^( range_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? ) )
            // PLSQLParser.g:244:10: LEFT_PAREN partition_key expression by_key ( any_key | ( hash_key | range_key ) LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( streaming_clause )? RIGHT_PAREN
            {
            LEFT_PAREN68=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_partition_by_clause1823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN68);


            pushFollow(FOLLOW_partition_key_in_partition_by_clause1837);
            partition_key69=partition_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_partition_key.add(partition_key69.getTree());

            pushFollow(FOLLOW_expression_in_partition_by_clause1839);
            expression70=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression70.getTree());

            pushFollow(FOLLOW_by_key_in_partition_by_clause1841);
            by_key71=by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_by_key.add(by_key71.getTree());

            // PLSQLParser.g:246:13: ( any_key | ( hash_key | range_key ) LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==SQL92_RESERVED_ANY) ) {
                alt23=1;
            }
            else if ( (LA23_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hash"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // PLSQLParser.g:246:18: any_key
                    {
                    pushFollow(FOLLOW_any_key_in_partition_by_clause1861);
                    any_key72=any_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_any_key.add(any_key72.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:247:18: ( hash_key | range_key ) LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    // PLSQLParser.g:247:18: ( hash_key | range_key )
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hash"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {
                        int LA21_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("hash"))) ) {
                            alt21=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("range"))) ) {
                            alt21=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 21, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 0, input);

                        throw nvae;

                    }
                    switch (alt21) {
                        case 1 :
                            // PLSQLParser.g:247:19: hash_key
                            {
                            pushFollow(FOLLOW_hash_key_in_partition_by_clause1883);
                            hash_key73=hash_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hash_key.add(hash_key73.getTree());

                            if ( state.backtracking==0 ) {mode = 2;}

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:247:40: range_key
                            {
                            pushFollow(FOLLOW_range_key_in_partition_by_clause1887);
                            range_key74=range_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_range_key.add(range_key74.getTree());

                            }
                            break;

                    }


                    LEFT_PAREN75=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_partition_by_clause1890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN75);


                    pushFollow(FOLLOW_column_name_in_partition_by_clause1892);
                    column_name76=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name76.getTree());

                    // PLSQLParser.g:247:74: ( COMMA column_name )*
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);

                        if ( (LA22_0==COMMA) ) {
                            alt22=1;
                        }


                        switch (alt22) {
                    	case 1 :
                    	    // PLSQLParser.g:247:75: COMMA column_name
                    	    {
                    	    COMMA77=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_by_clause1895); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA77);


                    	    pushFollow(FOLLOW_column_name_in_partition_by_clause1897);
                    	    column_name78=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name78.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop22;
                        }
                    } while (true);


                    RIGHT_PAREN79=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_partition_by_clause1901); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN79);


                    }
                    break;

            }


            // PLSQLParser.g:249:13: ( streaming_clause )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SQL92_RESERVED_ORDER) ) {
                alt24=1;
            }
            else if ( (LA24_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("cluster")))) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // PLSQLParser.g:249:13: streaming_clause
                    {
                    pushFollow(FOLLOW_streaming_clause_in_partition_by_clause1929);
                    streaming_clause80=streaming_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_streaming_clause.add(streaming_clause80.getTree());

                    }
                    break;

            }


            RIGHT_PAREN81=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_partition_by_clause1940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN81);


            // AST REWRITE
            // elements: streaming_clause, expression, streaming_clause, any_key, hash_key, column_name, partition_key, expression, partition_key, streaming_clause, column_name, partition_key, expression, range_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 251:9: -> {mode == 1}? ^( partition_key ^( EXPR expression ) any_key ( streaming_clause )? )
            if (mode == 1) {
                // PLSQLParser.g:252:13: ^( partition_key ^( EXPR expression ) any_key ( streaming_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_partition_key.nextNode(), root_1);

                // PLSQLParser.g:252:29: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_any_key.nextTree());

                // PLSQLParser.g:252:56: ( streaming_clause )?
                if ( stream_streaming_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_streaming_clause.nextTree());

                }
                stream_streaming_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 253:9: -> {mode == 2}? ^( partition_key ^( EXPR expression ) ^( hash_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? )
            if (mode == 2) {
                // PLSQLParser.g:254:13: ^( partition_key ^( EXPR expression ) ^( hash_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_partition_key.nextNode(), root_1);

                // PLSQLParser.g:254:29: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:254:48: ^( hash_key ^( COLUMNS ( column_name )+ ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_hash_key.nextNode(), root_2);

                // PLSQLParser.g:254:59: ^( COLUMNS ( column_name )+ )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(COLUMNS, "COLUMNS")
                , root_3);

                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_3, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:254:84: ( streaming_clause )?
                if ( stream_streaming_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_streaming_clause.nextTree());

                }
                stream_streaming_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 255:9: -> ^( partition_key ^( EXPR expression ) ^( range_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? )
            {
                // PLSQLParser.g:256:13: ^( partition_key ^( EXPR expression ) ^( range_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_partition_key.nextNode(), root_1);

                // PLSQLParser.g:256:29: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:256:48: ^( range_key ^( COLUMNS ( column_name )+ ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_range_key.nextNode(), root_2);

                // PLSQLParser.g:256:60: ^( COLUMNS ( column_name )+ )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(COLUMNS, "COLUMNS")
                , root_3);

                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_3, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:256:85: ( streaming_clause )?
                if ( stream_streaming_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_streaming_clause.nextTree());

                }
                stream_streaming_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_by_clause"


    public static class result_cache_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "result_cache_clause"
    // PLSQLParser.g:259:1: result_cache_clause : result_cache_key ( relies_on_part )? -> ^( result_cache_key ( relies_on_part )? ) ;
    public final result_cache_clause_return result_cache_clause() throws RecognitionException {
        result_cache_clause_return retval = new result_cache_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.result_cache_key_return result_cache_key82 =null;

        relies_on_part_return relies_on_part83 =null;


        RewriteRuleSubtreeStream stream_result_cache_key=new RewriteRuleSubtreeStream(adaptor,"rule result_cache_key");
        RewriteRuleSubtreeStream stream_relies_on_part=new RewriteRuleSubtreeStream(adaptor,"rule relies_on_part");
        try {
            // PLSQLParser.g:260:5: ( result_cache_key ( relies_on_part )? -> ^( result_cache_key ( relies_on_part )? ) )
            // PLSQLParser.g:260:10: result_cache_key ( relies_on_part )?
            {
            pushFollow(FOLLOW_result_cache_key_in_result_cache_clause2092);
            result_cache_key82=result_cache_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_result_cache_key.add(result_cache_key82.getTree());

            // PLSQLParser.g:260:27: ( relies_on_part )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==REGULAR_ID) ) {
                int LA25_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("relies_on"))) ) {
                    alt25=1;
                }
            }
            switch (alt25) {
                case 1 :
                    // PLSQLParser.g:260:27: relies_on_part
                    {
                    pushFollow(FOLLOW_relies_on_part_in_result_cache_clause2094);
                    relies_on_part83=relies_on_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_relies_on_part.add(relies_on_part83.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: result_cache_key, relies_on_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 261:9: -> ^( result_cache_key ( relies_on_part )? )
            {
                // PLSQLParser.g:261:12: ^( result_cache_key ( relies_on_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_result_cache_key.nextNode(), root_1);

                // PLSQLParser.g:261:31: ( relies_on_part )?
                if ( stream_relies_on_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_relies_on_part.nextTree());

                }
                stream_relies_on_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "result_cache_clause"


    public static class relies_on_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relies_on_part"
    // PLSQLParser.g:264:1: relies_on_part : relies_on_key ^ LEFT_PAREN ! tableview_name ( COMMA ! tableview_name )* RIGHT_PAREN !;
    public final relies_on_part_return relies_on_part() throws RecognitionException {
        relies_on_part_return retval = new relies_on_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN85=null;
        Token COMMA87=null;
        Token RIGHT_PAREN89=null;
        PLSQLParser_PLSQLKeys.relies_on_key_return relies_on_key84 =null;

        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name86 =null;

        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name88 =null;


        Object LEFT_PAREN85_tree=null;
        Object COMMA87_tree=null;
        Object RIGHT_PAREN89_tree=null;

        try {
            // PLSQLParser.g:265:5: ( relies_on_key ^ LEFT_PAREN ! tableview_name ( COMMA ! tableview_name )* RIGHT_PAREN !)
            // PLSQLParser.g:265:10: relies_on_key ^ LEFT_PAREN ! tableview_name ( COMMA ! tableview_name )* RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_relies_on_key_in_relies_on_part2132);
            relies_on_key84=relies_on_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(relies_on_key84.getTree(), root_0);

            LEFT_PAREN85=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_relies_on_part2135); if (state.failed) return retval;

            pushFollow(FOLLOW_tableview_name_in_relies_on_part2138);
            tableview_name86=tableview_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tableview_name86.getTree());

            // PLSQLParser.g:265:52: ( COMMA ! tableview_name )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==COMMA) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // PLSQLParser.g:265:53: COMMA ! tableview_name
            	    {
            	    COMMA87=(Token)match(input,COMMA,FOLLOW_COMMA_in_relies_on_part2141); if (state.failed) return retval;

            	    pushFollow(FOLLOW_tableview_name_in_relies_on_part2144);
            	    tableview_name88=tableview_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, tableview_name88.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            RIGHT_PAREN89=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_relies_on_part2148); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relies_on_part"


    public static class streaming_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "streaming_clause"
    // PLSQLParser.g:268:1: streaming_clause : ( order_key | cluster_key ) expression by_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN -> ^( STREAMING_CLAUSE ( order_key )? ( cluster_key )? ^( EXPR expression ) ^( COLUMNS ( column_name )+ ) ) ;
    public final streaming_clause_return streaming_clause() throws RecognitionException {
        streaming_clause_return retval = new streaming_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN94=null;
        Token COMMA96=null;
        Token RIGHT_PAREN98=null;
        PLSQLParser_PLSQLKeys.order_key_return order_key90 =null;

        PLSQLParser_PLSQLKeys.cluster_key_return cluster_key91 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression92 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key93 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name95 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name97 =null;


        Object LEFT_PAREN94_tree=null;
        Object COMMA96_tree=null;
        Object RIGHT_PAREN98_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_order_key=new RewriteRuleSubtreeStream(adaptor,"rule order_key");
        RewriteRuleSubtreeStream stream_cluster_key=new RewriteRuleSubtreeStream(adaptor,"rule cluster_key");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            // PLSQLParser.g:269:5: ( ( order_key | cluster_key ) expression by_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN -> ^( STREAMING_CLAUSE ( order_key )? ( cluster_key )? ^( EXPR expression ) ^( COLUMNS ( column_name )+ ) ) )
            // PLSQLParser.g:269:10: ( order_key | cluster_key ) expression by_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
            {
            // PLSQLParser.g:269:10: ( order_key | cluster_key )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==SQL92_RESERVED_ORDER) ) {
                alt27=1;
            }
            else if ( (LA27_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("cluster")))) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }
            switch (alt27) {
                case 1 :
                    // PLSQLParser.g:269:11: order_key
                    {
                    pushFollow(FOLLOW_order_key_in_streaming_clause2170);
                    order_key90=order_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_order_key.add(order_key90.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:269:21: cluster_key
                    {
                    pushFollow(FOLLOW_cluster_key_in_streaming_clause2172);
                    cluster_key91=cluster_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cluster_key.add(cluster_key91.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_expression_in_streaming_clause2175);
            expression92=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression92.getTree());

            pushFollow(FOLLOW_by_key_in_streaming_clause2177);
            by_key93=by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_by_key.add(by_key93.getTree());

            LEFT_PAREN94=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_streaming_clause2188); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN94);


            pushFollow(FOLLOW_column_name_in_streaming_clause2190);
            column_name95=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_column_name.add(column_name95.getTree());

            // PLSQLParser.g:270:32: ( COMMA column_name )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==COMMA) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // PLSQLParser.g:270:33: COMMA column_name
            	    {
            	    COMMA96=(Token)match(input,COMMA,FOLLOW_COMMA_in_streaming_clause2193); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA96);


            	    pushFollow(FOLLOW_column_name_in_streaming_clause2195);
            	    column_name97=column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_column_name.add(column_name97.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            RIGHT_PAREN98=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_streaming_clause2199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN98);


            // AST REWRITE
            // elements: cluster_key, column_name, expression, order_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 271:9: -> ^( STREAMING_CLAUSE ( order_key )? ( cluster_key )? ^( EXPR expression ) ^( COLUMNS ( column_name )+ ) )
            {
                // PLSQLParser.g:271:12: ^( STREAMING_CLAUSE ( order_key )? ( cluster_key )? ^( EXPR expression ) ^( COLUMNS ( column_name )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STREAMING_CLAUSE, "STREAMING_CLAUSE")
                , root_1);

                // PLSQLParser.g:271:31: ( order_key )?
                if ( stream_order_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_order_key.nextTree());

                }
                stream_order_key.reset();

                // PLSQLParser.g:271:42: ( cluster_key )?
                if ( stream_cluster_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_cluster_key.nextTree());

                }
                stream_cluster_key.reset();

                // PLSQLParser.g:271:55: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:271:74: ^( COLUMNS ( column_name )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(COLUMNS, "COLUMNS")
                , root_2);

                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_2, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "streaming_clause"


    public static class drop_package_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "drop_package"
    // PLSQLParser.g:278:1: drop_package : drop_key package_key ( body_key )? package_name SEMICOLON -> ^( DROP_PACKAGE[$drop_key.start] package_name ( body_key )? ) ;
    public final drop_package_return drop_package() throws RecognitionException {
        drop_package_return retval = new drop_package_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON103=null;
        PLSQLParser_PLSQLKeys.drop_key_return drop_key99 =null;

        PLSQLParser_PLSQLKeys.package_key_return package_key100 =null;

        PLSQLParser_PLSQLKeys.body_key_return body_key101 =null;

        PLSQLParser_PLSQLCommons.package_name_return package_name102 =null;


        Object SEMICOLON103_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
        RewriteRuleSubtreeStream stream_package_name=new RewriteRuleSubtreeStream(adaptor,"rule package_name");
        RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
        RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
        try {
            // PLSQLParser.g:279:5: ( drop_key package_key ( body_key )? package_name SEMICOLON -> ^( DROP_PACKAGE[$drop_key.start] package_name ( body_key )? ) )
            // PLSQLParser.g:279:10: drop_key package_key ( body_key )? package_name SEMICOLON
            {
            pushFollow(FOLLOW_drop_key_in_drop_package2257);
            drop_key99=drop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_drop_key.add(drop_key99.getTree());

            pushFollow(FOLLOW_package_key_in_drop_package2259);
            package_key100=package_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_key.add(package_key100.getTree());

            // PLSQLParser.g:279:31: ( body_key )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==REGULAR_ID) ) {
                int LA29_1 = input.LA(2);

                if ( (LA29_1==DELIMITED_ID||LA29_1==INTRODUCER||LA29_1==REGULAR_ID) ) {
                    alt29=1;
                }
            }
            switch (alt29) {
                case 1 :
                    // PLSQLParser.g:279:31: body_key
                    {
                    pushFollow(FOLLOW_body_key_in_drop_package2261);
                    body_key101=body_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_body_key.add(body_key101.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_package_name_in_drop_package2264);
            package_name102=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_name.add(package_name102.getTree());

            SEMICOLON103=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_package2274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON103);


            // AST REWRITE
            // elements: body_key, package_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 281:9: -> ^( DROP_PACKAGE[$drop_key.start] package_name ( body_key )? )
            {
                // PLSQLParser.g:281:12: ^( DROP_PACKAGE[$drop_key.start] package_name ( body_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DROP_PACKAGE, (drop_key99!=null?((Token)drop_key99.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_package_name.nextTree());

                // PLSQLParser.g:281:57: ( body_key )?
                if ( stream_body_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_body_key.nextTree());

                }
                stream_body_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "drop_package"


    public static class alter_package_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_package"
    // PLSQLParser.g:284:1: alter_package : alter_key package_key package_name compile_key ( debug_key )? ( package_key | body_key | specification_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_PACKAGE[$alter_key.start] package_name ( debug_key )? ( reuse_key )? ( package_key )? ( body_key )? ( specification_key )? ( compiler_parameters_clause )* ) ;
    public final alter_package_return alter_package() throws RecognitionException {
        alter_package_return retval = new alter_package_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON115=null;
        PLSQLParser_PLSQLKeys.alter_key_return alter_key104 =null;

        PLSQLParser_PLSQLKeys.package_key_return package_key105 =null;

        PLSQLParser_PLSQLCommons.package_name_return package_name106 =null;

        PLSQLParser_PLSQLKeys.compile_key_return compile_key107 =null;

        PLSQLParser_PLSQLKeys.debug_key_return debug_key108 =null;

        PLSQLParser_PLSQLKeys.package_key_return package_key109 =null;

        PLSQLParser_PLSQLKeys.body_key_return body_key110 =null;

        PLSQLParser_PLSQLKeys.specification_key_return specification_key111 =null;

        compiler_parameters_clause_return compiler_parameters_clause112 =null;

        PLSQLParser_PLSQLKeys.reuse_key_return reuse_key113 =null;

        PLSQLParser_PLSQLKeys.settings_key_return settings_key114 =null;


        Object SEMICOLON115_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
        RewriteRuleSubtreeStream stream_reuse_key=new RewriteRuleSubtreeStream(adaptor,"rule reuse_key");
        RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
        RewriteRuleSubtreeStream stream_compiler_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule compiler_parameters_clause");
        RewriteRuleSubtreeStream stream_package_name=new RewriteRuleSubtreeStream(adaptor,"rule package_name");
        RewriteRuleSubtreeStream stream_debug_key=new RewriteRuleSubtreeStream(adaptor,"rule debug_key");
        RewriteRuleSubtreeStream stream_compile_key=new RewriteRuleSubtreeStream(adaptor,"rule compile_key");
        RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
        RewriteRuleSubtreeStream stream_specification_key=new RewriteRuleSubtreeStream(adaptor,"rule specification_key");
        RewriteRuleSubtreeStream stream_settings_key=new RewriteRuleSubtreeStream(adaptor,"rule settings_key");
        try {
            // PLSQLParser.g:285:5: ( alter_key package_key package_name compile_key ( debug_key )? ( package_key | body_key | specification_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_PACKAGE[$alter_key.start] package_name ( debug_key )? ( reuse_key )? ( package_key )? ( body_key )? ( specification_key )? ( compiler_parameters_clause )* ) )
            // PLSQLParser.g:285:10: alter_key package_key package_name compile_key ( debug_key )? ( package_key | body_key | specification_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON
            {
            pushFollow(FOLLOW_alter_key_in_alter_package2314);
            alter_key104=alter_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alter_key.add(alter_key104.getTree());

            pushFollow(FOLLOW_package_key_in_alter_package2316);
            package_key105=package_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_key.add(package_key105.getTree());

            pushFollow(FOLLOW_package_name_in_alter_package2318);
            package_name106=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_name.add(package_name106.getTree());

            pushFollow(FOLLOW_compile_key_in_alter_package2328);
            compile_key107=compile_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compile_key.add(compile_key107.getTree());

            // PLSQLParser.g:286:21: ( debug_key )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==REGULAR_ID) ) {
                int LA30_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("debug"))) ) {
                    alt30=1;
                }
            }
            switch (alt30) {
                case 1 :
                    // PLSQLParser.g:286:21: debug_key
                    {
                    pushFollow(FOLLOW_debug_key_in_alter_package2330);
                    debug_key108=debug_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_debug_key.add(debug_key108.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:286:32: ( package_key | body_key | specification_key )?
            int alt31=4;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==REGULAR_ID) ) {
                int LA31_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("package"))) ) {
                    alt31=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("body"))) ) {
                    alt31=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("specification"))) ) {
                    alt31=3;
                }
            }
            switch (alt31) {
                case 1 :
                    // PLSQLParser.g:286:33: package_key
                    {
                    pushFollow(FOLLOW_package_key_in_alter_package2334);
                    package_key109=package_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_key.add(package_key109.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:286:45: body_key
                    {
                    pushFollow(FOLLOW_body_key_in_alter_package2336);
                    body_key110=body_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_body_key.add(body_key110.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:286:54: specification_key
                    {
                    pushFollow(FOLLOW_specification_key_in_alter_package2338);
                    specification_key111=specification_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_specification_key.add(specification_key111.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:287:9: ( compiler_parameters_clause )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==REGULAR_ID) ) {
                    int LA32_1 = input.LA(2);

                    if ( (LA32_1==EQUALS_OP) ) {
                        alt32=1;
                    }


                }
                else if ( (LA32_0==DELIMITED_ID||LA32_0==INTRODUCER) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // PLSQLParser.g:287:9: compiler_parameters_clause
            	    {
            	    pushFollow(FOLLOW_compiler_parameters_clause_in_alter_package2350);
            	    compiler_parameters_clause112=compiler_parameters_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_compiler_parameters_clause.add(compiler_parameters_clause112.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // PLSQLParser.g:288:9: ( reuse_key settings_key )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==REGULAR_ID) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // PLSQLParser.g:288:10: reuse_key settings_key
                    {
                    pushFollow(FOLLOW_reuse_key_in_alter_package2362);
                    reuse_key113=reuse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reuse_key.add(reuse_key113.getTree());

                    pushFollow(FOLLOW_settings_key_in_alter_package2364);
                    settings_key114=settings_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_settings_key.add(settings_key114.getTree());

                    }
                    break;

            }


            SEMICOLON115=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_package2376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON115);


            // AST REWRITE
            // elements: package_name, reuse_key, compiler_parameters_clause, body_key, debug_key, specification_key, package_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:9: -> ^( ALTER_PACKAGE[$alter_key.start] package_name ( debug_key )? ( reuse_key )? ( package_key )? ( body_key )? ( specification_key )? ( compiler_parameters_clause )* )
            {
                // PLSQLParser.g:290:12: ^( ALTER_PACKAGE[$alter_key.start] package_name ( debug_key )? ( reuse_key )? ( package_key )? ( body_key )? ( specification_key )? ( compiler_parameters_clause )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_PACKAGE, (alter_key104!=null?((Token)alter_key104.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_package_name.nextTree());

                // PLSQLParser.g:290:59: ( debug_key )?
                if ( stream_debug_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_debug_key.nextTree());

                }
                stream_debug_key.reset();

                // PLSQLParser.g:290:70: ( reuse_key )?
                if ( stream_reuse_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_reuse_key.nextTree());

                }
                stream_reuse_key.reset();

                // PLSQLParser.g:291:17: ( package_key )?
                if ( stream_package_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_package_key.nextTree());

                }
                stream_package_key.reset();

                // PLSQLParser.g:291:30: ( body_key )?
                if ( stream_body_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_body_key.nextTree());

                }
                stream_body_key.reset();

                // PLSQLParser.g:291:40: ( specification_key )?
                if ( stream_specification_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_specification_key.nextTree());

                }
                stream_specification_key.reset();

                // PLSQLParser.g:291:59: ( compiler_parameters_clause )*
                while ( stream_compiler_parameters_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_compiler_parameters_clause.nextTree());

                }
                stream_compiler_parameters_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_package"


    public static class create_package_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create_package"
    // PLSQLParser.g:294:1: create_package : create_key ( or_key replace_key )? package_key ( package_spec | package_body )? SEMICOLON -> {mode == 1}? ^( CREATE_PACKAGE_SPEC[$create_key.start] ( replace_key )? package_spec ) -> ^( CREATE_PACKAGE_BODY[$create_key.start] ( replace_key )? package_body ) ;
    public final create_package_return create_package() throws RecognitionException {
        create_package_return retval = new create_package_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON122=null;
        PLSQLParser_PLSQLKeys.create_key_return create_key116 =null;

        PLSQLParser_PLSQLKeys.or_key_return or_key117 =null;

        PLSQLParser_PLSQLKeys.replace_key_return replace_key118 =null;

        PLSQLParser_PLSQLKeys.package_key_return package_key119 =null;

        package_spec_return package_spec120 =null;

        package_body_return package_body121 =null;


        Object SEMICOLON122_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
        RewriteRuleSubtreeStream stream_package_body=new RewriteRuleSubtreeStream(adaptor,"rule package_body");
        RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
        RewriteRuleSubtreeStream stream_package_spec=new RewriteRuleSubtreeStream(adaptor,"rule package_spec");
            int mode = 0;    
        try {
            // PLSQLParser.g:296:5: ( create_key ( or_key replace_key )? package_key ( package_spec | package_body )? SEMICOLON -> {mode == 1}? ^( CREATE_PACKAGE_SPEC[$create_key.start] ( replace_key )? package_spec ) -> ^( CREATE_PACKAGE_BODY[$create_key.start] ( replace_key )? package_body ) )
            // PLSQLParser.g:296:10: create_key ( or_key replace_key )? package_key ( package_spec | package_body )? SEMICOLON
            {
            pushFollow(FOLLOW_create_key_in_create_package2456);
            create_key116=create_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_create_key.add(create_key116.getTree());

            // PLSQLParser.g:296:21: ( or_key replace_key )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==SQL92_RESERVED_OR) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // PLSQLParser.g:296:23: or_key replace_key
                    {
                    pushFollow(FOLLOW_or_key_in_create_package2460);
                    or_key117=or_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_key.add(or_key117.getTree());

                    pushFollow(FOLLOW_replace_key_in_create_package2462);
                    replace_key118=replace_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_replace_key.add(replace_key118.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_package_key_in_create_package2467);
            package_key119=package_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_key.add(package_key119.getTree());

            // PLSQLParser.g:297:9: ( package_spec | package_body )?
            int alt35=3;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==DELIMITED_ID||LA35_0==INTRODUCER) ) {
                alt35=1;
            }
            else if ( (LA35_0==REGULAR_ID) ) {
                switch ( input.LA(2) ) {
                    case REGULAR_ID:
                        {
                        int LA35_4 = input.LA(3);

                        if ( (LA35_4==REGULAR_ID) ) {
                            alt35=1;
                        }
                        else if ( (LA35_4==SQL92_RESERVED_AS||LA35_4==SQL92_RESERVED_IS) ) {
                            alt35=2;
                        }
                        }
                        break;
                    case SQL92_RESERVED_AS:
                    case SQL92_RESERVED_IS:
                        {
                        alt35=1;
                        }
                        break;
                    case DELIMITED_ID:
                    case INTRODUCER:
                        {
                        alt35=2;
                        }
                        break;
                }

            }
            switch (alt35) {
                case 1 :
                    // PLSQLParser.g:297:11: package_spec
                    {
                    pushFollow(FOLLOW_package_spec_in_create_package2479);
                    package_spec120=package_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_spec.add(package_spec120.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:297:38: package_body
                    {
                    pushFollow(FOLLOW_package_body_in_create_package2485);
                    package_body121=package_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_body.add(package_body121.getTree());

                    }
                    break;

            }


            SEMICOLON122=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_package2498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON122);


            // AST REWRITE
            // elements: package_body, package_spec, replace_key, replace_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 299:5: -> {mode == 1}? ^( CREATE_PACKAGE_SPEC[$create_key.start] ( replace_key )? package_spec )
            if (mode == 1) {
                // PLSQLParser.g:299:24: ^( CREATE_PACKAGE_SPEC[$create_key.start] ( replace_key )? package_spec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_PACKAGE_SPEC, (create_key116!=null?((Token)create_key116.start):null))
                , root_1);

                // PLSQLParser.g:299:65: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_package_spec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 300:5: -> ^( CREATE_PACKAGE_BODY[$create_key.start] ( replace_key )? package_body )
            {
                // PLSQLParser.g:300:8: ^( CREATE_PACKAGE_BODY[$create_key.start] ( replace_key )? package_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_PACKAGE_BODY, (create_key116!=null?((Token)create_key116.start):null))
                , root_1);

                // PLSQLParser.g:300:49: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_package_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "create_package"


    public static class package_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_body"
    // PLSQLParser.g:305:1: package_body : body_key package_name ( is_key | as_key ) ( package_obj_body )* ( begin_key seq_of_statements | end_key ( package_name )? ) -> ( package_name )+ ( package_obj_body )* ( seq_of_statements )? ;
    public final package_body_return package_body() throws RecognitionException {
        package_body_return retval = new package_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.body_key_return body_key123 =null;

        PLSQLParser_PLSQLCommons.package_name_return package_name124 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key125 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key126 =null;

        package_obj_body_return package_obj_body127 =null;

        PLSQLParser_PLSQLKeys.begin_key_return begin_key128 =null;

        seq_of_statements_return seq_of_statements129 =null;

        PLSQLParser_PLSQLKeys.end_key_return end_key130 =null;

        PLSQLParser_PLSQLCommons.package_name_return package_name131 =null;


        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");
        RewriteRuleSubtreeStream stream_package_obj_body=new RewriteRuleSubtreeStream(adaptor,"rule package_obj_body");
        RewriteRuleSubtreeStream stream_begin_key=new RewriteRuleSubtreeStream(adaptor,"rule begin_key");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_package_name=new RewriteRuleSubtreeStream(adaptor,"rule package_name");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
        try {
            // PLSQLParser.g:306:5: ( body_key package_name ( is_key | as_key ) ( package_obj_body )* ( begin_key seq_of_statements | end_key ( package_name )? ) -> ( package_name )+ ( package_obj_body )* ( seq_of_statements )? )
            // PLSQLParser.g:306:10: body_key package_name ( is_key | as_key ) ( package_obj_body )* ( begin_key seq_of_statements | end_key ( package_name )? )
            {
            pushFollow(FOLLOW_body_key_in_package_body2558);
            body_key123=body_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_body_key.add(body_key123.getTree());

            pushFollow(FOLLOW_package_name_in_package_body2560);
            package_name124=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_name.add(package_name124.getTree());

            // PLSQLParser.g:306:32: ( is_key | as_key )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==SQL92_RESERVED_IS) ) {
                alt36=1;
            }
            else if ( (LA36_0==SQL92_RESERVED_AS) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // PLSQLParser.g:306:33: is_key
                    {
                    pushFollow(FOLLOW_is_key_in_package_body2563);
                    is_key125=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key125.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:306:42: as_key
                    {
                    pushFollow(FOLLOW_as_key_in_package_body2567);
                    as_key126=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key126.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:307:9: ( package_obj_body )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==BINDVAR||LA37_0==COLON||LA37_0==DELIMITED_ID||LA37_0==INTRODUCER||LA37_0==REGULAR_ID||LA37_0==SQL92_RESERVED_CREATE||LA37_0==SQL92_RESERVED_CURSOR||LA37_0==SQL92_RESERVED_PROCEDURE) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // PLSQLParser.g:307:9: package_obj_body
            	    {
            	    pushFollow(FOLLOW_package_obj_body_in_package_body2578);
            	    package_obj_body127=package_obj_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_package_obj_body.add(package_obj_body127.getTree());

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            // PLSQLParser.g:308:9: ( begin_key seq_of_statements | end_key ( package_name )? )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==SQL92_RESERVED_BEGIN) ) {
                alt39=1;
            }
            else if ( (LA39_0==SQL92_RESERVED_END) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // PLSQLParser.g:308:10: begin_key seq_of_statements
                    {
                    pushFollow(FOLLOW_begin_key_in_package_body2590);
                    begin_key128=begin_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_begin_key.add(begin_key128.getTree());

                    pushFollow(FOLLOW_seq_of_statements_in_package_body2592);
                    seq_of_statements129=seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements129.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:308:38: end_key ( package_name )?
                    {
                    pushFollow(FOLLOW_end_key_in_package_body2594);
                    end_key130=end_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_end_key.add(end_key130.getTree());

                    // PLSQLParser.g:308:46: ( package_name )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==DELIMITED_ID||LA38_0==INTRODUCER||LA38_0==REGULAR_ID) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // PLSQLParser.g:308:46: package_name
                            {
                            pushFollow(FOLLOW_package_name_in_package_body2596);
                            package_name131=package_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_package_name.add(package_name131.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: package_name, package_obj_body, seq_of_statements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:9: -> ( package_name )+ ( package_obj_body )* ( seq_of_statements )?
            {
                if ( !(stream_package_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_package_name.hasNext() ) {
                    adaptor.addChild(root_0, stream_package_name.nextTree());

                }
                stream_package_name.reset();

                // PLSQLParser.g:309:26: ( package_obj_body )*
                while ( stream_package_obj_body.hasNext() ) {
                    adaptor.addChild(root_0, stream_package_obj_body.nextTree());

                }
                stream_package_obj_body.reset();

                // PLSQLParser.g:309:44: ( seq_of_statements )?
                if ( stream_seq_of_statements.hasNext() ) {
                    adaptor.addChild(root_0, stream_seq_of_statements.nextTree());

                }
                stream_seq_of_statements.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "package_body"


    public static class package_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_spec"
    // PLSQLParser.g:312:1: package_spec : package_name ( invoker_rights_clause )? ( is_key | as_key ) ( package_obj_spec )* end_key ( package_name )? -> ( package_name )+ ( invoker_rights_clause )? ( package_obj_spec )* ;
    public final package_spec_return package_spec() throws RecognitionException {
        package_spec_return retval = new package_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.package_name_return package_name132 =null;

        invoker_rights_clause_return invoker_rights_clause133 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key134 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key135 =null;

        package_obj_spec_return package_obj_spec136 =null;

        PLSQLParser_PLSQLKeys.end_key_return end_key137 =null;

        PLSQLParser_PLSQLCommons.package_name_return package_name138 =null;


        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_invoker_rights_clause=new RewriteRuleSubtreeStream(adaptor,"rule invoker_rights_clause");
        RewriteRuleSubtreeStream stream_package_obj_spec=new RewriteRuleSubtreeStream(adaptor,"rule package_obj_spec");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_package_name=new RewriteRuleSubtreeStream(adaptor,"rule package_name");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        try {
            // PLSQLParser.g:313:5: ( package_name ( invoker_rights_clause )? ( is_key | as_key ) ( package_obj_spec )* end_key ( package_name )? -> ( package_name )+ ( invoker_rights_clause )? ( package_obj_spec )* )
            // PLSQLParser.g:313:10: package_name ( invoker_rights_clause )? ( is_key | as_key ) ( package_obj_spec )* end_key ( package_name )?
            {
            pushFollow(FOLLOW_package_name_in_package_spec2637);
            package_name132=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_package_name.add(package_name132.getTree());

            // PLSQLParser.g:313:23: ( invoker_rights_clause )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // PLSQLParser.g:313:23: invoker_rights_clause
                    {
                    pushFollow(FOLLOW_invoker_rights_clause_in_package_spec2639);
                    invoker_rights_clause133=invoker_rights_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_invoker_rights_clause.add(invoker_rights_clause133.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:313:46: ( is_key | as_key )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==SQL92_RESERVED_IS) ) {
                alt41=1;
            }
            else if ( (LA41_0==SQL92_RESERVED_AS) ) {
                alt41=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // PLSQLParser.g:313:47: is_key
                    {
                    pushFollow(FOLLOW_is_key_in_package_spec2643);
                    is_key134=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key134.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:313:56: as_key
                    {
                    pushFollow(FOLLOW_as_key_in_package_spec2647);
                    as_key135=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key135.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:314:9: ( package_obj_spec )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==BINDVAR||LA42_0==COLON||LA42_0==DELIMITED_ID||LA42_0==INTRODUCER||LA42_0==REGULAR_ID||LA42_0==SQL92_RESERVED_CURSOR||LA42_0==SQL92_RESERVED_PROCEDURE) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // PLSQLParser.g:314:9: package_obj_spec
            	    {
            	    pushFollow(FOLLOW_package_obj_spec_in_package_spec2658);
            	    package_obj_spec136=package_obj_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_package_obj_spec.add(package_obj_spec136.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            pushFollow(FOLLOW_end_key_in_package_spec2669);
            end_key137=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key137.getTree());

            // PLSQLParser.g:315:17: ( package_name )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==DELIMITED_ID||LA43_0==INTRODUCER||LA43_0==REGULAR_ID) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // PLSQLParser.g:315:17: package_name
                    {
                    pushFollow(FOLLOW_package_name_in_package_spec2671);
                    package_name138=package_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_package_name.add(package_name138.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: package_obj_spec, package_name, invoker_rights_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:9: -> ( package_name )+ ( invoker_rights_clause )? ( package_obj_spec )*
            {
                if ( !(stream_package_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_package_name.hasNext() ) {
                    adaptor.addChild(root_0, stream_package_name.nextTree());

                }
                stream_package_name.reset();

                // PLSQLParser.g:316:26: ( invoker_rights_clause )?
                if ( stream_invoker_rights_clause.hasNext() ) {
                    adaptor.addChild(root_0, stream_invoker_rights_clause.nextTree());

                }
                stream_invoker_rights_clause.reset();

                // PLSQLParser.g:316:49: ( package_obj_spec )*
                while ( stream_package_obj_spec.hasNext() ) {
                    adaptor.addChild(root_0, stream_package_obj_spec.nextTree());

                }
                stream_package_obj_spec.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "package_spec"


    public static class package_obj_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_obj_spec"
    // PLSQLParser.g:319:1: package_obj_spec options {backtrack=true; } : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | procedure_spec | function_spec );
    public final package_obj_spec_return package_obj_spec() throws RecognitionException {
        package_obj_spec_return retval = new package_obj_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        variable_declaration_return variable_declaration139 =null;

        subtype_declaration_return subtype_declaration140 =null;

        cursor_declaration_return cursor_declaration141 =null;

        exception_declaration_return exception_declaration142 =null;

        record_declaration_return record_declaration143 =null;

        table_declaration_return table_declaration144 =null;

        procedure_spec_return procedure_spec145 =null;

        function_spec_return function_spec146 =null;



        try {
            // PLSQLParser.g:322:6: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | procedure_spec | function_spec )
            int alt44=8;
            switch ( input.LA(1) ) {
            case INTRODUCER:
                {
                int LA44_1 = input.LA(2);

                if ( (synpred18_PLSQLParser()) ) {
                    alt44=1;
                }
                else if ( (synpred21_PLSQLParser()) ) {
                    alt44=4;
                }
                else if ( (synpred22_PLSQLParser()) ) {
                    alt44=5;
                }
                else if ( (synpred23_PLSQLParser()) ) {
                    alt44=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 1, input);

                    throw nvae;

                }
                }
                break;
            case REGULAR_ID:
                {
                int LA44_2 = input.LA(2);

                if ( (synpred18_PLSQLParser()) ) {
                    alt44=1;
                }
                else if ( (((synpred19_PLSQLParser()&&synpred19_PLSQLParser())&&(input.LT(1).getText().equalsIgnoreCase("subtype")))) ) {
                    alt44=2;
                }
                else if ( (synpred21_PLSQLParser()) ) {
                    alt44=4;
                }
                else if ( (synpred22_PLSQLParser()) ) {
                    alt44=5;
                }
                else if ( (synpred23_PLSQLParser()) ) {
                    alt44=6;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
                    alt44=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 2, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA44_3 = input.LA(2);

                if ( (synpred18_PLSQLParser()) ) {
                    alt44=1;
                }
                else if ( (synpred21_PLSQLParser()) ) {
                    alt44=4;
                }
                else if ( (synpred22_PLSQLParser()) ) {
                    alt44=5;
                }
                else if ( (synpred23_PLSQLParser()) ) {
                    alt44=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 3, input);

                    throw nvae;

                }
                }
                break;
            case BINDVAR:
                {
                int LA44_4 = input.LA(2);

                if ( (synpred18_PLSQLParser()) ) {
                    alt44=1;
                }
                else if ( (synpred22_PLSQLParser()) ) {
                    alt44=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 4, input);

                    throw nvae;

                }
                }
                break;
            case COLON:
                {
                int LA44_5 = input.LA(2);

                if ( (synpred18_PLSQLParser()) ) {
                    alt44=1;
                }
                else if ( (synpred22_PLSQLParser()) ) {
                    alt44=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 44, 5, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CURSOR:
                {
                alt44=3;
                }
                break;
            case SQL92_RESERVED_PROCEDURE:
                {
                alt44=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }

            switch (alt44) {
                case 1 :
                    // PLSQLParser.g:322:11: variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_in_package_obj_spec2719);
                    variable_declaration139=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration139.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:323:11: subtype_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec2731);
                    subtype_declaration140=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration140.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:324:11: cursor_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec2743);
                    cursor_declaration141=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration141.getTree());

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:325:11: exception_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_exception_declaration_in_package_obj_spec2755);
                    exception_declaration142=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration142.getTree());

                    }
                    break;
                case 5 :
                    // PLSQLParser.g:326:11: record_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_record_declaration_in_package_obj_spec2767);
                    record_declaration143=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration143.getTree());

                    }
                    break;
                case 6 :
                    // PLSQLParser.g:327:11: table_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_table_declaration_in_package_obj_spec2779);
                    table_declaration144=table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_declaration144.getTree());

                    }
                    break;
                case 7 :
                    // PLSQLParser.g:328:11: procedure_spec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_procedure_spec_in_package_obj_spec2791);
                    procedure_spec145=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec145.getTree());

                    }
                    break;
                case 8 :
                    // PLSQLParser.g:329:11: function_spec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_function_spec_in_package_obj_spec2803);
                    function_spec146=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec146.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "package_obj_spec"


    public static class procedure_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "procedure_spec"
    // PLSQLParser.g:332:1: procedure_spec : procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? SEMICOLON -> ^( PROCEDURE_SPEC[$procedure_key.start] procedure_name ^( PARAMETERS ( parameter )* ) ) ;
    public final procedure_spec_return procedure_spec() throws RecognitionException {
        procedure_spec_return retval = new procedure_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN149=null;
        Token COMMA151=null;
        Token RIGHT_PAREN153=null;
        Token SEMICOLON154=null;
        PLSQLParser_PLSQLKeys.procedure_key_return procedure_key147 =null;

        PLSQLParser_PLSQLCommons.procedure_name_return procedure_name148 =null;

        parameter_return parameter150 =null;

        parameter_return parameter152 =null;


        Object LEFT_PAREN149_tree=null;
        Object COMMA151_tree=null;
        Object RIGHT_PAREN153_tree=null;
        Object SEMICOLON154_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
        RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
        try {
            // PLSQLParser.g:333:5: ( procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? SEMICOLON -> ^( PROCEDURE_SPEC[$procedure_key.start] procedure_name ^( PARAMETERS ( parameter )* ) ) )
            // PLSQLParser.g:333:11: procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? SEMICOLON
            {
            pushFollow(FOLLOW_procedure_key_in_procedure_spec2824);
            procedure_key147=procedure_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key147.getTree());

            pushFollow(FOLLOW_procedure_name_in_procedure_spec2826);
            procedure_name148=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name148.getTree());

            // PLSQLParser.g:334:9: ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==LEFT_PAREN) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // PLSQLParser.g:334:11: LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN
                    {
                    LEFT_PAREN149=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_procedure_spec2839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN149);


                    pushFollow(FOLLOW_parameter_in_procedure_spec2841);
                    parameter150=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(parameter150.getTree());

                    // PLSQLParser.g:334:32: ( COMMA parameter )*
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( (LA45_0==COMMA) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // PLSQLParser.g:334:34: COMMA parameter
                    	    {
                    	    COMMA151=(Token)match(input,COMMA,FOLLOW_COMMA_in_procedure_spec2845); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA151);


                    	    pushFollow(FOLLOW_parameter_in_procedure_spec2847);
                    	    parameter152=parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter.add(parameter152.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);


                    RIGHT_PAREN153=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_procedure_spec2852); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN153);


                    }
                    break;

            }


            SEMICOLON154=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_procedure_spec2857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON154);


            // AST REWRITE
            // elements: parameter, procedure_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 335:9: -> ^( PROCEDURE_SPEC[$procedure_key.start] procedure_name ^( PARAMETERS ( parameter )* ) )
            {
                // PLSQLParser.g:335:12: ^( PROCEDURE_SPEC[$procedure_key.start] procedure_name ^( PARAMETERS ( parameter )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROCEDURE_SPEC, (procedure_key147!=null?((Token)procedure_key147.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_procedure_name.nextTree());

                // PLSQLParser.g:335:66: ^( PARAMETERS ( parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:335:79: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "procedure_spec"


    public static class function_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_spec"
    // PLSQLParser.g:338:1: function_spec : function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec SEMICOLON -> ^( FUNCTION_SPEC[$function_key.start] function_name type_spec ^( PARAMETERS ( parameter )* ) ) ;
    public final function_spec_return function_spec() throws RecognitionException {
        function_spec_return retval = new function_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN157=null;
        Token COMMA159=null;
        Token RIGHT_PAREN161=null;
        Token SEMICOLON164=null;
        PLSQLParser_PLSQLKeys.function_key_return function_key155 =null;

        PLSQLParser_PLSQLCommons.function_name_return function_name156 =null;

        parameter_return parameter158 =null;

        parameter_return parameter160 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key162 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec163 =null;


        Object LEFT_PAREN157_tree=null;
        Object COMMA159_tree=null;
        Object RIGHT_PAREN161_tree=null;
        Object SEMICOLON164_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
        try {
            // PLSQLParser.g:339:5: ( function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec SEMICOLON -> ^( FUNCTION_SPEC[$function_key.start] function_name type_spec ^( PARAMETERS ( parameter )* ) ) )
            // PLSQLParser.g:339:10: function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec SEMICOLON
            {
            pushFollow(FOLLOW_function_key_in_function_spec2903);
            function_key155=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key155.getTree());

            pushFollow(FOLLOW_function_name_in_function_spec2905);
            function_name156=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_name.add(function_name156.getTree());

            // PLSQLParser.g:340:9: ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==LEFT_PAREN) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // PLSQLParser.g:340:10: LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN
                    {
                    LEFT_PAREN157=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_function_spec2917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN157);


                    pushFollow(FOLLOW_parameter_in_function_spec2919);
                    parameter158=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(parameter158.getTree());

                    // PLSQLParser.g:340:31: ( COMMA parameter )*
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( (LA47_0==COMMA) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // PLSQLParser.g:340:33: COMMA parameter
                    	    {
                    	    COMMA159=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_spec2923); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA159);


                    	    pushFollow(FOLLOW_parameter_in_function_spec2925);
                    	    parameter160=parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter.add(parameter160.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop47;
                        }
                    } while (true);


                    RIGHT_PAREN161=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_function_spec2929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN161);


                    }
                    break;

            }


            pushFollow(FOLLOW_return_key_in_function_spec2942);
            return_key162=return_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_return_key.add(return_key162.getTree());

            pushFollow(FOLLOW_type_spec_in_function_spec2944);
            type_spec163=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec163.getTree());

            SEMICOLON164=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_spec2946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON164);


            // AST REWRITE
            // elements: type_spec, function_name, parameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:9: -> ^( FUNCTION_SPEC[$function_key.start] function_name type_spec ^( PARAMETERS ( parameter )* ) )
            {
                // PLSQLParser.g:342:12: ^( FUNCTION_SPEC[$function_key.start] function_name type_spec ^( PARAMETERS ( parameter )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION_SPEC, (function_key155!=null?((Token)function_key155.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_function_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:342:73: ^( PARAMETERS ( parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:342:86: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_spec"


    public static class package_obj_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_obj_body"
    // PLSQLParser.g:345:1: package_obj_body options {backtrack=true; } : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body );
    public final package_obj_body_return package_obj_body() throws RecognitionException {
        package_obj_body_return retval = new package_obj_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        variable_declaration_return variable_declaration165 =null;

        subtype_declaration_return subtype_declaration166 =null;

        cursor_declaration_return cursor_declaration167 =null;

        exception_declaration_return exception_declaration168 =null;

        record_declaration_return record_declaration169 =null;

        table_declaration_return table_declaration170 =null;

        create_procedure_body_return create_procedure_body171 =null;

        create_function_body_return create_function_body172 =null;



        try {
            // PLSQLParser.g:348:6: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body )
            int alt49=8;
            switch ( input.LA(1) ) {
            case INTRODUCER:
                {
                int LA49_1 = input.LA(2);

                if ( (synpred25_PLSQLParser()) ) {
                    alt49=1;
                }
                else if ( (synpred28_PLSQLParser()) ) {
                    alt49=4;
                }
                else if ( (synpred29_PLSQLParser()) ) {
                    alt49=5;
                }
                else if ( (synpred30_PLSQLParser()) ) {
                    alt49=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);

                    throw nvae;

                }
                }
                break;
            case REGULAR_ID:
                {
                int LA49_2 = input.LA(2);

                if ( (synpred25_PLSQLParser()) ) {
                    alt49=1;
                }
                else if ( (((synpred26_PLSQLParser()&&synpred26_PLSQLParser())&&(input.LT(1).getText().equalsIgnoreCase("subtype")))) ) {
                    alt49=2;
                }
                else if ( (synpred28_PLSQLParser()) ) {
                    alt49=4;
                }
                else if ( (synpred29_PLSQLParser()) ) {
                    alt49=5;
                }
                else if ( (synpred30_PLSQLParser()) ) {
                    alt49=6;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
                    alt49=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 2, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA49_3 = input.LA(2);

                if ( (synpred25_PLSQLParser()) ) {
                    alt49=1;
                }
                else if ( (synpred28_PLSQLParser()) ) {
                    alt49=4;
                }
                else if ( (synpred29_PLSQLParser()) ) {
                    alt49=5;
                }
                else if ( (synpred30_PLSQLParser()) ) {
                    alt49=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 3, input);

                    throw nvae;

                }
                }
                break;
            case BINDVAR:
                {
                int LA49_4 = input.LA(2);

                if ( (synpred25_PLSQLParser()) ) {
                    alt49=1;
                }
                else if ( (synpred29_PLSQLParser()) ) {
                    alt49=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 4, input);

                    throw nvae;

                }
                }
                break;
            case COLON:
                {
                int LA49_5 = input.LA(2);

                if ( (synpred25_PLSQLParser()) ) {
                    alt49=1;
                }
                else if ( (synpred29_PLSQLParser()) ) {
                    alt49=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 5, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CURSOR:
                {
                alt49=3;
                }
                break;
            case SQL92_RESERVED_CREATE:
                {
                int LA49_7 = input.LA(2);

                if ( (synpred31_PLSQLParser()) ) {
                    alt49=7;
                }
                else if ( (true) ) {
                    alt49=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 7, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_PROCEDURE:
                {
                alt49=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }

            switch (alt49) {
                case 1 :
                    // PLSQLParser.g:348:12: variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_in_package_obj_body3002);
                    variable_declaration165=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration165.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:349:11: subtype_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_body3015);
                    subtype_declaration166=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration166.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:350:11: cursor_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_body3028);
                    cursor_declaration167=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration167.getTree());

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:351:11: exception_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_exception_declaration_in_package_obj_body3041);
                    exception_declaration168=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration168.getTree());

                    }
                    break;
                case 5 :
                    // PLSQLParser.g:352:11: record_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_record_declaration_in_package_obj_body3054);
                    record_declaration169=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration169.getTree());

                    }
                    break;
                case 6 :
                    // PLSQLParser.g:353:11: table_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_table_declaration_in_package_obj_body3066);
                    table_declaration170=table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_declaration170.getTree());

                    }
                    break;
                case 7 :
                    // PLSQLParser.g:354:11: create_procedure_body
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_procedure_body_in_package_obj_body3078);
                    create_procedure_body171=create_procedure_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_procedure_body171.getTree());

                    }
                    break;
                case 8 :
                    // PLSQLParser.g:355:11: create_function_body
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_function_body_in_package_obj_body3090);
                    create_function_body172=create_function_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_function_body172.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "package_obj_body"


    public static class drop_procedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "drop_procedure"
    // PLSQLParser.g:364:1: drop_procedure : drop_key procedure_key procedure_name SEMICOLON -> ^( DROP_PROCEDURE[$drop_key.start] procedure_name ) ;
    public final drop_procedure_return drop_procedure() throws RecognitionException {
        drop_procedure_return retval = new drop_procedure_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON176=null;
        PLSQLParser_PLSQLKeys.drop_key_return drop_key173 =null;

        PLSQLParser_PLSQLKeys.procedure_key_return procedure_key174 =null;

        PLSQLParser_PLSQLCommons.procedure_name_return procedure_name175 =null;


        Object SEMICOLON176_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
        RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
        RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
        try {
            // PLSQLParser.g:365:5: ( drop_key procedure_key procedure_name SEMICOLON -> ^( DROP_PROCEDURE[$drop_key.start] procedure_name ) )
            // PLSQLParser.g:365:10: drop_key procedure_key procedure_name SEMICOLON
            {
            pushFollow(FOLLOW_drop_key_in_drop_procedure3117);
            drop_key173=drop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_drop_key.add(drop_key173.getTree());

            pushFollow(FOLLOW_procedure_key_in_drop_procedure3119);
            procedure_key174=procedure_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key174.getTree());

            pushFollow(FOLLOW_procedure_name_in_drop_procedure3121);
            procedure_name175=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name175.getTree());

            SEMICOLON176=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_procedure3131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON176);


            // AST REWRITE
            // elements: procedure_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:9: -> ^( DROP_PROCEDURE[$drop_key.start] procedure_name )
            {
                // PLSQLParser.g:367:12: ^( DROP_PROCEDURE[$drop_key.start] procedure_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DROP_PROCEDURE, (drop_key173!=null?((Token)drop_key173.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_procedure_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "drop_procedure"


    public static class alter_procedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_procedure"
    // PLSQLParser.g:370:1: alter_procedure : alter_key procedure_key procedure_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_PROCEDURE[$alter_key.start] procedure_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) ;
    public final alter_procedure_return alter_procedure() throws RecognitionException {
        alter_procedure_return retval = new alter_procedure_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON185=null;
        PLSQLParser_PLSQLKeys.alter_key_return alter_key177 =null;

        PLSQLParser_PLSQLKeys.procedure_key_return procedure_key178 =null;

        PLSQLParser_PLSQLCommons.procedure_name_return procedure_name179 =null;

        PLSQLParser_PLSQLKeys.compile_key_return compile_key180 =null;

        PLSQLParser_PLSQLKeys.debug_key_return debug_key181 =null;

        compiler_parameters_clause_return compiler_parameters_clause182 =null;

        PLSQLParser_PLSQLKeys.reuse_key_return reuse_key183 =null;

        PLSQLParser_PLSQLKeys.settings_key_return settings_key184 =null;


        Object SEMICOLON185_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_reuse_key=new RewriteRuleSubtreeStream(adaptor,"rule reuse_key");
        RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
        RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
        RewriteRuleSubtreeStream stream_compiler_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule compiler_parameters_clause");
        RewriteRuleSubtreeStream stream_debug_key=new RewriteRuleSubtreeStream(adaptor,"rule debug_key");
        RewriteRuleSubtreeStream stream_compile_key=new RewriteRuleSubtreeStream(adaptor,"rule compile_key");
        RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
        RewriteRuleSubtreeStream stream_settings_key=new RewriteRuleSubtreeStream(adaptor,"rule settings_key");
        try {
            // PLSQLParser.g:371:5: ( alter_key procedure_key procedure_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_PROCEDURE[$alter_key.start] procedure_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) )
            // PLSQLParser.g:371:10: alter_key procedure_key procedure_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON
            {
            pushFollow(FOLLOW_alter_key_in_alter_procedure3168);
            alter_key177=alter_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alter_key.add(alter_key177.getTree());

            pushFollow(FOLLOW_procedure_key_in_alter_procedure3170);
            procedure_key178=procedure_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key178.getTree());

            pushFollow(FOLLOW_procedure_name_in_alter_procedure3172);
            procedure_name179=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name179.getTree());

            pushFollow(FOLLOW_compile_key_in_alter_procedure3182);
            compile_key180=compile_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compile_key.add(compile_key180.getTree());

            // PLSQLParser.g:372:21: ( debug_key )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==REGULAR_ID) ) {
                int LA50_1 = input.LA(2);

                if ( (LA50_1==DELIMITED_ID||LA50_1==INTRODUCER||LA50_1==SEMICOLON) ) {
                    alt50=1;
                }
                else if ( (LA50_1==REGULAR_ID) ) {
                    int LA50_4 = input.LA(3);

                    if ( (LA50_4==EQUALS_OP||LA50_4==REGULAR_ID) ) {
                        alt50=1;
                    }
                }
            }
            switch (alt50) {
                case 1 :
                    // PLSQLParser.g:372:21: debug_key
                    {
                    pushFollow(FOLLOW_debug_key_in_alter_procedure3184);
                    debug_key181=debug_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_debug_key.add(debug_key181.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:372:32: ( compiler_parameters_clause )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==REGULAR_ID) ) {
                    int LA51_1 = input.LA(2);

                    if ( (LA51_1==EQUALS_OP) ) {
                        alt51=1;
                    }


                }
                else if ( (LA51_0==DELIMITED_ID||LA51_0==INTRODUCER) ) {
                    alt51=1;
                }


                switch (alt51) {
            	case 1 :
            	    // PLSQLParser.g:372:32: compiler_parameters_clause
            	    {
            	    pushFollow(FOLLOW_compiler_parameters_clause_in_alter_procedure3187);
            	    compiler_parameters_clause182=compiler_parameters_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_compiler_parameters_clause.add(compiler_parameters_clause182.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            // PLSQLParser.g:373:9: ( reuse_key settings_key )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==REGULAR_ID) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // PLSQLParser.g:373:10: reuse_key settings_key
                    {
                    pushFollow(FOLLOW_reuse_key_in_alter_procedure3199);
                    reuse_key183=reuse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reuse_key.add(reuse_key183.getTree());

                    pushFollow(FOLLOW_settings_key_in_alter_procedure3201);
                    settings_key184=settings_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_settings_key.add(settings_key184.getTree());

                    }
                    break;

            }


            SEMICOLON185=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_procedure3213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON185);


            // AST REWRITE
            // elements: reuse_key, debug_key, compiler_parameters_clause, procedure_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:9: -> ^( ALTER_PROCEDURE[$alter_key.start] procedure_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
            {
                // PLSQLParser.g:375:12: ^( ALTER_PROCEDURE[$alter_key.start] procedure_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_PROCEDURE, (alter_key177!=null?((Token)alter_key177.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_procedure_name.nextTree());

                // PLSQLParser.g:375:63: ( debug_key )?
                if ( stream_debug_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_debug_key.nextTree());

                }
                stream_debug_key.reset();

                // PLSQLParser.g:375:74: ( reuse_key )?
                if ( stream_reuse_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_reuse_key.nextTree());

                }
                stream_reuse_key.reset();

                // PLSQLParser.g:375:85: ( compiler_parameters_clause )*
                while ( stream_compiler_parameters_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_compiler_parameters_clause.nextTree());

                }
                stream_compiler_parameters_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_procedure"


    public static class create_procedure_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create_procedure_body"
    // PLSQLParser.g:378:1: create_procedure_body : ( create_key ( or_key replace_key )? )? procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? ( invoker_rights_clause )? ( is_key | as_key ) ( ( declare_key )? ( declare_spec )* body | call_spec | external_key ) SEMICOLON -> {mode == 1}? ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? external_key ) -> {mode == 2}? ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( CALL_MODE call_spec ) ) -> ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( BODY_MODE ( declare_spec )* body ) ) ;
    public final create_procedure_body_return create_procedure_body() throws RecognitionException {
        create_procedure_body_return retval = new create_procedure_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN191=null;
        Token COMMA193=null;
        Token RIGHT_PAREN195=null;
        Token SEMICOLON204=null;
        PLSQLParser_PLSQLKeys.create_key_return create_key186 =null;

        PLSQLParser_PLSQLKeys.or_key_return or_key187 =null;

        PLSQLParser_PLSQLKeys.replace_key_return replace_key188 =null;

        PLSQLParser_PLSQLKeys.procedure_key_return procedure_key189 =null;

        PLSQLParser_PLSQLCommons.procedure_name_return procedure_name190 =null;

        parameter_return parameter192 =null;

        parameter_return parameter194 =null;

        invoker_rights_clause_return invoker_rights_clause196 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key197 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key198 =null;

        PLSQLParser_PLSQLKeys.declare_key_return declare_key199 =null;

        declare_spec_return declare_spec200 =null;

        body_return body201 =null;

        call_spec_return call_spec202 =null;

        PLSQLParser_PLSQLKeys.external_key_return external_key203 =null;


        Object LEFT_PAREN191_tree=null;
        Object COMMA193_tree=null;
        Object RIGHT_PAREN195_tree=null;
        Object SEMICOLON204_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
        RewriteRuleSubtreeStream stream_declare_spec=new RewriteRuleSubtreeStream(adaptor,"rule declare_spec");
        RewriteRuleSubtreeStream stream_external_key=new RewriteRuleSubtreeStream(adaptor,"rule external_key");
        RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
        RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_invoker_rights_clause=new RewriteRuleSubtreeStream(adaptor,"rule invoker_rights_clause");
        RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:380:5: ( ( create_key ( or_key replace_key )? )? procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? ( invoker_rights_clause )? ( is_key | as_key ) ( ( declare_key )? ( declare_spec )* body | call_spec | external_key ) SEMICOLON -> {mode == 1}? ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? external_key ) -> {mode == 2}? ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( CALL_MODE call_spec ) ) -> ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( BODY_MODE ( declare_spec )* body ) ) )
            // PLSQLParser.g:380:10: ( create_key ( or_key replace_key )? )? procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? ( invoker_rights_clause )? ( is_key | as_key ) ( ( declare_key )? ( declare_spec )* body | call_spec | external_key ) SEMICOLON
            {
            // PLSQLParser.g:380:10: ( create_key ( or_key replace_key )? )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==SQL92_RESERVED_CREATE) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // PLSQLParser.g:380:11: create_key ( or_key replace_key )?
                    {
                    pushFollow(FOLLOW_create_key_in_create_procedure_body3268);
                    create_key186=create_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_create_key.add(create_key186.getTree());

                    // PLSQLParser.g:380:22: ( or_key replace_key )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==SQL92_RESERVED_OR) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // PLSQLParser.g:380:24: or_key replace_key
                            {
                            pushFollow(FOLLOW_or_key_in_create_procedure_body3272);
                            or_key187=or_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_or_key.add(or_key187.getTree());

                            pushFollow(FOLLOW_replace_key_in_create_procedure_body3274);
                            replace_key188=replace_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_replace_key.add(replace_key188.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_procedure_key_in_create_procedure_body3281);
            procedure_key189=procedure_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key189.getTree());

            pushFollow(FOLLOW_procedure_name_in_create_procedure_body3283);
            procedure_name190=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name190.getTree());

            // PLSQLParser.g:381:15: ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==LEFT_PAREN) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // PLSQLParser.g:381:17: LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN
                    {
                    LEFT_PAREN191=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_create_procedure_body3301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN191);


                    pushFollow(FOLLOW_parameter_in_create_procedure_body3303);
                    parameter192=parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter.add(parameter192.getTree());

                    // PLSQLParser.g:381:38: ( COMMA parameter )*
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( (LA55_0==COMMA) ) {
                            alt55=1;
                        }


                        switch (alt55) {
                    	case 1 :
                    	    // PLSQLParser.g:381:40: COMMA parameter
                    	    {
                    	    COMMA193=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_procedure_body3307); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA193);


                    	    pushFollow(FOLLOW_parameter_in_create_procedure_body3309);
                    	    parameter194=parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter.add(parameter194.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop55;
                        }
                    } while (true);


                    RIGHT_PAREN195=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_create_procedure_body3314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN195);


                    }
                    break;

            }


            // PLSQLParser.g:382:15: ( invoker_rights_clause )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // PLSQLParser.g:382:15: invoker_rights_clause
                    {
                    pushFollow(FOLLOW_invoker_rights_clause_in_create_procedure_body3334);
                    invoker_rights_clause196=invoker_rights_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_invoker_rights_clause.add(invoker_rights_clause196.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:383:9: ( is_key | as_key )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==SQL92_RESERVED_IS) ) {
                alt58=1;
            }
            else if ( (LA58_0==SQL92_RESERVED_AS) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // PLSQLParser.g:383:11: is_key
                    {
                    pushFollow(FOLLOW_is_key_in_create_procedure_body3347);
                    is_key197=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key197.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:383:20: as_key
                    {
                    pushFollow(FOLLOW_as_key_in_create_procedure_body3351);
                    as_key198=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key198.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:384:15: ( ( declare_key )? ( declare_spec )* body | call_spec | external_key )
            int alt61=3;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==BINDVAR||LA61_0==COLON||LA61_0==DELIMITED_ID||LA61_0==INTRODUCER||LA61_0==SQL92_RESERVED_BEGIN||LA61_0==SQL92_RESERVED_CREATE||LA61_0==SQL92_RESERVED_CURSOR||LA61_0==SQL92_RESERVED_DECLARE||LA61_0==SQL92_RESERVED_PROCEDURE) ) {
                alt61=1;
            }
            else if ( (LA61_0==REGULAR_ID) ) {
                int LA61_3 = input.LA(2);

                if ( (!((((input.LT(1).getText().equalsIgnoreCase("external"))||(input.LT(1).getText().equalsIgnoreCase("language")))))) ) {
                    alt61=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
                    alt61=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                    alt61=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 3, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // PLSQLParser.g:384:20: ( declare_key )? ( declare_spec )* body
                    {
                    // PLSQLParser.g:384:20: ( declare_key )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==SQL92_RESERVED_DECLARE) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // PLSQLParser.g:384:20: declare_key
                            {
                            pushFollow(FOLLOW_declare_key_in_create_procedure_body3374);
                            declare_key199=declare_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_declare_key.add(declare_key199.getTree());

                            }
                            break;

                    }


                    // PLSQLParser.g:384:33: ( declare_spec )*
                    loop60:
                    do {
                        int alt60=2;
                        int LA60_0 = input.LA(1);

                        if ( (LA60_0==BINDVAR||LA60_0==COLON||LA60_0==DELIMITED_ID||LA60_0==INTRODUCER||LA60_0==REGULAR_ID||LA60_0==SQL92_RESERVED_CREATE||LA60_0==SQL92_RESERVED_CURSOR||LA60_0==SQL92_RESERVED_PROCEDURE) ) {
                            alt60=1;
                        }


                        switch (alt60) {
                    	case 1 :
                    	    // PLSQLParser.g:384:33: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_create_procedure_body3377);
                    	    declare_spec200=declare_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_declare_spec.add(declare_spec200.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop60;
                        }
                    } while (true);


                    pushFollow(FOLLOW_body_in_create_procedure_body3380);
                    body201=body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_body.add(body201.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:385:20: call_spec
                    {
                    pushFollow(FOLLOW_call_spec_in_create_procedure_body3402);
                    call_spec202=call_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_call_spec.add(call_spec202.getTree());

                    if ( state.backtracking==0 ) {mode = 2;}

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:386:20: external_key
                    {
                    pushFollow(FOLLOW_external_key_in_create_procedure_body3425);
                    external_key203=external_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_external_key.add(external_key203.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            SEMICOLON204=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_procedure_body3459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON204);


            // AST REWRITE
            // elements: invoker_rights_clause, external_key, procedure_name, parameter, invoker_rights_clause, call_spec, replace_key, replace_key, procedure_name, invoker_rights_clause, parameter, procedure_name, declare_spec, parameter, body, replace_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:9: -> {mode == 1}? ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? external_key )
            if (mode == 1) {
                // PLSQLParser.g:390:13: ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? external_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_PROCEDURE, (procedure_key189!=null?((Token)procedure_key189.start):null))
                , root_1);

                // PLSQLParser.g:390:54: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_procedure_name.nextTree());

                // PLSQLParser.g:390:82: ^( PARAMETERS ( parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:390:95: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:391:17: ( invoker_rights_clause )?
                if ( stream_invoker_rights_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());

                }
                stream_invoker_rights_clause.reset();

                adaptor.addChild(root_1, stream_external_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 392:9: -> {mode == 2}? ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( CALL_MODE call_spec ) )
            if (mode == 2) {
                // PLSQLParser.g:393:13: ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( CALL_MODE call_spec ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_PROCEDURE, (procedure_key189!=null?((Token)procedure_key189.start):null))
                , root_1);

                // PLSQLParser.g:393:54: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_procedure_name.nextTree());

                // PLSQLParser.g:393:82: ^( PARAMETERS ( parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:393:95: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:394:17: ( invoker_rights_clause )?
                if ( stream_invoker_rights_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());

                }
                stream_invoker_rights_clause.reset();

                // PLSQLParser.g:395:17: ^( CALL_MODE call_spec )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CALL_MODE, "CALL_MODE")
                , root_2);

                adaptor.addChild(root_2, stream_call_spec.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 396:9: -> ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( BODY_MODE ( declare_spec )* body ) )
            {
                // PLSQLParser.g:396:15: ^( CREATE_PROCEDURE[$procedure_key.start] ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( BODY_MODE ( declare_spec )* body ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_PROCEDURE, (procedure_key189!=null?((Token)procedure_key189.start):null))
                , root_1);

                // PLSQLParser.g:396:56: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_procedure_name.nextTree());

                // PLSQLParser.g:396:84: ^( PARAMETERS ( parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:396:97: ( parameter )*
                while ( stream_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_parameter.nextTree());

                }
                stream_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:397:17: ( invoker_rights_clause )?
                if ( stream_invoker_rights_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());

                }
                stream_invoker_rights_clause.reset();

                // PLSQLParser.g:398:17: ^( BODY_MODE ( declare_spec )* body )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BODY_MODE, "BODY_MODE")
                , root_2);

                // PLSQLParser.g:398:29: ( declare_spec )*
                while ( stream_declare_spec.hasNext() ) {
                    adaptor.addChild(root_2, stream_declare_spec.nextTree());

                }
                stream_declare_spec.reset();

                adaptor.addChild(root_2, stream_body.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "create_procedure_body"


    public static class drop_trigger_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "drop_trigger"
    // PLSQLParser.g:405:1: drop_trigger : drop_key trigger_key trigger_name SEMICOLON -> ^( DROP_TRIGGER[$drop_key.start] trigger_name ) ;
    public final drop_trigger_return drop_trigger() throws RecognitionException {
        drop_trigger_return retval = new drop_trigger_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON208=null;
        PLSQLParser_PLSQLKeys.drop_key_return drop_key205 =null;

        PLSQLParser_PLSQLKeys.trigger_key_return trigger_key206 =null;

        PLSQLParser_PLSQLCommons.trigger_name_return trigger_name207 =null;


        Object SEMICOLON208_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_trigger_key=new RewriteRuleSubtreeStream(adaptor,"rule trigger_key");
        RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
        RewriteRuleSubtreeStream stream_trigger_name=new RewriteRuleSubtreeStream(adaptor,"rule trigger_name");
        try {
            // PLSQLParser.g:406:5: ( drop_key trigger_key trigger_name SEMICOLON -> ^( DROP_TRIGGER[$drop_key.start] trigger_name ) )
            // PLSQLParser.g:406:10: drop_key trigger_key trigger_name SEMICOLON
            {
            pushFollow(FOLLOW_drop_key_in_drop_trigger3706);
            drop_key205=drop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_drop_key.add(drop_key205.getTree());

            pushFollow(FOLLOW_trigger_key_in_drop_trigger3708);
            trigger_key206=trigger_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_trigger_key.add(trigger_key206.getTree());

            pushFollow(FOLLOW_trigger_name_in_drop_trigger3710);
            trigger_name207=trigger_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_trigger_name.add(trigger_name207.getTree());

            SEMICOLON208=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_trigger3720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON208);


            // AST REWRITE
            // elements: trigger_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:9: -> ^( DROP_TRIGGER[$drop_key.start] trigger_name )
            {
                // PLSQLParser.g:408:12: ^( DROP_TRIGGER[$drop_key.start] trigger_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DROP_TRIGGER, (drop_key205!=null?((Token)drop_key205.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_trigger_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "drop_trigger"


    public static class alter_trigger_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_trigger"
    // PLSQLParser.g:411:1: alter_trigger : alter_key trigger_key tn1= trigger_name ( ( enable_key | disable_key ) | rename_key to_key tn2= trigger_name | compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? ) SEMICOLON -> {mode == 1}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( enable_key )? ( disable_key )? ) -> {mode == 2}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ^( rename_key $tn2) ) -> ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) ;
    public final alter_trigger_return alter_trigger() throws RecognitionException {
        alter_trigger_return retval = new alter_trigger_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON220=null;
        PLSQLParser_PLSQLCommons.trigger_name_return tn1 =null;

        PLSQLParser_PLSQLCommons.trigger_name_return tn2 =null;

        PLSQLParser_PLSQLKeys.alter_key_return alter_key209 =null;

        PLSQLParser_PLSQLKeys.trigger_key_return trigger_key210 =null;

        PLSQLParser_PLSQLKeys.enable_key_return enable_key211 =null;

        PLSQLParser_PLSQLKeys.disable_key_return disable_key212 =null;

        PLSQLParser_PLSQLKeys.rename_key_return rename_key213 =null;

        PLSQLParser_PLSQLKeys.to_key_return to_key214 =null;

        PLSQLParser_PLSQLKeys.compile_key_return compile_key215 =null;

        PLSQLParser_PLSQLKeys.debug_key_return debug_key216 =null;

        compiler_parameters_clause_return compiler_parameters_clause217 =null;

        PLSQLParser_PLSQLKeys.reuse_key_return reuse_key218 =null;

        PLSQLParser_PLSQLKeys.settings_key_return settings_key219 =null;


        Object SEMICOLON220_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_disable_key=new RewriteRuleSubtreeStream(adaptor,"rule disable_key");
        RewriteRuleSubtreeStream stream_trigger_key=new RewriteRuleSubtreeStream(adaptor,"rule trigger_key");
        RewriteRuleSubtreeStream stream_reuse_key=new RewriteRuleSubtreeStream(adaptor,"rule reuse_key");
        RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
        RewriteRuleSubtreeStream stream_to_key=new RewriteRuleSubtreeStream(adaptor,"rule to_key");
        RewriteRuleSubtreeStream stream_compiler_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule compiler_parameters_clause");
        RewriteRuleSubtreeStream stream_enable_key=new RewriteRuleSubtreeStream(adaptor,"rule enable_key");
        RewriteRuleSubtreeStream stream_debug_key=new RewriteRuleSubtreeStream(adaptor,"rule debug_key");
        RewriteRuleSubtreeStream stream_compile_key=new RewriteRuleSubtreeStream(adaptor,"rule compile_key");
        RewriteRuleSubtreeStream stream_rename_key=new RewriteRuleSubtreeStream(adaptor,"rule rename_key");
        RewriteRuleSubtreeStream stream_trigger_name=new RewriteRuleSubtreeStream(adaptor,"rule trigger_name");
        RewriteRuleSubtreeStream stream_settings_key=new RewriteRuleSubtreeStream(adaptor,"rule settings_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:413:5: ( alter_key trigger_key tn1= trigger_name ( ( enable_key | disable_key ) | rename_key to_key tn2= trigger_name | compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? ) SEMICOLON -> {mode == 1}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( enable_key )? ( disable_key )? ) -> {mode == 2}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ^( rename_key $tn2) ) -> ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) )
            // PLSQLParser.g:413:10: alter_key trigger_key tn1= trigger_name ( ( enable_key | disable_key ) | rename_key to_key tn2= trigger_name | compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? ) SEMICOLON
            {
            pushFollow(FOLLOW_alter_key_in_alter_trigger3765);
            alter_key209=alter_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alter_key.add(alter_key209.getTree());

            pushFollow(FOLLOW_trigger_key_in_alter_trigger3767);
            trigger_key210=trigger_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_trigger_key.add(trigger_key210.getTree());

            pushFollow(FOLLOW_trigger_name_in_alter_trigger3771);
            tn1=trigger_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_trigger_name.add(tn1.getTree());

            // PLSQLParser.g:414:5: ( ( enable_key | disable_key ) | rename_key to_key tn2= trigger_name | compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? )
            int alt66=3;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==REGULAR_ID) ) {
                int LA66_1 = input.LA(2);

                if ( (LA66_1==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("rename")))) {
                    alt66=2;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable")))) ) {
                    alt66=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("compile"))) ) {
                    alt66=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 66, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }
            switch (alt66) {
                case 1 :
                    // PLSQLParser.g:414:10: ( enable_key | disable_key )
                    {
                    // PLSQLParser.g:414:10: ( enable_key | disable_key )
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {
                        int LA62_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("enable"))) ) {
                            alt62=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("disable"))) ) {
                            alt62=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 62, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 62, 0, input);

                        throw nvae;

                    }
                    switch (alt62) {
                        case 1 :
                            // PLSQLParser.g:414:11: enable_key
                            {
                            pushFollow(FOLLOW_enable_key_in_alter_trigger3783);
                            enable_key211=enable_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_enable_key.add(enable_key211.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:414:22: disable_key
                            {
                            pushFollow(FOLLOW_disable_key_in_alter_trigger3785);
                            disable_key212=disable_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_disable_key.add(disable_key212.getTree());

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:415:10: rename_key to_key tn2= trigger_name
                    {
                    pushFollow(FOLLOW_rename_key_in_alter_trigger3799);
                    rename_key213=rename_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rename_key.add(rename_key213.getTree());

                    pushFollow(FOLLOW_to_key_in_alter_trigger3801);
                    to_key214=to_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_to_key.add(to_key214.getTree());

                    pushFollow(FOLLOW_trigger_name_in_alter_trigger3805);
                    tn2=trigger_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_trigger_name.add(tn2.getTree());

                    if ( state.backtracking==0 ) {mode = 2;}

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:416:10: compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )?
                    {
                    pushFollow(FOLLOW_compile_key_in_alter_trigger3818);
                    compile_key215=compile_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_compile_key.add(compile_key215.getTree());

                    // PLSQLParser.g:416:22: ( debug_key )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==REGULAR_ID) ) {
                        int LA63_1 = input.LA(2);

                        if ( (LA63_1==DELIMITED_ID||LA63_1==INTRODUCER||LA63_1==SEMICOLON) ) {
                            alt63=1;
                        }
                        else if ( (LA63_1==REGULAR_ID) ) {
                            int LA63_4 = input.LA(3);

                            if ( (LA63_4==EQUALS_OP||LA63_4==REGULAR_ID) ) {
                                alt63=1;
                            }
                        }
                    }
                    switch (alt63) {
                        case 1 :
                            // PLSQLParser.g:416:22: debug_key
                            {
                            pushFollow(FOLLOW_debug_key_in_alter_trigger3820);
                            debug_key216=debug_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_debug_key.add(debug_key216.getTree());

                            }
                            break;

                    }


                    // PLSQLParser.g:416:33: ( compiler_parameters_clause )*
                    loop64:
                    do {
                        int alt64=2;
                        int LA64_0 = input.LA(1);

                        if ( (LA64_0==REGULAR_ID) ) {
                            int LA64_1 = input.LA(2);

                            if ( (LA64_1==EQUALS_OP) ) {
                                alt64=1;
                            }


                        }
                        else if ( (LA64_0==DELIMITED_ID||LA64_0==INTRODUCER) ) {
                            alt64=1;
                        }


                        switch (alt64) {
                    	case 1 :
                    	    // PLSQLParser.g:416:33: compiler_parameters_clause
                    	    {
                    	    pushFollow(FOLLOW_compiler_parameters_clause_in_alter_trigger3823);
                    	    compiler_parameters_clause217=compiler_parameters_clause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_compiler_parameters_clause.add(compiler_parameters_clause217.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);


                    // PLSQLParser.g:416:61: ( reuse_key settings_key )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==REGULAR_ID) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // PLSQLParser.g:416:62: reuse_key settings_key
                            {
                            pushFollow(FOLLOW_reuse_key_in_alter_trigger3827);
                            reuse_key218=reuse_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_reuse_key.add(reuse_key218.getTree());

                            pushFollow(FOLLOW_settings_key_in_alter_trigger3829);
                            settings_key219=settings_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_settings_key.add(settings_key219.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            SEMICOLON220=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_trigger3842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON220);


            // AST REWRITE
            // elements: tn2, compiler_parameters_clause, debug_key, tn1, disable_key, rename_key, tn1, enable_key, reuse_key, tn1
            // token labels: 
            // rule labels: retval, tn1, tn2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tn1=new RewriteRuleSubtreeStream(adaptor,"rule tn1",tn1!=null?tn1.tree:null);
            RewriteRuleSubtreeStream stream_tn2=new RewriteRuleSubtreeStream(adaptor,"rule tn2",tn2!=null?tn2.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:5: -> {mode == 1}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( enable_key )? ( disable_key )? )
            if (mode == 1) {
                // PLSQLParser.g:418:21: ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( enable_key )? ( disable_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_TRIGGER, (alter_key209!=null?((Token)alter_key209.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_tn1.nextTree());

                // PLSQLParser.g:418:60: ( enable_key )?
                if ( stream_enable_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_enable_key.nextTree());

                }
                stream_enable_key.reset();

                // PLSQLParser.g:418:72: ( disable_key )?
                if ( stream_disable_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_disable_key.nextTree());

                }
                stream_disable_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 419:5: -> {mode == 2}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ^( rename_key $tn2) )
            if (mode == 2) {
                // PLSQLParser.g:419:21: ^( ALTER_TRIGGER[$alter_key.start] $tn1 ^( rename_key $tn2) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_TRIGGER, (alter_key209!=null?((Token)alter_key209.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_tn1.nextTree());

                // PLSQLParser.g:419:60: ^( rename_key $tn2)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_rename_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_tn2.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 420:5: -> ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
            {
                // PLSQLParser.g:420:8: ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_TRIGGER, (alter_key209!=null?((Token)alter_key209.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_tn1.nextTree());

                // PLSQLParser.g:420:47: ( debug_key )?
                if ( stream_debug_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_debug_key.nextTree());

                }
                stream_debug_key.reset();

                // PLSQLParser.g:420:58: ( reuse_key )?
                if ( stream_reuse_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_reuse_key.nextTree());

                }
                stream_reuse_key.reset();

                // PLSQLParser.g:420:69: ( compiler_parameters_clause )*
                while ( stream_compiler_parameters_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_compiler_parameters_clause.nextTree());

                }
                stream_compiler_parameters_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_trigger"


    public static class create_trigger_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create_trigger"
    // PLSQLParser.g:423:1: create_trigger : create_key ( or_key replace_key )? trigger_key trigger_name ( simple_dml_trigger | compound_dml_trigger | non_dml_trigger ) ( trigger_follows_clause )? ( enable_key | disable_key )? ( trigger_when_clause )? trigger_body SEMICOLON -> ^( CREATE_TRIGGER[$create_key.start] ( replace_key )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( enable_key )? ( disable_key )? ( trigger_when_clause )? trigger_body ) ;
    public final create_trigger_return create_trigger() throws RecognitionException {
        create_trigger_return retval = new create_trigger_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON234=null;
        PLSQLParser_PLSQLKeys.create_key_return create_key221 =null;

        PLSQLParser_PLSQLKeys.or_key_return or_key222 =null;

        PLSQLParser_PLSQLKeys.replace_key_return replace_key223 =null;

        PLSQLParser_PLSQLKeys.trigger_key_return trigger_key224 =null;

        PLSQLParser_PLSQLCommons.trigger_name_return trigger_name225 =null;

        simple_dml_trigger_return simple_dml_trigger226 =null;

        compound_dml_trigger_return compound_dml_trigger227 =null;

        non_dml_trigger_return non_dml_trigger228 =null;

        trigger_follows_clause_return trigger_follows_clause229 =null;

        PLSQLParser_PLSQLKeys.enable_key_return enable_key230 =null;

        PLSQLParser_PLSQLKeys.disable_key_return disable_key231 =null;

        trigger_when_clause_return trigger_when_clause232 =null;

        trigger_body_return trigger_body233 =null;


        Object SEMICOLON234_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_disable_key=new RewriteRuleSubtreeStream(adaptor,"rule disable_key");
        RewriteRuleSubtreeStream stream_compound_dml_trigger=new RewriteRuleSubtreeStream(adaptor,"rule compound_dml_trigger");
        RewriteRuleSubtreeStream stream_non_dml_trigger=new RewriteRuleSubtreeStream(adaptor,"rule non_dml_trigger");
        RewriteRuleSubtreeStream stream_enable_key=new RewriteRuleSubtreeStream(adaptor,"rule enable_key");
        RewriteRuleSubtreeStream stream_trigger_body=new RewriteRuleSubtreeStream(adaptor,"rule trigger_body");
        RewriteRuleSubtreeStream stream_trigger_follows_clause=new RewriteRuleSubtreeStream(adaptor,"rule trigger_follows_clause");
        RewriteRuleSubtreeStream stream_trigger_when_clause=new RewriteRuleSubtreeStream(adaptor,"rule trigger_when_clause");
        RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
        RewriteRuleSubtreeStream stream_trigger_key=new RewriteRuleSubtreeStream(adaptor,"rule trigger_key");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
        RewriteRuleSubtreeStream stream_trigger_name=new RewriteRuleSubtreeStream(adaptor,"rule trigger_name");
        RewriteRuleSubtreeStream stream_simple_dml_trigger=new RewriteRuleSubtreeStream(adaptor,"rule simple_dml_trigger");
        try {
            // PLSQLParser.g:424:5: ( create_key ( or_key replace_key )? trigger_key trigger_name ( simple_dml_trigger | compound_dml_trigger | non_dml_trigger ) ( trigger_follows_clause )? ( enable_key | disable_key )? ( trigger_when_clause )? trigger_body SEMICOLON -> ^( CREATE_TRIGGER[$create_key.start] ( replace_key )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( enable_key )? ( disable_key )? ( trigger_when_clause )? trigger_body ) )
            // PLSQLParser.g:424:10: create_key ( or_key replace_key )? trigger_key trigger_name ( simple_dml_trigger | compound_dml_trigger | non_dml_trigger ) ( trigger_follows_clause )? ( enable_key | disable_key )? ( trigger_when_clause )? trigger_body SEMICOLON
            {
            pushFollow(FOLLOW_create_key_in_create_trigger3930);
            create_key221=create_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_create_key.add(create_key221.getTree());

            // PLSQLParser.g:424:21: ( or_key replace_key )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==SQL92_RESERVED_OR) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // PLSQLParser.g:424:23: or_key replace_key
                    {
                    pushFollow(FOLLOW_or_key_in_create_trigger3934);
                    or_key222=or_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_key.add(or_key222.getTree());

                    pushFollow(FOLLOW_replace_key_in_create_trigger3936);
                    replace_key223=replace_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_replace_key.add(replace_key223.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_trigger_key_in_create_trigger3941);
            trigger_key224=trigger_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_trigger_key.add(trigger_key224.getTree());

            pushFollow(FOLLOW_trigger_name_in_create_trigger3943);
            trigger_name225=trigger_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_trigger_name.add(trigger_name225.getTree());

            // PLSQLParser.g:425:5: ( simple_dml_trigger | compound_dml_trigger | non_dml_trigger )
            int alt68=3;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))||(input.LT(1).getText().equalsIgnoreCase("instead"))))) {
                int LA68_1 = input.LA(2);

                if ( (LA68_1==SQL92_RESERVED_DELETE||LA68_1==SQL92_RESERVED_INSERT||LA68_1==SQL92_RESERVED_UPDATE) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
                    alt68=1;
                }
                else if ( (LA68_1==SQL92_RESERVED_OF) && ((input.LT(1).getText().equalsIgnoreCase("instead")))) {
                    alt68=1;
                }
                else if ( (LA68_1==REGULAR_ID||LA68_1==SQL92_RESERVED_ALTER||LA68_1==SQL92_RESERVED_CREATE||LA68_1==SQL92_RESERVED_DROP||LA68_1==SQL92_RESERVED_GRANT||LA68_1==SQL92_RESERVED_REVOKE) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
                    alt68=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA68_0==SQL92_RESERVED_FOR) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;

            }
            switch (alt68) {
                case 1 :
                    // PLSQLParser.g:425:10: simple_dml_trigger
                    {
                    pushFollow(FOLLOW_simple_dml_trigger_in_create_trigger3954);
                    simple_dml_trigger226=simple_dml_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_simple_dml_trigger.add(simple_dml_trigger226.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:426:10: compound_dml_trigger
                    {
                    pushFollow(FOLLOW_compound_dml_trigger_in_create_trigger3965);
                    compound_dml_trigger227=compound_dml_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_compound_dml_trigger.add(compound_dml_trigger227.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:427:10: non_dml_trigger
                    {
                    pushFollow(FOLLOW_non_dml_trigger_in_create_trigger3976);
                    non_dml_trigger228=non_dml_trigger();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_non_dml_trigger.add(non_dml_trigger228.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:429:5: ( trigger_follows_clause )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==REGULAR_ID) ) {
                int LA69_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("follows"))) ) {
                    alt69=1;
                }
            }
            switch (alt69) {
                case 1 :
                    // PLSQLParser.g:429:5: trigger_follows_clause
                    {
                    pushFollow(FOLLOW_trigger_follows_clause_in_create_trigger3988);
                    trigger_follows_clause229=trigger_follows_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_trigger_follows_clause.add(trigger_follows_clause229.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:430:5: ( enable_key | disable_key )?
            int alt70=3;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==REGULAR_ID) ) {
                int LA70_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("enable"))) ) {
                    alt70=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("disable"))) ) {
                    alt70=2;
                }
            }
            switch (alt70) {
                case 1 :
                    // PLSQLParser.g:430:6: enable_key
                    {
                    pushFollow(FOLLOW_enable_key_in_create_trigger3996);
                    enable_key230=enable_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enable_key.add(enable_key230.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:430:17: disable_key
                    {
                    pushFollow(FOLLOW_disable_key_in_create_trigger3998);
                    disable_key231=disable_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_disable_key.add(disable_key231.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:431:5: ( trigger_when_clause )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==SQL92_RESERVED_WHEN) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // PLSQLParser.g:431:5: trigger_when_clause
                    {
                    pushFollow(FOLLOW_trigger_when_clause_in_create_trigger4006);
                    trigger_when_clause232=trigger_when_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_trigger_when_clause.add(trigger_when_clause232.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_trigger_body_in_create_trigger4014);
            trigger_body233=trigger_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_trigger_body.add(trigger_body233.getTree());

            SEMICOLON234=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_trigger4016); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON234);


            // AST REWRITE
            // elements: disable_key, non_dml_trigger, trigger_name, enable_key, trigger_body, replace_key, trigger_follows_clause, simple_dml_trigger, trigger_when_clause, compound_dml_trigger
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:5: -> ^( CREATE_TRIGGER[$create_key.start] ( replace_key )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( enable_key )? ( disable_key )? ( trigger_when_clause )? trigger_body )
            {
                // PLSQLParser.g:433:8: ^( CREATE_TRIGGER[$create_key.start] ( replace_key )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( enable_key )? ( disable_key )? ( trigger_when_clause )? trigger_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_TRIGGER, (create_key221!=null?((Token)create_key221.start):null))
                , root_1);

                // PLSQLParser.g:433:44: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_trigger_name.nextTree());

                // PLSQLParser.g:434:9: ( simple_dml_trigger )?
                if ( stream_simple_dml_trigger.hasNext() ) {
                    adaptor.addChild(root_1, stream_simple_dml_trigger.nextTree());

                }
                stream_simple_dml_trigger.reset();

                // PLSQLParser.g:434:29: ( compound_dml_trigger )?
                if ( stream_compound_dml_trigger.hasNext() ) {
                    adaptor.addChild(root_1, stream_compound_dml_trigger.nextTree());

                }
                stream_compound_dml_trigger.reset();

                // PLSQLParser.g:434:51: ( non_dml_trigger )?
                if ( stream_non_dml_trigger.hasNext() ) {
                    adaptor.addChild(root_1, stream_non_dml_trigger.nextTree());

                }
                stream_non_dml_trigger.reset();

                // PLSQLParser.g:435:9: ( trigger_follows_clause )?
                if ( stream_trigger_follows_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_trigger_follows_clause.nextTree());

                }
                stream_trigger_follows_clause.reset();

                // PLSQLParser.g:435:33: ( enable_key )?
                if ( stream_enable_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_enable_key.nextTree());

                }
                stream_enable_key.reset();

                // PLSQLParser.g:435:45: ( disable_key )?
                if ( stream_disable_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_disable_key.nextTree());

                }
                stream_disable_key.reset();

                // PLSQLParser.g:435:58: ( trigger_when_clause )?
                if ( stream_trigger_when_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_trigger_when_clause.nextTree());

                }
                stream_trigger_when_clause.reset();

                adaptor.addChild(root_1, stream_trigger_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "create_trigger"


    public static class trigger_follows_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "trigger_follows_clause"
    // PLSQLParser.g:438:1: trigger_follows_clause : follows_key trigger_name ( COMMA trigger_name )* -> ^( follows_key ( trigger_name )+ ) ;
    public final trigger_follows_clause_return trigger_follows_clause() throws RecognitionException {
        trigger_follows_clause_return retval = new trigger_follows_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA237=null;
        PLSQLParser_PLSQLKeys.follows_key_return follows_key235 =null;

        PLSQLParser_PLSQLCommons.trigger_name_return trigger_name236 =null;

        PLSQLParser_PLSQLCommons.trigger_name_return trigger_name238 =null;


        Object COMMA237_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_follows_key=new RewriteRuleSubtreeStream(adaptor,"rule follows_key");
        RewriteRuleSubtreeStream stream_trigger_name=new RewriteRuleSubtreeStream(adaptor,"rule trigger_name");
        try {
            // PLSQLParser.g:439:5: ( follows_key trigger_name ( COMMA trigger_name )* -> ^( follows_key ( trigger_name )+ ) )
            // PLSQLParser.g:439:10: follows_key trigger_name ( COMMA trigger_name )*
            {
            pushFollow(FOLLOW_follows_key_in_trigger_follows_clause4093);
            follows_key235=follows_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_follows_key.add(follows_key235.getTree());

            pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause4095);
            trigger_name236=trigger_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_trigger_name.add(trigger_name236.getTree());

            // PLSQLParser.g:439:35: ( COMMA trigger_name )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==COMMA) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // PLSQLParser.g:439:36: COMMA trigger_name
            	    {
            	    COMMA237=(Token)match(input,COMMA,FOLLOW_COMMA_in_trigger_follows_clause4098); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA237);


            	    pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause4100);
            	    trigger_name238=trigger_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_trigger_name.add(trigger_name238.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            // AST REWRITE
            // elements: follows_key, trigger_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:9: -> ^( follows_key ( trigger_name )+ )
            {
                // PLSQLParser.g:440:12: ^( follows_key ( trigger_name )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_follows_key.nextNode(), root_1);

                if ( !(stream_trigger_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_trigger_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_trigger_name.nextTree());

                }
                stream_trigger_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "trigger_follows_clause"


    public static class trigger_when_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "trigger_when_clause"
    // PLSQLParser.g:443:1: trigger_when_clause : when_key LEFT_PAREN condition RIGHT_PAREN -> ^( when_key ^( LOGIC_EXPR condition ) ) ;
    public final trigger_when_clause_return trigger_when_clause() throws RecognitionException {
        trigger_when_clause_return retval = new trigger_when_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN240=null;
        Token RIGHT_PAREN242=null;
        PLSQLParser_PLSQLKeys.when_key_return when_key239 =null;

        PLSQLParser_PLSQL_DMLParser.condition_return condition241 =null;


        Object LEFT_PAREN240_tree=null;
        Object RIGHT_PAREN242_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
        try {
            // PLSQLParser.g:444:5: ( when_key LEFT_PAREN condition RIGHT_PAREN -> ^( when_key ^( LOGIC_EXPR condition ) ) )
            // PLSQLParser.g:444:10: when_key LEFT_PAREN condition RIGHT_PAREN
            {
            pushFollow(FOLLOW_when_key_in_trigger_when_clause4139);
            when_key239=when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_when_key.add(when_key239.getTree());

            LEFT_PAREN240=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_trigger_when_clause4141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN240);


            pushFollow(FOLLOW_condition_in_trigger_when_clause4143);
            condition241=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition241.getTree());

            RIGHT_PAREN242=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_trigger_when_clause4145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN242);


            // AST REWRITE
            // elements: condition, when_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:9: -> ^( when_key ^( LOGIC_EXPR condition ) )
            {
                // PLSQLParser.g:445:12: ^( when_key ^( LOGIC_EXPR condition ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_when_key.nextNode(), root_1);

                // PLSQLParser.g:445:23: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "trigger_when_clause"


    public static class simple_dml_trigger_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_dml_trigger"
    // PLSQLParser.g:449:1: simple_dml_trigger : ( before_key | after_key | instead_key of_key ) dml_event_clause ( referencing_clause )? ( for_each_row )? -> ^( SIMPLE_DML ( before_key )? ( after_key )? ( instead_key )? ( for_each_row )? ( referencing_clause )? dml_event_clause ) ;
    public final simple_dml_trigger_return simple_dml_trigger() throws RecognitionException {
        simple_dml_trigger_return retval = new simple_dml_trigger_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.before_key_return before_key243 =null;

        PLSQLParser_PLSQLKeys.after_key_return after_key244 =null;

        PLSQLParser_PLSQLKeys.instead_key_return instead_key245 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key246 =null;

        dml_event_clause_return dml_event_clause247 =null;

        referencing_clause_return referencing_clause248 =null;

        for_each_row_return for_each_row249 =null;


        RewriteRuleSubtreeStream stream_for_each_row=new RewriteRuleSubtreeStream(adaptor,"rule for_each_row");
        RewriteRuleSubtreeStream stream_after_key=new RewriteRuleSubtreeStream(adaptor,"rule after_key");
        RewriteRuleSubtreeStream stream_dml_event_clause=new RewriteRuleSubtreeStream(adaptor,"rule dml_event_clause");
        RewriteRuleSubtreeStream stream_referencing_clause=new RewriteRuleSubtreeStream(adaptor,"rule referencing_clause");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        RewriteRuleSubtreeStream stream_before_key=new RewriteRuleSubtreeStream(adaptor,"rule before_key");
        RewriteRuleSubtreeStream stream_instead_key=new RewriteRuleSubtreeStream(adaptor,"rule instead_key");
        try {
            // PLSQLParser.g:450:5: ( ( before_key | after_key | instead_key of_key ) dml_event_clause ( referencing_clause )? ( for_each_row )? -> ^( SIMPLE_DML ( before_key )? ( after_key )? ( instead_key )? ( for_each_row )? ( referencing_clause )? dml_event_clause ) )
            // PLSQLParser.g:450:10: ( before_key | after_key | instead_key of_key ) dml_event_clause ( referencing_clause )? ( for_each_row )?
            {
            // PLSQLParser.g:450:10: ( before_key | after_key | instead_key of_key )
            int alt73=3;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))||(input.LT(1).getText().equalsIgnoreCase("instead"))))) {
                int LA73_1 = input.LA(2);

                if ( (LA73_1==SQL92_RESERVED_OF) && ((input.LT(1).getText().equalsIgnoreCase("instead")))) {
                    alt73=3;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("before"))) ) {
                    alt73=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("after"))) ) {
                    alt73=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 73, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }
            switch (alt73) {
                case 1 :
                    // PLSQLParser.g:450:11: before_key
                    {
                    pushFollow(FOLLOW_before_key_in_simple_dml_trigger4187);
                    before_key243=before_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_before_key.add(before_key243.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:450:22: after_key
                    {
                    pushFollow(FOLLOW_after_key_in_simple_dml_trigger4189);
                    after_key244=after_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_after_key.add(after_key244.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:450:32: instead_key of_key
                    {
                    pushFollow(FOLLOW_instead_key_in_simple_dml_trigger4191);
                    instead_key245=instead_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instead_key.add(instead_key245.getTree());

                    pushFollow(FOLLOW_of_key_in_simple_dml_trigger4193);
                    of_key246=of_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_of_key.add(of_key246.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_dml_event_clause_in_simple_dml_trigger4196);
            dml_event_clause247=dml_event_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dml_event_clause.add(dml_event_clause247.getTree());

            // PLSQLParser.g:450:69: ( referencing_clause )?
            int alt74=2;
            alt74 = dfa74.predict(input);
            switch (alt74) {
                case 1 :
                    // PLSQLParser.g:450:69: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_simple_dml_trigger4198);
                    referencing_clause248=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_referencing_clause.add(referencing_clause248.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:450:89: ( for_each_row )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==SQL92_RESERVED_FOR) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // PLSQLParser.g:450:89: for_each_row
                    {
                    pushFollow(FOLLOW_for_each_row_in_simple_dml_trigger4201);
                    for_each_row249=for_each_row();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_for_each_row.add(for_each_row249.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: instead_key, referencing_clause, for_each_row, dml_event_clause, after_key, before_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:9: -> ^( SIMPLE_DML ( before_key )? ( after_key )? ( instead_key )? ( for_each_row )? ( referencing_clause )? dml_event_clause )
            {
                // PLSQLParser.g:451:12: ^( SIMPLE_DML ( before_key )? ( after_key )? ( instead_key )? ( for_each_row )? ( referencing_clause )? dml_event_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_DML, "SIMPLE_DML")
                , root_1);

                // PLSQLParser.g:451:25: ( before_key )?
                if ( stream_before_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_before_key.nextTree());

                }
                stream_before_key.reset();

                // PLSQLParser.g:451:37: ( after_key )?
                if ( stream_after_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_after_key.nextTree());

                }
                stream_after_key.reset();

                // PLSQLParser.g:451:48: ( instead_key )?
                if ( stream_instead_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_instead_key.nextTree());

                }
                stream_instead_key.reset();

                // PLSQLParser.g:451:61: ( for_each_row )?
                if ( stream_for_each_row.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_each_row.nextTree());

                }
                stream_for_each_row.reset();

                // PLSQLParser.g:451:75: ( referencing_clause )?
                if ( stream_referencing_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_referencing_clause.nextTree());

                }
                stream_referencing_clause.reset();

                adaptor.addChild(root_1, stream_dml_event_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_dml_trigger"


    public static class for_each_row_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_each_row"
    // PLSQLParser.g:454:1: for_each_row : for_key each_key row_key -> FOR_EACH_ROW[$for_key.start] ;
    public final for_each_row_return for_each_row() throws RecognitionException {
        for_each_row_return retval = new for_each_row_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.for_key_return for_key250 =null;

        PLSQLParser_PLSQLKeys.each_key_return each_key251 =null;

        PLSQLParser_PLSQLKeys.row_key_return row_key252 =null;


        RewriteRuleSubtreeStream stream_each_key=new RewriteRuleSubtreeStream(adaptor,"rule each_key");
        RewriteRuleSubtreeStream stream_row_key=new RewriteRuleSubtreeStream(adaptor,"rule row_key");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            // PLSQLParser.g:455:5: ( for_key each_key row_key -> FOR_EACH_ROW[$for_key.start] )
            // PLSQLParser.g:455:10: for_key each_key row_key
            {
            pushFollow(FOLLOW_for_key_in_for_each_row4253);
            for_key250=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key250.getTree());

            pushFollow(FOLLOW_each_key_in_for_each_row4255);
            each_key251=each_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_each_key.add(each_key251.getTree());

            pushFollow(FOLLOW_row_key_in_for_each_row4257);
            row_key252=row_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_row_key.add(row_key252.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:35: -> FOR_EACH_ROW[$for_key.start]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FOR_EACH_ROW, (for_key250!=null?((Token)for_key250.start):null))
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_each_row"


    public static class compound_dml_trigger_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compound_dml_trigger"
    // PLSQLParser.g:458:1: compound_dml_trigger : for_key dml_event_clause ( referencing_clause )? -> ^( COMPOUND_DML[$for_key.start] ( referencing_clause )? dml_event_clause ) ;
    public final compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
        compound_dml_trigger_return retval = new compound_dml_trigger_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.for_key_return for_key253 =null;

        dml_event_clause_return dml_event_clause254 =null;

        referencing_clause_return referencing_clause255 =null;


        RewriteRuleSubtreeStream stream_dml_event_clause=new RewriteRuleSubtreeStream(adaptor,"rule dml_event_clause");
        RewriteRuleSubtreeStream stream_referencing_clause=new RewriteRuleSubtreeStream(adaptor,"rule referencing_clause");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            // PLSQLParser.g:459:5: ( for_key dml_event_clause ( referencing_clause )? -> ^( COMPOUND_DML[$for_key.start] ( referencing_clause )? dml_event_clause ) )
            // PLSQLParser.g:459:10: for_key dml_event_clause ( referencing_clause )?
            {
            pushFollow(FOLLOW_for_key_in_compound_dml_trigger4282);
            for_key253=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key253.getTree());

            pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger4284);
            dml_event_clause254=dml_event_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dml_event_clause.add(dml_event_clause254.getTree());

            // PLSQLParser.g:459:35: ( referencing_clause )?
            int alt76=2;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // PLSQLParser.g:459:35: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger4286);
                    referencing_clause255=referencing_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_referencing_clause.add(referencing_clause255.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: dml_event_clause, referencing_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:9: -> ^( COMPOUND_DML[$for_key.start] ( referencing_clause )? dml_event_clause )
            {
                // PLSQLParser.g:460:12: ^( COMPOUND_DML[$for_key.start] ( referencing_clause )? dml_event_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(COMPOUND_DML, (for_key253!=null?((Token)for_key253.start):null))
                , root_1);

                // PLSQLParser.g:460:43: ( referencing_clause )?
                if ( stream_referencing_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_referencing_clause.nextTree());

                }
                stream_referencing_clause.reset();

                adaptor.addChild(root_1, stream_dml_event_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compound_dml_trigger"


    public static class non_dml_trigger_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "non_dml_trigger"
    // PLSQLParser.g:463:1: non_dml_trigger : ( before_key | after_key ) non_dml_event ( or_key non_dml_event )* on_key ( database_key | ( schema_name PERIOD )? schema_key ) -> ^( NON_DML ( before_key )? ( after_key )? ( non_dml_event )+ ( database_key )? ( schema_name )? ( schema_key )? ) ;
    public final non_dml_trigger_return non_dml_trigger() throws RecognitionException {
        non_dml_trigger_return retval = new non_dml_trigger_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD264=null;
        PLSQLParser_PLSQLKeys.before_key_return before_key256 =null;

        PLSQLParser_PLSQLKeys.after_key_return after_key257 =null;

        non_dml_event_return non_dml_event258 =null;

        PLSQLParser_PLSQLKeys.or_key_return or_key259 =null;

        non_dml_event_return non_dml_event260 =null;

        PLSQLParser_PLSQLKeys.on_key_return on_key261 =null;

        PLSQLParser_PLSQLKeys.database_key_return database_key262 =null;

        PLSQLParser_PLSQLCommons.schema_name_return schema_name263 =null;

        PLSQLParser_PLSQLKeys.schema_key_return schema_key265 =null;


        Object PERIOD264_tree=null;
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_schema_key=new RewriteRuleSubtreeStream(adaptor,"rule schema_key");
        RewriteRuleSubtreeStream stream_after_key=new RewriteRuleSubtreeStream(adaptor,"rule after_key");
        RewriteRuleSubtreeStream stream_schema_name=new RewriteRuleSubtreeStream(adaptor,"rule schema_name");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_database_key=new RewriteRuleSubtreeStream(adaptor,"rule database_key");
        RewriteRuleSubtreeStream stream_non_dml_event=new RewriteRuleSubtreeStream(adaptor,"rule non_dml_event");
        RewriteRuleSubtreeStream stream_on_key=new RewriteRuleSubtreeStream(adaptor,"rule on_key");
        RewriteRuleSubtreeStream stream_before_key=new RewriteRuleSubtreeStream(adaptor,"rule before_key");
        try {
            // PLSQLParser.g:464:5: ( ( before_key | after_key ) non_dml_event ( or_key non_dml_event )* on_key ( database_key | ( schema_name PERIOD )? schema_key ) -> ^( NON_DML ( before_key )? ( after_key )? ( non_dml_event )+ ( database_key )? ( schema_name )? ( schema_key )? ) )
            // PLSQLParser.g:464:10: ( before_key | after_key ) non_dml_event ( or_key non_dml_event )* on_key ( database_key | ( schema_name PERIOD )? schema_key )
            {
            // PLSQLParser.g:464:10: ( before_key | after_key )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
                int LA77_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("before"))) ) {
                    alt77=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("after"))) ) {
                    alt77=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;

            }
            switch (alt77) {
                case 1 :
                    // PLSQLParser.g:464:11: before_key
                    {
                    pushFollow(FOLLOW_before_key_in_non_dml_trigger4328);
                    before_key256=before_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_before_key.add(before_key256.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:464:22: after_key
                    {
                    pushFollow(FOLLOW_after_key_in_non_dml_trigger4330);
                    after_key257=after_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_after_key.add(after_key257.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger4333);
            non_dml_event258=non_dml_event();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_non_dml_event.add(non_dml_event258.getTree());

            // PLSQLParser.g:464:47: ( or_key non_dml_event )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( (LA78_0==SQL92_RESERVED_OR) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // PLSQLParser.g:464:48: or_key non_dml_event
            	    {
            	    pushFollow(FOLLOW_or_key_in_non_dml_trigger4336);
            	    or_key259=or_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_or_key.add(or_key259.getTree());

            	    pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger4338);
            	    non_dml_event260=non_dml_event();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_non_dml_event.add(non_dml_event260.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            pushFollow(FOLLOW_on_key_in_non_dml_trigger4350);
            on_key261=on_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_on_key.add(on_key261.getTree());

            // PLSQLParser.g:465:16: ( database_key | ( schema_name PERIOD )? schema_key )
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==REGULAR_ID) ) {
                int LA80_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("database"))) ) {
                    alt80=1;
                }
                else if ( (true) ) {
                    alt80=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA80_0==DELIMITED_ID||LA80_0==INTRODUCER) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;

            }
            switch (alt80) {
                case 1 :
                    // PLSQLParser.g:465:17: database_key
                    {
                    pushFollow(FOLLOW_database_key_in_non_dml_trigger4353);
                    database_key262=database_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_database_key.add(database_key262.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:465:32: ( schema_name PERIOD )? schema_key
                    {
                    // PLSQLParser.g:465:32: ( schema_name PERIOD )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==DELIMITED_ID||LA79_0==INTRODUCER) ) {
                        alt79=1;
                    }
                    else if ( (LA79_0==REGULAR_ID) ) {
                        int LA79_2 = input.LA(2);

                        if ( (LA79_2==PERIOD) ) {
                            alt79=1;
                        }
                    }
                    switch (alt79) {
                        case 1 :
                            // PLSQLParser.g:465:33: schema_name PERIOD
                            {
                            pushFollow(FOLLOW_schema_name_in_non_dml_trigger4358);
                            schema_name263=schema_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_schema_name.add(schema_name263.getTree());

                            PERIOD264=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_non_dml_trigger4360); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD264);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_schema_key_in_non_dml_trigger4364);
                    schema_key265=schema_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_schema_key.add(schema_key265.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: schema_name, before_key, non_dml_event, database_key, schema_key, after_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 466:9: -> ^( NON_DML ( before_key )? ( after_key )? ( non_dml_event )+ ( database_key )? ( schema_name )? ( schema_key )? )
            {
                // PLSQLParser.g:466:12: ^( NON_DML ( before_key )? ( after_key )? ( non_dml_event )+ ( database_key )? ( schema_name )? ( schema_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NON_DML, "NON_DML")
                , root_1);

                // PLSQLParser.g:466:22: ( before_key )?
                if ( stream_before_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_before_key.nextTree());

                }
                stream_before_key.reset();

                // PLSQLParser.g:466:34: ( after_key )?
                if ( stream_after_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_after_key.nextTree());

                }
                stream_after_key.reset();

                if ( !(stream_non_dml_event.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_non_dml_event.hasNext() ) {
                    adaptor.addChild(root_1, stream_non_dml_event.nextTree());

                }
                stream_non_dml_event.reset();

                // PLSQLParser.g:466:60: ( database_key )?
                if ( stream_database_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_database_key.nextTree());

                }
                stream_database_key.reset();

                // PLSQLParser.g:466:74: ( schema_name )?
                if ( stream_schema_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_schema_name.nextTree());

                }
                stream_schema_name.reset();

                // PLSQLParser.g:466:87: ( schema_key )?
                if ( stream_schema_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_schema_key.nextTree());

                }
                stream_schema_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "non_dml_trigger"


    public static class trigger_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "trigger_body"
    // PLSQLParser.g:469:1: trigger_body : ( ( compound_key trigger_key )=> compound_trigger_block | ( call_key id )=> call_key ^ routine_clause | block -> ^( BODY_MODE block ) );
    public final trigger_body_return trigger_body() throws RecognitionException {
        trigger_body_return retval = new trigger_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        compound_trigger_block_return compound_trigger_block266 =null;

        PLSQLParser_PLSQLKeys.call_key_return call_key267 =null;

        routine_clause_return routine_clause268 =null;

        block_return block269 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // PLSQLParser.g:470:5: ( ( compound_key trigger_key )=> compound_trigger_block | ( call_key id )=> call_key ^ routine_clause | block -> ^( BODY_MODE block ) )
            int alt81=3;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==REGULAR_ID) ) {
                int LA81_1 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("compound"))&&(input.LT(1).getText().equalsIgnoreCase("compound")))&&synpred32_PLSQLParser())) ) {
                    alt81=1;
                }
                else if ( (((synpred33_PLSQLParser()&&synpred33_PLSQLParser())&&(input.LT(1).getText().equalsIgnoreCase("call")))) ) {
                    alt81=2;
                }
                else if ( (true) ) {
                    alt81=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 81, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA81_0==BINDVAR||LA81_0==COLON||LA81_0==DELIMITED_ID||LA81_0==INTRODUCER||LA81_0==SQL92_RESERVED_BEGIN||LA81_0==SQL92_RESERVED_CREATE||LA81_0==SQL92_RESERVED_CURSOR||LA81_0==SQL92_RESERVED_DECLARE||LA81_0==SQL92_RESERVED_PROCEDURE) ) {
                alt81=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;

            }
            switch (alt81) {
                case 1 :
                    // PLSQLParser.g:470:10: ( compound_key trigger_key )=> compound_trigger_block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_compound_trigger_block_in_trigger_body4425);
                    compound_trigger_block266=compound_trigger_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_trigger_block266.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:471:10: ( call_key id )=> call_key ^ routine_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_call_key_in_trigger_body4443);
                    call_key267=call_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(call_key267.getTree(), root_0);

                    pushFollow(FOLLOW_routine_clause_in_trigger_body4446);
                    routine_clause268=routine_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, routine_clause268.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:472:10: block
                    {
                    pushFollow(FOLLOW_block_in_trigger_body4458);
                    block269=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block269.getTree());

                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 472:16: -> ^( BODY_MODE block )
                    {
                        // PLSQLParser.g:472:19: ^( BODY_MODE block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BODY_MODE, "BODY_MODE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "trigger_body"


    public static class routine_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "routine_clause"
    // PLSQLParser.g:475:1: routine_clause : routine_name ( function_argument )? ;
    public final routine_clause_return routine_clause() throws RecognitionException {
        routine_clause_return retval = new routine_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.routine_name_return routine_name270 =null;

        PLSQLParser_PLSQLCommons.function_argument_return function_argument271 =null;



        try {
            // PLSQLParser.g:476:5: ( routine_name ( function_argument )? )
            // PLSQLParser.g:476:10: routine_name ( function_argument )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_routine_name_in_routine_clause4486);
            routine_name270=routine_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, routine_name270.getTree());

            // PLSQLParser.g:476:23: ( function_argument )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==LEFT_PAREN) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // PLSQLParser.g:476:23: function_argument
                    {
                    pushFollow(FOLLOW_function_argument_in_routine_clause4488);
                    function_argument271=function_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_argument271.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "routine_clause"


    public static class compound_trigger_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compound_trigger_block"
    // PLSQLParser.g:479:1: compound_trigger_block : compound_key trigger_key ( declare_spec )* ( timing_point_section )+ end_key trigger_name -> ^( compound_key trigger_name ( declare_spec )* ( timing_point_section )+ ) ;
    public final compound_trigger_block_return compound_trigger_block() throws RecognitionException {
        compound_trigger_block_return retval = new compound_trigger_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.compound_key_return compound_key272 =null;

        PLSQLParser_PLSQLKeys.trigger_key_return trigger_key273 =null;

        declare_spec_return declare_spec274 =null;

        timing_point_section_return timing_point_section275 =null;

        PLSQLParser_PLSQLKeys.end_key_return end_key276 =null;

        PLSQLParser_PLSQLCommons.trigger_name_return trigger_name277 =null;


        RewriteRuleSubtreeStream stream_trigger_key=new RewriteRuleSubtreeStream(adaptor,"rule trigger_key");
        RewriteRuleSubtreeStream stream_compound_key=new RewriteRuleSubtreeStream(adaptor,"rule compound_key");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_declare_spec=new RewriteRuleSubtreeStream(adaptor,"rule declare_spec");
        RewriteRuleSubtreeStream stream_trigger_name=new RewriteRuleSubtreeStream(adaptor,"rule trigger_name");
        RewriteRuleSubtreeStream stream_timing_point_section=new RewriteRuleSubtreeStream(adaptor,"rule timing_point_section");
        try {
            // PLSQLParser.g:480:5: ( compound_key trigger_key ( declare_spec )* ( timing_point_section )+ end_key trigger_name -> ^( compound_key trigger_name ( declare_spec )* ( timing_point_section )+ ) )
            // PLSQLParser.g:480:10: compound_key trigger_key ( declare_spec )* ( timing_point_section )+ end_key trigger_name
            {
            pushFollow(FOLLOW_compound_key_in_compound_trigger_block4509);
            compound_key272=compound_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compound_key.add(compound_key272.getTree());

            pushFollow(FOLLOW_trigger_key_in_compound_trigger_block4511);
            trigger_key273=trigger_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_trigger_key.add(trigger_key273.getTree());

            // PLSQLParser.g:480:35: ( declare_spec )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==REGULAR_ID) ) {
                    int LA83_1 = input.LA(2);

                    if ( (!((((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before")))))) ) {
                        alt83=1;
                    }


                }
                else if ( (LA83_0==BINDVAR||LA83_0==COLON||LA83_0==DELIMITED_ID||LA83_0==INTRODUCER||LA83_0==SQL92_RESERVED_CREATE||LA83_0==SQL92_RESERVED_CURSOR||LA83_0==SQL92_RESERVED_PROCEDURE) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // PLSQLParser.g:480:35: declare_spec
            	    {
            	    pushFollow(FOLLOW_declare_spec_in_compound_trigger_block4513);
            	    declare_spec274=declare_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_declare_spec.add(declare_spec274.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            // PLSQLParser.g:480:49: ( timing_point_section )+
            int cnt84=0;
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("before"))||(input.LT(1).getText().equalsIgnoreCase("after"))))) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // PLSQLParser.g:480:49: timing_point_section
            	    {
            	    pushFollow(FOLLOW_timing_point_section_in_compound_trigger_block4516);
            	    timing_point_section275=timing_point_section();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_timing_point_section.add(timing_point_section275.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt84 >= 1 ) break loop84;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(84, input);
                        throw eee;
                }
                cnt84++;
            } while (true);


            pushFollow(FOLLOW_end_key_in_compound_trigger_block4519);
            end_key276=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key276.getTree());

            pushFollow(FOLLOW_trigger_name_in_compound_trigger_block4521);
            trigger_name277=trigger_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_trigger_name.add(trigger_name277.getTree());

            // AST REWRITE
            // elements: compound_key, trigger_name, timing_point_section, declare_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 481:9: -> ^( compound_key trigger_name ( declare_spec )* ( timing_point_section )+ )
            {
                // PLSQLParser.g:481:12: ^( compound_key trigger_name ( declare_spec )* ( timing_point_section )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_compound_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_trigger_name.nextTree());

                // PLSQLParser.g:481:40: ( declare_spec )*
                while ( stream_declare_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_declare_spec.nextTree());

                }
                stream_declare_spec.reset();

                if ( !(stream_timing_point_section.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_timing_point_section.hasNext() ) {
                    adaptor.addChild(root_1, stream_timing_point_section.nextTree());

                }
                stream_timing_point_section.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compound_trigger_block"


    public static class timing_point_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "timing_point_section"
    // PLSQLParser.g:484:1: timing_point_section options {k=3; } : (bk= before_key statement_key is_key block before_key statement_key SEMICOLON -> ^( BEFORE_STATEMENT[$bk.start] block ) |bk= before_key each_key row_key is_key block before_key each_key row_key SEMICOLON -> ^( BEFORE_EACH_ROW[$bk.start] block ) |ak= after_key statement_key is_key block after_key statement_key SEMICOLON -> ^( AFTER_STATEMENT[$ak.start] block ) |ak= after_key each_key row_key is_key block after_key each_key row_key SEMICOLON -> ^( AFTER_EACH_ROW[$ak.start] block ) );
    public final timing_point_section_return timing_point_section() throws RecognitionException {
        timing_point_section_return retval = new timing_point_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON283=null;
        Token SEMICOLON291=null;
        Token SEMICOLON297=null;
        Token SEMICOLON305=null;
        PLSQLParser_PLSQLKeys.before_key_return bk =null;

        PLSQLParser_PLSQLKeys.after_key_return ak =null;

        PLSQLParser_PLSQLKeys.statement_key_return statement_key278 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key279 =null;

        block_return block280 =null;

        PLSQLParser_PLSQLKeys.before_key_return before_key281 =null;

        PLSQLParser_PLSQLKeys.statement_key_return statement_key282 =null;

        PLSQLParser_PLSQLKeys.each_key_return each_key284 =null;

        PLSQLParser_PLSQLKeys.row_key_return row_key285 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key286 =null;

        block_return block287 =null;

        PLSQLParser_PLSQLKeys.before_key_return before_key288 =null;

        PLSQLParser_PLSQLKeys.each_key_return each_key289 =null;

        PLSQLParser_PLSQLKeys.row_key_return row_key290 =null;

        PLSQLParser_PLSQLKeys.statement_key_return statement_key292 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key293 =null;

        block_return block294 =null;

        PLSQLParser_PLSQLKeys.after_key_return after_key295 =null;

        PLSQLParser_PLSQLKeys.statement_key_return statement_key296 =null;

        PLSQLParser_PLSQLKeys.each_key_return each_key298 =null;

        PLSQLParser_PLSQLKeys.row_key_return row_key299 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key300 =null;

        block_return block301 =null;

        PLSQLParser_PLSQLKeys.after_key_return after_key302 =null;

        PLSQLParser_PLSQLKeys.each_key_return each_key303 =null;

        PLSQLParser_PLSQLKeys.row_key_return row_key304 =null;


        Object SEMICOLON283_tree=null;
        Object SEMICOLON291_tree=null;
        Object SEMICOLON297_tree=null;
        Object SEMICOLON305_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_each_key=new RewriteRuleSubtreeStream(adaptor,"rule each_key");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_after_key=new RewriteRuleSubtreeStream(adaptor,"rule after_key");
        RewriteRuleSubtreeStream stream_row_key=new RewriteRuleSubtreeStream(adaptor,"rule row_key");
        RewriteRuleSubtreeStream stream_statement_key=new RewriteRuleSubtreeStream(adaptor,"rule statement_key");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_before_key=new RewriteRuleSubtreeStream(adaptor,"rule before_key");
        try {
            // PLSQLParser.g:487:6: (bk= before_key statement_key is_key block before_key statement_key SEMICOLON -> ^( BEFORE_STATEMENT[$bk.start] block ) |bk= before_key each_key row_key is_key block before_key each_key row_key SEMICOLON -> ^( BEFORE_EACH_ROW[$bk.start] block ) |ak= after_key statement_key is_key block after_key statement_key SEMICOLON -> ^( AFTER_STATEMENT[$ak.start] block ) |ak= after_key each_key row_key is_key block after_key each_key row_key SEMICOLON -> ^( AFTER_EACH_ROW[$ak.start] block ) )
            int alt85=4;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("before"))||(input.LT(1).getText().equalsIgnoreCase("after"))))) {
                int LA85_1 = input.LA(2);

                if ( (LA85_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("before"))||(input.LT(1).getText().equalsIgnoreCase("after"))))) {
                    int LA85_3 = input.LA(3);

                    if ( (LA85_3==SQL92_RESERVED_IS) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
                        int LA85_5 = input.LA(4);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("before"))) ) {
                            alt85=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("after"))) ) {
                            alt85=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 85, 5, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA85_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
                        int LA85_6 = input.LA(4);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("before"))) ) {
                            alt85=2;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("after"))) ) {
                            alt85=4;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 85, 6, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 3, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 85, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // PLSQLParser.g:487:11: bk= before_key statement_key is_key block before_key statement_key SEMICOLON
                    {
                    pushFollow(FOLLOW_before_key_in_timing_point_section4573);
                    bk=before_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_before_key.add(bk.getTree());

                    pushFollow(FOLLOW_statement_key_in_timing_point_section4575);
                    statement_key278=statement_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement_key.add(statement_key278.getTree());

                    pushFollow(FOLLOW_is_key_in_timing_point_section4577);
                    is_key279=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key279.getTree());

                    pushFollow(FOLLOW_block_in_timing_point_section4579);
                    block280=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block280.getTree());

                    pushFollow(FOLLOW_before_key_in_timing_point_section4581);
                    before_key281=before_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_before_key.add(before_key281.getTree());

                    pushFollow(FOLLOW_statement_key_in_timing_point_section4583);
                    statement_key282=statement_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement_key.add(statement_key282.getTree());

                    SEMICOLON283=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_timing_point_section4585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON283);


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 488:9: -> ^( BEFORE_STATEMENT[$bk.start] block )
                    {
                        // PLSQLParser.g:488:12: ^( BEFORE_STATEMENT[$bk.start] block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BEFORE_STATEMENT, (bk!=null?((Token)bk.start):null))
                        , root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:489:10: bk= before_key each_key row_key is_key block before_key each_key row_key SEMICOLON
                    {
                    pushFollow(FOLLOW_before_key_in_timing_point_section4615);
                    bk=before_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_before_key.add(bk.getTree());

                    pushFollow(FOLLOW_each_key_in_timing_point_section4617);
                    each_key284=each_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_each_key.add(each_key284.getTree());

                    pushFollow(FOLLOW_row_key_in_timing_point_section4619);
                    row_key285=row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_row_key.add(row_key285.getTree());

                    pushFollow(FOLLOW_is_key_in_timing_point_section4621);
                    is_key286=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key286.getTree());

                    pushFollow(FOLLOW_block_in_timing_point_section4623);
                    block287=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block287.getTree());

                    pushFollow(FOLLOW_before_key_in_timing_point_section4625);
                    before_key288=before_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_before_key.add(before_key288.getTree());

                    pushFollow(FOLLOW_each_key_in_timing_point_section4627);
                    each_key289=each_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_each_key.add(each_key289.getTree());

                    pushFollow(FOLLOW_row_key_in_timing_point_section4629);
                    row_key290=row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_row_key.add(row_key290.getTree());

                    SEMICOLON291=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_timing_point_section4631); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON291);


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 490:9: -> ^( BEFORE_EACH_ROW[$bk.start] block )
                    {
                        // PLSQLParser.g:490:12: ^( BEFORE_EACH_ROW[$bk.start] block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BEFORE_EACH_ROW, (bk!=null?((Token)bk.start):null))
                        , root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:491:10: ak= after_key statement_key is_key block after_key statement_key SEMICOLON
                    {
                    pushFollow(FOLLOW_after_key_in_timing_point_section4661);
                    ak=after_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_after_key.add(ak.getTree());

                    pushFollow(FOLLOW_statement_key_in_timing_point_section4663);
                    statement_key292=statement_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement_key.add(statement_key292.getTree());

                    pushFollow(FOLLOW_is_key_in_timing_point_section4665);
                    is_key293=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key293.getTree());

                    pushFollow(FOLLOW_block_in_timing_point_section4667);
                    block294=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block294.getTree());

                    pushFollow(FOLLOW_after_key_in_timing_point_section4669);
                    after_key295=after_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_after_key.add(after_key295.getTree());

                    pushFollow(FOLLOW_statement_key_in_timing_point_section4671);
                    statement_key296=statement_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement_key.add(statement_key296.getTree());

                    SEMICOLON297=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_timing_point_section4673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON297);


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 492:9: -> ^( AFTER_STATEMENT[$ak.start] block )
                    {
                        // PLSQLParser.g:492:12: ^( AFTER_STATEMENT[$ak.start] block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(AFTER_STATEMENT, (ak!=null?((Token)ak.start):null))
                        , root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:493:10: ak= after_key each_key row_key is_key block after_key each_key row_key SEMICOLON
                    {
                    pushFollow(FOLLOW_after_key_in_timing_point_section4703);
                    ak=after_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_after_key.add(ak.getTree());

                    pushFollow(FOLLOW_each_key_in_timing_point_section4705);
                    each_key298=each_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_each_key.add(each_key298.getTree());

                    pushFollow(FOLLOW_row_key_in_timing_point_section4707);
                    row_key299=row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_row_key.add(row_key299.getTree());

                    pushFollow(FOLLOW_is_key_in_timing_point_section4709);
                    is_key300=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key300.getTree());

                    pushFollow(FOLLOW_block_in_timing_point_section4711);
                    block301=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block301.getTree());

                    pushFollow(FOLLOW_after_key_in_timing_point_section4713);
                    after_key302=after_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_after_key.add(after_key302.getTree());

                    pushFollow(FOLLOW_each_key_in_timing_point_section4715);
                    each_key303=each_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_each_key.add(each_key303.getTree());

                    pushFollow(FOLLOW_row_key_in_timing_point_section4717);
                    row_key304=row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_row_key.add(row_key304.getTree());

                    SEMICOLON305=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_timing_point_section4719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON305);


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 494:9: -> ^( AFTER_EACH_ROW[$ak.start] block )
                    {
                        // PLSQLParser.g:494:12: ^( AFTER_EACH_ROW[$ak.start] block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(AFTER_EACH_ROW, (ak!=null?((Token)ak.start):null))
                        , root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "timing_point_section"


    public static class non_dml_event_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "non_dml_event"
    // PLSQLParser.g:497:1: non_dml_event : ( alter_key | analyze_key | associate_key statistics_key | audit_key | comment_key | create_key | disassociate_key statistics_key | drop_key | grant_key | noaudit_key | rename_key | revoke_key | truncate_key | ddl_key | startup_key | shutdown_key | db_role_change_key | logon_key | logoff_key | servererror_key | suspend_key | database_key | schema_key | follows_key );
    public final non_dml_event_return non_dml_event() throws RecognitionException {
        non_dml_event_return retval = new non_dml_event_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.alter_key_return alter_key306 =null;

        PLSQLParser_PLSQLKeys.analyze_key_return analyze_key307 =null;

        PLSQLParser_PLSQLKeys.associate_key_return associate_key308 =null;

        PLSQLParser_PLSQLKeys.statistics_key_return statistics_key309 =null;

        PLSQLParser_PLSQLKeys.audit_key_return audit_key310 =null;

        PLSQLParser_PLSQLKeys.comment_key_return comment_key311 =null;

        PLSQLParser_PLSQLKeys.create_key_return create_key312 =null;

        PLSQLParser_PLSQLKeys.disassociate_key_return disassociate_key313 =null;

        PLSQLParser_PLSQLKeys.statistics_key_return statistics_key314 =null;

        PLSQLParser_PLSQLKeys.drop_key_return drop_key315 =null;

        PLSQLParser_PLSQLKeys.grant_key_return grant_key316 =null;

        PLSQLParser_PLSQLKeys.noaudit_key_return noaudit_key317 =null;

        PLSQLParser_PLSQLKeys.rename_key_return rename_key318 =null;

        PLSQLParser_PLSQLKeys.revoke_key_return revoke_key319 =null;

        PLSQLParser_PLSQLKeys.truncate_key_return truncate_key320 =null;

        PLSQLParser_PLSQLKeys.ddl_key_return ddl_key321 =null;

        PLSQLParser_PLSQLKeys.startup_key_return startup_key322 =null;

        PLSQLParser_PLSQLKeys.shutdown_key_return shutdown_key323 =null;

        PLSQLParser_PLSQLKeys.db_role_change_key_return db_role_change_key324 =null;

        PLSQLParser_PLSQLKeys.logon_key_return logon_key325 =null;

        PLSQLParser_PLSQLKeys.logoff_key_return logoff_key326 =null;

        PLSQLParser_PLSQLKeys.servererror_key_return servererror_key327 =null;

        PLSQLParser_PLSQLKeys.suspend_key_return suspend_key328 =null;

        PLSQLParser_PLSQLKeys.database_key_return database_key329 =null;

        PLSQLParser_PLSQLKeys.schema_key_return schema_key330 =null;

        PLSQLParser_PLSQLKeys.follows_key_return follows_key331 =null;



        try {
            // PLSQLParser.g:498:5: ( alter_key | analyze_key | associate_key statistics_key | audit_key | comment_key | create_key | disassociate_key statistics_key | drop_key | grant_key | noaudit_key | rename_key | revoke_key | truncate_key | ddl_key | startup_key | shutdown_key | db_role_change_key | logon_key | logoff_key | servererror_key | suspend_key | database_key | schema_key | follows_key )
            int alt86=24;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==SQL92_RESERVED_ALTER) ) {
                alt86=1;
            }
            else if ( (LA86_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("database"))||(input.LT(1).getText().equalsIgnoreCase("logoff"))||(input.LT(1).getText().equalsIgnoreCase("analyze"))||(input.LT(1).getText().equalsIgnoreCase("db_role_change"))||(input.LT(1).getText().equalsIgnoreCase("audit"))||(input.LT(1).getText().equalsIgnoreCase("disassociate"))||(input.LT(1).getText().equalsIgnoreCase("logon"))||(input.LT(1).getText().equalsIgnoreCase("truncate"))||(input.LT(1).getText().equalsIgnoreCase("associate"))||(input.LT(1).getText().equalsIgnoreCase("shutdown"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("schema"))||(input.LT(1).getText().equalsIgnoreCase("startup"))||(input.LT(1).getText().equalsIgnoreCase("comment"))||(input.LT(1).getText().equalsIgnoreCase("noaudit"))||(input.LT(1).getText().equalsIgnoreCase("ddl"))||(input.LT(1).getText().equalsIgnoreCase("servererror"))||(input.LT(1).getText().equalsIgnoreCase("rename"))||(input.LT(1).getText().equalsIgnoreCase("suspend"))))) {
                int LA86_2 = input.LA(2);

                if ( (LA86_2==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disassociate"))||(input.LT(1).getText().equalsIgnoreCase("associate"))))) {
                    int LA86_7 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("associate"))) ) {
                        alt86=3;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("disassociate"))) ) {
                        alt86=7;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 86, 7, input);

                        throw nvae;

                    }
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("analyze"))) ) {
                    alt86=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("audit"))) ) {
                    alt86=4;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("comment"))) ) {
                    alt86=5;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("noaudit"))) ) {
                    alt86=10;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("rename"))) ) {
                    alt86=11;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("truncate"))) ) {
                    alt86=13;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("ddl"))) ) {
                    alt86=14;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("startup"))) ) {
                    alt86=15;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("shutdown"))) ) {
                    alt86=16;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("db_role_change"))) ) {
                    alt86=17;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("logon"))) ) {
                    alt86=18;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("logoff"))) ) {
                    alt86=19;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("servererror"))) ) {
                    alt86=20;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("suspend"))) ) {
                    alt86=21;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("database"))) ) {
                    alt86=22;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("schema"))) ) {
                    alt86=23;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("follows"))) ) {
                    alt86=24;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA86_0==SQL92_RESERVED_CREATE) ) {
                alt86=6;
            }
            else if ( (LA86_0==SQL92_RESERVED_DROP) ) {
                alt86=8;
            }
            else if ( (LA86_0==SQL92_RESERVED_GRANT) ) {
                alt86=9;
            }
            else if ( (LA86_0==SQL92_RESERVED_REVOKE) ) {
                alt86=12;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;

            }
            switch (alt86) {
                case 1 :
                    // PLSQLParser.g:498:10: alter_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alter_key_in_non_dml_event4756);
                    alter_key306=alter_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_key306.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:499:10: analyze_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_analyze_key_in_non_dml_event4767);
                    analyze_key307=analyze_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, analyze_key307.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:500:10: associate_key statistics_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_associate_key_in_non_dml_event4778);
                    associate_key308=associate_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, associate_key308.getTree());

                    pushFollow(FOLLOW_statistics_key_in_non_dml_event4780);
                    statistics_key309=statistics_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statistics_key309.getTree());

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:501:10: audit_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_audit_key_in_non_dml_event4791);
                    audit_key310=audit_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, audit_key310.getTree());

                    }
                    break;
                case 5 :
                    // PLSQLParser.g:502:10: comment_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comment_key_in_non_dml_event4802);
                    comment_key311=comment_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comment_key311.getTree());

                    }
                    break;
                case 6 :
                    // PLSQLParser.g:503:10: create_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_key_in_non_dml_event4813);
                    create_key312=create_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_key312.getTree());

                    }
                    break;
                case 7 :
                    // PLSQLParser.g:504:10: disassociate_key statistics_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_disassociate_key_in_non_dml_event4824);
                    disassociate_key313=disassociate_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, disassociate_key313.getTree());

                    pushFollow(FOLLOW_statistics_key_in_non_dml_event4826);
                    statistics_key314=statistics_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statistics_key314.getTree());

                    }
                    break;
                case 8 :
                    // PLSQLParser.g:505:10: drop_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_drop_key_in_non_dml_event4837);
                    drop_key315=drop_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_key315.getTree());

                    }
                    break;
                case 9 :
                    // PLSQLParser.g:506:10: grant_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_grant_key_in_non_dml_event4848);
                    grant_key316=grant_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grant_key316.getTree());

                    }
                    break;
                case 10 :
                    // PLSQLParser.g:507:10: noaudit_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_noaudit_key_in_non_dml_event4859);
                    noaudit_key317=noaudit_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noaudit_key317.getTree());

                    }
                    break;
                case 11 :
                    // PLSQLParser.g:508:10: rename_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rename_key_in_non_dml_event4870);
                    rename_key318=rename_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rename_key318.getTree());

                    }
                    break;
                case 12 :
                    // PLSQLParser.g:509:10: revoke_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_revoke_key_in_non_dml_event4881);
                    revoke_key319=revoke_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, revoke_key319.getTree());

                    }
                    break;
                case 13 :
                    // PLSQLParser.g:510:10: truncate_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_truncate_key_in_non_dml_event4892);
                    truncate_key320=truncate_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, truncate_key320.getTree());

                    }
                    break;
                case 14 :
                    // PLSQLParser.g:511:10: ddl_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_ddl_key_in_non_dml_event4903);
                    ddl_key321=ddl_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ddl_key321.getTree());

                    }
                    break;
                case 15 :
                    // PLSQLParser.g:512:10: startup_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_startup_key_in_non_dml_event4914);
                    startup_key322=startup_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, startup_key322.getTree());

                    }
                    break;
                case 16 :
                    // PLSQLParser.g:513:10: shutdown_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_shutdown_key_in_non_dml_event4925);
                    shutdown_key323=shutdown_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, shutdown_key323.getTree());

                    }
                    break;
                case 17 :
                    // PLSQLParser.g:514:10: db_role_change_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_db_role_change_key_in_non_dml_event4936);
                    db_role_change_key324=db_role_change_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, db_role_change_key324.getTree());

                    }
                    break;
                case 18 :
                    // PLSQLParser.g:515:10: logon_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_logon_key_in_non_dml_event4947);
                    logon_key325=logon_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logon_key325.getTree());

                    }
                    break;
                case 19 :
                    // PLSQLParser.g:516:10: logoff_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_logoff_key_in_non_dml_event4958);
                    logoff_key326=logoff_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logoff_key326.getTree());

                    }
                    break;
                case 20 :
                    // PLSQLParser.g:517:10: servererror_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_servererror_key_in_non_dml_event4969);
                    servererror_key327=servererror_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, servererror_key327.getTree());

                    }
                    break;
                case 21 :
                    // PLSQLParser.g:518:10: suspend_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_suspend_key_in_non_dml_event4980);
                    suspend_key328=suspend_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, suspend_key328.getTree());

                    }
                    break;
                case 22 :
                    // PLSQLParser.g:519:10: database_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_database_key_in_non_dml_event4991);
                    database_key329=database_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, database_key329.getTree());

                    }
                    break;
                case 23 :
                    // PLSQLParser.g:520:10: schema_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_schema_key_in_non_dml_event5002);
                    schema_key330=schema_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_key330.getTree());

                    }
                    break;
                case 24 :
                    // PLSQLParser.g:521:10: follows_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_follows_key_in_non_dml_event5013);
                    follows_key331=follows_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, follows_key331.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "non_dml_event"


    public static class dml_event_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dml_event_clause"
    // PLSQLParser.g:524:1: dml_event_clause : dml_event_element ( or_key dml_event_element )* on_key ( dml_event_nested_clause )? tableview_name -> ^( DML_EVENT ( dml_event_element )+ ^( on_key tableview_name ( dml_event_nested_clause )? ) ) ;
    public final dml_event_clause_return dml_event_clause() throws RecognitionException {
        dml_event_clause_return retval = new dml_event_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        dml_event_element_return dml_event_element332 =null;

        PLSQLParser_PLSQLKeys.or_key_return or_key333 =null;

        dml_event_element_return dml_event_element334 =null;

        PLSQLParser_PLSQLKeys.on_key_return on_key335 =null;

        dml_event_nested_clause_return dml_event_nested_clause336 =null;

        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name337 =null;


        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_dml_event_element=new RewriteRuleSubtreeStream(adaptor,"rule dml_event_element");
        RewriteRuleSubtreeStream stream_on_key=new RewriteRuleSubtreeStream(adaptor,"rule on_key");
        RewriteRuleSubtreeStream stream_dml_event_nested_clause=new RewriteRuleSubtreeStream(adaptor,"rule dml_event_nested_clause");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            // PLSQLParser.g:525:5: ( dml_event_element ( or_key dml_event_element )* on_key ( dml_event_nested_clause )? tableview_name -> ^( DML_EVENT ( dml_event_element )+ ^( on_key tableview_name ( dml_event_nested_clause )? ) ) )
            // PLSQLParser.g:525:10: dml_event_element ( or_key dml_event_element )* on_key ( dml_event_nested_clause )? tableview_name
            {
            pushFollow(FOLLOW_dml_event_element_in_dml_event_clause5033);
            dml_event_element332=dml_event_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dml_event_element.add(dml_event_element332.getTree());

            // PLSQLParser.g:525:28: ( or_key dml_event_element )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==SQL92_RESERVED_OR) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // PLSQLParser.g:525:29: or_key dml_event_element
            	    {
            	    pushFollow(FOLLOW_or_key_in_dml_event_clause5036);
            	    or_key333=or_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_or_key.add(or_key333.getTree());

            	    pushFollow(FOLLOW_dml_event_element_in_dml_event_clause5038);
            	    dml_event_element334=dml_event_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_dml_event_element.add(dml_event_element334.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            pushFollow(FOLLOW_on_key_in_dml_event_clause5050);
            on_key335=on_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_on_key.add(on_key335.getTree());

            // PLSQLParser.g:527:9: ( dml_event_nested_clause )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==REGULAR_ID) ) {
                int LA88_1 = input.LA(2);

                if ( (LA88_1==SQL92_RESERVED_TABLE) && ((input.LT(1).getText().equalsIgnoreCase("nested")))) {
                    alt88=1;
                }
            }
            switch (alt88) {
                case 1 :
                    // PLSQLParser.g:527:9: dml_event_nested_clause
                    {
                    pushFollow(FOLLOW_dml_event_nested_clause_in_dml_event_clause5061);
                    dml_event_nested_clause336=dml_event_nested_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_event_nested_clause.add(dml_event_nested_clause336.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_tableview_name_in_dml_event_clause5064);
            tableview_name337=tableview_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name337.getTree());

            // AST REWRITE
            // elements: dml_event_nested_clause, dml_event_element, on_key, tableview_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:9: -> ^( DML_EVENT ( dml_event_element )+ ^( on_key tableview_name ( dml_event_nested_clause )? ) )
            {
                // PLSQLParser.g:528:12: ^( DML_EVENT ( dml_event_element )+ ^( on_key tableview_name ( dml_event_nested_clause )? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DML_EVENT, "DML_EVENT")
                , root_1);

                if ( !(stream_dml_event_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dml_event_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_dml_event_element.nextTree());

                }
                stream_dml_event_element.reset();

                // PLSQLParser.g:528:43: ^( on_key tableview_name ( dml_event_nested_clause )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_on_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_tableview_name.nextTree());

                // PLSQLParser.g:528:67: ( dml_event_nested_clause )?
                if ( stream_dml_event_nested_clause.hasNext() ) {
                    adaptor.addChild(root_2, stream_dml_event_nested_clause.nextTree());

                }
                stream_dml_event_nested_clause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dml_event_clause"


    public static class dml_event_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dml_event_element"
    // PLSQLParser.g:531:1: dml_event_element : ( delete_key | insert_key | update_key ) ( of_key column_name ( COMMA column_name )* )? -> ^( DML_EVENT_ELEMENT ( delete_key )? ( insert_key )? ( update_key )? ^( COLUMNS ( column_name )* ) ) ;
    public final dml_event_element_return dml_event_element() throws RecognitionException {
        dml_event_element_return retval = new dml_event_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA343=null;
        PLSQLParser_PLSQLKeys.delete_key_return delete_key338 =null;

        PLSQLParser_PLSQLKeys.insert_key_return insert_key339 =null;

        PLSQLParser_PLSQLKeys.update_key_return update_key340 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key341 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name342 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name344 =null;


        Object COMMA343_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_insert_key=new RewriteRuleSubtreeStream(adaptor,"rule insert_key");
        RewriteRuleSubtreeStream stream_delete_key=new RewriteRuleSubtreeStream(adaptor,"rule delete_key");
        RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            // PLSQLParser.g:532:5: ( ( delete_key | insert_key | update_key ) ( of_key column_name ( COMMA column_name )* )? -> ^( DML_EVENT_ELEMENT ( delete_key )? ( insert_key )? ( update_key )? ^( COLUMNS ( column_name )* ) ) )
            // PLSQLParser.g:532:10: ( delete_key | insert_key | update_key ) ( of_key column_name ( COMMA column_name )* )?
            {
            // PLSQLParser.g:532:10: ( delete_key | insert_key | update_key )
            int alt89=3;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_DELETE:
                {
                alt89=1;
                }
                break;
            case SQL92_RESERVED_INSERT:
                {
                alt89=2;
                }
                break;
            case SQL92_RESERVED_UPDATE:
                {
                alt89=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;

            }

            switch (alt89) {
                case 1 :
                    // PLSQLParser.g:532:11: delete_key
                    {
                    pushFollow(FOLLOW_delete_key_in_dml_event_element5113);
                    delete_key338=delete_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delete_key.add(delete_key338.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:532:22: insert_key
                    {
                    pushFollow(FOLLOW_insert_key_in_dml_event_element5115);
                    insert_key339=insert_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insert_key.add(insert_key339.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:532:33: update_key
                    {
                    pushFollow(FOLLOW_update_key_in_dml_event_element5117);
                    update_key340=update_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_update_key.add(update_key340.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:532:45: ( of_key column_name ( COMMA column_name )* )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==SQL92_RESERVED_OF) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // PLSQLParser.g:532:46: of_key column_name ( COMMA column_name )*
                    {
                    pushFollow(FOLLOW_of_key_in_dml_event_element5121);
                    of_key341=of_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_of_key.add(of_key341.getTree());

                    pushFollow(FOLLOW_column_name_in_dml_event_element5123);
                    column_name342=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name342.getTree());

                    // PLSQLParser.g:532:65: ( COMMA column_name )*
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==COMMA) ) {
                            alt90=1;
                        }


                        switch (alt90) {
                    	case 1 :
                    	    // PLSQLParser.g:532:66: COMMA column_name
                    	    {
                    	    COMMA343=(Token)match(input,COMMA,FOLLOW_COMMA_in_dml_event_element5126); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA343);


                    	    pushFollow(FOLLOW_column_name_in_dml_event_element5128);
                    	    column_name344=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name344.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop90;
                        }
                    } while (true);


                    }
                    break;

            }


            // AST REWRITE
            // elements: column_name, insert_key, delete_key, update_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:9: -> ^( DML_EVENT_ELEMENT ( delete_key )? ( insert_key )? ( update_key )? ^( COLUMNS ( column_name )* ) )
            {
                // PLSQLParser.g:533:12: ^( DML_EVENT_ELEMENT ( delete_key )? ( insert_key )? ( update_key )? ^( COLUMNS ( column_name )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DML_EVENT_ELEMENT, "DML_EVENT_ELEMENT")
                , root_1);

                // PLSQLParser.g:533:32: ( delete_key )?
                if ( stream_delete_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_delete_key.nextTree());

                }
                stream_delete_key.reset();

                // PLSQLParser.g:533:44: ( insert_key )?
                if ( stream_insert_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_insert_key.nextTree());

                }
                stream_insert_key.reset();

                // PLSQLParser.g:533:56: ( update_key )?
                if ( stream_update_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_update_key.nextTree());

                }
                stream_update_key.reset();

                // PLSQLParser.g:533:68: ^( COLUMNS ( column_name )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(COLUMNS, "COLUMNS")
                , root_2);

                // PLSQLParser.g:533:78: ( column_name )*
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_2, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dml_event_element"


    public static class dml_event_nested_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dml_event_nested_clause"
    // PLSQLParser.g:536:1: dml_event_nested_clause : nested_key table_key tableview_name of_key -> ^( nested_key tableview_name ) ;
    public final dml_event_nested_clause_return dml_event_nested_clause() throws RecognitionException {
        dml_event_nested_clause_return retval = new dml_event_nested_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.nested_key_return nested_key345 =null;

        PLSQLParser_PLSQLKeys.table_key_return table_key346 =null;

        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name347 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key348 =null;


        RewriteRuleSubtreeStream stream_nested_key=new RewriteRuleSubtreeStream(adaptor,"rule nested_key");
        RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            // PLSQLParser.g:537:5: ( nested_key table_key tableview_name of_key -> ^( nested_key tableview_name ) )
            // PLSQLParser.g:537:10: nested_key table_key tableview_name of_key
            {
            pushFollow(FOLLOW_nested_key_in_dml_event_nested_clause5182);
            nested_key345=nested_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nested_key.add(nested_key345.getTree());

            pushFollow(FOLLOW_table_key_in_dml_event_nested_clause5184);
            table_key346=table_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_key.add(table_key346.getTree());

            pushFollow(FOLLOW_tableview_name_in_dml_event_nested_clause5186);
            tableview_name347=tableview_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name347.getTree());

            pushFollow(FOLLOW_of_key_in_dml_event_nested_clause5188);
            of_key348=of_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_of_key.add(of_key348.getTree());

            // AST REWRITE
            // elements: nested_key, tableview_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 538:9: -> ^( nested_key tableview_name )
            {
                // PLSQLParser.g:538:12: ^( nested_key tableview_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_nested_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_tableview_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dml_event_nested_clause"


    public static class referencing_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "referencing_clause"
    // PLSQLParser.g:541:1: referencing_clause : referencing_key ^ ( referencing_element )+ ;
    public final referencing_clause_return referencing_clause() throws RecognitionException {
        referencing_clause_return retval = new referencing_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.referencing_key_return referencing_key349 =null;

        referencing_element_return referencing_element350 =null;



        try {
            // PLSQLParser.g:542:5: ( referencing_key ^ ( referencing_element )+ )
            // PLSQLParser.g:542:10: referencing_key ^ ( referencing_element )+
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_referencing_key_in_referencing_clause5224);
            referencing_key349=referencing_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(referencing_key349.getTree(), root_0);

            // PLSQLParser.g:542:27: ( referencing_element )+
            int cnt92=0;
            loop92:
            do {
                int alt92=2;
                alt92 = dfa92.predict(input);
                switch (alt92) {
            	case 1 :
            	    // PLSQLParser.g:542:27: referencing_element
            	    {
            	    pushFollow(FOLLOW_referencing_element_in_referencing_clause5227);
            	    referencing_element350=referencing_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_element350.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "referencing_clause"


    public static class referencing_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "referencing_element"
    // PLSQLParser.g:545:1: referencing_element : ( new_key ^| old_key ^| parent_key ^) column_alias ;
    public final referencing_element_return referencing_element() throws RecognitionException {
        referencing_element_return retval = new referencing_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.new_key_return new_key351 =null;

        PLSQLParser_PLSQLKeys.old_key_return old_key352 =null;

        PLSQLParser_PLSQLKeys.parent_key_return parent_key353 =null;

        PLSQLParser_PLSQLCommons.column_alias_return column_alias354 =null;



        try {
            // PLSQLParser.g:546:5: ( ( new_key ^| old_key ^| parent_key ^) column_alias )
            // PLSQLParser.g:546:10: ( new_key ^| old_key ^| parent_key ^) column_alias
            {
            root_0 = (Object)adaptor.nil();


            // PLSQLParser.g:546:10: ( new_key ^| old_key ^| parent_key ^)
            int alt93=3;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                int LA93_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("new"))) ) {
                    alt93=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("old"))) ) {
                    alt93=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("parent"))) ) {
                    alt93=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // PLSQLParser.g:546:12: new_key ^
                    {
                    pushFollow(FOLLOW_new_key_in_referencing_element5250);
                    new_key351=new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(new_key351.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:546:23: old_key ^
                    {
                    pushFollow(FOLLOW_old_key_in_referencing_element5255);
                    old_key352=old_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(old_key352.getTree(), root_0);

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:546:34: parent_key ^
                    {
                    pushFollow(FOLLOW_parent_key_in_referencing_element5260);
                    parent_key353=parent_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(parent_key353.getTree(), root_0);

                    }
                    break;

            }


            pushFollow(FOLLOW_column_alias_in_referencing_element5265);
            column_alias354=column_alias();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias354.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "referencing_element"


    public static class drop_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "drop_type"
    // PLSQLParser.g:554:1: drop_type : drop_key type_key ( body_key )? type_name ( force_key | validate_key )? SEMICOLON -> ^( DROP_TYPE[$drop_key.start] type_name ( body_key )? ( force_key )? ( validate_key )? ) ;
    public final drop_type_return drop_type() throws RecognitionException {
        drop_type_return retval = new drop_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON361=null;
        PLSQLParser_PLSQLKeys.drop_key_return drop_key355 =null;

        PLSQLParser_PLSQLKeys.type_key_return type_key356 =null;

        PLSQLParser_PLSQLKeys.body_key_return body_key357 =null;

        PLSQLParser_PLSQLCommons.type_name_return type_name358 =null;

        PLSQLParser_PLSQLKeys.force_key_return force_key359 =null;

        PLSQLParser_PLSQLKeys.validate_key_return validate_key360 =null;


        Object SEMICOLON361_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
        RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
        RewriteRuleSubtreeStream stream_force_key=new RewriteRuleSubtreeStream(adaptor,"rule force_key");
        RewriteRuleSubtreeStream stream_validate_key=new RewriteRuleSubtreeStream(adaptor,"rule validate_key");
        RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
        RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");
        try {
            // PLSQLParser.g:555:5: ( drop_key type_key ( body_key )? type_name ( force_key | validate_key )? SEMICOLON -> ^( DROP_TYPE[$drop_key.start] type_name ( body_key )? ( force_key )? ( validate_key )? ) )
            // PLSQLParser.g:555:10: drop_key type_key ( body_key )? type_name ( force_key | validate_key )? SEMICOLON
            {
            pushFollow(FOLLOW_drop_key_in_drop_type5290);
            drop_key355=drop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_drop_key.add(drop_key355.getTree());

            pushFollow(FOLLOW_type_key_in_drop_type5292);
            type_key356=type_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_key.add(type_key356.getTree());

            // PLSQLParser.g:555:28: ( body_key )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==REGULAR_ID) ) {
                int LA94_1 = input.LA(2);

                if ( (LA94_1==REGULAR_ID) ) {
                    int LA94_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("body"))) ) {
                        alt94=1;
                    }
                }
                else if ( (LA94_1==DELIMITED_ID) ) {
                    alt94=1;
                }
            }
            switch (alt94) {
                case 1 :
                    // PLSQLParser.g:555:28: body_key
                    {
                    pushFollow(FOLLOW_body_key_in_drop_type5294);
                    body_key357=body_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_body_key.add(body_key357.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_type_name_in_drop_type5297);
            type_name358=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_name.add(type_name358.getTree());

            // PLSQLParser.g:555:48: ( force_key | validate_key )?
            int alt95=3;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==REGULAR_ID) ) {
                int LA95_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("force"))) ) {
                    alt95=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("validate"))) ) {
                    alt95=2;
                }
            }
            switch (alt95) {
                case 1 :
                    // PLSQLParser.g:555:49: force_key
                    {
                    pushFollow(FOLLOW_force_key_in_drop_type5300);
                    force_key359=force_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_force_key.add(force_key359.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:555:59: validate_key
                    {
                    pushFollow(FOLLOW_validate_key_in_drop_type5302);
                    validate_key360=validate_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_validate_key.add(validate_key360.getTree());

                    }
                    break;

            }


            SEMICOLON361=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_type5314); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON361);


            // AST REWRITE
            // elements: type_name, validate_key, force_key, body_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 557:9: -> ^( DROP_TYPE[$drop_key.start] type_name ( body_key )? ( force_key )? ( validate_key )? )
            {
                // PLSQLParser.g:557:12: ^( DROP_TYPE[$drop_key.start] type_name ( body_key )? ( force_key )? ( validate_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DROP_TYPE, (drop_key355!=null?((Token)drop_key355.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                // PLSQLParser.g:557:51: ( body_key )?
                if ( stream_body_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_body_key.nextTree());

                }
                stream_body_key.reset();

                // PLSQLParser.g:557:61: ( force_key )?
                if ( stream_force_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_force_key.nextTree());

                }
                stream_force_key.reset();

                // PLSQLParser.g:557:72: ( validate_key )?
                if ( stream_validate_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_validate_key.nextTree());

                }
                stream_validate_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "drop_type"


    public static class alter_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_type"
    // PLSQLParser.g:560:1: alter_type : alter_key type_key type_name ( compile_type_clause | replace_type_clause |{...}? alter_attribute_definition | alter_method_spec | alter_collection_clauses | modifier_clause ) ( dependent_handling_clause )? SEMICOLON -> {mode == 1}? ^( ALTER_TYPE[$alter_key.start] type_name replace_type_clause ( dependent_handling_clause )? ) -> {mode == 2}? ^( ALTER_TYPE[$alter_key.start] type_name alter_attribute_definition ( dependent_handling_clause )? ) -> {mode == 3}? ^( ALTER_TYPE[$alter_key.start] type_name alter_method_spec ( dependent_handling_clause )? ) -> {mode == 4}? ^( ALTER_TYPE[$alter_key.start] type_name alter_collection_clauses ( dependent_handling_clause )? ) -> {mode == 5}? ^( ALTER_TYPE[$alter_key.start] type_name modifier_clause ( dependent_handling_clause )? ) -> ^( ALTER_TYPE[$alter_key.start] type_name compile_type_clause ( dependent_handling_clause )? ) ;
    public final alter_type_return alter_type() throws RecognitionException {
        alter_type_return retval = new alter_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON372=null;
        PLSQLParser_PLSQLKeys.alter_key_return alter_key362 =null;

        PLSQLParser_PLSQLKeys.type_key_return type_key363 =null;

        PLSQLParser_PLSQLCommons.type_name_return type_name364 =null;

        compile_type_clause_return compile_type_clause365 =null;

        replace_type_clause_return replace_type_clause366 =null;

        alter_attribute_definition_return alter_attribute_definition367 =null;

        alter_method_spec_return alter_method_spec368 =null;

        alter_collection_clauses_return alter_collection_clauses369 =null;

        modifier_clause_return modifier_clause370 =null;

        dependent_handling_clause_return dependent_handling_clause371 =null;


        Object SEMICOLON372_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_alter_attribute_definition=new RewriteRuleSubtreeStream(adaptor,"rule alter_attribute_definition");
        RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
        RewriteRuleSubtreeStream stream_alter_collection_clauses=new RewriteRuleSubtreeStream(adaptor,"rule alter_collection_clauses");
        RewriteRuleSubtreeStream stream_dependent_handling_clause=new RewriteRuleSubtreeStream(adaptor,"rule dependent_handling_clause");
        RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
        RewriteRuleSubtreeStream stream_modifier_clause=new RewriteRuleSubtreeStream(adaptor,"rule modifier_clause");
        RewriteRuleSubtreeStream stream_replace_type_clause=new RewriteRuleSubtreeStream(adaptor,"rule replace_type_clause");
        RewriteRuleSubtreeStream stream_alter_method_spec=new RewriteRuleSubtreeStream(adaptor,"rule alter_method_spec");
        RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");
        RewriteRuleSubtreeStream stream_compile_type_clause=new RewriteRuleSubtreeStream(adaptor,"rule compile_type_clause");
            int mode = 0;    
        try {
            // PLSQLParser.g:562:5: ( alter_key type_key type_name ( compile_type_clause | replace_type_clause |{...}? alter_attribute_definition | alter_method_spec | alter_collection_clauses | modifier_clause ) ( dependent_handling_clause )? SEMICOLON -> {mode == 1}? ^( ALTER_TYPE[$alter_key.start] type_name replace_type_clause ( dependent_handling_clause )? ) -> {mode == 2}? ^( ALTER_TYPE[$alter_key.start] type_name alter_attribute_definition ( dependent_handling_clause )? ) -> {mode == 3}? ^( ALTER_TYPE[$alter_key.start] type_name alter_method_spec ( dependent_handling_clause )? ) -> {mode == 4}? ^( ALTER_TYPE[$alter_key.start] type_name alter_collection_clauses ( dependent_handling_clause )? ) -> {mode == 5}? ^( ALTER_TYPE[$alter_key.start] type_name modifier_clause ( dependent_handling_clause )? ) -> ^( ALTER_TYPE[$alter_key.start] type_name compile_type_clause ( dependent_handling_clause )? ) )
            // PLSQLParser.g:562:10: alter_key type_key type_name ( compile_type_clause | replace_type_clause |{...}? alter_attribute_definition | alter_method_spec | alter_collection_clauses | modifier_clause ) ( dependent_handling_clause )? SEMICOLON
            {
            pushFollow(FOLLOW_alter_key_in_alter_type5368);
            alter_key362=alter_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alter_key.add(alter_key362.getTree());

            pushFollow(FOLLOW_type_key_in_alter_type5370);
            type_key363=type_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_key.add(type_key363.getTree());

            pushFollow(FOLLOW_type_name_in_alter_type5372);
            type_name364=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_name.add(type_name364.getTree());

            // PLSQLParser.g:563:5: ( compile_type_clause | replace_type_clause |{...}? alter_attribute_definition | alter_method_spec | alter_collection_clauses | modifier_clause )
            int alt96=6;
            switch ( input.LA(1) ) {
            case REGULAR_ID:
                {
                int LA96_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("compile"))) ) {
                    alt96=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("replace"))) ) {
                    alt96=2;
                }
                else if ( (((((input.LT(1).getText().equalsIgnoreCase("modify"))||(input.LT(1).getText().equalsIgnoreCase("add")))&&((input.LT(1).getText().equalsIgnoreCase("modify"))||(input.LT(1).getText().equalsIgnoreCase("add"))))&&(input.LT(2).getText().equalsIgnoreCase("attribute")))) ) {
                    alt96=3;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("add"))) ) {
                    alt96=4;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("modify"))) ) {
                    alt96=5;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("final")))) ) {
                    alt96=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 1, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_DROP:
                {
                int LA96_2 = input.LA(2);

                if ( ((input.LT(2).getText().equalsIgnoreCase("attribute"))) ) {
                    alt96=3;
                }
                else if ( (true) ) {
                    alt96=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 2, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_NOT:
                {
                alt96=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }

            switch (alt96) {
                case 1 :
                    // PLSQLParser.g:563:10: compile_type_clause
                    {
                    pushFollow(FOLLOW_compile_type_clause_in_alter_type5383);
                    compile_type_clause365=compile_type_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_compile_type_clause.add(compile_type_clause365.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:564:10: replace_type_clause
                    {
                    pushFollow(FOLLOW_replace_type_clause_in_alter_type5394);
                    replace_type_clause366=replace_type_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_replace_type_clause.add(replace_type_clause366.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:565:10: {...}? alter_attribute_definition
                    {
                    if ( !((input.LT(2).getText().equalsIgnoreCase("attribute"))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "alter_type", "input.LT(2).getText().equalsIgnoreCase(\"attribute\")");
                    }

                    pushFollow(FOLLOW_alter_attribute_definition_in_alter_type5409);
                    alter_attribute_definition367=alter_attribute_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alter_attribute_definition.add(alter_attribute_definition367.getTree());

                    if ( state.backtracking==0 ) {mode = 2;}

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:566:10: alter_method_spec
                    {
                    pushFollow(FOLLOW_alter_method_spec_in_alter_type5422);
                    alter_method_spec368=alter_method_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alter_method_spec.add(alter_method_spec368.getTree());

                    if ( state.backtracking==0 ) {mode = 3;}

                    }
                    break;
                case 5 :
                    // PLSQLParser.g:567:10: alter_collection_clauses
                    {
                    pushFollow(FOLLOW_alter_collection_clauses_in_alter_type5435);
                    alter_collection_clauses369=alter_collection_clauses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_alter_collection_clauses.add(alter_collection_clauses369.getTree());

                    if ( state.backtracking==0 ) {mode = 4;}

                    }
                    break;
                case 6 :
                    // PLSQLParser.g:568:10: modifier_clause
                    {
                    pushFollow(FOLLOW_modifier_clause_in_alter_type5448);
                    modifier_clause370=modifier_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifier_clause.add(modifier_clause370.getTree());

                    if ( state.backtracking==0 ) {mode = 5;}

                    }
                    break;

            }


            // PLSQLParser.g:570:9: ( dependent_handling_clause )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("invalidate"))||(input.LT(1).getText().equalsIgnoreCase("cascade"))))) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // PLSQLParser.g:570:9: dependent_handling_clause
                    {
                    pushFollow(FOLLOW_dependent_handling_clause_in_alter_type5466);
                    dependent_handling_clause371=dependent_handling_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dependent_handling_clause.add(dependent_handling_clause371.getTree());

                    }
                    break;

            }


            SEMICOLON372=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_type5477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON372);


            // AST REWRITE
            // elements: dependent_handling_clause, dependent_handling_clause, replace_type_clause, type_name, dependent_handling_clause, compile_type_clause, alter_method_spec, dependent_handling_clause, alter_collection_clauses, type_name, type_name, type_name, modifier_clause, type_name, dependent_handling_clause, type_name, alter_attribute_definition, dependent_handling_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 572:9: -> {mode == 1}? ^( ALTER_TYPE[$alter_key.start] type_name replace_type_clause ( dependent_handling_clause )? )
            if (mode == 1) {
                // PLSQLParser.g:572:25: ^( ALTER_TYPE[$alter_key.start] type_name replace_type_clause ( dependent_handling_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_TYPE, (alter_key362!=null?((Token)alter_key362.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                adaptor.addChild(root_1, stream_replace_type_clause.nextTree());

                // PLSQLParser.g:572:86: ( dependent_handling_clause )?
                if ( stream_dependent_handling_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());

                }
                stream_dependent_handling_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 573:9: -> {mode == 2}? ^( ALTER_TYPE[$alter_key.start] type_name alter_attribute_definition ( dependent_handling_clause )? )
            if (mode == 2) {
                // PLSQLParser.g:573:25: ^( ALTER_TYPE[$alter_key.start] type_name alter_attribute_definition ( dependent_handling_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_TYPE, (alter_key362!=null?((Token)alter_key362.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                adaptor.addChild(root_1, stream_alter_attribute_definition.nextTree());

                // PLSQLParser.g:573:93: ( dependent_handling_clause )?
                if ( stream_dependent_handling_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());

                }
                stream_dependent_handling_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 574:9: -> {mode == 3}? ^( ALTER_TYPE[$alter_key.start] type_name alter_method_spec ( dependent_handling_clause )? )
            if (mode == 3) {
                // PLSQLParser.g:574:25: ^( ALTER_TYPE[$alter_key.start] type_name alter_method_spec ( dependent_handling_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_TYPE, (alter_key362!=null?((Token)alter_key362.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                adaptor.addChild(root_1, stream_alter_method_spec.nextTree());

                // PLSQLParser.g:574:84: ( dependent_handling_clause )?
                if ( stream_dependent_handling_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());

                }
                stream_dependent_handling_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 575:9: -> {mode == 4}? ^( ALTER_TYPE[$alter_key.start] type_name alter_collection_clauses ( dependent_handling_clause )? )
            if (mode == 4) {
                // PLSQLParser.g:575:25: ^( ALTER_TYPE[$alter_key.start] type_name alter_collection_clauses ( dependent_handling_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_TYPE, (alter_key362!=null?((Token)alter_key362.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                adaptor.addChild(root_1, stream_alter_collection_clauses.nextTree());

                // PLSQLParser.g:575:91: ( dependent_handling_clause )?
                if ( stream_dependent_handling_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());

                }
                stream_dependent_handling_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 576:9: -> {mode == 5}? ^( ALTER_TYPE[$alter_key.start] type_name modifier_clause ( dependent_handling_clause )? )
            if (mode == 5) {
                // PLSQLParser.g:576:25: ^( ALTER_TYPE[$alter_key.start] type_name modifier_clause ( dependent_handling_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_TYPE, (alter_key362!=null?((Token)alter_key362.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                adaptor.addChild(root_1, stream_modifier_clause.nextTree());

                // PLSQLParser.g:576:82: ( dependent_handling_clause )?
                if ( stream_dependent_handling_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());

                }
                stream_dependent_handling_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 577:9: -> ^( ALTER_TYPE[$alter_key.start] type_name compile_type_clause ( dependent_handling_clause )? )
            {
                // PLSQLParser.g:577:12: ^( ALTER_TYPE[$alter_key.start] type_name compile_type_clause ( dependent_handling_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_TYPE, (alter_key362!=null?((Token)alter_key362.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                adaptor.addChild(root_1, stream_compile_type_clause.nextTree());

                // PLSQLParser.g:577:73: ( dependent_handling_clause )?
                if ( stream_dependent_handling_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());

                }
                stream_dependent_handling_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_type"


    public static class compile_type_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compile_type_clause"
    // PLSQLParser.g:581:1: compile_type_clause : compile_key ( debug_key )? ( specification_key | body_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? -> ^( compile_key ( specification_key )? ( body_key )? ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) ;
    public final compile_type_clause_return compile_type_clause() throws RecognitionException {
        compile_type_clause_return retval = new compile_type_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.compile_key_return compile_key373 =null;

        PLSQLParser_PLSQLKeys.debug_key_return debug_key374 =null;

        PLSQLParser_PLSQLKeys.specification_key_return specification_key375 =null;

        PLSQLParser_PLSQLKeys.body_key_return body_key376 =null;

        compiler_parameters_clause_return compiler_parameters_clause377 =null;

        PLSQLParser_PLSQLKeys.reuse_key_return reuse_key378 =null;

        PLSQLParser_PLSQLKeys.settings_key_return settings_key379 =null;


        RewriteRuleSubtreeStream stream_reuse_key=new RewriteRuleSubtreeStream(adaptor,"rule reuse_key");
        RewriteRuleSubtreeStream stream_compiler_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule compiler_parameters_clause");
        RewriteRuleSubtreeStream stream_debug_key=new RewriteRuleSubtreeStream(adaptor,"rule debug_key");
        RewriteRuleSubtreeStream stream_compile_key=new RewriteRuleSubtreeStream(adaptor,"rule compile_key");
        RewriteRuleSubtreeStream stream_specification_key=new RewriteRuleSubtreeStream(adaptor,"rule specification_key");
        RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
        RewriteRuleSubtreeStream stream_settings_key=new RewriteRuleSubtreeStream(adaptor,"rule settings_key");
        try {
            // PLSQLParser.g:582:5: ( compile_key ( debug_key )? ( specification_key | body_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? -> ^( compile_key ( specification_key )? ( body_key )? ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) )
            // PLSQLParser.g:582:10: compile_key ( debug_key )? ( specification_key | body_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )?
            {
            pushFollow(FOLLOW_compile_key_in_compile_type_clause5640);
            compile_key373=compile_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_compile_key.add(compile_key373.getTree());

            // PLSQLParser.g:582:22: ( debug_key )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==REGULAR_ID) ) {
                int LA98_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("debug"))) ) {
                    alt98=1;
                }
            }
            switch (alt98) {
                case 1 :
                    // PLSQLParser.g:582:22: debug_key
                    {
                    pushFollow(FOLLOW_debug_key_in_compile_type_clause5642);
                    debug_key374=debug_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_debug_key.add(debug_key374.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:582:33: ( specification_key | body_key )?
            int alt99=3;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==REGULAR_ID) ) {
                int LA99_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("specification"))) ) {
                    alt99=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("body"))) ) {
                    alt99=2;
                }
            }
            switch (alt99) {
                case 1 :
                    // PLSQLParser.g:582:34: specification_key
                    {
                    pushFollow(FOLLOW_specification_key_in_compile_type_clause5646);
                    specification_key375=specification_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_specification_key.add(specification_key375.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:582:52: body_key
                    {
                    pushFollow(FOLLOW_body_key_in_compile_type_clause5648);
                    body_key376=body_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_body_key.add(body_key376.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:582:63: ( compiler_parameters_clause )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==REGULAR_ID) ) {
                    int LA100_1 = input.LA(2);

                    if ( (LA100_1==EQUALS_OP) ) {
                        alt100=1;
                    }


                }
                else if ( (LA100_0==DELIMITED_ID||LA100_0==INTRODUCER) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // PLSQLParser.g:582:63: compiler_parameters_clause
            	    {
            	    pushFollow(FOLLOW_compiler_parameters_clause_in_compile_type_clause5652);
            	    compiler_parameters_clause377=compiler_parameters_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_compiler_parameters_clause.add(compiler_parameters_clause377.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            // PLSQLParser.g:582:91: ( reuse_key settings_key )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==REGULAR_ID) ) {
                int LA101_1 = input.LA(2);

                if ( (LA101_1==REGULAR_ID) ) {
                    int LA101_3 = input.LA(3);

                    if ( (LA101_3==REGULAR_ID) ) {
                        int LA101_6 = input.LA(4);

                        if ( (LA101_6==REGULAR_ID||LA101_6==SEMICOLON||LA101_6==SQL92_RESERVED_NOT) ) {
                            alt101=1;
                        }
                    }
                    else if ( (LA101_3==SEMICOLON) ) {
                        alt101=1;
                    }
                }
            }
            switch (alt101) {
                case 1 :
                    // PLSQLParser.g:582:92: reuse_key settings_key
                    {
                    pushFollow(FOLLOW_reuse_key_in_compile_type_clause5656);
                    reuse_key378=reuse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_reuse_key.add(reuse_key378.getTree());

                    pushFollow(FOLLOW_settings_key_in_compile_type_clause5658);
                    settings_key379=settings_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_settings_key.add(settings_key379.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: compile_key, debug_key, body_key, reuse_key, specification_key, compiler_parameters_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 583:9: -> ^( compile_key ( specification_key )? ( body_key )? ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
            {
                // PLSQLParser.g:583:12: ^( compile_key ( specification_key )? ( body_key )? ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_compile_key.nextNode(), root_1);

                // PLSQLParser.g:583:26: ( specification_key )?
                if ( stream_specification_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_specification_key.nextTree());

                }
                stream_specification_key.reset();

                // PLSQLParser.g:583:45: ( body_key )?
                if ( stream_body_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_body_key.nextTree());

                }
                stream_body_key.reset();

                // PLSQLParser.g:583:55: ( debug_key )?
                if ( stream_debug_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_debug_key.nextTree());

                }
                stream_debug_key.reset();

                // PLSQLParser.g:583:66: ( reuse_key )?
                if ( stream_reuse_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_reuse_key.nextTree());

                }
                stream_reuse_key.reset();

                // PLSQLParser.g:583:77: ( compiler_parameters_clause )*
                while ( stream_compiler_parameters_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_compiler_parameters_clause.nextTree());

                }
                stream_compiler_parameters_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compile_type_clause"


    public static class replace_type_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "replace_type_clause"
    // PLSQLParser.g:586:1: replace_type_clause : replace_key ( invoker_rights_clause )? as_key object_key LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN -> ^( replace_key ^( OBJECT_MEMBERS ( object_member_spec )+ ) ( invoker_rights_clause )? ) ;
    public final replace_type_clause_return replace_type_clause() throws RecognitionException {
        replace_type_clause_return retval = new replace_type_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN384=null;
        Token COMMA386=null;
        Token RIGHT_PAREN388=null;
        PLSQLParser_PLSQLKeys.replace_key_return replace_key380 =null;

        invoker_rights_clause_return invoker_rights_clause381 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key382 =null;

        PLSQLParser_PLSQLKeys.object_key_return object_key383 =null;

        object_member_spec_return object_member_spec385 =null;

        object_member_spec_return object_member_spec387 =null;


        Object LEFT_PAREN384_tree=null;
        Object COMMA386_tree=null;
        Object RIGHT_PAREN388_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
        RewriteRuleSubtreeStream stream_invoker_rights_clause=new RewriteRuleSubtreeStream(adaptor,"rule invoker_rights_clause");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_object_key=new RewriteRuleSubtreeStream(adaptor,"rule object_key");
        RewriteRuleSubtreeStream stream_object_member_spec=new RewriteRuleSubtreeStream(adaptor,"rule object_member_spec");
        try {
            // PLSQLParser.g:587:5: ( replace_key ( invoker_rights_clause )? as_key object_key LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN -> ^( replace_key ^( OBJECT_MEMBERS ( object_member_spec )+ ) ( invoker_rights_clause )? ) )
            // PLSQLParser.g:587:10: replace_key ( invoker_rights_clause )? as_key object_key LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN
            {
            pushFollow(FOLLOW_replace_key_in_replace_type_clause5709);
            replace_key380=replace_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_replace_key.add(replace_key380.getTree());

            // PLSQLParser.g:587:22: ( invoker_rights_clause )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // PLSQLParser.g:587:22: invoker_rights_clause
                    {
                    pushFollow(FOLLOW_invoker_rights_clause_in_replace_type_clause5711);
                    invoker_rights_clause381=invoker_rights_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_invoker_rights_clause.add(invoker_rights_clause381.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_as_key_in_replace_type_clause5714);
            as_key382=as_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_as_key.add(as_key382.getTree());

            pushFollow(FOLLOW_object_key_in_replace_type_clause5716);
            object_key383=object_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_key.add(object_key383.getTree());

            LEFT_PAREN384=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_replace_type_clause5726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN384);


            pushFollow(FOLLOW_object_member_spec_in_replace_type_clause5728);
            object_member_spec385=object_member_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_member_spec.add(object_member_spec385.getTree());

            // PLSQLParser.g:588:39: ( COMMA object_member_spec )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==COMMA) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // PLSQLParser.g:588:40: COMMA object_member_spec
            	    {
            	    COMMA386=(Token)match(input,COMMA,FOLLOW_COMMA_in_replace_type_clause5731); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA386);


            	    pushFollow(FOLLOW_object_member_spec_in_replace_type_clause5733);
            	    object_member_spec387=object_member_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_object_member_spec.add(object_member_spec387.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            RIGHT_PAREN388=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_replace_type_clause5737); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN388);


            // AST REWRITE
            // elements: object_member_spec, invoker_rights_clause, replace_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 589:9: -> ^( replace_key ^( OBJECT_MEMBERS ( object_member_spec )+ ) ( invoker_rights_clause )? )
            {
                // PLSQLParser.g:589:12: ^( replace_key ^( OBJECT_MEMBERS ( object_member_spec )+ ) ( invoker_rights_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_replace_key.nextNode(), root_1);

                // PLSQLParser.g:589:26: ^( OBJECT_MEMBERS ( object_member_spec )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_MEMBERS, "OBJECT_MEMBERS")
                , root_2);

                if ( !(stream_object_member_spec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_object_member_spec.hasNext() ) {
                    adaptor.addChild(root_2, stream_object_member_spec.nextTree());

                }
                stream_object_member_spec.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:589:64: ( invoker_rights_clause )?
                if ( stream_invoker_rights_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());

                }
                stream_invoker_rights_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "replace_type_clause"


    public static class alter_method_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_method_spec"
    // PLSQLParser.g:592:1: alter_method_spec : alter_method_element ( COMMA alter_method_element )* -> ^( ALTER_METHOD ( alter_method_element )+ ) ;
    public final alter_method_spec_return alter_method_spec() throws RecognitionException {
        alter_method_spec_return retval = new alter_method_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA390=null;
        alter_method_element_return alter_method_element389 =null;

        alter_method_element_return alter_method_element391 =null;


        Object COMMA390_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_alter_method_element=new RewriteRuleSubtreeStream(adaptor,"rule alter_method_element");
        try {
            // PLSQLParser.g:593:5: ( alter_method_element ( COMMA alter_method_element )* -> ^( ALTER_METHOD ( alter_method_element )+ ) )
            // PLSQLParser.g:593:11: alter_method_element ( COMMA alter_method_element )*
            {
            pushFollow(FOLLOW_alter_method_element_in_alter_method_spec5782);
            alter_method_element389=alter_method_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alter_method_element.add(alter_method_element389.getTree());

            // PLSQLParser.g:593:32: ( COMMA alter_method_element )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==COMMA) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // PLSQLParser.g:593:33: COMMA alter_method_element
            	    {
            	    COMMA390=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_method_spec5785); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA390);


            	    pushFollow(FOLLOW_alter_method_element_in_alter_method_spec5787);
            	    alter_method_element391=alter_method_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_alter_method_element.add(alter_method_element391.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);


            // AST REWRITE
            // elements: alter_method_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 594:9: -> ^( ALTER_METHOD ( alter_method_element )+ )
            {
                // PLSQLParser.g:594:12: ^( ALTER_METHOD ( alter_method_element )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_METHOD, "ALTER_METHOD")
                , root_1);

                if ( !(stream_alter_method_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_alter_method_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_alter_method_element.nextTree());

                }
                stream_alter_method_element.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_method_spec"


    public static class alter_method_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_method_element"
    // PLSQLParser.g:597:1: alter_method_element : ( add_key | drop_key ) ( map_order_function_spec | subprogram_spec ) -> ^( ALTER_METHOD_ELEMENT ( add_key )? ( drop_key )? ( map_order_function_spec )? ( subprogram_spec )? ) ;
    public final alter_method_element_return alter_method_element() throws RecognitionException {
        alter_method_element_return retval = new alter_method_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.add_key_return add_key392 =null;

        PLSQLParser_PLSQLKeys.drop_key_return drop_key393 =null;

        map_order_function_spec_return map_order_function_spec394 =null;

        subprogram_spec_return subprogram_spec395 =null;


        RewriteRuleSubtreeStream stream_subprogram_spec=new RewriteRuleSubtreeStream(adaptor,"rule subprogram_spec");
        RewriteRuleSubtreeStream stream_map_order_function_spec=new RewriteRuleSubtreeStream(adaptor,"rule map_order_function_spec");
        RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
        RewriteRuleSubtreeStream stream_add_key=new RewriteRuleSubtreeStream(adaptor,"rule add_key");
        try {
            // PLSQLParser.g:598:5: ( ( add_key | drop_key ) ( map_order_function_spec | subprogram_spec ) -> ^( ALTER_METHOD_ELEMENT ( add_key )? ( drop_key )? ( map_order_function_spec )? ( subprogram_spec )? ) )
            // PLSQLParser.g:598:10: ( add_key | drop_key ) ( map_order_function_spec | subprogram_spec )
            {
            // PLSQLParser.g:598:10: ( add_key | drop_key )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("add")))) {
                alt105=1;
            }
            else if ( (LA105_0==SQL92_RESERVED_DROP) ) {
                alt105=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }
            switch (alt105) {
                case 1 :
                    // PLSQLParser.g:598:11: add_key
                    {
                    pushFollow(FOLLOW_add_key_in_alter_method_element5827);
                    add_key392=add_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_add_key.add(add_key392.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:598:19: drop_key
                    {
                    pushFollow(FOLLOW_drop_key_in_alter_method_element5829);
                    drop_key393=drop_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_drop_key.add(drop_key393.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:598:29: ( map_order_function_spec | subprogram_spec )
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                int LA106_1 = input.LA(2);

                if ( (LA106_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                    int LA106_3 = input.LA(3);

                    if ( (LA106_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                        int LA106_5 = input.LA(4);

                        if ( (LA106_5==DELIMITED_ID||LA106_5==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("map")))) {
                            alt106=1;
                        }
                        else if ( (LA106_5==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                            int LA106_7 = input.LA(5);

                            if ( (LA106_7==LEFT_PAREN||LA106_7==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("map")))) {
                                alt106=1;
                            }
                            else if ( (LA106_7==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                                int LA106_8 = input.LA(6);

                                if ( (LA106_8==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                                    int LA106_9 = input.LA(7);

                                    if ( ((input.LT(1).getText().equalsIgnoreCase("map"))) ) {
                                        alt106=1;
                                    }
                                    else if ( (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member")))) ) {
                                        alt106=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 106, 9, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA106_8==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("map")))) {
                                    alt106=1;
                                }
                                else if ( (LA106_8==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                                    int LA106_10 = input.LA(7);

                                    if ( ((input.LT(1).getText().equalsIgnoreCase("map"))) ) {
                                        alt106=1;
                                    }
                                    else if ( (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member")))) ) {
                                        alt106=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 106, 10, input);

                                        throw nvae;

                                    }
                                }
                                else if ( (LA106_8==COMMA||LA106_8==LEFT_PAREN||(LA106_8 >= PERCENT && LA106_8 <= PERIOD)||LA106_8==SEMICOLON||LA106_8==SQL92_RESERVED_AS||LA106_8==SQL92_RESERVED_IS||LA106_8==SQL92_RESERVED_WITH) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
                                    alt106=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 106, 8, input);

                                    throw nvae;

                                }
                            }
                            else if ( (LA106_7==DELIMITED_ID||LA106_7==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
                                alt106=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 106, 7, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA106_5==LEFT_PAREN||LA106_5==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
                            alt106=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 106, 5, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA106_3==DELIMITED_ID||LA106_3==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
                        alt106=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 3, input);

                        throw nvae;

                    }
                }
                else if ( (LA106_1==SQL92_RESERVED_PROCEDURE) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
                    alt106=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA106_0==SQL92_RESERVED_ORDER) ) {
                alt106=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }
            switch (alt106) {
                case 1 :
                    // PLSQLParser.g:598:30: map_order_function_spec
                    {
                    pushFollow(FOLLOW_map_order_function_spec_in_alter_method_element5833);
                    map_order_function_spec394=map_order_function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_map_order_function_spec.add(map_order_function_spec394.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:598:54: subprogram_spec
                    {
                    pushFollow(FOLLOW_subprogram_spec_in_alter_method_element5835);
                    subprogram_spec395=subprogram_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subprogram_spec.add(subprogram_spec395.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: drop_key, map_order_function_spec, subprogram_spec, add_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 599:9: -> ^( ALTER_METHOD_ELEMENT ( add_key )? ( drop_key )? ( map_order_function_spec )? ( subprogram_spec )? )
            {
                // PLSQLParser.g:599:12: ^( ALTER_METHOD_ELEMENT ( add_key )? ( drop_key )? ( map_order_function_spec )? ( subprogram_spec )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_METHOD_ELEMENT, "ALTER_METHOD_ELEMENT")
                , root_1);

                // PLSQLParser.g:599:35: ( add_key )?
                if ( stream_add_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_add_key.nextTree());

                }
                stream_add_key.reset();

                // PLSQLParser.g:599:44: ( drop_key )?
                if ( stream_drop_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_drop_key.nextTree());

                }
                stream_drop_key.reset();

                // PLSQLParser.g:599:54: ( map_order_function_spec )?
                if ( stream_map_order_function_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_map_order_function_spec.nextTree());

                }
                stream_map_order_function_spec.reset();

                // PLSQLParser.g:599:79: ( subprogram_spec )?
                if ( stream_subprogram_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_subprogram_spec.nextTree());

                }
                stream_subprogram_spec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_method_element"


    public static class alter_attribute_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_attribute_definition"
    // PLSQLParser.g:602:1: alter_attribute_definition : ( add_key | modify_key | drop_key ) attribute_key ( attribute_definition | LEFT_PAREN attribute_definition ( COMMA attribute_definition )* RIGHT_PAREN ) -> ^( ALTER_ATTRIBUTE ( add_key )? ( modify_key )? ( drop_key )? ^( ATTRIBUTES ( attribute_definition )+ ) ) ;
    public final alter_attribute_definition_return alter_attribute_definition() throws RecognitionException {
        alter_attribute_definition_return retval = new alter_attribute_definition_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN401=null;
        Token COMMA403=null;
        Token RIGHT_PAREN405=null;
        PLSQLParser_PLSQLKeys.add_key_return add_key396 =null;

        PLSQLParser_PLSQLKeys.modify_key_return modify_key397 =null;

        PLSQLParser_PLSQLKeys.drop_key_return drop_key398 =null;

        PLSQLParser_PLSQLKeys.attribute_key_return attribute_key399 =null;

        attribute_definition_return attribute_definition400 =null;

        attribute_definition_return attribute_definition402 =null;

        attribute_definition_return attribute_definition404 =null;


        Object LEFT_PAREN401_tree=null;
        Object COMMA403_tree=null;
        Object RIGHT_PAREN405_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_attribute_key=new RewriteRuleSubtreeStream(adaptor,"rule attribute_key");
        RewriteRuleSubtreeStream stream_attribute_definition=new RewriteRuleSubtreeStream(adaptor,"rule attribute_definition");
        RewriteRuleSubtreeStream stream_modify_key=new RewriteRuleSubtreeStream(adaptor,"rule modify_key");
        RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
        RewriteRuleSubtreeStream stream_add_key=new RewriteRuleSubtreeStream(adaptor,"rule add_key");
        try {
            // PLSQLParser.g:603:5: ( ( add_key | modify_key | drop_key ) attribute_key ( attribute_definition | LEFT_PAREN attribute_definition ( COMMA attribute_definition )* RIGHT_PAREN ) -> ^( ALTER_ATTRIBUTE ( add_key )? ( modify_key )? ( drop_key )? ^( ATTRIBUTES ( attribute_definition )+ ) ) )
            // PLSQLParser.g:603:10: ( add_key | modify_key | drop_key ) attribute_key ( attribute_definition | LEFT_PAREN attribute_definition ( COMMA attribute_definition )* RIGHT_PAREN )
            {
            // PLSQLParser.g:603:10: ( add_key | modify_key | drop_key )
            int alt107=3;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("modify"))||(input.LT(1).getText().equalsIgnoreCase("add"))))) {
                int LA107_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("add"))) ) {
                    alt107=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("modify"))) ) {
                    alt107=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA107_0==SQL92_RESERVED_DROP) ) {
                alt107=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
                case 1 :
                    // PLSQLParser.g:603:11: add_key
                    {
                    pushFollow(FOLLOW_add_key_in_alter_attribute_definition5883);
                    add_key396=add_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_add_key.add(add_key396.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:603:19: modify_key
                    {
                    pushFollow(FOLLOW_modify_key_in_alter_attribute_definition5885);
                    modify_key397=modify_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modify_key.add(modify_key397.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:603:30: drop_key
                    {
                    pushFollow(FOLLOW_drop_key_in_alter_attribute_definition5887);
                    drop_key398=drop_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_drop_key.add(drop_key398.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_attribute_key_in_alter_attribute_definition5890);
            attribute_key399=attribute_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_key.add(attribute_key399.getTree());

            // PLSQLParser.g:604:9: ( attribute_definition | LEFT_PAREN attribute_definition ( COMMA attribute_definition )* RIGHT_PAREN )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==DELIMITED_ID||LA109_0==INTRODUCER||LA109_0==REGULAR_ID) ) {
                alt109=1;
            }
            else if ( (LA109_0==LEFT_PAREN) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // PLSQLParser.g:604:14: attribute_definition
                    {
                    pushFollow(FOLLOW_attribute_definition_in_alter_attribute_definition5905);
                    attribute_definition400=attribute_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attribute_definition.add(attribute_definition400.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:605:14: LEFT_PAREN attribute_definition ( COMMA attribute_definition )* RIGHT_PAREN
                    {
                    LEFT_PAREN401=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_alter_attribute_definition5920); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN401);


                    pushFollow(FOLLOW_attribute_definition_in_alter_attribute_definition5922);
                    attribute_definition402=attribute_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_attribute_definition.add(attribute_definition402.getTree());

                    // PLSQLParser.g:605:46: ( COMMA attribute_definition )*
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==COMMA) ) {
                            alt108=1;
                        }


                        switch (alt108) {
                    	case 1 :
                    	    // PLSQLParser.g:605:47: COMMA attribute_definition
                    	    {
                    	    COMMA403=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_attribute_definition5925); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA403);


                    	    pushFollow(FOLLOW_attribute_definition_in_alter_attribute_definition5927);
                    	    attribute_definition404=attribute_definition();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_attribute_definition.add(attribute_definition404.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);


                    RIGHT_PAREN405=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_alter_attribute_definition5931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN405);


                    }
                    break;

            }


            // AST REWRITE
            // elements: drop_key, modify_key, add_key, attribute_definition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 607:9: -> ^( ALTER_ATTRIBUTE ( add_key )? ( modify_key )? ( drop_key )? ^( ATTRIBUTES ( attribute_definition )+ ) )
            {
                // PLSQLParser.g:607:12: ^( ALTER_ATTRIBUTE ( add_key )? ( modify_key )? ( drop_key )? ^( ATTRIBUTES ( attribute_definition )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_ATTRIBUTE, "ALTER_ATTRIBUTE")
                , root_1);

                // PLSQLParser.g:607:30: ( add_key )?
                if ( stream_add_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_add_key.nextTree());

                }
                stream_add_key.reset();

                // PLSQLParser.g:607:39: ( modify_key )?
                if ( stream_modify_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_modify_key.nextTree());

                }
                stream_modify_key.reset();

                // PLSQLParser.g:607:51: ( drop_key )?
                if ( stream_drop_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_drop_key.nextTree());

                }
                stream_drop_key.reset();

                // PLSQLParser.g:607:61: ^( ATTRIBUTES ( attribute_definition )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ATTRIBUTES, "ATTRIBUTES")
                , root_2);

                if ( !(stream_attribute_definition.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_attribute_definition.hasNext() ) {
                    adaptor.addChild(root_2, stream_attribute_definition.nextTree());

                }
                stream_attribute_definition.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_attribute_definition"


    public static class attribute_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute_definition"
    // PLSQLParser.g:610:1: attribute_definition : attribute_name ( type_spec )? -> ^( ATTRIBUTE attribute_name ( type_spec )? ) ;
    public final attribute_definition_return attribute_definition() throws RecognitionException {
        attribute_definition_return retval = new attribute_definition_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.attribute_name_return attribute_name406 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec407 =null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_attribute_name=new RewriteRuleSubtreeStream(adaptor,"rule attribute_name");
        try {
            // PLSQLParser.g:611:5: ( attribute_name ( type_spec )? -> ^( ATTRIBUTE attribute_name ( type_spec )? ) )
            // PLSQLParser.g:611:10: attribute_name ( type_spec )?
            {
            pushFollow(FOLLOW_attribute_name_in_attribute_definition5991);
            attribute_name406=attribute_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_attribute_name.add(attribute_name406.getTree());

            // PLSQLParser.g:611:25: ( type_spec )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==DELIMITED_ID||LA110_0==REGULAR_ID||LA110_0==SQL92_RESERVED_DATE) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // PLSQLParser.g:611:25: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_attribute_definition5993);
                    type_spec407=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec407.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: type_spec, attribute_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 612:9: -> ^( ATTRIBUTE attribute_name ( type_spec )? )
            {
                // PLSQLParser.g:612:12: ^( ATTRIBUTE attribute_name ( type_spec )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ATTRIBUTE, "ATTRIBUTE")
                , root_1);

                adaptor.addChild(root_1, stream_attribute_name.nextTree());

                // PLSQLParser.g:612:39: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_definition"


    public static class alter_collection_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_collection_clauses"
    // PLSQLParser.g:615:1: alter_collection_clauses : modify_key ( limit_key expression | element_key type_key type_spec ) -> {mode == 1}? ^( ALTER_COLLECTION[$modify_key.start] ^( type_key type_spec ) ) -> ^( ALTER_COLLECTION[$modify_key.start] ^( limit_key ^( EXPR expression ) ) ) ;
    public final alter_collection_clauses_return alter_collection_clauses() throws RecognitionException {
        alter_collection_clauses_return retval = new alter_collection_clauses_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.modify_key_return modify_key408 =null;

        PLSQLParser_PLSQLKeys.limit_key_return limit_key409 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression410 =null;

        PLSQLParser_PLSQLKeys.element_key_return element_key411 =null;

        PLSQLParser_PLSQLKeys.type_key_return type_key412 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec413 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_element_key=new RewriteRuleSubtreeStream(adaptor,"rule element_key");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_modify_key=new RewriteRuleSubtreeStream(adaptor,"rule modify_key");
        RewriteRuleSubtreeStream stream_limit_key=new RewriteRuleSubtreeStream(adaptor,"rule limit_key");
        RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:617:5: ( modify_key ( limit_key expression | element_key type_key type_spec ) -> {mode == 1}? ^( ALTER_COLLECTION[$modify_key.start] ^( type_key type_spec ) ) -> ^( ALTER_COLLECTION[$modify_key.start] ^( limit_key ^( EXPR expression ) ) ) )
            // PLSQLParser.g:617:10: modify_key ( limit_key expression | element_key type_key type_spec )
            {
            pushFollow(FOLLOW_modify_key_in_alter_collection_clauses6041);
            modify_key408=modify_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_modify_key.add(modify_key408.getTree());

            // PLSQLParser.g:618:5: ( limit_key expression | element_key type_key type_spec )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("limit"))||(input.LT(1).getText().equalsIgnoreCase("element"))))) {
                int LA111_1 = input.LA(2);

                if ( (LA111_1==APPROXIMATE_NUM_LIT||LA111_1==BINDVAR||(LA111_1 >= CHAR_STRING && LA111_1 <= COLON)||LA111_1==DELIMITED_ID||LA111_1==EXACT_NUM_LIT||LA111_1==INTRODUCER||LA111_1==LEFT_PAREN||(LA111_1 >= MINUS_SIGN && LA111_1 <= NATIONAL_CHAR_STRING_LIT)||LA111_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA111_1==PLUS_SIGN||LA111_1==SQL92_RESERVED_ALL||LA111_1==SQL92_RESERVED_ANY||LA111_1==SQL92_RESERVED_CASE||(LA111_1 >= SQL92_RESERVED_CURSOR && LA111_1 <= SQL92_RESERVED_DATE)||LA111_1==SQL92_RESERVED_DEFAULT||LA111_1==SQL92_RESERVED_DISTINCT||(LA111_1 >= SQL92_RESERVED_EXISTS && LA111_1 <= SQL92_RESERVED_FALSE)||(LA111_1 >= SQL92_RESERVED_NOT && LA111_1 <= SQL92_RESERVED_NULL)||LA111_1==SQL92_RESERVED_PRIOR||LA111_1==SQL92_RESERVED_TRUE||LA111_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("limit")))) {
                    alt111=1;
                }
                else if ( (LA111_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("limit"))||(input.LT(1).getText().equalsIgnoreCase("element"))))) {
                    int LA111_3 = input.LA(3);

                    if ( (LA111_3==APPROXIMATE_NUM_LIT||LA111_3==ASTERISK||LA111_3==BINDVAR||(LA111_3 >= CARRET_OPERATOR_PART && LA111_3 <= COLON)||LA111_3==CONCATENATION_OP||(LA111_3 >= EQUALS_OP && LA111_3 <= EXCLAMATION_OPERATOR_PART)||(LA111_3 >= GREATER_THAN_OP && LA111_3 <= GREATER_THAN_OR_EQUALS_OP)||(LA111_3 >= INTRODUCER && LA111_3 <= NATIONAL_CHAR_STRING_LIT)||LA111_3==NOT_EQUAL_OP||(LA111_3 >= PERIOD && LA111_3 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA111_3==PLUS_SIGN||LA111_3==SEMICOLON||LA111_3==SOLIDUS||LA111_3==SQL92_RESERVED_ALL||(LA111_3 >= SQL92_RESERVED_AND && LA111_3 <= SQL92_RESERVED_ANY)||LA111_3==SQL92_RESERVED_BETWEEN||LA111_3==SQL92_RESERVED_CASE||LA111_3==SQL92_RESERVED_DEFAULT||LA111_3==SQL92_RESERVED_DISTINCT||(LA111_3 >= SQL92_RESERVED_EXISTS && LA111_3 <= SQL92_RESERVED_FALSE)||LA111_3==SQL92_RESERVED_IN||(LA111_3 >= SQL92_RESERVED_IS && LA111_3 <= SQL92_RESERVED_NULL)||LA111_3==SQL92_RESERVED_OR||LA111_3==SQL92_RESERVED_PRIOR||LA111_3==SQL92_RESERVED_TRUE||(LA111_3 >= UNSIGNED_INTEGER && LA111_3 <= VERTICAL_BAR)) && ((input.LT(1).getText().equalsIgnoreCase("limit")))) {
                        alt111=1;
                    }
                    else if ( (LA111_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("limit"))||(input.LT(1).getText().equalsIgnoreCase("element"))))) {
                        int LA111_4 = input.LA(4);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("limit"))) ) {
                            alt111=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("element"))) ) {
                            alt111=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 111, 4, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA111_3==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("element"))||(input.LT(1).getText().equalsIgnoreCase("limit"))))) {
                        int LA111_5 = input.LA(4);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("limit"))) ) {
                            alt111=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("element"))) ) {
                            alt111=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 111, 5, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA111_3==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("limit"))||(input.LT(1).getText().equalsIgnoreCase("element"))))) {
                        int LA111_6 = input.LA(4);

                        if ( ((LA111_6 >= CHAR_STRING && LA111_6 <= CHAR_STRING_PERL)||LA111_6==NATIONAL_CHAR_STRING_LIT) && ((input.LT(1).getText().equalsIgnoreCase("limit")))) {
                            alt111=1;
                        }
                        else if ( (LA111_6==LEFT_PAREN||LA111_6==REGULAR_ID||LA111_6==SEMICOLON||LA111_6==SQL92_RESERVED_WITH) && ((input.LT(1).getText().equalsIgnoreCase("element")))) {
                            alt111=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 111, 6, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 111, 3, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 111, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // PLSQLParser.g:618:10: limit_key expression
                    {
                    pushFollow(FOLLOW_limit_key_in_alter_collection_clauses6052);
                    limit_key409=limit_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_limit_key.add(limit_key409.getTree());

                    pushFollow(FOLLOW_expression_in_alter_collection_clauses6054);
                    expression410=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression410.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:619:10: element_key type_key type_spec
                    {
                    pushFollow(FOLLOW_element_key_in_alter_collection_clauses6065);
                    element_key411=element_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_key.add(element_key411.getTree());

                    pushFollow(FOLLOW_type_key_in_alter_collection_clauses6067);
                    type_key412=type_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_key.add(type_key412.getTree());

                    pushFollow(FOLLOW_type_spec_in_alter_collection_clauses6069);
                    type_spec413=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec413.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: limit_key, type_key, type_spec, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 621:9: -> {mode == 1}? ^( ALTER_COLLECTION[$modify_key.start] ^( type_key type_spec ) )
            if (mode == 1) {
                // PLSQLParser.g:621:25: ^( ALTER_COLLECTION[$modify_key.start] ^( type_key type_spec ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_COLLECTION, (modify_key408!=null?((Token)modify_key408.start):null))
                , root_1);

                // PLSQLParser.g:621:63: ^( type_key type_spec )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_type_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_type_spec.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 622:9: -> ^( ALTER_COLLECTION[$modify_key.start] ^( limit_key ^( EXPR expression ) ) )
            {
                // PLSQLParser.g:622:13: ^( ALTER_COLLECTION[$modify_key.start] ^( limit_key ^( EXPR expression ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_COLLECTION, (modify_key408!=null?((Token)modify_key408.start):null))
                , root_1);

                // PLSQLParser.g:622:51: ^( limit_key ^( EXPR expression ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_limit_key.nextNode(), root_2);

                // PLSQLParser.g:622:63: ^( EXPR expression )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_expression.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_collection_clauses"


    public static class dependent_handling_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dependent_handling_clause"
    // PLSQLParser.g:625:1: dependent_handling_clause : ( invalidate_key -> ^( DEPENDENT_HANDLING invalidate_key ) | cascade_key ( convert_key to_key substitutable_key | ( not_key )? including_key table_key data_key )? ( dependent_exceptions_part )? -> {mode == 1}? ^( DEPENDENT_HANDLING ^( cascade_key convert_key ) ( dependent_exceptions_part )? ) -> {mode == 2}? ^( DEPENDENT_HANDLING ^( cascade_key ( not_key )? including_key ) ( dependent_exceptions_part )? ) -> ^( DEPENDENT_HANDLING ^( cascade_key ) ( dependent_exceptions_part )? ) );
    public final dependent_handling_clause_return dependent_handling_clause() throws RecognitionException {
        dependent_handling_clause_return retval = new dependent_handling_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.invalidate_key_return invalidate_key414 =null;

        PLSQLParser_PLSQLKeys.cascade_key_return cascade_key415 =null;

        PLSQLParser_PLSQLKeys.convert_key_return convert_key416 =null;

        PLSQLParser_PLSQLKeys.to_key_return to_key417 =null;

        PLSQLParser_PLSQLKeys.substitutable_key_return substitutable_key418 =null;

        PLSQLParser_PLSQLKeys.not_key_return not_key419 =null;

        PLSQLParser_PLSQLKeys.including_key_return including_key420 =null;

        PLSQLParser_PLSQLKeys.table_key_return table_key421 =null;

        PLSQLParser_PLSQLKeys.data_key_return data_key422 =null;

        dependent_exceptions_part_return dependent_exceptions_part423 =null;


        RewriteRuleSubtreeStream stream_dependent_exceptions_part=new RewriteRuleSubtreeStream(adaptor,"rule dependent_exceptions_part");
        RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
        RewriteRuleSubtreeStream stream_substitutable_key=new RewriteRuleSubtreeStream(adaptor,"rule substitutable_key");
        RewriteRuleSubtreeStream stream_to_key=new RewriteRuleSubtreeStream(adaptor,"rule to_key");
        RewriteRuleSubtreeStream stream_including_key=new RewriteRuleSubtreeStream(adaptor,"rule including_key");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_invalidate_key=new RewriteRuleSubtreeStream(adaptor,"rule invalidate_key");
        RewriteRuleSubtreeStream stream_cascade_key=new RewriteRuleSubtreeStream(adaptor,"rule cascade_key");
        RewriteRuleSubtreeStream stream_convert_key=new RewriteRuleSubtreeStream(adaptor,"rule convert_key");
        RewriteRuleSubtreeStream stream_data_key=new RewriteRuleSubtreeStream(adaptor,"rule data_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:627:5: ( invalidate_key -> ^( DEPENDENT_HANDLING invalidate_key ) | cascade_key ( convert_key to_key substitutable_key | ( not_key )? including_key table_key data_key )? ( dependent_exceptions_part )? -> {mode == 1}? ^( DEPENDENT_HANDLING ^( cascade_key convert_key ) ( dependent_exceptions_part )? ) -> {mode == 2}? ^( DEPENDENT_HANDLING ^( cascade_key ( not_key )? including_key ) ( dependent_exceptions_part )? ) -> ^( DEPENDENT_HANDLING ^( cascade_key ) ( dependent_exceptions_part )? ) )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("invalidate"))||(input.LT(1).getText().equalsIgnoreCase("cascade"))))) {
                int LA115_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("invalidate"))) ) {
                    alt115=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("cascade"))) ) {
                    alt115=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 115, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }
            switch (alt115) {
                case 1 :
                    // PLSQLParser.g:627:10: invalidate_key
                    {
                    pushFollow(FOLLOW_invalidate_key_in_dependent_handling_clause6155);
                    invalidate_key414=invalidate_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_invalidate_key.add(invalidate_key414.getTree());

                    // AST REWRITE
                    // elements: invalidate_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 627:25: -> ^( DEPENDENT_HANDLING invalidate_key )
                    {
                        // PLSQLParser.g:627:28: ^( DEPENDENT_HANDLING invalidate_key )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEPENDENT_HANDLING, "DEPENDENT_HANDLING")
                        , root_1);

                        adaptor.addChild(root_1, stream_invalidate_key.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:628:10: cascade_key ( convert_key to_key substitutable_key | ( not_key )? including_key table_key data_key )? ( dependent_exceptions_part )?
                    {
                    pushFollow(FOLLOW_cascade_key_in_dependent_handling_clause6174);
                    cascade_key415=cascade_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cascade_key.add(cascade_key415.getTree());

                    // PLSQLParser.g:629:9: ( convert_key to_key substitutable_key | ( not_key )? including_key table_key data_key )?
                    int alt113=3;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==REGULAR_ID) ) {
                        int LA113_1 = input.LA(2);

                        if ( (LA113_1==SQL92_RESERVED_TO) ) {
                            alt113=1;
                        }
                        else if ( (LA113_1==SQL92_RESERVED_TABLE) && ((input.LT(1).getText().equalsIgnoreCase("including")))) {
                            alt113=2;
                        }
                    }
                    else if ( (LA113_0==SQL92_RESERVED_NOT) ) {
                        alt113=2;
                    }
                    switch (alt113) {
                        case 1 :
                            // PLSQLParser.g:629:14: convert_key to_key substitutable_key
                            {
                            pushFollow(FOLLOW_convert_key_in_dependent_handling_clause6189);
                            convert_key416=convert_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_convert_key.add(convert_key416.getTree());

                            pushFollow(FOLLOW_to_key_in_dependent_handling_clause6191);
                            to_key417=to_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_to_key.add(to_key417.getTree());

                            pushFollow(FOLLOW_substitutable_key_in_dependent_handling_clause6193);
                            substitutable_key418=substitutable_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_substitutable_key.add(substitutable_key418.getTree());

                            if ( state.backtracking==0 ) {mode = 1;}

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:630:14: ( not_key )? including_key table_key data_key
                            {
                            // PLSQLParser.g:630:14: ( not_key )?
                            int alt112=2;
                            int LA112_0 = input.LA(1);

                            if ( (LA112_0==SQL92_RESERVED_NOT) ) {
                                alt112=1;
                            }
                            switch (alt112) {
                                case 1 :
                                    // PLSQLParser.g:630:14: not_key
                                    {
                                    pushFollow(FOLLOW_not_key_in_dependent_handling_clause6210);
                                    not_key419=not_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_not_key.add(not_key419.getTree());

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_including_key_in_dependent_handling_clause6213);
                            including_key420=including_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_including_key.add(including_key420.getTree());

                            pushFollow(FOLLOW_table_key_in_dependent_handling_clause6215);
                            table_key421=table_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_table_key.add(table_key421.getTree());

                            pushFollow(FOLLOW_data_key_in_dependent_handling_clause6217);
                            data_key422=data_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_data_key.add(data_key422.getTree());

                            if ( state.backtracking==0 ) {mode = 2;}

                            }
                            break;

                    }


                    // PLSQLParser.g:632:9: ( dependent_exceptions_part )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("exceptions"))||(input.LT(1).getText().equalsIgnoreCase("force"))))) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // PLSQLParser.g:632:9: dependent_exceptions_part
                            {
                            pushFollow(FOLLOW_dependent_exceptions_part_in_dependent_handling_clause6240);
                            dependent_exceptions_part423=dependent_exceptions_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dependent_exceptions_part.add(dependent_exceptions_part423.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: cascade_key, cascade_key, dependent_exceptions_part, cascade_key, convert_key, dependent_exceptions_part, dependent_exceptions_part, including_key, not_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 633:9: -> {mode == 1}? ^( DEPENDENT_HANDLING ^( cascade_key convert_key ) ( dependent_exceptions_part )? )
                    if (mode == 1) {
                        // PLSQLParser.g:633:25: ^( DEPENDENT_HANDLING ^( cascade_key convert_key ) ( dependent_exceptions_part )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEPENDENT_HANDLING, "DEPENDENT_HANDLING")
                        , root_1);

                        // PLSQLParser.g:633:46: ^( cascade_key convert_key )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(stream_cascade_key.nextNode(), root_2);

                        adaptor.addChild(root_2, stream_convert_key.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        // PLSQLParser.g:633:73: ( dependent_exceptions_part )?
                        if ( stream_dependent_exceptions_part.hasNext() ) {
                            adaptor.addChild(root_1, stream_dependent_exceptions_part.nextTree());

                        }
                        stream_dependent_exceptions_part.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    else // 634:9: -> {mode == 2}? ^( DEPENDENT_HANDLING ^( cascade_key ( not_key )? including_key ) ( dependent_exceptions_part )? )
                    if (mode == 2) {
                        // PLSQLParser.g:634:25: ^( DEPENDENT_HANDLING ^( cascade_key ( not_key )? including_key ) ( dependent_exceptions_part )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEPENDENT_HANDLING, "DEPENDENT_HANDLING")
                        , root_1);

                        // PLSQLParser.g:634:46: ^( cascade_key ( not_key )? including_key )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(stream_cascade_key.nextNode(), root_2);

                        // PLSQLParser.g:634:60: ( not_key )?
                        if ( stream_not_key.hasNext() ) {
                            adaptor.addChild(root_2, stream_not_key.nextTree());

                        }
                        stream_not_key.reset();

                        adaptor.addChild(root_2, stream_including_key.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        // PLSQLParser.g:634:84: ( dependent_exceptions_part )?
                        if ( stream_dependent_exceptions_part.hasNext() ) {
                            adaptor.addChild(root_1, stream_dependent_exceptions_part.nextTree());

                        }
                        stream_dependent_exceptions_part.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    else // 635:9: -> ^( DEPENDENT_HANDLING ^( cascade_key ) ( dependent_exceptions_part )? )
                    {
                        // PLSQLParser.g:635:12: ^( DEPENDENT_HANDLING ^( cascade_key ) ( dependent_exceptions_part )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEPENDENT_HANDLING, "DEPENDENT_HANDLING")
                        , root_1);

                        // PLSQLParser.g:635:33: ^( cascade_key )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(stream_cascade_key.nextNode(), root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        // PLSQLParser.g:635:48: ( dependent_exceptions_part )?
                        if ( stream_dependent_exceptions_part.hasNext() ) {
                            adaptor.addChild(root_1, stream_dependent_exceptions_part.nextTree());

                        }
                        stream_dependent_exceptions_part.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dependent_handling_clause"


    public static class dependent_exceptions_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dependent_exceptions_part"
    // PLSQLParser.g:638:1: dependent_exceptions_part : ( force_key )? exceptions_key into_key tableview_name -> ^( exceptions_key ( force_key )? tableview_name ) ;
    public final dependent_exceptions_part_return dependent_exceptions_part() throws RecognitionException {
        dependent_exceptions_part_return retval = new dependent_exceptions_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.force_key_return force_key424 =null;

        PLSQLParser_PLSQLKeys.exceptions_key_return exceptions_key425 =null;

        PLSQLParser_PLSQLKeys.into_key_return into_key426 =null;

        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name427 =null;


        RewriteRuleSubtreeStream stream_into_key=new RewriteRuleSubtreeStream(adaptor,"rule into_key");
        RewriteRuleSubtreeStream stream_force_key=new RewriteRuleSubtreeStream(adaptor,"rule force_key");
        RewriteRuleSubtreeStream stream_exceptions_key=new RewriteRuleSubtreeStream(adaptor,"rule exceptions_key");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            // PLSQLParser.g:639:5: ( ( force_key )? exceptions_key into_key tableview_name -> ^( exceptions_key ( force_key )? tableview_name ) )
            // PLSQLParser.g:639:10: ( force_key )? exceptions_key into_key tableview_name
            {
            // PLSQLParser.g:639:10: ( force_key )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("exceptions"))||(input.LT(1).getText().equalsIgnoreCase("force"))))) {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("force")))) {
                    alt116=1;
                }
            }
            switch (alt116) {
                case 1 :
                    // PLSQLParser.g:639:10: force_key
                    {
                    pushFollow(FOLLOW_force_key_in_dependent_exceptions_part6335);
                    force_key424=force_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_force_key.add(force_key424.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_exceptions_key_in_dependent_exceptions_part6338);
            exceptions_key425=exceptions_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exceptions_key.add(exceptions_key425.getTree());

            pushFollow(FOLLOW_into_key_in_dependent_exceptions_part6340);
            into_key426=into_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_into_key.add(into_key426.getTree());

            pushFollow(FOLLOW_tableview_name_in_dependent_exceptions_part6342);
            tableview_name427=tableview_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name427.getTree());

            // AST REWRITE
            // elements: force_key, tableview_name, exceptions_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 640:9: -> ^( exceptions_key ( force_key )? tableview_name )
            {
                // PLSQLParser.g:640:12: ^( exceptions_key ( force_key )? tableview_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_exceptions_key.nextNode(), root_1);

                // PLSQLParser.g:640:29: ( force_key )?
                if ( stream_force_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_force_key.nextTree());

                }
                stream_force_key.reset();

                adaptor.addChild(root_1, stream_tableview_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dependent_exceptions_part"


    public static class create_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create_type"
    // PLSQLParser.g:645:1: create_type : create_key ( or_key replace_key )? type_key ( type_definition | type_body ) SEMICOLON -> {mode == 1}? ^( CREATE_TYPE_BODY[$create_key.start] ( replace_key )? type_body ) -> ^( CREATE_TYPE_SPEC[$create_key.start] ( replace_key )? type_definition ) ;
    public final create_type_return create_type() throws RecognitionException {
        create_type_return retval = new create_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON434=null;
        PLSQLParser_PLSQLKeys.create_key_return create_key428 =null;

        PLSQLParser_PLSQLKeys.or_key_return or_key429 =null;

        PLSQLParser_PLSQLKeys.replace_key_return replace_key430 =null;

        PLSQLParser_PLSQLKeys.type_key_return type_key431 =null;

        type_definition_return type_definition432 =null;

        type_body_return type_body433 =null;


        Object SEMICOLON434_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_type_definition=new RewriteRuleSubtreeStream(adaptor,"rule type_definition");
        RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
        RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");
        RewriteRuleSubtreeStream stream_type_body=new RewriteRuleSubtreeStream(adaptor,"rule type_body");
            int mode = 0;    
        try {
            // PLSQLParser.g:647:5: ( create_key ( or_key replace_key )? type_key ( type_definition | type_body ) SEMICOLON -> {mode == 1}? ^( CREATE_TYPE_BODY[$create_key.start] ( replace_key )? type_body ) -> ^( CREATE_TYPE_SPEC[$create_key.start] ( replace_key )? type_definition ) )
            // PLSQLParser.g:647:10: create_key ( or_key replace_key )? type_key ( type_definition | type_body ) SEMICOLON
            {
            pushFollow(FOLLOW_create_key_in_create_type6391);
            create_key428=create_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_create_key.add(create_key428.getTree());

            // PLSQLParser.g:647:21: ( or_key replace_key )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==SQL92_RESERVED_OR) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // PLSQLParser.g:647:22: or_key replace_key
                    {
                    pushFollow(FOLLOW_or_key_in_create_type6394);
                    or_key429=or_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_key.add(or_key429.getTree());

                    pushFollow(FOLLOW_replace_key_in_create_type6396);
                    replace_key430=replace_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_replace_key.add(replace_key430.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_type_key_in_create_type6400);
            type_key431=type_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_key.add(type_key431.getTree());

            // PLSQLParser.g:648:9: ( type_definition | type_body )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==REGULAR_ID) ) {
                switch ( input.LA(2) ) {
                case PERIOD:
                case SEMICOLON:
                case SQL92_RESERVED_AS:
                case SQL92_RESERVED_IS:
                    {
                    alt118=1;
                    }
                    break;
                case REGULAR_ID:
                    {
                    int LA118_3 = input.LA(3);

                    if ( (LA118_3==CHAR_STRING||LA118_3==DELIMITED_ID||LA118_3==REGULAR_ID||LA118_3==SQL92_RESERVED_DATE) ) {
                        alt118=1;
                    }
                    else if ( (LA118_3==PERIOD||LA118_3==SQL92_RESERVED_AS||LA118_3==SQL92_RESERVED_IS) ) {
                        alt118=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 118, 3, input);

                        throw nvae;

                    }
                    }
                    break;
                case DELIMITED_ID:
                    {
                    alt118=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 118, 1, input);

                    throw nvae;

                }

            }
            else if ( (LA118_0==DELIMITED_ID) ) {
                alt118=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }
            switch (alt118) {
                case 1 :
                    // PLSQLParser.g:648:11: type_definition
                    {
                    pushFollow(FOLLOW_type_definition_in_create_type6412);
                    type_definition432=type_definition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_definition.add(type_definition432.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:648:29: type_body
                    {
                    pushFollow(FOLLOW_type_body_in_create_type6416);
                    type_body433=type_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_body.add(type_body433.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            SEMICOLON434=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_type6429); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON434);


            // AST REWRITE
            // elements: replace_key, type_definition, type_body, replace_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 650:9: -> {mode == 1}? ^( CREATE_TYPE_BODY[$create_key.start] ( replace_key )? type_body )
            if (mode == 1) {
                // PLSQLParser.g:650:24: ^( CREATE_TYPE_BODY[$create_key.start] ( replace_key )? type_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_TYPE_BODY, (create_key428!=null?((Token)create_key428.start):null))
                , root_1);

                // PLSQLParser.g:650:62: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_type_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 651:9: -> ^( CREATE_TYPE_SPEC[$create_key.start] ( replace_key )? type_definition )
            {
                // PLSQLParser.g:651:12: ^( CREATE_TYPE_SPEC[$create_key.start] ( replace_key )? type_definition )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_TYPE_SPEC, (create_key428!=null?((Token)create_key428.start):null))
                , root_1);

                // PLSQLParser.g:651:50: ( replace_key )?
                if ( stream_replace_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_replace_key.nextTree());

                }
                stream_replace_key.reset();

                adaptor.addChild(root_1, stream_type_definition.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "create_type"


    public static class type_definition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_definition"
    // PLSQLParser.g:655:1: type_definition : type_name ( oid_key CHAR_STRING )? ( object_type_def )? -> type_name ( CHAR_STRING )? ( object_type_def )? ;
    public final type_definition_return type_definition() throws RecognitionException {
        type_definition_return retval = new type_definition_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CHAR_STRING437=null;
        PLSQLParser_PLSQLCommons.type_name_return type_name435 =null;

        PLSQLParser_PLSQLKeys.oid_key_return oid_key436 =null;

        object_type_def_return object_type_def438 =null;


        Object CHAR_STRING437_tree=null;
        RewriteRuleTokenStream stream_CHAR_STRING=new RewriteRuleTokenStream(adaptor,"token CHAR_STRING");
        RewriteRuleSubtreeStream stream_oid_key=new RewriteRuleSubtreeStream(adaptor,"rule oid_key");
        RewriteRuleSubtreeStream stream_object_type_def=new RewriteRuleSubtreeStream(adaptor,"rule object_type_def");
        RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
        try {
            // PLSQLParser.g:656:5: ( type_name ( oid_key CHAR_STRING )? ( object_type_def )? -> type_name ( CHAR_STRING )? ( object_type_def )? )
            // PLSQLParser.g:656:10: type_name ( oid_key CHAR_STRING )? ( object_type_def )?
            {
            pushFollow(FOLLOW_type_name_in_type_definition6491);
            type_name435=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_name.add(type_name435.getTree());

            // PLSQLParser.g:657:9: ( oid_key CHAR_STRING )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))||(input.LT(1).getText().equalsIgnoreCase("oid"))))) {
                int LA119_1 = input.LA(2);

                if ( (LA119_1==CHAR_STRING) && ((input.LT(1).getText().equalsIgnoreCase("oid")))) {
                    alt119=1;
                }
            }
            switch (alt119) {
                case 1 :
                    // PLSQLParser.g:657:10: oid_key CHAR_STRING
                    {
                    pushFollow(FOLLOW_oid_key_in_type_definition6503);
                    oid_key436=oid_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_oid_key.add(oid_key436.getTree());

                    CHAR_STRING437=(Token)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_type_definition6505); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR_STRING.add(CHAR_STRING437);


                    }
                    break;

            }


            // PLSQLParser.g:658:9: ( object_type_def )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))))) {
                alt120=1;
            }
            else if ( (LA120_0==SQL92_RESERVED_AS||LA120_0==SQL92_RESERVED_IS) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // PLSQLParser.g:658:9: object_type_def
                    {
                    pushFollow(FOLLOW_object_type_def_in_type_definition6517);
                    object_type_def438=object_type_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_object_type_def.add(object_type_def438.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: object_type_def, CHAR_STRING, type_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 659:9: -> type_name ( CHAR_STRING )? ( object_type_def )?
            {
                adaptor.addChild(root_0, stream_type_name.nextTree());

                // PLSQLParser.g:659:22: ( CHAR_STRING )?
                if ( stream_CHAR_STRING.hasNext() ) {
                    adaptor.addChild(root_0, 
                    stream_CHAR_STRING.nextNode()
                    );

                }
                stream_CHAR_STRING.reset();

                // PLSQLParser.g:659:35: ( object_type_def )?
                if ( stream_object_type_def.hasNext() ) {
                    adaptor.addChild(root_0, stream_object_type_def.nextTree());

                }
                stream_object_type_def.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_definition"


    public static class object_type_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_type_def"
    // PLSQLParser.g:662:1: object_type_def : ( invoker_rights_clause )? ( object_as_part | object_under_part ) ( sqlj_object_type )? ( LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN )? ( modifier_clause )* -> ^( OBJECT_TYPE_DEF ( object_as_part )? ( object_under_part )? ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( object_member_spec )* ) ) ;
    public final object_type_def_return object_type_def() throws RecognitionException {
        object_type_def_return retval = new object_type_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN443=null;
        Token COMMA445=null;
        Token RIGHT_PAREN447=null;
        invoker_rights_clause_return invoker_rights_clause439 =null;

        object_as_part_return object_as_part440 =null;

        object_under_part_return object_under_part441 =null;

        sqlj_object_type_return sqlj_object_type442 =null;

        object_member_spec_return object_member_spec444 =null;

        object_member_spec_return object_member_spec446 =null;

        modifier_clause_return modifier_clause448 =null;


        Object LEFT_PAREN443_tree=null;
        Object COMMA445_tree=null;
        Object RIGHT_PAREN447_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_invoker_rights_clause=new RewriteRuleSubtreeStream(adaptor,"rule invoker_rights_clause");
        RewriteRuleSubtreeStream stream_object_as_part=new RewriteRuleSubtreeStream(adaptor,"rule object_as_part");
        RewriteRuleSubtreeStream stream_modifier_clause=new RewriteRuleSubtreeStream(adaptor,"rule modifier_clause");
        RewriteRuleSubtreeStream stream_object_under_part=new RewriteRuleSubtreeStream(adaptor,"rule object_under_part");
        RewriteRuleSubtreeStream stream_object_member_spec=new RewriteRuleSubtreeStream(adaptor,"rule object_member_spec");
        RewriteRuleSubtreeStream stream_sqlj_object_type=new RewriteRuleSubtreeStream(adaptor,"rule sqlj_object_type");
        try {
            // PLSQLParser.g:663:5: ( ( invoker_rights_clause )? ( object_as_part | object_under_part ) ( sqlj_object_type )? ( LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN )? ( modifier_clause )* -> ^( OBJECT_TYPE_DEF ( object_as_part )? ( object_under_part )? ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( object_member_spec )* ) ) )
            // PLSQLParser.g:663:10: ( invoker_rights_clause )? ( object_as_part | object_under_part ) ( sqlj_object_type )? ( LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN )? ( modifier_clause )*
            {
            // PLSQLParser.g:663:10: ( invoker_rights_clause )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))))) {
                int LA121_1 = input.LA(2);

                if ( (LA121_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))))) {
                    int LA121_3 = input.LA(3);

                    if ( (LA121_3==SQL92_RESERVED_AS||LA121_3==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
                        alt121=1;
                    }
                    else if ( (LA121_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))))) {
                        int LA121_6 = input.LA(4);

                        if ( (LA121_6==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))))) {
                            int LA121_7 = input.LA(5);

                            if ( ((input.LT(1).getText().equalsIgnoreCase("authid"))) ) {
                                alt121=1;
                            }
                        }
                        else if ( (LA121_6==DELIMITED_ID||LA121_6==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
                            alt121=1;
                        }
                    }
                }
            }
            switch (alt121) {
                case 1 :
                    // PLSQLParser.g:663:10: invoker_rights_clause
                    {
                    pushFollow(FOLLOW_invoker_rights_clause_in_object_type_def6556);
                    invoker_rights_clause439=invoker_rights_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_invoker_rights_clause.add(invoker_rights_clause439.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:664:5: ( object_as_part | object_under_part )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==SQL92_RESERVED_AS||LA122_0==SQL92_RESERVED_IS) ) {
                alt122=1;
            }
            else if ( (LA122_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("under")))) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }
            switch (alt122) {
                case 1 :
                    // PLSQLParser.g:664:10: object_as_part
                    {
                    pushFollow(FOLLOW_object_as_part_in_object_type_def6568);
                    object_as_part440=object_as_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_object_as_part.add(object_as_part440.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:665:10: object_under_part
                    {
                    pushFollow(FOLLOW_object_under_part_in_object_type_def6579);
                    object_under_part441=object_under_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_object_under_part.add(object_under_part441.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:667:9: ( sqlj_object_type )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==REGULAR_ID) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==REGULAR_ID) ) {
                    switch ( input.LA(3) ) {
                        case APPROXIMATE_NUM_LIT:
                        case BINDVAR:
                        case CHAR_STRING:
                        case CHAR_STRING_PERL:
                        case COLON:
                        case DELIMITED_ID:
                        case EXACT_NUM_LIT:
                        case INTRODUCER:
                        case LEFT_PAREN:
                        case MINUS_SIGN:
                        case NATIONAL_CHAR_STRING_LIT:
                        case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                        case PLUS_SIGN:
                        case SQL92_RESERVED_ALL:
                        case SQL92_RESERVED_ANY:
                        case SQL92_RESERVED_CASE:
                        case SQL92_RESERVED_CURSOR:
                        case SQL92_RESERVED_DATE:
                        case SQL92_RESERVED_DEFAULT:
                        case SQL92_RESERVED_DISTINCT:
                        case SQL92_RESERVED_EXISTS:
                        case SQL92_RESERVED_FALSE:
                        case SQL92_RESERVED_NULL:
                        case SQL92_RESERVED_PRIOR:
                        case SQL92_RESERVED_TRUE:
                        case UNSIGNED_INTEGER:
                            {
                            alt123=1;
                            }
                            break;
                        case SQL92_RESERVED_NOT:
                            {
                            int LA123_6 = input.LA(4);

                            if ( (LA123_6==APPROXIMATE_NUM_LIT||LA123_6==BINDVAR||(LA123_6 >= CHAR_STRING && LA123_6 <= COLON)||LA123_6==DELIMITED_ID||LA123_6==EXACT_NUM_LIT||LA123_6==INTRODUCER||LA123_6==LEFT_PAREN||(LA123_6 >= MINUS_SIGN && LA123_6 <= NATIONAL_CHAR_STRING_LIT)||LA123_6==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_6==PLUS_SIGN||LA123_6==SQL92_RESERVED_ALL||LA123_6==SQL92_RESERVED_ANY||LA123_6==SQL92_RESERVED_CASE||LA123_6==SQL92_RESERVED_DATE||LA123_6==SQL92_RESERVED_DEFAULT||LA123_6==SQL92_RESERVED_DISTINCT||(LA123_6 >= SQL92_RESERVED_EXISTS && LA123_6 <= SQL92_RESERVED_FALSE)||(LA123_6 >= SQL92_RESERVED_NOT && LA123_6 <= SQL92_RESERVED_NULL)||LA123_6==SQL92_RESERVED_PRIOR||LA123_6==SQL92_RESERVED_TRUE||LA123_6==UNSIGNED_INTEGER) ) {
                                alt123=1;
                            }
                            else if ( (LA123_6==REGULAR_ID) ) {
                                switch ( input.LA(5) ) {
                                    case APPROXIMATE_NUM_LIT:
                                    case ASTERISK:
                                    case BINDVAR:
                                    case CARRET_OPERATOR_PART:
                                    case CHAR_STRING:
                                    case CHAR_STRING_PERL:
                                    case COLON:
                                    case CONCATENATION_OP:
                                    case DELIMITED_ID:
                                    case EQUALS_OP:
                                    case EXACT_NUM_LIT:
                                    case EXCLAMATION_OPERATOR_PART:
                                    case GREATER_THAN_OP:
                                    case GREATER_THAN_OR_EQUALS_OP:
                                    case INTRODUCER:
                                    case LEFT_BRACKET:
                                    case LEFT_PAREN:
                                    case LESS_THAN_OP:
                                    case LESS_THAN_OR_EQUALS_OP:
                                    case MINUS_SIGN:
                                    case NATIONAL_CHAR_STRING_LIT:
                                    case NOT_EQUAL_OP:
                                    case PERIOD:
                                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                                    case PLUS_SIGN:
                                    case SOLIDUS:
                                    case SQL92_RESERVED_ALL:
                                    case SQL92_RESERVED_AND:
                                    case SQL92_RESERVED_ANY:
                                    case SQL92_RESERVED_BETWEEN:
                                    case SQL92_RESERVED_CASE:
                                    case SQL92_RESERVED_DATE:
                                    case SQL92_RESERVED_DEFAULT:
                                    case SQL92_RESERVED_DISTINCT:
                                    case SQL92_RESERVED_EXISTS:
                                    case SQL92_RESERVED_FALSE:
                                    case SQL92_RESERVED_IN:
                                    case SQL92_RESERVED_IS:
                                    case SQL92_RESERVED_LIKE:
                                    case SQL92_RESERVED_NULL:
                                    case SQL92_RESERVED_OR:
                                    case SQL92_RESERVED_PRIOR:
                                    case SQL92_RESERVED_TRUE:
                                    case UNSIGNED_INTEGER:
                                    case VERTICAL_BAR:
                                        {
                                        alt123=1;
                                        }
                                        break;
                                    case REGULAR_ID:
                                        {
                                        switch ( input.LA(6) ) {
                                            case APPROXIMATE_NUM_LIT:
                                            case ASTERISK:
                                            case BINDVAR:
                                            case CARRET_OPERATOR_PART:
                                            case CHAR_STRING:
                                            case CHAR_STRING_PERL:
                                            case COLON:
                                            case CONCATENATION_OP:
                                            case DELIMITED_ID:
                                            case EQUALS_OP:
                                            case EXACT_NUM_LIT:
                                            case EXCLAMATION_OPERATOR_PART:
                                            case GREATER_THAN_OP:
                                            case GREATER_THAN_OR_EQUALS_OP:
                                            case INTRODUCER:
                                            case LEFT_BRACKET:
                                            case LEFT_PAREN:
                                            case LESS_THAN_OP:
                                            case LESS_THAN_OR_EQUALS_OP:
                                            case MINUS_SIGN:
                                            case NATIONAL_CHAR_STRING_LIT:
                                            case NOT_EQUAL_OP:
                                            case PERIOD:
                                            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                                            case PLUS_SIGN:
                                            case SOLIDUS:
                                            case SQL92_RESERVED_ALL:
                                            case SQL92_RESERVED_AND:
                                            case SQL92_RESERVED_ANY:
                                            case SQL92_RESERVED_BETWEEN:
                                            case SQL92_RESERVED_CASE:
                                            case SQL92_RESERVED_DATE:
                                            case SQL92_RESERVED_DEFAULT:
                                            case SQL92_RESERVED_DISTINCT:
                                            case SQL92_RESERVED_EXISTS:
                                            case SQL92_RESERVED_FALSE:
                                            case SQL92_RESERVED_IN:
                                            case SQL92_RESERVED_IS:
                                            case SQL92_RESERVED_LIKE:
                                            case SQL92_RESERVED_NULL:
                                            case SQL92_RESERVED_OF:
                                            case SQL92_RESERVED_OR:
                                            case SQL92_RESERVED_PRIOR:
                                            case SQL92_RESERVED_TO:
                                            case SQL92_RESERVED_TRUE:
                                            case UNSIGNED_INTEGER:
                                            case VERTICAL_BAR:
                                                {
                                                alt123=1;
                                                }
                                                break;
                                            case REGULAR_ID:
                                                {
                                                switch ( input.LA(7) ) {
                                                    case APPROXIMATE_NUM_LIT:
                                                    case ASTERISK:
                                                    case BINDVAR:
                                                    case CARRET_OPERATOR_PART:
                                                    case CHAR_STRING:
                                                    case CHAR_STRING_PERL:
                                                    case COLON:
                                                    case CONCATENATION_OP:
                                                    case DELIMITED_ID:
                                                    case EQUALS_OP:
                                                    case EXACT_NUM_LIT:
                                                    case EXCLAMATION_OPERATOR_PART:
                                                    case GREATER_THAN_OP:
                                                    case GREATER_THAN_OR_EQUALS_OP:
                                                    case INTRODUCER:
                                                    case LEFT_BRACKET:
                                                    case LEFT_PAREN:
                                                    case LESS_THAN_OP:
                                                    case LESS_THAN_OR_EQUALS_OP:
                                                    case MINUS_SIGN:
                                                    case NATIONAL_CHAR_STRING_LIT:
                                                    case NOT_EQUAL_OP:
                                                    case PERIOD:
                                                    case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                                                    case PLSQL_NON_RESERVED_USING:
                                                    case PLUS_SIGN:
                                                    case SOLIDUS:
                                                    case SQL92_RESERVED_ALL:
                                                    case SQL92_RESERVED_AND:
                                                    case SQL92_RESERVED_ANY:
                                                    case SQL92_RESERVED_BETWEEN:
                                                    case SQL92_RESERVED_CASE:
                                                    case SQL92_RESERVED_DATE:
                                                    case SQL92_RESERVED_DEFAULT:
                                                    case SQL92_RESERVED_DISTINCT:
                                                    case SQL92_RESERVED_EXISTS:
                                                    case SQL92_RESERVED_FALSE:
                                                    case SQL92_RESERVED_IN:
                                                    case SQL92_RESERVED_IS:
                                                    case SQL92_RESERVED_LIKE:
                                                    case SQL92_RESERVED_NULL:
                                                    case SQL92_RESERVED_OF:
                                                    case SQL92_RESERVED_OR:
                                                    case SQL92_RESERVED_PRIOR:
                                                    case SQL92_RESERVED_TO:
                                                    case SQL92_RESERVED_TRUE:
                                                    case UNSIGNED_INTEGER:
                                                    case VERTICAL_BAR:
                                                        {
                                                        alt123=1;
                                                        }
                                                        break;
                                                    case REGULAR_ID:
                                                        {
                                                        switch ( input.LA(8) ) {
                                                            case APPROXIMATE_NUM_LIT:
                                                            case ASTERISK:
                                                            case BINDVAR:
                                                            case CARRET_OPERATOR_PART:
                                                            case CHAR_STRING:
                                                            case CHAR_STRING_PERL:
                                                            case COLON:
                                                            case CONCATENATION_OP:
                                                            case DELIMITED_ID:
                                                            case EQUALS_OP:
                                                            case EXACT_NUM_LIT:
                                                            case EXCLAMATION_OPERATOR_PART:
                                                            case GREATER_THAN_OP:
                                                            case GREATER_THAN_OR_EQUALS_OP:
                                                            case INTRODUCER:
                                                            case LEFT_BRACKET:
                                                            case LEFT_PAREN:
                                                            case LESS_THAN_OP:
                                                            case LESS_THAN_OR_EQUALS_OP:
                                                            case MINUS_SIGN:
                                                            case NATIONAL_CHAR_STRING_LIT:
                                                            case NOT_EQUAL_OP:
                                                            case PERIOD:
                                                            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                                                            case PLSQL_NON_RESERVED_USING:
                                                            case PLUS_SIGN:
                                                            case SOLIDUS:
                                                            case SQL92_RESERVED_ALL:
                                                            case SQL92_RESERVED_AND:
                                                            case SQL92_RESERVED_ANY:
                                                            case SQL92_RESERVED_BETWEEN:
                                                            case SQL92_RESERVED_CASE:
                                                            case SQL92_RESERVED_DATE:
                                                            case SQL92_RESERVED_DEFAULT:
                                                            case SQL92_RESERVED_DISTINCT:
                                                            case SQL92_RESERVED_EXISTS:
                                                            case SQL92_RESERVED_FALSE:
                                                            case SQL92_RESERVED_IN:
                                                            case SQL92_RESERVED_IS:
                                                            case SQL92_RESERVED_LIKE:
                                                            case SQL92_RESERVED_NULL:
                                                            case SQL92_RESERVED_OF:
                                                            case SQL92_RESERVED_OR:
                                                            case SQL92_RESERVED_PRIOR:
                                                            case SQL92_RESERVED_TO:
                                                            case SQL92_RESERVED_TRUE:
                                                            case UNSIGNED_INTEGER:
                                                            case VERTICAL_BAR:
                                                                {
                                                                alt123=1;
                                                                }
                                                                break;
                                                            case REGULAR_ID:
                                                                {
                                                                int LA123_23 = input.LA(9);

                                                                if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                                                                    alt123=1;
                                                                }
                                                                }
                                                                break;
                                                            case SQL92_RESERVED_NOT:
                                                                {
                                                                int LA123_12 = input.LA(9);

                                                                if ( (LA123_12==SQL92_RESERVED_BETWEEN||LA123_12==SQL92_RESERVED_IN||LA123_12==SQL92_RESERVED_LIKE) ) {
                                                                    alt123=1;
                                                                }
                                                                else if ( (LA123_12==REGULAR_ID) ) {
                                                                    int LA123_16 = input.LA(10);

                                                                    if ( (LA123_16==APPROXIMATE_NUM_LIT||LA123_16==BINDVAR||(LA123_16 >= CHAR_STRING && LA123_16 <= COLON)||LA123_16==DELIMITED_ID||LA123_16==EXACT_NUM_LIT||LA123_16==INTRODUCER||LA123_16==LEFT_PAREN||(LA123_16 >= MINUS_SIGN && LA123_16 <= NATIONAL_CHAR_STRING_LIT)||LA123_16==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_16==PLUS_SIGN||LA123_16==SQL92_RESERVED_ALL||LA123_16==SQL92_RESERVED_ANY||LA123_16==SQL92_RESERVED_CASE||LA123_16==SQL92_RESERVED_DATE||LA123_16==SQL92_RESERVED_DEFAULT||LA123_16==SQL92_RESERVED_DISTINCT||(LA123_16 >= SQL92_RESERVED_EXISTS && LA123_16 <= SQL92_RESERVED_FALSE)||LA123_16==SQL92_RESERVED_NULL||LA123_16==SQL92_RESERVED_PRIOR||LA123_16==SQL92_RESERVED_TRUE||LA123_16==UNSIGNED_INTEGER) ) {
                                                                        alt123=1;
                                                                    }
                                                                    else if ( (LA123_16==REGULAR_ID) ) {
                                                                        int LA123_20 = input.LA(11);

                                                                        if ( (LA123_20==APPROXIMATE_NUM_LIT||LA123_20==ASTERISK||LA123_20==BINDVAR||(LA123_20 >= CARRET_OPERATOR_PART && LA123_20 <= COLON)||(LA123_20 >= CONCATENATION_OP && LA123_20 <= DELIMITED_ID)||(LA123_20 >= EQUALS_OP && LA123_20 <= EXCLAMATION_OPERATOR_PART)||(LA123_20 >= GREATER_THAN_OP && LA123_20 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_20 >= INTRODUCER && LA123_20 <= NATIONAL_CHAR_STRING_LIT)||LA123_20==NOT_EQUAL_OP||(LA123_20 >= PERIOD && LA123_20 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_20==PLUS_SIGN||LA123_20==SOLIDUS||LA123_20==SQL92_RESERVED_ALL||(LA123_20 >= SQL92_RESERVED_AND && LA123_20 <= SQL92_RESERVED_ANY)||LA123_20==SQL92_RESERVED_CASE||LA123_20==SQL92_RESERVED_DATE||LA123_20==SQL92_RESERVED_DEFAULT||LA123_20==SQL92_RESERVED_DISTINCT||(LA123_20 >= SQL92_RESERVED_EXISTS && LA123_20 <= SQL92_RESERVED_FALSE)||LA123_20==SQL92_RESERVED_IS||LA123_20==SQL92_RESERVED_NULL||LA123_20==SQL92_RESERVED_OR||LA123_20==SQL92_RESERVED_PRIOR||LA123_20==SQL92_RESERVED_TRUE||(LA123_20 >= UNSIGNED_INTEGER && LA123_20 <= VERTICAL_BAR)) ) {
                                                                            alt123=1;
                                                                        }
                                                                        else if ( (LA123_20==REGULAR_ID) ) {
                                                                            int LA123_24 = input.LA(12);

                                                                            if ( (LA123_24==APPROXIMATE_NUM_LIT||LA123_24==ASTERISK||LA123_24==BINDVAR||(LA123_24 >= CARRET_OPERATOR_PART && LA123_24 <= COLON)||(LA123_24 >= CONCATENATION_OP && LA123_24 <= DELIMITED_ID)||(LA123_24 >= EQUALS_OP && LA123_24 <= EXCLAMATION_OPERATOR_PART)||(LA123_24 >= GREATER_THAN_OP && LA123_24 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_24 >= INTRODUCER && LA123_24 <= NATIONAL_CHAR_STRING_LIT)||LA123_24==NOT_EQUAL_OP||(LA123_24 >= PERIOD && LA123_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_24==PLUS_SIGN||LA123_24==SOLIDUS||LA123_24==SQL92_RESERVED_ALL||(LA123_24 >= SQL92_RESERVED_AND && LA123_24 <= SQL92_RESERVED_ANY)||LA123_24==SQL92_RESERVED_CASE||LA123_24==SQL92_RESERVED_DATE||LA123_24==SQL92_RESERVED_DEFAULT||LA123_24==SQL92_RESERVED_DISTINCT||(LA123_24 >= SQL92_RESERVED_EXISTS && LA123_24 <= SQL92_RESERVED_FALSE)||LA123_24==SQL92_RESERVED_IS||(LA123_24 >= SQL92_RESERVED_NULL && LA123_24 <= SQL92_RESERVED_OF)||LA123_24==SQL92_RESERVED_OR||LA123_24==SQL92_RESERVED_PRIOR||(LA123_24 >= SQL92_RESERVED_TO && LA123_24 <= SQL92_RESERVED_TRUE)||(LA123_24 >= UNSIGNED_INTEGER && LA123_24 <= VERTICAL_BAR)) ) {
                                                                                alt123=1;
                                                                            }
                                                                            else if ( (LA123_24==REGULAR_ID) ) {
                                                                                int LA123_26 = input.LA(13);

                                                                                if ( (LA123_26==APPROXIMATE_NUM_LIT||LA123_26==ASTERISK||LA123_26==BINDVAR||(LA123_26 >= CARRET_OPERATOR_PART && LA123_26 <= COLON)||(LA123_26 >= CONCATENATION_OP && LA123_26 <= DELIMITED_ID)||(LA123_26 >= EQUALS_OP && LA123_26 <= EXCLAMATION_OPERATOR_PART)||(LA123_26 >= GREATER_THAN_OP && LA123_26 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_26 >= INTRODUCER && LA123_26 <= NATIONAL_CHAR_STRING_LIT)||LA123_26==NOT_EQUAL_OP||(LA123_26 >= PERIOD && LA123_26 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_26==PLSQL_NON_RESERVED_USING||LA123_26==PLUS_SIGN||LA123_26==SOLIDUS||LA123_26==SQL92_RESERVED_ALL||(LA123_26 >= SQL92_RESERVED_AND && LA123_26 <= SQL92_RESERVED_ANY)||LA123_26==SQL92_RESERVED_CASE||LA123_26==SQL92_RESERVED_DATE||LA123_26==SQL92_RESERVED_DEFAULT||LA123_26==SQL92_RESERVED_DISTINCT||(LA123_26 >= SQL92_RESERVED_EXISTS && LA123_26 <= SQL92_RESERVED_FALSE)||LA123_26==SQL92_RESERVED_IS||(LA123_26 >= SQL92_RESERVED_NULL && LA123_26 <= SQL92_RESERVED_OF)||LA123_26==SQL92_RESERVED_OR||LA123_26==SQL92_RESERVED_PRIOR||(LA123_26 >= SQL92_RESERVED_TO && LA123_26 <= SQL92_RESERVED_TRUE)||(LA123_26 >= UNSIGNED_INTEGER && LA123_26 <= VERTICAL_BAR)) ) {
                                                                                    alt123=1;
                                                                                }
                                                                                else if ( (LA123_26==REGULAR_ID) ) {
                                                                                    int LA123_28 = input.LA(14);

                                                                                    if ( (LA123_28==APPROXIMATE_NUM_LIT||LA123_28==ASTERISK||LA123_28==BINDVAR||(LA123_28 >= CARRET_OPERATOR_PART && LA123_28 <= COLON)||(LA123_28 >= CONCATENATION_OP && LA123_28 <= DELIMITED_ID)||(LA123_28 >= EQUALS_OP && LA123_28 <= EXCLAMATION_OPERATOR_PART)||(LA123_28 >= GREATER_THAN_OP && LA123_28 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_28 >= INTRODUCER && LA123_28 <= NATIONAL_CHAR_STRING_LIT)||LA123_28==NOT_EQUAL_OP||(LA123_28 >= PERIOD && LA123_28 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_28==PLSQL_NON_RESERVED_USING||LA123_28==PLUS_SIGN||LA123_28==SOLIDUS||LA123_28==SQL92_RESERVED_ALL||(LA123_28 >= SQL92_RESERVED_AND && LA123_28 <= SQL92_RESERVED_ANY)||LA123_28==SQL92_RESERVED_CASE||LA123_28==SQL92_RESERVED_DATE||LA123_28==SQL92_RESERVED_DEFAULT||LA123_28==SQL92_RESERVED_DISTINCT||(LA123_28 >= SQL92_RESERVED_EXISTS && LA123_28 <= SQL92_RESERVED_FALSE)||LA123_28==SQL92_RESERVED_IS||(LA123_28 >= SQL92_RESERVED_NULL && LA123_28 <= SQL92_RESERVED_OF)||LA123_28==SQL92_RESERVED_OR||LA123_28==SQL92_RESERVED_PRIOR||(LA123_28 >= SQL92_RESERVED_TO && LA123_28 <= SQL92_RESERVED_TRUE)||(LA123_28 >= UNSIGNED_INTEGER && LA123_28 <= VERTICAL_BAR)) ) {
                                                                                        alt123=1;
                                                                                    }
                                                                                    else if ( (LA123_28==REGULAR_ID) ) {
                                                                                        int LA123_30 = input.LA(15);

                                                                                        if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                                                                                            alt123=1;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                }
                                                                break;
                                                        }

                                                        }
                                                        break;
                                                    case SQL92_RESERVED_NOT:
                                                        {
                                                        int LA123_12 = input.LA(8);

                                                        if ( (LA123_12==SQL92_RESERVED_BETWEEN||LA123_12==SQL92_RESERVED_IN||LA123_12==SQL92_RESERVED_LIKE) ) {
                                                            alt123=1;
                                                        }
                                                        else if ( (LA123_12==REGULAR_ID) ) {
                                                            int LA123_16 = input.LA(9);

                                                            if ( (LA123_16==APPROXIMATE_NUM_LIT||LA123_16==BINDVAR||(LA123_16 >= CHAR_STRING && LA123_16 <= COLON)||LA123_16==DELIMITED_ID||LA123_16==EXACT_NUM_LIT||LA123_16==INTRODUCER||LA123_16==LEFT_PAREN||(LA123_16 >= MINUS_SIGN && LA123_16 <= NATIONAL_CHAR_STRING_LIT)||LA123_16==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_16==PLUS_SIGN||LA123_16==SQL92_RESERVED_ALL||LA123_16==SQL92_RESERVED_ANY||LA123_16==SQL92_RESERVED_CASE||LA123_16==SQL92_RESERVED_DATE||LA123_16==SQL92_RESERVED_DEFAULT||LA123_16==SQL92_RESERVED_DISTINCT||(LA123_16 >= SQL92_RESERVED_EXISTS && LA123_16 <= SQL92_RESERVED_FALSE)||LA123_16==SQL92_RESERVED_NULL||LA123_16==SQL92_RESERVED_PRIOR||LA123_16==SQL92_RESERVED_TRUE||LA123_16==UNSIGNED_INTEGER) ) {
                                                                alt123=1;
                                                            }
                                                            else if ( (LA123_16==REGULAR_ID) ) {
                                                                int LA123_20 = input.LA(10);

                                                                if ( (LA123_20==APPROXIMATE_NUM_LIT||LA123_20==ASTERISK||LA123_20==BINDVAR||(LA123_20 >= CARRET_OPERATOR_PART && LA123_20 <= COLON)||(LA123_20 >= CONCATENATION_OP && LA123_20 <= DELIMITED_ID)||(LA123_20 >= EQUALS_OP && LA123_20 <= EXCLAMATION_OPERATOR_PART)||(LA123_20 >= GREATER_THAN_OP && LA123_20 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_20 >= INTRODUCER && LA123_20 <= NATIONAL_CHAR_STRING_LIT)||LA123_20==NOT_EQUAL_OP||(LA123_20 >= PERIOD && LA123_20 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_20==PLUS_SIGN||LA123_20==SOLIDUS||LA123_20==SQL92_RESERVED_ALL||(LA123_20 >= SQL92_RESERVED_AND && LA123_20 <= SQL92_RESERVED_ANY)||LA123_20==SQL92_RESERVED_CASE||LA123_20==SQL92_RESERVED_DATE||LA123_20==SQL92_RESERVED_DEFAULT||LA123_20==SQL92_RESERVED_DISTINCT||(LA123_20 >= SQL92_RESERVED_EXISTS && LA123_20 <= SQL92_RESERVED_FALSE)||LA123_20==SQL92_RESERVED_IS||LA123_20==SQL92_RESERVED_NULL||LA123_20==SQL92_RESERVED_OR||LA123_20==SQL92_RESERVED_PRIOR||LA123_20==SQL92_RESERVED_TRUE||(LA123_20 >= UNSIGNED_INTEGER && LA123_20 <= VERTICAL_BAR)) ) {
                                                                    alt123=1;
                                                                }
                                                                else if ( (LA123_20==REGULAR_ID) ) {
                                                                    int LA123_24 = input.LA(11);

                                                                    if ( (LA123_24==APPROXIMATE_NUM_LIT||LA123_24==ASTERISK||LA123_24==BINDVAR||(LA123_24 >= CARRET_OPERATOR_PART && LA123_24 <= COLON)||(LA123_24 >= CONCATENATION_OP && LA123_24 <= DELIMITED_ID)||(LA123_24 >= EQUALS_OP && LA123_24 <= EXCLAMATION_OPERATOR_PART)||(LA123_24 >= GREATER_THAN_OP && LA123_24 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_24 >= INTRODUCER && LA123_24 <= NATIONAL_CHAR_STRING_LIT)||LA123_24==NOT_EQUAL_OP||(LA123_24 >= PERIOD && LA123_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_24==PLUS_SIGN||LA123_24==SOLIDUS||LA123_24==SQL92_RESERVED_ALL||(LA123_24 >= SQL92_RESERVED_AND && LA123_24 <= SQL92_RESERVED_ANY)||LA123_24==SQL92_RESERVED_CASE||LA123_24==SQL92_RESERVED_DATE||LA123_24==SQL92_RESERVED_DEFAULT||LA123_24==SQL92_RESERVED_DISTINCT||(LA123_24 >= SQL92_RESERVED_EXISTS && LA123_24 <= SQL92_RESERVED_FALSE)||LA123_24==SQL92_RESERVED_IS||(LA123_24 >= SQL92_RESERVED_NULL && LA123_24 <= SQL92_RESERVED_OF)||LA123_24==SQL92_RESERVED_OR||LA123_24==SQL92_RESERVED_PRIOR||(LA123_24 >= SQL92_RESERVED_TO && LA123_24 <= SQL92_RESERVED_TRUE)||(LA123_24 >= UNSIGNED_INTEGER && LA123_24 <= VERTICAL_BAR)) ) {
                                                                        alt123=1;
                                                                    }
                                                                    else if ( (LA123_24==REGULAR_ID) ) {
                                                                        int LA123_26 = input.LA(12);

                                                                        if ( (LA123_26==APPROXIMATE_NUM_LIT||LA123_26==ASTERISK||LA123_26==BINDVAR||(LA123_26 >= CARRET_OPERATOR_PART && LA123_26 <= COLON)||(LA123_26 >= CONCATENATION_OP && LA123_26 <= DELIMITED_ID)||(LA123_26 >= EQUALS_OP && LA123_26 <= EXCLAMATION_OPERATOR_PART)||(LA123_26 >= GREATER_THAN_OP && LA123_26 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_26 >= INTRODUCER && LA123_26 <= NATIONAL_CHAR_STRING_LIT)||LA123_26==NOT_EQUAL_OP||(LA123_26 >= PERIOD && LA123_26 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_26==PLSQL_NON_RESERVED_USING||LA123_26==PLUS_SIGN||LA123_26==SOLIDUS||LA123_26==SQL92_RESERVED_ALL||(LA123_26 >= SQL92_RESERVED_AND && LA123_26 <= SQL92_RESERVED_ANY)||LA123_26==SQL92_RESERVED_CASE||LA123_26==SQL92_RESERVED_DATE||LA123_26==SQL92_RESERVED_DEFAULT||LA123_26==SQL92_RESERVED_DISTINCT||(LA123_26 >= SQL92_RESERVED_EXISTS && LA123_26 <= SQL92_RESERVED_FALSE)||LA123_26==SQL92_RESERVED_IS||(LA123_26 >= SQL92_RESERVED_NULL && LA123_26 <= SQL92_RESERVED_OF)||LA123_26==SQL92_RESERVED_OR||LA123_26==SQL92_RESERVED_PRIOR||(LA123_26 >= SQL92_RESERVED_TO && LA123_26 <= SQL92_RESERVED_TRUE)||(LA123_26 >= UNSIGNED_INTEGER && LA123_26 <= VERTICAL_BAR)) ) {
                                                                            alt123=1;
                                                                        }
                                                                        else if ( (LA123_26==REGULAR_ID) ) {
                                                                            int LA123_28 = input.LA(13);

                                                                            if ( (LA123_28==APPROXIMATE_NUM_LIT||LA123_28==ASTERISK||LA123_28==BINDVAR||(LA123_28 >= CARRET_OPERATOR_PART && LA123_28 <= COLON)||(LA123_28 >= CONCATENATION_OP && LA123_28 <= DELIMITED_ID)||(LA123_28 >= EQUALS_OP && LA123_28 <= EXCLAMATION_OPERATOR_PART)||(LA123_28 >= GREATER_THAN_OP && LA123_28 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_28 >= INTRODUCER && LA123_28 <= NATIONAL_CHAR_STRING_LIT)||LA123_28==NOT_EQUAL_OP||(LA123_28 >= PERIOD && LA123_28 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_28==PLSQL_NON_RESERVED_USING||LA123_28==PLUS_SIGN||LA123_28==SOLIDUS||LA123_28==SQL92_RESERVED_ALL||(LA123_28 >= SQL92_RESERVED_AND && LA123_28 <= SQL92_RESERVED_ANY)||LA123_28==SQL92_RESERVED_CASE||LA123_28==SQL92_RESERVED_DATE||LA123_28==SQL92_RESERVED_DEFAULT||LA123_28==SQL92_RESERVED_DISTINCT||(LA123_28 >= SQL92_RESERVED_EXISTS && LA123_28 <= SQL92_RESERVED_FALSE)||LA123_28==SQL92_RESERVED_IS||(LA123_28 >= SQL92_RESERVED_NULL && LA123_28 <= SQL92_RESERVED_OF)||LA123_28==SQL92_RESERVED_OR||LA123_28==SQL92_RESERVED_PRIOR||(LA123_28 >= SQL92_RESERVED_TO && LA123_28 <= SQL92_RESERVED_TRUE)||(LA123_28 >= UNSIGNED_INTEGER && LA123_28 <= VERTICAL_BAR)) ) {
                                                                                alt123=1;
                                                                            }
                                                                            else if ( (LA123_28==REGULAR_ID) ) {
                                                                                int LA123_30 = input.LA(14);

                                                                                if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                                                                                    alt123=1;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        }
                                                        break;
                                                }

                                                }
                                                break;
                                            case SQL92_RESERVED_NOT:
                                                {
                                                int LA123_12 = input.LA(7);

                                                if ( (LA123_12==SQL92_RESERVED_BETWEEN||LA123_12==SQL92_RESERVED_IN||LA123_12==SQL92_RESERVED_LIKE) ) {
                                                    alt123=1;
                                                }
                                                else if ( (LA123_12==REGULAR_ID) ) {
                                                    int LA123_16 = input.LA(8);

                                                    if ( (LA123_16==APPROXIMATE_NUM_LIT||LA123_16==BINDVAR||(LA123_16 >= CHAR_STRING && LA123_16 <= COLON)||LA123_16==DELIMITED_ID||LA123_16==EXACT_NUM_LIT||LA123_16==INTRODUCER||LA123_16==LEFT_PAREN||(LA123_16 >= MINUS_SIGN && LA123_16 <= NATIONAL_CHAR_STRING_LIT)||LA123_16==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_16==PLUS_SIGN||LA123_16==SQL92_RESERVED_ALL||LA123_16==SQL92_RESERVED_ANY||LA123_16==SQL92_RESERVED_CASE||LA123_16==SQL92_RESERVED_DATE||LA123_16==SQL92_RESERVED_DEFAULT||LA123_16==SQL92_RESERVED_DISTINCT||(LA123_16 >= SQL92_RESERVED_EXISTS && LA123_16 <= SQL92_RESERVED_FALSE)||LA123_16==SQL92_RESERVED_NULL||LA123_16==SQL92_RESERVED_PRIOR||LA123_16==SQL92_RESERVED_TRUE||LA123_16==UNSIGNED_INTEGER) ) {
                                                        alt123=1;
                                                    }
                                                    else if ( (LA123_16==REGULAR_ID) ) {
                                                        int LA123_20 = input.LA(9);

                                                        if ( (LA123_20==APPROXIMATE_NUM_LIT||LA123_20==ASTERISK||LA123_20==BINDVAR||(LA123_20 >= CARRET_OPERATOR_PART && LA123_20 <= COLON)||(LA123_20 >= CONCATENATION_OP && LA123_20 <= DELIMITED_ID)||(LA123_20 >= EQUALS_OP && LA123_20 <= EXCLAMATION_OPERATOR_PART)||(LA123_20 >= GREATER_THAN_OP && LA123_20 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_20 >= INTRODUCER && LA123_20 <= NATIONAL_CHAR_STRING_LIT)||LA123_20==NOT_EQUAL_OP||(LA123_20 >= PERIOD && LA123_20 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_20==PLUS_SIGN||LA123_20==SOLIDUS||LA123_20==SQL92_RESERVED_ALL||(LA123_20 >= SQL92_RESERVED_AND && LA123_20 <= SQL92_RESERVED_ANY)||LA123_20==SQL92_RESERVED_CASE||LA123_20==SQL92_RESERVED_DATE||LA123_20==SQL92_RESERVED_DEFAULT||LA123_20==SQL92_RESERVED_DISTINCT||(LA123_20 >= SQL92_RESERVED_EXISTS && LA123_20 <= SQL92_RESERVED_FALSE)||LA123_20==SQL92_RESERVED_IS||LA123_20==SQL92_RESERVED_NULL||LA123_20==SQL92_RESERVED_OR||LA123_20==SQL92_RESERVED_PRIOR||LA123_20==SQL92_RESERVED_TRUE||(LA123_20 >= UNSIGNED_INTEGER && LA123_20 <= VERTICAL_BAR)) ) {
                                                            alt123=1;
                                                        }
                                                        else if ( (LA123_20==REGULAR_ID) ) {
                                                            int LA123_24 = input.LA(10);

                                                            if ( (LA123_24==APPROXIMATE_NUM_LIT||LA123_24==ASTERISK||LA123_24==BINDVAR||(LA123_24 >= CARRET_OPERATOR_PART && LA123_24 <= COLON)||(LA123_24 >= CONCATENATION_OP && LA123_24 <= DELIMITED_ID)||(LA123_24 >= EQUALS_OP && LA123_24 <= EXCLAMATION_OPERATOR_PART)||(LA123_24 >= GREATER_THAN_OP && LA123_24 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_24 >= INTRODUCER && LA123_24 <= NATIONAL_CHAR_STRING_LIT)||LA123_24==NOT_EQUAL_OP||(LA123_24 >= PERIOD && LA123_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_24==PLUS_SIGN||LA123_24==SOLIDUS||LA123_24==SQL92_RESERVED_ALL||(LA123_24 >= SQL92_RESERVED_AND && LA123_24 <= SQL92_RESERVED_ANY)||LA123_24==SQL92_RESERVED_CASE||LA123_24==SQL92_RESERVED_DATE||LA123_24==SQL92_RESERVED_DEFAULT||LA123_24==SQL92_RESERVED_DISTINCT||(LA123_24 >= SQL92_RESERVED_EXISTS && LA123_24 <= SQL92_RESERVED_FALSE)||LA123_24==SQL92_RESERVED_IS||(LA123_24 >= SQL92_RESERVED_NULL && LA123_24 <= SQL92_RESERVED_OF)||LA123_24==SQL92_RESERVED_OR||LA123_24==SQL92_RESERVED_PRIOR||(LA123_24 >= SQL92_RESERVED_TO && LA123_24 <= SQL92_RESERVED_TRUE)||(LA123_24 >= UNSIGNED_INTEGER && LA123_24 <= VERTICAL_BAR)) ) {
                                                                alt123=1;
                                                            }
                                                            else if ( (LA123_24==REGULAR_ID) ) {
                                                                int LA123_26 = input.LA(11);

                                                                if ( (LA123_26==APPROXIMATE_NUM_LIT||LA123_26==ASTERISK||LA123_26==BINDVAR||(LA123_26 >= CARRET_OPERATOR_PART && LA123_26 <= COLON)||(LA123_26 >= CONCATENATION_OP && LA123_26 <= DELIMITED_ID)||(LA123_26 >= EQUALS_OP && LA123_26 <= EXCLAMATION_OPERATOR_PART)||(LA123_26 >= GREATER_THAN_OP && LA123_26 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_26 >= INTRODUCER && LA123_26 <= NATIONAL_CHAR_STRING_LIT)||LA123_26==NOT_EQUAL_OP||(LA123_26 >= PERIOD && LA123_26 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_26==PLSQL_NON_RESERVED_USING||LA123_26==PLUS_SIGN||LA123_26==SOLIDUS||LA123_26==SQL92_RESERVED_ALL||(LA123_26 >= SQL92_RESERVED_AND && LA123_26 <= SQL92_RESERVED_ANY)||LA123_26==SQL92_RESERVED_CASE||LA123_26==SQL92_RESERVED_DATE||LA123_26==SQL92_RESERVED_DEFAULT||LA123_26==SQL92_RESERVED_DISTINCT||(LA123_26 >= SQL92_RESERVED_EXISTS && LA123_26 <= SQL92_RESERVED_FALSE)||LA123_26==SQL92_RESERVED_IS||(LA123_26 >= SQL92_RESERVED_NULL && LA123_26 <= SQL92_RESERVED_OF)||LA123_26==SQL92_RESERVED_OR||LA123_26==SQL92_RESERVED_PRIOR||(LA123_26 >= SQL92_RESERVED_TO && LA123_26 <= SQL92_RESERVED_TRUE)||(LA123_26 >= UNSIGNED_INTEGER && LA123_26 <= VERTICAL_BAR)) ) {
                                                                    alt123=1;
                                                                }
                                                                else if ( (LA123_26==REGULAR_ID) ) {
                                                                    int LA123_28 = input.LA(12);

                                                                    if ( (LA123_28==APPROXIMATE_NUM_LIT||LA123_28==ASTERISK||LA123_28==BINDVAR||(LA123_28 >= CARRET_OPERATOR_PART && LA123_28 <= COLON)||(LA123_28 >= CONCATENATION_OP && LA123_28 <= DELIMITED_ID)||(LA123_28 >= EQUALS_OP && LA123_28 <= EXCLAMATION_OPERATOR_PART)||(LA123_28 >= GREATER_THAN_OP && LA123_28 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_28 >= INTRODUCER && LA123_28 <= NATIONAL_CHAR_STRING_LIT)||LA123_28==NOT_EQUAL_OP||(LA123_28 >= PERIOD && LA123_28 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_28==PLSQL_NON_RESERVED_USING||LA123_28==PLUS_SIGN||LA123_28==SOLIDUS||LA123_28==SQL92_RESERVED_ALL||(LA123_28 >= SQL92_RESERVED_AND && LA123_28 <= SQL92_RESERVED_ANY)||LA123_28==SQL92_RESERVED_CASE||LA123_28==SQL92_RESERVED_DATE||LA123_28==SQL92_RESERVED_DEFAULT||LA123_28==SQL92_RESERVED_DISTINCT||(LA123_28 >= SQL92_RESERVED_EXISTS && LA123_28 <= SQL92_RESERVED_FALSE)||LA123_28==SQL92_RESERVED_IS||(LA123_28 >= SQL92_RESERVED_NULL && LA123_28 <= SQL92_RESERVED_OF)||LA123_28==SQL92_RESERVED_OR||LA123_28==SQL92_RESERVED_PRIOR||(LA123_28 >= SQL92_RESERVED_TO && LA123_28 <= SQL92_RESERVED_TRUE)||(LA123_28 >= UNSIGNED_INTEGER && LA123_28 <= VERTICAL_BAR)) ) {
                                                                        alt123=1;
                                                                    }
                                                                    else if ( (LA123_28==REGULAR_ID) ) {
                                                                        int LA123_30 = input.LA(13);

                                                                        if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                                                                            alt123=1;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                }
                                                break;
                                        }

                                        }
                                        break;
                                    case SQL92_RESERVED_NOT:
                                        {
                                        int LA123_12 = input.LA(6);

                                        if ( (LA123_12==SQL92_RESERVED_BETWEEN||LA123_12==SQL92_RESERVED_IN||LA123_12==SQL92_RESERVED_LIKE) ) {
                                            alt123=1;
                                        }
                                        else if ( (LA123_12==REGULAR_ID) ) {
                                            int LA123_16 = input.LA(7);

                                            if ( (LA123_16==APPROXIMATE_NUM_LIT||LA123_16==BINDVAR||(LA123_16 >= CHAR_STRING && LA123_16 <= COLON)||LA123_16==DELIMITED_ID||LA123_16==EXACT_NUM_LIT||LA123_16==INTRODUCER||LA123_16==LEFT_PAREN||(LA123_16 >= MINUS_SIGN && LA123_16 <= NATIONAL_CHAR_STRING_LIT)||LA123_16==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_16==PLUS_SIGN||LA123_16==SQL92_RESERVED_ALL||LA123_16==SQL92_RESERVED_ANY||LA123_16==SQL92_RESERVED_CASE||LA123_16==SQL92_RESERVED_DATE||LA123_16==SQL92_RESERVED_DEFAULT||LA123_16==SQL92_RESERVED_DISTINCT||(LA123_16 >= SQL92_RESERVED_EXISTS && LA123_16 <= SQL92_RESERVED_FALSE)||LA123_16==SQL92_RESERVED_NULL||LA123_16==SQL92_RESERVED_PRIOR||LA123_16==SQL92_RESERVED_TRUE||LA123_16==UNSIGNED_INTEGER) ) {
                                                alt123=1;
                                            }
                                            else if ( (LA123_16==REGULAR_ID) ) {
                                                int LA123_20 = input.LA(8);

                                                if ( (LA123_20==APPROXIMATE_NUM_LIT||LA123_20==ASTERISK||LA123_20==BINDVAR||(LA123_20 >= CARRET_OPERATOR_PART && LA123_20 <= COLON)||(LA123_20 >= CONCATENATION_OP && LA123_20 <= DELIMITED_ID)||(LA123_20 >= EQUALS_OP && LA123_20 <= EXCLAMATION_OPERATOR_PART)||(LA123_20 >= GREATER_THAN_OP && LA123_20 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_20 >= INTRODUCER && LA123_20 <= NATIONAL_CHAR_STRING_LIT)||LA123_20==NOT_EQUAL_OP||(LA123_20 >= PERIOD && LA123_20 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_20==PLUS_SIGN||LA123_20==SOLIDUS||LA123_20==SQL92_RESERVED_ALL||(LA123_20 >= SQL92_RESERVED_AND && LA123_20 <= SQL92_RESERVED_ANY)||LA123_20==SQL92_RESERVED_CASE||LA123_20==SQL92_RESERVED_DATE||LA123_20==SQL92_RESERVED_DEFAULT||LA123_20==SQL92_RESERVED_DISTINCT||(LA123_20 >= SQL92_RESERVED_EXISTS && LA123_20 <= SQL92_RESERVED_FALSE)||LA123_20==SQL92_RESERVED_IS||LA123_20==SQL92_RESERVED_NULL||LA123_20==SQL92_RESERVED_OR||LA123_20==SQL92_RESERVED_PRIOR||LA123_20==SQL92_RESERVED_TRUE||(LA123_20 >= UNSIGNED_INTEGER && LA123_20 <= VERTICAL_BAR)) ) {
                                                    alt123=1;
                                                }
                                                else if ( (LA123_20==REGULAR_ID) ) {
                                                    int LA123_24 = input.LA(9);

                                                    if ( (LA123_24==APPROXIMATE_NUM_LIT||LA123_24==ASTERISK||LA123_24==BINDVAR||(LA123_24 >= CARRET_OPERATOR_PART && LA123_24 <= COLON)||(LA123_24 >= CONCATENATION_OP && LA123_24 <= DELIMITED_ID)||(LA123_24 >= EQUALS_OP && LA123_24 <= EXCLAMATION_OPERATOR_PART)||(LA123_24 >= GREATER_THAN_OP && LA123_24 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_24 >= INTRODUCER && LA123_24 <= NATIONAL_CHAR_STRING_LIT)||LA123_24==NOT_EQUAL_OP||(LA123_24 >= PERIOD && LA123_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_24==PLUS_SIGN||LA123_24==SOLIDUS||LA123_24==SQL92_RESERVED_ALL||(LA123_24 >= SQL92_RESERVED_AND && LA123_24 <= SQL92_RESERVED_ANY)||LA123_24==SQL92_RESERVED_CASE||LA123_24==SQL92_RESERVED_DATE||LA123_24==SQL92_RESERVED_DEFAULT||LA123_24==SQL92_RESERVED_DISTINCT||(LA123_24 >= SQL92_RESERVED_EXISTS && LA123_24 <= SQL92_RESERVED_FALSE)||LA123_24==SQL92_RESERVED_IS||(LA123_24 >= SQL92_RESERVED_NULL && LA123_24 <= SQL92_RESERVED_OF)||LA123_24==SQL92_RESERVED_OR||LA123_24==SQL92_RESERVED_PRIOR||(LA123_24 >= SQL92_RESERVED_TO && LA123_24 <= SQL92_RESERVED_TRUE)||(LA123_24 >= UNSIGNED_INTEGER && LA123_24 <= VERTICAL_BAR)) ) {
                                                        alt123=1;
                                                    }
                                                    else if ( (LA123_24==REGULAR_ID) ) {
                                                        int LA123_26 = input.LA(10);

                                                        if ( (LA123_26==APPROXIMATE_NUM_LIT||LA123_26==ASTERISK||LA123_26==BINDVAR||(LA123_26 >= CARRET_OPERATOR_PART && LA123_26 <= COLON)||(LA123_26 >= CONCATENATION_OP && LA123_26 <= DELIMITED_ID)||(LA123_26 >= EQUALS_OP && LA123_26 <= EXCLAMATION_OPERATOR_PART)||(LA123_26 >= GREATER_THAN_OP && LA123_26 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_26 >= INTRODUCER && LA123_26 <= NATIONAL_CHAR_STRING_LIT)||LA123_26==NOT_EQUAL_OP||(LA123_26 >= PERIOD && LA123_26 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_26==PLSQL_NON_RESERVED_USING||LA123_26==PLUS_SIGN||LA123_26==SOLIDUS||LA123_26==SQL92_RESERVED_ALL||(LA123_26 >= SQL92_RESERVED_AND && LA123_26 <= SQL92_RESERVED_ANY)||LA123_26==SQL92_RESERVED_CASE||LA123_26==SQL92_RESERVED_DATE||LA123_26==SQL92_RESERVED_DEFAULT||LA123_26==SQL92_RESERVED_DISTINCT||(LA123_26 >= SQL92_RESERVED_EXISTS && LA123_26 <= SQL92_RESERVED_FALSE)||LA123_26==SQL92_RESERVED_IS||(LA123_26 >= SQL92_RESERVED_NULL && LA123_26 <= SQL92_RESERVED_OF)||LA123_26==SQL92_RESERVED_OR||LA123_26==SQL92_RESERVED_PRIOR||(LA123_26 >= SQL92_RESERVED_TO && LA123_26 <= SQL92_RESERVED_TRUE)||(LA123_26 >= UNSIGNED_INTEGER && LA123_26 <= VERTICAL_BAR)) ) {
                                                            alt123=1;
                                                        }
                                                        else if ( (LA123_26==REGULAR_ID) ) {
                                                            int LA123_28 = input.LA(11);

                                                            if ( (LA123_28==APPROXIMATE_NUM_LIT||LA123_28==ASTERISK||LA123_28==BINDVAR||(LA123_28 >= CARRET_OPERATOR_PART && LA123_28 <= COLON)||(LA123_28 >= CONCATENATION_OP && LA123_28 <= DELIMITED_ID)||(LA123_28 >= EQUALS_OP && LA123_28 <= EXCLAMATION_OPERATOR_PART)||(LA123_28 >= GREATER_THAN_OP && LA123_28 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_28 >= INTRODUCER && LA123_28 <= NATIONAL_CHAR_STRING_LIT)||LA123_28==NOT_EQUAL_OP||(LA123_28 >= PERIOD && LA123_28 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_28==PLSQL_NON_RESERVED_USING||LA123_28==PLUS_SIGN||LA123_28==SOLIDUS||LA123_28==SQL92_RESERVED_ALL||(LA123_28 >= SQL92_RESERVED_AND && LA123_28 <= SQL92_RESERVED_ANY)||LA123_28==SQL92_RESERVED_CASE||LA123_28==SQL92_RESERVED_DATE||LA123_28==SQL92_RESERVED_DEFAULT||LA123_28==SQL92_RESERVED_DISTINCT||(LA123_28 >= SQL92_RESERVED_EXISTS && LA123_28 <= SQL92_RESERVED_FALSE)||LA123_28==SQL92_RESERVED_IS||(LA123_28 >= SQL92_RESERVED_NULL && LA123_28 <= SQL92_RESERVED_OF)||LA123_28==SQL92_RESERVED_OR||LA123_28==SQL92_RESERVED_PRIOR||(LA123_28 >= SQL92_RESERVED_TO && LA123_28 <= SQL92_RESERVED_TRUE)||(LA123_28 >= UNSIGNED_INTEGER && LA123_28 <= VERTICAL_BAR)) ) {
                                                                alt123=1;
                                                            }
                                                            else if ( (LA123_28==REGULAR_ID) ) {
                                                                int LA123_30 = input.LA(12);

                                                                if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                                                                    alt123=1;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        }
                                        break;
                                }

                            }
                            }
                            break;
                        case REGULAR_ID:
                            {
                            switch ( input.LA(4) ) {
                                case APPROXIMATE_NUM_LIT:
                                case ASTERISK:
                                case BINDVAR:
                                case CARRET_OPERATOR_PART:
                                case CHAR_STRING:
                                case CHAR_STRING_PERL:
                                case COLON:
                                case CONCATENATION_OP:
                                case DELIMITED_ID:
                                case EQUALS_OP:
                                case EXACT_NUM_LIT:
                                case EXCLAMATION_OPERATOR_PART:
                                case GREATER_THAN_OP:
                                case GREATER_THAN_OR_EQUALS_OP:
                                case INTRODUCER:
                                case LEFT_BRACKET:
                                case LEFT_PAREN:
                                case LESS_THAN_OP:
                                case LESS_THAN_OR_EQUALS_OP:
                                case MINUS_SIGN:
                                case NATIONAL_CHAR_STRING_LIT:
                                case NOT_EQUAL_OP:
                                case PERIOD:
                                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                                case PLUS_SIGN:
                                case SOLIDUS:
                                case SQL92_RESERVED_ALL:
                                case SQL92_RESERVED_AND:
                                case SQL92_RESERVED_ANY:
                                case SQL92_RESERVED_BETWEEN:
                                case SQL92_RESERVED_CASE:
                                case SQL92_RESERVED_DATE:
                                case SQL92_RESERVED_DEFAULT:
                                case SQL92_RESERVED_DISTINCT:
                                case SQL92_RESERVED_EXISTS:
                                case SQL92_RESERVED_FALSE:
                                case SQL92_RESERVED_IN:
                                case SQL92_RESERVED_IS:
                                case SQL92_RESERVED_LIKE:
                                case SQL92_RESERVED_NULL:
                                case SQL92_RESERVED_OR:
                                case SQL92_RESERVED_PRIOR:
                                case SQL92_RESERVED_TRUE:
                                case UNSIGNED_INTEGER:
                                case VERTICAL_BAR:
                                    {
                                    alt123=1;
                                    }
                                    break;
                                case REGULAR_ID:
                                    {
                                    switch ( input.LA(5) ) {
                                        case APPROXIMATE_NUM_LIT:
                                        case ASTERISK:
                                        case BINDVAR:
                                        case CARRET_OPERATOR_PART:
                                        case CHAR_STRING:
                                        case CHAR_STRING_PERL:
                                        case COLON:
                                        case CONCATENATION_OP:
                                        case DELIMITED_ID:
                                        case EQUALS_OP:
                                        case EXACT_NUM_LIT:
                                        case EXCLAMATION_OPERATOR_PART:
                                        case GREATER_THAN_OP:
                                        case GREATER_THAN_OR_EQUALS_OP:
                                        case INTRODUCER:
                                        case LEFT_BRACKET:
                                        case LEFT_PAREN:
                                        case LESS_THAN_OP:
                                        case LESS_THAN_OR_EQUALS_OP:
                                        case MINUS_SIGN:
                                        case NATIONAL_CHAR_STRING_LIT:
                                        case NOT_EQUAL_OP:
                                        case PERIOD:
                                        case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                                        case PLUS_SIGN:
                                        case SOLIDUS:
                                        case SQL92_RESERVED_ALL:
                                        case SQL92_RESERVED_AND:
                                        case SQL92_RESERVED_ANY:
                                        case SQL92_RESERVED_BETWEEN:
                                        case SQL92_RESERVED_CASE:
                                        case SQL92_RESERVED_DATE:
                                        case SQL92_RESERVED_DEFAULT:
                                        case SQL92_RESERVED_DISTINCT:
                                        case SQL92_RESERVED_EXISTS:
                                        case SQL92_RESERVED_FALSE:
                                        case SQL92_RESERVED_IN:
                                        case SQL92_RESERVED_IS:
                                        case SQL92_RESERVED_LIKE:
                                        case SQL92_RESERVED_NULL:
                                        case SQL92_RESERVED_OF:
                                        case SQL92_RESERVED_OR:
                                        case SQL92_RESERVED_PRIOR:
                                        case SQL92_RESERVED_TO:
                                        case SQL92_RESERVED_TRUE:
                                        case UNSIGNED_INTEGER:
                                        case VERTICAL_BAR:
                                            {
                                            alt123=1;
                                            }
                                            break;
                                        case REGULAR_ID:
                                            {
                                            switch ( input.LA(6) ) {
                                                case APPROXIMATE_NUM_LIT:
                                                case ASTERISK:
                                                case BINDVAR:
                                                case CARRET_OPERATOR_PART:
                                                case CHAR_STRING:
                                                case CHAR_STRING_PERL:
                                                case COLON:
                                                case CONCATENATION_OP:
                                                case DELIMITED_ID:
                                                case EQUALS_OP:
                                                case EXACT_NUM_LIT:
                                                case EXCLAMATION_OPERATOR_PART:
                                                case GREATER_THAN_OP:
                                                case GREATER_THAN_OR_EQUALS_OP:
                                                case INTRODUCER:
                                                case LEFT_BRACKET:
                                                case LEFT_PAREN:
                                                case LESS_THAN_OP:
                                                case LESS_THAN_OR_EQUALS_OP:
                                                case MINUS_SIGN:
                                                case NATIONAL_CHAR_STRING_LIT:
                                                case NOT_EQUAL_OP:
                                                case PERIOD:
                                                case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                                                case PLSQL_NON_RESERVED_USING:
                                                case PLUS_SIGN:
                                                case SOLIDUS:
                                                case SQL92_RESERVED_ALL:
                                                case SQL92_RESERVED_AND:
                                                case SQL92_RESERVED_ANY:
                                                case SQL92_RESERVED_BETWEEN:
                                                case SQL92_RESERVED_CASE:
                                                case SQL92_RESERVED_DATE:
                                                case SQL92_RESERVED_DEFAULT:
                                                case SQL92_RESERVED_DISTINCT:
                                                case SQL92_RESERVED_EXISTS:
                                                case SQL92_RESERVED_FALSE:
                                                case SQL92_RESERVED_IN:
                                                case SQL92_RESERVED_IS:
                                                case SQL92_RESERVED_LIKE:
                                                case SQL92_RESERVED_NULL:
                                                case SQL92_RESERVED_OF:
                                                case SQL92_RESERVED_OR:
                                                case SQL92_RESERVED_PRIOR:
                                                case SQL92_RESERVED_TO:
                                                case SQL92_RESERVED_TRUE:
                                                case UNSIGNED_INTEGER:
                                                case VERTICAL_BAR:
                                                    {
                                                    alt123=1;
                                                    }
                                                    break;
                                                case REGULAR_ID:
                                                    {
                                                    switch ( input.LA(7) ) {
                                                        case APPROXIMATE_NUM_LIT:
                                                        case ASTERISK:
                                                        case BINDVAR:
                                                        case CARRET_OPERATOR_PART:
                                                        case CHAR_STRING:
                                                        case CHAR_STRING_PERL:
                                                        case COLON:
                                                        case CONCATENATION_OP:
                                                        case DELIMITED_ID:
                                                        case EQUALS_OP:
                                                        case EXACT_NUM_LIT:
                                                        case EXCLAMATION_OPERATOR_PART:
                                                        case GREATER_THAN_OP:
                                                        case GREATER_THAN_OR_EQUALS_OP:
                                                        case INTRODUCER:
                                                        case LEFT_BRACKET:
                                                        case LEFT_PAREN:
                                                        case LESS_THAN_OP:
                                                        case LESS_THAN_OR_EQUALS_OP:
                                                        case MINUS_SIGN:
                                                        case NATIONAL_CHAR_STRING_LIT:
                                                        case NOT_EQUAL_OP:
                                                        case PERIOD:
                                                        case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                                                        case PLSQL_NON_RESERVED_USING:
                                                        case PLUS_SIGN:
                                                        case SOLIDUS:
                                                        case SQL92_RESERVED_ALL:
                                                        case SQL92_RESERVED_AND:
                                                        case SQL92_RESERVED_ANY:
                                                        case SQL92_RESERVED_BETWEEN:
                                                        case SQL92_RESERVED_CASE:
                                                        case SQL92_RESERVED_DATE:
                                                        case SQL92_RESERVED_DEFAULT:
                                                        case SQL92_RESERVED_DISTINCT:
                                                        case SQL92_RESERVED_EXISTS:
                                                        case SQL92_RESERVED_FALSE:
                                                        case SQL92_RESERVED_IN:
                                                        case SQL92_RESERVED_IS:
                                                        case SQL92_RESERVED_LIKE:
                                                        case SQL92_RESERVED_NULL:
                                                        case SQL92_RESERVED_OF:
                                                        case SQL92_RESERVED_OR:
                                                        case SQL92_RESERVED_PRIOR:
                                                        case SQL92_RESERVED_TO:
                                                        case SQL92_RESERVED_TRUE:
                                                        case UNSIGNED_INTEGER:
                                                        case VERTICAL_BAR:
                                                            {
                                                            alt123=1;
                                                            }
                                                            break;
                                                        case REGULAR_ID:
                                                            {
                                                            int LA123_21 = input.LA(8);

                                                            if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                                                                alt123=1;
                                                            }
                                                            }
                                                            break;
                                                        case SQL92_RESERVED_NOT:
                                                            {
                                                            int LA123_10 = input.LA(8);

                                                            if ( (LA123_10==SQL92_RESERVED_BETWEEN||LA123_10==SQL92_RESERVED_IN||LA123_10==SQL92_RESERVED_LIKE) ) {
                                                                alt123=1;
                                                            }
                                                            else if ( (LA123_10==REGULAR_ID) ) {
                                                                int LA123_14 = input.LA(9);

                                                                if ( (LA123_14==APPROXIMATE_NUM_LIT||LA123_14==BINDVAR||(LA123_14 >= CHAR_STRING && LA123_14 <= COLON)||LA123_14==DELIMITED_ID||LA123_14==EXACT_NUM_LIT||LA123_14==INTRODUCER||LA123_14==LEFT_PAREN||(LA123_14 >= MINUS_SIGN && LA123_14 <= NATIONAL_CHAR_STRING_LIT)||LA123_14==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_14==PLUS_SIGN||LA123_14==SQL92_RESERVED_ALL||LA123_14==SQL92_RESERVED_ANY||LA123_14==SQL92_RESERVED_CASE||LA123_14==SQL92_RESERVED_DATE||LA123_14==SQL92_RESERVED_DEFAULT||LA123_14==SQL92_RESERVED_DISTINCT||(LA123_14 >= SQL92_RESERVED_EXISTS && LA123_14 <= SQL92_RESERVED_FALSE)||LA123_14==SQL92_RESERVED_NULL||LA123_14==SQL92_RESERVED_PRIOR||LA123_14==SQL92_RESERVED_TRUE||LA123_14==UNSIGNED_INTEGER) ) {
                                                                    alt123=1;
                                                                }
                                                                else if ( (LA123_14==REGULAR_ID) ) {
                                                                    int LA123_18 = input.LA(10);

                                                                    if ( (LA123_18==APPROXIMATE_NUM_LIT||LA123_18==ASTERISK||LA123_18==BINDVAR||(LA123_18 >= CARRET_OPERATOR_PART && LA123_18 <= COLON)||(LA123_18 >= CONCATENATION_OP && LA123_18 <= DELIMITED_ID)||(LA123_18 >= EQUALS_OP && LA123_18 <= EXCLAMATION_OPERATOR_PART)||(LA123_18 >= GREATER_THAN_OP && LA123_18 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_18 >= INTRODUCER && LA123_18 <= NATIONAL_CHAR_STRING_LIT)||LA123_18==NOT_EQUAL_OP||(LA123_18 >= PERIOD && LA123_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_18==PLUS_SIGN||LA123_18==SOLIDUS||LA123_18==SQL92_RESERVED_ALL||(LA123_18 >= SQL92_RESERVED_AND && LA123_18 <= SQL92_RESERVED_ANY)||LA123_18==SQL92_RESERVED_CASE||LA123_18==SQL92_RESERVED_DATE||LA123_18==SQL92_RESERVED_DEFAULT||LA123_18==SQL92_RESERVED_DISTINCT||(LA123_18 >= SQL92_RESERVED_EXISTS && LA123_18 <= SQL92_RESERVED_FALSE)||LA123_18==SQL92_RESERVED_IS||LA123_18==SQL92_RESERVED_NULL||LA123_18==SQL92_RESERVED_OR||LA123_18==SQL92_RESERVED_PRIOR||LA123_18==SQL92_RESERVED_TRUE||(LA123_18 >= UNSIGNED_INTEGER && LA123_18 <= VERTICAL_BAR)) ) {
                                                                        alt123=1;
                                                                    }
                                                                    else if ( (LA123_18==REGULAR_ID) ) {
                                                                        int LA123_22 = input.LA(11);

                                                                        if ( (LA123_22==APPROXIMATE_NUM_LIT||LA123_22==ASTERISK||LA123_22==BINDVAR||(LA123_22 >= CARRET_OPERATOR_PART && LA123_22 <= COLON)||(LA123_22 >= CONCATENATION_OP && LA123_22 <= DELIMITED_ID)||(LA123_22 >= EQUALS_OP && LA123_22 <= EXCLAMATION_OPERATOR_PART)||(LA123_22 >= GREATER_THAN_OP && LA123_22 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_22 >= INTRODUCER && LA123_22 <= NATIONAL_CHAR_STRING_LIT)||LA123_22==NOT_EQUAL_OP||(LA123_22 >= PERIOD && LA123_22 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_22==PLUS_SIGN||LA123_22==SOLIDUS||LA123_22==SQL92_RESERVED_ALL||(LA123_22 >= SQL92_RESERVED_AND && LA123_22 <= SQL92_RESERVED_ANY)||LA123_22==SQL92_RESERVED_CASE||LA123_22==SQL92_RESERVED_DATE||LA123_22==SQL92_RESERVED_DEFAULT||LA123_22==SQL92_RESERVED_DISTINCT||(LA123_22 >= SQL92_RESERVED_EXISTS && LA123_22 <= SQL92_RESERVED_FALSE)||LA123_22==SQL92_RESERVED_IS||(LA123_22 >= SQL92_RESERVED_NULL && LA123_22 <= SQL92_RESERVED_OF)||LA123_22==SQL92_RESERVED_OR||LA123_22==SQL92_RESERVED_PRIOR||(LA123_22 >= SQL92_RESERVED_TO && LA123_22 <= SQL92_RESERVED_TRUE)||(LA123_22 >= UNSIGNED_INTEGER && LA123_22 <= VERTICAL_BAR)) ) {
                                                                            alt123=1;
                                                                        }
                                                                        else if ( (LA123_22==REGULAR_ID) ) {
                                                                            int LA123_25 = input.LA(12);

                                                                            if ( (LA123_25==APPROXIMATE_NUM_LIT||LA123_25==ASTERISK||LA123_25==BINDVAR||(LA123_25 >= CARRET_OPERATOR_PART && LA123_25 <= COLON)||(LA123_25 >= CONCATENATION_OP && LA123_25 <= DELIMITED_ID)||(LA123_25 >= EQUALS_OP && LA123_25 <= EXCLAMATION_OPERATOR_PART)||(LA123_25 >= GREATER_THAN_OP && LA123_25 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_25 >= INTRODUCER && LA123_25 <= NATIONAL_CHAR_STRING_LIT)||LA123_25==NOT_EQUAL_OP||(LA123_25 >= PERIOD && LA123_25 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_25==PLSQL_NON_RESERVED_USING||LA123_25==PLUS_SIGN||LA123_25==SOLIDUS||LA123_25==SQL92_RESERVED_ALL||(LA123_25 >= SQL92_RESERVED_AND && LA123_25 <= SQL92_RESERVED_ANY)||LA123_25==SQL92_RESERVED_CASE||LA123_25==SQL92_RESERVED_DATE||LA123_25==SQL92_RESERVED_DEFAULT||LA123_25==SQL92_RESERVED_DISTINCT||(LA123_25 >= SQL92_RESERVED_EXISTS && LA123_25 <= SQL92_RESERVED_FALSE)||LA123_25==SQL92_RESERVED_IS||(LA123_25 >= SQL92_RESERVED_NULL && LA123_25 <= SQL92_RESERVED_OF)||LA123_25==SQL92_RESERVED_OR||LA123_25==SQL92_RESERVED_PRIOR||(LA123_25 >= SQL92_RESERVED_TO && LA123_25 <= SQL92_RESERVED_TRUE)||(LA123_25 >= UNSIGNED_INTEGER && LA123_25 <= VERTICAL_BAR)) ) {
                                                                                alt123=1;
                                                                            }
                                                                            else if ( (LA123_25==REGULAR_ID) ) {
                                                                                int LA123_27 = input.LA(13);

                                                                                if ( (LA123_27==APPROXIMATE_NUM_LIT||LA123_27==ASTERISK||LA123_27==BINDVAR||(LA123_27 >= CARRET_OPERATOR_PART && LA123_27 <= COLON)||(LA123_27 >= CONCATENATION_OP && LA123_27 <= DELIMITED_ID)||(LA123_27 >= EQUALS_OP && LA123_27 <= EXCLAMATION_OPERATOR_PART)||(LA123_27 >= GREATER_THAN_OP && LA123_27 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_27 >= INTRODUCER && LA123_27 <= NATIONAL_CHAR_STRING_LIT)||LA123_27==NOT_EQUAL_OP||(LA123_27 >= PERIOD && LA123_27 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_27==PLSQL_NON_RESERVED_USING||LA123_27==PLUS_SIGN||LA123_27==SOLIDUS||LA123_27==SQL92_RESERVED_ALL||(LA123_27 >= SQL92_RESERVED_AND && LA123_27 <= SQL92_RESERVED_ANY)||LA123_27==SQL92_RESERVED_CASE||LA123_27==SQL92_RESERVED_DATE||LA123_27==SQL92_RESERVED_DEFAULT||LA123_27==SQL92_RESERVED_DISTINCT||(LA123_27 >= SQL92_RESERVED_EXISTS && LA123_27 <= SQL92_RESERVED_FALSE)||LA123_27==SQL92_RESERVED_IS||(LA123_27 >= SQL92_RESERVED_NULL && LA123_27 <= SQL92_RESERVED_OF)||LA123_27==SQL92_RESERVED_OR||LA123_27==SQL92_RESERVED_PRIOR||(LA123_27 >= SQL92_RESERVED_TO && LA123_27 <= SQL92_RESERVED_TRUE)||(LA123_27 >= UNSIGNED_INTEGER && LA123_27 <= VERTICAL_BAR)) ) {
                                                                                    alt123=1;
                                                                                }
                                                                                else if ( (LA123_27==REGULAR_ID) ) {
                                                                                    int LA123_29 = input.LA(14);

                                                                                    if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                                                                                        alt123=1;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                                case SQL92_RESERVED_NOT:
                                                    {
                                                    int LA123_10 = input.LA(7);

                                                    if ( (LA123_10==SQL92_RESERVED_BETWEEN||LA123_10==SQL92_RESERVED_IN||LA123_10==SQL92_RESERVED_LIKE) ) {
                                                        alt123=1;
                                                    }
                                                    else if ( (LA123_10==REGULAR_ID) ) {
                                                        int LA123_14 = input.LA(8);

                                                        if ( (LA123_14==APPROXIMATE_NUM_LIT||LA123_14==BINDVAR||(LA123_14 >= CHAR_STRING && LA123_14 <= COLON)||LA123_14==DELIMITED_ID||LA123_14==EXACT_NUM_LIT||LA123_14==INTRODUCER||LA123_14==LEFT_PAREN||(LA123_14 >= MINUS_SIGN && LA123_14 <= NATIONAL_CHAR_STRING_LIT)||LA123_14==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_14==PLUS_SIGN||LA123_14==SQL92_RESERVED_ALL||LA123_14==SQL92_RESERVED_ANY||LA123_14==SQL92_RESERVED_CASE||LA123_14==SQL92_RESERVED_DATE||LA123_14==SQL92_RESERVED_DEFAULT||LA123_14==SQL92_RESERVED_DISTINCT||(LA123_14 >= SQL92_RESERVED_EXISTS && LA123_14 <= SQL92_RESERVED_FALSE)||LA123_14==SQL92_RESERVED_NULL||LA123_14==SQL92_RESERVED_PRIOR||LA123_14==SQL92_RESERVED_TRUE||LA123_14==UNSIGNED_INTEGER) ) {
                                                            alt123=1;
                                                        }
                                                        else if ( (LA123_14==REGULAR_ID) ) {
                                                            int LA123_18 = input.LA(9);

                                                            if ( (LA123_18==APPROXIMATE_NUM_LIT||LA123_18==ASTERISK||LA123_18==BINDVAR||(LA123_18 >= CARRET_OPERATOR_PART && LA123_18 <= COLON)||(LA123_18 >= CONCATENATION_OP && LA123_18 <= DELIMITED_ID)||(LA123_18 >= EQUALS_OP && LA123_18 <= EXCLAMATION_OPERATOR_PART)||(LA123_18 >= GREATER_THAN_OP && LA123_18 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_18 >= INTRODUCER && LA123_18 <= NATIONAL_CHAR_STRING_LIT)||LA123_18==NOT_EQUAL_OP||(LA123_18 >= PERIOD && LA123_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_18==PLUS_SIGN||LA123_18==SOLIDUS||LA123_18==SQL92_RESERVED_ALL||(LA123_18 >= SQL92_RESERVED_AND && LA123_18 <= SQL92_RESERVED_ANY)||LA123_18==SQL92_RESERVED_CASE||LA123_18==SQL92_RESERVED_DATE||LA123_18==SQL92_RESERVED_DEFAULT||LA123_18==SQL92_RESERVED_DISTINCT||(LA123_18 >= SQL92_RESERVED_EXISTS && LA123_18 <= SQL92_RESERVED_FALSE)||LA123_18==SQL92_RESERVED_IS||LA123_18==SQL92_RESERVED_NULL||LA123_18==SQL92_RESERVED_OR||LA123_18==SQL92_RESERVED_PRIOR||LA123_18==SQL92_RESERVED_TRUE||(LA123_18 >= UNSIGNED_INTEGER && LA123_18 <= VERTICAL_BAR)) ) {
                                                                alt123=1;
                                                            }
                                                            else if ( (LA123_18==REGULAR_ID) ) {
                                                                int LA123_22 = input.LA(10);

                                                                if ( (LA123_22==APPROXIMATE_NUM_LIT||LA123_22==ASTERISK||LA123_22==BINDVAR||(LA123_22 >= CARRET_OPERATOR_PART && LA123_22 <= COLON)||(LA123_22 >= CONCATENATION_OP && LA123_22 <= DELIMITED_ID)||(LA123_22 >= EQUALS_OP && LA123_22 <= EXCLAMATION_OPERATOR_PART)||(LA123_22 >= GREATER_THAN_OP && LA123_22 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_22 >= INTRODUCER && LA123_22 <= NATIONAL_CHAR_STRING_LIT)||LA123_22==NOT_EQUAL_OP||(LA123_22 >= PERIOD && LA123_22 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_22==PLUS_SIGN||LA123_22==SOLIDUS||LA123_22==SQL92_RESERVED_ALL||(LA123_22 >= SQL92_RESERVED_AND && LA123_22 <= SQL92_RESERVED_ANY)||LA123_22==SQL92_RESERVED_CASE||LA123_22==SQL92_RESERVED_DATE||LA123_22==SQL92_RESERVED_DEFAULT||LA123_22==SQL92_RESERVED_DISTINCT||(LA123_22 >= SQL92_RESERVED_EXISTS && LA123_22 <= SQL92_RESERVED_FALSE)||LA123_22==SQL92_RESERVED_IS||(LA123_22 >= SQL92_RESERVED_NULL && LA123_22 <= SQL92_RESERVED_OF)||LA123_22==SQL92_RESERVED_OR||LA123_22==SQL92_RESERVED_PRIOR||(LA123_22 >= SQL92_RESERVED_TO && LA123_22 <= SQL92_RESERVED_TRUE)||(LA123_22 >= UNSIGNED_INTEGER && LA123_22 <= VERTICAL_BAR)) ) {
                                                                    alt123=1;
                                                                }
                                                                else if ( (LA123_22==REGULAR_ID) ) {
                                                                    int LA123_25 = input.LA(11);

                                                                    if ( (LA123_25==APPROXIMATE_NUM_LIT||LA123_25==ASTERISK||LA123_25==BINDVAR||(LA123_25 >= CARRET_OPERATOR_PART && LA123_25 <= COLON)||(LA123_25 >= CONCATENATION_OP && LA123_25 <= DELIMITED_ID)||(LA123_25 >= EQUALS_OP && LA123_25 <= EXCLAMATION_OPERATOR_PART)||(LA123_25 >= GREATER_THAN_OP && LA123_25 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_25 >= INTRODUCER && LA123_25 <= NATIONAL_CHAR_STRING_LIT)||LA123_25==NOT_EQUAL_OP||(LA123_25 >= PERIOD && LA123_25 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_25==PLSQL_NON_RESERVED_USING||LA123_25==PLUS_SIGN||LA123_25==SOLIDUS||LA123_25==SQL92_RESERVED_ALL||(LA123_25 >= SQL92_RESERVED_AND && LA123_25 <= SQL92_RESERVED_ANY)||LA123_25==SQL92_RESERVED_CASE||LA123_25==SQL92_RESERVED_DATE||LA123_25==SQL92_RESERVED_DEFAULT||LA123_25==SQL92_RESERVED_DISTINCT||(LA123_25 >= SQL92_RESERVED_EXISTS && LA123_25 <= SQL92_RESERVED_FALSE)||LA123_25==SQL92_RESERVED_IS||(LA123_25 >= SQL92_RESERVED_NULL && LA123_25 <= SQL92_RESERVED_OF)||LA123_25==SQL92_RESERVED_OR||LA123_25==SQL92_RESERVED_PRIOR||(LA123_25 >= SQL92_RESERVED_TO && LA123_25 <= SQL92_RESERVED_TRUE)||(LA123_25 >= UNSIGNED_INTEGER && LA123_25 <= VERTICAL_BAR)) ) {
                                                                        alt123=1;
                                                                    }
                                                                    else if ( (LA123_25==REGULAR_ID) ) {
                                                                        int LA123_27 = input.LA(12);

                                                                        if ( (LA123_27==APPROXIMATE_NUM_LIT||LA123_27==ASTERISK||LA123_27==BINDVAR||(LA123_27 >= CARRET_OPERATOR_PART && LA123_27 <= COLON)||(LA123_27 >= CONCATENATION_OP && LA123_27 <= DELIMITED_ID)||(LA123_27 >= EQUALS_OP && LA123_27 <= EXCLAMATION_OPERATOR_PART)||(LA123_27 >= GREATER_THAN_OP && LA123_27 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_27 >= INTRODUCER && LA123_27 <= NATIONAL_CHAR_STRING_LIT)||LA123_27==NOT_EQUAL_OP||(LA123_27 >= PERIOD && LA123_27 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_27==PLSQL_NON_RESERVED_USING||LA123_27==PLUS_SIGN||LA123_27==SOLIDUS||LA123_27==SQL92_RESERVED_ALL||(LA123_27 >= SQL92_RESERVED_AND && LA123_27 <= SQL92_RESERVED_ANY)||LA123_27==SQL92_RESERVED_CASE||LA123_27==SQL92_RESERVED_DATE||LA123_27==SQL92_RESERVED_DEFAULT||LA123_27==SQL92_RESERVED_DISTINCT||(LA123_27 >= SQL92_RESERVED_EXISTS && LA123_27 <= SQL92_RESERVED_FALSE)||LA123_27==SQL92_RESERVED_IS||(LA123_27 >= SQL92_RESERVED_NULL && LA123_27 <= SQL92_RESERVED_OF)||LA123_27==SQL92_RESERVED_OR||LA123_27==SQL92_RESERVED_PRIOR||(LA123_27 >= SQL92_RESERVED_TO && LA123_27 <= SQL92_RESERVED_TRUE)||(LA123_27 >= UNSIGNED_INTEGER && LA123_27 <= VERTICAL_BAR)) ) {
                                                                            alt123=1;
                                                                        }
                                                                        else if ( (LA123_27==REGULAR_ID) ) {
                                                                            int LA123_29 = input.LA(13);

                                                                            if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                                                                                alt123=1;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                        case SQL92_RESERVED_NOT:
                                            {
                                            int LA123_10 = input.LA(6);

                                            if ( (LA123_10==SQL92_RESERVED_BETWEEN||LA123_10==SQL92_RESERVED_IN||LA123_10==SQL92_RESERVED_LIKE) ) {
                                                alt123=1;
                                            }
                                            else if ( (LA123_10==REGULAR_ID) ) {
                                                int LA123_14 = input.LA(7);

                                                if ( (LA123_14==APPROXIMATE_NUM_LIT||LA123_14==BINDVAR||(LA123_14 >= CHAR_STRING && LA123_14 <= COLON)||LA123_14==DELIMITED_ID||LA123_14==EXACT_NUM_LIT||LA123_14==INTRODUCER||LA123_14==LEFT_PAREN||(LA123_14 >= MINUS_SIGN && LA123_14 <= NATIONAL_CHAR_STRING_LIT)||LA123_14==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_14==PLUS_SIGN||LA123_14==SQL92_RESERVED_ALL||LA123_14==SQL92_RESERVED_ANY||LA123_14==SQL92_RESERVED_CASE||LA123_14==SQL92_RESERVED_DATE||LA123_14==SQL92_RESERVED_DEFAULT||LA123_14==SQL92_RESERVED_DISTINCT||(LA123_14 >= SQL92_RESERVED_EXISTS && LA123_14 <= SQL92_RESERVED_FALSE)||LA123_14==SQL92_RESERVED_NULL||LA123_14==SQL92_RESERVED_PRIOR||LA123_14==SQL92_RESERVED_TRUE||LA123_14==UNSIGNED_INTEGER) ) {
                                                    alt123=1;
                                                }
                                                else if ( (LA123_14==REGULAR_ID) ) {
                                                    int LA123_18 = input.LA(8);

                                                    if ( (LA123_18==APPROXIMATE_NUM_LIT||LA123_18==ASTERISK||LA123_18==BINDVAR||(LA123_18 >= CARRET_OPERATOR_PART && LA123_18 <= COLON)||(LA123_18 >= CONCATENATION_OP && LA123_18 <= DELIMITED_ID)||(LA123_18 >= EQUALS_OP && LA123_18 <= EXCLAMATION_OPERATOR_PART)||(LA123_18 >= GREATER_THAN_OP && LA123_18 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_18 >= INTRODUCER && LA123_18 <= NATIONAL_CHAR_STRING_LIT)||LA123_18==NOT_EQUAL_OP||(LA123_18 >= PERIOD && LA123_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_18==PLUS_SIGN||LA123_18==SOLIDUS||LA123_18==SQL92_RESERVED_ALL||(LA123_18 >= SQL92_RESERVED_AND && LA123_18 <= SQL92_RESERVED_ANY)||LA123_18==SQL92_RESERVED_CASE||LA123_18==SQL92_RESERVED_DATE||LA123_18==SQL92_RESERVED_DEFAULT||LA123_18==SQL92_RESERVED_DISTINCT||(LA123_18 >= SQL92_RESERVED_EXISTS && LA123_18 <= SQL92_RESERVED_FALSE)||LA123_18==SQL92_RESERVED_IS||LA123_18==SQL92_RESERVED_NULL||LA123_18==SQL92_RESERVED_OR||LA123_18==SQL92_RESERVED_PRIOR||LA123_18==SQL92_RESERVED_TRUE||(LA123_18 >= UNSIGNED_INTEGER && LA123_18 <= VERTICAL_BAR)) ) {
                                                        alt123=1;
                                                    }
                                                    else if ( (LA123_18==REGULAR_ID) ) {
                                                        int LA123_22 = input.LA(9);

                                                        if ( (LA123_22==APPROXIMATE_NUM_LIT||LA123_22==ASTERISK||LA123_22==BINDVAR||(LA123_22 >= CARRET_OPERATOR_PART && LA123_22 <= COLON)||(LA123_22 >= CONCATENATION_OP && LA123_22 <= DELIMITED_ID)||(LA123_22 >= EQUALS_OP && LA123_22 <= EXCLAMATION_OPERATOR_PART)||(LA123_22 >= GREATER_THAN_OP && LA123_22 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_22 >= INTRODUCER && LA123_22 <= NATIONAL_CHAR_STRING_LIT)||LA123_22==NOT_EQUAL_OP||(LA123_22 >= PERIOD && LA123_22 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_22==PLUS_SIGN||LA123_22==SOLIDUS||LA123_22==SQL92_RESERVED_ALL||(LA123_22 >= SQL92_RESERVED_AND && LA123_22 <= SQL92_RESERVED_ANY)||LA123_22==SQL92_RESERVED_CASE||LA123_22==SQL92_RESERVED_DATE||LA123_22==SQL92_RESERVED_DEFAULT||LA123_22==SQL92_RESERVED_DISTINCT||(LA123_22 >= SQL92_RESERVED_EXISTS && LA123_22 <= SQL92_RESERVED_FALSE)||LA123_22==SQL92_RESERVED_IS||(LA123_22 >= SQL92_RESERVED_NULL && LA123_22 <= SQL92_RESERVED_OF)||LA123_22==SQL92_RESERVED_OR||LA123_22==SQL92_RESERVED_PRIOR||(LA123_22 >= SQL92_RESERVED_TO && LA123_22 <= SQL92_RESERVED_TRUE)||(LA123_22 >= UNSIGNED_INTEGER && LA123_22 <= VERTICAL_BAR)) ) {
                                                            alt123=1;
                                                        }
                                                        else if ( (LA123_22==REGULAR_ID) ) {
                                                            int LA123_25 = input.LA(10);

                                                            if ( (LA123_25==APPROXIMATE_NUM_LIT||LA123_25==ASTERISK||LA123_25==BINDVAR||(LA123_25 >= CARRET_OPERATOR_PART && LA123_25 <= COLON)||(LA123_25 >= CONCATENATION_OP && LA123_25 <= DELIMITED_ID)||(LA123_25 >= EQUALS_OP && LA123_25 <= EXCLAMATION_OPERATOR_PART)||(LA123_25 >= GREATER_THAN_OP && LA123_25 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_25 >= INTRODUCER && LA123_25 <= NATIONAL_CHAR_STRING_LIT)||LA123_25==NOT_EQUAL_OP||(LA123_25 >= PERIOD && LA123_25 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_25==PLSQL_NON_RESERVED_USING||LA123_25==PLUS_SIGN||LA123_25==SOLIDUS||LA123_25==SQL92_RESERVED_ALL||(LA123_25 >= SQL92_RESERVED_AND && LA123_25 <= SQL92_RESERVED_ANY)||LA123_25==SQL92_RESERVED_CASE||LA123_25==SQL92_RESERVED_DATE||LA123_25==SQL92_RESERVED_DEFAULT||LA123_25==SQL92_RESERVED_DISTINCT||(LA123_25 >= SQL92_RESERVED_EXISTS && LA123_25 <= SQL92_RESERVED_FALSE)||LA123_25==SQL92_RESERVED_IS||(LA123_25 >= SQL92_RESERVED_NULL && LA123_25 <= SQL92_RESERVED_OF)||LA123_25==SQL92_RESERVED_OR||LA123_25==SQL92_RESERVED_PRIOR||(LA123_25 >= SQL92_RESERVED_TO && LA123_25 <= SQL92_RESERVED_TRUE)||(LA123_25 >= UNSIGNED_INTEGER && LA123_25 <= VERTICAL_BAR)) ) {
                                                                alt123=1;
                                                            }
                                                            else if ( (LA123_25==REGULAR_ID) ) {
                                                                int LA123_27 = input.LA(11);

                                                                if ( (LA123_27==APPROXIMATE_NUM_LIT||LA123_27==ASTERISK||LA123_27==BINDVAR||(LA123_27 >= CARRET_OPERATOR_PART && LA123_27 <= COLON)||(LA123_27 >= CONCATENATION_OP && LA123_27 <= DELIMITED_ID)||(LA123_27 >= EQUALS_OP && LA123_27 <= EXCLAMATION_OPERATOR_PART)||(LA123_27 >= GREATER_THAN_OP && LA123_27 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_27 >= INTRODUCER && LA123_27 <= NATIONAL_CHAR_STRING_LIT)||LA123_27==NOT_EQUAL_OP||(LA123_27 >= PERIOD && LA123_27 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_27==PLSQL_NON_RESERVED_USING||LA123_27==PLUS_SIGN||LA123_27==SOLIDUS||LA123_27==SQL92_RESERVED_ALL||(LA123_27 >= SQL92_RESERVED_AND && LA123_27 <= SQL92_RESERVED_ANY)||LA123_27==SQL92_RESERVED_CASE||LA123_27==SQL92_RESERVED_DATE||LA123_27==SQL92_RESERVED_DEFAULT||LA123_27==SQL92_RESERVED_DISTINCT||(LA123_27 >= SQL92_RESERVED_EXISTS && LA123_27 <= SQL92_RESERVED_FALSE)||LA123_27==SQL92_RESERVED_IS||(LA123_27 >= SQL92_RESERVED_NULL && LA123_27 <= SQL92_RESERVED_OF)||LA123_27==SQL92_RESERVED_OR||LA123_27==SQL92_RESERVED_PRIOR||(LA123_27 >= SQL92_RESERVED_TO && LA123_27 <= SQL92_RESERVED_TRUE)||(LA123_27 >= UNSIGNED_INTEGER && LA123_27 <= VERTICAL_BAR)) ) {
                                                                    alt123=1;
                                                                }
                                                                else if ( (LA123_27==REGULAR_ID) ) {
                                                                    int LA123_29 = input.LA(12);

                                                                    if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                                                                        alt123=1;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            }
                                            break;
                                    }

                                    }
                                    break;
                                case SQL92_RESERVED_NOT:
                                    {
                                    int LA123_10 = input.LA(5);

                                    if ( (LA123_10==SQL92_RESERVED_BETWEEN||LA123_10==SQL92_RESERVED_IN||LA123_10==SQL92_RESERVED_LIKE) ) {
                                        alt123=1;
                                    }
                                    else if ( (LA123_10==REGULAR_ID) ) {
                                        int LA123_14 = input.LA(6);

                                        if ( (LA123_14==APPROXIMATE_NUM_LIT||LA123_14==BINDVAR||(LA123_14 >= CHAR_STRING && LA123_14 <= COLON)||LA123_14==DELIMITED_ID||LA123_14==EXACT_NUM_LIT||LA123_14==INTRODUCER||LA123_14==LEFT_PAREN||(LA123_14 >= MINUS_SIGN && LA123_14 <= NATIONAL_CHAR_STRING_LIT)||LA123_14==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_14==PLUS_SIGN||LA123_14==SQL92_RESERVED_ALL||LA123_14==SQL92_RESERVED_ANY||LA123_14==SQL92_RESERVED_CASE||LA123_14==SQL92_RESERVED_DATE||LA123_14==SQL92_RESERVED_DEFAULT||LA123_14==SQL92_RESERVED_DISTINCT||(LA123_14 >= SQL92_RESERVED_EXISTS && LA123_14 <= SQL92_RESERVED_FALSE)||LA123_14==SQL92_RESERVED_NULL||LA123_14==SQL92_RESERVED_PRIOR||LA123_14==SQL92_RESERVED_TRUE||LA123_14==UNSIGNED_INTEGER) ) {
                                            alt123=1;
                                        }
                                        else if ( (LA123_14==REGULAR_ID) ) {
                                            int LA123_18 = input.LA(7);

                                            if ( (LA123_18==APPROXIMATE_NUM_LIT||LA123_18==ASTERISK||LA123_18==BINDVAR||(LA123_18 >= CARRET_OPERATOR_PART && LA123_18 <= COLON)||(LA123_18 >= CONCATENATION_OP && LA123_18 <= DELIMITED_ID)||(LA123_18 >= EQUALS_OP && LA123_18 <= EXCLAMATION_OPERATOR_PART)||(LA123_18 >= GREATER_THAN_OP && LA123_18 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_18 >= INTRODUCER && LA123_18 <= NATIONAL_CHAR_STRING_LIT)||LA123_18==NOT_EQUAL_OP||(LA123_18 >= PERIOD && LA123_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_18==PLUS_SIGN||LA123_18==SOLIDUS||LA123_18==SQL92_RESERVED_ALL||(LA123_18 >= SQL92_RESERVED_AND && LA123_18 <= SQL92_RESERVED_ANY)||LA123_18==SQL92_RESERVED_CASE||LA123_18==SQL92_RESERVED_DATE||LA123_18==SQL92_RESERVED_DEFAULT||LA123_18==SQL92_RESERVED_DISTINCT||(LA123_18 >= SQL92_RESERVED_EXISTS && LA123_18 <= SQL92_RESERVED_FALSE)||LA123_18==SQL92_RESERVED_IS||LA123_18==SQL92_RESERVED_NULL||LA123_18==SQL92_RESERVED_OR||LA123_18==SQL92_RESERVED_PRIOR||LA123_18==SQL92_RESERVED_TRUE||(LA123_18 >= UNSIGNED_INTEGER && LA123_18 <= VERTICAL_BAR)) ) {
                                                alt123=1;
                                            }
                                            else if ( (LA123_18==REGULAR_ID) ) {
                                                int LA123_22 = input.LA(8);

                                                if ( (LA123_22==APPROXIMATE_NUM_LIT||LA123_22==ASTERISK||LA123_22==BINDVAR||(LA123_22 >= CARRET_OPERATOR_PART && LA123_22 <= COLON)||(LA123_22 >= CONCATENATION_OP && LA123_22 <= DELIMITED_ID)||(LA123_22 >= EQUALS_OP && LA123_22 <= EXCLAMATION_OPERATOR_PART)||(LA123_22 >= GREATER_THAN_OP && LA123_22 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_22 >= INTRODUCER && LA123_22 <= NATIONAL_CHAR_STRING_LIT)||LA123_22==NOT_EQUAL_OP||(LA123_22 >= PERIOD && LA123_22 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_22==PLUS_SIGN||LA123_22==SOLIDUS||LA123_22==SQL92_RESERVED_ALL||(LA123_22 >= SQL92_RESERVED_AND && LA123_22 <= SQL92_RESERVED_ANY)||LA123_22==SQL92_RESERVED_CASE||LA123_22==SQL92_RESERVED_DATE||LA123_22==SQL92_RESERVED_DEFAULT||LA123_22==SQL92_RESERVED_DISTINCT||(LA123_22 >= SQL92_RESERVED_EXISTS && LA123_22 <= SQL92_RESERVED_FALSE)||LA123_22==SQL92_RESERVED_IS||(LA123_22 >= SQL92_RESERVED_NULL && LA123_22 <= SQL92_RESERVED_OF)||LA123_22==SQL92_RESERVED_OR||LA123_22==SQL92_RESERVED_PRIOR||(LA123_22 >= SQL92_RESERVED_TO && LA123_22 <= SQL92_RESERVED_TRUE)||(LA123_22 >= UNSIGNED_INTEGER && LA123_22 <= VERTICAL_BAR)) ) {
                                                    alt123=1;
                                                }
                                                else if ( (LA123_22==REGULAR_ID) ) {
                                                    int LA123_25 = input.LA(9);

                                                    if ( (LA123_25==APPROXIMATE_NUM_LIT||LA123_25==ASTERISK||LA123_25==BINDVAR||(LA123_25 >= CARRET_OPERATOR_PART && LA123_25 <= COLON)||(LA123_25 >= CONCATENATION_OP && LA123_25 <= DELIMITED_ID)||(LA123_25 >= EQUALS_OP && LA123_25 <= EXCLAMATION_OPERATOR_PART)||(LA123_25 >= GREATER_THAN_OP && LA123_25 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_25 >= INTRODUCER && LA123_25 <= NATIONAL_CHAR_STRING_LIT)||LA123_25==NOT_EQUAL_OP||(LA123_25 >= PERIOD && LA123_25 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_25==PLSQL_NON_RESERVED_USING||LA123_25==PLUS_SIGN||LA123_25==SOLIDUS||LA123_25==SQL92_RESERVED_ALL||(LA123_25 >= SQL92_RESERVED_AND && LA123_25 <= SQL92_RESERVED_ANY)||LA123_25==SQL92_RESERVED_CASE||LA123_25==SQL92_RESERVED_DATE||LA123_25==SQL92_RESERVED_DEFAULT||LA123_25==SQL92_RESERVED_DISTINCT||(LA123_25 >= SQL92_RESERVED_EXISTS && LA123_25 <= SQL92_RESERVED_FALSE)||LA123_25==SQL92_RESERVED_IS||(LA123_25 >= SQL92_RESERVED_NULL && LA123_25 <= SQL92_RESERVED_OF)||LA123_25==SQL92_RESERVED_OR||LA123_25==SQL92_RESERVED_PRIOR||(LA123_25 >= SQL92_RESERVED_TO && LA123_25 <= SQL92_RESERVED_TRUE)||(LA123_25 >= UNSIGNED_INTEGER && LA123_25 <= VERTICAL_BAR)) ) {
                                                        alt123=1;
                                                    }
                                                    else if ( (LA123_25==REGULAR_ID) ) {
                                                        int LA123_27 = input.LA(10);

                                                        if ( (LA123_27==APPROXIMATE_NUM_LIT||LA123_27==ASTERISK||LA123_27==BINDVAR||(LA123_27 >= CARRET_OPERATOR_PART && LA123_27 <= COLON)||(LA123_27 >= CONCATENATION_OP && LA123_27 <= DELIMITED_ID)||(LA123_27 >= EQUALS_OP && LA123_27 <= EXCLAMATION_OPERATOR_PART)||(LA123_27 >= GREATER_THAN_OP && LA123_27 <= GREATER_THAN_OR_EQUALS_OP)||(LA123_27 >= INTRODUCER && LA123_27 <= NATIONAL_CHAR_STRING_LIT)||LA123_27==NOT_EQUAL_OP||(LA123_27 >= PERIOD && LA123_27 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_27==PLSQL_NON_RESERVED_USING||LA123_27==PLUS_SIGN||LA123_27==SOLIDUS||LA123_27==SQL92_RESERVED_ALL||(LA123_27 >= SQL92_RESERVED_AND && LA123_27 <= SQL92_RESERVED_ANY)||LA123_27==SQL92_RESERVED_CASE||LA123_27==SQL92_RESERVED_DATE||LA123_27==SQL92_RESERVED_DEFAULT||LA123_27==SQL92_RESERVED_DISTINCT||(LA123_27 >= SQL92_RESERVED_EXISTS && LA123_27 <= SQL92_RESERVED_FALSE)||LA123_27==SQL92_RESERVED_IS||(LA123_27 >= SQL92_RESERVED_NULL && LA123_27 <= SQL92_RESERVED_OF)||LA123_27==SQL92_RESERVED_OR||LA123_27==SQL92_RESERVED_PRIOR||(LA123_27 >= SQL92_RESERVED_TO && LA123_27 <= SQL92_RESERVED_TRUE)||(LA123_27 >= UNSIGNED_INTEGER && LA123_27 <= VERTICAL_BAR)) ) {
                                                            alt123=1;
                                                        }
                                                        else if ( (LA123_27==REGULAR_ID) ) {
                                                            int LA123_29 = input.LA(11);

                                                            if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                                                                alt123=1;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                }
            }
            switch (alt123) {
                case 1 :
                    // PLSQLParser.g:667:9: sqlj_object_type
                    {
                    pushFollow(FOLLOW_sqlj_object_type_in_object_type_def6595);
                    sqlj_object_type442=sqlj_object_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqlj_object_type.add(sqlj_object_type442.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:668:9: ( LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==LEFT_PAREN) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // PLSQLParser.g:668:10: LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN
                    {
                    LEFT_PAREN443=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_object_type_def6607); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN443);


                    pushFollow(FOLLOW_object_member_spec_in_object_type_def6609);
                    object_member_spec444=object_member_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_object_member_spec.add(object_member_spec444.getTree());

                    // PLSQLParser.g:668:40: ( COMMA object_member_spec )*
                    loop124:
                    do {
                        int alt124=2;
                        int LA124_0 = input.LA(1);

                        if ( (LA124_0==COMMA) ) {
                            alt124=1;
                        }


                        switch (alt124) {
                    	case 1 :
                    	    // PLSQLParser.g:668:41: COMMA object_member_spec
                    	    {
                    	    COMMA445=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_def6612); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA445);


                    	    pushFollow(FOLLOW_object_member_spec_in_object_type_def6614);
                    	    object_member_spec446=object_member_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_object_member_spec.add(object_member_spec446.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop124;
                        }
                    } while (true);


                    RIGHT_PAREN447=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_object_type_def6618); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN447);


                    }
                    break;

            }


            // PLSQLParser.g:669:9: ( modifier_clause )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==SQL92_RESERVED_NOT) ) {
                    alt126=1;
                }
                else if ( (LA126_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("final"))))) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // PLSQLParser.g:669:9: modifier_clause
            	    {
            	    pushFollow(FOLLOW_modifier_clause_in_object_type_def6630);
            	    modifier_clause448=modifier_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier_clause.add(modifier_clause448.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            // AST REWRITE
            // elements: object_member_spec, object_under_part, modifier_clause, invoker_rights_clause, object_as_part, sqlj_object_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 670:9: -> ^( OBJECT_TYPE_DEF ( object_as_part )? ( object_under_part )? ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( object_member_spec )* ) )
            {
                // PLSQLParser.g:670:12: ^( OBJECT_TYPE_DEF ( object_as_part )? ( object_under_part )? ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( object_member_spec )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_TYPE_DEF, "OBJECT_TYPE_DEF")
                , root_1);

                // PLSQLParser.g:670:30: ( object_as_part )?
                if ( stream_object_as_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_object_as_part.nextTree());

                }
                stream_object_as_part.reset();

                // PLSQLParser.g:670:46: ( object_under_part )?
                if ( stream_object_under_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_object_under_part.nextTree());

                }
                stream_object_under_part.reset();

                // PLSQLParser.g:670:65: ( invoker_rights_clause )?
                if ( stream_invoker_rights_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());

                }
                stream_invoker_rights_clause.reset();

                // PLSQLParser.g:671:14: ( sqlj_object_type )?
                if ( stream_sqlj_object_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_sqlj_object_type.nextTree());

                }
                stream_sqlj_object_type.reset();

                // PLSQLParser.g:671:32: ( modifier_clause )*
                while ( stream_modifier_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifier_clause.nextTree());

                }
                stream_modifier_clause.reset();

                // PLSQLParser.g:671:49: ^( OBJECT_MEMBERS ( object_member_spec )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_MEMBERS, "OBJECT_MEMBERS")
                , root_2);

                // PLSQLParser.g:671:66: ( object_member_spec )*
                while ( stream_object_member_spec.hasNext() ) {
                    adaptor.addChild(root_2, stream_object_member_spec.nextTree());

                }
                stream_object_member_spec.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_type_def"


    public static class object_as_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_as_part"
    // PLSQLParser.g:674:1: object_as_part : ( is_key | as_key ) ( object_key | varray_type_def | nested_table_type_def ) -> ^( OBJECT_AS ( object_key )? ( varray_type_def )? ( nested_table_type_def )? ) ;
    public final object_as_part_return object_as_part() throws RecognitionException {
        object_as_part_return retval = new object_as_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.is_key_return is_key449 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key450 =null;

        PLSQLParser_PLSQLKeys.object_key_return object_key451 =null;

        varray_type_def_return varray_type_def452 =null;

        nested_table_type_def_return nested_table_type_def453 =null;


        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_varray_type_def=new RewriteRuleSubtreeStream(adaptor,"rule varray_type_def");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_object_key=new RewriteRuleSubtreeStream(adaptor,"rule object_key");
        RewriteRuleSubtreeStream stream_nested_table_type_def=new RewriteRuleSubtreeStream(adaptor,"rule nested_table_type_def");
        try {
            // PLSQLParser.g:675:5: ( ( is_key | as_key ) ( object_key | varray_type_def | nested_table_type_def ) -> ^( OBJECT_AS ( object_key )? ( varray_type_def )? ( nested_table_type_def )? ) )
            // PLSQLParser.g:675:10: ( is_key | as_key ) ( object_key | varray_type_def | nested_table_type_def )
            {
            // PLSQLParser.g:675:10: ( is_key | as_key )
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==SQL92_RESERVED_IS) ) {
                alt127=1;
            }
            else if ( (LA127_0==SQL92_RESERVED_AS) ) {
                alt127=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }
            switch (alt127) {
                case 1 :
                    // PLSQLParser.g:675:11: is_key
                    {
                    pushFollow(FOLLOW_is_key_in_object_as_part6703);
                    is_key449=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key449.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:675:18: as_key
                    {
                    pushFollow(FOLLOW_as_key_in_object_as_part6705);
                    as_key450=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key450.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:675:26: ( object_key | varray_type_def | nested_table_type_def )
            int alt128=3;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("varray"))||(input.LT(1).getText().equalsIgnoreCase("varying"))||(input.LT(1).getText().equalsIgnoreCase("object"))))) {
                int LA128_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("object"))) ) {
                    alt128=1;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("varying"))||(input.LT(1).getText().equalsIgnoreCase("varray")))) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA128_0==SQL92_RESERVED_TABLE) ) {
                alt128=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;

            }
            switch (alt128) {
                case 1 :
                    // PLSQLParser.g:675:27: object_key
                    {
                    pushFollow(FOLLOW_object_key_in_object_as_part6709);
                    object_key451=object_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_object_key.add(object_key451.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:675:38: varray_type_def
                    {
                    pushFollow(FOLLOW_varray_type_def_in_object_as_part6711);
                    varray_type_def452=varray_type_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varray_type_def.add(varray_type_def452.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:675:54: nested_table_type_def
                    {
                    pushFollow(FOLLOW_nested_table_type_def_in_object_as_part6713);
                    nested_table_type_def453=nested_table_type_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nested_table_type_def.add(nested_table_type_def453.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: varray_type_def, object_key, nested_table_type_def
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 676:9: -> ^( OBJECT_AS ( object_key )? ( varray_type_def )? ( nested_table_type_def )? )
            {
                // PLSQLParser.g:676:12: ^( OBJECT_AS ( object_key )? ( varray_type_def )? ( nested_table_type_def )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_AS, "OBJECT_AS")
                , root_1);

                // PLSQLParser.g:676:24: ( object_key )?
                if ( stream_object_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_object_key.nextTree());

                }
                stream_object_key.reset();

                // PLSQLParser.g:676:36: ( varray_type_def )?
                if ( stream_varray_type_def.hasNext() ) {
                    adaptor.addChild(root_1, stream_varray_type_def.nextTree());

                }
                stream_varray_type_def.reset();

                // PLSQLParser.g:676:53: ( nested_table_type_def )?
                if ( stream_nested_table_type_def.hasNext() ) {
                    adaptor.addChild(root_1, stream_nested_table_type_def.nextTree());

                }
                stream_nested_table_type_def.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_as_part"


    public static class object_under_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_under_part"
    // PLSQLParser.g:679:1: object_under_part : under_key ^ type_spec ;
    public final object_under_part_return object_under_part() throws RecognitionException {
        object_under_part_return retval = new object_under_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.under_key_return under_key454 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec455 =null;



        try {
            // PLSQLParser.g:680:5: ( under_key ^ type_spec )
            // PLSQLParser.g:680:10: under_key ^ type_spec
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_under_key_in_object_under_part6757);
            under_key454=under_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(under_key454.getTree(), root_0);

            pushFollow(FOLLOW_type_spec_in_object_under_part6760);
            type_spec455=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec455.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_under_part"


    public static class nested_table_type_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_table_type_def"
    // PLSQLParser.g:683:1: nested_table_type_def : table_key of_key type_spec ( not_key null_key )? -> ^( NESTED_TABLE_TYPE_DEF[$table_key.start] type_spec ( null_key )? ) ;
    public final nested_table_type_def_return nested_table_type_def() throws RecognitionException {
        nested_table_type_def_return retval = new nested_table_type_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.table_key_return table_key456 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key457 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec458 =null;

        PLSQLParser_PLSQLKeys.not_key_return not_key459 =null;

        PLSQLParser_PLSQLKeys.null_key_return null_key460 =null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
        RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        try {
            // PLSQLParser.g:684:5: ( table_key of_key type_spec ( not_key null_key )? -> ^( NESTED_TABLE_TYPE_DEF[$table_key.start] type_spec ( null_key )? ) )
            // PLSQLParser.g:684:10: table_key of_key type_spec ( not_key null_key )?
            {
            pushFollow(FOLLOW_table_key_in_nested_table_type_def6780);
            table_key456=table_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_key.add(table_key456.getTree());

            pushFollow(FOLLOW_of_key_in_nested_table_type_def6782);
            of_key457=of_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_of_key.add(of_key457.getTree());

            pushFollow(FOLLOW_type_spec_in_nested_table_type_def6784);
            type_spec458=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec458.getTree());

            // PLSQLParser.g:685:9: ( not_key null_key )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==SQL92_RESERVED_NOT) ) {
                int LA129_1 = input.LA(2);

                if ( (LA129_1==SQL92_RESERVED_NULL) ) {
                    alt129=1;
                }
            }
            switch (alt129) {
                case 1 :
                    // PLSQLParser.g:685:10: not_key null_key
                    {
                    pushFollow(FOLLOW_not_key_in_nested_table_type_def6795);
                    not_key459=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_not_key.add(not_key459.getTree());

                    pushFollow(FOLLOW_null_key_in_nested_table_type_def6797);
                    null_key460=null_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_null_key.add(null_key460.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: null_key, type_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 686:9: -> ^( NESTED_TABLE_TYPE_DEF[$table_key.start] type_spec ( null_key )? )
            {
                // PLSQLParser.g:686:12: ^( NESTED_TABLE_TYPE_DEF[$table_key.start] type_spec ( null_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NESTED_TABLE_TYPE_DEF, (table_key456!=null?((Token)table_key456.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:686:64: ( null_key )?
                if ( stream_null_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_null_key.nextTree());

                }
                stream_null_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_table_type_def"


    public static class sqlj_object_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sqlj_object_type"
    // PLSQLParser.g:689:1: sqlj_object_type : external_key name_key expression language_key java_key using_key ( sqldata_key | customdatum_key | oradata_key ) -> ^( java_key ^( EXPR expression ) ( sqldata_key )? ( customdatum_key )? ( oradata_key )? ) ;
    public final sqlj_object_type_return sqlj_object_type() throws RecognitionException {
        sqlj_object_type_return retval = new sqlj_object_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.external_key_return external_key461 =null;

        PLSQLParser_PLSQLKeys.name_key_return name_key462 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression463 =null;

        PLSQLParser_PLSQLKeys.language_key_return language_key464 =null;

        PLSQLParser_PLSQLKeys.java_key_return java_key465 =null;

        PLSQLParser_PLSQLKeys.using_key_return using_key466 =null;

        PLSQLParser_PLSQLKeys.sqldata_key_return sqldata_key467 =null;

        PLSQLParser_PLSQLKeys.customdatum_key_return customdatum_key468 =null;

        PLSQLParser_PLSQLKeys.oradata_key_return oradata_key469 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_oradata_key=new RewriteRuleSubtreeStream(adaptor,"rule oradata_key");
        RewriteRuleSubtreeStream stream_using_key=new RewriteRuleSubtreeStream(adaptor,"rule using_key");
        RewriteRuleSubtreeStream stream_name_key=new RewriteRuleSubtreeStream(adaptor,"rule name_key");
        RewriteRuleSubtreeStream stream_language_key=new RewriteRuleSubtreeStream(adaptor,"rule language_key");
        RewriteRuleSubtreeStream stream_customdatum_key=new RewriteRuleSubtreeStream(adaptor,"rule customdatum_key");
        RewriteRuleSubtreeStream stream_java_key=new RewriteRuleSubtreeStream(adaptor,"rule java_key");
        RewriteRuleSubtreeStream stream_external_key=new RewriteRuleSubtreeStream(adaptor,"rule external_key");
        RewriteRuleSubtreeStream stream_sqldata_key=new RewriteRuleSubtreeStream(adaptor,"rule sqldata_key");
        try {
            // PLSQLParser.g:690:5: ( external_key name_key expression language_key java_key using_key ( sqldata_key | customdatum_key | oradata_key ) -> ^( java_key ^( EXPR expression ) ( sqldata_key )? ( customdatum_key )? ( oradata_key )? ) )
            // PLSQLParser.g:690:10: external_key name_key expression language_key java_key using_key ( sqldata_key | customdatum_key | oradata_key )
            {
            pushFollow(FOLLOW_external_key_in_sqlj_object_type6840);
            external_key461=external_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_external_key.add(external_key461.getTree());

            pushFollow(FOLLOW_name_key_in_sqlj_object_type6842);
            name_key462=name_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_key.add(name_key462.getTree());

            pushFollow(FOLLOW_expression_in_sqlj_object_type6844);
            expression463=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression463.getTree());

            pushFollow(FOLLOW_language_key_in_sqlj_object_type6846);
            language_key464=language_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_language_key.add(language_key464.getTree());

            pushFollow(FOLLOW_java_key_in_sqlj_object_type6848);
            java_key465=java_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_java_key.add(java_key465.getTree());

            pushFollow(FOLLOW_using_key_in_sqlj_object_type6850);
            using_key466=using_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_using_key.add(using_key466.getTree());

            // PLSQLParser.g:690:75: ( sqldata_key | customdatum_key | oradata_key )
            int alt130=3;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("customdatum"))||(input.LT(1).getText().equalsIgnoreCase("oradata"))||(input.LT(1).getText().equalsIgnoreCase("sqldata"))))) {
                int LA130_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("sqldata"))) ) {
                    alt130=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("customdatum"))) ) {
                    alt130=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("oradata"))) ) {
                    alt130=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;

            }
            switch (alt130) {
                case 1 :
                    // PLSQLParser.g:690:76: sqldata_key
                    {
                    pushFollow(FOLLOW_sqldata_key_in_sqlj_object_type6853);
                    sqldata_key467=sqldata_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqldata_key.add(sqldata_key467.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:690:88: customdatum_key
                    {
                    pushFollow(FOLLOW_customdatum_key_in_sqlj_object_type6855);
                    customdatum_key468=customdatum_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_customdatum_key.add(customdatum_key468.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:690:104: oradata_key
                    {
                    pushFollow(FOLLOW_oradata_key_in_sqlj_object_type6857);
                    oradata_key469=oradata_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_oradata_key.add(oradata_key469.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: oradata_key, expression, customdatum_key, java_key, sqldata_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 691:9: -> ^( java_key ^( EXPR expression ) ( sqldata_key )? ( customdatum_key )? ( oradata_key )? )
            {
                // PLSQLParser.g:691:12: ^( java_key ^( EXPR expression ) ( sqldata_key )? ( customdatum_key )? ( oradata_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_java_key.nextNode(), root_1);

                // PLSQLParser.g:691:23: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:691:42: ( sqldata_key )?
                if ( stream_sqldata_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_sqldata_key.nextTree());

                }
                stream_sqldata_key.reset();

                // PLSQLParser.g:691:55: ( customdatum_key )?
                if ( stream_customdatum_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_customdatum_key.nextTree());

                }
                stream_customdatum_key.reset();

                // PLSQLParser.g:691:72: ( oradata_key )?
                if ( stream_oradata_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_oradata_key.nextTree());

                }
                stream_oradata_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sqlj_object_type"


    public static class type_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_body"
    // PLSQLParser.g:694:1: type_body : body_key type_name ( is_key | as_key ) type_body_elements ( COMMA type_body_elements )* end_key -> type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ;
    public final type_body_return type_body() throws RecognitionException {
        type_body_return retval = new type_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA475=null;
        PLSQLParser_PLSQLKeys.body_key_return body_key470 =null;

        PLSQLParser_PLSQLCommons.type_name_return type_name471 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key472 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key473 =null;

        type_body_elements_return type_body_elements474 =null;

        type_body_elements_return type_body_elements476 =null;

        PLSQLParser_PLSQLKeys.end_key_return end_key477 =null;


        Object COMMA475_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_type_body_elements=new RewriteRuleSubtreeStream(adaptor,"rule type_body_elements");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
        try {
            // PLSQLParser.g:695:5: ( body_key type_name ( is_key | as_key ) type_body_elements ( COMMA type_body_elements )* end_key -> type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) )
            // PLSQLParser.g:695:10: body_key type_name ( is_key | as_key ) type_body_elements ( COMMA type_body_elements )* end_key
            {
            pushFollow(FOLLOW_body_key_in_type_body6907);
            body_key470=body_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_body_key.add(body_key470.getTree());

            pushFollow(FOLLOW_type_name_in_type_body6909);
            type_name471=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_name.add(type_name471.getTree());

            // PLSQLParser.g:696:9: ( is_key | as_key )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==SQL92_RESERVED_IS) ) {
                alt131=1;
            }
            else if ( (LA131_0==SQL92_RESERVED_AS) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
                case 1 :
                    // PLSQLParser.g:696:10: is_key
                    {
                    pushFollow(FOLLOW_is_key_in_type_body6920);
                    is_key472=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key472.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:696:17: as_key
                    {
                    pushFollow(FOLLOW_as_key_in_type_body6922);
                    as_key473=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key473.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_type_body_elements_in_type_body6925);
            type_body_elements474=type_body_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_body_elements.add(type_body_elements474.getTree());

            // PLSQLParser.g:696:44: ( COMMA type_body_elements )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==COMMA) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // PLSQLParser.g:696:45: COMMA type_body_elements
            	    {
            	    COMMA475=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_body6928); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA475);


            	    pushFollow(FOLLOW_type_body_elements_in_type_body6930);
            	    type_body_elements476=type_body_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_body_elements.add(type_body_elements476.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            pushFollow(FOLLOW_end_key_in_type_body6942);
            end_key477=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key477.getTree());

            // AST REWRITE
            // elements: type_body_elements, type_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 698:9: -> type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ )
            {
                adaptor.addChild(root_0, stream_type_name.nextTree());

                // PLSQLParser.g:698:22: ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_BODY_ELEMENTS, "TYPE_BODY_ELEMENTS")
                , root_1);

                if ( !(stream_type_body_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_body_elements.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_body_elements.nextTree());

                }
                stream_type_body_elements.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_body"


    public static class type_body_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_body_elements"
    // PLSQLParser.g:701:1: type_body_elements : ( map_order_func_declaration | subprog_decl_in_type );
    public final type_body_elements_return type_body_elements() throws RecognitionException {
        type_body_elements_return retval = new type_body_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        map_order_func_declaration_return map_order_func_declaration478 =null;

        subprog_decl_in_type_return subprog_decl_in_type479 =null;



        try {
            // PLSQLParser.g:702:5: ( map_order_func_declaration | subprog_decl_in_type )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                int LA133_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("map"))) ) {
                    alt133=1;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member")))) ) {
                    alt133=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 133, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA133_0==SQL92_RESERVED_ORDER) ) {
                alt133=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;

            }
            switch (alt133) {
                case 1 :
                    // PLSQLParser.g:702:10: map_order_func_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_order_func_declaration_in_type_body_elements6981);
                    map_order_func_declaration478=map_order_func_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_func_declaration478.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:703:10: subprog_decl_in_type
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_subprog_decl_in_type_in_type_body_elements6992);
                    subprog_decl_in_type479=subprog_decl_in_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subprog_decl_in_type479.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_body_elements"


    public static class map_order_func_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_order_func_declaration"
    // PLSQLParser.g:706:1: map_order_func_declaration : ( map_key ^| order_key ^) member_key ! func_decl_in_type ;
    public final map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
        map_order_func_declaration_return retval = new map_order_func_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.map_key_return map_key480 =null;

        PLSQLParser_PLSQLKeys.order_key_return order_key481 =null;

        PLSQLParser_PLSQLKeys.member_key_return member_key482 =null;

        func_decl_in_type_return func_decl_in_type483 =null;



        try {
            // PLSQLParser.g:707:5: ( ( map_key ^| order_key ^) member_key ! func_decl_in_type )
            // PLSQLParser.g:707:10: ( map_key ^| order_key ^) member_key ! func_decl_in_type
            {
            root_0 = (Object)adaptor.nil();


            // PLSQLParser.g:707:10: ( map_key ^| order_key ^)
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("map")))) {
                alt134=1;
            }
            else if ( (LA134_0==SQL92_RESERVED_ORDER) ) {
                alt134=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }
            switch (alt134) {
                case 1 :
                    // PLSQLParser.g:707:11: map_key ^
                    {
                    pushFollow(FOLLOW_map_key_in_map_order_func_declaration7013);
                    map_key480=map_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(map_key480.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:707:20: order_key ^
                    {
                    pushFollow(FOLLOW_order_key_in_map_order_func_declaration7016);
                    order_key481=order_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(order_key481.getTree(), root_0);

                    }
                    break;

            }


            pushFollow(FOLLOW_member_key_in_map_order_func_declaration7020);
            member_key482=member_key();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_func_decl_in_type_in_map_order_func_declaration7023);
            func_decl_in_type483=func_decl_in_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, func_decl_in_type483.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_order_func_declaration"


    public static class subprog_decl_in_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subprog_decl_in_type"
    // PLSQLParser.g:710:1: subprog_decl_in_type : ( member_key ^| static_key ^) ( proc_decl_in_type | func_decl_in_type | constructor_declaration ) ;
    public final subprog_decl_in_type_return subprog_decl_in_type() throws RecognitionException {
        subprog_decl_in_type_return retval = new subprog_decl_in_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.member_key_return member_key484 =null;

        PLSQLParser_PLSQLKeys.static_key_return static_key485 =null;

        proc_decl_in_type_return proc_decl_in_type486 =null;

        func_decl_in_type_return func_decl_in_type487 =null;

        constructor_declaration_return constructor_declaration488 =null;



        try {
            // PLSQLParser.g:711:5: ( ( member_key ^| static_key ^) ( proc_decl_in_type | func_decl_in_type | constructor_declaration ) )
            // PLSQLParser.g:711:10: ( member_key ^| static_key ^) ( proc_decl_in_type | func_decl_in_type | constructor_declaration )
            {
            root_0 = (Object)adaptor.nil();


            // PLSQLParser.g:711:10: ( member_key ^| static_key ^)
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
                int LA135_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("member"))) ) {
                    alt135=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("static"))) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }
            switch (alt135) {
                case 1 :
                    // PLSQLParser.g:711:11: member_key ^
                    {
                    pushFollow(FOLLOW_member_key_in_subprog_decl_in_type7044);
                    member_key484=member_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(member_key484.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:711:23: static_key ^
                    {
                    pushFollow(FOLLOW_static_key_in_subprog_decl_in_type7047);
                    static_key485=static_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(static_key485.getTree(), root_0);

                    }
                    break;

            }


            // PLSQLParser.g:712:5: ( proc_decl_in_type | func_decl_in_type | constructor_declaration )
            int alt136=3;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==SQL92_RESERVED_PROCEDURE) ) {
                alt136=1;
            }
            else if ( (LA136_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))))) {
                int LA136_2 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
                    alt136=2;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final")))) ) {
                    alt136=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 136, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;

            }
            switch (alt136) {
                case 1 :
                    // PLSQLParser.g:712:10: proc_decl_in_type
                    {
                    pushFollow(FOLLOW_proc_decl_in_type_in_subprog_decl_in_type7060);
                    proc_decl_in_type486=proc_decl_in_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, proc_decl_in_type486.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:713:10: func_decl_in_type
                    {
                    pushFollow(FOLLOW_func_decl_in_type_in_subprog_decl_in_type7071);
                    func_decl_in_type487=func_decl_in_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_decl_in_type487.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:714:10: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_subprog_decl_in_type7082);
                    constructor_declaration488=constructor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration488.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subprog_decl_in_type"


    public static class proc_decl_in_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "proc_decl_in_type"
    // PLSQLParser.g:717:1: proc_decl_in_type : procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( is_key | as_key ) ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON ) -> {mode == 1}? ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) ) -> ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( BODY_MODE ( declare_spec )* body ) ) ;
    public final proc_decl_in_type_return proc_decl_in_type() throws RecognitionException {
        proc_decl_in_type_return retval = new proc_decl_in_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN491=null;
        Token COMMA493=null;
        Token RIGHT_PAREN495=null;
        Token SEMICOLON502=null;
        PLSQLParser_PLSQLKeys.procedure_key_return procedure_key489 =null;

        PLSQLParser_PLSQLCommons.procedure_name_return procedure_name490 =null;

        type_elements_parameter_return type_elements_parameter492 =null;

        type_elements_parameter_return type_elements_parameter494 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key496 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key497 =null;

        call_spec_return call_spec498 =null;

        PLSQLParser_PLSQLKeys.declare_key_return declare_key499 =null;

        declare_spec_return declare_spec500 =null;

        body_return body501 =null;


        Object LEFT_PAREN491_tree=null;
        Object COMMA493_tree=null;
        Object RIGHT_PAREN495_tree=null;
        Object SEMICOLON502_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
        RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
        RewriteRuleSubtreeStream stream_declare_spec=new RewriteRuleSubtreeStream(adaptor,"rule declare_spec");
        RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:719:5: ( procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( is_key | as_key ) ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON ) -> {mode == 1}? ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) ) -> ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( BODY_MODE ( declare_spec )* body ) ) )
            // PLSQLParser.g:719:10: procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( is_key | as_key ) ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON )
            {
            pushFollow(FOLLOW_procedure_key_in_proc_decl_in_type7111);
            procedure_key489=procedure_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key489.getTree());

            pushFollow(FOLLOW_procedure_name_in_proc_decl_in_type7113);
            procedure_name490=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name490.getTree());

            LEFT_PAREN491=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_proc_decl_in_type7123); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN491);


            pushFollow(FOLLOW_type_elements_parameter_in_proc_decl_in_type7125);
            type_elements_parameter492=type_elements_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter492.getTree());

            // PLSQLParser.g:720:44: ( COMMA type_elements_parameter )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==COMMA) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // PLSQLParser.g:720:45: COMMA type_elements_parameter
            	    {
            	    COMMA493=(Token)match(input,COMMA,FOLLOW_COMMA_in_proc_decl_in_type7128); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA493);


            	    pushFollow(FOLLOW_type_elements_parameter_in_proc_decl_in_type7130);
            	    type_elements_parameter494=type_elements_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter494.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            RIGHT_PAREN495=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_proc_decl_in_type7134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN495);


            // PLSQLParser.g:721:9: ( is_key | as_key )
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==SQL92_RESERVED_IS) ) {
                alt138=1;
            }
            else if ( (LA138_0==SQL92_RESERVED_AS) ) {
                alt138=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }
            switch (alt138) {
                case 1 :
                    // PLSQLParser.g:721:10: is_key
                    {
                    pushFollow(FOLLOW_is_key_in_proc_decl_in_type7145);
                    is_key496=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key496.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:721:17: as_key
                    {
                    pushFollow(FOLLOW_as_key_in_proc_decl_in_type7147);
                    as_key497=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key497.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:722:13: ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==REGULAR_ID) ) {
                int LA141_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
                    alt141=1;
                }
                else if ( (true) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA141_0==BINDVAR||LA141_0==COLON||LA141_0==DELIMITED_ID||LA141_0==INTRODUCER||LA141_0==SQL92_RESERVED_BEGIN||LA141_0==SQL92_RESERVED_CREATE||LA141_0==SQL92_RESERVED_CURSOR||LA141_0==SQL92_RESERVED_DECLARE||LA141_0==SQL92_RESERVED_PROCEDURE) ) {
                alt141=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }
            switch (alt141) {
                case 1 :
                    // PLSQLParser.g:722:14: call_spec
                    {
                    pushFollow(FOLLOW_call_spec_in_proc_decl_in_type7164);
                    call_spec498=call_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_call_spec.add(call_spec498.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:722:36: ( declare_key )? ( declare_spec )* body SEMICOLON
                    {
                    // PLSQLParser.g:722:36: ( declare_key )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==SQL92_RESERVED_DECLARE) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // PLSQLParser.g:722:36: declare_key
                            {
                            pushFollow(FOLLOW_declare_key_in_proc_decl_in_type7168);
                            declare_key499=declare_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_declare_key.add(declare_key499.getTree());

                            }
                            break;

                    }


                    // PLSQLParser.g:722:49: ( declare_spec )*
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==BINDVAR||LA140_0==COLON||LA140_0==DELIMITED_ID||LA140_0==INTRODUCER||LA140_0==REGULAR_ID||LA140_0==SQL92_RESERVED_CREATE||LA140_0==SQL92_RESERVED_CURSOR||LA140_0==SQL92_RESERVED_PROCEDURE) ) {
                            alt140=1;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // PLSQLParser.g:722:49: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_proc_decl_in_type7171);
                    	    declare_spec500=declare_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_declare_spec.add(declare_spec500.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);


                    pushFollow(FOLLOW_body_in_proc_decl_in_type7174);
                    body501=body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_body.add(body501.getTree());

                    SEMICOLON502=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_proc_decl_in_type7176); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON502);


                    }
                    break;

            }


            // AST REWRITE
            // elements: call_spec, body, procedure_name, type_elements_parameter, declare_spec, type_elements_parameter, procedure_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 723:9: -> {mode == 1}? ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) )
            if (mode == 1) {
                // PLSQLParser.g:723:25: ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_PROCEDURE, "CREATE_PROCEDURE")
                , root_1);

                adaptor.addChild(root_1, stream_procedure_name.nextTree());

                // PLSQLParser.g:723:59: ^( PARAMETERS ( type_elements_parameter )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                if ( !(stream_type_elements_parameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:723:98: ^( CALL_MODE call_spec )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CALL_MODE, "CALL_MODE")
                , root_2);

                adaptor.addChild(root_2, stream_call_spec.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 724:9: -> ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( BODY_MODE ( declare_spec )* body ) )
            {
                // PLSQLParser.g:724:12: ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( BODY_MODE ( declare_spec )* body ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_PROCEDURE, "CREATE_PROCEDURE")
                , root_1);

                adaptor.addChild(root_1, stream_procedure_name.nextTree());

                // PLSQLParser.g:724:46: ^( PARAMETERS ( type_elements_parameter )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                if ( !(stream_type_elements_parameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:724:85: ^( BODY_MODE ( declare_spec )* body )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BODY_MODE, "BODY_MODE")
                , root_2);

                // PLSQLParser.g:724:97: ( declare_spec )*
                while ( stream_declare_spec.hasNext() ) {
                    adaptor.addChild(root_2, stream_declare_spec.nextTree());

                }
                stream_declare_spec.reset();

                adaptor.addChild(root_2, stream_body.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "proc_decl_in_type"


    public static class func_decl_in_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_decl_in_type"
    // PLSQLParser.g:727:1: func_decl_in_type : function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key type_spec ( is_key | as_key ) ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON ) -> {mode == 1}? ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE ( declare_spec )* body ) ) ;
    public final func_decl_in_type_return func_decl_in_type() throws RecognitionException {
        func_decl_in_type_return retval = new func_decl_in_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN505=null;
        Token COMMA507=null;
        Token RIGHT_PAREN509=null;
        Token SEMICOLON518=null;
        PLSQLParser_PLSQLKeys.function_key_return function_key503 =null;

        PLSQLParser_PLSQLCommons.function_name_return function_name504 =null;

        type_elements_parameter_return type_elements_parameter506 =null;

        type_elements_parameter_return type_elements_parameter508 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key510 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec511 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key512 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key513 =null;

        call_spec_return call_spec514 =null;

        PLSQLParser_PLSQLKeys.declare_key_return declare_key515 =null;

        declare_spec_return declare_spec516 =null;

        body_return body517 =null;


        Object LEFT_PAREN505_tree=null;
        Object COMMA507_tree=null;
        Object RIGHT_PAREN509_tree=null;
        Object SEMICOLON518_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
        RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
        RewriteRuleSubtreeStream stream_declare_spec=new RewriteRuleSubtreeStream(adaptor,"rule declare_spec");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:729:5: ( function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key type_spec ( is_key | as_key ) ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON ) -> {mode == 1}? ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE ( declare_spec )* body ) ) )
            // PLSQLParser.g:729:10: function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key type_spec ( is_key | as_key ) ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON )
            {
            pushFollow(FOLLOW_function_key_in_func_decl_in_type7268);
            function_key503=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key503.getTree());

            pushFollow(FOLLOW_function_name_in_func_decl_in_type7270);
            function_name504=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_name.add(function_name504.getTree());

            // PLSQLParser.g:730:9: ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==LEFT_PAREN) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // PLSQLParser.g:730:10: LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN
                    {
                    LEFT_PAREN505=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_decl_in_type7282); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN505);


                    pushFollow(FOLLOW_type_elements_parameter_in_func_decl_in_type7284);
                    type_elements_parameter506=type_elements_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter506.getTree());

                    // PLSQLParser.g:730:45: ( COMMA type_elements_parameter )*
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==COMMA) ) {
                            alt142=1;
                        }


                        switch (alt142) {
                    	case 1 :
                    	    // PLSQLParser.g:730:46: COMMA type_elements_parameter
                    	    {
                    	    COMMA507=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_decl_in_type7287); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA507);


                    	    pushFollow(FOLLOW_type_elements_parameter_in_func_decl_in_type7289);
                    	    type_elements_parameter508=type_elements_parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter508.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop142;
                        }
                    } while (true);


                    RIGHT_PAREN509=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_decl_in_type7293); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN509);


                    }
                    break;

            }


            pushFollow(FOLLOW_return_key_in_func_decl_in_type7306);
            return_key510=return_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_return_key.add(return_key510.getTree());

            pushFollow(FOLLOW_type_spec_in_func_decl_in_type7308);
            type_spec511=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec511.getTree());

            // PLSQLParser.g:732:9: ( is_key | as_key )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==SQL92_RESERVED_IS) ) {
                alt144=1;
            }
            else if ( (LA144_0==SQL92_RESERVED_AS) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // PLSQLParser.g:732:10: is_key
                    {
                    pushFollow(FOLLOW_is_key_in_func_decl_in_type7319);
                    is_key512=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key512.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:732:17: as_key
                    {
                    pushFollow(FOLLOW_as_key_in_func_decl_in_type7321);
                    as_key513=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key513.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:733:13: ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==REGULAR_ID) ) {
                int LA147_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
                    alt147=1;
                }
                else if ( (true) ) {
                    alt147=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA147_0==BINDVAR||LA147_0==COLON||LA147_0==DELIMITED_ID||LA147_0==INTRODUCER||LA147_0==SQL92_RESERVED_BEGIN||LA147_0==SQL92_RESERVED_CREATE||LA147_0==SQL92_RESERVED_CURSOR||LA147_0==SQL92_RESERVED_DECLARE||LA147_0==SQL92_RESERVED_PROCEDURE) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;

            }
            switch (alt147) {
                case 1 :
                    // PLSQLParser.g:733:14: call_spec
                    {
                    pushFollow(FOLLOW_call_spec_in_func_decl_in_type7337);
                    call_spec514=call_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_call_spec.add(call_spec514.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:733:36: ( declare_key )? ( declare_spec )* body SEMICOLON
                    {
                    // PLSQLParser.g:733:36: ( declare_key )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==SQL92_RESERVED_DECLARE) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // PLSQLParser.g:733:36: declare_key
                            {
                            pushFollow(FOLLOW_declare_key_in_func_decl_in_type7341);
                            declare_key515=declare_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_declare_key.add(declare_key515.getTree());

                            }
                            break;

                    }


                    // PLSQLParser.g:733:49: ( declare_spec )*
                    loop146:
                    do {
                        int alt146=2;
                        int LA146_0 = input.LA(1);

                        if ( (LA146_0==BINDVAR||LA146_0==COLON||LA146_0==DELIMITED_ID||LA146_0==INTRODUCER||LA146_0==REGULAR_ID||LA146_0==SQL92_RESERVED_CREATE||LA146_0==SQL92_RESERVED_CURSOR||LA146_0==SQL92_RESERVED_PROCEDURE) ) {
                            alt146=1;
                        }


                        switch (alt146) {
                    	case 1 :
                    	    // PLSQLParser.g:733:49: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_func_decl_in_type7344);
                    	    declare_spec516=declare_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_declare_spec.add(declare_spec516.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop146;
                        }
                    } while (true);


                    pushFollow(FOLLOW_body_in_func_decl_in_type7347);
                    body517=body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_body.add(body517.getTree());

                    SEMICOLON518=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_func_decl_in_type7349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON518);


                    }
                    break;

            }


            // AST REWRITE
            // elements: declare_spec, type_spec, type_spec, function_name, body, type_elements_parameter, call_spec, type_elements_parameter, function_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 734:9: -> {mode == 1}? ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
            if (mode == 1) {
                // PLSQLParser.g:734:25: ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_FUNCTION, "CREATE_FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:734:67: ^( PARAMETERS ( type_elements_parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:734:80: ( type_elements_parameter )*
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:734:106: ^( CALL_MODE call_spec )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CALL_MODE, "CALL_MODE")
                , root_2);

                adaptor.addChild(root_2, stream_call_spec.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 735:9: -> ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE ( declare_spec )* body ) )
            {
                // PLSQLParser.g:735:12: ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE ( declare_spec )* body ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_FUNCTION, "CREATE_FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:735:54: ^( PARAMETERS ( type_elements_parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:735:67: ( type_elements_parameter )*
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:735:93: ^( BODY_MODE ( declare_spec )* body )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BODY_MODE, "BODY_MODE")
                , root_2);

                // PLSQLParser.g:735:105: ( declare_spec )*
                while ( stream_declare_spec.hasNext() ) {
                    adaptor.addChild(root_2, stream_declare_spec.nextTree());

                }
                stream_declare_spec.reset();

                adaptor.addChild(root_2, stream_body.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_decl_in_type"


    public static class constructor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructor_declaration"
    // PLSQLParser.g:738:1: constructor_declaration : ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( is_key | as_key ) ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON ) -> {mode == 1}? ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE ( declare_spec )* body ) ) ;
    public final constructor_declaration_return constructor_declaration() throws RecognitionException {
        constructor_declaration_return retval = new constructor_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN524=null;
        Token COMMA529=null;
        Token COMMA531=null;
        Token RIGHT_PAREN533=null;
        Token SEMICOLON544=null;
        PLSQLParser_PLSQLKeys.final_key_return final_key519 =null;

        PLSQLParser_PLSQLKeys.instantiable_key_return instantiable_key520 =null;

        PLSQLParser_PLSQLKeys.constructor_key_return constructor_key521 =null;

        PLSQLParser_PLSQLKeys.function_key_return function_key522 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec523 =null;

        PLSQLParser_PLSQLKeys.self_key_return self_key525 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key526 =null;

        PLSQLParser_PLSQLKeys.out_key_return out_key527 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec528 =null;

        type_elements_parameter_return type_elements_parameter530 =null;

        type_elements_parameter_return type_elements_parameter532 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key534 =null;

        PLSQLParser_PLSQLKeys.self_key_return self_key535 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key536 =null;

        PLSQLParser_PLSQLKeys.result_key_return result_key537 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key538 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key539 =null;

        call_spec_return call_spec540 =null;

        PLSQLParser_PLSQLKeys.declare_key_return declare_key541 =null;

        declare_spec_return declare_spec542 =null;

        body_return body543 =null;


        Object LEFT_PAREN524_tree=null;
        Object COMMA529_tree=null;
        Object COMMA531_tree=null;
        Object RIGHT_PAREN533_tree=null;
        Object SEMICOLON544_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_self_key=new RewriteRuleSubtreeStream(adaptor,"rule self_key");
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
        RewriteRuleSubtreeStream stream_declare_spec=new RewriteRuleSubtreeStream(adaptor,"rule declare_spec");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_final_key=new RewriteRuleSubtreeStream(adaptor,"rule final_key");
        RewriteRuleSubtreeStream stream_instantiable_key=new RewriteRuleSubtreeStream(adaptor,"rule instantiable_key");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_constructor_key=new RewriteRuleSubtreeStream(adaptor,"rule constructor_key");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
        RewriteRuleSubtreeStream stream_out_key=new RewriteRuleSubtreeStream(adaptor,"rule out_key");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:740:5: ( ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( is_key | as_key ) ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON ) -> {mode == 1}? ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE ( declare_spec )* body ) ) )
            // PLSQLParser.g:740:10: ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( is_key | as_key ) ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON )
            {
            // PLSQLParser.g:740:10: ( final_key )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))))) {
                int LA148_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("final"))) ) {
                    alt148=1;
                }
            }
            switch (alt148) {
                case 1 :
                    // PLSQLParser.g:740:10: final_key
                    {
                    pushFollow(FOLLOW_final_key_in_constructor_declaration7445);
                    final_key519=final_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_final_key.add(final_key519.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:740:21: ( instantiable_key )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))))) {
                int LA149_1 = input.LA(2);

                if ( (LA149_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))))) {
                    int LA149_2 = input.LA(3);

                    if ( (LA149_2==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))))) {
                        int LA149_3 = input.LA(4);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("instantiable"))) ) {
                            alt149=1;
                        }
                    }
                }
            }
            switch (alt149) {
                case 1 :
                    // PLSQLParser.g:740:21: instantiable_key
                    {
                    pushFollow(FOLLOW_instantiable_key_in_constructor_declaration7448);
                    instantiable_key520=instantiable_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instantiable_key.add(instantiable_key520.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_constructor_key_in_constructor_declaration7451);
            constructor_key521=constructor_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constructor_key.add(constructor_key521.getTree());

            pushFollow(FOLLOW_function_key_in_constructor_declaration7453);
            function_key522=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key522.getTree());

            pushFollow(FOLLOW_type_spec_in_constructor_declaration7455);
            type_spec523=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec523.getTree());

            // PLSQLParser.g:741:9: ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==LEFT_PAREN) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // PLSQLParser.g:741:10: LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN
                    {
                    LEFT_PAREN524=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constructor_declaration7466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN524);


                    // PLSQLParser.g:741:21: ( self_key in_key out_key type_spec COMMA )
                    // PLSQLParser.g:741:22: self_key in_key out_key type_spec COMMA
                    {
                    pushFollow(FOLLOW_self_key_in_constructor_declaration7469);
                    self_key525=self_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_self_key.add(self_key525.getTree());

                    pushFollow(FOLLOW_in_key_in_constructor_declaration7471);
                    in_key526=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_in_key.add(in_key526.getTree());

                    pushFollow(FOLLOW_out_key_in_constructor_declaration7473);
                    out_key527=out_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_out_key.add(out_key527.getTree());

                    pushFollow(FOLLOW_type_spec_in_constructor_declaration7475);
                    type_spec528=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec528.getTree());

                    COMMA529=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_declaration7477); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA529);


                    }


                    pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration7480);
                    type_elements_parameter530=type_elements_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter530.getTree());

                    // PLSQLParser.g:741:87: ( COMMA type_elements_parameter )*
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==COMMA) ) {
                            alt150=1;
                        }


                        switch (alt150) {
                    	case 1 :
                    	    // PLSQLParser.g:741:88: COMMA type_elements_parameter
                    	    {
                    	    COMMA531=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_declaration7483); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA531);


                    	    pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration7485);
                    	    type_elements_parameter532=type_elements_parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter532.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);


                    RIGHT_PAREN533=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constructor_declaration7490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN533);


                    }
                    break;

            }


            pushFollow(FOLLOW_return_key_in_constructor_declaration7502);
            return_key534=return_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_return_key.add(return_key534.getTree());

            pushFollow(FOLLOW_self_key_in_constructor_declaration7504);
            self_key535=self_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_self_key.add(self_key535.getTree());

            pushFollow(FOLLOW_as_key_in_constructor_declaration7506);
            as_key536=as_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_as_key.add(as_key536.getTree());

            pushFollow(FOLLOW_result_key_in_constructor_declaration7508);
            result_key537=result_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_result_key.add(result_key537.getTree());

            // PLSQLParser.g:743:9: ( is_key | as_key )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==SQL92_RESERVED_IS) ) {
                alt152=1;
            }
            else if ( (LA152_0==SQL92_RESERVED_AS) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }
            switch (alt152) {
                case 1 :
                    // PLSQLParser.g:743:10: is_key
                    {
                    pushFollow(FOLLOW_is_key_in_constructor_declaration7520);
                    is_key538=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key538.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:743:17: as_key
                    {
                    pushFollow(FOLLOW_as_key_in_constructor_declaration7522);
                    as_key539=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key539.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:744:13: ( call_spec | ( declare_key )? ( declare_spec )* body SEMICOLON )
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==REGULAR_ID) ) {
                int LA155_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
                    alt155=1;
                }
                else if ( (true) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA155_0==BINDVAR||LA155_0==COLON||LA155_0==DELIMITED_ID||LA155_0==INTRODUCER||LA155_0==SQL92_RESERVED_BEGIN||LA155_0==SQL92_RESERVED_CREATE||LA155_0==SQL92_RESERVED_CURSOR||LA155_0==SQL92_RESERVED_DECLARE||LA155_0==SQL92_RESERVED_PROCEDURE) ) {
                alt155=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;

            }
            switch (alt155) {
                case 1 :
                    // PLSQLParser.g:744:14: call_spec
                    {
                    pushFollow(FOLLOW_call_spec_in_constructor_declaration7539);
                    call_spec540=call_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_call_spec.add(call_spec540.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:744:36: ( declare_key )? ( declare_spec )* body SEMICOLON
                    {
                    // PLSQLParser.g:744:36: ( declare_key )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==SQL92_RESERVED_DECLARE) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // PLSQLParser.g:744:36: declare_key
                            {
                            pushFollow(FOLLOW_declare_key_in_constructor_declaration7543);
                            declare_key541=declare_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_declare_key.add(declare_key541.getTree());

                            }
                            break;

                    }


                    // PLSQLParser.g:744:49: ( declare_spec )*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==BINDVAR||LA154_0==COLON||LA154_0==DELIMITED_ID||LA154_0==INTRODUCER||LA154_0==REGULAR_ID||LA154_0==SQL92_RESERVED_CREATE||LA154_0==SQL92_RESERVED_CURSOR||LA154_0==SQL92_RESERVED_PROCEDURE) ) {
                            alt154=1;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // PLSQLParser.g:744:49: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_constructor_declaration7546);
                    	    declare_spec542=declare_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_declare_spec.add(declare_spec542.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);


                    pushFollow(FOLLOW_body_in_constructor_declaration7549);
                    body543=body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_body.add(body543.getTree());

                    SEMICOLON544=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_constructor_declaration7551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON544);


                    }
                    break;

            }


            // AST REWRITE
            // elements: constructor_key, type_elements_parameter, constructor_key, declare_spec, type_spec, final_key, final_key, instantiable_key, call_spec, body, type_elements_parameter, instantiable_key, type_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 745:9: -> {mode == 1}? ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
            if (mode == 1) {
                // PLSQLParser.g:745:25: ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_constructor_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:745:53: ( final_key )?
                if ( stream_final_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_final_key.nextTree());

                }
                stream_final_key.reset();

                // PLSQLParser.g:745:64: ( instantiable_key )?
                if ( stream_instantiable_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_instantiable_key.nextTree());

                }
                stream_instantiable_key.reset();

                // PLSQLParser.g:745:82: ^( PARAMETERS ( type_elements_parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:745:95: ( type_elements_parameter )*
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:745:121: ^( CALL_MODE call_spec )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CALL_MODE, "CALL_MODE")
                , root_2);

                adaptor.addChild(root_2, stream_call_spec.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 746:9: -> ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE ( declare_spec )* body ) )
            {
                // PLSQLParser.g:746:12: ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE ( declare_spec )* body ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_constructor_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:746:40: ( final_key )?
                if ( stream_final_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_final_key.nextTree());

                }
                stream_final_key.reset();

                // PLSQLParser.g:746:51: ( instantiable_key )?
                if ( stream_instantiable_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_instantiable_key.nextTree());

                }
                stream_instantiable_key.reset();

                // PLSQLParser.g:746:69: ^( PARAMETERS ( type_elements_parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:746:82: ( type_elements_parameter )*
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:746:108: ^( BODY_MODE ( declare_spec )* body )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BODY_MODE, "BODY_MODE")
                , root_2);

                // PLSQLParser.g:746:120: ( declare_spec )*
                while ( stream_declare_spec.hasNext() ) {
                    adaptor.addChild(root_2, stream_declare_spec.nextTree());

                }
                stream_declare_spec.reset();

                adaptor.addChild(root_2, stream_body.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_declaration"


    public static class modifier_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "modifier_clause"
    // PLSQLParser.g:753:1: modifier_clause : ( not_key )? ( instantiable_key | final_key | overriding_key ) -> ^( MODIFIER ( not_key )? ( instantiable_key )? ( final_key )? ( overriding_key )? ) ;
    public final modifier_clause_return modifier_clause() throws RecognitionException {
        modifier_clause_return retval = new modifier_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.not_key_return not_key545 =null;

        PLSQLParser_PLSQLKeys.instantiable_key_return instantiable_key546 =null;

        PLSQLParser_PLSQLKeys.final_key_return final_key547 =null;

        PLSQLParser_PLSQLKeys.overriding_key_return overriding_key548 =null;


        RewriteRuleSubtreeStream stream_final_key=new RewriteRuleSubtreeStream(adaptor,"rule final_key");
        RewriteRuleSubtreeStream stream_instantiable_key=new RewriteRuleSubtreeStream(adaptor,"rule instantiable_key");
        RewriteRuleSubtreeStream stream_overriding_key=new RewriteRuleSubtreeStream(adaptor,"rule overriding_key");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        try {
            // PLSQLParser.g:754:5: ( ( not_key )? ( instantiable_key | final_key | overriding_key ) -> ^( MODIFIER ( not_key )? ( instantiable_key )? ( final_key )? ( overriding_key )? ) )
            // PLSQLParser.g:754:10: ( not_key )? ( instantiable_key | final_key | overriding_key )
            {
            // PLSQLParser.g:754:10: ( not_key )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==SQL92_RESERVED_NOT) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // PLSQLParser.g:754:10: not_key
                    {
                    pushFollow(FOLLOW_not_key_in_modifier_clause7651);
                    not_key545=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_not_key.add(not_key545.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:754:19: ( instantiable_key | final_key | overriding_key )
            int alt157=3;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("final"))))) {
                int LA157_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("instantiable"))) ) {
                    alt157=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("final"))) ) {
                    alt157=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("overriding"))) ) {
                    alt157=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 157, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;

            }
            switch (alt157) {
                case 1 :
                    // PLSQLParser.g:754:20: instantiable_key
                    {
                    pushFollow(FOLLOW_instantiable_key_in_modifier_clause7655);
                    instantiable_key546=instantiable_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instantiable_key.add(instantiable_key546.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:754:37: final_key
                    {
                    pushFollow(FOLLOW_final_key_in_modifier_clause7657);
                    final_key547=final_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_final_key.add(final_key547.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:754:47: overriding_key
                    {
                    pushFollow(FOLLOW_overriding_key_in_modifier_clause7659);
                    overriding_key548=overriding_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_overriding_key.add(overriding_key548.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: instantiable_key, not_key, overriding_key, final_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 755:5: -> ^( MODIFIER ( not_key )? ( instantiable_key )? ( final_key )? ( overriding_key )? )
            {
                // PLSQLParser.g:755:11: ^( MODIFIER ( not_key )? ( instantiable_key )? ( final_key )? ( overriding_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                // PLSQLParser.g:755:22: ( not_key )?
                if ( stream_not_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_not_key.nextTree());

                }
                stream_not_key.reset();

                // PLSQLParser.g:755:31: ( instantiable_key )?
                if ( stream_instantiable_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_instantiable_key.nextTree());

                }
                stream_instantiable_key.reset();

                // PLSQLParser.g:755:49: ( final_key )?
                if ( stream_final_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_final_key.nextTree());

                }
                stream_final_key.reset();

                // PLSQLParser.g:755:60: ( overriding_key )?
                if ( stream_overriding_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_overriding_key.nextTree());

                }
                stream_overriding_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "modifier_clause"


    public static class object_member_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_member_spec"
    // PLSQLParser.g:758:1: object_member_spec options {backtrack=true; } : ( id type_spec ( sqlj_object_type_attr )? -> ^( ELEMENT_SPEC ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) ) | element_spec );
    public final object_member_spec_return object_member_spec() throws RecognitionException {
        object_member_spec_return retval = new object_member_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.id_return id549 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec550 =null;

        sqlj_object_type_attr_return sqlj_object_type_attr551 =null;

        element_spec_return element_spec552 =null;


        RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_sqlj_object_type_attr=new RewriteRuleSubtreeStream(adaptor,"rule sqlj_object_type_attr");
        try {
            // PLSQLParser.g:761:6: ( id type_spec ( sqlj_object_type_attr )? -> ^( ELEMENT_SPEC ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) ) | element_spec )
            int alt159=2;
            switch ( input.LA(1) ) {
            case DELIMITED_ID:
            case INTRODUCER:
                {
                alt159=1;
                }
                break;
            case REGULAR_ID:
                {
                int LA159_2 = input.LA(2);

                if ( (synpred34_PLSQLParser()) ) {
                    alt159=1;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("map")))) ) {
                    alt159=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 2, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_ORDER:
                {
                alt159=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;

            }

            switch (alt159) {
                case 1 :
                    // PLSQLParser.g:761:11: id type_spec ( sqlj_object_type_attr )?
                    {
                    pushFollow(FOLLOW_id_in_object_member_spec7713);
                    id549=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_id.add(id549.getTree());

                    pushFollow(FOLLOW_type_spec_in_object_member_spec7715);
                    type_spec550=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec550.getTree());

                    // PLSQLParser.g:761:24: ( sqlj_object_type_attr )?
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==REGULAR_ID) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            // PLSQLParser.g:761:24: sqlj_object_type_attr
                            {
                            pushFollow(FOLLOW_sqlj_object_type_attr_in_object_member_spec7717);
                            sqlj_object_type_attr551=sqlj_object_type_attr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sqlj_object_type_attr.add(sqlj_object_type_attr551.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: sqlj_object_type_attr, id, type_spec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 761:47: -> ^( ELEMENT_SPEC ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) )
                    {
                        // PLSQLParser.g:761:50: ^( ELEMENT_SPEC ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ELEMENT_SPEC, "ELEMENT_SPEC")
                        , root_1);

                        // PLSQLParser.g:761:65: ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD_SPEC, "FIELD_SPEC")
                        , root_2);

                        adaptor.addChild(root_2, stream_id.nextTree());

                        adaptor.addChild(root_2, stream_type_spec.nextTree());

                        // PLSQLParser.g:761:91: ( sqlj_object_type_attr )?
                        if ( stream_sqlj_object_type_attr.hasNext() ) {
                            adaptor.addChild(root_2, stream_sqlj_object_type_attr.nextTree());

                        }
                        stream_sqlj_object_type_attr.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:762:10: element_spec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_element_spec_in_object_member_spec7746);
                    element_spec552=element_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_spec552.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_member_spec"


    public static class sqlj_object_type_attr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sqlj_object_type_attr"
    // PLSQLParser.g:765:1: sqlj_object_type_attr : external_key name_key expression -> ^( external_key ^( EXPR expression ) ) ;
    public final sqlj_object_type_attr_return sqlj_object_type_attr() throws RecognitionException {
        sqlj_object_type_attr_return retval = new sqlj_object_type_attr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.external_key_return external_key553 =null;

        PLSQLParser_PLSQLKeys.name_key_return name_key554 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression555 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_name_key=new RewriteRuleSubtreeStream(adaptor,"rule name_key");
        RewriteRuleSubtreeStream stream_external_key=new RewriteRuleSubtreeStream(adaptor,"rule external_key");
        try {
            // PLSQLParser.g:766:5: ( external_key name_key expression -> ^( external_key ^( EXPR expression ) ) )
            // PLSQLParser.g:766:10: external_key name_key expression
            {
            pushFollow(FOLLOW_external_key_in_sqlj_object_type_attr7766);
            external_key553=external_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_external_key.add(external_key553.getTree());

            pushFollow(FOLLOW_name_key_in_sqlj_object_type_attr7768);
            name_key554=name_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_key.add(name_key554.getTree());

            pushFollow(FOLLOW_expression_in_sqlj_object_type_attr7770);
            expression555=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression555.getTree());

            // AST REWRITE
            // elements: expression, external_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 767:9: -> ^( external_key ^( EXPR expression ) )
            {
                // PLSQLParser.g:767:12: ^( external_key ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_external_key.nextNode(), root_1);

                // PLSQLParser.g:767:27: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sqlj_object_type_attr"


    public static class element_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_spec"
    // PLSQLParser.g:770:1: element_spec : ( modifier_clause )? ( element_spec_options )+ ( COMMA pragma_clause )? -> ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) ;
    public final element_spec_return element_spec() throws RecognitionException {
        element_spec_return retval = new element_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA558=null;
        modifier_clause_return modifier_clause556 =null;

        element_spec_options_return element_spec_options557 =null;

        pragma_clause_return pragma_clause559 =null;


        Object COMMA558_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_modifier_clause=new RewriteRuleSubtreeStream(adaptor,"rule modifier_clause");
        RewriteRuleSubtreeStream stream_pragma_clause=new RewriteRuleSubtreeStream(adaptor,"rule pragma_clause");
        RewriteRuleSubtreeStream stream_element_spec_options=new RewriteRuleSubtreeStream(adaptor,"rule element_spec_options");
        try {
            // PLSQLParser.g:771:5: ( ( modifier_clause )? ( element_spec_options )+ ( COMMA pragma_clause )? -> ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) )
            // PLSQLParser.g:771:10: ( modifier_clause )? ( element_spec_options )+ ( COMMA pragma_clause )?
            {
            // PLSQLParser.g:771:10: ( modifier_clause )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==SQL92_RESERVED_NOT) ) {
                alt160=1;
            }
            else if ( (LA160_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                int LA160_2 = input.LA(2);

                if ( (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("final")))) ) {
                    alt160=1;
                }
            }
            switch (alt160) {
                case 1 :
                    // PLSQLParser.g:771:10: modifier_clause
                    {
                    pushFollow(FOLLOW_modifier_clause_in_element_spec7810);
                    modifier_clause556=modifier_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifier_clause.add(modifier_clause556.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:772:9: ( element_spec_options )+
            int cnt161=0;
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                    alt161=1;
                }
                else if ( (LA161_0==SQL92_RESERVED_ORDER) ) {
                    alt161=1;
                }


                switch (alt161) {
            	case 1 :
            	    // PLSQLParser.g:772:9: element_spec_options
            	    {
            	    pushFollow(FOLLOW_element_spec_options_in_element_spec7821);
            	    element_spec_options557=element_spec_options();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_element_spec_options.add(element_spec_options557.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt161 >= 1 ) break loop161;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(161, input);
                        throw eee;
                }
                cnt161++;
            } while (true);


            // PLSQLParser.g:773:9: ( COMMA pragma_clause )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==COMMA) ) {
                int LA162_1 = input.LA(2);

                if ( (LA162_1==REGULAR_ID) ) {
                    int LA162_3 = input.LA(3);

                    if ( (LA162_3==REGULAR_ID) ) {
                        int LA162_4 = input.LA(4);

                        if ( (LA162_4==LEFT_PAREN) ) {
                            int LA162_5 = input.LA(5);

                            if ( (LA162_5==DELIMITED_ID||LA162_5==INTRODUCER||LA162_5==REGULAR_ID||LA162_5==SQL92_RESERVED_DEFAULT) ) {
                                alt162=1;
                            }
                        }
                    }
                }
            }
            switch (alt162) {
                case 1 :
                    // PLSQLParser.g:773:10: COMMA pragma_clause
                    {
                    COMMA558=(Token)match(input,COMMA,FOLLOW_COMMA_in_element_spec7833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA558);


                    pushFollow(FOLLOW_pragma_clause_in_element_spec7835);
                    pragma_clause559=pragma_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pragma_clause.add(pragma_clause559.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: element_spec_options, modifier_clause, pragma_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 774:9: -> ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
            {
                // PLSQLParser.g:774:12: ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELEMENT_SPEC, "ELEMENT_SPEC")
                , root_1);

                if ( !(stream_element_spec_options.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_element_spec_options.hasNext() ) {
                    adaptor.addChild(root_1, stream_element_spec_options.nextTree());

                }
                stream_element_spec_options.reset();

                // PLSQLParser.g:774:49: ( modifier_clause )?
                if ( stream_modifier_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_modifier_clause.nextTree());

                }
                stream_modifier_clause.reset();

                // PLSQLParser.g:774:66: ( pragma_clause )?
                if ( stream_pragma_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_pragma_clause.nextTree());

                }
                stream_pragma_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_spec"


    public static class element_spec_options_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_spec_options"
    // PLSQLParser.g:777:1: element_spec_options : ( subprogram_spec | constructor_spec | map_order_function_spec );
    public final element_spec_options_return element_spec_options() throws RecognitionException {
        element_spec_options_return retval = new element_spec_options_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        subprogram_spec_return subprogram_spec560 =null;

        constructor_spec_return constructor_spec561 =null;

        map_order_function_spec_return map_order_function_spec562 =null;



        try {
            // PLSQLParser.g:778:5: ( subprogram_spec | constructor_spec | map_order_function_spec )
            int alt163=3;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
                int LA163_1 = input.LA(2);

                if ( (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member")))) ) {
                    alt163=1;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final")))) ) {
                    alt163=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("map"))) ) {
                    alt163=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 163, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA163_0==SQL92_RESERVED_ORDER) ) {
                alt163=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;

            }
            switch (alt163) {
                case 1 :
                    // PLSQLParser.g:778:10: subprogram_spec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_subprogram_spec_in_element_spec_options7880);
                    subprogram_spec560=subprogram_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_spec560.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:779:10: constructor_spec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_constructor_spec_in_element_spec_options7891);
                    constructor_spec561=constructor_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec561.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:780:10: map_order_function_spec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_map_order_function_spec_in_element_spec_options7902);
                    map_order_function_spec562=map_order_function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_function_spec562.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_spec_options"


    public static class subprogram_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subprogram_spec"
    // PLSQLParser.g:783:1: subprogram_spec : ( member_key ^| static_key ^) ( type_procedure_spec | type_function_spec ) ;
    public final subprogram_spec_return subprogram_spec() throws RecognitionException {
        subprogram_spec_return retval = new subprogram_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.member_key_return member_key563 =null;

        PLSQLParser_PLSQLKeys.static_key_return static_key564 =null;

        type_procedure_spec_return type_procedure_spec565 =null;

        type_function_spec_return type_function_spec566 =null;



        try {
            // PLSQLParser.g:784:5: ( ( member_key ^| static_key ^) ( type_procedure_spec | type_function_spec ) )
            // PLSQLParser.g:784:10: ( member_key ^| static_key ^) ( type_procedure_spec | type_function_spec )
            {
            root_0 = (Object)adaptor.nil();


            // PLSQLParser.g:784:10: ( member_key ^| static_key ^)
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
                int LA164_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("member"))) ) {
                    alt164=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("static"))) ) {
                    alt164=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 164, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 164, 0, input);

                throw nvae;

            }
            switch (alt164) {
                case 1 :
                    // PLSQLParser.g:784:11: member_key ^
                    {
                    pushFollow(FOLLOW_member_key_in_subprogram_spec7923);
                    member_key563=member_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(member_key563.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:784:23: static_key ^
                    {
                    pushFollow(FOLLOW_static_key_in_subprogram_spec7926);
                    static_key564=static_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(static_key564.getTree(), root_0);

                    }
                    break;

            }


            // PLSQLParser.g:785:9: ( type_procedure_spec | type_function_spec )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==SQL92_RESERVED_PROCEDURE) ) {
                alt165=1;
            }
            else if ( (LA165_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;

            }
            switch (alt165) {
                case 1 :
                    // PLSQLParser.g:785:10: type_procedure_spec
                    {
                    pushFollow(FOLLOW_type_procedure_spec_in_subprogram_spec7939);
                    type_procedure_spec565=type_procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_procedure_spec565.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:785:30: type_function_spec
                    {
                    pushFollow(FOLLOW_type_function_spec_in_subprogram_spec7941);
                    type_function_spec566=type_function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_function_spec566.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subprogram_spec"


    public static class type_procedure_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_procedure_spec"
    // PLSQLParser.g:788:1: type_procedure_spec : procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( ( is_key | as_key ) call_spec )? -> {mode == 1}? ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) ) -> ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ) ;
    public final type_procedure_spec_return type_procedure_spec() throws RecognitionException {
        type_procedure_spec_return retval = new type_procedure_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN569=null;
        Token COMMA571=null;
        Token RIGHT_PAREN573=null;
        PLSQLParser_PLSQLKeys.procedure_key_return procedure_key567 =null;

        PLSQLParser_PLSQLCommons.procedure_name_return procedure_name568 =null;

        type_elements_parameter_return type_elements_parameter570 =null;

        type_elements_parameter_return type_elements_parameter572 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key574 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key575 =null;

        call_spec_return call_spec576 =null;


        Object LEFT_PAREN569_tree=null;
        Object COMMA571_tree=null;
        Object RIGHT_PAREN573_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
        RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
        RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:790:5: ( procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( ( is_key | as_key ) call_spec )? -> {mode == 1}? ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) ) -> ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ) )
            // PLSQLParser.g:790:10: procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( ( is_key | as_key ) call_spec )?
            {
            pushFollow(FOLLOW_procedure_key_in_type_procedure_spec7970);
            procedure_key567=procedure_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key567.getTree());

            pushFollow(FOLLOW_procedure_name_in_type_procedure_spec7972);
            procedure_name568=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name568.getTree());

            LEFT_PAREN569=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_type_procedure_spec7982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN569);


            pushFollow(FOLLOW_type_elements_parameter_in_type_procedure_spec7984);
            type_elements_parameter570=type_elements_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter570.getTree());

            // PLSQLParser.g:791:44: ( COMMA type_elements_parameter )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==COMMA) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // PLSQLParser.g:791:45: COMMA type_elements_parameter
            	    {
            	    COMMA571=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_procedure_spec7987); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA571);


            	    pushFollow(FOLLOW_type_elements_parameter_in_type_procedure_spec7989);
            	    type_elements_parameter572=type_elements_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter572.getTree());

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);


            RIGHT_PAREN573=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_type_procedure_spec7993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN573);


            // PLSQLParser.g:792:9: ( ( is_key | as_key ) call_spec )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==SQL92_RESERVED_AS||LA168_0==SQL92_RESERVED_IS) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // PLSQLParser.g:792:10: ( is_key | as_key ) call_spec
                    {
                    // PLSQLParser.g:792:10: ( is_key | as_key )
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==SQL92_RESERVED_IS) ) {
                        alt167=1;
                    }
                    else if ( (LA167_0==SQL92_RESERVED_AS) ) {
                        alt167=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 167, 0, input);

                        throw nvae;

                    }
                    switch (alt167) {
                        case 1 :
                            // PLSQLParser.g:792:11: is_key
                            {
                            pushFollow(FOLLOW_is_key_in_type_procedure_spec8005);
                            is_key574=is_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_is_key.add(is_key574.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:792:18: as_key
                            {
                            pushFollow(FOLLOW_as_key_in_type_procedure_spec8007);
                            as_key575=as_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_as_key.add(as_key575.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_call_spec_in_type_procedure_spec8010);
                    call_spec576=call_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_call_spec.add(call_spec576.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: procedure_name, procedure_name, type_elements_parameter, type_elements_parameter, call_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 793:9: -> {mode == 1}? ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) )
            if (mode == 1) {
                // PLSQLParser.g:793:24: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROCEDURE_SPEC, "PROCEDURE_SPEC")
                , root_1);

                adaptor.addChild(root_1, stream_procedure_name.nextTree());

                // PLSQLParser.g:793:56: ^( PARAMETERS ( type_elements_parameter )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                if ( !(stream_type_elements_parameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:793:95: ^( CALL_MODE call_spec )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CALL_MODE, "CALL_MODE")
                , root_2);

                adaptor.addChild(root_2, stream_call_spec.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 794:9: -> ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) )
            {
                // PLSQLParser.g:794:12: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROCEDURE_SPEC, "PROCEDURE_SPEC")
                , root_1);

                adaptor.addChild(root_1, stream_procedure_name.nextTree());

                // PLSQLParser.g:794:44: ^( PARAMETERS ( type_elements_parameter )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                if ( !(stream_type_elements_parameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_procedure_spec"


    public static class type_function_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_function_spec"
    // PLSQLParser.g:797:1: type_function_spec : function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key ( type_spec | self_key as_key result_key ) ( ( is_key | as_key ) call_spec | external_key ( variable_key )? name_key expression )? -> {mode == 1}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> {mode == 2}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( external_key ^( EXPR expression ) ) ) -> ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ) ;
    public final type_function_spec_return type_function_spec() throws RecognitionException {
        type_function_spec_return retval = new type_function_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN579=null;
        Token COMMA581=null;
        Token RIGHT_PAREN583=null;
        PLSQLParser_PLSQLKeys.function_key_return function_key577 =null;

        PLSQLParser_PLSQLCommons.function_name_return function_name578 =null;

        type_elements_parameter_return type_elements_parameter580 =null;

        type_elements_parameter_return type_elements_parameter582 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key584 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec585 =null;

        PLSQLParser_PLSQLKeys.self_key_return self_key586 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key587 =null;

        PLSQLParser_PLSQLKeys.result_key_return result_key588 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key589 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key590 =null;

        call_spec_return call_spec591 =null;

        PLSQLParser_PLSQLKeys.external_key_return external_key592 =null;

        PLSQLParser_PLSQLKeys.variable_key_return variable_key593 =null;

        PLSQLParser_PLSQLKeys.name_key_return name_key594 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression595 =null;


        Object LEFT_PAREN579_tree=null;
        Object COMMA581_tree=null;
        Object RIGHT_PAREN583_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_self_key=new RewriteRuleSubtreeStream(adaptor,"rule self_key");
        RewriteRuleSubtreeStream stream_name_key=new RewriteRuleSubtreeStream(adaptor,"rule name_key");
        RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
        RewriteRuleSubtreeStream stream_variable_key=new RewriteRuleSubtreeStream(adaptor,"rule variable_key");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
        RewriteRuleSubtreeStream stream_external_key=new RewriteRuleSubtreeStream(adaptor,"rule external_key");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
        RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
            int mode = 0;    
        try {
            // PLSQLParser.g:799:5: ( function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key ( type_spec | self_key as_key result_key ) ( ( is_key | as_key ) call_spec | external_key ( variable_key )? name_key expression )? -> {mode == 1}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> {mode == 2}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( external_key ^( EXPR expression ) ) ) -> ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ) )
            // PLSQLParser.g:799:10: function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key ( type_spec | self_key as_key result_key ) ( ( is_key | as_key ) call_spec | external_key ( variable_key )? name_key expression )?
            {
            pushFollow(FOLLOW_function_key_in_type_function_spec8095);
            function_key577=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key577.getTree());

            pushFollow(FOLLOW_function_name_in_type_function_spec8097);
            function_name578=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_name.add(function_name578.getTree());

            // PLSQLParser.g:800:9: ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==LEFT_PAREN) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // PLSQLParser.g:800:10: LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN
                    {
                    LEFT_PAREN579=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_type_function_spec8109); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN579);


                    pushFollow(FOLLOW_type_elements_parameter_in_type_function_spec8111);
                    type_elements_parameter580=type_elements_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter580.getTree());

                    // PLSQLParser.g:800:45: ( COMMA type_elements_parameter )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==COMMA) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // PLSQLParser.g:800:46: COMMA type_elements_parameter
                    	    {
                    	    COMMA581=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_function_spec8114); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA581);


                    	    pushFollow(FOLLOW_type_elements_parameter_in_type_function_spec8116);
                    	    type_elements_parameter582=type_elements_parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter582.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);


                    RIGHT_PAREN583=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_type_function_spec8120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN583);


                    }
                    break;

            }


            pushFollow(FOLLOW_return_key_in_type_function_spec8133);
            return_key584=return_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_return_key.add(return_key584.getTree());

            // PLSQLParser.g:801:20: ( type_spec | self_key as_key result_key )
            int alt171=2;
            alt171 = dfa171.predict(input);
            switch (alt171) {
                case 1 :
                    // PLSQLParser.g:801:22: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_type_function_spec8137);
                    type_spec585=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec585.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:801:34: self_key as_key result_key
                    {
                    pushFollow(FOLLOW_self_key_in_type_function_spec8141);
                    self_key586=self_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_self_key.add(self_key586.getTree());

                    pushFollow(FOLLOW_as_key_in_type_function_spec8143);
                    as_key587=as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key587.getTree());

                    pushFollow(FOLLOW_result_key_in_type_function_spec8145);
                    result_key588=result_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_result_key.add(result_key588.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:802:9: ( ( is_key | as_key ) call_spec | external_key ( variable_key )? name_key expression )?
            int alt174=3;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==SQL92_RESERVED_AS||LA174_0==SQL92_RESERVED_IS) ) {
                alt174=1;
            }
            else if ( (LA174_0==REGULAR_ID) ) {
                int LA174_3 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                    alt174=2;
                }
            }
            switch (alt174) {
                case 1 :
                    // PLSQLParser.g:802:10: ( is_key | as_key ) call_spec
                    {
                    // PLSQLParser.g:802:10: ( is_key | as_key )
                    int alt172=2;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==SQL92_RESERVED_IS) ) {
                        alt172=1;
                    }
                    else if ( (LA172_0==SQL92_RESERVED_AS) ) {
                        alt172=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 172, 0, input);

                        throw nvae;

                    }
                    switch (alt172) {
                        case 1 :
                            // PLSQLParser.g:802:11: is_key
                            {
                            pushFollow(FOLLOW_is_key_in_type_function_spec8158);
                            is_key589=is_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_is_key.add(is_key589.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:802:18: as_key
                            {
                            pushFollow(FOLLOW_as_key_in_type_function_spec8160);
                            as_key590=as_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_as_key.add(as_key590.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_call_spec_in_type_function_spec8163);
                    call_spec591=call_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_call_spec.add(call_spec591.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:802:49: external_key ( variable_key )? name_key expression
                    {
                    pushFollow(FOLLOW_external_key_in_type_function_spec8168);
                    external_key592=external_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_external_key.add(external_key592.getTree());

                    // PLSQLParser.g:802:62: ( variable_key )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("name"))||(input.LT(1).getText().equalsIgnoreCase("variable"))))) {
                        int LA173_1 = input.LA(2);

                        if ( (LA173_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("name"))||(input.LT(1).getText().equalsIgnoreCase("variable"))))) {
                            int LA173_2 = input.LA(3);

                            if ( ((input.LT(1).getText().equalsIgnoreCase("variable"))) ) {
                                alt173=1;
                            }
                        }
                    }
                    switch (alt173) {
                        case 1 :
                            // PLSQLParser.g:802:62: variable_key
                            {
                            pushFollow(FOLLOW_variable_key_in_type_function_spec8170);
                            variable_key593=variable_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_variable_key.add(variable_key593.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_key_in_type_function_spec8173);
                    name_key594=name_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name_key.add(name_key594.getTree());

                    pushFollow(FOLLOW_expression_in_type_function_spec8175);
                    expression595=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression595.getTree());

                    if ( state.backtracking==0 ) {mode = 2;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: type_elements_parameter, call_spec, self_key, function_name, type_spec, type_elements_parameter, external_key, type_spec, type_spec, expression, self_key, type_elements_parameter, function_name, function_name, self_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 803:9: -> {mode == 1}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
            if (mode == 1) {
                // PLSQLParser.g:803:24: ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION_SPEC, "FUNCTION_SPEC")
                , root_1);

                adaptor.addChild(root_1, stream_function_name.nextTree());

                // PLSQLParser.g:803:54: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();

                // PLSQLParser.g:803:65: ( self_key )?
                if ( stream_self_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_self_key.nextTree());

                }
                stream_self_key.reset();

                // PLSQLParser.g:803:75: ^( PARAMETERS ( type_elements_parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:803:88: ( type_elements_parameter )*
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:803:114: ^( CALL_MODE call_spec )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CALL_MODE, "CALL_MODE")
                , root_2);

                adaptor.addChild(root_2, stream_call_spec.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 804:9: -> {mode == 2}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( external_key ^( EXPR expression ) ) )
            if (mode == 2) {
                // PLSQLParser.g:804:24: ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( external_key ^( EXPR expression ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION_SPEC, "FUNCTION_SPEC")
                , root_1);

                adaptor.addChild(root_1, stream_function_name.nextTree());

                // PLSQLParser.g:804:54: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();

                // PLSQLParser.g:804:65: ( self_key )?
                if ( stream_self_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_self_key.nextTree());

                }
                stream_self_key.reset();

                // PLSQLParser.g:804:75: ^( PARAMETERS ( type_elements_parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:804:88: ( type_elements_parameter )*
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:804:114: ^( external_key ^( EXPR expression ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_external_key.nextNode(), root_2);

                // PLSQLParser.g:804:129: ^( EXPR expression )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_expression.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 805:9: -> ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) )
            {
                // PLSQLParser.g:805:12: ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION_SPEC, "FUNCTION_SPEC")
                , root_1);

                adaptor.addChild(root_1, stream_function_name.nextTree());

                // PLSQLParser.g:805:42: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();

                // PLSQLParser.g:805:53: ( self_key )?
                if ( stream_self_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_self_key.nextTree());

                }
                stream_self_key.reset();

                // PLSQLParser.g:805:63: ^( PARAMETERS ( type_elements_parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:805:76: ( type_elements_parameter )*
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_function_spec"


    public static class constructor_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructor_spec"
    // PLSQLParser.g:808:1: constructor_spec : ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( ( is_key | as_key ) call_spec )? -> {mode == 1}? ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ) ;
    public final constructor_spec_return constructor_spec() throws RecognitionException {
        constructor_spec_return retval = new constructor_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN601=null;
        Token COMMA606=null;
        Token COMMA608=null;
        Token RIGHT_PAREN610=null;
        PLSQLParser_PLSQLKeys.final_key_return final_key596 =null;

        PLSQLParser_PLSQLKeys.instantiable_key_return instantiable_key597 =null;

        PLSQLParser_PLSQLKeys.constructor_key_return constructor_key598 =null;

        PLSQLParser_PLSQLKeys.function_key_return function_key599 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec600 =null;

        PLSQLParser_PLSQLKeys.self_key_return self_key602 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key603 =null;

        PLSQLParser_PLSQLKeys.out_key_return out_key604 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec605 =null;

        type_elements_parameter_return type_elements_parameter607 =null;

        type_elements_parameter_return type_elements_parameter609 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key611 =null;

        PLSQLParser_PLSQLKeys.self_key_return self_key612 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key613 =null;

        PLSQLParser_PLSQLKeys.result_key_return result_key614 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key615 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key616 =null;

        call_spec_return call_spec617 =null;


        Object LEFT_PAREN601_tree=null;
        Object COMMA606_tree=null;
        Object COMMA608_tree=null;
        Object RIGHT_PAREN610_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_self_key=new RewriteRuleSubtreeStream(adaptor,"rule self_key");
        RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_final_key=new RewriteRuleSubtreeStream(adaptor,"rule final_key");
        RewriteRuleSubtreeStream stream_instantiable_key=new RewriteRuleSubtreeStream(adaptor,"rule instantiable_key");
        RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
        RewriteRuleSubtreeStream stream_constructor_key=new RewriteRuleSubtreeStream(adaptor,"rule constructor_key");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
        RewriteRuleSubtreeStream stream_out_key=new RewriteRuleSubtreeStream(adaptor,"rule out_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:810:5: ( ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( ( is_key | as_key ) call_spec )? -> {mode == 1}? ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ) )
            // PLSQLParser.g:810:10: ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( ( is_key | as_key ) call_spec )?
            {
            // PLSQLParser.g:810:10: ( final_key )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))))) {
                int LA175_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("final"))) ) {
                    alt175=1;
                }
            }
            switch (alt175) {
                case 1 :
                    // PLSQLParser.g:810:10: final_key
                    {
                    pushFollow(FOLLOW_final_key_in_constructor_spec8312);
                    final_key596=final_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_final_key.add(final_key596.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:810:21: ( instantiable_key )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))))) {
                int LA176_1 = input.LA(2);

                if ( (LA176_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))))) {
                    int LA176_2 = input.LA(3);

                    if ( (LA176_2==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("constructor"))))) {
                        int LA176_3 = input.LA(4);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("instantiable"))) ) {
                            alt176=1;
                        }
                    }
                }
            }
            switch (alt176) {
                case 1 :
                    // PLSQLParser.g:810:21: instantiable_key
                    {
                    pushFollow(FOLLOW_instantiable_key_in_constructor_spec8315);
                    instantiable_key597=instantiable_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instantiable_key.add(instantiable_key597.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_constructor_key_in_constructor_spec8318);
            constructor_key598=constructor_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constructor_key.add(constructor_key598.getTree());

            pushFollow(FOLLOW_function_key_in_constructor_spec8320);
            function_key599=function_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_function_key.add(function_key599.getTree());

            pushFollow(FOLLOW_type_spec_in_constructor_spec8322);
            type_spec600=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec600.getTree());

            // PLSQLParser.g:811:9: ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==LEFT_PAREN) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // PLSQLParser.g:811:10: LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN
                    {
                    LEFT_PAREN601=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constructor_spec8333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN601);


                    // PLSQLParser.g:811:21: ( self_key in_key out_key type_spec COMMA )
                    // PLSQLParser.g:811:22: self_key in_key out_key type_spec COMMA
                    {
                    pushFollow(FOLLOW_self_key_in_constructor_spec8336);
                    self_key602=self_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_self_key.add(self_key602.getTree());

                    pushFollow(FOLLOW_in_key_in_constructor_spec8338);
                    in_key603=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_in_key.add(in_key603.getTree());

                    pushFollow(FOLLOW_out_key_in_constructor_spec8340);
                    out_key604=out_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_out_key.add(out_key604.getTree());

                    pushFollow(FOLLOW_type_spec_in_constructor_spec8342);
                    type_spec605=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec605.getTree());

                    COMMA606=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec8344); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA606);


                    }


                    pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec8347);
                    type_elements_parameter607=type_elements_parameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter607.getTree());

                    // PLSQLParser.g:811:87: ( COMMA type_elements_parameter )*
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==COMMA) ) {
                            alt177=1;
                        }


                        switch (alt177) {
                    	case 1 :
                    	    // PLSQLParser.g:811:88: COMMA type_elements_parameter
                    	    {
                    	    COMMA608=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec8350); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA608);


                    	    pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec8352);
                    	    type_elements_parameter609=type_elements_parameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter609.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop177;
                        }
                    } while (true);


                    RIGHT_PAREN610=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constructor_spec8357); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN610);


                    }
                    break;

            }


            pushFollow(FOLLOW_return_key_in_constructor_spec8369);
            return_key611=return_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_return_key.add(return_key611.getTree());

            pushFollow(FOLLOW_self_key_in_constructor_spec8371);
            self_key612=self_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_self_key.add(self_key612.getTree());

            pushFollow(FOLLOW_as_key_in_constructor_spec8373);
            as_key613=as_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_as_key.add(as_key613.getTree());

            pushFollow(FOLLOW_result_key_in_constructor_spec8375);
            result_key614=result_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_result_key.add(result_key614.getTree());

            // PLSQLParser.g:812:47: ( ( is_key | as_key ) call_spec )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==SQL92_RESERVED_AS||LA180_0==SQL92_RESERVED_IS) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // PLSQLParser.g:812:48: ( is_key | as_key ) call_spec
                    {
                    // PLSQLParser.g:812:48: ( is_key | as_key )
                    int alt179=2;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==SQL92_RESERVED_IS) ) {
                        alt179=1;
                    }
                    else if ( (LA179_0==SQL92_RESERVED_AS) ) {
                        alt179=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 179, 0, input);

                        throw nvae;

                    }
                    switch (alt179) {
                        case 1 :
                            // PLSQLParser.g:812:49: is_key
                            {
                            pushFollow(FOLLOW_is_key_in_constructor_spec8379);
                            is_key615=is_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_is_key.add(is_key615.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:812:56: as_key
                            {
                            pushFollow(FOLLOW_as_key_in_constructor_spec8381);
                            as_key616=as_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_as_key.add(as_key616.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_call_spec_in_constructor_spec8384);
                    call_spec617=call_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_call_spec.add(call_spec617.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: type_elements_parameter, instantiable_key, type_spec, type_elements_parameter, type_spec, call_spec, final_key, instantiable_key, final_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 813:9: -> {mode == 1}? ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
            if (mode == 1) {
                // PLSQLParser.g:813:24: ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONSTRUCTOR_SPEC, (constructor_key598!=null?((Token)constructor_key598.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:813:77: ( final_key )?
                if ( stream_final_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_final_key.nextTree());

                }
                stream_final_key.reset();

                // PLSQLParser.g:813:88: ( instantiable_key )?
                if ( stream_instantiable_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_instantiable_key.nextTree());

                }
                stream_instantiable_key.reset();

                // PLSQLParser.g:813:106: ^( PARAMETERS ( type_elements_parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:813:119: ( type_elements_parameter )*
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:813:145: ^( CALL_MODE call_spec )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CALL_MODE, "CALL_MODE")
                , root_2);

                adaptor.addChild(root_2, stream_call_spec.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 814:9: -> ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) )
            {
                // PLSQLParser.g:814:12: ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONSTRUCTOR_SPEC, (constructor_key598!=null?((Token)constructor_key598.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:814:65: ( final_key )?
                if ( stream_final_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_final_key.nextTree());

                }
                stream_final_key.reset();

                // PLSQLParser.g:814:76: ( instantiable_key )?
                if ( stream_instantiable_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_instantiable_key.nextTree());

                }
                stream_instantiable_key.reset();

                // PLSQLParser.g:814:94: ^( PARAMETERS ( type_elements_parameter )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:814:107: ( type_elements_parameter )*
                while ( stream_type_elements_parameter.hasNext() ) {
                    adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());

                }
                stream_type_elements_parameter.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_spec"


    public static class map_order_function_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_order_function_spec"
    // PLSQLParser.g:817:1: map_order_function_spec : ( map_key ^| order_key ^) member_key ! type_function_spec ;
    public final map_order_function_spec_return map_order_function_spec() throws RecognitionException {
        map_order_function_spec_return retval = new map_order_function_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.map_key_return map_key618 =null;

        PLSQLParser_PLSQLKeys.order_key_return order_key619 =null;

        PLSQLParser_PLSQLKeys.member_key_return member_key620 =null;

        type_function_spec_return type_function_spec621 =null;



        try {
            // PLSQLParser.g:818:5: ( ( map_key ^| order_key ^) member_key ! type_function_spec )
            // PLSQLParser.g:818:10: ( map_key ^| order_key ^) member_key ! type_function_spec
            {
            root_0 = (Object)adaptor.nil();


            // PLSQLParser.g:818:10: ( map_key ^| order_key ^)
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("map")))) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_ORDER) ) {
                alt181=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;

            }
            switch (alt181) {
                case 1 :
                    // PLSQLParser.g:818:11: map_key ^
                    {
                    pushFollow(FOLLOW_map_key_in_map_order_function_spec8476);
                    map_key618=map_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(map_key618.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:818:20: order_key ^
                    {
                    pushFollow(FOLLOW_order_key_in_map_order_function_spec8479);
                    order_key619=order_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(order_key619.getTree(), root_0);

                    }
                    break;

            }


            pushFollow(FOLLOW_member_key_in_map_order_function_spec8483);
            member_key620=member_key();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_type_function_spec_in_map_order_function_spec8486);
            type_function_spec621=type_function_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_function_spec621.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_order_function_spec"


    public static class pragma_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragma_clause"
    // PLSQLParser.g:821:1: pragma_clause : pragma_key restrict_references_key LEFT_PAREN pragma_elements ( COMMA pragma_elements )* RIGHT_PAREN -> ^( pragma_key ( pragma_elements )+ ) ;
    public final pragma_clause_return pragma_clause() throws RecognitionException {
        pragma_clause_return retval = new pragma_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN624=null;
        Token COMMA626=null;
        Token RIGHT_PAREN628=null;
        PLSQLParser_PLSQLKeys.pragma_key_return pragma_key622 =null;

        PLSQLParser_PLSQLKeys.restrict_references_key_return restrict_references_key623 =null;

        pragma_elements_return pragma_elements625 =null;

        pragma_elements_return pragma_elements627 =null;


        Object LEFT_PAREN624_tree=null;
        Object COMMA626_tree=null;
        Object RIGHT_PAREN628_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_pragma_key=new RewriteRuleSubtreeStream(adaptor,"rule pragma_key");
        RewriteRuleSubtreeStream stream_pragma_elements=new RewriteRuleSubtreeStream(adaptor,"rule pragma_elements");
        RewriteRuleSubtreeStream stream_restrict_references_key=new RewriteRuleSubtreeStream(adaptor,"rule restrict_references_key");
        try {
            // PLSQLParser.g:822:5: ( pragma_key restrict_references_key LEFT_PAREN pragma_elements ( COMMA pragma_elements )* RIGHT_PAREN -> ^( pragma_key ( pragma_elements )+ ) )
            // PLSQLParser.g:822:10: pragma_key restrict_references_key LEFT_PAREN pragma_elements ( COMMA pragma_elements )* RIGHT_PAREN
            {
            pushFollow(FOLLOW_pragma_key_in_pragma_clause8506);
            pragma_key622=pragma_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pragma_key.add(pragma_key622.getTree());

            pushFollow(FOLLOW_restrict_references_key_in_pragma_clause8508);
            restrict_references_key623=restrict_references_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_restrict_references_key.add(restrict_references_key623.getTree());

            LEFT_PAREN624=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pragma_clause8510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN624);


            pushFollow(FOLLOW_pragma_elements_in_pragma_clause8512);
            pragma_elements625=pragma_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pragma_elements.add(pragma_elements625.getTree());

            // PLSQLParser.g:822:72: ( COMMA pragma_elements )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==COMMA) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // PLSQLParser.g:822:73: COMMA pragma_elements
            	    {
            	    COMMA626=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_clause8515); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA626);


            	    pushFollow(FOLLOW_pragma_elements_in_pragma_clause8517);
            	    pragma_elements627=pragma_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pragma_elements.add(pragma_elements627.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            RIGHT_PAREN628=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pragma_clause8521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN628);


            // AST REWRITE
            // elements: pragma_key, pragma_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 823:9: -> ^( pragma_key ( pragma_elements )+ )
            {
                // PLSQLParser.g:823:12: ^( pragma_key ( pragma_elements )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_pragma_key.nextNode(), root_1);

                if ( !(stream_pragma_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pragma_elements.hasNext() ) {
                    adaptor.addChild(root_1, stream_pragma_elements.nextTree());

                }
                stream_pragma_elements.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pragma_clause"


    public static class pragma_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragma_elements"
    // PLSQLParser.g:826:1: pragma_elements : ( id | default_key );
    public final pragma_elements_return pragma_elements() throws RecognitionException {
        pragma_elements_return retval = new pragma_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.id_return id629 =null;

        PLSQLParser_PLSQLKeys.default_key_return default_key630 =null;



        try {
            // PLSQLParser.g:827:5: ( id | default_key )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==DELIMITED_ID||LA183_0==INTRODUCER||LA183_0==REGULAR_ID) ) {
                alt183=1;
            }
            else if ( (LA183_0==SQL92_RESERVED_DEFAULT) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;

            }
            switch (alt183) {
                case 1 :
                    // PLSQLParser.g:827:10: id
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_id_in_pragma_elements8558);
                    id629=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id629.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:828:10: default_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_key_in_pragma_elements8569);
                    default_key630=default_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_key630.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pragma_elements"


    public static class type_elements_parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_elements_parameter"
    // PLSQLParser.g:831:1: type_elements_parameter : parameter_name type_spec -> ^( PARAMETER parameter_name type_spec ) ;
    public final type_elements_parameter_return type_elements_parameter() throws RecognitionException {
        type_elements_parameter_return retval = new type_elements_parameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.parameter_name_return parameter_name631 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec632 =null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_parameter_name=new RewriteRuleSubtreeStream(adaptor,"rule parameter_name");
        try {
            // PLSQLParser.g:832:5: ( parameter_name type_spec -> ^( PARAMETER parameter_name type_spec ) )
            // PLSQLParser.g:832:10: parameter_name type_spec
            {
            pushFollow(FOLLOW_parameter_name_in_type_elements_parameter8589);
            parameter_name631=parameter_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_name.add(parameter_name631.getTree());

            pushFollow(FOLLOW_type_spec_in_type_elements_parameter8591);
            type_spec632=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec632.getTree());

            // AST REWRITE
            // elements: parameter_name, type_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 833:9: -> ^( PARAMETER parameter_name type_spec )
            {
                // PLSQLParser.g:833:12: ^( PARAMETER parameter_name type_spec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETER, "PARAMETER")
                , root_1);

                adaptor.addChild(root_1, stream_parameter_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_elements_parameter"


    public static class drop_sequence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "drop_sequence"
    // PLSQLParser.g:841:1: drop_sequence : drop_key sequence_key sequence_name SEMICOLON -> ^( DROP_SEQUENCE[$drop_key.start] sequence_name ) ;
    public final drop_sequence_return drop_sequence() throws RecognitionException {
        drop_sequence_return retval = new drop_sequence_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON636=null;
        PLSQLParser_PLSQLKeys.drop_key_return drop_key633 =null;

        PLSQLParser_PLSQLKeys.sequence_key_return sequence_key634 =null;

        PLSQLParser_PLSQLCommons.sequence_name_return sequence_name635 =null;


        Object SEMICOLON636_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
        RewriteRuleSubtreeStream stream_sequence_key=new RewriteRuleSubtreeStream(adaptor,"rule sequence_key");
        RewriteRuleSubtreeStream stream_sequence_name=new RewriteRuleSubtreeStream(adaptor,"rule sequence_name");
        try {
            // PLSQLParser.g:842:5: ( drop_key sequence_key sequence_name SEMICOLON -> ^( DROP_SEQUENCE[$drop_key.start] sequence_name ) )
            // PLSQLParser.g:842:9: drop_key sequence_key sequence_name SEMICOLON
            {
            pushFollow(FOLLOW_drop_key_in_drop_sequence8633);
            drop_key633=drop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_drop_key.add(drop_key633.getTree());

            pushFollow(FOLLOW_sequence_key_in_drop_sequence8635);
            sequence_key634=sequence_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sequence_key.add(sequence_key634.getTree());

            pushFollow(FOLLOW_sequence_name_in_drop_sequence8637);
            sequence_name635=sequence_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sequence_name.add(sequence_name635.getTree());

            SEMICOLON636=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_sequence8647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON636);


            // AST REWRITE
            // elements: sequence_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 844:9: -> ^( DROP_SEQUENCE[$drop_key.start] sequence_name )
            {
                // PLSQLParser.g:844:12: ^( DROP_SEQUENCE[$drop_key.start] sequence_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DROP_SEQUENCE, (drop_key633!=null?((Token)drop_key633.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_sequence_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "drop_sequence"


    public static class alter_sequence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_sequence"
    // PLSQLParser.g:847:1: alter_sequence : alter_key sequence_key sequence_name ( sequence_spec )+ SEMICOLON -> ^( ALTER_SEQUENCE[$alter_key.start] sequence_name ( sequence_spec )+ ) ;
    public final alter_sequence_return alter_sequence() throws RecognitionException {
        alter_sequence_return retval = new alter_sequence_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON641=null;
        PLSQLParser_PLSQLKeys.alter_key_return alter_key637 =null;

        PLSQLParser_PLSQLKeys.sequence_key_return sequence_key638 =null;

        PLSQLParser_PLSQLCommons.sequence_name_return sequence_name639 =null;

        sequence_spec_return sequence_spec640 =null;


        Object SEMICOLON641_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
        RewriteRuleSubtreeStream stream_sequence_spec=new RewriteRuleSubtreeStream(adaptor,"rule sequence_spec");
        RewriteRuleSubtreeStream stream_sequence_key=new RewriteRuleSubtreeStream(adaptor,"rule sequence_key");
        RewriteRuleSubtreeStream stream_sequence_name=new RewriteRuleSubtreeStream(adaptor,"rule sequence_name");
        try {
            // PLSQLParser.g:848:5: ( alter_key sequence_key sequence_name ( sequence_spec )+ SEMICOLON -> ^( ALTER_SEQUENCE[$alter_key.start] sequence_name ( sequence_spec )+ ) )
            // PLSQLParser.g:848:10: alter_key sequence_key sequence_name ( sequence_spec )+ SEMICOLON
            {
            pushFollow(FOLLOW_alter_key_in_alter_sequence8684);
            alter_key637=alter_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_alter_key.add(alter_key637.getTree());

            pushFollow(FOLLOW_sequence_key_in_alter_sequence8686);
            sequence_key638=sequence_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sequence_key.add(sequence_key638.getTree());

            pushFollow(FOLLOW_sequence_name_in_alter_sequence8688);
            sequence_name639=sequence_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sequence_name.add(sequence_name639.getTree());

            // PLSQLParser.g:848:47: ( sequence_spec )+
            int cnt184=0;
            loop184:
            do {
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==REGULAR_ID||LA184_0==SQL92_RESERVED_ORDER) ) {
                    alt184=1;
                }


                switch (alt184) {
            	case 1 :
            	    // PLSQLParser.g:848:47: sequence_spec
            	    {
            	    pushFollow(FOLLOW_sequence_spec_in_alter_sequence8690);
            	    sequence_spec640=sequence_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sequence_spec.add(sequence_spec640.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt184 >= 1 ) break loop184;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(184, input);
                        throw eee;
                }
                cnt184++;
            } while (true);


            SEMICOLON641=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_sequence8702); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON641);


            // AST REWRITE
            // elements: sequence_spec, sequence_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 850:9: -> ^( ALTER_SEQUENCE[$alter_key.start] sequence_name ( sequence_spec )+ )
            {
                // PLSQLParser.g:850:12: ^( ALTER_SEQUENCE[$alter_key.start] sequence_name ( sequence_spec )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ALTER_SEQUENCE, (alter_key637!=null?((Token)alter_key637.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_sequence_name.nextTree());

                if ( !(stream_sequence_spec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sequence_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_sequence_spec.nextTree());

                }
                stream_sequence_spec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_sequence"


    public static class create_sequence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create_sequence"
    // PLSQLParser.g:853:1: create_sequence : create_key sequence_key sequence_name ( sequence_start_clause | sequence_spec )* SEMICOLON -> ^( CREATE_SEQUENCE[$create_key.start] sequence_name ( sequence_start_clause )* ( sequence_spec )* ) ;
    public final create_sequence_return create_sequence() throws RecognitionException {
        create_sequence_return retval = new create_sequence_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON647=null;
        PLSQLParser_PLSQLKeys.create_key_return create_key642 =null;

        PLSQLParser_PLSQLKeys.sequence_key_return sequence_key643 =null;

        PLSQLParser_PLSQLCommons.sequence_name_return sequence_name644 =null;

        sequence_start_clause_return sequence_start_clause645 =null;

        sequence_spec_return sequence_spec646 =null;


        Object SEMICOLON647_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_sequence_start_clause=new RewriteRuleSubtreeStream(adaptor,"rule sequence_start_clause");
        RewriteRuleSubtreeStream stream_sequence_spec=new RewriteRuleSubtreeStream(adaptor,"rule sequence_spec");
        RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
        RewriteRuleSubtreeStream stream_sequence_key=new RewriteRuleSubtreeStream(adaptor,"rule sequence_key");
        RewriteRuleSubtreeStream stream_sequence_name=new RewriteRuleSubtreeStream(adaptor,"rule sequence_name");
        try {
            // PLSQLParser.g:854:5: ( create_key sequence_key sequence_name ( sequence_start_clause | sequence_spec )* SEMICOLON -> ^( CREATE_SEQUENCE[$create_key.start] sequence_name ( sequence_start_clause )* ( sequence_spec )* ) )
            // PLSQLParser.g:854:10: create_key sequence_key sequence_name ( sequence_start_clause | sequence_spec )* SEMICOLON
            {
            pushFollow(FOLLOW_create_key_in_create_sequence8742);
            create_key642=create_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_create_key.add(create_key642.getTree());

            pushFollow(FOLLOW_sequence_key_in_create_sequence8744);
            sequence_key643=sequence_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sequence_key.add(sequence_key643.getTree());

            pushFollow(FOLLOW_sequence_name_in_create_sequence8746);
            sequence_name644=sequence_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sequence_name.add(sequence_name644.getTree());

            // PLSQLParser.g:855:5: ( sequence_start_clause | sequence_spec )*
            loop185:
            do {
                int alt185=3;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==PLSQL_RESERVED_START) ) {
                    alt185=1;
                }
                else if ( (LA185_0==REGULAR_ID||LA185_0==SQL92_RESERVED_ORDER) ) {
                    alt185=2;
                }


                switch (alt185) {
            	case 1 :
            	    // PLSQLParser.g:855:10: sequence_start_clause
            	    {
            	    pushFollow(FOLLOW_sequence_start_clause_in_create_sequence8757);
            	    sequence_start_clause645=sequence_start_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sequence_start_clause.add(sequence_start_clause645.getTree());

            	    }
            	    break;
            	case 2 :
            	    // PLSQLParser.g:856:10: sequence_spec
            	    {
            	    pushFollow(FOLLOW_sequence_spec_in_create_sequence8768);
            	    sequence_spec646=sequence_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sequence_spec.add(sequence_spec646.getTree());

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);


            SEMICOLON647=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_sequence8779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON647);


            // AST REWRITE
            // elements: sequence_spec, sequence_name, sequence_start_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 858:9: -> ^( CREATE_SEQUENCE[$create_key.start] sequence_name ( sequence_start_clause )* ( sequence_spec )* )
            {
                // PLSQLParser.g:858:12: ^( CREATE_SEQUENCE[$create_key.start] sequence_name ( sequence_start_clause )* ( sequence_spec )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CREATE_SEQUENCE, (create_key642!=null?((Token)create_key642.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_sequence_name.nextTree());

                // PLSQLParser.g:858:63: ( sequence_start_clause )*
                while ( stream_sequence_start_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_sequence_start_clause.nextTree());

                }
                stream_sequence_start_clause.reset();

                // PLSQLParser.g:858:86: ( sequence_spec )*
                while ( stream_sequence_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_sequence_spec.nextTree());

                }
                stream_sequence_spec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "create_sequence"


    public static class sequence_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sequence_spec"
    // PLSQLParser.g:863:1: sequence_spec : ( increment_key ^ by_key ! UNSIGNED_INTEGER | maxvalue_key ^ UNSIGNED_INTEGER | minvalue_key ^ UNSIGNED_INTEGER | cache_key ^ UNSIGNED_INTEGER | nomaxvalue_key | nominvalue_key | cycle_key | nocycle_key | nocache_key | order_key | noorder_key );
    public final sequence_spec_return sequence_spec() throws RecognitionException {
        sequence_spec_return retval = new sequence_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token UNSIGNED_INTEGER650=null;
        Token UNSIGNED_INTEGER652=null;
        Token UNSIGNED_INTEGER654=null;
        Token UNSIGNED_INTEGER656=null;
        PLSQLParser_PLSQLKeys.increment_key_return increment_key648 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key649 =null;

        PLSQLParser_PLSQLKeys.maxvalue_key_return maxvalue_key651 =null;

        PLSQLParser_PLSQLKeys.minvalue_key_return minvalue_key653 =null;

        PLSQLParser_PLSQLKeys.cache_key_return cache_key655 =null;

        PLSQLParser_PLSQLKeys.nomaxvalue_key_return nomaxvalue_key657 =null;

        PLSQLParser_PLSQLKeys.nominvalue_key_return nominvalue_key658 =null;

        PLSQLParser_PLSQLKeys.cycle_key_return cycle_key659 =null;

        PLSQLParser_PLSQLKeys.nocycle_key_return nocycle_key660 =null;

        PLSQLParser_PLSQLKeys.nocache_key_return nocache_key661 =null;

        PLSQLParser_PLSQLKeys.order_key_return order_key662 =null;

        PLSQLParser_PLSQLKeys.noorder_key_return noorder_key663 =null;


        Object UNSIGNED_INTEGER650_tree=null;
        Object UNSIGNED_INTEGER652_tree=null;
        Object UNSIGNED_INTEGER654_tree=null;
        Object UNSIGNED_INTEGER656_tree=null;

        try {
            // PLSQLParser.g:864:5: ( increment_key ^ by_key ! UNSIGNED_INTEGER | maxvalue_key ^ UNSIGNED_INTEGER | minvalue_key ^ UNSIGNED_INTEGER | cache_key ^ UNSIGNED_INTEGER | nomaxvalue_key | nominvalue_key | cycle_key | nocycle_key | nocache_key | order_key | noorder_key )
            int alt186=11;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==REGULAR_ID) ) {
                int LA186_1 = input.LA(2);

                if ( (LA186_1==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("increment")))) {
                    alt186=1;
                }
                else if ( (LA186_1==UNSIGNED_INTEGER) ) {
                    int LA186_4 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("maxvalue"))) ) {
                        alt186=2;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("minvalue"))) ) {
                        alt186=3;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("cache"))) ) {
                        alt186=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 186, 4, input);

                        throw nvae;

                    }
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("nomaxvalue"))) ) {
                    alt186=5;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("nominvalue"))) ) {
                    alt186=6;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("cycle"))) ) {
                    alt186=7;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("nocycle"))) ) {
                    alt186=8;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("nocache"))) ) {
                    alt186=9;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("noorder"))) ) {
                    alt186=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 186, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA186_0==SQL92_RESERVED_ORDER) ) {
                alt186=10;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;

            }
            switch (alt186) {
                case 1 :
                    // PLSQLParser.g:864:10: increment_key ^ by_key ! UNSIGNED_INTEGER
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_key_in_sequence_spec8824);
                    increment_key648=increment_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(increment_key648.getTree(), root_0);

                    pushFollow(FOLLOW_by_key_in_sequence_spec8827);
                    by_key649=by_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    UNSIGNED_INTEGER650=(Token)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec8830); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNSIGNED_INTEGER650_tree = 
                    (Object)adaptor.create(UNSIGNED_INTEGER650)
                    ;
                    adaptor.addChild(root_0, UNSIGNED_INTEGER650_tree);
                    }

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:865:10: maxvalue_key ^ UNSIGNED_INTEGER
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_maxvalue_key_in_sequence_spec8841);
                    maxvalue_key651=maxvalue_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(maxvalue_key651.getTree(), root_0);

                    UNSIGNED_INTEGER652=(Token)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec8844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNSIGNED_INTEGER652_tree = 
                    (Object)adaptor.create(UNSIGNED_INTEGER652)
                    ;
                    adaptor.addChild(root_0, UNSIGNED_INTEGER652_tree);
                    }

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:866:10: minvalue_key ^ UNSIGNED_INTEGER
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_minvalue_key_in_sequence_spec8855);
                    minvalue_key653=minvalue_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(minvalue_key653.getTree(), root_0);

                    UNSIGNED_INTEGER654=(Token)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec8858); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNSIGNED_INTEGER654_tree = 
                    (Object)adaptor.create(UNSIGNED_INTEGER654)
                    ;
                    adaptor.addChild(root_0, UNSIGNED_INTEGER654_tree);
                    }

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:867:10: cache_key ^ UNSIGNED_INTEGER
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cache_key_in_sequence_spec8869);
                    cache_key655=cache_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(cache_key655.getTree(), root_0);

                    UNSIGNED_INTEGER656=(Token)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec8872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNSIGNED_INTEGER656_tree = 
                    (Object)adaptor.create(UNSIGNED_INTEGER656)
                    ;
                    adaptor.addChild(root_0, UNSIGNED_INTEGER656_tree);
                    }

                    }
                    break;
                case 5 :
                    // PLSQLParser.g:868:10: nomaxvalue_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nomaxvalue_key_in_sequence_spec8883);
                    nomaxvalue_key657=nomaxvalue_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nomaxvalue_key657.getTree());

                    }
                    break;
                case 6 :
                    // PLSQLParser.g:869:10: nominvalue_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nominvalue_key_in_sequence_spec8894);
                    nominvalue_key658=nominvalue_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nominvalue_key658.getTree());

                    }
                    break;
                case 7 :
                    // PLSQLParser.g:870:10: cycle_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cycle_key_in_sequence_spec8905);
                    cycle_key659=cycle_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycle_key659.getTree());

                    }
                    break;
                case 8 :
                    // PLSQLParser.g:871:10: nocycle_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nocycle_key_in_sequence_spec8916);
                    nocycle_key660=nocycle_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nocycle_key660.getTree());

                    }
                    break;
                case 9 :
                    // PLSQLParser.g:872:10: nocache_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nocache_key_in_sequence_spec8927);
                    nocache_key661=nocache_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nocache_key661.getTree());

                    }
                    break;
                case 10 :
                    // PLSQLParser.g:873:10: order_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_order_key_in_sequence_spec8938);
                    order_key662=order_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_key662.getTree());

                    }
                    break;
                case 11 :
                    // PLSQLParser.g:874:10: noorder_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_noorder_key_in_sequence_spec8949);
                    noorder_key663=noorder_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noorder_key663.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sequence_spec"


    public static class sequence_start_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sequence_start_clause"
    // PLSQLParser.g:877:1: sequence_start_clause : start_key ^ with_key ! UNSIGNED_INTEGER ;
    public final sequence_start_clause_return sequence_start_clause() throws RecognitionException {
        sequence_start_clause_return retval = new sequence_start_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token UNSIGNED_INTEGER666=null;
        PLSQLParser_PLSQLKeys.start_key_return start_key664 =null;

        PLSQLParser_PLSQLKeys.with_key_return with_key665 =null;


        Object UNSIGNED_INTEGER666_tree=null;

        try {
            // PLSQLParser.g:878:5: ( start_key ^ with_key ! UNSIGNED_INTEGER )
            // PLSQLParser.g:878:10: start_key ^ with_key ! UNSIGNED_INTEGER
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_start_key_in_sequence_start_clause8969);
            start_key664=start_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(start_key664.getTree(), root_0);

            pushFollow(FOLLOW_with_key_in_sequence_start_clause8972);
            with_key665=with_key();

            state._fsp--;
            if (state.failed) return retval;

            UNSIGNED_INTEGER666=(Token)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_start_clause8975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNSIGNED_INTEGER666_tree = 
            (Object)adaptor.create(UNSIGNED_INTEGER666)
            ;
            adaptor.addChild(root_0, UNSIGNED_INTEGER666_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sequence_start_clause"


    public static class invoker_rights_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "invoker_rights_clause"
    // PLSQLParser.g:887:1: invoker_rights_clause : authid_key ( current_user_key | definer_key ) -> ^( authid_key ( current_user_key )? ( definer_key )? ) ;
    public final invoker_rights_clause_return invoker_rights_clause() throws RecognitionException {
        invoker_rights_clause_return retval = new invoker_rights_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.authid_key_return authid_key667 =null;

        PLSQLParser_PLSQLKeys.current_user_key_return current_user_key668 =null;

        PLSQLParser_PLSQLKeys.definer_key_return definer_key669 =null;


        RewriteRuleSubtreeStream stream_definer_key=new RewriteRuleSubtreeStream(adaptor,"rule definer_key");
        RewriteRuleSubtreeStream stream_current_user_key=new RewriteRuleSubtreeStream(adaptor,"rule current_user_key");
        RewriteRuleSubtreeStream stream_authid_key=new RewriteRuleSubtreeStream(adaptor,"rule authid_key");
        try {
            // PLSQLParser.g:888:5: ( authid_key ( current_user_key | definer_key ) -> ^( authid_key ( current_user_key )? ( definer_key )? ) )
            // PLSQLParser.g:888:10: authid_key ( current_user_key | definer_key )
            {
            pushFollow(FOLLOW_authid_key_in_invoker_rights_clause9001);
            authid_key667=authid_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_authid_key.add(authid_key667.getTree());

            // PLSQLParser.g:888:21: ( current_user_key | definer_key )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==REGULAR_ID) ) {
                int LA187_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("current_user"))) ) {
                    alt187=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("definer"))) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;

            }
            switch (alt187) {
                case 1 :
                    // PLSQLParser.g:888:22: current_user_key
                    {
                    pushFollow(FOLLOW_current_user_key_in_invoker_rights_clause9004);
                    current_user_key668=current_user_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_current_user_key.add(current_user_key668.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:888:39: definer_key
                    {
                    pushFollow(FOLLOW_definer_key_in_invoker_rights_clause9006);
                    definer_key669=definer_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_definer_key.add(definer_key669.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: current_user_key, definer_key, authid_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 889:9: -> ^( authid_key ( current_user_key )? ( definer_key )? )
            {
                // PLSQLParser.g:889:12: ^( authid_key ( current_user_key )? ( definer_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_authid_key.nextNode(), root_1);

                // PLSQLParser.g:889:25: ( current_user_key )?
                if ( stream_current_user_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_current_user_key.nextTree());

                }
                stream_current_user_key.reset();

                // PLSQLParser.g:889:43: ( definer_key )?
                if ( stream_definer_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_definer_key.nextTree());

                }
                stream_definer_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "invoker_rights_clause"


    public static class compiler_parameters_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compiler_parameters_clause"
    // PLSQLParser.g:892:1: compiler_parameters_clause : id EQUALS_OP expression -> ^( COMPILER_PARAMETER ^( ASSIGN[$EQUALS_OP] id ^( EXPR expression ) ) ) ;
    public final compiler_parameters_clause_return compiler_parameters_clause() throws RecognitionException {
        compiler_parameters_clause_return retval = new compiler_parameters_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUALS_OP671=null;
        PLSQLParser_PLSQLCommons.id_return id670 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression672 =null;


        Object EQUALS_OP671_tree=null;
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // PLSQLParser.g:893:5: ( id EQUALS_OP expression -> ^( COMPILER_PARAMETER ^( ASSIGN[$EQUALS_OP] id ^( EXPR expression ) ) ) )
            // PLSQLParser.g:893:10: id EQUALS_OP expression
            {
            pushFollow(FOLLOW_id_in_compiler_parameters_clause9047);
            id670=id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_id.add(id670.getTree());

            EQUALS_OP671=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_compiler_parameters_clause9049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP671);


            pushFollow(FOLLOW_expression_in_compiler_parameters_clause9051);
            expression672=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression672.getTree());

            // AST REWRITE
            // elements: expression, id
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 894:9: -> ^( COMPILER_PARAMETER ^( ASSIGN[$EQUALS_OP] id ^( EXPR expression ) ) )
            {
                // PLSQLParser.g:894:12: ^( COMPILER_PARAMETER ^( ASSIGN[$EQUALS_OP] id ^( EXPR expression ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(COMPILER_PARAMETER, "COMPILER_PARAMETER")
                , root_1);

                // PLSQLParser.g:894:33: ^( ASSIGN[$EQUALS_OP] id ^( EXPR expression ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, EQUALS_OP671)
                , root_2);

                adaptor.addChild(root_2, stream_id.nextTree());

                // PLSQLParser.g:894:57: ^( EXPR expression )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_expression.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compiler_parameters_clause"


    public static class call_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "call_spec"
    // PLSQLParser.g:897:1: call_spec : language_key ^ ( java_spec | c_spec ) ;
    public final call_spec_return call_spec() throws RecognitionException {
        call_spec_return retval = new call_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.language_key_return language_key673 =null;

        java_spec_return java_spec674 =null;

        c_spec_return c_spec675 =null;



        try {
            // PLSQLParser.g:898:5: ( language_key ^ ( java_spec | c_spec ) )
            // PLSQLParser.g:898:10: language_key ^ ( java_spec | c_spec )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_language_key_in_call_spec9098);
            language_key673=language_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(language_key673.getTree(), root_0);

            // PLSQLParser.g:898:24: ( java_spec | c_spec )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==REGULAR_ID) ) {
                int LA188_1 = input.LA(2);

                if ( (LA188_1==REGULAR_ID) ) {
                    int LA188_2 = input.LA(3);

                    if ( (LA188_2==CHAR_STRING) ) {
                        int LA188_3 = input.LA(4);

                        if ( (LA188_3==COMMA||(LA188_3 >= RIGHT_PAREN && LA188_3 <= SEMICOLON)||LA188_3==SQL92_RESERVED_END||LA188_3==SQL92_RESERVED_ORDER) ) {
                            alt188=1;
                        }
                        else if ( (LA188_3==REGULAR_ID) ) {
                            int LA188_6 = input.LA(5);

                            if ( (LA188_6==SEMICOLON||LA188_6==SQL92_RESERVED_NOT||LA188_6==SQL92_RESERVED_PROCEDURE) ) {
                                alt188=1;
                            }
                            else if ( (LA188_6==REGULAR_ID) ) {
                                int LA188_7 = input.LA(6);

                                if ( ((input.LT(1).getText().equalsIgnoreCase("java"))) ) {
                                    alt188=1;
                                }
                                else if ( ((input.LT(1).getText().equalsIgnoreCase("c"))) ) {
                                    alt188=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 188, 7, input);

                                    throw nvae;

                                }
                            }
                            else if ( (LA188_6==DELIMITED_ID||LA188_6==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("c")))) {
                                alt188=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 188, 6, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 188, 3, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA188_2==DELIMITED_ID||LA188_2==INTRODUCER||LA188_2==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("c")))) {
                        alt188=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 188, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 188, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }
            switch (alt188) {
                case 1 :
                    // PLSQLParser.g:898:26: java_spec
                    {
                    pushFollow(FOLLOW_java_spec_in_call_spec9103);
                    java_spec674=java_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, java_spec674.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:898:38: c_spec
                    {
                    pushFollow(FOLLOW_c_spec_in_call_spec9107);
                    c_spec675=c_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, c_spec675.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "call_spec"


    public static class java_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "java_spec"
    // PLSQLParser.g:903:1: java_spec : java_key ^ name_key ! CHAR_STRING ;
    public final java_spec_return java_spec() throws RecognitionException {
        java_spec_return retval = new java_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CHAR_STRING678=null;
        PLSQLParser_PLSQLKeys.java_key_return java_key676 =null;

        PLSQLParser_PLSQLKeys.name_key_return name_key677 =null;


        Object CHAR_STRING678_tree=null;

        try {
            // PLSQLParser.g:904:5: ( java_key ^ name_key ! CHAR_STRING )
            // PLSQLParser.g:904:10: java_key ^ name_key ! CHAR_STRING
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_java_key_in_java_spec9131);
            java_key676=java_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(java_key676.getTree(), root_0);

            pushFollow(FOLLOW_name_key_in_java_spec9134);
            name_key677=name_key();

            state._fsp--;
            if (state.failed) return retval;

            CHAR_STRING678=(Token)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_java_spec9137); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CHAR_STRING678_tree = 
            (Object)adaptor.create(CHAR_STRING678)
            ;
            adaptor.addChild(root_0, CHAR_STRING678_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "java_spec"


    public static class c_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "c_spec"
    // PLSQLParser.g:907:1: c_spec : c_key ( name_key CHAR_STRING )? library_key id ( c_agent_in_clause )? ( with_key context_key )? ( c_parameters_clause )? -> ^( c_key ( CHAR_STRING )? ( context_key )? ^( library_key id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) ;
    public final c_spec_return c_spec() throws RecognitionException {
        c_spec_return retval = new c_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CHAR_STRING681=null;
        PLSQLParser_PLSQLKeys.c_key_return c_key679 =null;

        PLSQLParser_PLSQLKeys.name_key_return name_key680 =null;

        PLSQLParser_PLSQLKeys.library_key_return library_key682 =null;

        PLSQLParser_PLSQLCommons.id_return id683 =null;

        c_agent_in_clause_return c_agent_in_clause684 =null;

        PLSQLParser_PLSQLKeys.with_key_return with_key685 =null;

        PLSQLParser_PLSQLKeys.context_key_return context_key686 =null;

        c_parameters_clause_return c_parameters_clause687 =null;


        Object CHAR_STRING681_tree=null;
        RewriteRuleTokenStream stream_CHAR_STRING=new RewriteRuleTokenStream(adaptor,"token CHAR_STRING");
        RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");
        RewriteRuleSubtreeStream stream_with_key=new RewriteRuleSubtreeStream(adaptor,"rule with_key");
        RewriteRuleSubtreeStream stream_name_key=new RewriteRuleSubtreeStream(adaptor,"rule name_key");
        RewriteRuleSubtreeStream stream_c_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule c_parameters_clause");
        RewriteRuleSubtreeStream stream_context_key=new RewriteRuleSubtreeStream(adaptor,"rule context_key");
        RewriteRuleSubtreeStream stream_c_agent_in_clause=new RewriteRuleSubtreeStream(adaptor,"rule c_agent_in_clause");
        RewriteRuleSubtreeStream stream_c_key=new RewriteRuleSubtreeStream(adaptor,"rule c_key");
        RewriteRuleSubtreeStream stream_library_key=new RewriteRuleSubtreeStream(adaptor,"rule library_key");
        try {
            // PLSQLParser.g:908:5: ( c_key ( name_key CHAR_STRING )? library_key id ( c_agent_in_clause )? ( with_key context_key )? ( c_parameters_clause )? -> ^( c_key ( CHAR_STRING )? ( context_key )? ^( library_key id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) )
            // PLSQLParser.g:908:10: c_key ( name_key CHAR_STRING )? library_key id ( c_agent_in_clause )? ( with_key context_key )? ( c_parameters_clause )?
            {
            pushFollow(FOLLOW_c_key_in_c_spec9157);
            c_key679=c_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_c_key.add(c_key679.getTree());

            // PLSQLParser.g:908:16: ( name_key CHAR_STRING )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("name"))||(input.LT(1).getText().equalsIgnoreCase("library"))))) {
                int LA189_1 = input.LA(2);

                if ( (LA189_1==CHAR_STRING) && ((input.LT(1).getText().equalsIgnoreCase("name")))) {
                    alt189=1;
                }
            }
            switch (alt189) {
                case 1 :
                    // PLSQLParser.g:908:17: name_key CHAR_STRING
                    {
                    pushFollow(FOLLOW_name_key_in_c_spec9160);
                    name_key680=name_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name_key.add(name_key680.getTree());

                    CHAR_STRING681=(Token)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_c_spec9162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR_STRING.add(CHAR_STRING681);


                    }
                    break;

            }


            pushFollow(FOLLOW_library_key_in_c_spec9175);
            library_key682=library_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_library_key.add(library_key682.getTree());

            pushFollow(FOLLOW_id_in_c_spec9177);
            id683=id();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_id.add(id683.getTree());

            // PLSQLParser.g:910:9: ( c_agent_in_clause )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==REGULAR_ID) ) {
                int LA190_1 = input.LA(2);

                if ( (LA190_1==SQL92_RESERVED_IN) && ((input.LT(1).getText().equalsIgnoreCase("agent")))) {
                    alt190=1;
                }
            }
            switch (alt190) {
                case 1 :
                    // PLSQLParser.g:910:9: c_agent_in_clause
                    {
                    pushFollow(FOLLOW_c_agent_in_clause_in_c_spec9187);
                    c_agent_in_clause684=c_agent_in_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_c_agent_in_clause.add(c_agent_in_clause684.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:910:28: ( with_key context_key )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==SQL92_RESERVED_WITH) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // PLSQLParser.g:910:29: with_key context_key
                    {
                    pushFollow(FOLLOW_with_key_in_c_spec9191);
                    with_key685=with_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_with_key.add(with_key685.getTree());

                    pushFollow(FOLLOW_context_key_in_c_spec9193);
                    context_key686=context_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_context_key.add(context_key686.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:910:52: ( c_parameters_clause )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==REGULAR_ID) ) {
                int LA192_1 = input.LA(2);

                if ( (LA192_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("parameters")))) {
                    alt192=1;
                }
            }
            switch (alt192) {
                case 1 :
                    // PLSQLParser.g:910:52: c_parameters_clause
                    {
                    pushFollow(FOLLOW_c_parameters_clause_in_c_spec9197);
                    c_parameters_clause687=c_parameters_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_c_parameters_clause.add(c_parameters_clause687.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: library_key, c_agent_in_clause, id, c_parameters_clause, CHAR_STRING, context_key, c_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 911:9: -> ^( c_key ( CHAR_STRING )? ( context_key )? ^( library_key id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
            {
                // PLSQLParser.g:911:12: ^( c_key ( CHAR_STRING )? ( context_key )? ^( library_key id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_c_key.nextNode(), root_1);

                // PLSQLParser.g:911:20: ( CHAR_STRING )?
                if ( stream_CHAR_STRING.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_CHAR_STRING.nextNode()
                    );

                }
                stream_CHAR_STRING.reset();

                // PLSQLParser.g:911:33: ( context_key )?
                if ( stream_context_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_context_key.nextTree());

                }
                stream_context_key.reset();

                // PLSQLParser.g:911:46: ^( library_key id )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_library_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_id.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:911:64: ( c_agent_in_clause )?
                if ( stream_c_agent_in_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_c_agent_in_clause.nextTree());

                }
                stream_c_agent_in_clause.reset();

                // PLSQLParser.g:911:83: ( c_parameters_clause )?
                if ( stream_c_parameters_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_c_parameters_clause.nextTree());

                }
                stream_c_parameters_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "c_spec"


    public static class c_agent_in_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "c_agent_in_clause"
    // PLSQLParser.g:914:1: c_agent_in_clause : agent_key in_key LEFT_PAREN expression ( COMMA expression )* RIGHT_PAREN -> ^( agent_key ( ^( EXPR expression ) )+ ) ;
    public final c_agent_in_clause_return c_agent_in_clause() throws RecognitionException {
        c_agent_in_clause_return retval = new c_agent_in_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN690=null;
        Token COMMA692=null;
        Token RIGHT_PAREN694=null;
        PLSQLParser_PLSQLKeys.agent_key_return agent_key688 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key689 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression691 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression693 =null;


        Object LEFT_PAREN690_tree=null;
        Object COMMA692_tree=null;
        Object RIGHT_PAREN694_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_agent_key=new RewriteRuleSubtreeStream(adaptor,"rule agent_key");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        try {
            // PLSQLParser.g:915:5: ( agent_key in_key LEFT_PAREN expression ( COMMA expression )* RIGHT_PAREN -> ^( agent_key ( ^( EXPR expression ) )+ ) )
            // PLSQLParser.g:915:10: agent_key in_key LEFT_PAREN expression ( COMMA expression )* RIGHT_PAREN
            {
            pushFollow(FOLLOW_agent_key_in_c_agent_in_clause9250);
            agent_key688=agent_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_agent_key.add(agent_key688.getTree());

            pushFollow(FOLLOW_in_key_in_c_agent_in_clause9252);
            in_key689=in_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_in_key.add(in_key689.getTree());

            LEFT_PAREN690=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_c_agent_in_clause9254); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN690);


            pushFollow(FOLLOW_expression_in_c_agent_in_clause9256);
            expression691=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression691.getTree());

            // PLSQLParser.g:915:49: ( COMMA expression )*
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==COMMA) ) {
                    alt193=1;
                }


                switch (alt193) {
            	case 1 :
            	    // PLSQLParser.g:915:50: COMMA expression
            	    {
            	    COMMA692=(Token)match(input,COMMA,FOLLOW_COMMA_in_c_agent_in_clause9259); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA692);


            	    pushFollow(FOLLOW_expression_in_c_agent_in_clause9261);
            	    expression693=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression693.getTree());

            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);


            RIGHT_PAREN694=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_c_agent_in_clause9265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN694);


            // AST REWRITE
            // elements: agent_key, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 916:9: -> ^( agent_key ( ^( EXPR expression ) )+ )
            {
                // PLSQLParser.g:916:12: ^( agent_key ( ^( EXPR expression ) )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_agent_key.nextNode(), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    // PLSQLParser.g:916:24: ^( EXPR expression )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(EXPR, "EXPR")
                    , root_2);

                    adaptor.addChild(root_2, stream_expression.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "c_agent_in_clause"


    public static class c_parameters_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "c_parameters_clause"
    // PLSQLParser.g:919:1: c_parameters_clause : parameters_key LEFT_PAREN ( expression ( COMMA expression )* | DOUBLE_PERIOD PERIOD ) RIGHT_PAREN -> {mode == 1}? ^( parameters_key THREE_DOTS[$DOUBLE_PERIOD, \"...\"] ) -> ^( parameters_key ( ^( EXPR expression ) )+ ) ;
    public final c_parameters_clause_return c_parameters_clause() throws RecognitionException {
        c_parameters_clause_return retval = new c_parameters_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN696=null;
        Token COMMA698=null;
        Token DOUBLE_PERIOD700=null;
        Token PERIOD701=null;
        Token RIGHT_PAREN702=null;
        PLSQLParser_PLSQLKeys.parameters_key_return parameters_key695 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression697 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression699 =null;


        Object LEFT_PAREN696_tree=null;
        Object COMMA698_tree=null;
        Object DOUBLE_PERIOD700_tree=null;
        Object PERIOD701_tree=null;
        Object RIGHT_PAREN702_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_parameters_key=new RewriteRuleSubtreeStream(adaptor,"rule parameters_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:921:5: ( parameters_key LEFT_PAREN ( expression ( COMMA expression )* | DOUBLE_PERIOD PERIOD ) RIGHT_PAREN -> {mode == 1}? ^( parameters_key THREE_DOTS[$DOUBLE_PERIOD, \"...\"] ) -> ^( parameters_key ( ^( EXPR expression ) )+ ) )
            // PLSQLParser.g:921:10: parameters_key LEFT_PAREN ( expression ( COMMA expression )* | DOUBLE_PERIOD PERIOD ) RIGHT_PAREN
            {
            pushFollow(FOLLOW_parameters_key_in_c_parameters_clause9314);
            parameters_key695=parameters_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameters_key.add(parameters_key695.getTree());

            LEFT_PAREN696=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_c_parameters_clause9316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN696);


            // PLSQLParser.g:921:36: ( expression ( COMMA expression )* | DOUBLE_PERIOD PERIOD )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==APPROXIMATE_NUM_LIT||LA195_0==BINDVAR||(LA195_0 >= CHAR_STRING && LA195_0 <= COLON)||LA195_0==DELIMITED_ID||LA195_0==EXACT_NUM_LIT||LA195_0==INTRODUCER||LA195_0==LEFT_PAREN||(LA195_0 >= MINUS_SIGN && LA195_0 <= NATIONAL_CHAR_STRING_LIT)||LA195_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA195_0==PLUS_SIGN||LA195_0==REGULAR_ID||LA195_0==SQL92_RESERVED_ALL||LA195_0==SQL92_RESERVED_ANY||LA195_0==SQL92_RESERVED_CASE||(LA195_0 >= SQL92_RESERVED_CURSOR && LA195_0 <= SQL92_RESERVED_DATE)||LA195_0==SQL92_RESERVED_DEFAULT||LA195_0==SQL92_RESERVED_DISTINCT||(LA195_0 >= SQL92_RESERVED_EXISTS && LA195_0 <= SQL92_RESERVED_FALSE)||(LA195_0 >= SQL92_RESERVED_NOT && LA195_0 <= SQL92_RESERVED_NULL)||LA195_0==SQL92_RESERVED_PRIOR||LA195_0==SQL92_RESERVED_TRUE||LA195_0==UNSIGNED_INTEGER) ) {
                alt195=1;
            }
            else if ( (LA195_0==DOUBLE_PERIOD) ) {
                alt195=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;

            }
            switch (alt195) {
                case 1 :
                    // PLSQLParser.g:921:37: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_c_parameters_clause9319);
                    expression697=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression697.getTree());

                    // PLSQLParser.g:921:48: ( COMMA expression )*
                    loop194:
                    do {
                        int alt194=2;
                        int LA194_0 = input.LA(1);

                        if ( (LA194_0==COMMA) ) {
                            alt194=1;
                        }


                        switch (alt194) {
                    	case 1 :
                    	    // PLSQLParser.g:921:49: COMMA expression
                    	    {
                    	    COMMA698=(Token)match(input,COMMA,FOLLOW_COMMA_in_c_parameters_clause9322); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA698);


                    	    pushFollow(FOLLOW_expression_in_c_parameters_clause9324);
                    	    expression699=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression699.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop194;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // PLSQLParser.g:921:70: DOUBLE_PERIOD PERIOD
                    {
                    DOUBLE_PERIOD700=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_c_parameters_clause9330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD700);


                    PERIOD701=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_c_parameters_clause9332); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD701);


                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            RIGHT_PAREN702=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_c_parameters_clause9337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN702);


            // AST REWRITE
            // elements: parameters_key, parameters_key, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 922:5: -> {mode == 1}? ^( parameters_key THREE_DOTS[$DOUBLE_PERIOD, \"...\"] )
            if (mode == 1) {
                // PLSQLParser.g:922:24: ^( parameters_key THREE_DOTS[$DOUBLE_PERIOD, \"...\"] )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_parameters_key.nextNode(), root_1);

                adaptor.addChild(root_1, 
                (Object)adaptor.create(THREE_DOTS, DOUBLE_PERIOD700, "...")
                );

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 923:5: -> ^( parameters_key ( ^( EXPR expression ) )+ )
            {
                // PLSQLParser.g:923:8: ^( parameters_key ( ^( EXPR expression ) )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_parameters_key.nextNode(), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    // PLSQLParser.g:923:25: ^( EXPR expression )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(EXPR, "EXPR")
                    , root_2);

                    adaptor.addChild(root_2, stream_expression.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "c_parameters_clause"


    public static class parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter"
    // PLSQLParser.g:928:1: parameter : parameter_name ( in_key | out_key | inout_key | nocopy_key )* ( type_spec )? ( default_value_part )? -> ^( PARAMETER parameter_name ( in_key )* ( out_key )* ( inout_key )* ( type_spec )? ( default_value_part )? ) ;
    public final parameter_return parameter() throws RecognitionException {
        parameter_return retval = new parameter_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.parameter_name_return parameter_name703 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key704 =null;

        PLSQLParser_PLSQLKeys.out_key_return out_key705 =null;

        PLSQLParser_PLSQLKeys.inout_key_return inout_key706 =null;

        PLSQLParser_PLSQLKeys.nocopy_key_return nocopy_key707 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec708 =null;

        default_value_part_return default_value_part709 =null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_inout_key=new RewriteRuleSubtreeStream(adaptor,"rule inout_key");
        RewriteRuleSubtreeStream stream_default_value_part=new RewriteRuleSubtreeStream(adaptor,"rule default_value_part");
        RewriteRuleSubtreeStream stream_nocopy_key=new RewriteRuleSubtreeStream(adaptor,"rule nocopy_key");
        RewriteRuleSubtreeStream stream_parameter_name=new RewriteRuleSubtreeStream(adaptor,"rule parameter_name");
        RewriteRuleSubtreeStream stream_out_key=new RewriteRuleSubtreeStream(adaptor,"rule out_key");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        try {
            // PLSQLParser.g:929:5: ( parameter_name ( in_key | out_key | inout_key | nocopy_key )* ( type_spec )? ( default_value_part )? -> ^( PARAMETER parameter_name ( in_key )* ( out_key )* ( inout_key )* ( type_spec )? ( default_value_part )? ) )
            // PLSQLParser.g:929:10: parameter_name ( in_key | out_key | inout_key | nocopy_key )* ( type_spec )? ( default_value_part )?
            {
            pushFollow(FOLLOW_parameter_name_in_parameter9394);
            parameter_name703=parameter_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_name.add(parameter_name703.getTree());

            // PLSQLParser.g:929:25: ( in_key | out_key | inout_key | nocopy_key )*
            loop196:
            do {
                int alt196=5;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==REGULAR_ID) ) {
                    int LA196_1 = input.LA(2);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("out"))) ) {
                        alt196=2;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("inout"))) ) {
                        alt196=3;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("nocopy"))) ) {
                        alt196=4;
                    }


                }
                else if ( (LA196_0==SQL92_RESERVED_IN) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // PLSQLParser.g:929:27: in_key
            	    {
            	    pushFollow(FOLLOW_in_key_in_parameter9398);
            	    in_key704=in_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_in_key.add(in_key704.getTree());

            	    }
            	    break;
            	case 2 :
            	    // PLSQLParser.g:929:36: out_key
            	    {
            	    pushFollow(FOLLOW_out_key_in_parameter9402);
            	    out_key705=out_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_out_key.add(out_key705.getTree());

            	    }
            	    break;
            	case 3 :
            	    // PLSQLParser.g:929:46: inout_key
            	    {
            	    pushFollow(FOLLOW_inout_key_in_parameter9406);
            	    inout_key706=inout_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inout_key.add(inout_key706.getTree());

            	    }
            	    break;
            	case 4 :
            	    // PLSQLParser.g:929:58: nocopy_key
            	    {
            	    pushFollow(FOLLOW_nocopy_key_in_parameter9410);
            	    nocopy_key707=nocopy_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nocopy_key.add(nocopy_key707.getTree());

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            // PLSQLParser.g:929:71: ( type_spec )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==DELIMITED_ID||LA197_0==REGULAR_ID||LA197_0==SQL92_RESERVED_DATE) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // PLSQLParser.g:929:71: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_parameter9414);
                    type_spec708=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec708.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:929:82: ( default_value_part )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==ASSIGN_OP||LA198_0==SQL92_RESERVED_DEFAULT) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // PLSQLParser.g:929:82: default_value_part
                    {
                    pushFollow(FOLLOW_default_value_part_in_parameter9417);
                    default_value_part709=default_value_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_default_value_part.add(default_value_part709.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: type_spec, default_value_part, out_key, inout_key, parameter_name, in_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 930:9: -> ^( PARAMETER parameter_name ( in_key )* ( out_key )* ( inout_key )* ( type_spec )? ( default_value_part )? )
            {
                // PLSQLParser.g:930:12: ^( PARAMETER parameter_name ( in_key )* ( out_key )* ( inout_key )* ( type_spec )? ( default_value_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETER, "PARAMETER")
                , root_1);

                adaptor.addChild(root_1, stream_parameter_name.nextTree());

                // PLSQLParser.g:930:39: ( in_key )*
                while ( stream_in_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_in_key.nextTree());

                }
                stream_in_key.reset();

                // PLSQLParser.g:930:47: ( out_key )*
                while ( stream_out_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_out_key.nextTree());

                }
                stream_out_key.reset();

                // PLSQLParser.g:930:56: ( inout_key )*
                while ( stream_inout_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_inout_key.nextTree());

                }
                stream_inout_key.reset();

                // PLSQLParser.g:930:67: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();

                // PLSQLParser.g:930:78: ( default_value_part )?
                if ( stream_default_value_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_default_value_part.nextTree());

                }
                stream_default_value_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter"


    public static class default_value_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_value_part"
    // PLSQLParser.g:933:1: default_value_part : ( ASSIGN_OP | default_key ) expression -> ^( DEFAULT_VALUE ^( EXPR expression ) ) ;
    public final default_value_part_return default_value_part() throws RecognitionException {
        default_value_part_return retval = new default_value_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASSIGN_OP710=null;
        PLSQLParser_PLSQLKeys.default_key_return default_key711 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression712 =null;


        Object ASSIGN_OP710_tree=null;
        RewriteRuleTokenStream stream_ASSIGN_OP=new RewriteRuleTokenStream(adaptor,"token ASSIGN_OP");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_default_key=new RewriteRuleSubtreeStream(adaptor,"rule default_key");
        try {
            // PLSQLParser.g:934:5: ( ( ASSIGN_OP | default_key ) expression -> ^( DEFAULT_VALUE ^( EXPR expression ) ) )
            // PLSQLParser.g:934:10: ( ASSIGN_OP | default_key ) expression
            {
            // PLSQLParser.g:934:10: ( ASSIGN_OP | default_key )
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==ASSIGN_OP) ) {
                alt199=1;
            }
            else if ( (LA199_0==SQL92_RESERVED_DEFAULT) ) {
                alt199=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;

            }
            switch (alt199) {
                case 1 :
                    // PLSQLParser.g:934:11: ASSIGN_OP
                    {
                    ASSIGN_OP710=(Token)match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_default_value_part9470); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASSIGN_OP.add(ASSIGN_OP710);


                    }
                    break;
                case 2 :
                    // PLSQLParser.g:934:21: default_key
                    {
                    pushFollow(FOLLOW_default_key_in_default_value_part9472);
                    default_key711=default_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_default_key.add(default_key711.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_expression_in_default_value_part9475);
            expression712=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression712.getTree());

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 935:9: -> ^( DEFAULT_VALUE ^( EXPR expression ) )
            {
                // PLSQLParser.g:935:12: ^( DEFAULT_VALUE ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_VALUE, "DEFAULT_VALUE")
                , root_1);

                // PLSQLParser.g:935:28: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_value_part"


    public static class declare_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declare_spec"
    // PLSQLParser.g:944:1: declare_spec options {backtrack=true; } : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | pragma_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body );
    public final declare_spec_return declare_spec() throws RecognitionException {
        declare_spec_return retval = new declare_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        variable_declaration_return variable_declaration713 =null;

        subtype_declaration_return subtype_declaration714 =null;

        cursor_declaration_return cursor_declaration715 =null;

        exception_declaration_return exception_declaration716 =null;

        pragma_declaration_return pragma_declaration717 =null;

        record_declaration_return record_declaration718 =null;

        table_declaration_return table_declaration719 =null;

        create_procedure_body_return create_procedure_body720 =null;

        create_function_body_return create_function_body721 =null;



        try {
            // PLSQLParser.g:947:6: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | pragma_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body )
            int alt200=9;
            switch ( input.LA(1) ) {
            case INTRODUCER:
                {
                int LA200_1 = input.LA(2);

                if ( (synpred35_PLSQLParser()) ) {
                    alt200=1;
                }
                else if ( (synpred38_PLSQLParser()) ) {
                    alt200=4;
                }
                else if ( (synpred40_PLSQLParser()) ) {
                    alt200=6;
                }
                else if ( (synpred41_PLSQLParser()) ) {
                    alt200=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 1, input);

                    throw nvae;

                }
                }
                break;
            case REGULAR_ID:
                {
                int LA200_2 = input.LA(2);

                if ( (synpred35_PLSQLParser()) ) {
                    alt200=1;
                }
                else if ( (((synpred36_PLSQLParser()&&synpred36_PLSQLParser())&&(input.LT(1).getText().equalsIgnoreCase("subtype")))) ) {
                    alt200=2;
                }
                else if ( (synpred38_PLSQLParser()) ) {
                    alt200=4;
                }
                else if ( (((synpred39_PLSQLParser()&&synpred39_PLSQLParser())&&(input.LT(1).getText().equalsIgnoreCase("pragma")))) ) {
                    alt200=5;
                }
                else if ( (synpred40_PLSQLParser()) ) {
                    alt200=6;
                }
                else if ( (synpred41_PLSQLParser()) ) {
                    alt200=7;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
                    alt200=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 2, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA200_3 = input.LA(2);

                if ( (synpred35_PLSQLParser()) ) {
                    alt200=1;
                }
                else if ( (synpred38_PLSQLParser()) ) {
                    alt200=4;
                }
                else if ( (synpred40_PLSQLParser()) ) {
                    alt200=6;
                }
                else if ( (synpred41_PLSQLParser()) ) {
                    alt200=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 3, input);

                    throw nvae;

                }
                }
                break;
            case BINDVAR:
                {
                int LA200_4 = input.LA(2);

                if ( (synpred35_PLSQLParser()) ) {
                    alt200=1;
                }
                else if ( (synpred40_PLSQLParser()) ) {
                    alt200=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 4, input);

                    throw nvae;

                }
                }
                break;
            case COLON:
                {
                int LA200_5 = input.LA(2);

                if ( (synpred35_PLSQLParser()) ) {
                    alt200=1;
                }
                else if ( (synpred40_PLSQLParser()) ) {
                    alt200=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 5, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CURSOR:
                {
                alt200=3;
                }
                break;
            case SQL92_RESERVED_CREATE:
                {
                int LA200_7 = input.LA(2);

                if ( (synpred42_PLSQLParser()) ) {
                    alt200=8;
                }
                else if ( (true) ) {
                    alt200=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 7, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_PROCEDURE:
                {
                alt200=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;

            }

            switch (alt200) {
                case 1 :
                    // PLSQLParser.g:947:11: variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_in_declare_spec9529);
                    variable_declaration713=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration713.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:948:11: subtype_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_subtype_declaration_in_declare_spec9541);
                    subtype_declaration714=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration714.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:949:11: cursor_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_declaration_in_declare_spec9553);
                    cursor_declaration715=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration715.getTree());

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:950:11: exception_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_exception_declaration_in_declare_spec9565);
                    exception_declaration716=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration716.getTree());

                    }
                    break;
                case 5 :
                    // PLSQLParser.g:951:11: pragma_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_pragma_declaration_in_declare_spec9577);
                    pragma_declaration717=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration717.getTree());

                    }
                    break;
                case 6 :
                    // PLSQLParser.g:952:11: record_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_record_declaration_in_declare_spec9589);
                    record_declaration718=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration718.getTree());

                    }
                    break;
                case 7 :
                    // PLSQLParser.g:953:11: table_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_table_declaration_in_declare_spec9601);
                    table_declaration719=table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_declaration719.getTree());

                    }
                    break;
                case 8 :
                    // PLSQLParser.g:954:11: create_procedure_body
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_procedure_body_in_declare_spec9613);
                    create_procedure_body720=create_procedure_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_procedure_body720.getTree());

                    }
                    break;
                case 9 :
                    // PLSQLParser.g:955:11: create_function_body
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_function_body_in_declare_spec9625);
                    create_function_body721=create_function_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_function_body721.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declare_spec"


    public static class variable_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration"
    // PLSQLParser.g:959:1: variable_declaration : variable_name ( constant_key )? type_spec ( not_key null_key )? ( default_value_part )? SEMICOLON -> ^( VARIABLE_DECLARE variable_name type_spec ( constant_key )? ( null_key )? ( default_value_part )? ) ;
    public final variable_declaration_return variable_declaration() throws RecognitionException {
        variable_declaration_return retval = new variable_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON728=null;
        PLSQLParser_PLSQLCommons.variable_name_return variable_name722 =null;

        PLSQLParser_PLSQLKeys.constant_key_return constant_key723 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec724 =null;

        PLSQLParser_PLSQLKeys.not_key_return not_key725 =null;

        PLSQLParser_PLSQLKeys.null_key_return null_key726 =null;

        default_value_part_return default_value_part727 =null;


        Object SEMICOLON728_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_variable_name=new RewriteRuleSubtreeStream(adaptor,"rule variable_name");
        RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
        RewriteRuleSubtreeStream stream_default_value_part=new RewriteRuleSubtreeStream(adaptor,"rule default_value_part");
        RewriteRuleSubtreeStream stream_constant_key=new RewriteRuleSubtreeStream(adaptor,"rule constant_key");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        try {
            // PLSQLParser.g:960:5: ( variable_name ( constant_key )? type_spec ( not_key null_key )? ( default_value_part )? SEMICOLON -> ^( VARIABLE_DECLARE variable_name type_spec ( constant_key )? ( null_key )? ( default_value_part )? ) )
            // PLSQLParser.g:960:10: variable_name ( constant_key )? type_spec ( not_key null_key )? ( default_value_part )? SEMICOLON
            {
            pushFollow(FOLLOW_variable_name_in_variable_declaration9646);
            variable_name722=variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_name.add(variable_name722.getTree());

            // PLSQLParser.g:960:24: ( constant_key )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==REGULAR_ID) ) {
                int LA201_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("constant"))) ) {
                    alt201=1;
                }
            }
            switch (alt201) {
                case 1 :
                    // PLSQLParser.g:960:24: constant_key
                    {
                    pushFollow(FOLLOW_constant_key_in_variable_declaration9648);
                    constant_key723=constant_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant_key.add(constant_key723.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_type_spec_in_variable_declaration9659);
            type_spec724=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec724.getTree());

            // PLSQLParser.g:961:19: ( not_key null_key )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==SQL92_RESERVED_NOT) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // PLSQLParser.g:961:20: not_key null_key
                    {
                    pushFollow(FOLLOW_not_key_in_variable_declaration9662);
                    not_key725=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_not_key.add(not_key725.getTree());

                    pushFollow(FOLLOW_null_key_in_variable_declaration9664);
                    null_key726=null_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_null_key.add(null_key726.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:962:9: ( default_value_part )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==ASSIGN_OP||LA203_0==SQL92_RESERVED_DEFAULT) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // PLSQLParser.g:962:9: default_value_part
                    {
                    pushFollow(FOLLOW_default_value_part_in_variable_declaration9677);
                    default_value_part727=default_value_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_default_value_part.add(default_value_part727.getTree());

                    }
                    break;

            }


            SEMICOLON728=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_declaration9680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON728);


            // AST REWRITE
            // elements: constant_key, variable_name, type_spec, default_value_part, null_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 963:9: -> ^( VARIABLE_DECLARE variable_name type_spec ( constant_key )? ( null_key )? ( default_value_part )? )
            {
                // PLSQLParser.g:963:12: ^( VARIABLE_DECLARE variable_name type_spec ( constant_key )? ( null_key )? ( default_value_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_DECLARE, "VARIABLE_DECLARE")
                , root_1);

                adaptor.addChild(root_1, stream_variable_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:963:55: ( constant_key )?
                if ( stream_constant_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_constant_key.nextTree());

                }
                stream_constant_key.reset();

                // PLSQLParser.g:963:69: ( null_key )?
                if ( stream_null_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_null_key.nextTree());

                }
                stream_null_key.reset();

                // PLSQLParser.g:963:79: ( default_value_part )?
                if ( stream_default_value_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_default_value_part.nextTree());

                }
                stream_default_value_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"


    public static class subtype_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subtype_declaration"
    // PLSQLParser.g:966:1: subtype_declaration : subtype_key type_name is_key type_spec ( range_key expression DOUBLE_PERIOD expression )? ( not_key null_key )? SEMICOLON -> {mode == 1}? ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ^( range_key ( ^( EXPR expression ) )+ ) ) -> ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ) ;
    public final subtype_declaration_return subtype_declaration() throws RecognitionException {
        subtype_declaration_return retval = new subtype_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOUBLE_PERIOD735=null;
        Token SEMICOLON739=null;
        PLSQLParser_PLSQLKeys.subtype_key_return subtype_key729 =null;

        PLSQLParser_PLSQLCommons.type_name_return type_name730 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key731 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec732 =null;

        PLSQLParser_PLSQLKeys.range_key_return range_key733 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression734 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression736 =null;

        PLSQLParser_PLSQLKeys.not_key_return not_key737 =null;

        PLSQLParser_PLSQLKeys.null_key_return null_key738 =null;


        Object DOUBLE_PERIOD735_tree=null;
        Object SEMICOLON739_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
        RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_subtype_key=new RewriteRuleSubtreeStream(adaptor,"rule subtype_key");
        RewriteRuleSubtreeStream stream_range_key=new RewriteRuleSubtreeStream(adaptor,"rule range_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:968:7: ( subtype_key type_name is_key type_spec ( range_key expression DOUBLE_PERIOD expression )? ( not_key null_key )? SEMICOLON -> {mode == 1}? ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ^( range_key ( ^( EXPR expression ) )+ ) ) -> ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ) )
            // PLSQLParser.g:968:12: subtype_key type_name is_key type_spec ( range_key expression DOUBLE_PERIOD expression )? ( not_key null_key )? SEMICOLON
            {
            pushFollow(FOLLOW_subtype_key_in_subtype_declaration9741);
            subtype_key729=subtype_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subtype_key.add(subtype_key729.getTree());

            pushFollow(FOLLOW_type_name_in_subtype_declaration9743);
            type_name730=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_name.add(type_name730.getTree());

            pushFollow(FOLLOW_is_key_in_subtype_declaration9745);
            is_key731=is_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_is_key.add(is_key731.getTree());

            pushFollow(FOLLOW_type_spec_in_subtype_declaration9747);
            type_spec732=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec732.getTree());

            // PLSQLParser.g:969:11: ( range_key expression DOUBLE_PERIOD expression )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("range")))) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // PLSQLParser.g:969:12: range_key expression DOUBLE_PERIOD expression
                    {
                    pushFollow(FOLLOW_range_key_in_subtype_declaration9760);
                    range_key733=range_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_range_key.add(range_key733.getTree());

                    pushFollow(FOLLOW_expression_in_subtype_declaration9762);
                    expression734=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression734.getTree());

                    DOUBLE_PERIOD735=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_subtype_declaration9764); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD735);


                    pushFollow(FOLLOW_expression_in_subtype_declaration9766);
                    expression736=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression736.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            // PLSQLParser.g:970:11: ( not_key null_key )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==SQL92_RESERVED_NOT) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // PLSQLParser.g:970:12: not_key null_key
                    {
                    pushFollow(FOLLOW_not_key_in_subtype_declaration9783);
                    not_key737=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_not_key.add(not_key737.getTree());

                    pushFollow(FOLLOW_null_key_in_subtype_declaration9785);
                    null_key738=null_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_null_key.add(null_key738.getTree());

                    }
                    break;

            }


            SEMICOLON739=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_subtype_declaration9789); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON739);


            // AST REWRITE
            // elements: null_key, type_name, null_key, type_spec, expression, type_name, type_spec, range_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 971:11: -> {mode == 1}? ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ^( range_key ( ^( EXPR expression ) )+ ) )
            if (mode == 1) {
                // PLSQLParser.g:971:27: ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ^( range_key ( ^( EXPR expression ) )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUBTYPE_DECLARE, (subtype_key729!=null?((Token)subtype_key729.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:971:85: ( null_key )?
                if ( stream_null_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_null_key.nextTree());

                }
                stream_null_key.reset();

                // PLSQLParser.g:971:95: ^( range_key ( ^( EXPR expression ) )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_range_key.nextNode(), root_2);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    // PLSQLParser.g:971:107: ^( EXPR expression )
                    {
                    Object root_3 = (Object)adaptor.nil();
                    root_3 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(EXPR, "EXPR")
                    , root_3);

                    adaptor.addChild(root_3, stream_expression.nextTree());

                    adaptor.addChild(root_2, root_3);
                    }

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 972:11: -> ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? )
            {
                // PLSQLParser.g:972:14: ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUBTYPE_DECLARE, (subtype_key729!=null?((Token)subtype_key729.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                // PLSQLParser.g:972:72: ( null_key )?
                if ( stream_null_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_null_key.nextTree());

                }
                stream_null_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subtype_declaration"


    public static class cursor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_declaration"
    // PLSQLParser.g:976:1: cursor_declaration : cursor_key cursor_name ( LEFT_PAREN parameter_spec ( COMMA parameter_spec )* RIGHT_PAREN )? ( return_key type_spec )? ( is_key select_statement )? SEMICOLON -> ^( CURSOR_DECLARE[$cursor_key.start] cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) ;
    public final cursor_declaration_return cursor_declaration() throws RecognitionException {
        cursor_declaration_return retval = new cursor_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN742=null;
        Token COMMA744=null;
        Token RIGHT_PAREN746=null;
        Token SEMICOLON751=null;
        PLSQLParser_PLSQLKeys.cursor_key_return cursor_key740 =null;

        PLSQLParser_PLSQLCommons.cursor_name_return cursor_name741 =null;

        parameter_spec_return parameter_spec743 =null;

        parameter_spec_return parameter_spec745 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key747 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec748 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key749 =null;

        PLSQLParser_PLSQL_DMLParser.select_statement_return select_statement750 =null;


        Object LEFT_PAREN742_tree=null;
        Object COMMA744_tree=null;
        Object RIGHT_PAREN746_tree=null;
        Object SEMICOLON751_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_parameter_spec=new RewriteRuleSubtreeStream(adaptor,"rule parameter_spec");
        RewriteRuleSubtreeStream stream_cursor_key=new RewriteRuleSubtreeStream(adaptor,"rule cursor_key");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        RewriteRuleSubtreeStream stream_cursor_name=new RewriteRuleSubtreeStream(adaptor,"rule cursor_name");
        try {
            // PLSQLParser.g:977:5: ( cursor_key cursor_name ( LEFT_PAREN parameter_spec ( COMMA parameter_spec )* RIGHT_PAREN )? ( return_key type_spec )? ( is_key select_statement )? SEMICOLON -> ^( CURSOR_DECLARE[$cursor_key.start] cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) )
            // PLSQLParser.g:977:10: cursor_key cursor_name ( LEFT_PAREN parameter_spec ( COMMA parameter_spec )* RIGHT_PAREN )? ( return_key type_spec )? ( is_key select_statement )? SEMICOLON
            {
            pushFollow(FOLLOW_cursor_key_in_cursor_declaration9873);
            cursor_key740=cursor_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cursor_key.add(cursor_key740.getTree());

            pushFollow(FOLLOW_cursor_name_in_cursor_declaration9875);
            cursor_name741=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cursor_name.add(cursor_name741.getTree());

            // PLSQLParser.g:978:15: ( LEFT_PAREN parameter_spec ( COMMA parameter_spec )* RIGHT_PAREN )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==LEFT_PAREN) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // PLSQLParser.g:978:16: LEFT_PAREN parameter_spec ( COMMA parameter_spec )* RIGHT_PAREN
                    {
                    LEFT_PAREN742=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cursor_declaration9892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN742);


                    pushFollow(FOLLOW_parameter_spec_in_cursor_declaration9894);
                    parameter_spec743=parameter_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parameter_spec.add(parameter_spec743.getTree());

                    // PLSQLParser.g:978:42: ( COMMA parameter_spec )*
                    loop206:
                    do {
                        int alt206=2;
                        int LA206_0 = input.LA(1);

                        if ( (LA206_0==COMMA) ) {
                            alt206=1;
                        }


                        switch (alt206) {
                    	case 1 :
                    	    // PLSQLParser.g:978:43: COMMA parameter_spec
                    	    {
                    	    COMMA744=(Token)match(input,COMMA,FOLLOW_COMMA_in_cursor_declaration9897); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA744);


                    	    pushFollow(FOLLOW_parameter_spec_in_cursor_declaration9899);
                    	    parameter_spec745=parameter_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_parameter_spec.add(parameter_spec745.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop206;
                        }
                    } while (true);


                    RIGHT_PAREN746=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cursor_declaration9903); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN746);


                    }
                    break;

            }


            // PLSQLParser.g:979:15: ( return_key type_spec )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==REGULAR_ID) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // PLSQLParser.g:979:16: return_key type_spec
                    {
                    pushFollow(FOLLOW_return_key_in_cursor_declaration9923);
                    return_key747=return_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_return_key.add(return_key747.getTree());

                    pushFollow(FOLLOW_type_spec_in_cursor_declaration9925);
                    type_spec748=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec748.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:979:39: ( is_key select_statement )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==SQL92_RESERVED_IS) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    // PLSQLParser.g:979:40: is_key select_statement
                    {
                    pushFollow(FOLLOW_is_key_in_cursor_declaration9930);
                    is_key749=is_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_is_key.add(is_key749.getTree());

                    pushFollow(FOLLOW_select_statement_in_cursor_declaration9932);
                    select_statement750=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_statement.add(select_statement750.getTree());

                    }
                    break;

            }


            SEMICOLON751=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_cursor_declaration9936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON751);


            // AST REWRITE
            // elements: cursor_name, parameter_spec, type_spec, select_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 980:9: -> ^( CURSOR_DECLARE[$cursor_key.start] cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) )
            {
                // PLSQLParser.g:980:12: ^( CURSOR_DECLARE[$cursor_key.start] cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CURSOR_DECLARE, (cursor_key740!=null?((Token)cursor_key740.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_cursor_name.nextTree());

                // PLSQLParser.g:980:60: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();

                // PLSQLParser.g:980:71: ( select_statement )?
                if ( stream_select_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_select_statement.nextTree());

                }
                stream_select_statement.reset();

                // PLSQLParser.g:980:89: ^( PARAMETERS ( parameter_spec )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETERS, "PARAMETERS")
                , root_2);

                // PLSQLParser.g:980:102: ( parameter_spec )*
                while ( stream_parameter_spec.hasNext() ) {
                    adaptor.addChild(root_2, stream_parameter_spec.nextTree());

                }
                stream_parameter_spec.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cursor_declaration"


    public static class parameter_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameter_spec"
    // PLSQLParser.g:983:1: parameter_spec : parameter_name ( ( in_key )? type_spec )? ( default_value_part )? -> ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) ;
    public final parameter_spec_return parameter_spec() throws RecognitionException {
        parameter_spec_return retval = new parameter_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.parameter_name_return parameter_name752 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key753 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec754 =null;

        default_value_part_return default_value_part755 =null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_default_value_part=new RewriteRuleSubtreeStream(adaptor,"rule default_value_part");
        RewriteRuleSubtreeStream stream_parameter_name=new RewriteRuleSubtreeStream(adaptor,"rule parameter_name");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        try {
            // PLSQLParser.g:984:5: ( parameter_name ( ( in_key )? type_spec )? ( default_value_part )? -> ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) )
            // PLSQLParser.g:984:10: parameter_name ( ( in_key )? type_spec )? ( default_value_part )?
            {
            pushFollow(FOLLOW_parameter_name_in_parameter_spec9987);
            parameter_name752=parameter_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parameter_name.add(parameter_name752.getTree());

            // PLSQLParser.g:984:25: ( ( in_key )? type_spec )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==DELIMITED_ID||LA211_0==REGULAR_ID||LA211_0==SQL92_RESERVED_DATE||LA211_0==SQL92_RESERVED_IN) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // PLSQLParser.g:984:26: ( in_key )? type_spec
                    {
                    // PLSQLParser.g:984:26: ( in_key )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==SQL92_RESERVED_IN) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // PLSQLParser.g:984:26: in_key
                            {
                            pushFollow(FOLLOW_in_key_in_parameter_spec9990);
                            in_key753=in_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_in_key.add(in_key753.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_spec_in_parameter_spec9993);
                    type_spec754=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec754.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:985:9: ( default_value_part )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==ASSIGN_OP||LA212_0==SQL92_RESERVED_DEFAULT) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // PLSQLParser.g:985:9: default_value_part
                    {
                    pushFollow(FOLLOW_default_value_part_in_parameter_spec10006);
                    default_value_part755=default_value_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_default_value_part.add(default_value_part755.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: default_value_part, parameter_name, type_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 986:9: -> ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
            {
                // PLSQLParser.g:986:12: ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMETER, "PARAMETER")
                , root_1);

                adaptor.addChild(root_1, stream_parameter_name.nextTree());

                // PLSQLParser.g:986:39: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();

                // PLSQLParser.g:986:50: ( default_value_part )?
                if ( stream_default_value_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_default_value_part.nextTree());

                }
                stream_default_value_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameter_spec"


    public static class exception_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_declaration"
    // PLSQLParser.g:989:1: exception_declaration : exception_name exception_key SEMICOLON -> ^( EXCEPTION_DECLARE[$exception_key.start] exception_name ) ;
    public final exception_declaration_return exception_declaration() throws RecognitionException {
        exception_declaration_return retval = new exception_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON758=null;
        PLSQLParser_PLSQLCommons.exception_name_return exception_name756 =null;

        PLSQLParser_PLSQLKeys.exception_key_return exception_key757 =null;


        Object SEMICOLON758_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_exception_name=new RewriteRuleSubtreeStream(adaptor,"rule exception_name");
        RewriteRuleSubtreeStream stream_exception_key=new RewriteRuleSubtreeStream(adaptor,"rule exception_key");
        try {
            // PLSQLParser.g:990:5: ( exception_name exception_key SEMICOLON -> ^( EXCEPTION_DECLARE[$exception_key.start] exception_name ) )
            // PLSQLParser.g:990:10: exception_name exception_key SEMICOLON
            {
            pushFollow(FOLLOW_exception_name_in_exception_declaration10050);
            exception_name756=exception_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exception_name.add(exception_name756.getTree());

            pushFollow(FOLLOW_exception_key_in_exception_declaration10052);
            exception_key757=exception_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exception_key.add(exception_key757.getTree());

            SEMICOLON758=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_exception_declaration10054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON758);


            // AST REWRITE
            // elements: exception_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 991:9: -> ^( EXCEPTION_DECLARE[$exception_key.start] exception_name )
            {
                // PLSQLParser.g:991:12: ^( EXCEPTION_DECLARE[$exception_key.start] exception_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXCEPTION_DECLARE, (exception_key757!=null?((Token)exception_key757.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_exception_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exception_declaration"


    public static class pragma_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragma_declaration"
    // PLSQLParser.g:994:1: pragma_declaration : pragma_key ( serially_reusable_key | autonomous_transaction_key | exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN | inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN | restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN ) SEMICOLON -> {mode == 1}? ^( PRAGMA_DECLARE[$pragma_key.start] serially_reusable_key ) -> {mode == 2}? ^( PRAGMA_DECLARE[$pragma_key.start] autonomous_transaction_key ) -> {mode == 3}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( exception_init_key exception_name numeric ) ) -> {mode == 4}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( inline_key $id1 ^( EXPR expression ) ) ) -> ^( PRAGMA_DECLARE[$pragma_key.start] ^( restrict_references_key ( default_key )? ( id )* ) ) ;
    public final pragma_declaration_return pragma_declaration() throws RecognitionException {
        pragma_declaration_return retval = new pragma_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN763=null;
        Token COMMA765=null;
        Token RIGHT_PAREN767=null;
        Token LEFT_PAREN769=null;
        Token COMMA770=null;
        Token RIGHT_PAREN772=null;
        Token LEFT_PAREN774=null;
        Token COMMA777=null;
        Token RIGHT_PAREN779=null;
        Token SEMICOLON780=null;
        PLSQLParser_PLSQLCommons.id_return id1 =null;

        PLSQLParser_PLSQLKeys.pragma_key_return pragma_key759 =null;

        PLSQLParser_PLSQLKeys.serially_reusable_key_return serially_reusable_key760 =null;

        PLSQLParser_PLSQLKeys.autonomous_transaction_key_return autonomous_transaction_key761 =null;

        PLSQLParser_PLSQLKeys.exception_init_key_return exception_init_key762 =null;

        PLSQLParser_PLSQLCommons.exception_name_return exception_name764 =null;

        PLSQLParser_PLSQLCommons.numeric_return numeric766 =null;

        PLSQLParser_PLSQLKeys.inline_key_return inline_key768 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression771 =null;

        PLSQLParser_PLSQLKeys.restrict_references_key_return restrict_references_key773 =null;

        PLSQLParser_PLSQLCommons.id_return id775 =null;

        PLSQLParser_PLSQLKeys.default_key_return default_key776 =null;

        PLSQLParser_PLSQLCommons.id_return id778 =null;


        Object LEFT_PAREN763_tree=null;
        Object COMMA765_tree=null;
        Object RIGHT_PAREN767_tree=null;
        Object LEFT_PAREN769_tree=null;
        Object COMMA770_tree=null;
        Object RIGHT_PAREN772_tree=null;
        Object LEFT_PAREN774_tree=null;
        Object COMMA777_tree=null;
        Object RIGHT_PAREN779_tree=null;
        Object SEMICOLON780_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_pragma_key=new RewriteRuleSubtreeStream(adaptor,"rule pragma_key");
        RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_exception_init_key=new RewriteRuleSubtreeStream(adaptor,"rule exception_init_key");
        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        RewriteRuleSubtreeStream stream_inline_key=new RewriteRuleSubtreeStream(adaptor,"rule inline_key");
        RewriteRuleSubtreeStream stream_exception_name=new RewriteRuleSubtreeStream(adaptor,"rule exception_name");
        RewriteRuleSubtreeStream stream_restrict_references_key=new RewriteRuleSubtreeStream(adaptor,"rule restrict_references_key");
        RewriteRuleSubtreeStream stream_default_key=new RewriteRuleSubtreeStream(adaptor,"rule default_key");
        RewriteRuleSubtreeStream stream_autonomous_transaction_key=new RewriteRuleSubtreeStream(adaptor,"rule autonomous_transaction_key");
        RewriteRuleSubtreeStream stream_serially_reusable_key=new RewriteRuleSubtreeStream(adaptor,"rule serially_reusable_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:996:5: ( pragma_key ( serially_reusable_key | autonomous_transaction_key | exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN | inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN | restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN ) SEMICOLON -> {mode == 1}? ^( PRAGMA_DECLARE[$pragma_key.start] serially_reusable_key ) -> {mode == 2}? ^( PRAGMA_DECLARE[$pragma_key.start] autonomous_transaction_key ) -> {mode == 3}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( exception_init_key exception_name numeric ) ) -> {mode == 4}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( inline_key $id1 ^( EXPR expression ) ) ) -> ^( PRAGMA_DECLARE[$pragma_key.start] ^( restrict_references_key ( default_key )? ( id )* ) ) )
            // PLSQLParser.g:996:10: pragma_key ( serially_reusable_key | autonomous_transaction_key | exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN | inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN | restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN ) SEMICOLON
            {
            pushFollow(FOLLOW_pragma_key_in_pragma_declaration10112);
            pragma_key759=pragma_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pragma_key.add(pragma_key759.getTree());

            // PLSQLParser.g:997:9: ( serially_reusable_key | autonomous_transaction_key | exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN | inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN | restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN )
            int alt215=5;
            alt215 = dfa215.predict(input);
            switch (alt215) {
                case 1 :
                    // PLSQLParser.g:997:14: serially_reusable_key
                    {
                    pushFollow(FOLLOW_serially_reusable_key_in_pragma_declaration10127);
                    serially_reusable_key760=serially_reusable_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_serially_reusable_key.add(serially_reusable_key760.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:998:14: autonomous_transaction_key
                    {
                    pushFollow(FOLLOW_autonomous_transaction_key_in_pragma_declaration10144);
                    autonomous_transaction_key761=autonomous_transaction_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_autonomous_transaction_key.add(autonomous_transaction_key761.getTree());

                    if ( state.backtracking==0 ) {mode = 2;}

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:999:14: exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_exception_init_key_in_pragma_declaration10161);
                    exception_init_key762=exception_init_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exception_init_key.add(exception_init_key762.getTree());

                    LEFT_PAREN763=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pragma_declaration10163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN763);


                    pushFollow(FOLLOW_exception_name_in_pragma_declaration10165);
                    exception_name764=exception_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exception_name.add(exception_name764.getTree());

                    COMMA765=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration10167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA765);


                    pushFollow(FOLLOW_numeric_in_pragma_declaration10169);
                    numeric766=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric766.getTree());

                    RIGHT_PAREN767=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pragma_declaration10171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN767);


                    if ( state.backtracking==0 ) {mode = 3;}

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:1000:14: inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_inline_key_in_pragma_declaration10189);
                    inline_key768=inline_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inline_key.add(inline_key768.getTree());

                    LEFT_PAREN769=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pragma_declaration10191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN769);


                    pushFollow(FOLLOW_id_in_pragma_declaration10195);
                    id1=id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_id.add(id1.getTree());

                    COMMA770=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration10197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA770);


                    pushFollow(FOLLOW_expression_in_pragma_declaration10199);
                    expression771=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression771.getTree());

                    RIGHT_PAREN772=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pragma_declaration10201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN772);


                    if ( state.backtracking==0 ) {mode = 4;}

                    }
                    break;
                case 5 :
                    // PLSQLParser.g:1001:14: restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_restrict_references_key_in_pragma_declaration10218);
                    restrict_references_key773=restrict_references_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_restrict_references_key.add(restrict_references_key773.getTree());

                    LEFT_PAREN774=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pragma_declaration10220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN774);


                    // PLSQLParser.g:1001:49: ( id | default_key )
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==DELIMITED_ID||LA213_0==INTRODUCER||LA213_0==REGULAR_ID) ) {
                        alt213=1;
                    }
                    else if ( (LA213_0==SQL92_RESERVED_DEFAULT) ) {
                        alt213=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 213, 0, input);

                        throw nvae;

                    }
                    switch (alt213) {
                        case 1 :
                            // PLSQLParser.g:1001:50: id
                            {
                            pushFollow(FOLLOW_id_in_pragma_declaration10223);
                            id775=id();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_id.add(id775.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:1001:53: default_key
                            {
                            pushFollow(FOLLOW_default_key_in_pragma_declaration10225);
                            default_key776=default_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_default_key.add(default_key776.getTree());

                            }
                            break;

                    }


                    // PLSQLParser.g:1001:66: ( COMMA id )+
                    int cnt214=0;
                    loop214:
                    do {
                        int alt214=2;
                        int LA214_0 = input.LA(1);

                        if ( (LA214_0==COMMA) ) {
                            alt214=1;
                        }


                        switch (alt214) {
                    	case 1 :
                    	    // PLSQLParser.g:1001:67: COMMA id
                    	    {
                    	    COMMA777=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration10229); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA777);


                    	    pushFollow(FOLLOW_id_in_pragma_declaration10231);
                    	    id778=id();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_id.add(id778.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt214 >= 1 ) break loop214;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(214, input);
                                throw eee;
                        }
                        cnt214++;
                    } while (true);


                    RIGHT_PAREN779=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pragma_declaration10235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN779);


                    }
                    break;

            }


            SEMICOLON780=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pragma_declaration10255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON780);


            // AST REWRITE
            // elements: restrict_references_key, id1, serially_reusable_key, exception_init_key, autonomous_transaction_key, inline_key, numeric, default_key, expression, id, exception_name
            // token labels: 
            // rule labels: retval, id1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_id1=new RewriteRuleSubtreeStream(adaptor,"rule id1",id1!=null?id1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1004:9: -> {mode == 1}? ^( PRAGMA_DECLARE[$pragma_key.start] serially_reusable_key )
            if (mode == 1) {
                // PLSQLParser.g:1004:25: ^( PRAGMA_DECLARE[$pragma_key.start] serially_reusable_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PRAGMA_DECLARE, (pragma_key759!=null?((Token)pragma_key759.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_serially_reusable_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1005:9: -> {mode == 2}? ^( PRAGMA_DECLARE[$pragma_key.start] autonomous_transaction_key )
            if (mode == 2) {
                // PLSQLParser.g:1005:25: ^( PRAGMA_DECLARE[$pragma_key.start] autonomous_transaction_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PRAGMA_DECLARE, (pragma_key759!=null?((Token)pragma_key759.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_autonomous_transaction_key.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1006:9: -> {mode == 3}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( exception_init_key exception_name numeric ) )
            if (mode == 3) {
                // PLSQLParser.g:1006:25: ^( PRAGMA_DECLARE[$pragma_key.start] ^( exception_init_key exception_name numeric ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PRAGMA_DECLARE, (pragma_key759!=null?((Token)pragma_key759.start):null))
                , root_1);

                // PLSQLParser.g:1006:61: ^( exception_init_key exception_name numeric )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_exception_init_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_exception_name.nextTree());

                adaptor.addChild(root_2, stream_numeric.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1007:9: -> {mode == 4}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( inline_key $id1 ^( EXPR expression ) ) )
            if (mode == 4) {
                // PLSQLParser.g:1007:25: ^( PRAGMA_DECLARE[$pragma_key.start] ^( inline_key $id1 ^( EXPR expression ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PRAGMA_DECLARE, (pragma_key759!=null?((Token)pragma_key759.start):null))
                , root_1);

                // PLSQLParser.g:1007:61: ^( inline_key $id1 ^( EXPR expression ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_inline_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_id1.nextTree());

                // PLSQLParser.g:1007:79: ^( EXPR expression )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_expression.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1008:9: -> ^( PRAGMA_DECLARE[$pragma_key.start] ^( restrict_references_key ( default_key )? ( id )* ) )
            {
                // PLSQLParser.g:1008:12: ^( PRAGMA_DECLARE[$pragma_key.start] ^( restrict_references_key ( default_key )? ( id )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PRAGMA_DECLARE, (pragma_key759!=null?((Token)pragma_key759.start):null))
                , root_1);

                // PLSQLParser.g:1008:48: ^( restrict_references_key ( default_key )? ( id )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_restrict_references_key.nextNode(), root_2);

                // PLSQLParser.g:1008:74: ( default_key )?
                if ( stream_default_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_default_key.nextTree());

                }
                stream_default_key.reset();

                // PLSQLParser.g:1008:87: ( id )*
                while ( stream_id.hasNext() ) {
                    adaptor.addChild(root_2, stream_id.nextTree());

                }
                stream_id.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pragma_declaration"


    public static class record_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "record_declaration"
    // PLSQLParser.g:1011:1: record_declaration : ( record_type_dec | record_var_dec );
    public final record_declaration_return record_declaration() throws RecognitionException {
        record_declaration_return retval = new record_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        record_type_dec_return record_type_dec781 =null;

        record_var_dec_return record_var_dec782 =null;



        try {
            // PLSQLParser.g:1012:5: ( record_type_dec | record_var_dec )
            int alt216=2;
            alt216 = dfa216.predict(input);
            switch (alt216) {
                case 1 :
                    // PLSQLParser.g:1012:10: record_type_dec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_record_type_dec_in_record_declaration10398);
                    record_type_dec781=record_type_dec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_type_dec781.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1013:10: record_var_dec
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_record_var_dec_in_record_declaration10409);
                    record_var_dec782=record_var_dec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_var_dec782.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "record_declaration"


    public static class record_type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "record_type_dec"
    // PLSQLParser.g:1019:1: record_type_dec : type_key type_name is_key ( record_key LEFT_PAREN field_spec ( COMMA field_spec )* RIGHT_PAREN | ref_key cursor_key ( return_key type_spec )? ) SEMICOLON -> ^( RECORD_TYPE_DECLARE[$type_key.start] type_name ( ref_key )? ( type_spec )? ^( FIELDS ( field_spec )* ) ) ;
    public final record_type_dec_return record_type_dec() throws RecognitionException {
        record_type_dec_return retval = new record_type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN787=null;
        Token COMMA789=null;
        Token RIGHT_PAREN791=null;
        Token SEMICOLON796=null;
        PLSQLParser_PLSQLKeys.type_key_return type_key783 =null;

        PLSQLParser_PLSQLCommons.type_name_return type_name784 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key785 =null;

        PLSQLParser_PLSQLKeys.record_key_return record_key786 =null;

        field_spec_return field_spec788 =null;

        field_spec_return field_spec790 =null;

        PLSQLParser_PLSQLKeys.ref_key_return ref_key792 =null;

        PLSQLParser_PLSQLKeys.cursor_key_return cursor_key793 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key794 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec795 =null;


        Object LEFT_PAREN787_tree=null;
        Object COMMA789_tree=null;
        Object RIGHT_PAREN791_tree=null;
        Object SEMICOLON796_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_record_key=new RewriteRuleSubtreeStream(adaptor,"rule record_key");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
        RewriteRuleSubtreeStream stream_cursor_key=new RewriteRuleSubtreeStream(adaptor,"rule cursor_key");
        RewriteRuleSubtreeStream stream_ref_key=new RewriteRuleSubtreeStream(adaptor,"rule ref_key");
        RewriteRuleSubtreeStream stream_field_spec=new RewriteRuleSubtreeStream(adaptor,"rule field_spec");
        RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");
        try {
            // PLSQLParser.g:1020:5: ( type_key type_name is_key ( record_key LEFT_PAREN field_spec ( COMMA field_spec )* RIGHT_PAREN | ref_key cursor_key ( return_key type_spec )? ) SEMICOLON -> ^( RECORD_TYPE_DECLARE[$type_key.start] type_name ( ref_key )? ( type_spec )? ^( FIELDS ( field_spec )* ) ) )
            // PLSQLParser.g:1020:10: type_key type_name is_key ( record_key LEFT_PAREN field_spec ( COMMA field_spec )* RIGHT_PAREN | ref_key cursor_key ( return_key type_spec )? ) SEMICOLON
            {
            pushFollow(FOLLOW_type_key_in_record_type_dec10432);
            type_key783=type_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_key.add(type_key783.getTree());

            pushFollow(FOLLOW_type_name_in_record_type_dec10434);
            type_name784=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_name.add(type_name784.getTree());

            pushFollow(FOLLOW_is_key_in_record_type_dec10436);
            is_key785=is_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_is_key.add(is_key785.getTree());

            // PLSQLParser.g:1021:5: ( record_key LEFT_PAREN field_spec ( COMMA field_spec )* RIGHT_PAREN | ref_key cursor_key ( return_key type_spec )? )
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("record"))||(input.LT(1).getText().equalsIgnoreCase("ref"))))) {
                int LA219_1 = input.LA(2);

                if ( (LA219_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("record")))) {
                    alt219=1;
                }
                else if ( (LA219_1==SQL92_RESERVED_CURSOR) && ((input.LT(1).getText().equalsIgnoreCase("ref")))) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;

            }
            switch (alt219) {
                case 1 :
                    // PLSQLParser.g:1021:10: record_key LEFT_PAREN field_spec ( COMMA field_spec )* RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_record_key_in_record_type_dec10448);
                    record_key786=record_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_record_key.add(record_key786.getTree());

                    LEFT_PAREN787=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_record_type_dec10450); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN787);


                    pushFollow(FOLLOW_field_spec_in_record_type_dec10452);
                    field_spec788=field_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_spec.add(field_spec788.getTree());

                    // PLSQLParser.g:1021:43: ( COMMA field_spec )*
                    loop217:
                    do {
                        int alt217=2;
                        int LA217_0 = input.LA(1);

                        if ( (LA217_0==COMMA) ) {
                            alt217=1;
                        }


                        switch (alt217) {
                    	case 1 :
                    	    // PLSQLParser.g:1021:45: COMMA field_spec
                    	    {
                    	    COMMA789=(Token)match(input,COMMA,FOLLOW_COMMA_in_record_type_dec10456); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA789);


                    	    pushFollow(FOLLOW_field_spec_in_record_type_dec10458);
                    	    field_spec790=field_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_field_spec.add(field_spec790.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop217;
                        }
                    } while (true);


                    RIGHT_PAREN791=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_record_type_dec10463); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN791);


                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1022:10: ref_key cursor_key ( return_key type_spec )?
                    {
                    pushFollow(FOLLOW_ref_key_in_record_type_dec10474);
                    ref_key792=ref_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ref_key.add(ref_key792.getTree());

                    pushFollow(FOLLOW_cursor_key_in_record_type_dec10476);
                    cursor_key793=cursor_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cursor_key.add(cursor_key793.getTree());

                    // PLSQLParser.g:1022:29: ( return_key type_spec )?
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==REGULAR_ID) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            // PLSQLParser.g:1022:30: return_key type_spec
                            {
                            pushFollow(FOLLOW_return_key_in_record_type_dec10479);
                            return_key794=return_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_return_key.add(return_key794.getTree());

                            pushFollow(FOLLOW_type_spec_in_record_type_dec10481);
                            type_spec795=type_spec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type_spec.add(type_spec795.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            SEMICOLON796=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_record_type_dec10494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON796);


            // AST REWRITE
            // elements: type_name, type_spec, field_spec, ref_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1024:5: -> ^( RECORD_TYPE_DECLARE[$type_key.start] type_name ( ref_key )? ( type_spec )? ^( FIELDS ( field_spec )* ) )
            {
                // PLSQLParser.g:1024:8: ^( RECORD_TYPE_DECLARE[$type_key.start] type_name ( ref_key )? ( type_spec )? ^( FIELDS ( field_spec )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RECORD_TYPE_DECLARE, (type_key783!=null?((Token)type_key783.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                // PLSQLParser.g:1024:57: ( ref_key )?
                if ( stream_ref_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_ref_key.nextTree());

                }
                stream_ref_key.reset();

                // PLSQLParser.g:1024:66: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();

                // PLSQLParser.g:1024:77: ^( FIELDS ( field_spec )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELDS, "FIELDS")
                , root_2);

                // PLSQLParser.g:1024:86: ( field_spec )*
                while ( stream_field_spec.hasNext() ) {
                    adaptor.addChild(root_2, stream_field_spec.nextTree());

                }
                stream_field_spec.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "record_type_dec"


    public static class field_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_spec"
    // PLSQLParser.g:1027:1: field_spec : column_name ( type_spec )? ( not_key null_key )? ( default_value_part )? -> ^( FIELD_SPEC column_name ( type_spec )? ( null_key )? ( default_value_part )? ) ;
    public final field_spec_return field_spec() throws RecognitionException {
        field_spec_return retval = new field_spec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.column_name_return column_name797 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec798 =null;

        PLSQLParser_PLSQLKeys.not_key_return not_key799 =null;

        PLSQLParser_PLSQLKeys.null_key_return null_key800 =null;

        default_value_part_return default_value_part801 =null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
        RewriteRuleSubtreeStream stream_default_value_part=new RewriteRuleSubtreeStream(adaptor,"rule default_value_part");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            // PLSQLParser.g:1028:5: ( column_name ( type_spec )? ( not_key null_key )? ( default_value_part )? -> ^( FIELD_SPEC column_name ( type_spec )? ( null_key )? ( default_value_part )? ) )
            // PLSQLParser.g:1028:10: column_name ( type_spec )? ( not_key null_key )? ( default_value_part )?
            {
            pushFollow(FOLLOW_column_name_in_field_spec10540);
            column_name797=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_column_name.add(column_name797.getTree());

            // PLSQLParser.g:1028:22: ( type_spec )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==DELIMITED_ID||LA220_0==REGULAR_ID||LA220_0==SQL92_RESERVED_DATE) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // PLSQLParser.g:1028:22: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_field_spec10542);
                    type_spec798=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec798.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:1029:9: ( not_key null_key )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==SQL92_RESERVED_NOT) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // PLSQLParser.g:1029:10: not_key null_key
                    {
                    pushFollow(FOLLOW_not_key_in_field_spec10554);
                    not_key799=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_not_key.add(not_key799.getTree());

                    pushFollow(FOLLOW_null_key_in_field_spec10556);
                    null_key800=null_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_null_key.add(null_key800.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:1030:9: ( default_value_part )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==ASSIGN_OP||LA222_0==SQL92_RESERVED_DEFAULT) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // PLSQLParser.g:1030:9: default_value_part
                    {
                    pushFollow(FOLLOW_default_value_part_in_field_spec10568);
                    default_value_part801=default_value_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_default_value_part.add(default_value_part801.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: column_name, null_key, type_spec, default_value_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1031:9: -> ^( FIELD_SPEC column_name ( type_spec )? ( null_key )? ( default_value_part )? )
            {
                // PLSQLParser.g:1031:12: ^( FIELD_SPEC column_name ( type_spec )? ( null_key )? ( default_value_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_SPEC, "FIELD_SPEC")
                , root_1);

                adaptor.addChild(root_1, stream_column_name.nextTree());

                // PLSQLParser.g:1031:37: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();

                // PLSQLParser.g:1031:48: ( null_key )?
                if ( stream_null_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_null_key.nextTree());

                }
                stream_null_key.reset();

                // PLSQLParser.g:1031:58: ( default_value_part )?
                if ( stream_default_value_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_default_value_part.nextTree());

                }
                stream_default_value_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_spec"


    public static class record_var_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "record_var_dec"
    // PLSQLParser.g:1034:1: record_var_dec : record_name type_name ( percent_rowtype_key | percent_type_key ) SEMICOLON -> ^( RECORD_VAR_DECLARE record_name type_name ( percent_rowtype_key )? ( percent_type_key )? ) ;
    public final record_var_dec_return record_var_dec() throws RecognitionException {
        record_var_dec_return retval = new record_var_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON806=null;
        PLSQLParser_PLSQLCommons.record_name_return record_name802 =null;

        PLSQLParser_PLSQLCommons.type_name_return type_name803 =null;

        PLSQLParser_PLSQLKeys.percent_rowtype_key_return percent_rowtype_key804 =null;

        PLSQLParser_PLSQLKeys.percent_type_key_return percent_type_key805 =null;


        Object SEMICOLON806_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_record_name=new RewriteRuleSubtreeStream(adaptor,"rule record_name");
        RewriteRuleSubtreeStream stream_percent_type_key=new RewriteRuleSubtreeStream(adaptor,"rule percent_type_key");
        RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
        RewriteRuleSubtreeStream stream_percent_rowtype_key=new RewriteRuleSubtreeStream(adaptor,"rule percent_rowtype_key");
        try {
            // PLSQLParser.g:1035:5: ( record_name type_name ( percent_rowtype_key | percent_type_key ) SEMICOLON -> ^( RECORD_VAR_DECLARE record_name type_name ( percent_rowtype_key )? ( percent_type_key )? ) )
            // PLSQLParser.g:1035:10: record_name type_name ( percent_rowtype_key | percent_type_key ) SEMICOLON
            {
            pushFollow(FOLLOW_record_name_in_record_var_dec10614);
            record_name802=record_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_record_name.add(record_name802.getTree());

            pushFollow(FOLLOW_type_name_in_record_var_dec10616);
            type_name803=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_name.add(type_name803.getTree());

            // PLSQLParser.g:1035:32: ( percent_rowtype_key | percent_type_key )
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==PERCENT) && (((input.LT(2).getText().equalsIgnoreCase("type"))||(input.LT(2).getText().equalsIgnoreCase("rowtype"))))) {
                int LA223_1 = input.LA(2);

                if ( (LA223_1==REGULAR_ID) && (((input.LT(2).getText().equalsIgnoreCase("type"))||(input.LT(2).getText().equalsIgnoreCase("rowtype"))))) {
                    int LA223_2 = input.LA(3);

                    if ( ((input.LT(2).getText().equalsIgnoreCase("rowtype"))) ) {
                        alt223=1;
                    }
                    else if ( ((input.LT(2).getText().equalsIgnoreCase("type"))) ) {
                        alt223=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 223, 2, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 223, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;

            }
            switch (alt223) {
                case 1 :
                    // PLSQLParser.g:1035:33: percent_rowtype_key
                    {
                    pushFollow(FOLLOW_percent_rowtype_key_in_record_var_dec10619);
                    percent_rowtype_key804=percent_rowtype_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_percent_rowtype_key.add(percent_rowtype_key804.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1035:53: percent_type_key
                    {
                    pushFollow(FOLLOW_percent_type_key_in_record_var_dec10621);
                    percent_type_key805=percent_type_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_percent_type_key.add(percent_type_key805.getTree());

                    }
                    break;

            }


            SEMICOLON806=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_record_var_dec10624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON806);


            // AST REWRITE
            // elements: percent_rowtype_key, record_name, type_name, percent_type_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1036:9: -> ^( RECORD_VAR_DECLARE record_name type_name ( percent_rowtype_key )? ( percent_type_key )? )
            {
                // PLSQLParser.g:1036:12: ^( RECORD_VAR_DECLARE record_name type_name ( percent_rowtype_key )? ( percent_type_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RECORD_VAR_DECLARE, "RECORD_VAR_DECLARE")
                , root_1);

                adaptor.addChild(root_1, stream_record_name.nextTree());

                adaptor.addChild(root_1, stream_type_name.nextTree());

                // PLSQLParser.g:1036:55: ( percent_rowtype_key )?
                if ( stream_percent_rowtype_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_percent_rowtype_key.nextTree());

                }
                stream_percent_rowtype_key.reset();

                // PLSQLParser.g:1036:76: ( percent_type_key )?
                if ( stream_percent_type_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_percent_type_key.nextTree());

                }
                stream_percent_type_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "record_var_dec"


    public static class table_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_declaration"
    // PLSQLParser.g:1041:1: table_declaration : ( table_type_dec | table_var_dec ) SEMICOLON !;
    public final table_declaration_return table_declaration() throws RecognitionException {
        table_declaration_return retval = new table_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON809=null;
        table_type_dec_return table_type_dec807 =null;

        table_var_dec_return table_var_dec808 =null;


        Object SEMICOLON809_tree=null;

        try {
            // PLSQLParser.g:1042:5: ( ( table_type_dec | table_var_dec ) SEMICOLON !)
            // PLSQLParser.g:1042:10: ( table_type_dec | table_var_dec ) SEMICOLON !
            {
            root_0 = (Object)adaptor.nil();


            // PLSQLParser.g:1042:10: ( table_type_dec | table_var_dec )
            int alt224=2;
            alt224 = dfa224.predict(input);
            switch (alt224) {
                case 1 :
                    // PLSQLParser.g:1042:11: table_type_dec
                    {
                    pushFollow(FOLLOW_table_type_dec_in_table_declaration10671);
                    table_type_dec807=table_type_dec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_type_dec807.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1042:28: table_var_dec
                    {
                    pushFollow(FOLLOW_table_var_dec_in_table_declaration10675);
                    table_var_dec808=table_var_dec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_var_dec808.getTree());

                    }
                    break;

            }


            SEMICOLON809=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_table_declaration10678); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "table_declaration"


    public static class table_type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_type_dec"
    // PLSQLParser.g:1045:1: table_type_dec : type_key type_name is_key ( table_key of_key type_spec ( table_indexed_by_part )? ( not_key null_key )? | varray_type_def ) -> {mode == 1}? ^( TABLE_TYPE_DECLARE[$type_key.start] type_name varray_type_def ) -> ^( TABLE_TYPE_DECLARE[$type_key.start] type_name ( null_key )? ^( table_key type_spec ( table_indexed_by_part )? ) ) ;
    public final table_type_dec_return table_type_dec() throws RecognitionException {
        table_type_dec_return retval = new table_type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.type_key_return type_key810 =null;

        PLSQLParser_PLSQLCommons.type_name_return type_name811 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key812 =null;

        PLSQLParser_PLSQLKeys.table_key_return table_key813 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key814 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec815 =null;

        table_indexed_by_part_return table_indexed_by_part816 =null;

        PLSQLParser_PLSQLKeys.not_key_return not_key817 =null;

        PLSQLParser_PLSQLKeys.null_key_return null_key818 =null;

        varray_type_def_return varray_type_def819 =null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_varray_type_def=new RewriteRuleSubtreeStream(adaptor,"rule varray_type_def");
        RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
        RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
        RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
        RewriteRuleSubtreeStream stream_table_indexed_by_part=new RewriteRuleSubtreeStream(adaptor,"rule table_indexed_by_part");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:1047:5: ( type_key type_name is_key ( table_key of_key type_spec ( table_indexed_by_part )? ( not_key null_key )? | varray_type_def ) -> {mode == 1}? ^( TABLE_TYPE_DECLARE[$type_key.start] type_name varray_type_def ) -> ^( TABLE_TYPE_DECLARE[$type_key.start] type_name ( null_key )? ^( table_key type_spec ( table_indexed_by_part )? ) ) )
            // PLSQLParser.g:1047:10: type_key type_name is_key ( table_key of_key type_spec ( table_indexed_by_part )? ( not_key null_key )? | varray_type_def )
            {
            pushFollow(FOLLOW_type_key_in_table_type_dec10707);
            type_key810=type_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_key.add(type_key810.getTree());

            pushFollow(FOLLOW_type_name_in_table_type_dec10709);
            type_name811=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_name.add(type_name811.getTree());

            pushFollow(FOLLOW_is_key_in_table_type_dec10711);
            is_key812=is_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_is_key.add(is_key812.getTree());

            // PLSQLParser.g:1048:5: ( table_key of_key type_spec ( table_indexed_by_part )? ( not_key null_key )? | varray_type_def )
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==SQL92_RESERVED_TABLE) ) {
                alt227=1;
            }
            else if ( (LA227_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("varying"))||(input.LT(1).getText().equalsIgnoreCase("varray"))))) {
                alt227=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 227, 0, input);

                throw nvae;

            }
            switch (alt227) {
                case 1 :
                    // PLSQLParser.g:1048:10: table_key of_key type_spec ( table_indexed_by_part )? ( not_key null_key )?
                    {
                    pushFollow(FOLLOW_table_key_in_table_type_dec10723);
                    table_key813=table_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_key.add(table_key813.getTree());

                    pushFollow(FOLLOW_of_key_in_table_type_dec10737);
                    of_key814=of_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_of_key.add(of_key814.getTree());

                    pushFollow(FOLLOW_type_spec_in_table_type_dec10739);
                    type_spec815=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec815.getTree());

                    // PLSQLParser.g:1050:13: ( table_indexed_by_part )?
                    int alt225=2;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==PLSQL_RESERVED_INDEX||LA225_0==REGULAR_ID) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            // PLSQLParser.g:1050:13: table_indexed_by_part
                            {
                            pushFollow(FOLLOW_table_indexed_by_part_in_table_type_dec10754);
                            table_indexed_by_part816=table_indexed_by_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_table_indexed_by_part.add(table_indexed_by_part816.getTree());

                            }
                            break;

                    }


                    // PLSQLParser.g:1051:9: ( not_key null_key )?
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==SQL92_RESERVED_NOT) ) {
                        alt226=1;
                    }
                    switch (alt226) {
                        case 1 :
                            // PLSQLParser.g:1051:10: not_key null_key
                            {
                            pushFollow(FOLLOW_not_key_in_table_type_dec10766);
                            not_key817=not_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_not_key.add(not_key817.getTree());

                            pushFollow(FOLLOW_null_key_in_table_type_dec10768);
                            null_key818=null_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_null_key.add(null_key818.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1052:10: varray_type_def
                    {
                    pushFollow(FOLLOW_varray_type_def_in_table_type_dec10781);
                    varray_type_def819=varray_type_def();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varray_type_def.add(varray_type_def819.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: type_spec, null_key, type_name, table_key, type_name, table_indexed_by_part, varray_type_def
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1054:9: -> {mode == 1}? ^( TABLE_TYPE_DECLARE[$type_key.start] type_name varray_type_def )
            if (mode == 1) {
                // PLSQLParser.g:1054:24: ^( TABLE_TYPE_DECLARE[$type_key.start] type_name varray_type_def )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TABLE_TYPE_DECLARE, (type_key810!=null?((Token)type_key810.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                adaptor.addChild(root_1, stream_varray_type_def.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1055:9: -> ^( TABLE_TYPE_DECLARE[$type_key.start] type_name ( null_key )? ^( table_key type_spec ( table_indexed_by_part )? ) )
            {
                // PLSQLParser.g:1055:12: ^( TABLE_TYPE_DECLARE[$type_key.start] type_name ( null_key )? ^( table_key type_spec ( table_indexed_by_part )? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TABLE_TYPE_DECLARE, (type_key810!=null?((Token)type_key810.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_name.nextTree());

                // PLSQLParser.g:1055:60: ( null_key )?
                if ( stream_null_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_null_key.nextTree());

                }
                stream_null_key.reset();

                // PLSQLParser.g:1055:70: ^( table_key type_spec ( table_indexed_by_part )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_table_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_type_spec.nextTree());

                // PLSQLParser.g:1055:92: ( table_indexed_by_part )?
                if ( stream_table_indexed_by_part.hasNext() ) {
                    adaptor.addChild(root_2, stream_table_indexed_by_part.nextTree());

                }
                stream_table_indexed_by_part.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "table_type_dec"


    public static class table_indexed_by_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_indexed_by_part"
    // PLSQLParser.g:1058:1: table_indexed_by_part : (idx1= indexed_key |idx2= index_key ) by_key type_spec -> {idx1 != null}? ^( INDEXED_BY[$idx1.start] type_spec ) -> ^( INDEXED_BY[$idx2.start] type_spec ) ;
    public final table_indexed_by_part_return table_indexed_by_part() throws RecognitionException {
        table_indexed_by_part_return retval = new table_indexed_by_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.indexed_key_return idx1 =null;

        PLSQLParser_PLSQLKeys.index_key_return idx2 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key820 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec821 =null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_index_key=new RewriteRuleSubtreeStream(adaptor,"rule index_key");
        RewriteRuleSubtreeStream stream_indexed_key=new RewriteRuleSubtreeStream(adaptor,"rule indexed_key");
        try {
            // PLSQLParser.g:1059:5: ( (idx1= indexed_key |idx2= index_key ) by_key type_spec -> {idx1 != null}? ^( INDEXED_BY[$idx1.start] type_spec ) -> ^( INDEXED_BY[$idx2.start] type_spec ) )
            // PLSQLParser.g:1059:10: (idx1= indexed_key |idx2= index_key ) by_key type_spec
            {
            // PLSQLParser.g:1059:10: (idx1= indexed_key |idx2= index_key )
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==REGULAR_ID) ) {
                alt228=1;
            }
            else if ( (LA228_0==PLSQL_RESERVED_INDEX) ) {
                alt228=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;

            }
            switch (alt228) {
                case 1 :
                    // PLSQLParser.g:1059:11: idx1= indexed_key
                    {
                    pushFollow(FOLLOW_indexed_key_in_table_indexed_by_part10861);
                    idx1=indexed_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_indexed_key.add(idx1.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1059:28: idx2= index_key
                    {
                    pushFollow(FOLLOW_index_key_in_table_indexed_by_part10865);
                    idx2=index_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_index_key.add(idx2.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_by_key_in_table_indexed_by_part10868);
            by_key820=by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_by_key.add(by_key820.getTree());

            pushFollow(FOLLOW_type_spec_in_table_indexed_by_part10870);
            type_spec821=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec821.getTree());

            // AST REWRITE
            // elements: type_spec, type_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1060:9: -> {idx1 != null}? ^( INDEXED_BY[$idx1.start] type_spec )
            if (idx1 != null) {
                // PLSQLParser.g:1060:27: ^( INDEXED_BY[$idx1.start] type_spec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEXED_BY, (idx1!=null?((Token)idx1.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1061:9: -> ^( INDEXED_BY[$idx2.start] type_spec )
            {
                // PLSQLParser.g:1061:12: ^( INDEXED_BY[$idx2.start] type_spec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEXED_BY, (idx2!=null?((Token)idx2.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "table_indexed_by_part"


    public static class varray_type_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varray_type_def"
    // PLSQLParser.g:1064:1: varray_type_def : ( varray_key | varying_key array_key ) LEFT_PAREN expression RIGHT_PAREN of_key type_spec ( not_key null_key )? -> ( null_key )? ^( VARR_ARRAY_DEF ^( EXPR expression ) type_spec ) ;
    public final varray_type_def_return varray_type_def() throws RecognitionException {
        varray_type_def_return retval = new varray_type_def_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN825=null;
        Token RIGHT_PAREN827=null;
        PLSQLParser_PLSQLKeys.varray_key_return varray_key822 =null;

        PLSQLParser_PLSQLKeys.varying_key_return varying_key823 =null;

        PLSQLParser_PLSQLKeys.array_key_return array_key824 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression826 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key828 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec829 =null;

        PLSQLParser_PLSQLKeys.not_key_return not_key830 =null;

        PLSQLParser_PLSQLKeys.null_key_return null_key831 =null;


        Object LEFT_PAREN825_tree=null;
        Object RIGHT_PAREN827_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
        RewriteRuleSubtreeStream stream_varray_key=new RewriteRuleSubtreeStream(adaptor,"rule varray_key");
        RewriteRuleSubtreeStream stream_array_key=new RewriteRuleSubtreeStream(adaptor,"rule array_key");
        RewriteRuleSubtreeStream stream_varying_key=new RewriteRuleSubtreeStream(adaptor,"rule varying_key");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        try {
            // PLSQLParser.g:1065:5: ( ( varray_key | varying_key array_key ) LEFT_PAREN expression RIGHT_PAREN of_key type_spec ( not_key null_key )? -> ( null_key )? ^( VARR_ARRAY_DEF ^( EXPR expression ) type_spec ) )
            // PLSQLParser.g:1065:10: ( varray_key | varying_key array_key ) LEFT_PAREN expression RIGHT_PAREN of_key type_spec ( not_key null_key )?
            {
            // PLSQLParser.g:1065:10: ( varray_key | varying_key array_key )
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("varray"))||(input.LT(1).getText().equalsIgnoreCase("varying"))))) {
                int LA229_1 = input.LA(2);

                if ( (LA229_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("varray")))) {
                    alt229=1;
                }
                else if ( (LA229_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("varying")))) {
                    alt229=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 229, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);

                throw nvae;

            }
            switch (alt229) {
                case 1 :
                    // PLSQLParser.g:1065:11: varray_key
                    {
                    pushFollow(FOLLOW_varray_key_in_varray_type_def10926);
                    varray_key822=varray_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varray_key.add(varray_key822.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1065:23: varying_key array_key
                    {
                    pushFollow(FOLLOW_varying_key_in_varray_type_def10929);
                    varying_key823=varying_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varying_key.add(varying_key823.getTree());

                    pushFollow(FOLLOW_array_key_in_varray_type_def10931);
                    array_key824=array_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_array_key.add(array_key824.getTree());

                    }
                    break;

            }


            LEFT_PAREN825=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_varray_type_def10942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN825);


            pushFollow(FOLLOW_expression_in_varray_type_def10944);
            expression826=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression826.getTree());

            RIGHT_PAREN827=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_varray_type_def10946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN827);


            pushFollow(FOLLOW_of_key_in_varray_type_def10957);
            of_key828=of_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_of_key.add(of_key828.getTree());

            pushFollow(FOLLOW_type_spec_in_varray_type_def10959);
            type_spec829=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec829.getTree());

            // PLSQLParser.g:1068:9: ( not_key null_key )?
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==SQL92_RESERVED_NOT) ) {
                int LA230_1 = input.LA(2);

                if ( (LA230_1==SQL92_RESERVED_NULL) ) {
                    alt230=1;
                }
            }
            switch (alt230) {
                case 1 :
                    // PLSQLParser.g:1068:10: not_key null_key
                    {
                    pushFollow(FOLLOW_not_key_in_varray_type_def10970);
                    not_key830=not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_not_key.add(not_key830.getTree());

                    pushFollow(FOLLOW_null_key_in_varray_type_def10972);
                    null_key831=null_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_null_key.add(null_key831.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, type_spec, null_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1069:9: -> ( null_key )? ^( VARR_ARRAY_DEF ^( EXPR expression ) type_spec )
            {
                // PLSQLParser.g:1069:12: ( null_key )?
                if ( stream_null_key.hasNext() ) {
                    adaptor.addChild(root_0, stream_null_key.nextTree());

                }
                stream_null_key.reset();

                // PLSQLParser.g:1069:22: ^( VARR_ARRAY_DEF ^( EXPR expression ) type_spec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARR_ARRAY_DEF, "VARR_ARRAY_DEF")
                , root_1);

                // PLSQLParser.g:1069:39: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varray_type_def"


    public static class table_var_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_var_dec"
    // PLSQLParser.g:1072:1: table_var_dec : table_var_name type_spec -> ^( TABLE_VAR_DECLARE table_var_name type_spec ) ;
    public final table_var_dec_return table_var_dec() throws RecognitionException {
        table_var_dec_return retval = new table_var_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.table_var_name_return table_var_name832 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec833 =null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_table_var_name=new RewriteRuleSubtreeStream(adaptor,"rule table_var_name");
        try {
            // PLSQLParser.g:1073:5: ( table_var_name type_spec -> ^( TABLE_VAR_DECLARE table_var_name type_spec ) )
            // PLSQLParser.g:1073:10: table_var_name type_spec
            {
            pushFollow(FOLLOW_table_var_name_in_table_var_dec11019);
            table_var_name832=table_var_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_var_name.add(table_var_name832.getTree());

            pushFollow(FOLLOW_type_spec_in_table_var_dec11021);
            type_spec833=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_spec.add(type_spec833.getTree());

            // AST REWRITE
            // elements: table_var_name, type_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1074:5: -> ^( TABLE_VAR_DECLARE table_var_name type_spec )
            {
                // PLSQLParser.g:1074:11: ^( TABLE_VAR_DECLARE table_var_name type_spec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TABLE_VAR_DECLARE, "TABLE_VAR_DECLARE")
                , root_1);

                adaptor.addChild(root_1, stream_table_var_name.nextTree());

                adaptor.addChild(root_1, stream_type_spec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "table_var_dec"


    public static class seq_of_statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "seq_of_statements"
    // PLSQLParser.g:1081:1: seq_of_statements : ( statement ( SEMICOLON | EOF ) | label_declaration )+ -> ^( STATEMENTS ( label_declaration )* ( statement )* ) ;
    public final seq_of_statements_return seq_of_statements() throws RecognitionException {
        seq_of_statements_return retval = new seq_of_statements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON835=null;
        Token EOF836=null;
        statement_return statement834 =null;

        label_declaration_return label_declaration837 =null;


        Object SEMICOLON835_tree=null;
        Object EOF836_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_label_declaration=new RewriteRuleSubtreeStream(adaptor,"rule label_declaration");
        try {
            // PLSQLParser.g:1082:5: ( ( statement ( SEMICOLON | EOF ) | label_declaration )+ -> ^( STATEMENTS ( label_declaration )* ( statement )* ) )
            // PLSQLParser.g:1082:11: ( statement ( SEMICOLON | EOF ) | label_declaration )+
            {
            // PLSQLParser.g:1082:11: ( statement ( SEMICOLON | EOF ) | label_declaration )+
            int cnt232=0;
            loop232:
            do {
                int alt232=3;
                switch ( input.LA(1) ) {
                case SQL92_RESERVED_CREATE:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_ALTER:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_GRANT:
                    {
                    alt232=1;
                    }
                    break;
                case REGULAR_ID:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_BEGIN:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_DECLARE:
                    {
                    alt232=1;
                    }
                    break;
                case INTRODUCER:
                    {
                    alt232=1;
                    }
                    break;
                case DELIMITED_ID:
                    {
                    alt232=1;
                    }
                    break;
                case BINDVAR:
                    {
                    alt232=1;
                    }
                    break;
                case COLON:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_CURSOR:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_PROCEDURE:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_GOTO:
                    {
                    alt232=1;
                    }
                    break;
                case PLSQL_RESERVED_IF:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_FOR:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_NULL:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_CASE:
                    {
                    alt232=1;
                    }
                    break;
                case PLSQL_RESERVED_LOCK:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_WITH:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_SELECT:
                    {
                    alt232=1;
                    }
                    break;
                case LEFT_PAREN:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_UPDATE:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_DELETE:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_INSERT:
                    {
                    alt232=1;
                    }
                    break;
                case SQL92_RESERVED_FETCH:
                    {
                    alt232=1;
                    }
                    break;
                case LESS_THAN_OP:
                    {
                    alt232=2;
                    }
                    break;

                }

                switch (alt232) {
            	case 1 :
            	    // PLSQLParser.g:1082:12: statement ( SEMICOLON | EOF )
            	    {
            	    pushFollow(FOLLOW_statement_in_seq_of_statements11064);
            	    statement834=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement834.getTree());

            	    // PLSQLParser.g:1082:22: ( SEMICOLON | EOF )
            	    int alt231=2;
            	    int LA231_0 = input.LA(1);

            	    if ( (LA231_0==SEMICOLON) ) {
            	        alt231=1;
            	    }
            	    else if ( (LA231_0==EOF) ) {
            	        alt231=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 231, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt231) {
            	        case 1 :
            	            // PLSQLParser.g:1082:23: SEMICOLON
            	            {
            	            SEMICOLON835=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_seq_of_statements11067); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON835);


            	            }
            	            break;
            	        case 2 :
            	            // PLSQLParser.g:1082:33: EOF
            	            {
            	            EOF836=(Token)match(input,EOF,FOLLOW_EOF_in_seq_of_statements11069); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EOF.add(EOF836);


            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // PLSQLParser.g:1082:38: label_declaration
            	    {
            	    pushFollow(FOLLOW_label_declaration_in_seq_of_statements11072);
            	    label_declaration837=label_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_label_declaration.add(label_declaration837.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt232 >= 1 ) break loop232;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(232, input);
                        throw eee;
                }
                cnt232++;
            } while (true);


            // AST REWRITE
            // elements: statement, label_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1083:9: -> ^( STATEMENTS ( label_declaration )* ( statement )* )
            {
                // PLSQLParser.g:1083:12: ^( STATEMENTS ( label_declaration )* ( statement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATEMENTS, "STATEMENTS")
                , root_1);

                // PLSQLParser.g:1083:25: ( label_declaration )*
                while ( stream_label_declaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_declaration.nextTree());

                }
                stream_label_declaration.reset();

                // PLSQLParser.g:1083:44: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "seq_of_statements"


    public static class label_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "label_declaration"
    // PLSQLParser.g:1086:1: label_declaration : ltp1= LESS_THAN_OP LESS_THAN_OP label_name GREATER_THAN_OP GREATER_THAN_OP -> ^( LABEL_DECLARE[$ltp1] label_name ) ;
    public final label_declaration_return label_declaration() throws RecognitionException {
        label_declaration_return retval = new label_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ltp1=null;
        Token LESS_THAN_OP838=null;
        Token GREATER_THAN_OP840=null;
        Token GREATER_THAN_OP841=null;
        PLSQLParser_PLSQLCommons.label_name_return label_name839 =null;


        Object ltp1_tree=null;
        Object LESS_THAN_OP838_tree=null;
        Object GREATER_THAN_OP840_tree=null;
        Object GREATER_THAN_OP841_tree=null;
        RewriteRuleTokenStream stream_GREATER_THAN_OP=new RewriteRuleTokenStream(adaptor,"token GREATER_THAN_OP");
        RewriteRuleTokenStream stream_LESS_THAN_OP=new RewriteRuleTokenStream(adaptor,"token LESS_THAN_OP");
        RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
        try {
            // PLSQLParser.g:1087:5: (ltp1= LESS_THAN_OP LESS_THAN_OP label_name GREATER_THAN_OP GREATER_THAN_OP -> ^( LABEL_DECLARE[$ltp1] label_name ) )
            // PLSQLParser.g:1087:10: ltp1= LESS_THAN_OP LESS_THAN_OP label_name GREATER_THAN_OP GREATER_THAN_OP
            {
            ltp1=(Token)match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_label_declaration11118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN_OP.add(ltp1);


            LESS_THAN_OP838=(Token)match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_label_declaration11120); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LESS_THAN_OP.add(LESS_THAN_OP838);


            pushFollow(FOLLOW_label_name_in_label_declaration11122);
            label_name839=label_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_label_name.add(label_name839.getTree());

            GREATER_THAN_OP840=(Token)match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_label_declaration11124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATER_THAN_OP.add(GREATER_THAN_OP840);


            GREATER_THAN_OP841=(Token)match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_label_declaration11126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GREATER_THAN_OP.add(GREATER_THAN_OP841);


            // AST REWRITE
            // elements: label_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1088:5: -> ^( LABEL_DECLARE[$ltp1] label_name )
            {
                // PLSQLParser.g:1088:11: ^( LABEL_DECLARE[$ltp1] label_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LABEL_DECLARE, ltp1)
                , root_1);

                adaptor.addChild(root_1, stream_label_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "label_declaration"


    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // PLSQLParser.g:1091:1: statement options {backtrack=true; } : ( create_key swallow_to_semi ( SEMICOLON | EOF ) | alter_key swallow_to_semi ( SEMICOLON | EOF ) | grant_key swallow_to_semi ( SEMICOLON | EOF ) | truncate_key swallow_to_semi ( SEMICOLON | EOF ) | ( begin_key )=> body | ( declare_key )=> block | assignment_statement | continue_statement | exit_statement | goto_statement | if_statement | loop_statement | forall_statement | null_statement | raise_statement | return_statement | case_statement[true] | sql_statement | function_call );
    public final statement_return statement() throws RecognitionException {
        statement_return retval = new statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set844=null;
        Token set847=null;
        Token set850=null;
        Token set853=null;
        PLSQLParser_PLSQLKeys.create_key_return create_key842 =null;

        swallow_to_semi_return swallow_to_semi843 =null;

        PLSQLParser_PLSQLKeys.alter_key_return alter_key845 =null;

        swallow_to_semi_return swallow_to_semi846 =null;

        PLSQLParser_PLSQLKeys.grant_key_return grant_key848 =null;

        swallow_to_semi_return swallow_to_semi849 =null;

        PLSQLParser_PLSQLKeys.truncate_key_return truncate_key851 =null;

        swallow_to_semi_return swallow_to_semi852 =null;

        body_return body854 =null;

        block_return block855 =null;

        assignment_statement_return assignment_statement856 =null;

        continue_statement_return continue_statement857 =null;

        exit_statement_return exit_statement858 =null;

        goto_statement_return goto_statement859 =null;

        if_statement_return if_statement860 =null;

        loop_statement_return loop_statement861 =null;

        forall_statement_return forall_statement862 =null;

        null_statement_return null_statement863 =null;

        raise_statement_return raise_statement864 =null;

        return_statement_return return_statement865 =null;

        PLSQLParser_PLSQL_DMLParser.case_statement_return case_statement866 =null;

        sql_statement_return sql_statement867 =null;

        function_call_return function_call868 =null;


        Object set844_tree=null;
        Object set847_tree=null;
        Object set850_tree=null;
        Object set853_tree=null;

        try {
            // PLSQLParser.g:1095:5: ( create_key swallow_to_semi ( SEMICOLON | EOF ) | alter_key swallow_to_semi ( SEMICOLON | EOF ) | grant_key swallow_to_semi ( SEMICOLON | EOF ) | truncate_key swallow_to_semi ( SEMICOLON | EOF ) | ( begin_key )=> body | ( declare_key )=> block | assignment_statement | continue_statement | exit_statement | goto_statement | if_statement | loop_statement | forall_statement | null_statement | raise_statement | return_statement | case_statement[true] | sql_statement | function_call )
            int alt233=19;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==SQL92_RESERVED_CREATE) ) {
                int LA233_1 = input.LA(2);

                if ( (synpred43_PLSQLParser()) ) {
                    alt233=1;
                }
                else if ( (synpred48_PLSQLParser()) ) {
                    alt233=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA233_0==SQL92_RESERVED_ALTER) ) {
                alt233=2;
            }
            else if ( (LA233_0==SQL92_RESERVED_GRANT) ) {
                alt233=3;
            }
            else if ( (LA233_0==REGULAR_ID) ) {
                int LA233_4 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("truncate"))&&(input.LT(1).getText().equalsIgnoreCase("truncate")))&&synpred46_PLSQLParser())) ) {
                    alt233=4;
                }
                else if ( (synpred48_PLSQLParser()) ) {
                    alt233=6;
                }
                else if ( (synpred49_PLSQLParser()) ) {
                    alt233=7;
                }
                else if ( (((synpred50_PLSQLParser()&&synpred50_PLSQLParser())&&(input.LT(1).getText().equalsIgnoreCase("continue")))) ) {
                    alt233=8;
                }
                else if ( (((synpred51_PLSQLParser()&&synpred51_PLSQLParser())&&(input.LT(1).getText().equalsIgnoreCase("exit")))) ) {
                    alt233=9;
                }
                else if ( (synpred54_PLSQLParser()) ) {
                    alt233=12;
                }
                else if ( ((((input.LT(1).getText().equalsIgnoreCase("forall"))&&(input.LT(1).getText().equalsIgnoreCase("forall")))&&synpred55_PLSQLParser())) ) {
                    alt233=13;
                }
                else if ( ((((input.LT(1).getText().equalsIgnoreCase("raise"))&&(input.LT(1).getText().equalsIgnoreCase("raise")))&&synpred57_PLSQLParser())) ) {
                    alt233=15;
                }
                else if ( ((((input.LT(1).getText().equalsIgnoreCase("return"))&&(input.LT(1).getText().equalsIgnoreCase("return")))&&synpred58_PLSQLParser())) ) {
                    alt233=16;
                }
                else if ( (synpred59_PLSQLParser()) ) {
                    alt233=17;
                }
                else if ( (((synpred60_PLSQLParser()&&synpred60_PLSQLParser())&&((input.LT(1).getText().equalsIgnoreCase("savepoint"))||(input.LT(1).getText().equalsIgnoreCase("rollback"))||(input.LT(1).getText().equalsIgnoreCase("merge"))||(input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("set"))||(input.LT(1).getText().equalsIgnoreCase("commit"))||(input.LT(1).getText().equalsIgnoreCase("execute"))))) ) {
                    alt233=18;
                }
                else if ( (true) ) {
                    alt233=19;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 4, input);

                    throw nvae;

                }
            }
            else if ( (LA233_0==SQL92_RESERVED_BEGIN) ) {
                int LA233_5 = input.LA(2);

                if ( (synpred47_PLSQLParser()) ) {
                    alt233=5;
                }
                else if ( (synpred48_PLSQLParser()) ) {
                    alt233=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 5, input);

                    throw nvae;

                }
            }
            else if ( (LA233_0==SQL92_RESERVED_DECLARE) && (synpred48_PLSQLParser())) {
                alt233=6;
            }
            else if ( (LA233_0==INTRODUCER) ) {
                int LA233_7 = input.LA(2);

                if ( (synpred48_PLSQLParser()) ) {
                    alt233=6;
                }
                else if ( (synpred49_PLSQLParser()) ) {
                    alt233=7;
                }
                else if ( (true) ) {
                    alt233=19;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 7, input);

                    throw nvae;

                }
            }
            else if ( (LA233_0==DELIMITED_ID) ) {
                int LA233_8 = input.LA(2);

                if ( (synpred48_PLSQLParser()) ) {
                    alt233=6;
                }
                else if ( (synpred49_PLSQLParser()) ) {
                    alt233=7;
                }
                else if ( (synpred54_PLSQLParser()) ) {
                    alt233=12;
                }
                else if ( (synpred59_PLSQLParser()) ) {
                    alt233=17;
                }
                else if ( (true) ) {
                    alt233=19;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 8, input);

                    throw nvae;

                }
            }
            else if ( (LA233_0==BINDVAR) ) {
                int LA233_9 = input.LA(2);

                if ( (synpred48_PLSQLParser()) ) {
                    alt233=6;
                }
                else if ( (synpred49_PLSQLParser()) ) {
                    alt233=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 9, input);

                    throw nvae;

                }
            }
            else if ( (LA233_0==COLON) ) {
                int LA233_10 = input.LA(2);

                if ( (synpred48_PLSQLParser()) ) {
                    alt233=6;
                }
                else if ( (synpred49_PLSQLParser()) ) {
                    alt233=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 10, input);

                    throw nvae;

                }
            }
            else if ( (LA233_0==SQL92_RESERVED_CURSOR) && (synpred48_PLSQLParser())) {
                alt233=6;
            }
            else if ( (LA233_0==SQL92_RESERVED_PROCEDURE) && (synpred48_PLSQLParser())) {
                alt233=6;
            }
            else if ( (LA233_0==SQL92_RESERVED_GOTO) ) {
                alt233=10;
            }
            else if ( (LA233_0==PLSQL_RESERVED_IF) ) {
                alt233=11;
            }
            else if ( (LA233_0==SQL92_RESERVED_FOR) ) {
                alt233=12;
            }
            else if ( (LA233_0==SQL92_RESERVED_NULL) ) {
                alt233=14;
            }
            else if ( (LA233_0==SQL92_RESERVED_CASE) ) {
                alt233=17;
            }
            else if ( (LA233_0==LEFT_PAREN||LA233_0==PLSQL_RESERVED_LOCK||LA233_0==SQL92_RESERVED_DELETE||LA233_0==SQL92_RESERVED_FETCH||LA233_0==SQL92_RESERVED_INSERT||LA233_0==SQL92_RESERVED_SELECT||LA233_0==SQL92_RESERVED_UPDATE||LA233_0==SQL92_RESERVED_WITH) ) {
                alt233=18;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;

            }
            switch (alt233) {
                case 1 :
                    // PLSQLParser.g:1095:10: create_key swallow_to_semi ( SEMICOLON | EOF )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_create_key_in_statement11171);
                    create_key842=create_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_key842.getTree());

                    pushFollow(FOLLOW_swallow_to_semi_in_statement11173);
                    swallow_to_semi843=swallow_to_semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, swallow_to_semi843.getTree());

                    set844=(Token)input.LT(1);

                    if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set844)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1096:10: alter_key swallow_to_semi ( SEMICOLON | EOF )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_alter_key_in_statement11190);
                    alter_key845=alter_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_key845.getTree());

                    pushFollow(FOLLOW_swallow_to_semi_in_statement11192);
                    swallow_to_semi846=swallow_to_semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, swallow_to_semi846.getTree());

                    set847=(Token)input.LT(1);

                    if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set847)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 3 :
                    // PLSQLParser.g:1097:10: grant_key swallow_to_semi ( SEMICOLON | EOF )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_grant_key_in_statement11210);
                    grant_key848=grant_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grant_key848.getTree());

                    pushFollow(FOLLOW_swallow_to_semi_in_statement11212);
                    swallow_to_semi849=swallow_to_semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, swallow_to_semi849.getTree());

                    set850=(Token)input.LT(1);

                    if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set850)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 4 :
                    // PLSQLParser.g:1098:10: truncate_key swallow_to_semi ( SEMICOLON | EOF )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_truncate_key_in_statement11230);
                    truncate_key851=truncate_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, truncate_key851.getTree());

                    pushFollow(FOLLOW_swallow_to_semi_in_statement11232);
                    swallow_to_semi852=swallow_to_semi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, swallow_to_semi852.getTree());

                    set853=(Token)input.LT(1);

                    if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set853)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 5 :
                    // PLSQLParser.g:1099:10: ( begin_key )=> body
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_body_in_statement11256);
                    body854=body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body854.getTree());

                    }
                    break;
                case 6 :
                    // PLSQLParser.g:1100:10: ( declare_key )=> block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_in_statement11273);
                    block855=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block855.getTree());

                    }
                    break;
                case 7 :
                    // PLSQLParser.g:1101:10: assignment_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_assignment_statement_in_statement11284);
                    assignment_statement856=assignment_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_statement856.getTree());

                    }
                    break;
                case 8 :
                    // PLSQLParser.g:1102:10: continue_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_statement_in_statement11295);
                    continue_statement857=continue_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_statement857.getTree());

                    }
                    break;
                case 9 :
                    // PLSQLParser.g:1103:10: exit_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_exit_statement_in_statement11306);
                    exit_statement858=exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exit_statement858.getTree());

                    }
                    break;
                case 10 :
                    // PLSQLParser.g:1104:10: goto_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_statement_in_statement11317);
                    goto_statement859=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement859.getTree());

                    }
                    break;
                case 11 :
                    // PLSQLParser.g:1105:10: if_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_statement_in_statement11328);
                    if_statement860=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement860.getTree());

                    }
                    break;
                case 12 :
                    // PLSQLParser.g:1106:10: loop_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_loop_statement_in_statement11339);
                    loop_statement861=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement861.getTree());

                    }
                    break;
                case 13 :
                    // PLSQLParser.g:1107:10: forall_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forall_statement_in_statement11350);
                    forall_statement862=forall_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forall_statement862.getTree());

                    }
                    break;
                case 14 :
                    // PLSQLParser.g:1108:10: null_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_statement_in_statement11361);
                    null_statement863=null_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_statement863.getTree());

                    }
                    break;
                case 15 :
                    // PLSQLParser.g:1109:10: raise_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_raise_statement_in_statement11372);
                    raise_statement864=raise_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_statement864.getTree());

                    }
                    break;
                case 16 :
                    // PLSQLParser.g:1110:10: return_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_statement_in_statement11383);
                    return_statement865=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement865.getTree());

                    }
                    break;
                case 17 :
                    // PLSQLParser.g:1111:10: case_statement[true]
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_statement_in_statement11394);
                    case_statement866=case_statement(true);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement866.getTree());

                    }
                    break;
                case 18 :
                    // PLSQLParser.g:1112:10: sql_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_sql_statement_in_statement11406);
                    sql_statement867=sql_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statement867.getTree());

                    }
                    break;
                case 19 :
                    // PLSQLParser.g:1113:10: function_call
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_function_call_in_statement11417);
                    function_call868=function_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call868.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class assignment_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignment_statement"
    // PLSQLParser.g:1116:1: assignment_statement : ( general_element | bind_variable ) ASSIGN_OP expression -> ^( ASSIGN[$ASSIGN_OP] ( general_element )? ( bind_variable )? ^( EXPR expression ) ) ;
    public final assignment_statement_return assignment_statement() throws RecognitionException {
        assignment_statement_return retval = new assignment_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASSIGN_OP871=null;
        PLSQLParser_PLSQLCommons.general_element_return general_element869 =null;

        PLSQLParser_PLSQLCommons.bind_variable_return bind_variable870 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression872 =null;


        Object ASSIGN_OP871_tree=null;
        RewriteRuleTokenStream stream_ASSIGN_OP=new RewriteRuleTokenStream(adaptor,"token ASSIGN_OP");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_bind_variable=new RewriteRuleSubtreeStream(adaptor,"rule bind_variable");
        RewriteRuleSubtreeStream stream_general_element=new RewriteRuleSubtreeStream(adaptor,"rule general_element");
        try {
            // PLSQLParser.g:1117:5: ( ( general_element | bind_variable ) ASSIGN_OP expression -> ^( ASSIGN[$ASSIGN_OP] ( general_element )? ( bind_variable )? ^( EXPR expression ) ) )
            // PLSQLParser.g:1117:11: ( general_element | bind_variable ) ASSIGN_OP expression
            {
            // PLSQLParser.g:1117:11: ( general_element | bind_variable )
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==DELIMITED_ID||LA234_0==INTRODUCER||LA234_0==REGULAR_ID) ) {
                alt234=1;
            }
            else if ( (LA234_0==BINDVAR||LA234_0==COLON) ) {
                alt234=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;

            }
            switch (alt234) {
                case 1 :
                    // PLSQLParser.g:1117:12: general_element
                    {
                    pushFollow(FOLLOW_general_element_in_assignment_statement11439);
                    general_element869=general_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_general_element.add(general_element869.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1117:28: bind_variable
                    {
                    pushFollow(FOLLOW_bind_variable_in_assignment_statement11441);
                    bind_variable870=bind_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bind_variable.add(bind_variable870.getTree());

                    }
                    break;

            }


            ASSIGN_OP871=(Token)match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_assignment_statement11444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ASSIGN_OP.add(ASSIGN_OP871);


            pushFollow(FOLLOW_expression_in_assignment_statement11446);
            expression872=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression872.getTree());

            // AST REWRITE
            // elements: expression, bind_variable, general_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1118:9: -> ^( ASSIGN[$ASSIGN_OP] ( general_element )? ( bind_variable )? ^( EXPR expression ) )
            {
                // PLSQLParser.g:1118:12: ^( ASSIGN[$ASSIGN_OP] ( general_element )? ( bind_variable )? ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, ASSIGN_OP871)
                , root_1);

                // PLSQLParser.g:1118:33: ( general_element )?
                if ( stream_general_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_general_element.nextTree());

                }
                stream_general_element.reset();

                // PLSQLParser.g:1118:50: ( bind_variable )?
                if ( stream_bind_variable.hasNext() ) {
                    adaptor.addChild(root_1, stream_bind_variable.nextTree());

                }
                stream_bind_variable.reset();

                // PLSQLParser.g:1118:65: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assignment_statement"


    public static class continue_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_statement"
    // PLSQLParser.g:1121:1: continue_statement : continue_key ( label_name )? ( when_key condition )? -> {mode == 1}? ^( continue_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) ) -> ^( continue_key ( label_name )? ) ;
    public final continue_statement_return continue_statement() throws RecognitionException {
        continue_statement_return retval = new continue_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.continue_key_return continue_key873 =null;

        PLSQLParser_PLSQLCommons.label_name_return label_name874 =null;

        PLSQLParser_PLSQLKeys.when_key_return when_key875 =null;

        PLSQLParser_PLSQL_DMLParser.condition_return condition876 =null;


        RewriteRuleSubtreeStream stream_continue_key=new RewriteRuleSubtreeStream(adaptor,"rule continue_key");
        RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:1123:5: ( continue_key ( label_name )? ( when_key condition )? -> {mode == 1}? ^( continue_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) ) -> ^( continue_key ( label_name )? ) )
            // PLSQLParser.g:1123:10: continue_key ( label_name )? ( when_key condition )?
            {
            pushFollow(FOLLOW_continue_key_in_continue_statement11501);
            continue_key873=continue_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_continue_key.add(continue_key873.getTree());

            // PLSQLParser.g:1123:23: ( label_name )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==DELIMITED_ID||LA235_0==REGULAR_ID) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    // PLSQLParser.g:1123:23: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_continue_statement11503);
                    label_name874=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name874.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:1123:35: ( when_key condition )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==SQL92_RESERVED_WHEN) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    // PLSQLParser.g:1123:36: when_key condition
                    {
                    pushFollow(FOLLOW_when_key_in_continue_statement11507);
                    when_key875=when_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_when_key.add(when_key875.getTree());

                    pushFollow(FOLLOW_condition_in_continue_statement11509);
                    condition876=condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition.add(condition876.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: label_name, when_key, continue_key, continue_key, label_name, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1124:9: -> {mode == 1}? ^( continue_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) )
            if (mode == 1) {
                // PLSQLParser.g:1124:24: ^( continue_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_continue_key.nextNode(), root_1);

                // PLSQLParser.g:1124:39: ( label_name )?
                if ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();

                // PLSQLParser.g:1124:51: ^( when_key ^( LOGIC_EXPR condition ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_when_key.nextNode(), root_2);

                // PLSQLParser.g:1124:62: ^( LOGIC_EXPR condition )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_condition.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1125:9: -> ^( continue_key ( label_name )? )
            {
                // PLSQLParser.g:1125:12: ^( continue_key ( label_name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_continue_key.nextNode(), root_1);

                // PLSQLParser.g:1125:27: ( label_name )?
                if ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_statement"


    public static class exit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exit_statement"
    // PLSQLParser.g:1128:1: exit_statement : exit_key ( label_name )? ( when_key condition )? -> {mode == 1}? ^( exit_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) ) -> ^( exit_key ( label_name )? ) ;
    public final exit_statement_return exit_statement() throws RecognitionException {
        exit_statement_return retval = new exit_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.exit_key_return exit_key877 =null;

        PLSQLParser_PLSQLCommons.label_name_return label_name878 =null;

        PLSQLParser_PLSQLKeys.when_key_return when_key879 =null;

        PLSQLParser_PLSQL_DMLParser.condition_return condition880 =null;


        RewriteRuleSubtreeStream stream_exit_key=new RewriteRuleSubtreeStream(adaptor,"rule exit_key");
        RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:1130:5: ( exit_key ( label_name )? ( when_key condition )? -> {mode == 1}? ^( exit_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) ) -> ^( exit_key ( label_name )? ) )
            // PLSQLParser.g:1130:10: exit_key ( label_name )? ( when_key condition )?
            {
            pushFollow(FOLLOW_exit_key_in_exit_statement11586);
            exit_key877=exit_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exit_key.add(exit_key877.getTree());

            // PLSQLParser.g:1130:19: ( label_name )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==DELIMITED_ID||LA237_0==REGULAR_ID) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // PLSQLParser.g:1130:19: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_exit_statement11588);
                    label_name878=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name878.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:1130:31: ( when_key condition )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==SQL92_RESERVED_WHEN) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // PLSQLParser.g:1130:32: when_key condition
                    {
                    pushFollow(FOLLOW_when_key_in_exit_statement11592);
                    when_key879=when_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_when_key.add(when_key879.getTree());

                    pushFollow(FOLLOW_condition_in_exit_statement11594);
                    condition880=condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition.add(condition880.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: exit_key, label_name, label_name, when_key, exit_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1131:9: -> {mode == 1}? ^( exit_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) )
            if (mode == 1) {
                // PLSQLParser.g:1131:24: ^( exit_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_exit_key.nextNode(), root_1);

                // PLSQLParser.g:1131:35: ( label_name )?
                if ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();

                // PLSQLParser.g:1131:47: ^( when_key ^( LOGIC_EXPR condition ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_when_key.nextNode(), root_2);

                // PLSQLParser.g:1131:58: ^( LOGIC_EXPR condition )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_condition.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1132:9: -> ^( exit_key ( label_name )? )
            {
                // PLSQLParser.g:1132:12: ^( exit_key ( label_name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_exit_key.nextNode(), root_1);

                // PLSQLParser.g:1132:23: ( label_name )?
                if ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exit_statement"


    public static class goto_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_statement"
    // PLSQLParser.g:1135:1: goto_statement : goto_key ^ label_name ;
    public final goto_statement_return goto_statement() throws RecognitionException {
        goto_statement_return retval = new goto_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.goto_key_return goto_key881 =null;

        PLSQLParser_PLSQLCommons.label_name_return label_name882 =null;



        try {
            // PLSQLParser.g:1136:5: ( goto_key ^ label_name )
            // PLSQLParser.g:1136:10: goto_key ^ label_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_goto_key_in_goto_statement11663);
            goto_key881=goto_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(goto_key881.getTree(), root_0);

            pushFollow(FOLLOW_label_name_in_goto_statement11666);
            label_name882=label_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name882.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_statement"


    public static class if_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_statement"
    // PLSQLParser.g:1139:1: if_statement : if_key condition then_key seq_of_statements ( elsif_part )* ( else_part )? end_key if_key -> ^( if_key ^( LOGIC_EXPR condition ) seq_of_statements ( elsif_part )* ( else_part )? ) ;
    public final if_statement_return if_statement() throws RecognitionException {
        if_statement_return retval = new if_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.if_key_return if_key883 =null;

        PLSQLParser_PLSQL_DMLParser.condition_return condition884 =null;

        PLSQLParser_PLSQLKeys.then_key_return then_key885 =null;

        seq_of_statements_return seq_of_statements886 =null;

        elsif_part_return elsif_part887 =null;

        else_part_return else_part888 =null;

        PLSQLParser_PLSQLKeys.end_key_return end_key889 =null;

        PLSQLParser_PLSQLKeys.if_key_return if_key890 =null;


        RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
        RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");
        RewriteRuleSubtreeStream stream_elsif_part=new RewriteRuleSubtreeStream(adaptor,"rule elsif_part");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_else_part=new RewriteRuleSubtreeStream(adaptor,"rule else_part");
        RewriteRuleSubtreeStream stream_if_key=new RewriteRuleSubtreeStream(adaptor,"rule if_key");
        try {
            // PLSQLParser.g:1140:5: ( if_key condition then_key seq_of_statements ( elsif_part )* ( else_part )? end_key if_key -> ^( if_key ^( LOGIC_EXPR condition ) seq_of_statements ( elsif_part )* ( else_part )? ) )
            // PLSQLParser.g:1140:10: if_key condition then_key seq_of_statements ( elsif_part )* ( else_part )? end_key if_key
            {
            pushFollow(FOLLOW_if_key_in_if_statement11686);
            if_key883=if_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_if_key.add(if_key883.getTree());

            pushFollow(FOLLOW_condition_in_if_statement11688);
            condition884=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition884.getTree());

            pushFollow(FOLLOW_then_key_in_if_statement11690);
            then_key885=then_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_then_key.add(then_key885.getTree());

            pushFollow(FOLLOW_seq_of_statements_in_if_statement11692);
            seq_of_statements886=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements886.getTree());

            // PLSQLParser.g:1141:9: ( elsif_part )*
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( (LA239_0==PLSQL_NON_RESERVED_ELSIF) ) {
                    alt239=1;
                }


                switch (alt239) {
            	case 1 :
            	    // PLSQLParser.g:1141:9: elsif_part
            	    {
            	    pushFollow(FOLLOW_elsif_part_in_if_statement11702);
            	    elsif_part887=elsif_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_elsif_part.add(elsif_part887.getTree());

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);


            // PLSQLParser.g:1141:21: ( else_part )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==SQL92_RESERVED_ELSE) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    // PLSQLParser.g:1141:21: else_part
                    {
                    pushFollow(FOLLOW_else_part_in_if_statement11705);
                    else_part888=else_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_else_part.add(else_part888.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_end_key_in_if_statement11716);
            end_key889=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key889.getTree());

            pushFollow(FOLLOW_if_key_in_if_statement11718);
            if_key890=if_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_if_key.add(if_key890.getTree());

            // AST REWRITE
            // elements: condition, else_part, elsif_part, if_key, seq_of_statements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1143:9: -> ^( if_key ^( LOGIC_EXPR condition ) seq_of_statements ( elsif_part )* ( else_part )? )
            {
                // PLSQLParser.g:1143:12: ^( if_key ^( LOGIC_EXPR condition ) seq_of_statements ( elsif_part )* ( else_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_if_key.nextNode(), root_1);

                // PLSQLParser.g:1143:21: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_seq_of_statements.nextTree());

                // PLSQLParser.g:1143:63: ( elsif_part )*
                while ( stream_elsif_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_elsif_part.nextTree());

                }
                stream_elsif_part.reset();

                // PLSQLParser.g:1143:75: ( else_part )?
                if ( stream_else_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_else_part.nextTree());

                }
                stream_else_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_statement"


    public static class elsif_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "elsif_part"
    // PLSQLParser.g:1146:1: elsif_part : elsif_key condition then_key seq_of_statements -> ^( elsif_key ^( LOGIC_EXPR condition ) seq_of_statements ) ;
    public final elsif_part_return elsif_part() throws RecognitionException {
        elsif_part_return retval = new elsif_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.elsif_key_return elsif_key891 =null;

        PLSQLParser_PLSQL_DMLParser.condition_return condition892 =null;

        PLSQLParser_PLSQLKeys.then_key_return then_key893 =null;

        seq_of_statements_return seq_of_statements894 =null;


        RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
        RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_elsif_key=new RewriteRuleSubtreeStream(adaptor,"rule elsif_key");
        try {
            // PLSQLParser.g:1147:5: ( elsif_key condition then_key seq_of_statements -> ^( elsif_key ^( LOGIC_EXPR condition ) seq_of_statements ) )
            // PLSQLParser.g:1147:10: elsif_key condition then_key seq_of_statements
            {
            pushFollow(FOLLOW_elsif_key_in_elsif_part11766);
            elsif_key891=elsif_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elsif_key.add(elsif_key891.getTree());

            pushFollow(FOLLOW_condition_in_elsif_part11768);
            condition892=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition892.getTree());

            pushFollow(FOLLOW_then_key_in_elsif_part11770);
            then_key893=then_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_then_key.add(then_key893.getTree());

            pushFollow(FOLLOW_seq_of_statements_in_elsif_part11772);
            seq_of_statements894=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements894.getTree());

            // AST REWRITE
            // elements: elsif_key, seq_of_statements, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1148:9: -> ^( elsif_key ^( LOGIC_EXPR condition ) seq_of_statements )
            {
                // PLSQLParser.g:1148:12: ^( elsif_key ^( LOGIC_EXPR condition ) seq_of_statements )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_elsif_key.nextNode(), root_1);

                // PLSQLParser.g:1148:24: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_seq_of_statements.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "elsif_part"


    public static class else_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_part"
    // PLSQLParser.g:1151:1: else_part : else_key ^ seq_of_statements ;
    public final else_part_return else_part() throws RecognitionException {
        else_part_return retval = new else_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.else_key_return else_key895 =null;

        seq_of_statements_return seq_of_statements896 =null;



        try {
            // PLSQLParser.g:1152:5: ( else_key ^ seq_of_statements )
            // PLSQLParser.g:1152:10: else_key ^ seq_of_statements
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_else_key_in_else_part11814);
            else_key895=else_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(else_key895.getTree(), root_0);

            pushFollow(FOLLOW_seq_of_statements_in_else_part11817);
            seq_of_statements896=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements896.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_part"


    public static class loop_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "loop_statement"
    // PLSQLParser.g:1155:1: loop_statement : ( label_name )? ( while_key condition | for_key cursor_loop_param )? loop_key seq_of_statements end_key loop_key ( label_name )? -> {mode == 1}? ^( WHILE_LOOP[$while_key.start] ( label_name )* ^( LOGIC_EXPR condition ) seq_of_statements ) -> {mode == 2}? ^( FOR_LOOP[$for_key.start] ( label_name )* cursor_loop_param seq_of_statements ) -> ^( loop_key ( label_name )* seq_of_statements ) ;
    public final loop_statement_return loop_statement() throws RecognitionException {
        loop_statement_return retval = new loop_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.label_name_return label_name897 =null;

        PLSQLParser_PLSQLKeys.while_key_return while_key898 =null;

        PLSQLParser_PLSQL_DMLParser.condition_return condition899 =null;

        PLSQLParser_PLSQLKeys.for_key_return for_key900 =null;

        cursor_loop_param_return cursor_loop_param901 =null;

        PLSQLParser_PLSQLKeys.loop_key_return loop_key902 =null;

        seq_of_statements_return seq_of_statements903 =null;

        PLSQLParser_PLSQLKeys.end_key_return end_key904 =null;

        PLSQLParser_PLSQLKeys.loop_key_return loop_key905 =null;

        PLSQLParser_PLSQLCommons.label_name_return label_name906 =null;


        RewriteRuleSubtreeStream stream_while_key=new RewriteRuleSubtreeStream(adaptor,"rule while_key");
        RewriteRuleSubtreeStream stream_loop_key=new RewriteRuleSubtreeStream(adaptor,"rule loop_key");
        RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");
        RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        RewriteRuleSubtreeStream stream_cursor_loop_param=new RewriteRuleSubtreeStream(adaptor,"rule cursor_loop_param");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:1157:5: ( ( label_name )? ( while_key condition | for_key cursor_loop_param )? loop_key seq_of_statements end_key loop_key ( label_name )? -> {mode == 1}? ^( WHILE_LOOP[$while_key.start] ( label_name )* ^( LOGIC_EXPR condition ) seq_of_statements ) -> {mode == 2}? ^( FOR_LOOP[$for_key.start] ( label_name )* cursor_loop_param seq_of_statements ) -> ^( loop_key ( label_name )* seq_of_statements ) )
            // PLSQLParser.g:1157:10: ( label_name )? ( while_key condition | for_key cursor_loop_param )? loop_key seq_of_statements end_key loop_key ( label_name )?
            {
            // PLSQLParser.g:1157:10: ( label_name )?
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==REGULAR_ID) ) {
                int LA241_1 = input.LA(2);

                if ( (!((((input.LT(1).getText().equalsIgnoreCase("loop"))||(input.LT(1).getText().equalsIgnoreCase("while")))))) ) {
                    alt241=1;
                }
            }
            else if ( (LA241_0==DELIMITED_ID) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    // PLSQLParser.g:1157:10: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_loop_statement11846);
                    label_name897=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name897.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:1158:9: ( while_key condition | for_key cursor_loop_param )?
            int alt242=3;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==REGULAR_ID) ) {
                int LA242_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("while"))) ) {
                    alt242=1;
                }
            }
            else if ( (LA242_0==SQL92_RESERVED_FOR) ) {
                alt242=2;
            }
            switch (alt242) {
                case 1 :
                    // PLSQLParser.g:1158:10: while_key condition
                    {
                    pushFollow(FOLLOW_while_key_in_loop_statement11858);
                    while_key898=while_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_while_key.add(while_key898.getTree());

                    pushFollow(FOLLOW_condition_in_loop_statement11860);
                    condition899=condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition.add(condition899.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1158:44: for_key cursor_loop_param
                    {
                    pushFollow(FOLLOW_for_key_in_loop_statement11866);
                    for_key900=for_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_for_key.add(for_key900.getTree());

                    pushFollow(FOLLOW_cursor_loop_param_in_loop_statement11868);
                    cursor_loop_param901=cursor_loop_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cursor_loop_param.add(cursor_loop_param901.getTree());

                    if ( state.backtracking==0 ) {mode = 2;}

                    }
                    break;

            }


            pushFollow(FOLLOW_loop_key_in_loop_statement11882);
            loop_key902=loop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_loop_key.add(loop_key902.getTree());

            pushFollow(FOLLOW_seq_of_statements_in_loop_statement11892);
            seq_of_statements903=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements903.getTree());

            pushFollow(FOLLOW_end_key_in_loop_statement11902);
            end_key904=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key904.getTree());

            pushFollow(FOLLOW_loop_key_in_loop_statement11904);
            loop_key905=loop_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_loop_key.add(loop_key905.getTree());

            // PLSQLParser.g:1161:26: ( label_name )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==DELIMITED_ID||LA243_0==REGULAR_ID) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // PLSQLParser.g:1161:26: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_loop_statement11906);
                    label_name906=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name906.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: loop_key, seq_of_statements, condition, seq_of_statements, seq_of_statements, label_name, label_name, cursor_loop_param, label_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1162:9: -> {mode == 1}? ^( WHILE_LOOP[$while_key.start] ( label_name )* ^( LOGIC_EXPR condition ) seq_of_statements )
            if (mode == 1) {
                // PLSQLParser.g:1162:25: ^( WHILE_LOOP[$while_key.start] ( label_name )* ^( LOGIC_EXPR condition ) seq_of_statements )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_LOOP, (while_key898!=null?((Token)while_key898.start):null))
                , root_1);

                // PLSQLParser.g:1162:56: ( label_name )*
                while ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();

                // PLSQLParser.g:1162:68: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_seq_of_statements.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1163:9: -> {mode == 2}? ^( FOR_LOOP[$for_key.start] ( label_name )* cursor_loop_param seq_of_statements )
            if (mode == 2) {
                // PLSQLParser.g:1163:25: ^( FOR_LOOP[$for_key.start] ( label_name )* cursor_loop_param seq_of_statements )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_LOOP, (for_key900!=null?((Token)for_key900.start):null))
                , root_1);

                // PLSQLParser.g:1163:52: ( label_name )*
                while ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();

                adaptor.addChild(root_1, stream_cursor_loop_param.nextTree());

                adaptor.addChild(root_1, stream_seq_of_statements.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1164:9: -> ^( loop_key ( label_name )* seq_of_statements )
            {
                // PLSQLParser.g:1164:12: ^( loop_key ( label_name )* seq_of_statements )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_loop_key.nextNode(), root_1);

                // PLSQLParser.g:1164:23: ( label_name )*
                while ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();

                adaptor.addChild(root_1, stream_seq_of_statements.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "loop_statement"


    public static class cursor_loop_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_loop_param"
    // PLSQLParser.g:1169:1: cursor_loop_param : ( ( index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD )=> index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD upper_bound -> ^( INDEXED_FOR index_name ( reverse_key )? ^( SIMPLE_BOUND lower_bound upper_bound ) ) | record_name in_key ( cursor_name ( expression_list )? | LEFT_PAREN select_statement RIGHT_PAREN ) -> {mode == 1}? ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? ) -> ^( SELECT_BASED_FOR record_name select_statement ) );
    public final cursor_loop_param_return cursor_loop_param() throws RecognitionException {
        cursor_loop_param_return retval = new cursor_loop_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOUBLE_PERIOD911=null;
        Token LEFT_PAREN917=null;
        Token RIGHT_PAREN919=null;
        PLSQLParser_PLSQLCommons.index_name_return index_name907 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key908 =null;

        PLSQLParser_PLSQLKeys.reverse_key_return reverse_key909 =null;

        lower_bound_return lower_bound910 =null;

        upper_bound_return upper_bound912 =null;

        PLSQLParser_PLSQLCommons.record_name_return record_name913 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key914 =null;

        PLSQLParser_PLSQLCommons.cursor_name_return cursor_name915 =null;

        PLSQLParser_PLSQL_DMLParser.expression_list_return expression_list916 =null;

        PLSQLParser_PLSQL_DMLParser.select_statement_return select_statement918 =null;


        Object DOUBLE_PERIOD911_tree=null;
        Object LEFT_PAREN917_tree=null;
        Object RIGHT_PAREN919_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
        RewriteRuleSubtreeStream stream_record_name=new RewriteRuleSubtreeStream(adaptor,"rule record_name");
        RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
        RewriteRuleSubtreeStream stream_index_name=new RewriteRuleSubtreeStream(adaptor,"rule index_name");
        RewriteRuleSubtreeStream stream_lower_bound=new RewriteRuleSubtreeStream(adaptor,"rule lower_bound");
        RewriteRuleSubtreeStream stream_reverse_key=new RewriteRuleSubtreeStream(adaptor,"rule reverse_key");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        RewriteRuleSubtreeStream stream_upper_bound=new RewriteRuleSubtreeStream(adaptor,"rule upper_bound");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_cursor_name=new RewriteRuleSubtreeStream(adaptor,"rule cursor_name");
            int mode = 0;    
        try {
            // PLSQLParser.g:1171:5: ( ( index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD )=> index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD upper_bound -> ^( INDEXED_FOR index_name ( reverse_key )? ^( SIMPLE_BOUND lower_bound upper_bound ) ) | record_name in_key ( cursor_name ( expression_list )? | LEFT_PAREN select_statement RIGHT_PAREN ) -> {mode == 1}? ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? ) -> ^( SELECT_BASED_FOR record_name select_statement ) )
            int alt247=2;
            switch ( input.LA(1) ) {
            case INTRODUCER:
                {
                int LA247_1 = input.LA(2);

                if ( (synpred61_PLSQLParser()) ) {
                    alt247=1;
                }
                else if ( (true) ) {
                    alt247=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 247, 1, input);

                    throw nvae;

                }
                }
                break;
            case REGULAR_ID:
                {
                int LA247_2 = input.LA(2);

                if ( (synpred61_PLSQLParser()) ) {
                    alt247=1;
                }
                else if ( (true) ) {
                    alt247=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 247, 2, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA247_3 = input.LA(2);

                if ( (synpred61_PLSQLParser()) ) {
                    alt247=1;
                }
                else if ( (true) ) {
                    alt247=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 247, 3, input);

                    throw nvae;

                }
                }
                break;
            case BINDVAR:
            case COLON:
                {
                alt247=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;

            }

            switch (alt247) {
                case 1 :
                    // PLSQLParser.g:1171:10: ( index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD )=> index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD upper_bound
                    {
                    pushFollow(FOLLOW_index_name_in_cursor_loop_param12035);
                    index_name907=index_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_index_name.add(index_name907.getTree());

                    pushFollow(FOLLOW_in_key_in_cursor_loop_param12037);
                    in_key908=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_in_key.add(in_key908.getTree());

                    // PLSQLParser.g:1172:31: ( reverse_key )?
                    int alt244=2;
                    int LA244_0 = input.LA(1);

                    if ( (LA244_0==REGULAR_ID) ) {
                        int LA244_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("reverse"))) ) {
                            alt244=1;
                        }
                    }
                    switch (alt244) {
                        case 1 :
                            // PLSQLParser.g:1172:31: reverse_key
                            {
                            pushFollow(FOLLOW_reverse_key_in_cursor_loop_param12039);
                            reverse_key909=reverse_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_reverse_key.add(reverse_key909.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_lower_bound_in_cursor_loop_param12042);
                    lower_bound910=lower_bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lower_bound.add(lower_bound910.getTree());

                    DOUBLE_PERIOD911=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_cursor_loop_param12044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD911);


                    pushFollow(FOLLOW_upper_bound_in_cursor_loop_param12046);
                    upper_bound912=upper_bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_upper_bound.add(upper_bound912.getTree());

                    // AST REWRITE
                    // elements: reverse_key, index_name, upper_bound, lower_bound
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1173:9: -> ^( INDEXED_FOR index_name ( reverse_key )? ^( SIMPLE_BOUND lower_bound upper_bound ) )
                    {
                        // PLSQLParser.g:1173:12: ^( INDEXED_FOR index_name ( reverse_key )? ^( SIMPLE_BOUND lower_bound upper_bound ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(INDEXED_FOR, "INDEXED_FOR")
                        , root_1);

                        adaptor.addChild(root_1, stream_index_name.nextTree());

                        // PLSQLParser.g:1173:37: ( reverse_key )?
                        if ( stream_reverse_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_reverse_key.nextTree());

                        }
                        stream_reverse_key.reset();

                        // PLSQLParser.g:1173:50: ^( SIMPLE_BOUND lower_bound upper_bound )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(SIMPLE_BOUND, "SIMPLE_BOUND")
                        , root_2);

                        adaptor.addChild(root_2, stream_lower_bound.nextTree());

                        adaptor.addChild(root_2, stream_upper_bound.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1174:11: record_name in_key ( cursor_name ( expression_list )? | LEFT_PAREN select_statement RIGHT_PAREN )
                    {
                    pushFollow(FOLLOW_record_name_in_cursor_loop_param12085);
                    record_name913=record_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_record_name.add(record_name913.getTree());

                    pushFollow(FOLLOW_in_key_in_cursor_loop_param12087);
                    in_key914=in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_in_key.add(in_key914.getTree());

                    // PLSQLParser.g:1174:30: ( cursor_name ( expression_list )? | LEFT_PAREN select_statement RIGHT_PAREN )
                    int alt246=2;
                    int LA246_0 = input.LA(1);

                    if ( (LA246_0==BINDVAR||LA246_0==COLON||LA246_0==DELIMITED_ID||LA246_0==INTRODUCER||LA246_0==REGULAR_ID) ) {
                        alt246=1;
                    }
                    else if ( (LA246_0==LEFT_PAREN) ) {
                        alt246=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 246, 0, input);

                        throw nvae;

                    }
                    switch (alt246) {
                        case 1 :
                            // PLSQLParser.g:1174:32: cursor_name ( expression_list )?
                            {
                            pushFollow(FOLLOW_cursor_name_in_cursor_loop_param12091);
                            cursor_name915=cursor_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_cursor_name.add(cursor_name915.getTree());

                            // PLSQLParser.g:1174:44: ( expression_list )?
                            int alt245=2;
                            int LA245_0 = input.LA(1);

                            if ( (LA245_0==LEFT_PAREN) ) {
                                alt245=1;
                            }
                            switch (alt245) {
                                case 1 :
                                    // PLSQLParser.g:1174:44: expression_list
                                    {
                                    pushFollow(FOLLOW_expression_list_in_cursor_loop_param12093);
                                    expression_list916=expression_list();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression_list.add(expression_list916.getTree());

                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) {mode = 1;}

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:1174:75: LEFT_PAREN select_statement RIGHT_PAREN
                            {
                            LEFT_PAREN917=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cursor_loop_param12100); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN917);


                            pushFollow(FOLLOW_select_statement_in_cursor_loop_param12102);
                            select_statement918=select_statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_select_statement.add(select_statement918.getTree());

                            RIGHT_PAREN919=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cursor_loop_param12104); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN919);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: record_name, cursor_name, select_statement, record_name, expression_list
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1175:9: -> {mode == 1}? ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? )
                    if (mode == 1) {
                        // PLSQLParser.g:1175:24: ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CURSOR_BASED_FOR, "CURSOR_BASED_FOR")
                        , root_1);

                        adaptor.addChild(root_1, stream_record_name.nextTree());

                        adaptor.addChild(root_1, stream_cursor_name.nextTree());

                        // PLSQLParser.g:1175:67: ( expression_list )?
                        if ( stream_expression_list.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression_list.nextTree());

                        }
                        stream_expression_list.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    else // 1176:9: -> ^( SELECT_BASED_FOR record_name select_statement )
                    {
                        // PLSQLParser.g:1176:12: ^( SELECT_BASED_FOR record_name select_statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(SELECT_BASED_FOR, "SELECT_BASED_FOR")
                        , root_1);

                        adaptor.addChild(root_1, stream_record_name.nextTree());

                        adaptor.addChild(root_1, stream_select_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cursor_loop_param"


    public static class forall_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forall_statement"
    // PLSQLParser.g:1180:1: forall_statement : forall_key index_name in_key bounds_clause sql_statement ( save_key exceptions_key )? -> ^( forall_key index_name bounds_clause sql_statement ( exceptions_key )? ) ;
    public final forall_statement_return forall_statement() throws RecognitionException {
        forall_statement_return retval = new forall_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.forall_key_return forall_key920 =null;

        PLSQLParser_PLSQLCommons.index_name_return index_name921 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key922 =null;

        bounds_clause_return bounds_clause923 =null;

        sql_statement_return sql_statement924 =null;

        PLSQLParser_PLSQLKeys.save_key_return save_key925 =null;

        PLSQLParser_PLSQLKeys.exceptions_key_return exceptions_key926 =null;


        RewriteRuleSubtreeStream stream_index_name=new RewriteRuleSubtreeStream(adaptor,"rule index_name");
        RewriteRuleSubtreeStream stream_forall_key=new RewriteRuleSubtreeStream(adaptor,"rule forall_key");
        RewriteRuleSubtreeStream stream_bounds_clause=new RewriteRuleSubtreeStream(adaptor,"rule bounds_clause");
        RewriteRuleSubtreeStream stream_sql_statement=new RewriteRuleSubtreeStream(adaptor,"rule sql_statement");
        RewriteRuleSubtreeStream stream_save_key=new RewriteRuleSubtreeStream(adaptor,"rule save_key");
        RewriteRuleSubtreeStream stream_exceptions_key=new RewriteRuleSubtreeStream(adaptor,"rule exceptions_key");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        try {
            // PLSQLParser.g:1181:5: ( forall_key index_name in_key bounds_clause sql_statement ( save_key exceptions_key )? -> ^( forall_key index_name bounds_clause sql_statement ( exceptions_key )? ) )
            // PLSQLParser.g:1181:10: forall_key index_name in_key bounds_clause sql_statement ( save_key exceptions_key )?
            {
            pushFollow(FOLLOW_forall_key_in_forall_statement12166);
            forall_key920=forall_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_forall_key.add(forall_key920.getTree());

            pushFollow(FOLLOW_index_name_in_forall_statement12168);
            index_name921=index_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_index_name.add(index_name921.getTree());

            pushFollow(FOLLOW_in_key_in_forall_statement12170);
            in_key922=in_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_in_key.add(in_key922.getTree());

            pushFollow(FOLLOW_bounds_clause_in_forall_statement12172);
            bounds_clause923=bounds_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bounds_clause.add(bounds_clause923.getTree());

            pushFollow(FOLLOW_sql_statement_in_forall_statement12174);
            sql_statement924=sql_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sql_statement.add(sql_statement924.getTree());

            // PLSQLParser.g:1181:67: ( save_key exceptions_key )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("save")))) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // PLSQLParser.g:1181:68: save_key exceptions_key
                    {
                    pushFollow(FOLLOW_save_key_in_forall_statement12177);
                    save_key925=save_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_save_key.add(save_key925.getTree());

                    pushFollow(FOLLOW_exceptions_key_in_forall_statement12179);
                    exceptions_key926=exceptions_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exceptions_key.add(exceptions_key926.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: index_name, forall_key, sql_statement, exceptions_key, bounds_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1182:9: -> ^( forall_key index_name bounds_clause sql_statement ( exceptions_key )? )
            {
                // PLSQLParser.g:1182:12: ^( forall_key index_name bounds_clause sql_statement ( exceptions_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_forall_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_index_name.nextTree());

                adaptor.addChild(root_1, stream_bounds_clause.nextTree());

                adaptor.addChild(root_1, stream_sql_statement.nextTree());

                // PLSQLParser.g:1182:64: ( exceptions_key )?
                if ( stream_exceptions_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_exceptions_key.nextTree());

                }
                stream_exceptions_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forall_statement"


    public static class bounds_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bounds_clause"
    // PLSQLParser.g:1185:1: bounds_clause : ( lower_bound DOUBLE_PERIOD upper_bound -> ^( SIMPLE_BOUND lower_bound upper_bound ) | indices_key of_key collection_name ( between_bound )? -> ^( INDICES_BOUND[$indices_key.start] collection_name ( between_bound )? ) | values_key of_key index_name -> ^( VALUES_BOUND[$values_key.start] index_name ) );
    public final bounds_clause_return bounds_clause() throws RecognitionException {
        bounds_clause_return retval = new bounds_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOUBLE_PERIOD928=null;
        lower_bound_return lower_bound927 =null;

        upper_bound_return upper_bound929 =null;

        PLSQLParser_PLSQLKeys.indices_key_return indices_key930 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key931 =null;

        PLSQLParser_PLSQLCommons.collection_name_return collection_name932 =null;

        between_bound_return between_bound933 =null;

        PLSQLParser_PLSQLKeys.values_key_return values_key934 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key935 =null;

        PLSQLParser_PLSQLCommons.index_name_return index_name936 =null;


        Object DOUBLE_PERIOD928_tree=null;
        RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
        RewriteRuleSubtreeStream stream_index_name=new RewriteRuleSubtreeStream(adaptor,"rule index_name");
        RewriteRuleSubtreeStream stream_lower_bound=new RewriteRuleSubtreeStream(adaptor,"rule lower_bound");
        RewriteRuleSubtreeStream stream_values_key=new RewriteRuleSubtreeStream(adaptor,"rule values_key");
        RewriteRuleSubtreeStream stream_collection_name=new RewriteRuleSubtreeStream(adaptor,"rule collection_name");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        RewriteRuleSubtreeStream stream_between_bound=new RewriteRuleSubtreeStream(adaptor,"rule between_bound");
        RewriteRuleSubtreeStream stream_upper_bound=new RewriteRuleSubtreeStream(adaptor,"rule upper_bound");
        RewriteRuleSubtreeStream stream_indices_key=new RewriteRuleSubtreeStream(adaptor,"rule indices_key");
        try {
            // PLSQLParser.g:1186:5: ( lower_bound DOUBLE_PERIOD upper_bound -> ^( SIMPLE_BOUND lower_bound upper_bound ) | indices_key of_key collection_name ( between_bound )? -> ^( INDICES_BOUND[$indices_key.start] collection_name ( between_bound )? ) | values_key of_key index_name -> ^( VALUES_BOUND[$values_key.start] index_name ) )
            int alt250=3;
            switch ( input.LA(1) ) {
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
                {
                alt250=1;
                }
                break;
            case REGULAR_ID:
                {
                int LA250_2 = input.LA(2);

                if ( (LA250_2==MINUS_SIGN||LA250_2==PLUS_SIGN) ) {
                    alt250=1;
                }
                else if ( (LA250_2==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA250_2==SQL92_RESERVED_PRIOR) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt250=1;
                }
                else if ( (LA250_2==REGULAR_ID) ) {
                    alt250=1;
                }
                else if ( (LA250_2==SQL92_RESERVED_ALL||LA250_2==SQL92_RESERVED_DISTINCT) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt250=1;
                }
                else if ( (LA250_2==DELIMITED_ID) && (((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {
                    alt250=1;
                }
                else if ( (LA250_2==SQL92_RESERVED_CASE) ) {
                    alt250=1;
                }
                else if ( (LA250_2==SQL92_RESERVED_ANY||LA250_2==SQL92_RESERVED_EXISTS) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt250=1;
                }
                else if ( (LA250_2==INTRODUCER) && (((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {
                    alt250=1;
                }
                else if ( (LA250_2==BINDVAR||LA250_2==COLON) ) {
                    alt250=1;
                }
                else if ( (LA250_2==APPROXIMATE_NUM_LIT||LA250_2==EXACT_NUM_LIT||LA250_2==SQL92_RESERVED_DATE||LA250_2==UNSIGNED_INTEGER) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt250=1;
                }
                else if ( ((LA250_2 >= CHAR_STRING && LA250_2 <= CHAR_STRING_PERL)||LA250_2==NATIONAL_CHAR_STRING_LIT) ) {
                    alt250=1;
                }
                else if ( (LA250_2==SQL92_RESERVED_DEFAULT||LA250_2==SQL92_RESERVED_FALSE||LA250_2==SQL92_RESERVED_NULL||LA250_2==SQL92_RESERVED_TRUE) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt250=1;
                }
                else if ( (LA250_2==ASTERISK||LA250_2==CONCATENATION_OP||LA250_2==DOUBLE_PERIOD||(LA250_2 >= LEFT_BRACKET && LA250_2 <= LEFT_PAREN)||LA250_2==PERIOD||LA250_2==SOLIDUS||LA250_2==VERTICAL_BAR) ) {
                    alt250=1;
                }
                else if ( (LA250_2==SQL92_RESERVED_OF) && ((input.LT(1).getText().equalsIgnoreCase("indices")))) {
                    alt250=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 2, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_VALUES:
                {
                alt250=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);

                throw nvae;

            }

            switch (alt250) {
                case 1 :
                    // PLSQLParser.g:1186:10: lower_bound DOUBLE_PERIOD upper_bound
                    {
                    pushFollow(FOLLOW_lower_bound_in_bounds_clause12224);
                    lower_bound927=lower_bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lower_bound.add(lower_bound927.getTree());

                    DOUBLE_PERIOD928=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_bounds_clause12226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD928);


                    pushFollow(FOLLOW_upper_bound_in_bounds_clause12228);
                    upper_bound929=upper_bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_upper_bound.add(upper_bound929.getTree());

                    // AST REWRITE
                    // elements: upper_bound, lower_bound
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1186:48: -> ^( SIMPLE_BOUND lower_bound upper_bound )
                    {
                        // PLSQLParser.g:1186:51: ^( SIMPLE_BOUND lower_bound upper_bound )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(SIMPLE_BOUND, "SIMPLE_BOUND")
                        , root_1);

                        adaptor.addChild(root_1, stream_lower_bound.nextTree());

                        adaptor.addChild(root_1, stream_upper_bound.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1187:10: indices_key of_key collection_name ( between_bound )?
                    {
                    pushFollow(FOLLOW_indices_key_in_bounds_clause12249);
                    indices_key930=indices_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_indices_key.add(indices_key930.getTree());

                    pushFollow(FOLLOW_of_key_in_bounds_clause12251);
                    of_key931=of_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_of_key.add(of_key931.getTree());

                    pushFollow(FOLLOW_collection_name_in_bounds_clause12253);
                    collection_name932=collection_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_collection_name.add(collection_name932.getTree());

                    // PLSQLParser.g:1187:45: ( between_bound )?
                    int alt249=2;
                    int LA249_0 = input.LA(1);

                    if ( (LA249_0==SQL92_RESERVED_BETWEEN) ) {
                        alt249=1;
                    }
                    switch (alt249) {
                        case 1 :
                            // PLSQLParser.g:1187:45: between_bound
                            {
                            pushFollow(FOLLOW_between_bound_in_bounds_clause12255);
                            between_bound933=between_bound();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_between_bound.add(between_bound933.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: collection_name, between_bound
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1188:9: -> ^( INDICES_BOUND[$indices_key.start] collection_name ( between_bound )? )
                    {
                        // PLSQLParser.g:1188:12: ^( INDICES_BOUND[$indices_key.start] collection_name ( between_bound )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(INDICES_BOUND, (indices_key930!=null?((Token)indices_key930.start):null))
                        , root_1);

                        adaptor.addChild(root_1, stream_collection_name.nextTree());

                        // PLSQLParser.g:1188:64: ( between_bound )?
                        if ( stream_between_bound.hasNext() ) {
                            adaptor.addChild(root_1, stream_between_bound.nextTree());

                        }
                        stream_between_bound.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:1189:10: values_key of_key index_name
                    {
                    pushFollow(FOLLOW_values_key_in_bounds_clause12287);
                    values_key934=values_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_values_key.add(values_key934.getTree());

                    pushFollow(FOLLOW_of_key_in_bounds_clause12289);
                    of_key935=of_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_of_key.add(of_key935.getTree());

                    pushFollow(FOLLOW_index_name_in_bounds_clause12291);
                    index_name936=index_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_index_name.add(index_name936.getTree());

                    // AST REWRITE
                    // elements: index_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1189:39: -> ^( VALUES_BOUND[$values_key.start] index_name )
                    {
                        // PLSQLParser.g:1189:42: ^( VALUES_BOUND[$values_key.start] index_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUES_BOUND, (values_key934!=null?((Token)values_key934.start):null))
                        , root_1);

                        adaptor.addChild(root_1, stream_index_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bounds_clause"


    public static class between_bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "between_bound"
    // PLSQLParser.g:1192:1: between_bound : between_key lower_bound and_key upper_bound -> ^( between_key lower_bound upper_bound ) ;
    public final between_bound_return between_bound() throws RecognitionException {
        between_bound_return retval = new between_bound_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.between_key_return between_key937 =null;

        lower_bound_return lower_bound938 =null;

        PLSQLParser_PLSQLKeys.and_key_return and_key939 =null;

        upper_bound_return upper_bound940 =null;


        RewriteRuleSubtreeStream stream_lower_bound=new RewriteRuleSubtreeStream(adaptor,"rule lower_bound");
        RewriteRuleSubtreeStream stream_between_key=new RewriteRuleSubtreeStream(adaptor,"rule between_key");
        RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");
        RewriteRuleSubtreeStream stream_upper_bound=new RewriteRuleSubtreeStream(adaptor,"rule upper_bound");
        try {
            // PLSQLParser.g:1193:5: ( between_key lower_bound and_key upper_bound -> ^( between_key lower_bound upper_bound ) )
            // PLSQLParser.g:1193:10: between_key lower_bound and_key upper_bound
            {
            pushFollow(FOLLOW_between_key_in_between_bound12321);
            between_key937=between_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_between_key.add(between_key937.getTree());

            pushFollow(FOLLOW_lower_bound_in_between_bound12323);
            lower_bound938=lower_bound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lower_bound.add(lower_bound938.getTree());

            pushFollow(FOLLOW_and_key_in_between_bound12325);
            and_key939=and_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_and_key.add(and_key939.getTree());

            pushFollow(FOLLOW_upper_bound_in_between_bound12327);
            upper_bound940=upper_bound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_upper_bound.add(upper_bound940.getTree());

            // AST REWRITE
            // elements: between_key, upper_bound, lower_bound
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1194:9: -> ^( between_key lower_bound upper_bound )
            {
                // PLSQLParser.g:1194:12: ^( between_key lower_bound upper_bound )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_between_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_lower_bound.nextTree());

                adaptor.addChild(root_1, stream_upper_bound.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "between_bound"


    public static class lower_bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lower_bound"
    // PLSQLParser.g:1197:1: lower_bound : concatenation -> ^( EXPR concatenation ) ;
    public final lower_bound_return lower_bound() throws RecognitionException {
        lower_bound_return retval = new lower_bound_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQL_DMLParser.concatenation_return concatenation941 =null;


        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        try {
            // PLSQLParser.g:1198:5: ( concatenation -> ^( EXPR concatenation ) )
            // PLSQLParser.g:1198:10: concatenation
            {
            pushFollow(FOLLOW_concatenation_in_lower_bound12365);
            concatenation941=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(concatenation941.getTree());

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1199:9: -> ^( EXPR concatenation )
            {
                // PLSQLParser.g:1199:12: ^( EXPR concatenation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_concatenation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lower_bound"


    public static class upper_bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "upper_bound"
    // PLSQLParser.g:1202:1: upper_bound : concatenation -> ^( EXPR concatenation ) ;
    public final upper_bound_return upper_bound() throws RecognitionException {
        upper_bound_return retval = new upper_bound_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQL_DMLParser.concatenation_return concatenation942 =null;


        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        try {
            // PLSQLParser.g:1203:5: ( concatenation -> ^( EXPR concatenation ) )
            // PLSQLParser.g:1203:10: concatenation
            {
            pushFollow(FOLLOW_concatenation_in_upper_bound12401);
            concatenation942=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(concatenation942.getTree());

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1204:9: -> ^( EXPR concatenation )
            {
                // PLSQLParser.g:1204:12: ^( EXPR concatenation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_concatenation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "upper_bound"


    public static class null_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_statement"
    // PLSQLParser.g:1207:1: null_statement : null_key ;
    public final null_statement_return null_statement() throws RecognitionException {
        null_statement_return retval = new null_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.null_key_return null_key943 =null;



        try {
            // PLSQLParser.g:1208:5: ( null_key )
            // PLSQLParser.g:1208:10: null_key
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_null_key_in_null_statement12437);
            null_key943=null_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_key943.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_statement"


    public static class raise_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "raise_statement"
    // PLSQLParser.g:1211:1: raise_statement : raise_key ^ ( exception_name )? ;
    public final raise_statement_return raise_statement() throws RecognitionException {
        raise_statement_return retval = new raise_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.raise_key_return raise_key944 =null;

        PLSQLParser_PLSQLCommons.exception_name_return exception_name945 =null;



        try {
            // PLSQLParser.g:1212:5: ( raise_key ^ ( exception_name )? )
            // PLSQLParser.g:1212:10: raise_key ^ ( exception_name )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_raise_key_in_raise_statement12457);
            raise_key944=raise_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(raise_key944.getTree(), root_0);

            // PLSQLParser.g:1212:21: ( exception_name )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==DELIMITED_ID||LA251_0==INTRODUCER||LA251_0==REGULAR_ID) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // PLSQLParser.g:1212:21: exception_name
                    {
                    pushFollow(FOLLOW_exception_name_in_raise_statement12460);
                    exception_name945=exception_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name945.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "raise_statement"


    public static class return_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_statement"
    // PLSQLParser.g:1215:1: return_statement : return_key (cn1= condition )? -> {cn1 != null}? ^( return_key ^( LOGIC_EXPR condition ) ) -> ^( return_key ) ;
    public final return_statement_return return_statement() throws RecognitionException {
        return_statement_return retval = new return_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQL_DMLParser.condition_return cn1 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key946 =null;


        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        try {
            // PLSQLParser.g:1216:5: ( return_key (cn1= condition )? -> {cn1 != null}? ^( return_key ^( LOGIC_EXPR condition ) ) -> ^( return_key ) )
            // PLSQLParser.g:1216:10: return_key (cn1= condition )?
            {
            pushFollow(FOLLOW_return_key_in_return_statement12481);
            return_key946=return_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_return_key.add(return_key946.getTree());

            // PLSQLParser.g:1216:24: (cn1= condition )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==APPROXIMATE_NUM_LIT||LA252_0==BINDVAR||(LA252_0 >= CHAR_STRING && LA252_0 <= COLON)||LA252_0==DELIMITED_ID||LA252_0==EXACT_NUM_LIT||LA252_0==INTRODUCER||LA252_0==LEFT_PAREN||(LA252_0 >= MINUS_SIGN && LA252_0 <= NATIONAL_CHAR_STRING_LIT)||LA252_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA252_0==PLUS_SIGN||LA252_0==REGULAR_ID||LA252_0==SQL92_RESERVED_ALL||LA252_0==SQL92_RESERVED_ANY||LA252_0==SQL92_RESERVED_CASE||(LA252_0 >= SQL92_RESERVED_CURSOR && LA252_0 <= SQL92_RESERVED_DATE)||LA252_0==SQL92_RESERVED_DEFAULT||LA252_0==SQL92_RESERVED_DISTINCT||(LA252_0 >= SQL92_RESERVED_EXISTS && LA252_0 <= SQL92_RESERVED_FALSE)||(LA252_0 >= SQL92_RESERVED_NOT && LA252_0 <= SQL92_RESERVED_NULL)||LA252_0==SQL92_RESERVED_PRIOR||LA252_0==SQL92_RESERVED_TRUE||LA252_0==UNSIGNED_INTEGER) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // PLSQLParser.g:1216:24: cn1= condition
                    {
                    pushFollow(FOLLOW_condition_in_return_statement12485);
                    cn1=condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition.add(cn1.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: return_key, return_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1217:5: -> {cn1 != null}? ^( return_key ^( LOGIC_EXPR condition ) )
            if (cn1 != null) {
                // PLSQLParser.g:1217:23: ^( return_key ^( LOGIC_EXPR condition ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_return_key.nextNode(), root_1);

                // PLSQLParser.g:1217:36: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1218:5: -> ^( return_key )
            {
                // PLSQLParser.g:1218:8: ^( return_key )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_return_key.nextNode(), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_statement"


    public static class function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_call"
    // PLSQLParser.g:1221:1: function_call : ( call_key )? routine_name ( function_argument )? -> ^( ROUTINE_CALL routine_name ( function_argument )? ) ;
    public final function_call_return function_call() throws RecognitionException {
        function_call_return retval = new function_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.call_key_return call_key947 =null;

        PLSQLParser_PLSQLCommons.routine_name_return routine_name948 =null;

        PLSQLParser_PLSQLCommons.function_argument_return function_argument949 =null;


        RewriteRuleSubtreeStream stream_call_key=new RewriteRuleSubtreeStream(adaptor,"rule call_key");
        RewriteRuleSubtreeStream stream_function_argument=new RewriteRuleSubtreeStream(adaptor,"rule function_argument");
        RewriteRuleSubtreeStream stream_routine_name=new RewriteRuleSubtreeStream(adaptor,"rule routine_name");
        try {
            // PLSQLParser.g:1222:5: ( ( call_key )? routine_name ( function_argument )? -> ^( ROUTINE_CALL routine_name ( function_argument )? ) )
            // PLSQLParser.g:1222:10: ( call_key )? routine_name ( function_argument )?
            {
            // PLSQLParser.g:1222:10: ( call_key )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==REGULAR_ID) ) {
                int LA253_1 = input.LA(2);

                if ( (LA253_1==DELIMITED_ID||LA253_1==INTRODUCER||LA253_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("call")))) {
                    alt253=1;
                }
            }
            switch (alt253) {
                case 1 :
                    // PLSQLParser.g:1222:10: call_key
                    {
                    pushFollow(FOLLOW_call_key_in_function_call12534);
                    call_key947=call_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_call_key.add(call_key947.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_routine_name_in_function_call12537);
            routine_name948=routine_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_routine_name.add(routine_name948.getTree());

            // PLSQLParser.g:1222:33: ( function_argument )?
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==LEFT_PAREN) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    // PLSQLParser.g:1222:33: function_argument
                    {
                    pushFollow(FOLLOW_function_argument_in_function_call12539);
                    function_argument949=function_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function_argument.add(function_argument949.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: routine_name, function_argument
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1223:9: -> ^( ROUTINE_CALL routine_name ( function_argument )? )
            {
                // PLSQLParser.g:1223:12: ^( ROUTINE_CALL routine_name ( function_argument )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ROUTINE_CALL, "ROUTINE_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_routine_name.nextTree());

                // PLSQLParser.g:1223:40: ( function_argument )?
                if ( stream_function_argument.hasNext() ) {
                    adaptor.addChild(root_1, stream_function_argument.nextTree());

                }
                stream_function_argument.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_call"


    public static class body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body"
    // PLSQLParser.g:1226:1: body : begin_key seq_of_statements ( exception_clause )? end_key ( label_name )? -> ^( BODY[$begin_key.start] ( label_name )? seq_of_statements ( exception_clause )? ) ;
    public final body_return body() throws RecognitionException {
        body_return retval = new body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.begin_key_return begin_key950 =null;

        seq_of_statements_return seq_of_statements951 =null;

        exception_clause_return exception_clause952 =null;

        PLSQLParser_PLSQLKeys.end_key_return end_key953 =null;

        PLSQLParser_PLSQLCommons.label_name_return label_name954 =null;


        RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");
        RewriteRuleSubtreeStream stream_begin_key=new RewriteRuleSubtreeStream(adaptor,"rule begin_key");
        RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
        RewriteRuleSubtreeStream stream_exception_clause=new RewriteRuleSubtreeStream(adaptor,"rule exception_clause");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        try {
            // PLSQLParser.g:1227:5: ( begin_key seq_of_statements ( exception_clause )? end_key ( label_name )? -> ^( BODY[$begin_key.start] ( label_name )? seq_of_statements ( exception_clause )? ) )
            // PLSQLParser.g:1227:10: begin_key seq_of_statements ( exception_clause )? end_key ( label_name )?
            {
            pushFollow(FOLLOW_begin_key_in_body12579);
            begin_key950=begin_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_begin_key.add(begin_key950.getTree());

            pushFollow(FOLLOW_seq_of_statements_in_body12589);
            seq_of_statements951=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements951.getTree());

            // PLSQLParser.g:1229:9: ( exception_clause )?
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==SQL92_RESERVED_EXCEPTION) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    // PLSQLParser.g:1229:9: exception_clause
                    {
                    pushFollow(FOLLOW_exception_clause_in_body12599);
                    exception_clause952=exception_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exception_clause.add(exception_clause952.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_end_key_in_body12610);
            end_key953=end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key953.getTree());

            // PLSQLParser.g:1230:17: ( label_name )?
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==REGULAR_ID) ) {
                int LA256_1 = input.LA(2);

                if ( (LA256_1==EOF||LA256_1==SEMICOLON) ) {
                    alt256=1;
                }
                else if ( (LA256_1==REGULAR_ID) ) {
                    int LA256_4 = input.LA(3);

                    if ( (LA256_4==REGULAR_ID) ) {
                        int LA256_5 = input.LA(4);

                        if ( (LA256_5==SEMICOLON) && ((((!(((input.LT(1).getText().equalsIgnoreCase("after"))))&&!(((input.LT(1).getText().equalsIgnoreCase("after")))))&&!(((input.LT(1).getText().equalsIgnoreCase("before")))))||(input.LT(1).getText().equalsIgnoreCase("before"))||(input.LT(1).getText().equalsIgnoreCase("after"))||!((((input.LT(1).getText().equalsIgnoreCase("before"))||(input.LT(1).getText().equalsIgnoreCase("after")))))))) {
                            int LA256_7 = input.LA(5);

                            if ( (!((((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before")))))) ) {
                                alt256=1;
                            }
                        }
                        else if ( (LA256_5==REGULAR_ID) ) {
                            alt256=1;
                        }
                    }
                }
            }
            else if ( (LA256_0==DELIMITED_ID) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    // PLSQLParser.g:1230:17: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_body12612);
                    label_name954=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name954.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: exception_clause, seq_of_statements, label_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1231:9: -> ^( BODY[$begin_key.start] ( label_name )? seq_of_statements ( exception_clause )? )
            {
                // PLSQLParser.g:1231:12: ^( BODY[$begin_key.start] ( label_name )? seq_of_statements ( exception_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BODY, (begin_key950!=null?((Token)begin_key950.start):null))
                , root_1);

                // PLSQLParser.g:1231:37: ( label_name )?
                if ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();

                adaptor.addChild(root_1, stream_seq_of_statements.nextTree());

                // PLSQLParser.g:1231:67: ( exception_clause )?
                if ( stream_exception_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_exception_clause.nextTree());

                }
                stream_exception_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body"


    public static class exception_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_clause"
    // PLSQLParser.g:1236:1: exception_clause : exception_key ^ ( exception_handler )+ ;
    public final exception_clause_return exception_clause() throws RecognitionException {
        exception_clause_return retval = new exception_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.exception_key_return exception_key955 =null;

        exception_handler_return exception_handler956 =null;



        try {
            // PLSQLParser.g:1237:5: ( exception_key ^ ( exception_handler )+ )
            // PLSQLParser.g:1237:10: exception_key ^ ( exception_handler )+
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_exception_key_in_exception_clause12659);
            exception_key955=exception_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(exception_key955.getTree(), root_0);

            // PLSQLParser.g:1237:25: ( exception_handler )+
            int cnt257=0;
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);

                if ( (LA257_0==SQL92_RESERVED_WHEN) ) {
                    alt257=1;
                }


                switch (alt257) {
            	case 1 :
            	    // PLSQLParser.g:1237:25: exception_handler
            	    {
            	    pushFollow(FOLLOW_exception_handler_in_exception_clause12662);
            	    exception_handler956=exception_handler();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler956.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt257 >= 1 ) break loop257;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(257, input);
                        throw eee;
                }
                cnt257++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exception_clause"


    public static class exception_handler_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_handler"
    // PLSQLParser.g:1240:1: exception_handler : when_key exception_name ( or_key exception_name )* then_key seq_of_statements -> ^( when_key ( exception_name )+ seq_of_statements ) ;
    public final exception_handler_return exception_handler() throws RecognitionException {
        exception_handler_return retval = new exception_handler_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.when_key_return when_key957 =null;

        PLSQLParser_PLSQLCommons.exception_name_return exception_name958 =null;

        PLSQLParser_PLSQLKeys.or_key_return or_key959 =null;

        PLSQLParser_PLSQLCommons.exception_name_return exception_name960 =null;

        PLSQLParser_PLSQLKeys.then_key_return then_key961 =null;

        seq_of_statements_return seq_of_statements962 =null;


        RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
        RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");
        RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
        RewriteRuleSubtreeStream stream_exception_name=new RewriteRuleSubtreeStream(adaptor,"rule exception_name");
        RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
        try {
            // PLSQLParser.g:1241:5: ( when_key exception_name ( or_key exception_name )* then_key seq_of_statements -> ^( when_key ( exception_name )+ seq_of_statements ) )
            // PLSQLParser.g:1241:10: when_key exception_name ( or_key exception_name )* then_key seq_of_statements
            {
            pushFollow(FOLLOW_when_key_in_exception_handler12683);
            when_key957=when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_when_key.add(when_key957.getTree());

            pushFollow(FOLLOW_exception_name_in_exception_handler12685);
            exception_name958=exception_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exception_name.add(exception_name958.getTree());

            // PLSQLParser.g:1241:34: ( or_key exception_name )*
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);

                if ( (LA258_0==SQL92_RESERVED_OR) ) {
                    alt258=1;
                }


                switch (alt258) {
            	case 1 :
            	    // PLSQLParser.g:1241:35: or_key exception_name
            	    {
            	    pushFollow(FOLLOW_or_key_in_exception_handler12688);
            	    or_key959=or_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_or_key.add(or_key959.getTree());

            	    pushFollow(FOLLOW_exception_name_in_exception_handler12690);
            	    exception_name960=exception_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exception_name.add(exception_name960.getTree());

            	    }
            	    break;

            	default :
            	    break loop258;
                }
            } while (true);


            pushFollow(FOLLOW_then_key_in_exception_handler12694);
            then_key961=then_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_then_key.add(then_key961.getTree());

            pushFollow(FOLLOW_seq_of_statements_in_exception_handler12704);
            seq_of_statements962=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements962.getTree());

            // AST REWRITE
            // elements: exception_name, when_key, seq_of_statements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1243:9: -> ^( when_key ( exception_name )+ seq_of_statements )
            {
                // PLSQLParser.g:1243:12: ^( when_key ( exception_name )+ seq_of_statements )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_when_key.nextNode(), root_1);

                if ( !(stream_exception_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_exception_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_exception_name.nextTree());

                }
                stream_exception_name.reset();

                adaptor.addChild(root_1, stream_seq_of_statements.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exception_handler"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // PLSQLParser.g:1248:1: block : ( ( declare_key )? ( declare_spec )+ )? body -> ^( BLOCK ( declare_spec )* body ) ;
    public final block_return block() throws RecognitionException {
        block_return retval = new block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.declare_key_return declare_key963 =null;

        declare_spec_return declare_spec964 =null;

        body_return body965 =null;


        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        RewriteRuleSubtreeStream stream_declare_spec=new RewriteRuleSubtreeStream(adaptor,"rule declare_spec");
        RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
        try {
            // PLSQLParser.g:1249:5: ( ( ( declare_key )? ( declare_spec )+ )? body -> ^( BLOCK ( declare_spec )* body ) )
            // PLSQLParser.g:1249:10: ( ( declare_key )? ( declare_spec )+ )? body
            {
            // PLSQLParser.g:1249:10: ( ( declare_key )? ( declare_spec )+ )?
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==BINDVAR||LA261_0==COLON||LA261_0==DELIMITED_ID||LA261_0==INTRODUCER||LA261_0==REGULAR_ID||LA261_0==SQL92_RESERVED_CREATE||LA261_0==SQL92_RESERVED_CURSOR||LA261_0==SQL92_RESERVED_DECLARE||LA261_0==SQL92_RESERVED_PROCEDURE) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    // PLSQLParser.g:1249:11: ( declare_key )? ( declare_spec )+
                    {
                    // PLSQLParser.g:1249:11: ( declare_key )?
                    int alt259=2;
                    int LA259_0 = input.LA(1);

                    if ( (LA259_0==SQL92_RESERVED_DECLARE) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            // PLSQLParser.g:1249:11: declare_key
                            {
                            pushFollow(FOLLOW_declare_key_in_block12746);
                            declare_key963=declare_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_declare_key.add(declare_key963.getTree());

                            }
                            break;

                    }


                    // PLSQLParser.g:1249:24: ( declare_spec )+
                    int cnt260=0;
                    loop260:
                    do {
                        int alt260=2;
                        int LA260_0 = input.LA(1);

                        if ( (LA260_0==BINDVAR||LA260_0==COLON||LA260_0==DELIMITED_ID||LA260_0==INTRODUCER||LA260_0==REGULAR_ID||LA260_0==SQL92_RESERVED_CREATE||LA260_0==SQL92_RESERVED_CURSOR||LA260_0==SQL92_RESERVED_PROCEDURE) ) {
                            alt260=1;
                        }


                        switch (alt260) {
                    	case 1 :
                    	    // PLSQLParser.g:1249:24: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_block12749);
                    	    declare_spec964=declare_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_declare_spec.add(declare_spec964.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt260 >= 1 ) break loop260;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(260, input);
                                throw eee;
                        }
                        cnt260++;
                    } while (true);


                    }
                    break;

            }


            pushFollow(FOLLOW_body_in_block12762);
            body965=body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_body.add(body965.getTree());

            // AST REWRITE
            // elements: body, declare_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1251:9: -> ^( BLOCK ( declare_spec )* body )
            {
                // PLSQLParser.g:1251:12: ^( BLOCK ( declare_spec )* body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                // PLSQLParser.g:1251:20: ( declare_spec )*
                while ( stream_declare_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_declare_spec.nextTree());

                }
                stream_declare_spec.reset();

                adaptor.addChild(root_1, stream_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class sql_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sql_statement"
    // PLSQLParser.g:1258:1: sql_statement options {backtrack=true; } : ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements );
    public final sql_statement_return sql_statement() throws RecognitionException {
        sql_statement_return retval = new sql_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        execute_immediate_return execute_immediate966 =null;

        data_manipulation_language_statements_return data_manipulation_language_statements967 =null;

        cursor_manipulation_statements_return cursor_manipulation_statements968 =null;

        transaction_control_statements_return transaction_control_statements969 =null;



        try {
            // PLSQLParser.g:1261:6: ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements )
            int alt262=4;
            alt262 = dfa262.predict(input);
            switch (alt262) {
                case 1 :
                    // PLSQLParser.g:1261:11: execute_immediate
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_execute_immediate_in_sql_statement12813);
                    execute_immediate966=execute_immediate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, execute_immediate966.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1262:10: data_manipulation_language_statements
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_data_manipulation_language_statements_in_sql_statement12824);
                    data_manipulation_language_statements967=data_manipulation_language_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, data_manipulation_language_statements967.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:1263:10: cursor_manipulation_statements
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_manipulation_statements_in_sql_statement12835);
                    cursor_manipulation_statements968=cursor_manipulation_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_manipulation_statements968.getTree());

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:1264:10: transaction_control_statements
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_transaction_control_statements_in_sql_statement12846);
                    transaction_control_statements969=transaction_control_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, transaction_control_statements969.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sql_statement"


    public static class execute_immediate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "execute_immediate"
    // PLSQLParser.g:1267:1: execute_immediate : execute_key immediate_key expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )? -> ^( execute_key ^( EXPR expression ) ( into_clause )? ( using_clause )? ( dynamic_returning_clause )? ) ;
    public final execute_immediate_return execute_immediate() throws RecognitionException {
        execute_immediate_return retval = new execute_immediate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.execute_key_return execute_key970 =null;

        PLSQLParser_PLSQLKeys.immediate_key_return immediate_key971 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression972 =null;

        PLSQLParser_PLSQLCommons.into_clause_return into_clause973 =null;

        PLSQLParser_PLSQL_DMLParser.using_clause_return using_clause974 =null;

        PLSQLParser_PLSQL_DMLParser.using_clause_return using_clause975 =null;

        dynamic_returning_clause_return dynamic_returning_clause976 =null;

        dynamic_returning_clause_return dynamic_returning_clause977 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
        RewriteRuleSubtreeStream stream_dynamic_returning_clause=new RewriteRuleSubtreeStream(adaptor,"rule dynamic_returning_clause");
        RewriteRuleSubtreeStream stream_using_clause=new RewriteRuleSubtreeStream(adaptor,"rule using_clause");
        RewriteRuleSubtreeStream stream_immediate_key=new RewriteRuleSubtreeStream(adaptor,"rule immediate_key");
        RewriteRuleSubtreeStream stream_execute_key=new RewriteRuleSubtreeStream(adaptor,"rule execute_key");
        try {
            // PLSQLParser.g:1268:5: ( execute_key immediate_key expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )? -> ^( execute_key ^( EXPR expression ) ( into_clause )? ( using_clause )? ( dynamic_returning_clause )? ) )
            // PLSQLParser.g:1268:10: execute_key immediate_key expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )?
            {
            pushFollow(FOLLOW_execute_key_in_execute_immediate12866);
            execute_key970=execute_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_execute_key.add(execute_key970.getTree());

            pushFollow(FOLLOW_immediate_key_in_execute_immediate12868);
            immediate_key971=immediate_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_immediate_key.add(immediate_key971.getTree());

            pushFollow(FOLLOW_expression_in_execute_immediate12870);
            expression972=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression972.getTree());

            // PLSQLParser.g:1269:5: ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )?
            int alt265=4;
            switch ( input.LA(1) ) {
                case SQL92_RESERVED_INTO:
                    {
                    alt265=1;
                    }
                    break;
                case REGULAR_ID:
                    {
                    int LA265_2 = input.LA(2);

                    if ( (LA265_2==REGULAR_ID) ) {
                        int LA265_5 = input.LA(3);

                        if ( (LA265_5==SQL92_RESERVED_INTO) && ((input.LT(1).getText().equalsIgnoreCase("bulk")))) {
                            alt265=1;
                        }
                        else if ( (LA265_5==REGULAR_ID) ) {
                            alt265=3;
                        }
                    }
                    else if ( (LA265_2==SQL92_RESERVED_INTO) ) {
                        alt265=3;
                    }
                    }
                    break;
                case PLSQL_NON_RESERVED_USING:
                    {
                    alt265=2;
                    }
                    break;
            }

            switch (alt265) {
                case 1 :
                    // PLSQLParser.g:1269:10: into_clause ( using_clause )?
                    {
                    pushFollow(FOLLOW_into_clause_in_execute_immediate12881);
                    into_clause973=into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_into_clause.add(into_clause973.getTree());

                    // PLSQLParser.g:1269:22: ( using_clause )?
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==PLSQL_NON_RESERVED_USING) ) {
                        alt263=1;
                    }
                    switch (alt263) {
                        case 1 :
                            // PLSQLParser.g:1269:22: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_execute_immediate12883);
                            using_clause974=using_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_using_clause.add(using_clause974.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1270:10: using_clause ( dynamic_returning_clause )?
                    {
                    pushFollow(FOLLOW_using_clause_in_execute_immediate12895);
                    using_clause975=using_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_using_clause.add(using_clause975.getTree());

                    // PLSQLParser.g:1270:23: ( dynamic_returning_clause )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==REGULAR_ID) ) {
                        int LA264_1 = input.LA(2);

                        if ( (LA264_1==SQL92_RESERVED_INTO) ) {
                            alt264=1;
                        }
                        else if ( (LA264_1==REGULAR_ID) ) {
                            int LA264_4 = input.LA(3);

                            if ( (LA264_4==REGULAR_ID) ) {
                                alt264=1;
                            }
                        }
                    }
                    switch (alt264) {
                        case 1 :
                            // PLSQLParser.g:1270:23: dynamic_returning_clause
                            {
                            pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate12897);
                            dynamic_returning_clause976=dynamic_returning_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dynamic_returning_clause.add(dynamic_returning_clause976.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // PLSQLParser.g:1271:10: dynamic_returning_clause
                    {
                    pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate12909);
                    dynamic_returning_clause977=dynamic_returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dynamic_returning_clause.add(dynamic_returning_clause977.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: execute_key, expression, into_clause, using_clause, dynamic_returning_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1273:9: -> ^( execute_key ^( EXPR expression ) ( into_clause )? ( using_clause )? ( dynamic_returning_clause )? )
            {
                // PLSQLParser.g:1273:12: ^( execute_key ^( EXPR expression ) ( into_clause )? ( using_clause )? ( dynamic_returning_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_execute_key.nextNode(), root_1);

                // PLSQLParser.g:1273:26: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:1273:45: ( into_clause )?
                if ( stream_into_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_into_clause.nextTree());

                }
                stream_into_clause.reset();

                // PLSQLParser.g:1273:58: ( using_clause )?
                if ( stream_using_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_using_clause.nextTree());

                }
                stream_using_clause.reset();

                // PLSQLParser.g:1273:72: ( dynamic_returning_clause )?
                if ( stream_dynamic_returning_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_dynamic_returning_clause.nextTree());

                }
                stream_dynamic_returning_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "execute_immediate"


    public static class dynamic_returning_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dynamic_returning_clause"
    // PLSQLParser.g:1277:1: dynamic_returning_clause : ( returning_key | return_key ) into_clause -> ^( DYNAMIC_RETURN into_clause ) ;
    public final dynamic_returning_clause_return dynamic_returning_clause() throws RecognitionException {
        dynamic_returning_clause_return retval = new dynamic_returning_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.returning_key_return returning_key978 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key979 =null;

        PLSQLParser_PLSQLCommons.into_clause_return into_clause980 =null;


        RewriteRuleSubtreeStream stream_returning_key=new RewriteRuleSubtreeStream(adaptor,"rule returning_key");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
        try {
            // PLSQLParser.g:1278:5: ( ( returning_key | return_key ) into_clause -> ^( DYNAMIC_RETURN into_clause ) )
            // PLSQLParser.g:1278:10: ( returning_key | return_key ) into_clause
            {
            // PLSQLParser.g:1278:10: ( returning_key | return_key )
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==REGULAR_ID) ) {
                int LA266_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("returning"))) ) {
                    alt266=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("return"))) ) {
                    alt266=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;

            }
            switch (alt266) {
                case 1 :
                    // PLSQLParser.g:1278:11: returning_key
                    {
                    pushFollow(FOLLOW_returning_key_in_dynamic_returning_clause12968);
                    returning_key978=returning_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_returning_key.add(returning_key978.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1278:25: return_key
                    {
                    pushFollow(FOLLOW_return_key_in_dynamic_returning_clause12970);
                    return_key979=return_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_return_key.add(return_key979.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_into_clause_in_dynamic_returning_clause12973);
            into_clause980=into_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_into_clause.add(into_clause980.getTree());

            // AST REWRITE
            // elements: into_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1279:9: -> ^( DYNAMIC_RETURN into_clause )
            {
                // PLSQLParser.g:1279:12: ^( DYNAMIC_RETURN into_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DYNAMIC_RETURN, "DYNAMIC_RETURN")
                , root_1);

                adaptor.addChild(root_1, stream_into_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dynamic_returning_clause"


    public static class data_manipulation_language_statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "data_manipulation_language_statements"
    // PLSQLParser.g:1286:1: data_manipulation_language_statements : ( merge_statement | lock_table_statement | select_statement | update_statement | delete_statement | insert_statement );
    public final data_manipulation_language_statements_return data_manipulation_language_statements() throws RecognitionException {
        data_manipulation_language_statements_return retval = new data_manipulation_language_statements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQL_DMLParser.merge_statement_return merge_statement981 =null;

        PLSQLParser_PLSQL_DMLParser.lock_table_statement_return lock_table_statement982 =null;

        PLSQLParser_PLSQL_DMLParser.select_statement_return select_statement983 =null;

        PLSQLParser_PLSQL_DMLParser.update_statement_return update_statement984 =null;

        PLSQLParser_PLSQL_DMLParser.delete_statement_return delete_statement985 =null;

        PLSQLParser_PLSQL_DMLParser.insert_statement_return insert_statement986 =null;



        try {
            // PLSQLParser.g:1287:5: ( merge_statement | lock_table_statement | select_statement | update_statement | delete_statement | insert_statement )
            int alt267=6;
            int LA267_0 = input.LA(1);

            if ( (LA267_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("merge")))) {
                alt267=1;
            }
            else if ( (LA267_0==PLSQL_RESERVED_LOCK) ) {
                alt267=2;
            }
            else if ( (LA267_0==LEFT_PAREN||LA267_0==SQL92_RESERVED_SELECT||LA267_0==SQL92_RESERVED_WITH) ) {
                alt267=3;
            }
            else if ( (LA267_0==SQL92_RESERVED_UPDATE) ) {
                alt267=4;
            }
            else if ( (LA267_0==SQL92_RESERVED_DELETE) ) {
                alt267=5;
            }
            else if ( (LA267_0==SQL92_RESERVED_INSERT) ) {
                alt267=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;

            }
            switch (alt267) {
                case 1 :
                    // PLSQLParser.g:1287:10: merge_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_merge_statement_in_data_manipulation_language_statements13013);
                    merge_statement981=merge_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, merge_statement981.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1288:10: lock_table_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lock_table_statement_in_data_manipulation_language_statements13024);
                    lock_table_statement982=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement982.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:1289:10: select_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_select_statement_in_data_manipulation_language_statements13035);
                    select_statement983=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement983.getTree());

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:1290:11: update_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_update_statement_in_data_manipulation_language_statements13047);
                    update_statement984=update_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statement984.getTree());

                    }
                    break;
                case 5 :
                    // PLSQLParser.g:1291:11: delete_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_delete_statement_in_data_manipulation_language_statements13059);
                    delete_statement985=delete_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statement985.getTree());

                    }
                    break;
                case 6 :
                    // PLSQLParser.g:1292:10: insert_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_insert_statement_in_data_manipulation_language_statements13070);
                    insert_statement986=insert_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement986.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "data_manipulation_language_statements"


    public static class cursor_manipulation_statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_manipulation_statements"
    // PLSQLParser.g:1299:1: cursor_manipulation_statements : ( close_statement | open_statement | fetch_statement | open_for_statement );
    public final cursor_manipulation_statements_return cursor_manipulation_statements() throws RecognitionException {
        cursor_manipulation_statements_return retval = new cursor_manipulation_statements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        close_statement_return close_statement987 =null;

        open_statement_return open_statement988 =null;

        fetch_statement_return fetch_statement989 =null;

        open_for_statement_return open_for_statement990 =null;



        try {
            // PLSQLParser.g:1300:5: ( close_statement | open_statement | fetch_statement | open_for_statement )
            int alt268=4;
            alt268 = dfa268.predict(input);
            switch (alt268) {
                case 1 :
                    // PLSQLParser.g:1300:10: close_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_close_statement_in_cursor_manipulation_statements13094);
                    close_statement987=close_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, close_statement987.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1301:10: open_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_open_statement_in_cursor_manipulation_statements13105);
                    open_statement988=open_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_statement988.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:1302:10: fetch_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_fetch_statement_in_cursor_manipulation_statements13116);
                    fetch_statement989=fetch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_statement989.getTree());

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:1303:10: open_for_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_open_for_statement_in_cursor_manipulation_statements13127);
                    open_for_statement990=open_for_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_for_statement990.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cursor_manipulation_statements"


    public static class close_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "close_statement"
    // PLSQLParser.g:1306:1: close_statement : close_key ^ cursor_name ;
    public final close_statement_return close_statement() throws RecognitionException {
        close_statement_return retval = new close_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.close_key_return close_key991 =null;

        PLSQLParser_PLSQLCommons.cursor_name_return cursor_name992 =null;



        try {
            // PLSQLParser.g:1307:5: ( close_key ^ cursor_name )
            // PLSQLParser.g:1307:11: close_key ^ cursor_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_close_key_in_close_statement13148);
            close_key991=close_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(close_key991.getTree(), root_0);

            pushFollow(FOLLOW_cursor_name_in_close_statement13151);
            cursor_name992=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name992.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "close_statement"


    public static class open_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "open_statement"
    // PLSQLParser.g:1310:1: open_statement : open_key ^ cursor_name ( expression_list )? ;
    public final open_statement_return open_statement() throws RecognitionException {
        open_statement_return retval = new open_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.open_key_return open_key993 =null;

        PLSQLParser_PLSQLCommons.cursor_name_return cursor_name994 =null;

        PLSQLParser_PLSQL_DMLParser.expression_list_return expression_list995 =null;



        try {
            // PLSQLParser.g:1311:5: ( open_key ^ cursor_name ( expression_list )? )
            // PLSQLParser.g:1311:10: open_key ^ cursor_name ( expression_list )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_open_key_in_open_statement13171);
            open_key993=open_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(open_key993.getTree(), root_0);

            pushFollow(FOLLOW_cursor_name_in_open_statement13174);
            cursor_name994=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name994.getTree());

            // PLSQLParser.g:1311:32: ( expression_list )?
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==LEFT_PAREN) ) {
                alt269=1;
            }
            switch (alt269) {
                case 1 :
                    // PLSQLParser.g:1311:32: expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_open_statement13176);
                    expression_list995=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list995.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "open_statement"


    public static class fetch_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fetch_statement"
    // PLSQLParser.g:1314:1: fetch_statement : fetch_key cursor_name (it1= into_key variable_name ( COMMA variable_name )* | bulk_key collect_key into_key variable_name ( COMMA variable_name )* ) -> {mode == 1}? ^( fetch_key cursor_name ^( $it1 ( variable_name )+ ) ) -> ^( fetch_key cursor_name ^( bulk_key ( variable_name )+ ) ) ;
    public final fetch_statement_return fetch_statement() throws RecognitionException {
        fetch_statement_return retval = new fetch_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA999=null;
        Token COMMA1005=null;
        PLSQLParser_PLSQLKeys.into_key_return it1 =null;

        PLSQLParser_PLSQLKeys.fetch_key_return fetch_key996 =null;

        PLSQLParser_PLSQLCommons.cursor_name_return cursor_name997 =null;

        PLSQLParser_PLSQLCommons.variable_name_return variable_name998 =null;

        PLSQLParser_PLSQLCommons.variable_name_return variable_name1000 =null;

        PLSQLParser_PLSQLKeys.bulk_key_return bulk_key1001 =null;

        PLSQLParser_PLSQLKeys.collect_key_return collect_key1002 =null;

        PLSQLParser_PLSQLKeys.into_key_return into_key1003 =null;

        PLSQLParser_PLSQLCommons.variable_name_return variable_name1004 =null;

        PLSQLParser_PLSQLCommons.variable_name_return variable_name1006 =null;


        Object COMMA999_tree=null;
        Object COMMA1005_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_fetch_key=new RewriteRuleSubtreeStream(adaptor,"rule fetch_key");
        RewriteRuleSubtreeStream stream_bulk_key=new RewriteRuleSubtreeStream(adaptor,"rule bulk_key");
        RewriteRuleSubtreeStream stream_into_key=new RewriteRuleSubtreeStream(adaptor,"rule into_key");
        RewriteRuleSubtreeStream stream_variable_name=new RewriteRuleSubtreeStream(adaptor,"rule variable_name");
        RewriteRuleSubtreeStream stream_collect_key=new RewriteRuleSubtreeStream(adaptor,"rule collect_key");
        RewriteRuleSubtreeStream stream_cursor_name=new RewriteRuleSubtreeStream(adaptor,"rule cursor_name");
            int mode = 0;    
        try {
            // PLSQLParser.g:1316:5: ( fetch_key cursor_name (it1= into_key variable_name ( COMMA variable_name )* | bulk_key collect_key into_key variable_name ( COMMA variable_name )* ) -> {mode == 1}? ^( fetch_key cursor_name ^( $it1 ( variable_name )+ ) ) -> ^( fetch_key cursor_name ^( bulk_key ( variable_name )+ ) ) )
            // PLSQLParser.g:1316:10: fetch_key cursor_name (it1= into_key variable_name ( COMMA variable_name )* | bulk_key collect_key into_key variable_name ( COMMA variable_name )* )
            {
            pushFollow(FOLLOW_fetch_key_in_fetch_statement13205);
            fetch_key996=fetch_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_fetch_key.add(fetch_key996.getTree());

            pushFollow(FOLLOW_cursor_name_in_fetch_statement13207);
            cursor_name997=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cursor_name.add(cursor_name997.getTree());

            // PLSQLParser.g:1317:5: (it1= into_key variable_name ( COMMA variable_name )* | bulk_key collect_key into_key variable_name ( COMMA variable_name )* )
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==SQL92_RESERVED_INTO) ) {
                alt272=1;
            }
            else if ( (LA272_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("bulk")))) {
                alt272=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;

            }
            switch (alt272) {
                case 1 :
                    // PLSQLParser.g:1317:10: it1= into_key variable_name ( COMMA variable_name )*
                    {
                    pushFollow(FOLLOW_into_key_in_fetch_statement13221);
                    it1=into_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_into_key.add(it1.getTree());

                    pushFollow(FOLLOW_variable_name_in_fetch_statement13223);
                    variable_name998=variable_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_name.add(variable_name998.getTree());

                    // PLSQLParser.g:1317:37: ( COMMA variable_name )*
                    loop270:
                    do {
                        int alt270=2;
                        int LA270_0 = input.LA(1);

                        if ( (LA270_0==COMMA) ) {
                            alt270=1;
                        }


                        switch (alt270) {
                    	case 1 :
                    	    // PLSQLParser.g:1317:38: COMMA variable_name
                    	    {
                    	    COMMA999=(Token)match(input,COMMA,FOLLOW_COMMA_in_fetch_statement13226); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA999);


                    	    pushFollow(FOLLOW_variable_name_in_fetch_statement13228);
                    	    variable_name1000=variable_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variable_name.add(variable_name1000.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop270;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1318:10: bulk_key collect_key into_key variable_name ( COMMA variable_name )*
                    {
                    pushFollow(FOLLOW_bulk_key_in_fetch_statement13244);
                    bulk_key1001=bulk_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bulk_key.add(bulk_key1001.getTree());

                    pushFollow(FOLLOW_collect_key_in_fetch_statement13246);
                    collect_key1002=collect_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_collect_key.add(collect_key1002.getTree());

                    pushFollow(FOLLOW_into_key_in_fetch_statement13248);
                    into_key1003=into_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_into_key.add(into_key1003.getTree());

                    pushFollow(FOLLOW_variable_name_in_fetch_statement13250);
                    variable_name1004=variable_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable_name.add(variable_name1004.getTree());

                    // PLSQLParser.g:1318:54: ( COMMA variable_name )*
                    loop271:
                    do {
                        int alt271=2;
                        int LA271_0 = input.LA(1);

                        if ( (LA271_0==COMMA) ) {
                            alt271=1;
                        }


                        switch (alt271) {
                    	case 1 :
                    	    // PLSQLParser.g:1318:55: COMMA variable_name
                    	    {
                    	    COMMA1005=(Token)match(input,COMMA,FOLLOW_COMMA_in_fetch_statement13253); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA1005);


                    	    pushFollow(FOLLOW_variable_name_in_fetch_statement13255);
                    	    variable_name1006=variable_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variable_name.add(variable_name1006.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop271;
                        }
                    } while (true);


                    }
                    break;

            }


            // AST REWRITE
            // elements: variable_name, fetch_key, variable_name, cursor_name, it1, fetch_key, bulk_key, cursor_name
            // token labels: 
            // rule labels: retval, it1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_it1=new RewriteRuleSubtreeStream(adaptor,"rule it1",it1!=null?it1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1320:9: -> {mode == 1}? ^( fetch_key cursor_name ^( $it1 ( variable_name )+ ) )
            if (mode == 1) {
                // PLSQLParser.g:1320:24: ^( fetch_key cursor_name ^( $it1 ( variable_name )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_fetch_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_cursor_name.nextTree());

                // PLSQLParser.g:1320:48: ^( $it1 ( variable_name )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_it1.nextNode(), root_2);

                if ( !(stream_variable_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variable_name.hasNext() ) {
                    adaptor.addChild(root_2, stream_variable_name.nextTree());

                }
                stream_variable_name.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1321:9: -> ^( fetch_key cursor_name ^( bulk_key ( variable_name )+ ) )
            {
                // PLSQLParser.g:1321:12: ^( fetch_key cursor_name ^( bulk_key ( variable_name )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_fetch_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_cursor_name.nextTree());

                // PLSQLParser.g:1321:36: ^( bulk_key ( variable_name )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_bulk_key.nextNode(), root_2);

                if ( !(stream_variable_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variable_name.hasNext() ) {
                    adaptor.addChild(root_2, stream_variable_name.nextTree());

                }
                stream_variable_name.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fetch_statement"


    public static class open_for_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "open_for_statement"
    // PLSQLParser.g:1324:1: open_for_statement : open_key variable_name for_key ( ( select_key | with_key )=> select_statement | expression ) ( using_clause )? -> {mode == 1}? ^( open_key variable_name select_statement ( using_clause )? ) -> ^( open_key variable_name ^( EXPR expression ) ( using_clause )? ) ;
    public final open_for_statement_return open_for_statement() throws RecognitionException {
        open_for_statement_return retval = new open_for_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.open_key_return open_key1007 =null;

        PLSQLParser_PLSQLCommons.variable_name_return variable_name1008 =null;

        PLSQLParser_PLSQLKeys.for_key_return for_key1009 =null;

        PLSQLParser_PLSQL_DMLParser.select_statement_return select_statement1010 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression1011 =null;

        PLSQLParser_PLSQL_DMLParser.using_clause_return using_clause1012 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_variable_name=new RewriteRuleSubtreeStream(adaptor,"rule variable_name");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        RewriteRuleSubtreeStream stream_using_clause=new RewriteRuleSubtreeStream(adaptor,"rule using_clause");
        RewriteRuleSubtreeStream stream_open_key=new RewriteRuleSubtreeStream(adaptor,"rule open_key");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:1326:5: ( open_key variable_name for_key ( ( select_key | with_key )=> select_statement | expression ) ( using_clause )? -> {mode == 1}? ^( open_key variable_name select_statement ( using_clause )? ) -> ^( open_key variable_name ^( EXPR expression ) ( using_clause )? ) )
            // PLSQLParser.g:1326:10: open_key variable_name for_key ( ( select_key | with_key )=> select_statement | expression ) ( using_clause )?
            {
            pushFollow(FOLLOW_open_key_in_open_for_statement13340);
            open_key1007=open_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_open_key.add(open_key1007.getTree());

            pushFollow(FOLLOW_variable_name_in_open_for_statement13342);
            variable_name1008=variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_name.add(variable_name1008.getTree());

            pushFollow(FOLLOW_for_key_in_open_for_statement13344);
            for_key1009=for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key1009.getTree());

            // PLSQLParser.g:1327:5: ( ( select_key | with_key )=> select_statement | expression )
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==SQL92_RESERVED_WITH) && (synpred65_PLSQLParser())) {
                alt273=1;
            }
            else if ( (LA273_0==SQL92_RESERVED_SELECT) && (synpred65_PLSQLParser())) {
                alt273=1;
            }
            else if ( (LA273_0==LEFT_PAREN) ) {
                int LA273_3 = input.LA(2);

                if ( (synpred65_PLSQLParser()) ) {
                    alt273=1;
                }
                else if ( (true) ) {
                    alt273=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 273, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA273_0==APPROXIMATE_NUM_LIT||LA273_0==BINDVAR||(LA273_0 >= CHAR_STRING && LA273_0 <= COLON)||LA273_0==DELIMITED_ID||LA273_0==EXACT_NUM_LIT||LA273_0==INTRODUCER||(LA273_0 >= MINUS_SIGN && LA273_0 <= NATIONAL_CHAR_STRING_LIT)||LA273_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA273_0==PLUS_SIGN||LA273_0==REGULAR_ID||LA273_0==SQL92_RESERVED_ALL||LA273_0==SQL92_RESERVED_ANY||LA273_0==SQL92_RESERVED_CASE||(LA273_0 >= SQL92_RESERVED_CURSOR && LA273_0 <= SQL92_RESERVED_DATE)||LA273_0==SQL92_RESERVED_DEFAULT||LA273_0==SQL92_RESERVED_DISTINCT||(LA273_0 >= SQL92_RESERVED_EXISTS && LA273_0 <= SQL92_RESERVED_FALSE)||(LA273_0 >= SQL92_RESERVED_NOT && LA273_0 <= SQL92_RESERVED_NULL)||LA273_0==SQL92_RESERVED_PRIOR||LA273_0==SQL92_RESERVED_TRUE||LA273_0==UNSIGNED_INTEGER) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;

            }
            switch (alt273) {
                case 1 :
                    // PLSQLParser.g:1327:10: ( select_key | with_key )=> select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_open_for_statement13362);
                    select_statement1010=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_statement.add(select_statement1010.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1328:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_open_for_statement13375);
                    expression1011=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression1011.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:1330:9: ( using_clause )?
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==PLSQL_NON_RESERVED_USING) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    // PLSQLParser.g:1330:9: using_clause
                    {
                    pushFollow(FOLLOW_using_clause_in_open_for_statement13391);
                    using_clause1012=using_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_using_clause.add(using_clause1012.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: using_clause, open_key, open_key, expression, using_clause, variable_name, select_statement, variable_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1331:9: -> {mode == 1}? ^( open_key variable_name select_statement ( using_clause )? )
            if (mode == 1) {
                // PLSQLParser.g:1331:24: ^( open_key variable_name select_statement ( using_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_open_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_variable_name.nextTree());

                adaptor.addChild(root_1, stream_select_statement.nextTree());

                // PLSQLParser.g:1331:66: ( using_clause )?
                if ( stream_using_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_using_clause.nextTree());

                }
                stream_using_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1332:9: -> ^( open_key variable_name ^( EXPR expression ) ( using_clause )? )
            {
                // PLSQLParser.g:1332:12: ^( open_key variable_name ^( EXPR expression ) ( using_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_open_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_variable_name.nextTree());

                // PLSQLParser.g:1332:37: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:1332:56: ( using_clause )?
                if ( stream_using_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_using_clause.nextTree());

                }
                stream_using_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "open_for_statement"


    public static class transaction_control_statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "transaction_control_statements"
    // PLSQLParser.g:1339:1: transaction_control_statements : ( set_transaction_command | set_constraint_command | commit_statement | rollback_statement | savepoint_statement );
    public final transaction_control_statements_return transaction_control_statements() throws RecognitionException {
        transaction_control_statements_return retval = new transaction_control_statements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        set_transaction_command_return set_transaction_command1013 =null;

        set_constraint_command_return set_constraint_command1014 =null;

        commit_statement_return commit_statement1015 =null;

        rollback_statement_return rollback_statement1016 =null;

        savepoint_statement_return savepoint_statement1017 =null;



        try {
            // PLSQLParser.g:1340:5: ( set_transaction_command | set_constraint_command | commit_statement | rollback_statement | savepoint_statement )
            int alt275=5;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("savepoint"))||(input.LT(1).getText().equalsIgnoreCase("rollback"))||(input.LT(1).getText().equalsIgnoreCase("set"))||(input.LT(1).getText().equalsIgnoreCase("commit"))))) {
                int LA275_1 = input.LA(2);

                if ( (LA275_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("savepoint"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
                    int LA275_2 = input.LA(3);

                    if ( (LA275_2==DELIMITED_ID||LA275_2==INTRODUCER||LA275_2==REGULAR_ID||LA275_2==SQL92_RESERVED_ALL) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {
                        alt275=2;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("set"))) ) {
                        alt275=1;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {
                        alt275=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 275, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA275_1==DELIMITED_ID||LA275_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {
                    alt275=5;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("commit"))) ) {
                    alt275=3;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("rollback"))) ) {
                    alt275=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 275, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);

                throw nvae;

            }
            switch (alt275) {
                case 1 :
                    // PLSQLParser.g:1340:10: set_transaction_command
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_set_transaction_command_in_transaction_control_statements13463);
                    set_transaction_command1013=set_transaction_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_transaction_command1013.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1341:10: set_constraint_command
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_set_constraint_command_in_transaction_control_statements13474);
                    set_constraint_command1014=set_constraint_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_constraint_command1014.getTree());

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:1342:10: commit_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_commit_statement_in_transaction_control_statements13485);
                    commit_statement1015=commit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commit_statement1015.getTree());

                    }
                    break;
                case 4 :
                    // PLSQLParser.g:1343:10: rollback_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rollback_statement_in_transaction_control_statements13496);
                    rollback_statement1016=rollback_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollback_statement1016.getTree());

                    }
                    break;
                case 5 :
                    // PLSQLParser.g:1344:10: savepoint_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_savepoint_statement_in_transaction_control_statements13507);
                    savepoint_statement1017=savepoint_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_statement1017.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "transaction_control_statements"


    public static class set_transaction_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "set_transaction_command"
    // PLSQLParser.g:1347:1: set_transaction_command : set_key transaction_key ( read_key ( only_key | write_key ) | isolation_key level_key ( serializable_key | read_key committed_key ) | use_key rollback_key segment_key rollback_segment_name )? ( name_key quoted_string )? -> {mode == 1}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( read_key ( only_key )? ( write_key )? ) ) -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( isolation_key ( serializable_key )? ( committed_key )? ) ) -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( rollback_key rollback_segment_name ) ) -> ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ) ;
    public final set_transaction_command_return set_transaction_command() throws RecognitionException {
        set_transaction_command_return retval = new set_transaction_command_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.set_key_return set_key1018 =null;

        PLSQLParser_PLSQLKeys.transaction_key_return transaction_key1019 =null;

        PLSQLParser_PLSQLKeys.read_key_return read_key1020 =null;

        PLSQLParser_PLSQLKeys.only_key_return only_key1021 =null;

        PLSQLParser_PLSQLKeys.write_key_return write_key1022 =null;

        PLSQLParser_PLSQLKeys.isolation_key_return isolation_key1023 =null;

        PLSQLParser_PLSQLKeys.level_key_return level_key1024 =null;

        PLSQLParser_PLSQLKeys.serializable_key_return serializable_key1025 =null;

        PLSQLParser_PLSQLKeys.read_key_return read_key1026 =null;

        PLSQLParser_PLSQLKeys.committed_key_return committed_key1027 =null;

        PLSQLParser_PLSQLKeys.use_key_return use_key1028 =null;

        PLSQLParser_PLSQLKeys.rollback_key_return rollback_key1029 =null;

        PLSQLParser_PLSQLKeys.segment_key_return segment_key1030 =null;

        PLSQLParser_PLSQLCommons.rollback_segment_name_return rollback_segment_name1031 =null;

        PLSQLParser_PLSQLKeys.name_key_return name_key1032 =null;

        PLSQLParser_PLSQLCommons.quoted_string_return quoted_string1033 =null;


        RewriteRuleSubtreeStream stream_committed_key=new RewriteRuleSubtreeStream(adaptor,"rule committed_key");
        RewriteRuleSubtreeStream stream_rollback_key=new RewriteRuleSubtreeStream(adaptor,"rule rollback_key");
        RewriteRuleSubtreeStream stream_name_key=new RewriteRuleSubtreeStream(adaptor,"rule name_key");
        RewriteRuleSubtreeStream stream_rollback_segment_name=new RewriteRuleSubtreeStream(adaptor,"rule rollback_segment_name");
        RewriteRuleSubtreeStream stream_isolation_key=new RewriteRuleSubtreeStream(adaptor,"rule isolation_key");
        RewriteRuleSubtreeStream stream_transaction_key=new RewriteRuleSubtreeStream(adaptor,"rule transaction_key");
        RewriteRuleSubtreeStream stream_segment_key=new RewriteRuleSubtreeStream(adaptor,"rule segment_key");
        RewriteRuleSubtreeStream stream_read_key=new RewriteRuleSubtreeStream(adaptor,"rule read_key");
        RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
        RewriteRuleSubtreeStream stream_write_key=new RewriteRuleSubtreeStream(adaptor,"rule write_key");
        RewriteRuleSubtreeStream stream_level_key=new RewriteRuleSubtreeStream(adaptor,"rule level_key");
        RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
        RewriteRuleSubtreeStream stream_serializable_key=new RewriteRuleSubtreeStream(adaptor,"rule serializable_key");
        RewriteRuleSubtreeStream stream_use_key=new RewriteRuleSubtreeStream(adaptor,"rule use_key");
        RewriteRuleSubtreeStream stream_only_key=new RewriteRuleSubtreeStream(adaptor,"rule only_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:1349:5: ( set_key transaction_key ( read_key ( only_key | write_key ) | isolation_key level_key ( serializable_key | read_key committed_key ) | use_key rollback_key segment_key rollback_segment_name )? ( name_key quoted_string )? -> {mode == 1}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( read_key ( only_key )? ( write_key )? ) ) -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( isolation_key ( serializable_key )? ( committed_key )? ) ) -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( rollback_key rollback_segment_name ) ) -> ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ) )
            // PLSQLParser.g:1349:10: set_key transaction_key ( read_key ( only_key | write_key ) | isolation_key level_key ( serializable_key | read_key committed_key ) | use_key rollback_key segment_key rollback_segment_name )? ( name_key quoted_string )?
            {
            pushFollow(FOLLOW_set_key_in_set_transaction_command13535);
            set_key1018=set_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_set_key.add(set_key1018.getTree());

            pushFollow(FOLLOW_transaction_key_in_set_transaction_command13537);
            transaction_key1019=transaction_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_transaction_key.add(transaction_key1019.getTree());

            // PLSQLParser.g:1350:5: ( read_key ( only_key | write_key ) | isolation_key level_key ( serializable_key | read_key committed_key ) | use_key rollback_key segment_key rollback_segment_name )?
            int alt278=4;
            int LA278_0 = input.LA(1);

            if ( (LA278_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("read"))||(input.LT(1).getText().equalsIgnoreCase("name"))||(input.LT(1).getText().equalsIgnoreCase("isolation"))||(input.LT(1).getText().equalsIgnoreCase("use"))))) {
                int LA278_1 = input.LA(2);

                if ( (LA278_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("read"))||(input.LT(1).getText().equalsIgnoreCase("isolation"))||(input.LT(1).getText().equalsIgnoreCase("use"))))) {
                    int LA278_3 = input.LA(3);

                    if ( (LA278_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("isolation"))||(input.LT(1).getText().equalsIgnoreCase("use"))))) {
                        int LA278_5 = input.LA(4);

                        if ( (LA278_5==EOF||LA278_5==SEMICOLON) && ((input.LT(1).getText().equalsIgnoreCase("isolation")))) {
                            alt278=2;
                        }
                        else if ( (LA278_5==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("isolation"))||(input.LT(1).getText().equalsIgnoreCase("use"))))) {
                            int LA278_8 = input.LA(5);

                            if ( ((input.LT(1).getText().equalsIgnoreCase("isolation"))) ) {
                                alt278=2;
                            }
                            else if ( ((input.LT(1).getText().equalsIgnoreCase("use"))) ) {
                                alt278=3;
                            }
                        }
                        else if ( (LA278_5==DELIMITED_ID||LA278_5==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("use")))) {
                            alt278=3;
                        }
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("read"))) ) {
                        alt278=1;
                    }
                }
            }
            switch (alt278) {
                case 1 :
                    // PLSQLParser.g:1350:10: read_key ( only_key | write_key )
                    {
                    pushFollow(FOLLOW_read_key_in_set_transaction_command13549);
                    read_key1020=read_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_read_key.add(read_key1020.getTree());

                    // PLSQLParser.g:1350:19: ( only_key | write_key )
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==REGULAR_ID) ) {
                        int LA276_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("only"))) ) {
                            alt276=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("write"))) ) {
                            alt276=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 276, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 276, 0, input);

                        throw nvae;

                    }
                    switch (alt276) {
                        case 1 :
                            // PLSQLParser.g:1350:20: only_key
                            {
                            pushFollow(FOLLOW_only_key_in_set_transaction_command13552);
                            only_key1021=only_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_only_key.add(only_key1021.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:1350:29: write_key
                            {
                            pushFollow(FOLLOW_write_key_in_set_transaction_command13554);
                            write_key1022=write_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_write_key.add(write_key1022.getTree());

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1351:10: isolation_key level_key ( serializable_key | read_key committed_key )
                    {
                    pushFollow(FOLLOW_isolation_key_in_set_transaction_command13569);
                    isolation_key1023=isolation_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_isolation_key.add(isolation_key1023.getTree());

                    pushFollow(FOLLOW_level_key_in_set_transaction_command13571);
                    level_key1024=level_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_level_key.add(level_key1024.getTree());

                    // PLSQLParser.g:1351:34: ( serializable_key | read_key committed_key )
                    int alt277=2;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==REGULAR_ID) ) {
                        int LA277_1 = input.LA(2);

                        if ( (LA277_1==EOF||LA277_1==SEMICOLON) ) {
                            alt277=1;
                        }
                        else if ( (LA277_1==REGULAR_ID) ) {
                            int LA277_3 = input.LA(3);

                            if ( (LA277_3==EOF||LA277_3==SEMICOLON) && ((input.LT(1).getText().equalsIgnoreCase("read")))) {
                                alt277=2;
                            }
                            else if ( ((LA277_3 >= CHAR_STRING && LA277_3 <= CHAR_STRING_PERL)||LA277_3==NATIONAL_CHAR_STRING_LIT) ) {
                                alt277=1;
                            }
                            else if ( (LA277_3==REGULAR_ID) ) {
                                int LA277_5 = input.LA(4);

                                if ( (LA277_5==EOF||LA277_5==SEMICOLON) ) {
                                    alt277=1;
                                }
                                else if ( ((LA277_5 >= CHAR_STRING && LA277_5 <= CHAR_STRING_PERL)||LA277_5==NATIONAL_CHAR_STRING_LIT||LA277_5==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("read")))) {
                                    alt277=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 277, 5, input);

                                    throw nvae;

                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 277, 3, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 277, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 277, 0, input);

                        throw nvae;

                    }
                    switch (alt277) {
                        case 1 :
                            // PLSQLParser.g:1351:35: serializable_key
                            {
                            pushFollow(FOLLOW_serializable_key_in_set_transaction_command13574);
                            serializable_key1025=serializable_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_serializable_key.add(serializable_key1025.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:1351:52: read_key committed_key
                            {
                            pushFollow(FOLLOW_read_key_in_set_transaction_command13576);
                            read_key1026=read_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_read_key.add(read_key1026.getTree());

                            pushFollow(FOLLOW_committed_key_in_set_transaction_command13578);
                            committed_key1027=committed_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_committed_key.add(committed_key1027.getTree());

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {mode = 2;}

                    }
                    break;
                case 3 :
                    // PLSQLParser.g:1352:10: use_key rollback_key segment_key rollback_segment_name
                    {
                    pushFollow(FOLLOW_use_key_in_set_transaction_command13592);
                    use_key1028=use_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_use_key.add(use_key1028.getTree());

                    pushFollow(FOLLOW_rollback_key_in_set_transaction_command13594);
                    rollback_key1029=rollback_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rollback_key.add(rollback_key1029.getTree());

                    pushFollow(FOLLOW_segment_key_in_set_transaction_command13596);
                    segment_key1030=segment_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_segment_key.add(segment_key1030.getTree());

                    pushFollow(FOLLOW_rollback_segment_name_in_set_transaction_command13598);
                    rollback_segment_name1031=rollback_segment_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rollback_segment_name.add(rollback_segment_name1031.getTree());

                    if ( state.backtracking==0 ) {mode = 3;}

                    }
                    break;

            }


            // PLSQLParser.g:1354:9: ( name_key quoted_string )?
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( (LA279_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {
                int LA279_1 = input.LA(2);

                if ( ((LA279_1 >= CHAR_STRING && LA279_1 <= CHAR_STRING_PERL)||LA279_1==NATIONAL_CHAR_STRING_LIT) && ((input.LT(1).getText().equalsIgnoreCase("name")))) {
                    alt279=1;
                }
            }
            switch (alt279) {
                case 1 :
                    // PLSQLParser.g:1354:10: name_key quoted_string
                    {
                    pushFollow(FOLLOW_name_key_in_set_transaction_command13618);
                    name_key1032=name_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name_key.add(name_key1032.getTree());

                    pushFollow(FOLLOW_quoted_string_in_set_transaction_command13620);
                    quoted_string1033=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string1033.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: read_key, rollback_segment_name, isolation_key, quoted_string, serializable_key, write_key, committed_key, rollback_key, quoted_string, quoted_string, quoted_string, only_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1355:9: -> {mode == 1}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( read_key ( only_key )? ( write_key )? ) )
            if (mode == 1) {
                // PLSQLParser.g:1355:24: ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( read_key ( only_key )? ( write_key )? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SET_TRANSACTION, (set_key1018!=null?((Token)set_key1018.start):null))
                , root_1);

                // PLSQLParser.g:1355:58: ( quoted_string )?
                if ( stream_quoted_string.hasNext() ) {
                    adaptor.addChild(root_1, stream_quoted_string.nextTree());

                }
                stream_quoted_string.reset();

                // PLSQLParser.g:1355:73: ^( read_key ( only_key )? ( write_key )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_read_key.nextNode(), root_2);

                // PLSQLParser.g:1355:84: ( only_key )?
                if ( stream_only_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_only_key.nextTree());

                }
                stream_only_key.reset();

                // PLSQLParser.g:1355:94: ( write_key )?
                if ( stream_write_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_write_key.nextTree());

                }
                stream_write_key.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1356:9: -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( isolation_key ( serializable_key )? ( committed_key )? ) )
            if (mode == 2) {
                // PLSQLParser.g:1356:24: ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( isolation_key ( serializable_key )? ( committed_key )? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SET_TRANSACTION, (set_key1018!=null?((Token)set_key1018.start):null))
                , root_1);

                // PLSQLParser.g:1356:58: ( quoted_string )?
                if ( stream_quoted_string.hasNext() ) {
                    adaptor.addChild(root_1, stream_quoted_string.nextTree());

                }
                stream_quoted_string.reset();

                // PLSQLParser.g:1356:73: ^( isolation_key ( serializable_key )? ( committed_key )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_isolation_key.nextNode(), root_2);

                // PLSQLParser.g:1356:89: ( serializable_key )?
                if ( stream_serializable_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_serializable_key.nextTree());

                }
                stream_serializable_key.reset();

                // PLSQLParser.g:1356:107: ( committed_key )?
                if ( stream_committed_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_committed_key.nextTree());

                }
                stream_committed_key.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1357:9: -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( rollback_key rollback_segment_name ) )
            if (mode == 2) {
                // PLSQLParser.g:1357:24: ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( rollback_key rollback_segment_name ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SET_TRANSACTION, (set_key1018!=null?((Token)set_key1018.start):null))
                , root_1);

                // PLSQLParser.g:1357:58: ( quoted_string )?
                if ( stream_quoted_string.hasNext() ) {
                    adaptor.addChild(root_1, stream_quoted_string.nextTree());

                }
                stream_quoted_string.reset();

                // PLSQLParser.g:1357:73: ^( rollback_key rollback_segment_name )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_rollback_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_rollback_segment_name.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1358:9: -> ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? )
            {
                // PLSQLParser.g:1358:12: ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SET_TRANSACTION, (set_key1018!=null?((Token)set_key1018.start):null))
                , root_1);

                // PLSQLParser.g:1358:46: ( quoted_string )?
                if ( stream_quoted_string.hasNext() ) {
                    adaptor.addChild(root_1, stream_quoted_string.nextTree());

                }
                stream_quoted_string.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "set_transaction_command"


    public static class set_constraint_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "set_constraint_command"
    // PLSQLParser.g:1361:1: set_constraint_command : set_key ( constraint_key | constraints_key ) ( all_key | constraint_name ( COMMA constraint_name )* ) ( immediate_key | deferred_key ) -> ^( SET_CONSTRAINT[$set_key.start] ( all_key )? ( constraint_name )* ( immediate_key )? ( deferred_key )? ) ;
    public final set_constraint_command_return set_constraint_command() throws RecognitionException {
        set_constraint_command_return retval = new set_constraint_command_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA1039=null;
        PLSQLParser_PLSQLKeys.set_key_return set_key1034 =null;

        PLSQLParser_PLSQLKeys.constraint_key_return constraint_key1035 =null;

        PLSQLParser_PLSQLKeys.constraints_key_return constraints_key1036 =null;

        PLSQLParser_PLSQLKeys.all_key_return all_key1037 =null;

        PLSQLParser_PLSQLCommons.constraint_name_return constraint_name1038 =null;

        PLSQLParser_PLSQLCommons.constraint_name_return constraint_name1040 =null;

        PLSQLParser_PLSQLKeys.immediate_key_return immediate_key1041 =null;

        PLSQLParser_PLSQLKeys.deferred_key_return deferred_key1042 =null;


        Object COMMA1039_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_constraint_key=new RewriteRuleSubtreeStream(adaptor,"rule constraint_key");
        RewriteRuleSubtreeStream stream_constraints_key=new RewriteRuleSubtreeStream(adaptor,"rule constraints_key");
        RewriteRuleSubtreeStream stream_constraint_name=new RewriteRuleSubtreeStream(adaptor,"rule constraint_name");
        RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
        RewriteRuleSubtreeStream stream_immediate_key=new RewriteRuleSubtreeStream(adaptor,"rule immediate_key");
        RewriteRuleSubtreeStream stream_deferred_key=new RewriteRuleSubtreeStream(adaptor,"rule deferred_key");
        try {
            // PLSQLParser.g:1362:5: ( set_key ( constraint_key | constraints_key ) ( all_key | constraint_name ( COMMA constraint_name )* ) ( immediate_key | deferred_key ) -> ^( SET_CONSTRAINT[$set_key.start] ( all_key )? ( constraint_name )* ( immediate_key )? ( deferred_key )? ) )
            // PLSQLParser.g:1362:10: set_key ( constraint_key | constraints_key ) ( all_key | constraint_name ( COMMA constraint_name )* ) ( immediate_key | deferred_key )
            {
            pushFollow(FOLLOW_set_key_in_set_constraint_command13743);
            set_key1034=set_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_set_key.add(set_key1034.getTree());

            // PLSQLParser.g:1362:18: ( constraint_key | constraints_key )
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constraint"))||(input.LT(1).getText().equalsIgnoreCase("constraints"))))) {
                int LA280_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("constraint"))) ) {
                    alt280=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("constraints"))) ) {
                    alt280=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 280, 0, input);

                throw nvae;

            }
            switch (alt280) {
                case 1 :
                    // PLSQLParser.g:1362:20: constraint_key
                    {
                    pushFollow(FOLLOW_constraint_key_in_set_constraint_command13747);
                    constraint_key1035=constraint_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraint_key.add(constraint_key1035.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1362:37: constraints_key
                    {
                    pushFollow(FOLLOW_constraints_key_in_set_constraint_command13751);
                    constraints_key1036=constraints_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraints_key.add(constraints_key1036.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:1363:9: ( all_key | constraint_name ( COMMA constraint_name )* )
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==SQL92_RESERVED_ALL) ) {
                alt282=1;
            }
            else if ( (LA282_0==DELIMITED_ID||LA282_0==INTRODUCER||LA282_0==REGULAR_ID) ) {
                alt282=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 282, 0, input);

                throw nvae;

            }
            switch (alt282) {
                case 1 :
                    // PLSQLParser.g:1363:11: all_key
                    {
                    pushFollow(FOLLOW_all_key_in_set_constraint_command13765);
                    all_key1037=all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_all_key.add(all_key1037.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1363:21: constraint_name ( COMMA constraint_name )*
                    {
                    pushFollow(FOLLOW_constraint_name_in_set_constraint_command13769);
                    constraint_name1038=constraint_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constraint_name.add(constraint_name1038.getTree());

                    // PLSQLParser.g:1363:37: ( COMMA constraint_name )*
                    loop281:
                    do {
                        int alt281=2;
                        int LA281_0 = input.LA(1);

                        if ( (LA281_0==COMMA) ) {
                            alt281=1;
                        }


                        switch (alt281) {
                    	case 1 :
                    	    // PLSQLParser.g:1363:38: COMMA constraint_name
                    	    {
                    	    COMMA1039=(Token)match(input,COMMA,FOLLOW_COMMA_in_set_constraint_command13772); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA1039);


                    	    pushFollow(FOLLOW_constraint_name_in_set_constraint_command13774);
                    	    constraint_name1040=constraint_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_constraint_name.add(constraint_name1040.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop281;
                        }
                    } while (true);


                    }
                    break;

            }


            // PLSQLParser.g:1364:9: ( immediate_key | deferred_key )
            int alt283=2;
            int LA283_0 = input.LA(1);

            if ( (LA283_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("deferred"))||(input.LT(1).getText().equalsIgnoreCase("immediate"))))) {
                int LA283_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("immediate"))) ) {
                    alt283=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("deferred"))) ) {
                    alt283=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 283, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);

                throw nvae;

            }
            switch (alt283) {
                case 1 :
                    // PLSQLParser.g:1364:10: immediate_key
                    {
                    pushFollow(FOLLOW_immediate_key_in_set_constraint_command13789);
                    immediate_key1041=immediate_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_immediate_key.add(immediate_key1041.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1364:24: deferred_key
                    {
                    pushFollow(FOLLOW_deferred_key_in_set_constraint_command13791);
                    deferred_key1042=deferred_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_deferred_key.add(deferred_key1042.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: deferred_key, all_key, immediate_key, constraint_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1365:9: -> ^( SET_CONSTRAINT[$set_key.start] ( all_key )? ( constraint_name )* ( immediate_key )? ( deferred_key )? )
            {
                // PLSQLParser.g:1365:12: ^( SET_CONSTRAINT[$set_key.start] ( all_key )? ( constraint_name )* ( immediate_key )? ( deferred_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SET_CONSTRAINT, (set_key1034!=null?((Token)set_key1034.start):null))
                , root_1);

                // PLSQLParser.g:1365:45: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_all_key.nextTree());

                }
                stream_all_key.reset();

                // PLSQLParser.g:1365:54: ( constraint_name )*
                while ( stream_constraint_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraint_name.nextTree());

                }
                stream_constraint_name.reset();

                // PLSQLParser.g:1365:71: ( immediate_key )?
                if ( stream_immediate_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_immediate_key.nextTree());

                }
                stream_immediate_key.reset();

                // PLSQLParser.g:1365:86: ( deferred_key )?
                if ( stream_deferred_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_deferred_key.nextTree());

                }
                stream_deferred_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "set_constraint_command"


    public static class commit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "commit_statement"
    // PLSQLParser.g:1368:1: commit_statement : commit_key ( work_key )? ( comment_key expression | force_key ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? ) )? ( write_clause )? -> {mode == 1}? ^( commit_key ( work_key )? ^( comment_key ^( EXPR expression ) ) ( write_clause )? ) -> {mode == 2}? ^( commit_key ( work_key )? ^( force_key ( corrupt_xid_key )? ( corrupt_xid_all_key )? ( ^( EXPR expression ) )+ ) ( write_clause )? ) -> ^( commit_key ( work_key )? ( write_clause )? ) ;
    public final commit_statement_return commit_statement() throws RecognitionException {
        commit_statement_return retval = new commit_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA1052=null;
        PLSQLParser_PLSQLKeys.commit_key_return commit_key1043 =null;

        PLSQLParser_PLSQLKeys.work_key_return work_key1044 =null;

        PLSQLParser_PLSQLKeys.comment_key_return comment_key1045 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression1046 =null;

        PLSQLParser_PLSQLKeys.force_key_return force_key1047 =null;

        PLSQLParser_PLSQLKeys.corrupt_xid_key_return corrupt_xid_key1048 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression1049 =null;

        PLSQLParser_PLSQLKeys.corrupt_xid_all_key_return corrupt_xid_all_key1050 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression1051 =null;

        PLSQLParser_PLSQL_DMLParser.expression_return expression1053 =null;

        write_clause_return write_clause1054 =null;


        Object COMMA1052_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_corrupt_xid_key=new RewriteRuleSubtreeStream(adaptor,"rule corrupt_xid_key");
        RewriteRuleSubtreeStream stream_work_key=new RewriteRuleSubtreeStream(adaptor,"rule work_key");
        RewriteRuleSubtreeStream stream_write_clause=new RewriteRuleSubtreeStream(adaptor,"rule write_clause");
        RewriteRuleSubtreeStream stream_comment_key=new RewriteRuleSubtreeStream(adaptor,"rule comment_key");
        RewriteRuleSubtreeStream stream_force_key=new RewriteRuleSubtreeStream(adaptor,"rule force_key");
        RewriteRuleSubtreeStream stream_commit_key=new RewriteRuleSubtreeStream(adaptor,"rule commit_key");
        RewriteRuleSubtreeStream stream_corrupt_xid_all_key=new RewriteRuleSubtreeStream(adaptor,"rule corrupt_xid_all_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:1370:5: ( commit_key ( work_key )? ( comment_key expression | force_key ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? ) )? ( write_clause )? -> {mode == 1}? ^( commit_key ( work_key )? ^( comment_key ^( EXPR expression ) ) ( write_clause )? ) -> {mode == 2}? ^( commit_key ( work_key )? ^( force_key ( corrupt_xid_key )? ( corrupt_xid_all_key )? ( ^( EXPR expression ) )+ ) ( write_clause )? ) -> ^( commit_key ( work_key )? ( write_clause )? ) )
            // PLSQLParser.g:1370:11: commit_key ( work_key )? ( comment_key expression | force_key ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? ) )? ( write_clause )?
            {
            pushFollow(FOLLOW_commit_key_in_commit_statement13848);
            commit_key1043=commit_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_commit_key.add(commit_key1043.getTree());

            // PLSQLParser.g:1370:22: ( work_key )?
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==REGULAR_ID) ) {
                int LA284_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("work"))) ) {
                    alt284=1;
                }
            }
            switch (alt284) {
                case 1 :
                    // PLSQLParser.g:1370:22: work_key
                    {
                    pushFollow(FOLLOW_work_key_in_commit_statement13850);
                    work_key1044=work_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_work_key.add(work_key1044.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:1371:5: ( comment_key expression | force_key ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? ) )?
            int alt287=3;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("write"))||(input.LT(1).getText().equalsIgnoreCase("comment"))||(input.LT(1).getText().equalsIgnoreCase("force"))))) {
                int LA287_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("comment"))) ) {
                    alt287=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("force"))) ) {
                    alt287=2;
                }
            }
            switch (alt287) {
                case 1 :
                    // PLSQLParser.g:1371:10: comment_key expression
                    {
                    pushFollow(FOLLOW_comment_key_in_commit_statement13862);
                    comment_key1045=comment_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comment_key.add(comment_key1045.getTree());

                    pushFollow(FOLLOW_expression_in_commit_statement13864);
                    expression1046=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression1046.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1372:10: force_key ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? )
                    {
                    pushFollow(FOLLOW_force_key_in_commit_statement13877);
                    force_key1047=force_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_force_key.add(force_key1047.getTree());

                    // PLSQLParser.g:1372:20: ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? )
                    int alt286=3;
                    int LA286_0 = input.LA(1);

                    if ( (LA286_0==REGULAR_ID) ) {
                        int LA286_1 = input.LA(2);

                        if ( (LA286_1==APPROXIMATE_NUM_LIT||LA286_1==BINDVAR||(LA286_1 >= CHAR_STRING && LA286_1 <= COLON)||LA286_1==DELIMITED_ID||LA286_1==EXACT_NUM_LIT||LA286_1==INTRODUCER||LA286_1==LEFT_PAREN||(LA286_1 >= MINUS_SIGN && LA286_1 <= NATIONAL_CHAR_STRING_LIT)||LA286_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA286_1==PLUS_SIGN||LA286_1==REGULAR_ID||LA286_1==SQL92_RESERVED_ALL||LA286_1==SQL92_RESERVED_ANY||LA286_1==SQL92_RESERVED_CASE||(LA286_1 >= SQL92_RESERVED_CURSOR && LA286_1 <= SQL92_RESERVED_DATE)||LA286_1==SQL92_RESERVED_DEFAULT||LA286_1==SQL92_RESERVED_DISTINCT||(LA286_1 >= SQL92_RESERVED_EXISTS && LA286_1 <= SQL92_RESERVED_FALSE)||(LA286_1 >= SQL92_RESERVED_NOT && LA286_1 <= SQL92_RESERVED_NULL)||LA286_1==SQL92_RESERVED_PRIOR||LA286_1==SQL92_RESERVED_TRUE||LA286_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("corrupt_xid")))) {
                            alt286=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("corrupt_xid_all"))) ) {
                            alt286=2;
                        }
                        else if ( (true) ) {
                            alt286=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 286, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA286_0==APPROXIMATE_NUM_LIT||LA286_0==BINDVAR||(LA286_0 >= CHAR_STRING && LA286_0 <= COLON)||LA286_0==DELIMITED_ID||LA286_0==EXACT_NUM_LIT||LA286_0==INTRODUCER||LA286_0==LEFT_PAREN||(LA286_0 >= MINUS_SIGN && LA286_0 <= NATIONAL_CHAR_STRING_LIT)||LA286_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA286_0==PLUS_SIGN||LA286_0==SQL92_RESERVED_ALL||LA286_0==SQL92_RESERVED_ANY||LA286_0==SQL92_RESERVED_CASE||(LA286_0 >= SQL92_RESERVED_CURSOR && LA286_0 <= SQL92_RESERVED_DATE)||LA286_0==SQL92_RESERVED_DEFAULT||LA286_0==SQL92_RESERVED_DISTINCT||(LA286_0 >= SQL92_RESERVED_EXISTS && LA286_0 <= SQL92_RESERVED_FALSE)||(LA286_0 >= SQL92_RESERVED_NOT && LA286_0 <= SQL92_RESERVED_NULL)||LA286_0==SQL92_RESERVED_PRIOR||LA286_0==SQL92_RESERVED_TRUE||LA286_0==UNSIGNED_INTEGER) ) {
                        alt286=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 286, 0, input);

                        throw nvae;

                    }
                    switch (alt286) {
                        case 1 :
                            // PLSQLParser.g:1372:21: corrupt_xid_key expression
                            {
                            pushFollow(FOLLOW_corrupt_xid_key_in_commit_statement13880);
                            corrupt_xid_key1048=corrupt_xid_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_corrupt_xid_key.add(corrupt_xid_key1048.getTree());

                            pushFollow(FOLLOW_expression_in_commit_statement13882);
                            expression1049=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression1049.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQLParser.g:1372:49: corrupt_xid_all_key
                            {
                            pushFollow(FOLLOW_corrupt_xid_all_key_in_commit_statement13885);
                            corrupt_xid_all_key1050=corrupt_xid_all_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_corrupt_xid_all_key.add(corrupt_xid_all_key1050.getTree());

                            }
                            break;
                        case 3 :
                            // PLSQLParser.g:1372:71: expression ( COMMA expression )?
                            {
                            pushFollow(FOLLOW_expression_in_commit_statement13889);
                            expression1051=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression1051.getTree());

                            // PLSQLParser.g:1372:82: ( COMMA expression )?
                            int alt285=2;
                            int LA285_0 = input.LA(1);

                            if ( (LA285_0==COMMA) ) {
                                alt285=1;
                            }
                            switch (alt285) {
                                case 1 :
                                    // PLSQLParser.g:1372:83: COMMA expression
                                    {
                                    COMMA1052=(Token)match(input,COMMA,FOLLOW_COMMA_in_commit_statement13892); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA1052);


                                    pushFollow(FOLLOW_expression_in_commit_statement13894);
                                    expression1053=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression1053.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {mode = 2;}

                    }
                    break;

            }


            // PLSQLParser.g:1374:9: ( write_clause )?
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("write"))))) {
                int LA288_1 = input.LA(2);

                if ( (LA288_1==EOF||LA288_1==PLSQL_RESERVED_NOWAIT||LA288_1==SEMICOLON) && ((input.LT(1).getText().equalsIgnoreCase("write")))) {
                    alt288=1;
                }
                else if ( (LA288_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("write"))))) {
                    int LA288_4 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("write"))) ) {
                        alt288=1;
                    }
                }
            }
            switch (alt288) {
                case 1 :
                    // PLSQLParser.g:1374:9: write_clause
                    {
                    pushFollow(FOLLOW_write_clause_in_commit_statement13917);
                    write_clause1054=write_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_write_clause.add(write_clause1054.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: write_clause, expression, commit_key, write_clause, commit_key, corrupt_xid_all_key, comment_key, expression, work_key, corrupt_xid_key, force_key, work_key, work_key, write_clause, commit_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1375:9: -> {mode == 1}? ^( commit_key ( work_key )? ^( comment_key ^( EXPR expression ) ) ( write_clause )? )
            if (mode == 1) {
                // PLSQLParser.g:1375:25: ^( commit_key ( work_key )? ^( comment_key ^( EXPR expression ) ) ( write_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_commit_key.nextNode(), root_1);

                // PLSQLParser.g:1375:38: ( work_key )?
                if ( stream_work_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_work_key.nextTree());

                }
                stream_work_key.reset();

                // PLSQLParser.g:1375:48: ^( comment_key ^( EXPR expression ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_comment_key.nextNode(), root_2);

                // PLSQLParser.g:1375:62: ^( EXPR expression )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_expression.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:1375:82: ( write_clause )?
                if ( stream_write_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_write_clause.nextTree());

                }
                stream_write_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1376:9: -> {mode == 2}? ^( commit_key ( work_key )? ^( force_key ( corrupt_xid_key )? ( corrupt_xid_all_key )? ( ^( EXPR expression ) )+ ) ( write_clause )? )
            if (mode == 2) {
                // PLSQLParser.g:1376:25: ^( commit_key ( work_key )? ^( force_key ( corrupt_xid_key )? ( corrupt_xid_all_key )? ( ^( EXPR expression ) )+ ) ( write_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_commit_key.nextNode(), root_1);

                // PLSQLParser.g:1376:38: ( work_key )?
                if ( stream_work_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_work_key.nextTree());

                }
                stream_work_key.reset();

                // PLSQLParser.g:1376:48: ^( force_key ( corrupt_xid_key )? ( corrupt_xid_all_key )? ( ^( EXPR expression ) )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_force_key.nextNode(), root_2);

                // PLSQLParser.g:1376:60: ( corrupt_xid_key )?
                if ( stream_corrupt_xid_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_corrupt_xid_key.nextTree());

                }
                stream_corrupt_xid_key.reset();

                // PLSQLParser.g:1376:77: ( corrupt_xid_all_key )?
                if ( stream_corrupt_xid_all_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_corrupt_xid_all_key.nextTree());

                }
                stream_corrupt_xid_all_key.reset();

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    // PLSQLParser.g:1376:98: ^( EXPR expression )
                    {
                    Object root_3 = (Object)adaptor.nil();
                    root_3 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(EXPR, "EXPR")
                    , root_3);

                    adaptor.addChild(root_3, stream_expression.nextTree());

                    adaptor.addChild(root_2, root_3);
                    }

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQLParser.g:1376:119: ( write_clause )?
                if ( stream_write_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_write_clause.nextTree());

                }
                stream_write_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1377:9: -> ^( commit_key ( work_key )? ( write_clause )? )
            {
                // PLSQLParser.g:1377:12: ^( commit_key ( work_key )? ( write_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_commit_key.nextNode(), root_1);

                // PLSQLParser.g:1377:25: ( work_key )?
                if ( stream_work_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_work_key.nextTree());

                }
                stream_work_key.reset();

                // PLSQLParser.g:1377:35: ( write_clause )?
                if ( stream_write_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_write_clause.nextTree());

                }
                stream_write_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "commit_statement"


    public static class write_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "write_clause"
    // PLSQLParser.g:1380:1: write_clause : write_key ^ ( wait_key | nowait_key )? ( immediate_key | batch_key )? ;
    public final write_clause_return write_clause() throws RecognitionException {
        write_clause_return retval = new write_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.write_key_return write_key1055 =null;

        PLSQLParser_PLSQLKeys.wait_key_return wait_key1056 =null;

        PLSQLParser_PLSQLKeys.nowait_key_return nowait_key1057 =null;

        PLSQLParser_PLSQLKeys.immediate_key_return immediate_key1058 =null;

        PLSQLParser_PLSQLKeys.batch_key_return batch_key1059 =null;



        try {
            // PLSQLParser.g:1381:5: ( write_key ^ ( wait_key | nowait_key )? ( immediate_key | batch_key )? )
            // PLSQLParser.g:1381:10: write_key ^ ( wait_key | nowait_key )? ( immediate_key | batch_key )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_write_key_in_write_clause14029);
            write_key1055=write_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(write_key1055.getTree(), root_0);

            // PLSQLParser.g:1381:21: ( wait_key | nowait_key )?
            int alt289=3;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("batch"))||(input.LT(1).getText().equalsIgnoreCase("wait"))||(input.LT(1).getText().equalsIgnoreCase("immediate"))))) {
                int LA289_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("wait"))) ) {
                    alt289=1;
                }
            }
            else if ( (LA289_0==PLSQL_RESERVED_NOWAIT) ) {
                alt289=2;
            }
            switch (alt289) {
                case 1 :
                    // PLSQLParser.g:1381:22: wait_key
                    {
                    pushFollow(FOLLOW_wait_key_in_write_clause14033);
                    wait_key1056=wait_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wait_key1056.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1381:31: nowait_key
                    {
                    pushFollow(FOLLOW_nowait_key_in_write_clause14035);
                    nowait_key1057=nowait_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nowait_key1057.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:1381:44: ( immediate_key | batch_key )?
            int alt290=3;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("batch"))||(input.LT(1).getText().equalsIgnoreCase("immediate"))))) {
                int LA290_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("immediate"))) ) {
                    alt290=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("batch"))) ) {
                    alt290=2;
                }
            }
            switch (alt290) {
                case 1 :
                    // PLSQLParser.g:1381:45: immediate_key
                    {
                    pushFollow(FOLLOW_immediate_key_in_write_clause14040);
                    immediate_key1058=immediate_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, immediate_key1058.getTree());

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1381:59: batch_key
                    {
                    pushFollow(FOLLOW_batch_key_in_write_clause14042);
                    batch_key1059=batch_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, batch_key1059.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "write_clause"


    public static class rollback_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rollback_statement"
    // PLSQLParser.g:1384:1: rollback_statement : rollback_key ( work_key )? ( to_key ( savepoint_key )? savepoint_name | force_key quoted_string )? -> {mode == 1}? ^( rollback_key ( work_key )? ^( to_key savepoint_name ) ) -> {mode == 2}? ^( rollback_key ( work_key )? ^( force_key quoted_string ) ) -> ^( rollback_key ( work_key )? ) ;
    public final rollback_statement_return rollback_statement() throws RecognitionException {
        rollback_statement_return retval = new rollback_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.rollback_key_return rollback_key1060 =null;

        PLSQLParser_PLSQLKeys.work_key_return work_key1061 =null;

        PLSQLParser_PLSQLKeys.to_key_return to_key1062 =null;

        PLSQLParser_PLSQLKeys.savepoint_key_return savepoint_key1063 =null;

        PLSQLParser_PLSQLCommons.savepoint_name_return savepoint_name1064 =null;

        PLSQLParser_PLSQLKeys.force_key_return force_key1065 =null;

        PLSQLParser_PLSQLCommons.quoted_string_return quoted_string1066 =null;


        RewriteRuleSubtreeStream stream_rollback_key=new RewriteRuleSubtreeStream(adaptor,"rule rollback_key");
        RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
        RewriteRuleSubtreeStream stream_savepoint_name=new RewriteRuleSubtreeStream(adaptor,"rule savepoint_name");
        RewriteRuleSubtreeStream stream_to_key=new RewriteRuleSubtreeStream(adaptor,"rule to_key");
        RewriteRuleSubtreeStream stream_work_key=new RewriteRuleSubtreeStream(adaptor,"rule work_key");
        RewriteRuleSubtreeStream stream_force_key=new RewriteRuleSubtreeStream(adaptor,"rule force_key");
        RewriteRuleSubtreeStream stream_savepoint_key=new RewriteRuleSubtreeStream(adaptor,"rule savepoint_key");
            int mode = 0;    
        try {
            // PLSQLParser.g:1386:5: ( rollback_key ( work_key )? ( to_key ( savepoint_key )? savepoint_name | force_key quoted_string )? -> {mode == 1}? ^( rollback_key ( work_key )? ^( to_key savepoint_name ) ) -> {mode == 2}? ^( rollback_key ( work_key )? ^( force_key quoted_string ) ) -> ^( rollback_key ( work_key )? ) )
            // PLSQLParser.g:1386:11: rollback_key ( work_key )? ( to_key ( savepoint_key )? savepoint_name | force_key quoted_string )?
            {
            pushFollow(FOLLOW_rollback_key_in_rollback_statement14073);
            rollback_key1060=rollback_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rollback_key.add(rollback_key1060.getTree());

            // PLSQLParser.g:1386:24: ( work_key )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==REGULAR_ID) ) {
                int LA291_1 = input.LA(2);

                if ( (LA291_1==EOF||LA291_1==SEMICOLON||LA291_1==SQL92_RESERVED_TO) ) {
                    alt291=1;
                }
                else if ( (LA291_1==REGULAR_ID) ) {
                    int LA291_4 = input.LA(3);

                    if ( ((LA291_4 >= CHAR_STRING && LA291_4 <= CHAR_STRING_PERL)||LA291_4==NATIONAL_CHAR_STRING_LIT||LA291_4==REGULAR_ID) ) {
                        alt291=1;
                    }
                }
            }
            switch (alt291) {
                case 1 :
                    // PLSQLParser.g:1386:24: work_key
                    {
                    pushFollow(FOLLOW_work_key_in_rollback_statement14075);
                    work_key1061=work_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_work_key.add(work_key1061.getTree());

                    }
                    break;

            }


            // PLSQLParser.g:1387:5: ( to_key ( savepoint_key )? savepoint_name | force_key quoted_string )?
            int alt293=3;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==SQL92_RESERVED_TO) ) {
                alt293=1;
            }
            else if ( (LA293_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("force"))))) {
                int LA293_2 = input.LA(2);

                if ( ((LA293_2 >= CHAR_STRING && LA293_2 <= CHAR_STRING_PERL)||LA293_2==NATIONAL_CHAR_STRING_LIT) && ((input.LT(1).getText().equalsIgnoreCase("force")))) {
                    alt293=2;
                }
            }
            switch (alt293) {
                case 1 :
                    // PLSQLParser.g:1387:11: to_key ( savepoint_key )? savepoint_name
                    {
                    pushFollow(FOLLOW_to_key_in_rollback_statement14088);
                    to_key1062=to_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_to_key.add(to_key1062.getTree());

                    // PLSQLParser.g:1387:18: ( savepoint_key )?
                    int alt292=2;
                    int LA292_0 = input.LA(1);

                    if ( (LA292_0==REGULAR_ID) ) {
                        int LA292_1 = input.LA(2);

                        if ( (LA292_1==DELIMITED_ID||LA292_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {
                            alt292=1;
                        }
                        else if ( (LA292_1==REGULAR_ID) ) {
                            int LA292_4 = input.LA(3);

                            if ( (LA292_4==EOF||LA292_4==SEMICOLON) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {
                                alt292=1;
                            }
                            else if ( (LA292_4==REGULAR_ID) ) {
                                int LA292_5 = input.LA(4);

                                if ( (LA292_5==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {
                                    alt292=1;
                                }
                            }
                        }
                    }
                    switch (alt292) {
                        case 1 :
                            // PLSQLParser.g:1387:18: savepoint_key
                            {
                            pushFollow(FOLLOW_savepoint_key_in_rollback_statement14090);
                            savepoint_key1063=savepoint_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_savepoint_key.add(savepoint_key1063.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_savepoint_name_in_rollback_statement14093);
                    savepoint_name1064=savepoint_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_savepoint_name.add(savepoint_name1064.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQLParser.g:1388:10: force_key quoted_string
                    {
                    pushFollow(FOLLOW_force_key_in_rollback_statement14106);
                    force_key1065=force_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_force_key.add(force_key1065.getTree());

                    pushFollow(FOLLOW_quoted_string_in_rollback_statement14108);
                    quoted_string1066=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string1066.getTree());

                    if ( state.backtracking==0 ) {mode = 2;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: work_key, force_key, quoted_string, to_key, work_key, rollback_key, rollback_key, work_key, savepoint_name, rollback_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1390:9: -> {mode == 1}? ^( rollback_key ( work_key )? ^( to_key savepoint_name ) )
            if (mode == 1) {
                // PLSQLParser.g:1390:25: ^( rollback_key ( work_key )? ^( to_key savepoint_name ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_rollback_key.nextNode(), root_1);

                // PLSQLParser.g:1390:40: ( work_key )?
                if ( stream_work_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_work_key.nextTree());

                }
                stream_work_key.reset();

                // PLSQLParser.g:1390:50: ^( to_key savepoint_name )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_to_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_savepoint_name.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1391:9: -> {mode == 2}? ^( rollback_key ( work_key )? ^( force_key quoted_string ) )
            if (mode == 2) {
                // PLSQLParser.g:1391:25: ^( rollback_key ( work_key )? ^( force_key quoted_string ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_rollback_key.nextNode(), root_1);

                // PLSQLParser.g:1391:40: ( work_key )?
                if ( stream_work_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_work_key.nextTree());

                }
                stream_work_key.reset();

                // PLSQLParser.g:1391:50: ^( force_key quoted_string )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_force_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_quoted_string.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1392:9: -> ^( rollback_key ( work_key )? )
            {
                // PLSQLParser.g:1392:12: ^( rollback_key ( work_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_rollback_key.nextNode(), root_1);

                // PLSQLParser.g:1392:27: ( work_key )?
                if ( stream_work_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_work_key.nextTree());

                }
                stream_work_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rollback_statement"


    public static class savepoint_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "savepoint_statement"
    // PLSQLParser.g:1395:1: savepoint_statement : savepoint_key ^ savepoint_name ;
    public final savepoint_statement_return savepoint_statement() throws RecognitionException {
        savepoint_statement_return retval = new savepoint_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.savepoint_key_return savepoint_key1067 =null;

        PLSQLParser_PLSQLCommons.savepoint_name_return savepoint_name1068 =null;



        try {
            // PLSQLParser.g:1396:5: ( savepoint_key ^ savepoint_name )
            // PLSQLParser.g:1396:10: savepoint_key ^ savepoint_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_savepoint_key_in_savepoint_statement14204);
            savepoint_key1067=savepoint_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(savepoint_key1067.getTree(), root_0);

            pushFollow(FOLLOW_savepoint_name_in_savepoint_statement14207);
            savepoint_name1068=savepoint_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_name1068.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "savepoint_statement"

    // $ANTLR start synpred1_PLSQLParser
    public final void synpred1_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:164:11: ( alter_function )
        // PLSQLParser.g:164:11: alter_function
        {
        pushFollow(FOLLOW_alter_function_in_synpred1_PLSQLParser855);
        alter_function();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_PLSQLParser

    // $ANTLR start synpred2_PLSQLParser
    public final void synpred2_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:165:10: ( alter_package )
        // PLSQLParser.g:165:10: alter_package
        {
        pushFollow(FOLLOW_alter_package_in_synpred2_PLSQLParser866);
        alter_package();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_PLSQLParser

    // $ANTLR start synpred3_PLSQLParser
    public final void synpred3_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:166:10: ( alter_procedure )
        // PLSQLParser.g:166:10: alter_procedure
        {
        pushFollow(FOLLOW_alter_procedure_in_synpred3_PLSQLParser877);
        alter_procedure();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_PLSQLParser

    // $ANTLR start synpred4_PLSQLParser
    public final void synpred4_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:167:10: ( alter_sequence )
        // PLSQLParser.g:167:10: alter_sequence
        {
        pushFollow(FOLLOW_alter_sequence_in_synpred4_PLSQLParser888);
        alter_sequence();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_PLSQLParser

    // $ANTLR start synpred5_PLSQLParser
    public final void synpred5_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:168:10: ( alter_trigger )
        // PLSQLParser.g:168:10: alter_trigger
        {
        pushFollow(FOLLOW_alter_trigger_in_synpred5_PLSQLParser899);
        alter_trigger();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_PLSQLParser

    // $ANTLR start synpred6_PLSQLParser
    public final void synpred6_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:169:10: ( alter_type )
        // PLSQLParser.g:169:10: alter_type
        {
        pushFollow(FOLLOW_alter_type_in_synpred6_PLSQLParser910);
        alter_type();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_PLSQLParser

    // $ANTLR start synpred7_PLSQLParser
    public final void synpred7_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:170:10: ( create_function_body )
        // PLSQLParser.g:170:10: create_function_body
        {
        pushFollow(FOLLOW_create_function_body_in_synpred7_PLSQLParser921);
        create_function_body();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_PLSQLParser

    // $ANTLR start synpred8_PLSQLParser
    public final void synpred8_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:171:10: ( create_procedure_body )
        // PLSQLParser.g:171:10: create_procedure_body
        {
        pushFollow(FOLLOW_create_procedure_body_in_synpred8_PLSQLParser932);
        create_procedure_body();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_PLSQLParser

    // $ANTLR start synpred9_PLSQLParser
    public final void synpred9_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:172:10: ( create_package )
        // PLSQLParser.g:172:10: create_package
        {
        pushFollow(FOLLOW_create_package_in_synpred9_PLSQLParser943);
        create_package();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_PLSQLParser

    // $ANTLR start synpred10_PLSQLParser
    public final void synpred10_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:173:10: ( create_sequence )
        // PLSQLParser.g:173:10: create_sequence
        {
        pushFollow(FOLLOW_create_sequence_in_synpred10_PLSQLParser954);
        create_sequence();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_PLSQLParser

    // $ANTLR start synpred11_PLSQLParser
    public final void synpred11_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:181:10: ( create_trigger )
        // PLSQLParser.g:181:10: create_trigger
        {
        pushFollow(FOLLOW_create_trigger_in_synpred11_PLSQLParser972);
        create_trigger();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_PLSQLParser

    // $ANTLR start synpred12_PLSQLParser
    public final void synpred12_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:182:10: ( create_type )
        // PLSQLParser.g:182:10: create_type
        {
        pushFollow(FOLLOW_create_type_in_synpred12_PLSQLParser983);
        create_type();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_PLSQLParser

    // $ANTLR start synpred13_PLSQLParser
    public final void synpred13_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:183:10: ( drop_function )
        // PLSQLParser.g:183:10: drop_function
        {
        pushFollow(FOLLOW_drop_function_in_synpred13_PLSQLParser994);
        drop_function();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_PLSQLParser

    // $ANTLR start synpred14_PLSQLParser
    public final void synpred14_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:184:10: ( drop_package )
        // PLSQLParser.g:184:10: drop_package
        {
        pushFollow(FOLLOW_drop_package_in_synpred14_PLSQLParser1005);
        drop_package();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_PLSQLParser

    // $ANTLR start synpred15_PLSQLParser
    public final void synpred15_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:185:10: ( drop_procedure )
        // PLSQLParser.g:185:10: drop_procedure
        {
        pushFollow(FOLLOW_drop_procedure_in_synpred15_PLSQLParser1016);
        drop_procedure();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_PLSQLParser

    // $ANTLR start synpred16_PLSQLParser
    public final void synpred16_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:186:10: ( drop_sequence )
        // PLSQLParser.g:186:10: drop_sequence
        {
        pushFollow(FOLLOW_drop_sequence_in_synpred16_PLSQLParser1027);
        drop_sequence();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_PLSQLParser

    // $ANTLR start synpred17_PLSQLParser
    public final void synpred17_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:187:10: ( drop_trigger )
        // PLSQLParser.g:187:10: drop_trigger
        {
        pushFollow(FOLLOW_drop_trigger_in_synpred17_PLSQLParser1038);
        drop_trigger();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_PLSQLParser

    // $ANTLR start synpred18_PLSQLParser
    public final void synpred18_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:322:11: ( variable_declaration )
        // PLSQLParser.g:322:11: variable_declaration
        {
        pushFollow(FOLLOW_variable_declaration_in_synpred18_PLSQLParser2719);
        variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_PLSQLParser

    // $ANTLR start synpred19_PLSQLParser
    public final void synpred19_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:323:11: ( subtype_declaration )
        // PLSQLParser.g:323:11: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred19_PLSQLParser2731);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_PLSQLParser

    // $ANTLR start synpred21_PLSQLParser
    public final void synpred21_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:325:11: ( exception_declaration )
        // PLSQLParser.g:325:11: exception_declaration
        {
        pushFollow(FOLLOW_exception_declaration_in_synpred21_PLSQLParser2755);
        exception_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_PLSQLParser

    // $ANTLR start synpred22_PLSQLParser
    public final void synpred22_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:326:11: ( record_declaration )
        // PLSQLParser.g:326:11: record_declaration
        {
        pushFollow(FOLLOW_record_declaration_in_synpred22_PLSQLParser2767);
        record_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_PLSQLParser

    // $ANTLR start synpred23_PLSQLParser
    public final void synpred23_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:327:11: ( table_declaration )
        // PLSQLParser.g:327:11: table_declaration
        {
        pushFollow(FOLLOW_table_declaration_in_synpred23_PLSQLParser2779);
        table_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_PLSQLParser

    // $ANTLR start synpred25_PLSQLParser
    public final void synpred25_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:348:12: ( variable_declaration )
        // PLSQLParser.g:348:12: variable_declaration
        {
        pushFollow(FOLLOW_variable_declaration_in_synpred25_PLSQLParser3002);
        variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_PLSQLParser

    // $ANTLR start synpred26_PLSQLParser
    public final void synpred26_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:349:11: ( subtype_declaration )
        // PLSQLParser.g:349:11: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred26_PLSQLParser3015);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_PLSQLParser

    // $ANTLR start synpred28_PLSQLParser
    public final void synpred28_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:351:11: ( exception_declaration )
        // PLSQLParser.g:351:11: exception_declaration
        {
        pushFollow(FOLLOW_exception_declaration_in_synpred28_PLSQLParser3041);
        exception_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_PLSQLParser

    // $ANTLR start synpred29_PLSQLParser
    public final void synpred29_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:352:11: ( record_declaration )
        // PLSQLParser.g:352:11: record_declaration
        {
        pushFollow(FOLLOW_record_declaration_in_synpred29_PLSQLParser3054);
        record_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_PLSQLParser

    // $ANTLR start synpred30_PLSQLParser
    public final void synpred30_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:353:11: ( table_declaration )
        // PLSQLParser.g:353:11: table_declaration
        {
        pushFollow(FOLLOW_table_declaration_in_synpred30_PLSQLParser3066);
        table_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_PLSQLParser

    // $ANTLR start synpred31_PLSQLParser
    public final void synpred31_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:354:11: ( create_procedure_body )
        // PLSQLParser.g:354:11: create_procedure_body
        {
        pushFollow(FOLLOW_create_procedure_body_in_synpred31_PLSQLParser3078);
        create_procedure_body();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_PLSQLParser

    // $ANTLR start synpred32_PLSQLParser
    public final void synpred32_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:470:10: ( compound_key trigger_key )
        // PLSQLParser.g:470:11: compound_key trigger_key
        {
        pushFollow(FOLLOW_compound_key_in_synpred32_PLSQLParser4419);
        compound_key();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_trigger_key_in_synpred32_PLSQLParser4421);
        trigger_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_PLSQLParser

    // $ANTLR start synpred33_PLSQLParser
    public final void synpred33_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:471:10: ( call_key id )
        // PLSQLParser.g:471:11: call_key id
        {
        pushFollow(FOLLOW_call_key_in_synpred33_PLSQLParser4437);
        call_key();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_id_in_synpred33_PLSQLParser4439);
        id();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred33_PLSQLParser

    // $ANTLR start synpred34_PLSQLParser
    public final void synpred34_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:761:11: ( id type_spec ( sqlj_object_type_attr )? )
        // PLSQLParser.g:761:11: id type_spec ( sqlj_object_type_attr )?
        {
        pushFollow(FOLLOW_id_in_synpred34_PLSQLParser7713);
        id();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_type_spec_in_synpred34_PLSQLParser7715);
        type_spec();

        state._fsp--;
        if (state.failed) return ;

        // PLSQLParser.g:761:24: ( sqlj_object_type_attr )?
        int alt294=2;
        int LA294_0 = input.LA(1);

        if ( (LA294_0==REGULAR_ID) ) {
            alt294=1;
        }
        switch (alt294) {
            case 1 :
                // PLSQLParser.g:761:24: sqlj_object_type_attr
                {
                pushFollow(FOLLOW_sqlj_object_type_attr_in_synpred34_PLSQLParser7717);
                sqlj_object_type_attr();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred34_PLSQLParser

    // $ANTLR start synpred35_PLSQLParser
    public final void synpred35_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:947:11: ( variable_declaration )
        // PLSQLParser.g:947:11: variable_declaration
        {
        pushFollow(FOLLOW_variable_declaration_in_synpred35_PLSQLParser9529);
        variable_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred35_PLSQLParser

    // $ANTLR start synpred36_PLSQLParser
    public final void synpred36_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:948:11: ( subtype_declaration )
        // PLSQLParser.g:948:11: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred36_PLSQLParser9541);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred36_PLSQLParser

    // $ANTLR start synpred38_PLSQLParser
    public final void synpred38_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:950:11: ( exception_declaration )
        // PLSQLParser.g:950:11: exception_declaration
        {
        pushFollow(FOLLOW_exception_declaration_in_synpred38_PLSQLParser9565);
        exception_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred38_PLSQLParser

    // $ANTLR start synpred39_PLSQLParser
    public final void synpred39_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:951:11: ( pragma_declaration )
        // PLSQLParser.g:951:11: pragma_declaration
        {
        pushFollow(FOLLOW_pragma_declaration_in_synpred39_PLSQLParser9577);
        pragma_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred39_PLSQLParser

    // $ANTLR start synpred40_PLSQLParser
    public final void synpred40_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:952:11: ( record_declaration )
        // PLSQLParser.g:952:11: record_declaration
        {
        pushFollow(FOLLOW_record_declaration_in_synpred40_PLSQLParser9589);
        record_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred40_PLSQLParser

    // $ANTLR start synpred41_PLSQLParser
    public final void synpred41_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:953:11: ( table_declaration )
        // PLSQLParser.g:953:11: table_declaration
        {
        pushFollow(FOLLOW_table_declaration_in_synpred41_PLSQLParser9601);
        table_declaration();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred41_PLSQLParser

    // $ANTLR start synpred42_PLSQLParser
    public final void synpred42_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:954:11: ( create_procedure_body )
        // PLSQLParser.g:954:11: create_procedure_body
        {
        pushFollow(FOLLOW_create_procedure_body_in_synpred42_PLSQLParser9613);
        create_procedure_body();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred42_PLSQLParser

    // $ANTLR start synpred43_PLSQLParser
    public final void synpred43_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1095:10: ( create_key swallow_to_semi ( SEMICOLON | EOF ) )
        // PLSQLParser.g:1095:10: create_key swallow_to_semi ( SEMICOLON | EOF )
        {
        pushFollow(FOLLOW_create_key_in_synpred43_PLSQLParser11171);
        create_key();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_swallow_to_semi_in_synpred43_PLSQLParser11173);
        swallow_to_semi();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred43_PLSQLParser

    // $ANTLR start synpred46_PLSQLParser
    public final void synpred46_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1098:10: ( truncate_key swallow_to_semi ( SEMICOLON | EOF ) )
        // PLSQLParser.g:1098:10: truncate_key swallow_to_semi ( SEMICOLON | EOF )
        {
        pushFollow(FOLLOW_truncate_key_in_synpred46_PLSQLParser11230);
        truncate_key();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_swallow_to_semi_in_synpred46_PLSQLParser11232);
        swallow_to_semi();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred46_PLSQLParser

    // $ANTLR start synpred47_PLSQLParser
    public final void synpred47_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1099:10: ( begin_key )
        // PLSQLParser.g:1099:11: begin_key
        {
        pushFollow(FOLLOW_begin_key_in_synpred47_PLSQLParser11251);
        begin_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred47_PLSQLParser

    // $ANTLR start synpred48_PLSQLParser
    public final void synpred48_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1100:10: ( declare_key )
        // PLSQLParser.g:1100:11: declare_key
        {
        pushFollow(FOLLOW_declare_key_in_synpred48_PLSQLParser11268);
        declare_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred48_PLSQLParser

    // $ANTLR start synpred49_PLSQLParser
    public final void synpred49_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1101:10: ( assignment_statement )
        // PLSQLParser.g:1101:10: assignment_statement
        {
        pushFollow(FOLLOW_assignment_statement_in_synpred49_PLSQLParser11284);
        assignment_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred49_PLSQLParser

    // $ANTLR start synpred50_PLSQLParser
    public final void synpred50_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1102:10: ( continue_statement )
        // PLSQLParser.g:1102:10: continue_statement
        {
        pushFollow(FOLLOW_continue_statement_in_synpred50_PLSQLParser11295);
        continue_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred50_PLSQLParser

    // $ANTLR start synpred51_PLSQLParser
    public final void synpred51_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1103:10: ( exit_statement )
        // PLSQLParser.g:1103:10: exit_statement
        {
        pushFollow(FOLLOW_exit_statement_in_synpred51_PLSQLParser11306);
        exit_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred51_PLSQLParser

    // $ANTLR start synpred54_PLSQLParser
    public final void synpred54_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1106:10: ( loop_statement )
        // PLSQLParser.g:1106:10: loop_statement
        {
        pushFollow(FOLLOW_loop_statement_in_synpred54_PLSQLParser11339);
        loop_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred54_PLSQLParser

    // $ANTLR start synpred55_PLSQLParser
    public final void synpred55_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1107:10: ( forall_statement )
        // PLSQLParser.g:1107:10: forall_statement
        {
        pushFollow(FOLLOW_forall_statement_in_synpred55_PLSQLParser11350);
        forall_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred55_PLSQLParser

    // $ANTLR start synpred57_PLSQLParser
    public final void synpred57_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1109:10: ( raise_statement )
        // PLSQLParser.g:1109:10: raise_statement
        {
        pushFollow(FOLLOW_raise_statement_in_synpred57_PLSQLParser11372);
        raise_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred57_PLSQLParser

    // $ANTLR start synpred58_PLSQLParser
    public final void synpred58_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1110:10: ( return_statement )
        // PLSQLParser.g:1110:10: return_statement
        {
        pushFollow(FOLLOW_return_statement_in_synpred58_PLSQLParser11383);
        return_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred58_PLSQLParser

    // $ANTLR start synpred59_PLSQLParser
    public final void synpred59_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1111:10: ( case_statement[true] )
        // PLSQLParser.g:1111:10: case_statement[true]
        {
        pushFollow(FOLLOW_case_statement_in_synpred59_PLSQLParser11394);
        case_statement(true);

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred59_PLSQLParser

    // $ANTLR start synpred60_PLSQLParser
    public final void synpred60_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1112:10: ( sql_statement )
        // PLSQLParser.g:1112:10: sql_statement
        {
        pushFollow(FOLLOW_sql_statement_in_synpred60_PLSQLParser11406);
        sql_statement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred60_PLSQLParser

    // $ANTLR start synpred61_PLSQLParser
    public final void synpred61_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1171:10: ( index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD )
        // PLSQLParser.g:1171:11: index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD
        {
        pushFollow(FOLLOW_index_name_in_synpred61_PLSQLParser12009);
        index_name();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_in_key_in_synpred61_PLSQLParser12011);
        in_key();

        state._fsp--;
        if (state.failed) return ;

        // PLSQLParser.g:1171:29: ( reverse_key )?
        int alt295=2;
        int LA295_0 = input.LA(1);

        if ( (LA295_0==REGULAR_ID) ) {
            int LA295_1 = input.LA(2);

            if ( ((input.LT(1).getText().equalsIgnoreCase("reverse"))) ) {
                alt295=1;
            }
        }
        switch (alt295) {
            case 1 :
                // PLSQLParser.g:1171:29: reverse_key
                {
                pushFollow(FOLLOW_reverse_key_in_synpred61_PLSQLParser12013);
                reverse_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_lower_bound_in_synpred61_PLSQLParser12016);
        lower_bound();

        state._fsp--;
        if (state.failed) return ;

        match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_synpred61_PLSQLParser12018); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred61_PLSQLParser

    // $ANTLR start synpred64_PLSQLParser
    public final void synpred64_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1263:10: ( cursor_manipulation_statements )
        // PLSQLParser.g:1263:10: cursor_manipulation_statements
        {
        pushFollow(FOLLOW_cursor_manipulation_statements_in_synpred64_PLSQLParser12835);
        cursor_manipulation_statements();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred64_PLSQLParser

    // $ANTLR start synpred65_PLSQLParser
    public final void synpred65_PLSQLParser_fragment() throws RecognitionException {
        // PLSQLParser.g:1327:10: ( select_key | with_key )
        int alt296=2;
        int LA296_0 = input.LA(1);

        if ( (LA296_0==SQL92_RESERVED_SELECT) ) {
            alt296=1;
        }
        else if ( (LA296_0==SQL92_RESERVED_WITH) ) {
            alt296=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 296, 0, input);

            throw nvae;

        }
        switch (alt296) {
            case 1 :
                // PLSQLParser.g:1327:11: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred65_PLSQLParser13356);
                select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQLParser.g:1327:22: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred65_PLSQLParser13358);
                with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred65_PLSQLParser

    // Delegated rules
    public PLSQLParser_PLSQLKeys.indices_key_return indices_key() throws RecognitionException { return gPLSQLKeys.indices_key(); }

    public PLSQLParser_PLSQLKeys.cycle_key_return cycle_key() throws RecognitionException { return gPLSQLKeys.cycle_key(); }

    public PLSQLParser_PLSQL_DMLParser.subquery_restriction_clause_return subquery_restriction_clause() throws RecognitionException { return gPLSQL_DMLParser.subquery_restriction_clause(); }

    public PLSQLParser_PLSQLKeys.nocycle_key_return nocycle_key() throws RecognitionException { return gPLSQLKeys.nocycle_key(); }

    public PLSQLParser_PLSQLKeys.sum_key_return sum_key() throws RecognitionException { return gPLSQLKeys.sum_key(); }

    public PLSQLParser_PLSQL_DMLParser.xml_attributes_clause_return xml_attributes_clause() throws RecognitionException { return gPLSQL_DMLParser.xml_attributes_clause(); }

    public PLSQLParser_PLSQLKeys.create_key_return create_key() throws RecognitionException { return gPLSQLKeys.create_key(); }

    public PLSQLParser_PLSQL_DMLParser.vector_expr_return vector_expr() throws RecognitionException { return gPLSQL_DMLParser.vector_expr(); }

    public PLSQLParser_PLSQLKeys.hide_key_return hide_key() throws RecognitionException { return gPLSQLKeys.hide_key(); }

    public PLSQLParser_PLSQLKeys.exceptions_key_return exceptions_key() throws RecognitionException { return gPLSQLKeys.exceptions_key(); }

    public PLSQLParser_PLSQLKeys.version_key_return version_key() throws RecognitionException { return gPLSQLKeys.version_key(); }

    public PLSQLParser_PLSQLKeys.order_key_return order_key() throws RecognitionException { return gPLSQLKeys.order_key(); }

    public PLSQLParser_PLSQL_DMLParser.subquery_basic_elements_return subquery_basic_elements() throws RecognitionException { return gPLSQL_DMLParser.subquery_basic_elements(); }

    public PLSQLParser_PLSQLKeys.nvarchar2_key_return nvarchar2_key() throws RecognitionException { return gPLSQLKeys.nvarchar2_key(); }

    public PLSQLParser_PLSQLKeys.default_key_return default_key() throws RecognitionException { return gPLSQLKeys.default_key(); }

    public PLSQLParser_PLSQLKeys.inner_key_return inner_key() throws RecognitionException { return gPLSQLKeys.inner_key(); }

    public PLSQLParser_PLSQLKeys.validate_key_return validate_key() throws RecognitionException { return gPLSQLKeys.validate_key(); }

    public PLSQLParser_PLSQL_DMLParser.unary_expression_return unary_expression() throws RecognitionException { return gPLSQL_DMLParser.unary_expression(); }

    public PLSQLParser_PLSQLKeys.xmlattributes_key_return xmlattributes_key() throws RecognitionException { return gPLSQLKeys.xmlattributes_key(); }

    public PLSQLParser_PLSQL_DMLParser.subquery_operation_part_return subquery_operation_part() throws RecognitionException { return gPLSQL_DMLParser.subquery_operation_part(); }

    public PLSQLParser_SQLPLUSParser.whenever_command_return whenever_command() throws RecognitionException { return gSQLPLUSParser.whenever_command(); }

    public PLSQLParser_PLSQLKeys.deferred_key_return deferred_key() throws RecognitionException { return gPLSQLKeys.deferred_key(); }

    public PLSQLParser_PLSQL_DMLParser.model_expression_element_return model_expression_element() throws RecognitionException { return gPLSQL_DMLParser.model_expression_element(); }

    public PLSQLParser_PLSQLKeys.at_key_return at_key() throws RecognitionException { return gPLSQLKeys.at_key(); }

    public PLSQLParser_PLSQLKeys.language_key_return language_key() throws RecognitionException { return gPLSQLKeys.language_key(); }

    public PLSQLParser_PLSQLKeys.pipelined_key_return pipelined_key() throws RecognitionException { return gPLSQLKeys.pipelined_key(); }

    public PLSQLParser_PLSQLKeys.show_key_return show_key() throws RecognitionException { return gPLSQLKeys.show_key(); }

    public PLSQLParser_PLSQLKeys.some_key_return some_key() throws RecognitionException { return gPLSQLKeys.some_key(); }

    public PLSQLParser_PLSQL_DMLParser.using_element_return using_element() throws RecognitionException { return gPLSQL_DMLParser.using_element(); }

    public PLSQLParser_PLSQLKeys.write_key_return write_key() throws RecognitionException { return gPLSQLKeys.write_key(); }

    public PLSQLParser_PLSQLKeys.disable_key_return disable_key() throws RecognitionException { return gPLSQLKeys.disable_key(); }

    public PLSQLParser_PLSQL_DMLParser.until_part_return until_part() throws RecognitionException { return gPLSQL_DMLParser.until_part(); }

    public PLSQLParser_PLSQL_DMLParser.model_rules_part_return model_rules_part() throws RecognitionException { return gPLSQL_DMLParser.model_rules_part(); }

    public PLSQLParser_PLSQLKeys.overriding_key_return overriding_key() throws RecognitionException { return gPLSQLKeys.overriding_key(); }

    public PLSQLParser_PLSQLKeys.a_key_return a_key() throws RecognitionException { return gPLSQLKeys.a_key(); }

    public PLSQLParser_PLSQLKeys.float_key_return float_key() throws RecognitionException { return gPLSQLKeys.float_key(); }

    public PLSQLParser_PLSQLKeys.member_key_return member_key() throws RecognitionException { return gPLSQLKeys.member_key(); }

    public PLSQLParser_PLSQL_DMLParser.additive_expression_return additive_expression() throws RecognitionException { return gPLSQL_DMLParser.additive_expression(); }

    public PLSQLParser_PLSQL_DMLParser.query_block_return query_block() throws RecognitionException { return gPLSQL_DMLParser.query_block(); }

    public PLSQLParser_PLSQLKeys.infinite_key_return infinite_key() throws RecognitionException { return gPLSQLKeys.infinite_key(); }

    public PLSQLParser_PLSQLKeys.second_key_return second_key() throws RecognitionException { return gPLSQLKeys.second_key(); }

    public PLSQLParser_PLSQLKeys.insert_key_return insert_key() throws RecognitionException { return gPLSQLKeys.insert_key(); }

    public PLSQLParser_PLSQL_DMLParser.lock_table_element_return lock_table_element() throws RecognitionException { return gPLSQL_DMLParser.lock_table_element(); }

    public PLSQLParser_PLSQLKeys.role_key_return role_key() throws RecognitionException { return gPLSQLKeys.role_key(); }

    public PLSQLParser_PLSQLCommons.aggregate_function_name_return aggregate_function_name() throws RecognitionException { return gPLSQLCommons.aggregate_function_name(); }

    public PLSQLParser_PLSQLKeys.level_key_return level_key() throws RecognitionException { return gPLSQLKeys.level_key(); }

    public PLSQLParser_PLSQLKeys.hextoraw_key_return hextoraw_key() throws RecognitionException { return gPLSQLKeys.hextoraw_key(); }

    public PLSQLParser_PLSQLKeys.rename_key_return rename_key() throws RecognitionException { return gPLSQLKeys.rename_key(); }

    public PLSQLParser_PLSQLKeys.noentityescaping_key_return noentityescaping_key() throws RecognitionException { return gPLSQLKeys.noentityescaping_key(); }

    public PLSQLParser_PLSQLCommons.exception_name_return exception_name() throws RecognitionException { return gPLSQLCommons.exception_name(); }

    public PLSQLParser_PLSQLKeys.continue_key_return continue_key() throws RecognitionException { return gPLSQLKeys.continue_key(); }

    public PLSQLParser_PLSQL_DMLParser.standard_function_return standard_function() throws RecognitionException { return gPLSQL_DMLParser.standard_function(); }

    public PLSQLParser_PLSQLKeys.nextval_key_return nextval_key() throws RecognitionException { return gPLSQLKeys.nextval_key(); }

    public PLSQLParser_PLSQLKeys.smallint_key_return smallint_key() throws RecognitionException { return gPLSQLKeys.smallint_key(); }

    public PLSQLParser_PLSQLCommons.alias_quoted_string_return alias_quoted_string() throws RecognitionException { return gPLSQLCommons.alias_quoted_string(); }

    public PLSQLParser_PLSQLCommons.respect_or_ignore_nulls_return respect_or_ignore_nulls() throws RecognitionException { return gPLSQLCommons.respect_or_ignore_nulls(); }

    public PLSQLParser_PLSQLKeys.nullif_key_return nullif_key() throws RecognitionException { return gPLSQLKeys.nullif_key(); }

    public PLSQLParser_PLSQL_DMLParser.model_column_return model_column() throws RecognitionException { return gPLSQL_DMLParser.model_column(); }

    public PLSQLParser_PLSQLKeys.current_time_key_return current_time_key() throws RecognitionException { return gPLSQLKeys.current_time_key(); }

    public PLSQLParser_PLSQLKeys.maxvalue_key_return maxvalue_key() throws RecognitionException { return gPLSQLKeys.maxvalue_key(); }

    public PLSQLParser_PLSQLKeys.read_key_return read_key() throws RecognitionException { return gPLSQLKeys.read_key(); }

    public PLSQLParser_PLSQLKeys.schemacheck_key_return schemacheck_key() throws RecognitionException { return gPLSQLKeys.schemacheck_key(); }

    public PLSQLParser_PLSQLCommons.not_equal_op_return not_equal_op() throws RecognitionException { return gPLSQLCommons.not_equal_op(); }

    public PLSQLParser_PLSQLKeys.encoding_key_return encoding_key() throws RecognitionException { return gPLSQLKeys.encoding_key(); }

    public PLSQLParser_PLSQLKeys.rawtohex_key_return rawtohex_key() throws RecognitionException { return gPLSQLKeys.rawtohex_key(); }

    public PLSQLParser_PLSQLKeys.include_key_return include_key() throws RecognitionException { return gPLSQLKeys.include_key(); }

    public PLSQLParser_PLSQLCommons.native_datatype_element_return native_datatype_element() throws RecognitionException { return gPLSQLCommons.native_datatype_element(); }

    public PLSQLParser_PLSQLKeys.noaudit_key_return noaudit_key() throws RecognitionException { return gPLSQLKeys.noaudit_key(); }

    public PLSQLParser_PLSQLKeys.on_key_return on_key() throws RecognitionException { return gPLSQLKeys.on_key(); }

    public PLSQLParser_PLSQLKeys.commit_key_return commit_key() throws RecognitionException { return gPLSQLKeys.commit_key(); }

    public PLSQLParser_PLSQLKeys.session_user_key_return session_user_key() throws RecognitionException { return gPLSQLKeys.session_user_key(); }

    public PLSQLParser_PLSQLKeys.sequential_key_return sequential_key() throws RecognitionException { return gPLSQLKeys.sequential_key(); }

    public PLSQLParser_PLSQL_DMLParser.order_by_elements_return order_by_elements() throws RecognitionException { return gPLSQL_DMLParser.order_by_elements(); }

    public PLSQLParser_PLSQLKeys.partial_key_return partial_key() throws RecognitionException { return gPLSQLKeys.partial_key(); }

    public PLSQLParser_PLSQLCommons.where_clause_return where_clause() throws RecognitionException { return gPLSQLCommons.where_clause(); }

    public PLSQLParser_PLSQLKeys.yes_key_return yes_key() throws RecognitionException { return gPLSQLKeys.yes_key(); }

    public PLSQLParser_PLSQLKeys.the_key_return the_key() throws RecognitionException { return gPLSQLKeys.the_key(); }

    public PLSQLParser_PLSQLCommons.id_return id() throws RecognitionException { return gPLSQLCommons.id(); }

    public PLSQLParser_PLSQL_DMLParser.stantard_function_enabling_over_return stantard_function_enabling_over() throws RecognitionException { return gPLSQL_DMLParser.stantard_function_enabling_over(); }

    public PLSQLParser_PLSQLKeys.subpartition_key_return subpartition_key() throws RecognitionException { return gPLSQLKeys.subpartition_key(); }

    public PLSQLParser_PLSQLKeys.static_key_return static_key() throws RecognitionException { return gPLSQLKeys.static_key(); }

    public PLSQLParser_PLSQL_DMLParser.cell_assignment_return cell_assignment() throws RecognitionException { return gPLSQL_DMLParser.cell_assignment(); }

    public PLSQLParser_PLSQL_DMLParser.over_clause_return over_clause() throws RecognitionException { return gPLSQL_DMLParser.over_clause(); }

    public PLSQLParser_PLSQLKeys.first_key_return first_key() throws RecognitionException { return gPLSQLKeys.first_key(); }

    public PLSQLParser_PLSQLKeys.nulls_key_return nulls_key() throws RecognitionException { return gPLSQLKeys.nulls_key(); }

    public PLSQLParser_PLSQLKeys.unbounded_key_return unbounded_key() throws RecognitionException { return gPLSQLKeys.unbounded_key(); }

    public PLSQLParser_PLSQLKeys.replace_key_return replace_key() throws RecognitionException { return gPLSQLKeys.replace_key(); }

    public PLSQLParser_PLSQL_DMLParser.logical_and_expression_return logical_and_expression() throws RecognitionException { return gPLSQL_DMLParser.logical_and_expression(); }

    public PLSQLParser_SQLPLUSParser.set_command_return set_command() throws RecognitionException { return gSQLPLUSParser.set_command(); }

    public PLSQLParser_PLSQLKeys.percent_type_key_return percent_type_key() throws RecognitionException { return gPLSQLKeys.percent_type_key(); }

    public PLSQLParser_PLSQLKeys.resumable_key_return resumable_key() throws RecognitionException { return gPLSQLKeys.resumable_key(); }

    public PLSQLParser_PLSQLKeys.exception_key_return exception_key() throws RecognitionException { return gPLSQLKeys.exception_key(); }

    public PLSQLParser_PLSQL_DMLParser.merge_update_delete_part_return merge_update_delete_part() throws RecognitionException { return gPLSQL_DMLParser.merge_update_delete_part(); }

    public PLSQLParser_PLSQLKeys.savepoint_key_return savepoint_key() throws RecognitionException { return gPLSQLKeys.savepoint_key(); }

    public PLSQLParser_PLSQLKeys.first_value_key_return first_value_key() throws RecognitionException { return gPLSQLKeys.first_value_key(); }

    public PLSQLParser_PLSQLKeys.none_key_return none_key() throws RecognitionException { return gPLSQLKeys.none_key(); }

    public PLSQLParser_PLSQLKeys.bulk_key_return bulk_key() throws RecognitionException { return gPLSQLKeys.bulk_key(); }

    public PLSQLParser_PLSQLKeys.standalone_key_return standalone_key() throws RecognitionException { return gPLSQLKeys.standalone_key(); }

    public PLSQLParser_PLSQLKeys.variance_key_return variance_key() throws RecognitionException { return gPLSQLKeys.variance_key(); }

    public PLSQLParser_PLSQL_DMLParser.single_table_insert_return single_table_insert() throws RecognitionException { return gPLSQL_DMLParser.single_table_insert(); }

    public PLSQLParser_PLSQLKeys.collect_key_return collect_key() throws RecognitionException { return gPLSQLKeys.collect_key(); }

    public PLSQLParser_PLSQLKeys.map_key_return map_key() throws RecognitionException { return gPLSQLKeys.map_key(); }

    public PLSQLParser_PLSQLKeys.character_key_return character_key() throws RecognitionException { return gPLSQLKeys.character_key(); }

    public PLSQLParser_PLSQLKeys.customdatum_key_return customdatum_key() throws RecognitionException { return gPLSQLKeys.customdatum_key(); }

    public PLSQLParser_PLSQLKeys.under_key_return under_key() throws RecognitionException { return gPLSQLKeys.under_key(); }

    public PLSQLParser_PLSQLKeys.link_key_return link_key() throws RecognitionException { return gPLSQLKeys.link_key(); }

    public PLSQLParser_PLSQL_DMLParser.datetime_expression_return datetime_expression() throws RecognitionException { return gPLSQL_DMLParser.datetime_expression(); }

    public PLSQLParser_PLSQLCommons.into_clause_return into_clause() throws RecognitionException { return gPLSQLCommons.into_clause(); }

    public PLSQLParser_PLSQLKeys.xmlcast_key_return xmlcast_key() throws RecognitionException { return gPLSQLKeys.xmlcast_key(); }

    public PLSQLParser_PLSQL_DMLParser.for_update_options_return for_update_options() throws RecognitionException { return gPLSQL_DMLParser.for_update_options(); }

    public PLSQLParser_PLSQLKeys.ref_key_return ref_key() throws RecognitionException { return gPLSQLKeys.ref_key(); }

    public PLSQLParser_PLSQLCommons.table_element_return table_element() throws RecognitionException { return gPLSQLCommons.table_element(); }

    public PLSQLParser_PLSQLKeys.percent_rowtype_key_return percent_rowtype_key() throws RecognitionException { return gPLSQLKeys.percent_rowtype_key(); }

    public PLSQLParser_PLSQL_DMLParser.model_clause_return model_clause() throws RecognitionException { return gPLSQL_DMLParser.model_clause(); }

    public PLSQLParser_PLSQL_DMLParser.multi_table_element_return multi_table_element() throws RecognitionException { return gPLSQL_DMLParser.multi_table_element(); }

    public PLSQLParser_PLSQLCommons.id_expression_return id_expression() throws RecognitionException { return gPLSQLCommons.id_expression(); }

    public PLSQLParser_PLSQLKeys.indent_key_return indent_key() throws RecognitionException { return gPLSQLKeys.indent_key(); }

    public PLSQLParser_PLSQLKeys.statement_key_return statement_key() throws RecognitionException { return gPLSQLKeys.statement_key(); }

    public PLSQLParser_PLSQLKeys.case_key_return case_key() throws RecognitionException { return gPLSQLKeys.case_key(); }

    public PLSQLParser_PLSQLCommons.package_name_return package_name() throws RecognitionException { return gPLSQLCommons.package_name(); }

    public PLSQLParser_PLSQLKeys.advise_key_return advise_key() throws RecognitionException { return gPLSQLKeys.advise_key(); }

    public PLSQLParser_PLSQLKeys.library_key_return library_key() throws RecognitionException { return gPLSQLKeys.library_key(); }

    public PLSQLParser_PLSQLKeys.convert_key_return convert_key() throws RecognitionException { return gPLSQLKeys.convert_key(); }

    public PLSQLParser_PLSQL_DMLParser.xml_table_column_return xml_table_column() throws RecognitionException { return gPLSQL_DMLParser.xml_table_column(); }

    public PLSQLParser_PLSQLKeys.percent_isopen_key_return percent_isopen_key() throws RecognitionException { return gPLSQLKeys.percent_isopen_key(); }

    public PLSQLParser_PLSQLKeys.both_key_return both_key() throws RecognitionException { return gPLSQLKeys.both_key(); }

    public PLSQLParser_PLSQL_DMLParser.pivot_for_clause_return pivot_for_clause() throws RecognitionException { return gPLSQL_DMLParser.pivot_for_clause(); }

    public PLSQLParser_PLSQLKeys.position_key_return position_key() throws RecognitionException { return gPLSQLKeys.position_key(); }

    public PLSQLParser_PLSQLKeys.signtype_key_return signtype_key() throws RecognitionException { return gPLSQLKeys.signtype_key(); }

    public PLSQLParser_PLSQLKeys.least_key_return least_key() throws RecognitionException { return gPLSQLKeys.least_key(); }

    public PLSQLParser_PLSQLKeys.lower_key_return lower_key() throws RecognitionException { return gPLSQLKeys.lower_key(); }

    public PLSQLParser_PLSQLKeys.element_key_return element_key() throws RecognitionException { return gPLSQLKeys.element_key(); }

    public PLSQLParser_PLSQL_DMLParser.grouping_sets_elements_return grouping_sets_elements() throws RecognitionException { return gPLSQL_DMLParser.grouping_sets_elements(); }

    public PLSQLParser_PLSQL_DMLParser.flashback_query_clause_return flashback_query_clause() throws RecognitionException { return gPLSQL_DMLParser.flashback_query_clause(); }

    public PLSQLParser_PLSQLKeys.min_key_return min_key() throws RecognitionException { return gPLSQLKeys.min_key(); }

    public PLSQLParser_PLSQLKeys.binary_double_infinity_key_return binary_double_infinity_key() throws RecognitionException { return gPLSQLKeys.binary_double_infinity_key(); }

    public PLSQLParser_PLSQLKeys.like2_key_return like2_key() throws RecognitionException { return gPLSQLKeys.like2_key(); }

    public PLSQLParser_PLSQLKeys.table_key_return table_key() throws RecognitionException { return gPLSQLKeys.table_key(); }

    public PLSQLParser_PLSQLKeys.document_key_return document_key() throws RecognitionException { return gPLSQLKeys.document_key(); }

    public PLSQLParser_PLSQLKeys.zone_key_return zone_key() throws RecognitionException { return gPLSQLKeys.zone_key(); }

    public PLSQLParser_PLSQLKeys.in_key_return in_key() throws RecognitionException { return gPLSQLKeys.in_key(); }

    public PLSQLParser_PLSQL_DMLParser.for_update_clause_return for_update_clause() throws RecognitionException { return gPLSQL_DMLParser.for_update_clause(); }

    public PLSQLParser_PLSQLKeys.with_key_return with_key() throws RecognitionException { return gPLSQLKeys.with_key(); }

    public PLSQLParser_PLSQL_DMLParser.join_clause_return join_clause() throws RecognitionException { return gPLSQL_DMLParser.join_clause(); }

    public PLSQLParser_PLSQLKeys.raw_key_return raw_key() throws RecognitionException { return gPLSQLKeys.raw_key(); }

    public PLSQLParser_PLSQL_DMLParser.selected_element_return selected_element() throws RecognitionException { return gPLSQL_DMLParser.selected_element(); }

    public PLSQLParser_PLSQLKeys.size_key_return size_key() throws RecognitionException { return gPLSQLKeys.size_key(); }

    public PLSQLParser_PLSQLKeys.debug_key_return debug_key() throws RecognitionException { return gPLSQLKeys.debug_key(); }

    public PLSQLParser_PLSQLKeys.row_key_return row_key() throws RecognitionException { return gPLSQLKeys.row_key(); }

    public PLSQLParser_PLSQLKeys.timezone_hour_key_return timezone_hour_key() throws RecognitionException { return gPLSQLKeys.timezone_hour_key(); }

    public PLSQLParser_PLSQLKeys.connect_by_root_key_return connect_by_root_key() throws RecognitionException { return gPLSQLKeys.connect_by_root_key(); }

    public PLSQLParser_PLSQLKeys.substr_key_return substr_key() throws RecognitionException { return gPLSQLKeys.substr_key(); }

    public PLSQLParser_PLSQLKeys.only_key_return only_key() throws RecognitionException { return gPLSQLKeys.only_key(); }

    public PLSQLParser_PLSQL_DMLParser.multi_table_insert_return multi_table_insert() throws RecognitionException { return gPLSQL_DMLParser.multi_table_insert(); }

    public PLSQLParser_PLSQLKeys.binary_float_key_return binary_float_key() throws RecognitionException { return gPLSQLKeys.binary_float_key(); }

    public PLSQLParser_PLSQLKeys.binary_integer_key_return binary_integer_key() throws RecognitionException { return gPLSQLKeys.binary_integer_key(); }

    public PLSQLParser_PLSQLKeys.national_key_return national_key() throws RecognitionException { return gPLSQLKeys.national_key(); }

    public PLSQLParser_PLSQLKeys.trailing_key_return trailing_key() throws RecognitionException { return gPLSQLKeys.trailing_key(); }

    public PLSQLParser_PLSQLKeys.varying_key_return varying_key() throws RecognitionException { return gPLSQLKeys.varying_key(); }

    public PLSQLParser_PLSQLCommons.procedure_name_return procedure_name() throws RecognitionException { return gPLSQLCommons.procedure_name(); }

    public PLSQLParser_PLSQLCommons.general_element_part_return general_element_part() throws RecognitionException { return gPLSQLCommons.general_element_part(); }

    public PLSQLParser_PLSQL_DMLParser.interval_expression_return interval_expression() throws RecognitionException { return gPLSQL_DMLParser.interval_expression(); }

    public PLSQLParser_PLSQL_DMLParser.condition_wrapper_return condition_wrapper() throws RecognitionException { return gPLSQL_DMLParser.condition_wrapper(); }

    public PLSQLParser_PLSQLKeys.serially_reusable_key_return serially_reusable_key() throws RecognitionException { return gPLSQLKeys.serially_reusable_key(); }

    public PLSQLParser_PLSQLKeys.autonomous_transaction_key_return autonomous_transaction_key() throws RecognitionException { return gPLSQLKeys.autonomous_transaction_key(); }

    public PLSQLParser_PLSQLKeys.definer_key_return definer_key() throws RecognitionException { return gPLSQLKeys.definer_key(); }

    public PLSQLParser_PLSQL_DMLParser.pivot_in_clause_elements_return pivot_in_clause_elements() throws RecognitionException { return gPLSQL_DMLParser.pivot_in_clause_elements(); }

    public PLSQLParser_PLSQLKeys.servererror_key_return servererror_key() throws RecognitionException { return gPLSQLKeys.servererror_key(); }

    public PLSQLParser_PLSQLKeys.xmlquery_key_return xmlquery_key() throws RecognitionException { return gPLSQLKeys.xmlquery_key(); }

    public PLSQLParser_PLSQL_DMLParser.in_elements_return in_elements() throws RecognitionException { return gPLSQL_DMLParser.in_elements(); }

    public PLSQLParser_PLSQLKeys.binary_double_key_return binary_double_key() throws RecognitionException { return gPLSQLKeys.binary_double_key(); }

    public PLSQLParser_PLSQLKeys.upsert_key_return upsert_key() throws RecognitionException { return gPLSQLKeys.upsert_key(); }

    public PLSQLParser_PLSQLCommons.index_name_return index_name() throws RecognitionException { return gPLSQLCommons.index_name(); }

    public PLSQLParser_PLSQL_DMLParser.table_ref_return table_ref() throws RecognitionException { return gPLSQL_DMLParser.table_ref(); }

    public PLSQLParser_PLSQLKeys.attribute_key_return attribute_key() throws RecognitionException { return gPLSQLKeys.attribute_key(); }

    public PLSQLParser_PLSQLKeys.using_key_return using_key() throws RecognitionException { return gPLSQLKeys.using_key(); }

    public PLSQLParser_PLSQLKeys.main_key_return main_key() throws RecognitionException { return gPLSQLKeys.main_key(); }

    public PLSQLParser_PLSQLKeys.null_key_return null_key() throws RecognitionException { return gPLSQLKeys.null_key(); }

    public PLSQLParser_PLSQLKeys.minvalue_key_return minvalue_key() throws RecognitionException { return gPLSQLKeys.minvalue_key(); }

    public PLSQLParser_PLSQLKeys.nocache_key_return nocache_key() throws RecognitionException { return gPLSQLKeys.nocache_key(); }

    public PLSQLParser_PLSQLKeys.whenever_key_return whenever_key() throws RecognitionException { return gPLSQLKeys.whenever_key(); }

    public PLSQLParser_PLSQLKeys.increment_key_return increment_key() throws RecognitionException { return gPLSQLKeys.increment_key(); }

    public PLSQLParser_PLSQLKeys.likec_key_return likec_key() throws RecognitionException { return gPLSQLKeys.likec_key(); }

    public PLSQLParser_PLSQLKeys.merge_key_return merge_key() throws RecognitionException { return gPLSQLKeys.merge_key(); }

    public PLSQLParser_PLSQL_DMLParser.error_logging_reject_part_return error_logging_reject_part() throws RecognitionException { return gPLSQL_DMLParser.error_logging_reject_part(); }

    public PLSQLParser_PLSQLKeys.positive_key_return positive_key() throws RecognitionException { return gPLSQLKeys.positive_key(); }

    public PLSQLParser_PLSQL_DMLParser.model_rules_element_return model_rules_element() throws RecognitionException { return gPLSQL_DMLParser.model_rules_element(); }

    public PLSQLParser_PLSQLKeys.noorder_key_return noorder_key() throws RecognitionException { return gPLSQLKeys.noorder_key(); }

    public PLSQLParser_PLSQLKeys.if_key_return if_key() throws RecognitionException { return gPLSQLKeys.if_key(); }

    public PLSQLParser_PLSQLKeys.returning_key_return returning_key() throws RecognitionException { return gPLSQLKeys.returning_key(); }

    public PLSQLParser_PLSQL_DMLParser.error_logging_into_part_return error_logging_into_part() throws RecognitionException { return gPLSQL_DMLParser.error_logging_into_part(); }

    public PLSQLParser_PLSQLKeys.else_key_return else_key() throws RecognitionException { return gPLSQLKeys.else_key(); }

    public PLSQLParser_PLSQLCommons.function_argument_analytic_return function_argument_analytic() throws RecognitionException { return gPLSQLCommons.function_argument_analytic(); }

    public PLSQLParser_PLSQLKeys.no_key_return no_key() throws RecognitionException { return gPLSQLKeys.no_key(); }

    public PLSQLParser_PLSQL_DMLParser.like_escape_part_return like_escape_part() throws RecognitionException { return gPLSQL_DMLParser.like_escape_part(); }

    public PLSQLParser_PLSQL_DMLParser.selected_tableview_return selected_tableview() throws RecognitionException { return gPLSQL_DMLParser.selected_tableview(); }

    public PLSQLParser_PLSQLKeys.bit_key_return bit_key() throws RecognitionException { return gPLSQLKeys.bit_key(); }

    public PLSQLParser_PLSQLKeys.ascii_key_return ascii_key() throws RecognitionException { return gPLSQLKeys.ascii_key(); }

    public PLSQLParser_PLSQLKeys.exclude_key_return exclude_key() throws RecognitionException { return gPLSQLKeys.exclude_key(); }

    public PLSQLParser_PLSQLKeys.ceil_key_return ceil_key() throws RecognitionException { return gPLSQLKeys.ceil_key(); }

    public PLSQLParser_PLSQLKeys.compatibility_key_return compatibility_key() throws RecognitionException { return gPLSQLKeys.compatibility_key(); }

    public PLSQLParser_PLSQLKeys.collate_key_return collate_key() throws RecognitionException { return gPLSQLKeys.collate_key(); }

    public PLSQLParser_PLSQLKeys.share_key_return share_key() throws RecognitionException { return gPLSQLKeys.share_key(); }

    public PLSQLParser_PLSQLKeys.to_char_key_return to_char_key() throws RecognitionException { return gPLSQLKeys.to_char_key(); }

    public PLSQLParser_PLSQLKeys.mod_key_return mod_key() throws RecognitionException { return gPLSQLKeys.mod_key(); }

    public PLSQLParser_PLSQLKeys.rpad_key_return rpad_key() throws RecognitionException { return gPLSQLKeys.rpad_key(); }

    public PLSQLParser_PLSQL_DMLParser.group_by_clause_return group_by_clause() throws RecognitionException { return gPLSQL_DMLParser.group_by_clause(); }

    public PLSQLParser_PLSQLKeys.drop_key_return drop_key() throws RecognitionException { return gPLSQLKeys.drop_key(); }

    public PLSQLParser_PLSQLKeys.dsinterval_unconstrained_key_return dsinterval_unconstrained_key() throws RecognitionException { return gPLSQLKeys.dsinterval_unconstrained_key(); }

    public PLSQLParser_PLSQLKeys.instantiable_key_return instantiable_key() throws RecognitionException { return gPLSQLKeys.instantiable_key(); }

    public PLSQLParser_PLSQLKeys.instr_key_return instr_key() throws RecognitionException { return gPLSQLKeys.instr_key(); }

    public PLSQLParser_PLSQLKeys.user_key_return user_key() throws RecognitionException { return gPLSQLKeys.user_key(); }

    public PLSQLParser_PLSQLKeys.nocopy_key_return nocopy_key() throws RecognitionException { return gPLSQLKeys.nocopy_key(); }

    public PLSQLParser_PLSQLKeys.before_key_return before_key() throws RecognitionException { return gPLSQLKeys.before_key(); }

    public PLSQLParser_PLSQLKeys.close_key_return close_key() throws RecognitionException { return gPLSQLKeys.close_key(); }

    public PLSQLParser_PLSQL_DMLParser.insert_statement_return insert_statement() throws RecognitionException { return gPLSQL_DMLParser.insert_statement(); }

    public PLSQLParser_PLSQLCommons.xml_column_name_return xml_column_name() throws RecognitionException { return gPLSQLCommons.xml_column_name(); }

    public PLSQLParser_PLSQLCommons.routine_name_return routine_name() throws RecognitionException { return gPLSQLCommons.routine_name(); }

    public PLSQLParser_PLSQLKeys.matched_key_return matched_key() throws RecognitionException { return gPLSQLKeys.matched_key(); }

    public PLSQLParser_PLSQLKeys.record_key_return record_key() throws RecognitionException { return gPLSQLKeys.record_key(); }

    public PLSQLParser_PLSQLKeys.compound_key_return compound_key() throws RecognitionException { return gPLSQLKeys.compound_key(); }

    public PLSQLParser_PLSQLCommons.concatenation_op_return concatenation_op() throws RecognitionException { return gPLSQLCommons.concatenation_op(); }

    public PLSQLParser_PLSQL_DMLParser.general_table_ref_return general_table_ref() throws RecognitionException { return gPLSQL_DMLParser.general_table_ref(); }

    public PLSQLParser_PLSQLKeys.breadth_key_return breadth_key() throws RecognitionException { return gPLSQLKeys.breadth_key(); }

    public PLSQLParser_PLSQLKeys.interval_key_return interval_key() throws RecognitionException { return gPLSQLKeys.interval_key(); }

    public PLSQLParser_PLSQLKeys.prior_key_return prior_key() throws RecognitionException { return gPLSQLKeys.prior_key(); }

    public PLSQLParser_PLSQL_DMLParser.lock_table_statement_return lock_table_statement() throws RecognitionException { return gPLSQL_DMLParser.lock_table_statement(); }

    public PLSQLParser_PLSQLKeys.positiven_key_return positiven_key() throws RecognitionException { return gPLSQLKeys.positiven_key(); }

    public PLSQLParser_PLSQL_DMLParser.simple_case_statement_return simple_case_statement() throws RecognitionException { return gPLSQL_DMLParser.simple_case_statement(); }

    public PLSQLParser_PLSQL_DMLParser.case_else_part_return case_else_part() throws RecognitionException { return gPLSQL_DMLParser.case_else_part(); }

    public PLSQLParser_PLSQLKeys.parallel_enable_key_return parallel_enable_key() throws RecognitionException { return gPLSQLKeys.parallel_enable_key(); }

    public PLSQLParser_PLSQLKeys.char_key_return char_key() throws RecognitionException { return gPLSQLKeys.char_key(); }

    public PLSQLParser_PLSQLKeys.submultiset_key_return submultiset_key() throws RecognitionException { return gPLSQLKeys.submultiset_key(); }

    public PLSQLParser_PLSQLCommons.tableview_name_return tableview_name() throws RecognitionException { return gPLSQLCommons.tableview_name(); }

    public PLSQLParser_PLSQLKeys.timeout_key_return timeout_key() throws RecognitionException { return gPLSQLKeys.timeout_key(); }

    public PLSQLParser_PLSQLKeys.minus_key_return minus_key() throws RecognitionException { return gPLSQLKeys.minus_key(); }

    public PLSQLParser_PLSQL_DMLParser.column_based_update_set_clause_return column_based_update_set_clause() throws RecognitionException { return gPLSQL_DMLParser.column_based_update_set_clause(); }

    public PLSQLParser_PLSQLKeys.automatic_key_return automatic_key() throws RecognitionException { return gPLSQLKeys.automatic_key(); }

    public PLSQLParser_PLSQLKeys.simple_integer_key_return simple_integer_key() throws RecognitionException { return gPLSQLKeys.simple_integer_key(); }

    public PLSQLParser_PLSQL_DMLParser.for_increment_decrement_type_return for_increment_decrement_type() throws RecognitionException { return gPLSQL_DMLParser.for_increment_decrement_type(); }

    public PLSQLParser_PLSQLCommons.numeric_return numeric() throws RecognitionException { return gPLSQLCommons.numeric(); }

    public PLSQLParser_PLSQLKeys.failure_key_return failure_key() throws RecognitionException { return gPLSQLKeys.failure_key(); }

    public PLSQLParser_PLSQLKeys.siblings_key_return siblings_key() throws RecognitionException { return gPLSQLKeys.siblings_key(); }

    public PLSQLParser_PLSQL_DMLParser.negated_expression_return negated_expression() throws RecognitionException { return gPLSQL_DMLParser.negated_expression(); }

    public PLSQLParser_PLSQLCommons.datatype_return datatype() throws RecognitionException { return gPLSQLCommons.datatype(); }

    public PLSQLParser_PLSQLKeys.update_key_return update_key() throws RecognitionException { return gPLSQLKeys.update_key(); }

    public PLSQLParser_PLSQLKeys.batch_key_return batch_key() throws RecognitionException { return gPLSQLKeys.batch_key(); }

    public PLSQLParser_PLSQLKeys.end_key_return end_key() throws RecognitionException { return gPLSQLKeys.end_key(); }

    public PLSQLParser_PLSQLKeys.while_key_return while_key() throws RecognitionException { return gPLSQLKeys.while_key(); }

    public PLSQLParser_PLSQLKeys.year_key_return year_key() throws RecognitionException { return gPLSQLKeys.year_key(); }

    public PLSQLParser_PLSQLKeys.settings_key_return settings_key() throws RecognitionException { return gPLSQLKeys.settings_key(); }

    public PLSQLParser_PLSQLKeys.boolean_key_return boolean_key() throws RecognitionException { return gPLSQLKeys.boolean_key(); }

    public PLSQLParser_PLSQLCommons.column_name_return column_name() throws RecognitionException { return gPLSQLCommons.column_name(); }

    public PLSQLParser_PLSQLCommons.quoted_string_return quoted_string() throws RecognitionException { return gPLSQLCommons.quoted_string(); }

    public PLSQLParser_PLSQLKeys.floor_key_return floor_key() throws RecognitionException { return gPLSQLKeys.floor_key(); }

    public PLSQLParser_PLSQL_DMLParser.model_column_list_return model_column_list() throws RecognitionException { return gPLSQL_DMLParser.model_column_list(); }

    public PLSQLParser_PLSQLCommons.schema_name_return schema_name() throws RecognitionException { return gPLSQLCommons.schema_name(); }

    public PLSQLParser_PLSQLKeys.power_key_return power_key() throws RecognitionException { return gPLSQLKeys.power_key(); }

    public PLSQLParser_PLSQLKeys.modify_key_return modify_key() throws RecognitionException { return gPLSQLKeys.modify_key(); }

    public PLSQLParser_PLSQLKeys.shutdown_key_return shutdown_key() throws RecognitionException { return gPLSQLKeys.shutdown_key(); }

    public PLSQLParser_PLSQLKeys.octet_length_key_return octet_length_key() throws RecognitionException { return gPLSQLKeys.octet_length_key(); }

    public PLSQLParser_PLSQLKeys.extract_key_return extract_key() throws RecognitionException { return gPLSQLKeys.extract_key(); }

    public PLSQLParser_PLSQLKeys.xmlserialize_key_return xmlserialize_key() throws RecognitionException { return gPLSQLKeys.xmlserialize_key(); }

    public PLSQLParser_PLSQL_DMLParser.xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part() throws RecognitionException { return gPLSQL_DMLParser.xmlserialize_param_enconding_part(); }

    public PLSQLParser_PLSQLKeys.last_value_key_return last_value_key() throws RecognitionException { return gPLSQLKeys.last_value_key(); }

    public PLSQLParser_PLSQLKeys.translate_key_return translate_key() throws RecognitionException { return gPLSQLKeys.translate_key(); }

    public PLSQLParser_PLSQLKeys.serializable_key_return serializable_key() throws RecognitionException { return gPLSQLKeys.serializable_key(); }

    public PLSQLParser_PLSQL_DMLParser.expression_wrapper_return expression_wrapper() throws RecognitionException { return gPLSQL_DMLParser.expression_wrapper(); }

    public PLSQLParser_PLSQLKeys.to_key_return to_key() throws RecognitionException { return gPLSQLKeys.to_key(); }

    public PLSQLParser_PLSQLKeys.parallel_key_return parallel_key() throws RecognitionException { return gPLSQLKeys.parallel_key(); }

    public PLSQLParser_PLSQLKeys.for_key_return for_key() throws RecognitionException { return gPLSQLKeys.for_key(); }

    public PLSQLParser_PLSQLKeys.session_key_return session_key() throws RecognitionException { return gPLSQLKeys.session_key(); }

    public PLSQLParser_PLSQL_DMLParser.windowing_elements_return windowing_elements() throws RecognitionException { return gPLSQL_DMLParser.windowing_elements(); }

    public PLSQLParser_PLSQL_DMLParser.pivot_in_clause_return pivot_in_clause() throws RecognitionException { return gPLSQL_DMLParser.pivot_in_clause(); }

    public PLSQLParser_PLSQL_DMLParser.cursor_expression_return cursor_expression() throws RecognitionException { return gPLSQL_DMLParser.cursor_expression(); }

    public PLSQLParser_PLSQL_DMLParser.xml_namespaces_clause_return xml_namespaces_clause() throws RecognitionException { return gPLSQL_DMLParser.xml_namespaces_clause(); }

    public PLSQLParser_PLSQLKeys.sets_key_return sets_key() throws RecognitionException { return gPLSQLKeys.sets_key(); }

    public PLSQLParser_PLSQLKeys.unpivot_key_return unpivot_key() throws RecognitionException { return gPLSQLKeys.unpivot_key(); }

    public PLSQLParser_PLSQLKeys.logoff_key_return logoff_key() throws RecognitionException { return gPLSQLKeys.logoff_key(); }

    public PLSQLParser_PLSQLKeys.associate_key_return associate_key() throws RecognitionException { return gPLSQLKeys.associate_key(); }

    public PLSQLParser_PLSQL_DMLParser.using_clause_return using_clause() throws RecognitionException { return gPLSQL_DMLParser.using_clause(); }

    public PLSQLParser_PLSQLKeys.system_key_return system_key() throws RecognitionException { return gPLSQLKeys.system_key(); }

    public PLSQLParser_PLSQLKeys.package_key_return package_key() throws RecognitionException { return gPLSQLKeys.package_key(); }

    public PLSQLParser_PLSQLKeys.month_key_return month_key() throws RecognitionException { return gPLSQLKeys.month_key(); }

    public PLSQLParser_PLSQLKeys.xmlforest_key_return xmlforest_key() throws RecognitionException { return gPLSQLKeys.xmlforest_key(); }

    public PLSQLParser_PLSQL_DMLParser.update_set_clause_return update_set_clause() throws RecognitionException { return gPLSQL_DMLParser.update_set_clause(); }

    public PLSQLParser_PLSQLKeys.value_key_return value_key() throws RecognitionException { return gPLSQLKeys.value_key(); }

    public PLSQLParser_PLSQL_DMLParser.delete_statement_return delete_statement() throws RecognitionException { return gPLSQL_DMLParser.delete_statement(); }

    public PLSQLParser_PLSQLCommons.parameter_name_return parameter_name() throws RecognitionException { return gPLSQLCommons.parameter_name(); }

    public PLSQLParser_PLSQLKeys.having_key_return having_key() throws RecognitionException { return gPLSQLKeys.having_key(); }

    public PLSQLParser_PLSQLKeys.segment_key_return segment_key() throws RecognitionException { return gPLSQLKeys.segment_key(); }

    public PLSQLParser_PLSQLKeys.varchar_key_return varchar_key() throws RecognitionException { return gPLSQLKeys.varchar_key(); }

    public PLSQLParser_PLSQLKeys.nclob_key_return nclob_key() throws RecognitionException { return gPLSQLKeys.nclob_key(); }

    public PLSQLParser_PLSQLKeys.trim_key_return trim_key() throws RecognitionException { return gPLSQLKeys.trim_key(); }

    public PLSQLParser_PLSQLKeys.keep_key_return keep_key() throws RecognitionException { return gPLSQLKeys.keep_key(); }

    public PLSQLParser_PLSQLKeys.xmlcolattval_key_return xmlcolattval_key() throws RecognitionException { return gPLSQLKeys.xmlcolattval_key(); }

    public PLSQLParser_PLSQL_DMLParser.multiply_expression_return multiply_expression() throws RecognitionException { return gPLSQL_DMLParser.multiply_expression(); }

    public PLSQLParser_PLSQL_DMLParser.model_rules_clause_return model_rules_clause() throws RecognitionException { return gPLSQL_DMLParser.model_rules_clause(); }

    public PLSQLParser_PLSQLKeys.like4_key_return like4_key() throws RecognitionException { return gPLSQLKeys.like4_key(); }

    public PLSQLParser_PLSQLKeys.cluster_key_return cluster_key() throws RecognitionException { return gPLSQLKeys.cluster_key(); }

    public PLSQLParser_PLSQLKeys.cursor_key_return cursor_key() throws RecognitionException { return gPLSQLKeys.cursor_key(); }

    public PLSQLParser_PLSQLCommons.label_name_return label_name() throws RecognitionException { return gPLSQLCommons.label_name(); }

    public PLSQLParser_PLSQLKeys.plan_key_return plan_key() throws RecognitionException { return gPLSQLKeys.plan_key(); }

    public PLSQLParser_PLSQLKeys.to_number_key_return to_number_key() throws RecognitionException { return gPLSQLKeys.to_number_key(); }

    public PLSQLParser_PLSQL_DMLParser.dml_table_expression_clause_return dml_table_expression_clause() throws RecognitionException { return gPLSQL_DMLParser.dml_table_expression_clause(); }

    public PLSQLParser_PLSQL_DMLParser.outer_join_type_return outer_join_type() throws RecognitionException { return gPLSQL_DMLParser.outer_join_type(); }

    public PLSQLParser_PLSQL_DMLParser.within_or_over_part_return within_or_over_part() throws RecognitionException { return gPLSQL_DMLParser.within_or_over_part(); }

    public PLSQLParser_PLSQLKeys.all_key_return all_key() throws RecognitionException { return gPLSQLKeys.all_key(); }

    public PLSQLParser_PLSQLCommons.function_argument_modeling_return function_argument_modeling() throws RecognitionException { return gPLSQLCommons.function_argument_modeling(); }

    public PLSQLParser_PLSQLKeys.avg_key_return avg_key() throws RecognitionException { return gPLSQLKeys.avg_key(); }

    public PLSQLParser_PLSQLKeys.corrupt_xid_key_return corrupt_xid_key() throws RecognitionException { return gPLSQLKeys.corrupt_xid_key(); }

    public PLSQLParser_PLSQLCommons.char_set_name_return char_set_name() throws RecognitionException { return gPLSQLCommons.char_set_name(); }

    public PLSQLParser_PLSQLKeys.decompose_key_return decompose_key() throws RecognitionException { return gPLSQLKeys.decompose_key(); }

    public PLSQLParser_PLSQLKeys.string_key_return string_key() throws RecognitionException { return gPLSQLKeys.string_key(); }

    public PLSQLParser_PLSQLKeys.reverse_key_return reverse_key() throws RecognitionException { return gPLSQLKeys.reverse_key(); }

    public PLSQLParser_PLSQL_DMLParser.conditional_insert_when_part_return conditional_insert_when_part() throws RecognitionException { return gPLSQL_DMLParser.conditional_insert_when_part(); }

    public PLSQLParser_PLSQLCommons.sequence_name_return sequence_name() throws RecognitionException { return gPLSQLCommons.sequence_name(); }

    public PLSQLParser_PLSQL_DMLParser.searched_case_statement_return searched_case_statement() throws RecognitionException { return gPLSQL_DMLParser.searched_case_statement(); }

    public PLSQLParser_PLSQLKeys.call_key_return call_key() throws RecognitionException { return gPLSQLKeys.call_key(); }

    public PLSQLParser_PLSQLKeys.binary_float_nan_key_return binary_float_nan_key() throws RecognitionException { return gPLSQLKeys.binary_float_nan_key(); }

    public PLSQLParser_PLSQLCommons.collection_name_return collection_name() throws RecognitionException { return gPLSQLCommons.collection_name(); }

    public PLSQLParser_PLSQLKeys.lock_key_return lock_key() throws RecognitionException { return gPLSQLKeys.lock_key(); }

    public PLSQLParser_PLSQLKeys.body_key_return body_key() throws RecognitionException { return gPLSQLKeys.body_key(); }

    public PLSQLParser_PLSQLCommons.bind_variable_return bind_variable() throws RecognitionException { return gPLSQLCommons.bind_variable(); }

    public PLSQLParser_PLSQLCommons.outer_join_sign_return outer_join_sign() throws RecognitionException { return gPLSQLCommons.outer_join_sign(); }

    public PLSQLParser_PLSQLKeys.iterate_key_return iterate_key() throws RecognitionException { return gPLSQLKeys.iterate_key(); }

    public PLSQLParser_PLSQL_DMLParser.sample_clause_return sample_clause() throws RecognitionException { return gPLSQL_DMLParser.sample_clause(); }

    public PLSQLParser_PLSQL_DMLParser.join_using_part_return join_using_part() throws RecognitionException { return gPLSQL_DMLParser.join_using_part(); }

    public PLSQLParser_PLSQLKeys.block_key_return block_key() throws RecognitionException { return gPLSQLKeys.block_key(); }

    public PLSQLParser_PLSQLKeys.clob_key_return clob_key() throws RecognitionException { return gPLSQLKeys.clob_key(); }

    public PLSQLParser_PLSQLKeys.save_key_return save_key() throws RecognitionException { return gPLSQLKeys.save_key(); }

    public PLSQLParser_PLSQLCommons.variable_name_return variable_name() throws RecognitionException { return gPLSQLCommons.variable_name(); }

    public PLSQLParser_PLSQLKeys.option_key_return option_key() throws RecognitionException { return gPLSQLKeys.option_key(); }

    public PLSQLParser_PLSQLKeys.minute_key_return minute_key() throws RecognitionException { return gPLSQLKeys.minute_key(); }

    public PLSQLParser_PLSQLKeys.oserror_key_return oserror_key() throws RecognitionException { return gPLSQLKeys.oserror_key(); }

    public PLSQLParser_PLSQLKeys.cross_key_return cross_key() throws RecognitionException { return gPLSQLKeys.cross_key(); }

    public PLSQLParser_PLSQLKeys.right_key_return right_key() throws RecognitionException { return gPLSQLKeys.right_key(); }

    public PLSQLParser_PLSQLKeys.dbtimezone_key_return dbtimezone_key() throws RecognitionException { return gPLSQLKeys.dbtimezone_key(); }

    public PLSQLParser_PLSQLKeys.dense_rank_key_return dense_rank_key() throws RecognitionException { return gPLSQLKeys.dense_rank_key(); }

    public PLSQLParser_PLSQLKeys.reuse_key_return reuse_key() throws RecognitionException { return gPLSQLKeys.reuse_key(); }

    public PLSQLParser_PLSQLKeys.check_key_return check_key() throws RecognitionException { return gPLSQLKeys.check_key(); }

    public PLSQLParser_PLSQL_DMLParser.expression_or_vector_return expression_or_vector() throws RecognitionException { return gPLSQL_DMLParser.expression_or_vector(); }

    public PLSQLParser_PLSQLKeys.off_key_return off_key() throws RecognitionException { return gPLSQLKeys.off_key(); }

    public PLSQLParser_PLSQL_DMLParser.quantified_expression_return quantified_expression() throws RecognitionException { return gPLSQL_DMLParser.quantified_expression(); }

    public PLSQLParser_PLSQL_DMLParser.stantard_function_enabling_using_return stantard_function_enabling_using() throws RecognitionException { return gPLSQL_DMLParser.stantard_function_enabling_using(); }

    public PLSQLParser_PLSQLKeys.nvl_key_return nvl_key() throws RecognitionException { return gPLSQLKeys.nvl_key(); }

    public PLSQLParser_PLSQLKeys.coalesce_key_return coalesce_key() throws RecognitionException { return gPLSQLKeys.coalesce_key(); }

    public PLSQLParser_PLSQLKeys.serveroutput_key_return serveroutput_key() throws RecognitionException { return gPLSQLKeys.serveroutput_key(); }

    public PLSQLParser_PLSQLKeys.timezone_minute_key_return timezone_minute_key() throws RecognitionException { return gPLSQLKeys.timezone_minute_key(); }

    public PLSQLParser_PLSQLKeys.rowid_key_return rowid_key() throws RecognitionException { return gPLSQLKeys.rowid_key(); }

    public PLSQLParser_PLSQLKeys.forall_key_return forall_key() throws RecognitionException { return gPLSQLKeys.forall_key(); }

    public PLSQLParser_PLSQLKeys.invalidate_key_return invalidate_key() throws RecognitionException { return gPLSQLKeys.invalidate_key(); }

    public PLSQLParser_PLSQLKeys.naturaln_key_return naturaln_key() throws RecognitionException { return gPLSQLKeys.naturaln_key(); }

    public PLSQLParser_PLSQLKeys.nan_key_return nan_key() throws RecognitionException { return gPLSQLKeys.nan_key(); }

    public PLSQLParser_PLSQLKeys.log_key_return log_key() throws RecognitionException { return gPLSQLKeys.log_key(); }

    public PLSQLParser_PLSQLKeys.specification_key_return specification_key() throws RecognitionException { return gPLSQLKeys.specification_key(); }

    public PLSQLParser_PLSQLKeys.result_cache_key_return result_cache_key() throws RecognitionException { return gPLSQLKeys.result_cache_key(); }

    public PLSQLParser_PLSQLCommons.constraint_name_return constraint_name() throws RecognitionException { return gPLSQLCommons.constraint_name(); }

    public PLSQLParser_PLSQL_DMLParser.query_partition_clause_return query_partition_clause() throws RecognitionException { return gPLSQL_DMLParser.query_partition_clause(); }

    public PLSQLParser_PLSQLKeys.variable_key_return variable_key() throws RecognitionException { return gPLSQLKeys.variable_key(); }

    public PLSQLParser_PLSQLKeys.success_key_return success_key() throws RecognitionException { return gPLSQLKeys.success_key(); }

    public PLSQLParser_PLSQL_DMLParser.for_like_part_return for_like_part() throws RecognitionException { return gPLSQL_DMLParser.for_like_part(); }

    public PLSQLParser_PLSQLCommons.less_than_or_equals_op_return less_than_or_equals_op() throws RecognitionException { return gPLSQLCommons.less_than_or_equals_op(); }

    public PLSQLParser_PLSQLKeys.begin_key_return begin_key() throws RecognitionException { return gPLSQLKeys.begin_key(); }

    public PLSQLParser_PLSQLKeys.add_key_return add_key() throws RecognitionException { return gPLSQLKeys.add_key(); }

    public PLSQLParser_PLSQLKeys.ordinality_key_return ordinality_key() throws RecognitionException { return gPLSQLKeys.ordinality_key(); }

    public PLSQLParser_PLSQL_DMLParser.conditional_insert_clause_return conditional_insert_clause() throws RecognitionException { return gPLSQL_DMLParser.conditional_insert_clause(); }

    public PLSQLParser_PLSQLKeys.wellformed_key_return wellformed_key() throws RecognitionException { return gPLSQLKeys.wellformed_key(); }

    public PLSQLParser_PLSQLKeys.byte_key_return byte_key() throws RecognitionException { return gPLSQLKeys.byte_key(); }

    public PLSQLParser_PLSQLKeys.preceding_key_return preceding_key() throws RecognitionException { return gPLSQLKeys.preceding_key(); }

    public PLSQLParser_PLSQLKeys.not_key_return not_key() throws RecognitionException { return gPLSQLKeys.not_key(); }

    public PLSQLParser_PLSQLKeys.lpad_key_return lpad_key() throws RecognitionException { return gPLSQLKeys.lpad_key(); }

    public PLSQLParser_PLSQLCommons.table_alias_return table_alias() throws RecognitionException { return gPLSQLCommons.table_alias(); }

    public PLSQLParser_PLSQLKeys.dml_key_return dml_key() throws RecognitionException { return gPLSQLKeys.dml_key(); }

    public PLSQLParser_PLSQLKeys.canonical_key_return canonical_key() throws RecognitionException { return gPLSQLKeys.canonical_key(); }

    public PLSQLParser_PLSQLKeys.timestamp_ltz_unconstrained_key_return timestamp_ltz_unconstrained_key() throws RecognitionException { return gPLSQLKeys.timestamp_ltz_unconstrained_key(); }

    public PLSQLParser_PLSQLKeys.snapshot_key_return snapshot_key() throws RecognitionException { return gPLSQLKeys.snapshot_key(); }

    public PLSQLParser_PLSQL_DMLParser.merge_insert_clause_return merge_insert_clause() throws RecognitionException { return gPLSQL_DMLParser.merge_insert_clause(); }

    public PLSQLParser_PLSQLKeys.after_key_return after_key() throws RecognitionException { return gPLSQLKeys.after_key(); }

    public PLSQLParser_PLSQLCommons.type_spec_return type_spec() throws RecognitionException { return gPLSQLCommons.type_spec(); }

    public PLSQLParser_PLSQLKeys.context_key_return context_key() throws RecognitionException { return gPLSQLKeys.context_key(); }

    public PLSQLParser_PLSQL_DMLParser.unpivot_clause_return unpivot_clause() throws RecognitionException { return gPLSQL_DMLParser.unpivot_clause(); }

    public PLSQLParser_PLSQLKeys.cube_key_return cube_key() throws RecognitionException { return gPLSQLKeys.cube_key(); }

    public PLSQLParser_PLSQLKeys.union_key_return union_key() throws RecognitionException { return gPLSQLKeys.union_key(); }

    public PLSQLParser_PLSQLKeys.ltrim_key_return ltrim_key() throws RecognitionException { return gPLSQLKeys.ltrim_key(); }

    public PLSQLParser_PLSQLKeys.module_key_return module_key() throws RecognitionException { return gPLSQLKeys.module_key(); }

    public PLSQLParser_PLSQLKeys.execute_key_return execute_key() throws RecognitionException { return gPLSQLKeys.execute_key(); }

    public PLSQLParser_PLSQLKeys.updated_key_return updated_key() throws RecognitionException { return gPLSQLKeys.updated_key(); }

    public PLSQLParser_PLSQLKeys.left_key_return left_key() throws RecognitionException { return gPLSQLKeys.left_key(); }

    public PLSQLParser_PLSQLKeys.vsize_key_return vsize_key() throws RecognitionException { return gPLSQLKeys.vsize_key(); }

    public PLSQLParser_PLSQLCommons.rollback_segment_name_return rollback_segment_name() throws RecognitionException { return gPLSQLCommons.rollback_segment_name(); }

    public PLSQLParser_PLSQLKeys.substring_key_return substring_key() throws RecognitionException { return gPLSQLKeys.substring_key(); }

    public PLSQLParser_PLSQLKeys.auto_key_return auto_key() throws RecognitionException { return gPLSQLKeys.auto_key(); }

    public PLSQLParser_PLSQLKeys.xmlagg_key_return xmlagg_key() throws RecognitionException { return gPLSQLKeys.xmlagg_key(); }

    public PLSQLParser_PLSQLKeys.last_key_return last_key() throws RecognitionException { return gPLSQLKeys.last_key(); }

    public PLSQLParser_PLSQLKeys.rtrim_key_return rtrim_key() throws RecognitionException { return gPLSQLKeys.rtrim_key(); }

    public PLSQLParser_PLSQLKeys.nothing_key_return nothing_key() throws RecognitionException { return gPLSQLKeys.nothing_key(); }

    public PLSQLParser_PLSQLKeys.revoke_key_return revoke_key() throws RecognitionException { return gPLSQLKeys.revoke_key(); }

    public PLSQLParser_PLSQLKeys.depth_key_return depth_key() throws RecognitionException { return gPLSQLKeys.depth_key(); }

    public PLSQLParser_PLSQL_DMLParser.subquery_return subquery() throws RecognitionException { return gPLSQL_DMLParser.subquery(); }

    public PLSQLParser_PLSQLCommons.record_name_return record_name() throws RecognitionException { return gPLSQLCommons.record_name(); }

    public PLSQLParser_PLSQLKeys.day_key_return day_key() throws RecognitionException { return gPLSQLKeys.day_key(); }

    public PLSQLParser_PLSQLKeys.hour_key_return hour_key() throws RecognitionException { return gPLSQLKeys.hour_key(); }

    public PLSQLParser_PLSQLCommons.greater_than_or_equals_op_return greater_than_or_equals_op() throws RecognitionException { return gPLSQLCommons.greater_than_or_equals_op(); }

    public PLSQLParser_PLSQLCommons.function_name_return function_name() throws RecognitionException { return gPLSQLCommons.function_name(); }

    public PLSQLParser_PLSQLKeys.values_key_return values_key() throws RecognitionException { return gPLSQLKeys.values_key(); }

    public PLSQLParser_PLSQLKeys.grouping_key_return grouping_key() throws RecognitionException { return gPLSQLKeys.grouping_key(); }

    public PLSQLParser_PLSQLKeys.object_key_return object_key() throws RecognitionException { return gPLSQLKeys.object_key(); }

    public PLSQLParser_PLSQLKeys.treat_key_return treat_key() throws RecognitionException { return gPLSQLKeys.treat_key(); }

    public PLSQLParser_PLSQLKeys.truncate_key_return truncate_key() throws RecognitionException { return gPLSQLKeys.truncate_key(); }

    public PLSQLParser_PLSQLKeys.mode_key_return mode_key() throws RecognitionException { return gPLSQLKeys.mode_key(); }

    public PLSQLParser_PLSQLKeys.final_key_return final_key() throws RecognitionException { return gPLSQLKeys.final_key(); }

    public PLSQLParser_PLSQLKeys.connect_key_return connect_key() throws RecognitionException { return gPLSQLKeys.connect_key(); }

    public PLSQLParser_PLSQLKeys.into_key_return into_key() throws RecognitionException { return gPLSQLKeys.into_key(); }

    public PLSQLParser_PLSQLKeys.statistics_key_return statistics_key() throws RecognitionException { return gPLSQLKeys.statistics_key(); }

    public PLSQLParser_PLSQLKeys.fetch_key_return fetch_key() throws RecognitionException { return gPLSQLKeys.fetch_key(); }

    public PLSQLParser_PLSQLKeys.intersect_key_return intersect_key() throws RecognitionException { return gPLSQLKeys.intersect_key(); }

    public PLSQLParser_PLSQLKeys.true_key_return true_key() throws RecognitionException { return gPLSQLKeys.true_key(); }

    public PLSQLParser_PLSQLKeys.max_key_return max_key() throws RecognitionException { return gPLSQLKeys.max_key(); }

    public PLSQLParser_PLSQLKeys.decrement_key_return decrement_key() throws RecognitionException { return gPLSQLKeys.decrement_key(); }

    public PLSQLParser_PLSQLKeys.precision_key_return precision_key() throws RecognitionException { return gPLSQLKeys.precision_key(); }

    public PLSQLParser_PLSQLKeys.immediate_key_return immediate_key() throws RecognitionException { return gPLSQLKeys.immediate_key(); }

    public PLSQLParser_PLSQL_DMLParser.between_elements_return between_elements() throws RecognitionException { return gPLSQL_DMLParser.between_elements(); }

    public PLSQLParser_PLSQLKeys.limit_key_return limit_key() throws RecognitionException { return gPLSQLKeys.limit_key(); }

    public PLSQLParser_PLSQL_DMLParser.insert_into_clause_return insert_into_clause() throws RecognitionException { return gPLSQL_DMLParser.insert_into_clause(); }

    public PLSQLParser_PLSQLKeys.rows_key_return rows_key() throws RecognitionException { return gPLSQLKeys.rows_key(); }

    public PLSQLParser_PLSQLKeys.count_key_return count_key() throws RecognitionException { return gPLSQLKeys.count_key(); }

    public PLSQLParser_PLSQL_DMLParser.windowing_type_return windowing_type() throws RecognitionException { return gPLSQL_DMLParser.windowing_type(); }

    public PLSQLParser_PLSQLKeys.extend_key_return extend_key() throws RecognitionException { return gPLSQLKeys.extend_key(); }

    public PLSQLParser_PLSQLKeys.length_key_return length_key() throws RecognitionException { return gPLSQLKeys.length_key(); }

    public PLSQLParser_PLSQLKeys.select_key_return select_key() throws RecognitionException { return gPLSQLKeys.select_key(); }

    public PLSQLParser_PLSQLKeys.over_key_return over_key() throws RecognitionException { return gPLSQLKeys.over_key(); }

    public PLSQLParser_PLSQLKeys.mlslabel_key_return mlslabel_key() throws RecognitionException { return gPLSQLKeys.mlslabel_key(); }

    public PLSQLParser_PLSQLKeys.char_cs_key_return char_cs_key() throws RecognitionException { return gPLSQLKeys.char_cs_key(); }

    public PLSQLParser_PLSQLKeys.oradata_key_return oradata_key() throws RecognitionException { return gPLSQLKeys.oradata_key(); }

    public PLSQLParser_PLSQLKeys.indicator_key_return indicator_key() throws RecognitionException { return gPLSQLKeys.indicator_key(); }

    public PLSQLParser_PLSQL_DMLParser.factoring_element_return factoring_element() throws RecognitionException { return gPLSQL_DMLParser.factoring_element(); }

    public PLSQLParser_PLSQLKeys.greatest_key_return greatest_key() throws RecognitionException { return gPLSQLKeys.greatest_key(); }

    public PLSQLParser_PLSQL_DMLParser.xmlroot_param_standalone_part_return xmlroot_param_standalone_part() throws RecognitionException { return gPLSQL_DMLParser.xmlroot_param_standalone_part(); }

    public PLSQLParser_PLSQL_DMLParser.simple_case_when_part_return simple_case_when_part() throws RecognitionException { return gPLSQL_DMLParser.simple_case_when_part(); }

    public PLSQLParser_PLSQLKeys.measures_key_return measures_key() throws RecognitionException { return gPLSQLKeys.measures_key(); }

    public PLSQLParser_PLSQLKeys.present_key_return present_key() throws RecognitionException { return gPLSQLKeys.present_key(); }

    public PLSQLParser_PLSQLKeys.binary_float_min_subnormal_key_return binary_float_min_subnormal_key() throws RecognitionException { return gPLSQLKeys.binary_float_min_subnormal_key(); }

    public PLSQLParser_PLSQLKeys.return_key_return return_key() throws RecognitionException { return gPLSQLKeys.return_key(); }

    public PLSQLParser_PLSQLKeys.startup_key_return startup_key() throws RecognitionException { return gPLSQLKeys.startup_key(); }

    public PLSQLParser_PLSQL_DMLParser.cell_reference_options_return cell_reference_options() throws RecognitionException { return gPLSQL_DMLParser.cell_reference_options(); }

    public PLSQLParser_PLSQLKeys.xmlnamespaces_key_return xmlnamespaces_key() throws RecognitionException { return gPLSQLKeys.xmlnamespaces_key(); }

    public PLSQLParser_PLSQLKeys.seed_key_return seed_key() throws RecognitionException { return gPLSQLKeys.seed_key(); }

    public PLSQLParser_PLSQL_DMLParser.join_on_part_return join_on_part() throws RecognitionException { return gPLSQL_DMLParser.join_on_part(); }

    public PLSQLParser_PLSQLKeys.sign_key_return sign_key() throws RecognitionException { return gPLSQLKeys.sign_key(); }

    public PLSQLParser_PLSQLKeys.query_key_return query_key() throws RecognitionException { return gPLSQLKeys.query_key(); }

    public PLSQLParser_PLSQLKeys.except_key_return except_key() throws RecognitionException { return gPLSQLKeys.except_key(); }

    public PLSQLParser_PLSQLKeys.procedure_key_return procedure_key() throws RecognitionException { return gPLSQLKeys.procedure_key(); }

    public PLSQLParser_PLSQL_DMLParser.merge_statement_return merge_statement() throws RecognitionException { return gPLSQL_DMLParser.merge_statement(); }

    public PLSQLParser_PLSQLKeys.long_key_return long_key() throws RecognitionException { return gPLSQLKeys.long_key(); }

    public PLSQLParser_PLSQLKeys.noschemacheck_key_return noschemacheck_key() throws RecognitionException { return gPLSQLKeys.noschemacheck_key(); }

    public PLSQLParser_PLSQLKeys.distinct_key_return distinct_key() throws RecognitionException { return gPLSQLKeys.distinct_key(); }

    public PLSQLParser_PLSQL_DMLParser.select_statement_return select_statement() throws RecognitionException { return gPLSQL_DMLParser.select_statement(); }

    public PLSQLParser_PLSQLKeys.hash_key_return hash_key() throws RecognitionException { return gPLSQLKeys.hash_key(); }

    public PLSQLParser_PLSQLCommons.implementation_type_name_return implementation_type_name() throws RecognitionException { return gPLSQLCommons.implementation_type_name(); }

    public PLSQLParser_PLSQLKeys.corrupt_xid_all_key_return corrupt_xid_all_key() throws RecognitionException { return gPLSQLKeys.corrupt_xid_all_key(); }

    public PLSQLParser_PLSQLKeys.ddl_key_return ddl_key() throws RecognitionException { return gPLSQLKeys.ddl_key(); }

    public PLSQLParser_PLSQLCommons.precision_part_return precision_part() throws RecognitionException { return gPLSQLCommons.precision_part(); }

    public PLSQLParser_PLSQLKeys.entityescaping_key_return entityescaping_key() throws RecognitionException { return gPLSQLKeys.entityescaping_key(); }

    public PLSQLParser_PLSQLKeys.dump_key_return dump_key() throws RecognitionException { return gPLSQLKeys.dump_key(); }

    public PLSQLParser_PLSQLKeys.rollup_key_return rollup_key() throws RecognitionException { return gPLSQLKeys.rollup_key(); }

    public PLSQLParser_PLSQLKeys.constraints_key_return constraints_key() throws RecognitionException { return gPLSQLKeys.constraints_key(); }

    public PLSQLParser_PLSQLKeys.wait_key_return wait_key() throws RecognitionException { return gPLSQLKeys.wait_key(); }

    public PLSQLParser_PLSQL_DMLParser.collect_order_by_part_return collect_order_by_part() throws RecognitionException { return gPLSQL_DMLParser.collect_order_by_part(); }

    public PLSQLParser_PLSQLKeys.false_key_return false_key() throws RecognitionException { return gPLSQLKeys.false_key(); }

    public PLSQLParser_PLSQLKeys.rules_key_return rules_key() throws RecognitionException { return gPLSQLKeys.rules_key(); }

    public PLSQLParser_PLSQLKeys.binary_float_min_normal_key_return binary_float_min_normal_key() throws RecognitionException { return gPLSQLKeys.binary_float_min_normal_key(); }

    public PLSQLParser_PLSQLKeys.pragma_key_return pragma_key() throws RecognitionException { return gPLSQLKeys.pragma_key(); }

    public PLSQLParser_PLSQLKeys.exclusive_key_return exclusive_key() throws RecognitionException { return gPLSQLKeys.exclusive_key(); }

    public PLSQLParser_PLSQLKeys.reject_key_return reject_key() throws RecognitionException { return gPLSQLKeys.reject_key(); }

    public PLSQLParser_PLSQLKeys.any_key_return any_key() throws RecognitionException { return gPLSQLKeys.any_key(); }

    public PLSQLParser_PLSQLKeys.following_key_return following_key() throws RecognitionException { return gPLSQLKeys.following_key(); }

    public PLSQLParser_PLSQLKeys.substitutable_key_return substitutable_key() throws RecognitionException { return gPLSQLKeys.substitutable_key(); }

    public PLSQLParser_PLSQLKeys.agent_key_return agent_key() throws RecognitionException { return gPLSQLKeys.agent_key(); }

    public PLSQLParser_PLSQLCommons.keep_clause_return keep_clause() throws RecognitionException { return gPLSQLCommons.keep_clause(); }

    public PLSQLParser_PLSQLKeys.pls_integer_key_return pls_integer_key() throws RecognitionException { return gPLSQLKeys.pls_integer_key(); }

    public PLSQLParser_PLSQL_DMLParser.wait_nowait_part_return wait_nowait_part() throws RecognitionException { return gPLSQL_DMLParser.wait_nowait_part(); }

    public PLSQLParser_PLSQLKeys.blob_key_return blob_key() throws RecognitionException { return gPLSQLKeys.blob_key(); }

    public PLSQLParser_PLSQLKeys.authid_key_return authid_key() throws RecognitionException { return gPLSQLKeys.authid_key(); }

    public PLSQLParser_PLSQL_DMLParser.relational_expression_return relational_expression() throws RecognitionException { return gPLSQL_DMLParser.relational_expression(); }

    public PLSQLParser_PLSQLCommons.general_element_return general_element() throws RecognitionException { return gPLSQLCommons.general_element(); }

    public PLSQLParser_PLSQLCommons.type_name_return type_name() throws RecognitionException { return gPLSQLCommons.type_name(); }

    public PLSQLParser_PLSQLKeys.binary_double_min_normal_key_return binary_double_min_normal_key() throws RecognitionException { return gPLSQLKeys.binary_double_min_normal_key(); }

    public PLSQLParser_PLSQLKeys.delete_key_return delete_key() throws RecognitionException { return gPLSQLKeys.delete_key(); }

    public PLSQLParser_PLSQLKeys.urowid_key_return urowid_key() throws RecognitionException { return gPLSQLKeys.urowid_key(); }

    public PLSQLParser_PLSQLKeys.as_key_return as_key() throws RecognitionException { return gPLSQLKeys.as_key(); }

    public PLSQLParser_PLSQLCommons.attribute_name_return attribute_name() throws RecognitionException { return gPLSQLCommons.attribute_name(); }

    public PLSQLParser_PLSQLKeys.guard_key_return guard_key() throws RecognitionException { return gPLSQLKeys.guard_key(); }

    public PLSQLParser_PLSQLKeys.asc_key_return asc_key() throws RecognitionException { return gPLSQLKeys.asc_key(); }

    public PLSQLParser_PLSQLKeys.local_key_return local_key() throws RecognitionException { return gPLSQLKeys.local_key(); }

    public PLSQLParser_PLSQLKeys.nominvalue_key_return nominvalue_key() throws RecognitionException { return gPLSQLKeys.nominvalue_key(); }

    public PLSQLParser_PLSQL_DMLParser.return_rows_clause_return return_rows_clause() throws RecognitionException { return gPLSQL_DMLParser.return_rows_clause(); }

    public PLSQLParser_PLSQLKeys.integer_key_return integer_key() throws RecognitionException { return gPLSQLKeys.integer_key(); }

    public PLSQLParser_PLSQLCommons.partition_extension_clause_return partition_extension_clause() throws RecognitionException { return gPLSQLCommons.partition_extension_clause(); }

    public PLSQLParser_PLSQL_DMLParser.static_returning_clause_return static_returning_clause() throws RecognitionException { return gPLSQL_DMLParser.static_returning_clause(); }

    public PLSQLParser_PLSQL_DMLParser.main_model_return main_model() throws RecognitionException { return gPLSQL_DMLParser.main_model(); }

    public PLSQLParser_PLSQLKeys.binary_float_infinity_key_return binary_float_infinity_key() throws RecognitionException { return gPLSQLKeys.binary_float_infinity_key(); }

    public PLSQLParser_PLSQL_DMLParser.expression_list_return expression_list() throws RecognitionException { return gPLSQL_DMLParser.expression_list(); }

    public PLSQLParser_PLSQLCommons.savepoint_name_return savepoint_name() throws RecognitionException { return gPLSQLCommons.savepoint_name(); }

    public PLSQLParser_PLSQLKeys.pivot_key_return pivot_key() throws RecognitionException { return gPLSQLKeys.pivot_key(); }

    public PLSQLParser_PLSQL_DMLParser.model_iterate_clause_return model_iterate_clause() throws RecognitionException { return gPLSQL_DMLParser.model_iterate_clause(); }

    public PLSQLParser_PLSQL_DMLParser.pivot_in_clause_element_return pivot_in_clause_element() throws RecognitionException { return gPLSQL_DMLParser.pivot_in_clause_element(); }

    public PLSQLParser_PLSQLKeys.parent_key_return parent_key() throws RecognitionException { return gPLSQLKeys.parent_key(); }

    public PLSQLParser_PLSQL_DMLParser.cycle_clause_return cycle_clause() throws RecognitionException { return gPLSQL_DMLParser.cycle_clause(); }

    public PLSQLParser_PLSQLKeys.aggregate_key_return aggregate_key() throws RecognitionException { return gPLSQLKeys.aggregate_key(); }

    public PLSQLParser_PLSQLKeys.exists_key_return exists_key() throws RecognitionException { return gPLSQLKeys.exists_key(); }

    public PLSQLParser_PLSQLKeys.scn_key_return scn_key() throws RecognitionException { return gPLSQLKeys.scn_key(); }

    public PLSQLParser_PLSQL_DMLParser.table_ref_aux_return table_ref_aux() throws RecognitionException { return gPLSQL_DMLParser.table_ref_aux(); }

    public PLSQLParser_PLSQL_DMLParser.lock_mode_return lock_mode() throws RecognitionException { return gPLSQL_DMLParser.lock_mode(); }

    public PLSQLParser_PLSQLKeys.relies_on_key_return relies_on_key() throws RecognitionException { return gPLSQLKeys.relies_on_key(); }

    public PLSQLParser_PLSQLKeys.concat_key_return concat_key() throws RecognitionException { return gPLSQLKeys.concat_key(); }

    public PLSQLParser_PLSQLKeys.character_length_key_return character_length_key() throws RecognitionException { return gPLSQLKeys.character_length_key(); }

    public PLSQLParser_PLSQLCommons.column_alias_return column_alias() throws RecognitionException { return gPLSQLCommons.column_alias(); }

    public PLSQLParser_PLSQL_DMLParser.multiset_type_return multiset_type() throws RecognitionException { return gPLSQL_DMLParser.multiset_type(); }

    public PLSQLParser_PLSQL_DMLParser.concatenation_return concatenation() throws RecognitionException { return gPLSQL_DMLParser.concatenation(); }

    public PLSQLParser_PLSQLKeys.suspend_key_return suspend_key() throws RecognitionException { return gPLSQLKeys.suspend_key(); }

    public PLSQLParser_PLSQL_DMLParser.conditional_insert_else_part_return conditional_insert_else_part() throws RecognitionException { return gPLSQL_DMLParser.conditional_insert_else_part(); }

    public PLSQLParser_PLSQLCommons.current_of_clause_return current_of_clause() throws RecognitionException { return gPLSQLCommons.current_of_clause(); }

    public PLSQLParser_PLSQLKeys.xmlelement_key_return xmlelement_key() throws RecognitionException { return gPLSQLKeys.xmlelement_key(); }

    public PLSQLParser_PLSQLKeys.bit_length_key_return bit_length_key() throws RecognitionException { return gPLSQLKeys.bit_length_key(); }

    public PLSQLParser_PLSQLCommons.function_argument_return function_argument() throws RecognitionException { return gPLSQLCommons.function_argument(); }

    public PLSQLParser_PLSQLKeys.round_key_return round_key() throws RecognitionException { return gPLSQLKeys.round_key(); }

    public PLSQLParser_PLSQLKeys.empty_key_return empty_key() throws RecognitionException { return gPLSQLKeys.empty_key(); }

    public PLSQLParser_PLSQLKeys.transaction_key_return transaction_key() throws RecognitionException { return gPLSQLKeys.transaction_key(); }

    public PLSQLParser_PLSQLKeys.respect_key_return respect_key() throws RecognitionException { return gPLSQLKeys.respect_key(); }

    public PLSQLParser_PLSQLKeys.parameters_key_return parameters_key() throws RecognitionException { return gPLSQLKeys.parameters_key(); }

    public PLSQLParser_PLSQLKeys.bfile_key_return bfile_key() throws RecognitionException { return gPLSQLKeys.bfile_key(); }

    public PLSQLParser_SQLPLUSParser.prompt_command_return prompt_command() throws RecognitionException { return gSQLPLUSParser.prompt_command(); }

    public PLSQLParser_PLSQLKeys.skip_key_return skip_key() throws RecognitionException { return gPLSQLKeys.skip_key(); }

    public PLSQLParser_PLSQLKeys.trunc_key_return trunc_key() throws RecognitionException { return gPLSQLKeys.trunc_key(); }

    public PLSQLParser_PLSQLKeys.current_timestamp_key_return current_timestamp_key() throws RecognitionException { return gPLSQLKeys.current_timestamp_key(); }

    public PLSQLParser_PLSQLKeys.leading_key_return leading_key() throws RecognitionException { return gPLSQLKeys.leading_key(); }

    public PLSQLParser_PLSQLKeys.data_key_return data_key() throws RecognitionException { return gPLSQLKeys.data_key(); }

    public PLSQLParser_PLSQLKeys.numeric_key_return numeric_key() throws RecognitionException { return gPLSQLKeys.numeric_key(); }

    public PLSQLParser_PLSQLKeys.sqrt_key_return sqrt_key() throws RecognitionException { return gPLSQLKeys.sqrt_key(); }

    public PLSQLParser_PLSQLKeys.deterministic_key_return deterministic_key() throws RecognitionException { return gPLSQLKeys.deterministic_key(); }

    public PLSQLParser_PLSQLKeys.between_key_return between_key() throws RecognitionException { return gPLSQLKeys.between_key(); }

    public PLSQLParser_PLSQLKeys.function_key_return function_key() throws RecognitionException { return gPLSQLKeys.function_key(); }

    public PLSQLParser_PLSQL_DMLParser.multiset_expression_return multiset_expression() throws RecognitionException { return gPLSQL_DMLParser.multiset_expression(); }

    public PLSQLParser_PLSQLKeys.date_key_return date_key() throws RecognitionException { return gPLSQLKeys.date_key(); }

    public PLSQLParser_PLSQLKeys.dec_key_return dec_key() throws RecognitionException { return gPLSQLKeys.dec_key(); }

    public PLSQLParser_PLSQLKeys.sqldata_key_return sqldata_key() throws RecognitionException { return gPLSQLKeys.sqldata_key(); }

    public PLSQLParser_PLSQL_DMLParser.seed_part_return seed_part() throws RecognitionException { return gPLSQL_DMLParser.seed_part(); }

    public PLSQLParser_SQLPLUSParser.sql_plus_command_return sql_plus_command() throws RecognitionException { return gSQLPLUSParser.sql_plus_command(); }

    public PLSQLParser_PLSQLKeys.corresponding_key_return corresponding_key() throws RecognitionException { return gPLSQLKeys.corresponding_key(); }

    public PLSQLParser_PLSQLKeys.restrict_references_key_return restrict_references_key() throws RecognitionException { return gPLSQLKeys.restrict_references_key(); }

    public PLSQLParser_PLSQL_DMLParser.single_column_for_loop_return single_column_for_loop() throws RecognitionException { return gPLSQL_DMLParser.single_column_for_loop(); }

    public PLSQLParser_PLSQLKeys.constructor_key_return constructor_key() throws RecognitionException { return gPLSQLKeys.constructor_key(); }

    public PLSQLParser_PLSQLKeys.uid_key_return uid_key() throws RecognitionException { return gPLSQLKeys.uid_key(); }

    public PLSQLParser_PLSQL_DMLParser.atom_return atom() throws RecognitionException { return gPLSQL_DMLParser.atom(); }

    public PLSQLParser_PLSQL_DMLParser.grouping_sets_clause_return grouping_sets_clause() throws RecognitionException { return gPLSQL_DMLParser.grouping_sets_clause(); }

    public PLSQLParser_PLSQLKeys.nchar_key_return nchar_key() throws RecognitionException { return gPLSQLKeys.nchar_key(); }

    public PLSQLParser_PLSQLCommons.main_model_name_return main_model_name() throws RecognitionException { return gPLSQLCommons.main_model_name(); }

    public PLSQLParser_PLSQLKeys.is_key_return is_key() throws RecognitionException { return gPLSQLKeys.is_key(); }

    public PLSQLParser_PLSQLKeys.percent_notfound_key_return percent_notfound_key() throws RecognitionException { return gPLSQLKeys.percent_notfound_key(); }

    public PLSQLParser_PLSQLKeys.self_key_return self_key() throws RecognitionException { return gPLSQLKeys.self_key(); }

    public PLSQLParser_PLSQLKeys.binary_double_min_subnormal_key_return binary_double_min_subnormal_key() throws RecognitionException { return gPLSQLKeys.binary_double_min_subnormal_key(); }

    public PLSQLParser_PLSQLKeys.open_key_return open_key() throws RecognitionException { return gPLSQLKeys.open_key(); }

    public PLSQLParser_PLSQLKeys.to_date_key_return to_date_key() throws RecognitionException { return gPLSQLKeys.to_date_key(); }

    public PLSQLParser_PLSQL_DMLParser.having_clause_return having_clause() throws RecognitionException { return gPLSQL_DMLParser.having_clause(); }

    public PLSQLParser_PLSQL_DMLParser.rollup_cube_clause_return rollup_cube_clause() throws RecognitionException { return gPLSQL_DMLParser.rollup_cube_clause(); }

    public PLSQLParser_PLSQLKeys.varray_key_return varray_key() throws RecognitionException { return gPLSQLKeys.varray_key(); }

    public PLSQLParser_PLSQLKeys.or_key_return or_key() throws RecognitionException { return gPLSQLKeys.or_key(); }

    public PLSQLParser_PLSQLKeys.full_key_return full_key() throws RecognitionException { return gPLSQLKeys.full_key(); }

    public PLSQLParser_PLSQL_DMLParser.xml_passing_clause_return xml_passing_clause() throws RecognitionException { return gPLSQL_DMLParser.xml_passing_clause(); }

    public PLSQLParser_PLSQL_DMLParser.table_ref_list_return table_ref_list() throws RecognitionException { return gPLSQL_DMLParser.table_ref_list(); }

    public PLSQLParser_PLSQLKeys.alter_key_return alter_key() throws RecognitionException { return gPLSQLKeys.alter_key(); }

    public PLSQLParser_PLSQLKeys.match_key_return match_key() throws RecognitionException { return gPLSQLKeys.match_key(); }

    public PLSQLParser_PLSQL_DMLParser.reference_model_return reference_model() throws RecognitionException { return gPLSQL_DMLParser.reference_model(); }

    public PLSQLParser_PLSQL_DMLParser.select_list_elements_return select_list_elements() throws RecognitionException { return gPLSQL_DMLParser.select_list_elements(); }

    public PLSQLParser_PLSQLKeys.errors_key_return errors_key() throws RecognitionException { return gPLSQLKeys.errors_key(); }

    public PLSQLParser_PLSQLKeys.instead_key_return instead_key() throws RecognitionException { return gPLSQLKeys.instead_key(); }

    public PLSQLParser_PLSQLKeys.rowidtochar_key_return rowidtochar_key() throws RecognitionException { return gPLSQLKeys.rowidtochar_key(); }

    public PLSQLParser_PLSQLKeys.cast_key_return cast_key() throws RecognitionException { return gPLSQLKeys.cast_key(); }

    public PLSQLParser_PLSQLKeys.system_user_key_return system_user_key() throws RecognitionException { return gPLSQLKeys.system_user_key(); }

    public PLSQLParser_PLSQLKeys.timezone_abbr_key_return timezone_abbr_key() throws RecognitionException { return gPLSQLKeys.timezone_abbr_key(); }

    public PLSQLParser_PLSQLKeys.until_key_return until_key() throws RecognitionException { return gPLSQLKeys.until_key(); }

    public PLSQLParser_PLSQL_DMLParser.xmlserialize_param_ident_part_return xmlserialize_param_ident_part() throws RecognitionException { return gPLSQL_DMLParser.xmlserialize_param_ident_part(); }

    public PLSQLParser_PLSQLKeys.nchar_cs_key_return nchar_cs_key() throws RecognitionException { return gPLSQLKeys.nchar_cs_key(); }

    public PLSQLParser_PLSQLKeys.search_key_return search_key() throws RecognitionException { return gPLSQLKeys.search_key(); }

    public PLSQLParser_PLSQL_DMLParser.multi_column_for_loop_return multi_column_for_loop() throws RecognitionException { return gPLSQL_DMLParser.multi_column_for_loop(); }

    public PLSQLParser_PLSQLKeys.work_key_return work_key() throws RecognitionException { return gPLSQLKeys.work_key(); }

    public PLSQLParser_PLSQL_DMLParser.case_statement_return case_statement(boolean isStatementParameter) throws RecognitionException { return gPLSQL_DMLParser.case_statement(isStatementParameter); }

    public PLSQLParser_PLSQLKeys.use_key_return use_key() throws RecognitionException { return gPLSQLKeys.use_key(); }

    public PLSQLParser_PLSQLKeys.logon_key_return logon_key() throws RecognitionException { return gPLSQLKeys.logon_key(); }

    public PLSQLParser_PLSQLKeys.timestamp_tz_unconstrained_key_return timestamp_tz_unconstrained_key() throws RecognitionException { return gPLSQLKeys.timestamp_tz_unconstrained_key(); }

    public PLSQLParser_PLSQLKeys.db_role_change_key_return db_role_change_key() throws RecognitionException { return gPLSQLKeys.db_role_change_key(); }

    public PLSQLParser_PLSQLKeys.c_key_return c_key() throws RecognitionException { return gPLSQLKeys.c_key(); }

    public PLSQLParser_PLSQLKeys.unknown_key_return unknown_key() throws RecognitionException { return gPLSQLKeys.unknown_key(); }

    public PLSQLParser_PLSQLCommons.argument_return argument() throws RecognitionException { return gPLSQLCommons.argument(); }

    public PLSQLParser_PLSQL_DMLParser.xmlroot_param_version_part_return xmlroot_param_version_part() throws RecognitionException { return gPLSQL_DMLParser.xmlroot_param_version_part(); }

    public PLSQLParser_PLSQLKeys.unlimited_key_return unlimited_key() throws RecognitionException { return gPLSQLKeys.unlimited_key(); }

    public PLSQLParser_SQLPLUSParser.exit_command_return exit_command() throws RecognitionException { return gSQLPLUSParser.exit_command(); }

    public PLSQLParser_PLSQLKeys.decode_key_return decode_key() throws RecognitionException { return gPLSQLKeys.decode_key(); }

    public PLSQLParser_PLSQLKeys.xmlparse_key_return xmlparse_key() throws RecognitionException { return gPLSQLKeys.xmlparse_key(); }

    public PLSQLParser_PLSQLKeys.multiset_key_return multiset_key() throws RecognitionException { return gPLSQLKeys.multiset_key(); }

    public PLSQLParser_PLSQLKeys.current_user_key_return current_user_key() throws RecognitionException { return gPLSQLKeys.current_user_key(); }

    public PLSQLParser_PLSQL_DMLParser.pivot_element_return pivot_element() throws RecognitionException { return gPLSQL_DMLParser.pivot_element(); }

    public PLSQLParser_PLSQLKeys.audit_key_return audit_key() throws RecognitionException { return gPLSQLKeys.audit_key(); }

    public PLSQLParser_PLSQL_DMLParser.table_collection_expression_return table_collection_expression() throws RecognitionException { return gPLSQL_DMLParser.table_collection_expression(); }

    public PLSQLParser_PLSQLKeys.chartorowid_key_return chartorowid_key() throws RecognitionException { return gPLSQLKeys.chartorowid_key(); }

    public PLSQLParser_PLSQLKeys.nav_key_return nav_key() throws RecognitionException { return gPLSQLKeys.nav_key(); }

    public PLSQLParser_PLSQLKeys.timestamp_key_return timestamp_key() throws RecognitionException { return gPLSQLKeys.timestamp_key(); }

    public PLSQLParser_PLSQLKeys.array_key_return array_key() throws RecognitionException { return gPLSQLKeys.array_key(); }

    public PLSQLParser_PLSQLKeys.identified_key_return identified_key() throws RecognitionException { return gPLSQLKeys.identified_key(); }

    public PLSQLParser_PLSQLKeys.double_key_return double_key() throws RecognitionException { return gPLSQLKeys.double_key(); }

    public PLSQLParser_PLSQLKeys.varchar2_key_return varchar2_key() throws RecognitionException { return gPLSQLKeys.varchar2_key(); }

    public PLSQLParser_PLSQLKeys.upper_key_return upper_key() throws RecognitionException { return gPLSQLKeys.upper_key(); }

    public PLSQLParser_PLSQL_DMLParser.windowing_clause_return windowing_clause() throws RecognitionException { return gPLSQL_DMLParser.windowing_clause(); }

    public PLSQLParser_PLSQLKeys.percent_found_key_return percent_found_key() throws RecognitionException { return gPLSQLKeys.percent_found_key(); }

    public PLSQLParser_PLSQLKeys.defaults_key_return defaults_key() throws RecognitionException { return gPLSQLKeys.defaults_key(); }

    public PLSQLParser_PLSQLKeys.statement_id_key_return statement_id_key() throws RecognitionException { return gPLSQLKeys.statement_id_key(); }

    public PLSQLParser_PLSQLKeys.columns_key_return columns_key() throws RecognitionException { return gPLSQLKeys.columns_key(); }

    public PLSQLParser_PLSQLKeys.elsif_key_return elsif_key() throws RecognitionException { return gPLSQLKeys.elsif_key(); }

    public PLSQLParser_PLSQLKeys.oid_key_return oid_key() throws RecognitionException { return gPLSQLKeys.oid_key(); }

    public PLSQLParser_PLSQLKeys.force_key_return force_key() throws RecognitionException { return gPLSQLKeys.force_key(); }

    public PLSQLParser_PLSQL_DMLParser.condition_return condition() throws RecognitionException { return gPLSQL_DMLParser.condition(); }

    public PLSQLParser_PLSQLKeys.start_key_return start_key() throws RecognitionException { return gPLSQLKeys.start_key(); }

    public PLSQLParser_PLSQLKeys.type_key_return type_key() throws RecognitionException { return gPLSQLKeys.type_key(); }

    public PLSQLParser_PLSQLKeys.time_key_return time_key() throws RecognitionException { return gPLSQLKeys.time_key(); }

    public PLSQLParser_PLSQLKeys.decimal_key_return decimal_key() throws RecognitionException { return gPLSQLKeys.decimal_key(); }

    public PLSQLParser_PLSQLKeys.model_key_return model_key() throws RecognitionException { return gPLSQLKeys.model_key(); }

    public PLSQLParser_PLSQLKeys.raise_key_return raise_key() throws RecognitionException { return gPLSQLKeys.raise_key(); }

    public PLSQLParser_PLSQLKeys.constant_key_return constant_key() throws RecognitionException { return gPLSQLKeys.constant_key(); }

    public PLSQLParser_PLSQLKeys.grant_key_return grant_key() throws RecognitionException { return gPLSQLKeys.grant_key(); }

    public PLSQLParser_PLSQLKeys.abs_key_return abs_key() throws RecognitionException { return gPLSQLKeys.abs_key(); }

    public PLSQLParser_PLSQLKeys.chr_key_return chr_key() throws RecognitionException { return gPLSQLKeys.chr_key(); }

    public PLSQLParser_PLSQL_DMLParser.compound_expression_return compound_expression() throws RecognitionException { return gPLSQL_DMLParser.compound_expression(); }

    public PLSQLParser_PLSQLKeys.xml_key_return xml_key() throws RecognitionException { return gPLSQLKeys.xml_key(); }

    public PLSQLParser_PLSQLKeys.int_key_return int_key() throws RecognitionException { return gPLSQLKeys.int_key(); }

    public PLSQLParser_PLSQLKeys.each_key_return each_key() throws RecognitionException { return gPLSQLKeys.each_key(); }

    public PLSQLParser_PLSQLKeys.sqlerror_key_return sqlerror_key() throws RecognitionException { return gPLSQLKeys.sqlerror_key(); }

    public PLSQLParser_PLSQLKeys.binary_float_max_normal_key_return binary_float_max_normal_key() throws RecognitionException { return gPLSQLKeys.binary_float_max_normal_key(); }

    public PLSQLParser_PLSQLKeys.versions_key_return versions_key() throws RecognitionException { return gPLSQLKeys.versions_key(); }

    public PLSQLParser_PLSQLKeys.path_key_return path_key() throws RecognitionException { return gPLSQLKeys.path_key(); }

    public PLSQLParser_PLSQLKeys.nested_key_return nested_key() throws RecognitionException { return gPLSQLKeys.nested_key(); }

    public PLSQLParser_PLSQLKeys.and_key_return and_key() throws RecognitionException { return gPLSQLKeys.and_key(); }

    public PLSQLParser_PLSQLKeys.natural_key_return natural_key() throws RecognitionException { return gPLSQLKeys.natural_key(); }

    public PLSQLParser_PLSQLKeys.real_key_return real_key() throws RecognitionException { return gPLSQLKeys.real_key(); }

    public PLSQLParser_PLSQLKeys.java_key_return java_key() throws RecognitionException { return gPLSQLKeys.java_key(); }

    public PLSQLParser_PLSQLKeys.isolation_key_return isolation_key() throws RecognitionException { return gPLSQLKeys.isolation_key(); }

    public PLSQLParser_PLSQL_DMLParser.equality_expression_return equality_expression() throws RecognitionException { return gPLSQL_DMLParser.equality_expression(); }

    public PLSQLParser_PLSQL_DMLParser.expression_return expression() throws RecognitionException { return gPLSQL_DMLParser.expression(); }

    public PLSQLParser_PLSQLKeys.passing_key_return passing_key() throws RecognitionException { return gPLSQLKeys.passing_key(); }

    public PLSQLParser_PLSQLKeys.explain_key_return explain_key() throws RecognitionException { return gPLSQLKeys.explain_key(); }

    public PLSQLParser_PLSQLKeys.referencing_key_return referencing_key() throws RecognitionException { return gPLSQLKeys.referencing_key(); }

    public PLSQLParser_PLSQLKeys.dimension_key_return dimension_key() throws RecognitionException { return gPLSQLKeys.dimension_key(); }

    public PLSQLParser_PLSQLKeys.global_key_return global_key() throws RecognitionException { return gPLSQLKeys.global_key(); }

    public PLSQLParser_PLSQLKeys.database_key_return database_key() throws RecognitionException { return gPLSQLKeys.database_key(); }

    public PLSQLParser_PLSQLKeys.compile_key_return compile_key() throws RecognitionException { return gPLSQLKeys.compile_key(); }

    public PLSQLParser_PLSQLKeys.outer_key_return outer_key() throws RecognitionException { return gPLSQLKeys.outer_key(); }

    public PLSQLParser_PLSQL_DMLParser.explain_statement_return explain_statement() throws RecognitionException { return gPLSQL_DMLParser.explain_statement(); }

    public PLSQLParser_PLSQLKeys.old_key_return old_key() throws RecognitionException { return gPLSQLKeys.old_key(); }

    public PLSQLParser_PLSQLKeys.percent_rowcount_key_return percent_rowcount_key() throws RecognitionException { return gPLSQLKeys.percent_rowcount_key(); }

    public PLSQLParser_PLSQLKeys.nomaxvalue_key_return nomaxvalue_key() throws RecognitionException { return gPLSQLKeys.nomaxvalue_key(); }

    public PLSQLParser_PLSQLKeys.stddev_key_return stddev_key() throws RecognitionException { return gPLSQLKeys.stddev_key(); }

    public PLSQLParser_PLSQL_DMLParser.searched_case_when_part_return searched_case_when_part() throws RecognitionException { return gPLSQL_DMLParser.searched_case_when_part(); }

    public PLSQLParser_PLSQLKeys.timezone_region_key_return timezone_region_key() throws RecognitionException { return gPLSQLKeys.timezone_region_key(); }

    public PLSQLParser_PLSQLKeys.nowait_key_return nowait_key() throws RecognitionException { return gPLSQLKeys.nowait_key(); }

    public PLSQLParser_PLSQLKeys.committed_key_return committed_key() throws RecognitionException { return gPLSQLKeys.committed_key(); }

    public PLSQLParser_PLSQLKeys.sessiontimezone_key_return sessiontimezone_key() throws RecognitionException { return gPLSQLKeys.sessiontimezone_key(); }

    public PLSQLParser_PLSQLKeys.subtype_key_return subtype_key() throws RecognitionException { return gPLSQLKeys.subtype_key(); }

    public PLSQLParser_PLSQLKeys.schema_key_return schema_key() throws RecognitionException { return gPLSQLKeys.schema_key(); }

    public PLSQLParser_PLSQLCommons.link_name_return link_name() throws RecognitionException { return gPLSQLCommons.link_name(); }

    public PLSQLParser_PLSQLKeys.when_key_return when_key() throws RecognitionException { return gPLSQLKeys.when_key(); }

    public PLSQLParser_PLSQL_DMLParser.error_logging_clause_return error_logging_clause() throws RecognitionException { return gPLSQL_DMLParser.error_logging_clause(); }

    public PLSQLParser_PLSQLKeys.trigger_key_return trigger_key() throws RecognitionException { return gPLSQLKeys.trigger_key(); }

    public PLSQLParser_PLSQLKeys.result_key_return result_key() throws RecognitionException { return gPLSQLKeys.result_key(); }

    public PLSQLParser_PLSQLKeys.loop_key_return loop_key() throws RecognitionException { return gPLSQLKeys.loop_key(); }

    public PLSQLParser_PLSQLKeys.cascade_key_return cascade_key() throws RecognitionException { return gPLSQLKeys.cascade_key(); }

    public PLSQLParser_PLSQLKeys.goto_key_return goto_key() throws RecognitionException { return gPLSQLKeys.goto_key(); }

    public PLSQLParser_PLSQLKeys.like_key_return like_key() throws RecognitionException { return gPLSQLKeys.like_key(); }

    public PLSQLParser_PLSQLKeys.where_key_return where_key() throws RecognitionException { return gPLSQLKeys.where_key(); }

    public PLSQLParser_PLSQLKeys.cache_key_return cache_key() throws RecognitionException { return gPLSQLKeys.cache_key(); }

    public PLSQLParser_PLSQL_DMLParser.unpivot_in_clause_return unpivot_in_clause() throws RecognitionException { return gPLSQL_DMLParser.unpivot_in_clause(); }

    public PLSQLParser_PLSQLKeys.within_key_return within_key() throws RecognitionException { return gPLSQLKeys.within_key(); }

    public PLSQLParser_PLSQLKeys.join_key_return join_key() throws RecognitionException { return gPLSQLKeys.join_key(); }

    public PLSQLParser_PLSQL_DMLParser.model_column_clauses_return model_column_clauses() throws RecognitionException { return gPLSQL_DMLParser.model_column_clauses(); }

    public PLSQLParser_PLSQLKeys.rollback_key_return rollback_key() throws RecognitionException { return gPLSQLKeys.rollback_key(); }

    public PLSQLParser_PLSQLKeys.sequence_key_return sequence_key() throws RecognitionException { return gPLSQLKeys.sequence_key(); }

    public PLSQLParser_PLSQL_DMLParser.xml_multiuse_expression_element_return xml_multiuse_expression_element() throws RecognitionException { return gPLSQL_DMLParser.xml_multiuse_expression_element(); }

    public PLSQLParser_PLSQLKeys.range_key_return range_key() throws RecognitionException { return gPLSQLKeys.range_key(); }

    public PLSQLParser_PLSQLKeys.out_key_return out_key() throws RecognitionException { return gPLSQLKeys.out_key(); }

    public PLSQLParser_PLSQLKeys.follows_key_return follows_key() throws RecognitionException { return gPLSQLKeys.follows_key(); }

    public PLSQLParser_PLSQLKeys.binary_double_nan_key_return binary_double_nan_key() throws RecognitionException { return gPLSQLKeys.binary_double_nan_key(); }

    public PLSQLParser_PLSQLKeys.of_key_return of_key() throws RecognitionException { return gPLSQLKeys.of_key(); }

    public PLSQLParser_PLSQLKeys.group_key_return group_key() throws RecognitionException { return gPLSQLKeys.group_key(); }

    public PLSQLParser_PLSQL_DMLParser.start_part_return start_part() throws RecognitionException { return gPLSQL_DMLParser.start_part(); }

    public PLSQLParser_PLSQLKeys.set_key_return set_key() throws RecognitionException { return gPLSQLKeys.set_key(); }

    public PLSQLParser_PLSQL_DMLParser.stantard_function_enabling_within_or_over_return stantard_function_enabling_within_or_over() throws RecognitionException { return gPLSQL_DMLParser.stantard_function_enabling_within_or_over(); }

    public PLSQLParser_PLSQLCommons.cursor_name_return cursor_name() throws RecognitionException { return gPLSQLCommons.cursor_name(); }

    public PLSQLParser_PLSQLKeys.soundex_key_return soundex_key() throws RecognitionException { return gPLSQLKeys.soundex_key(); }

    public PLSQLParser_PLSQL_DMLParser.for_update_of_part_return for_update_of_part() throws RecognitionException { return gPLSQL_DMLParser.for_update_of_part(); }

    public PLSQLParser_PLSQLKeys.analyze_key_return analyze_key() throws RecognitionException { return gPLSQLKeys.analyze_key(); }

    public PLSQLParser_PLSQLKeys.cost_key_return cost_key() throws RecognitionException { return gPLSQLKeys.cost_key(); }

    public PLSQLParser_PLSQL_DMLParser.unpivot_in_elements_return unpivot_in_elements() throws RecognitionException { return gPLSQL_DMLParser.unpivot_in_elements(); }

    public PLSQLParser_PLSQLKeys.then_key_return then_key() throws RecognitionException { return gPLSQLKeys.then_key(); }

    public PLSQLParser_PLSQLKeys.xmlexists_key_return xmlexists_key() throws RecognitionException { return gPLSQLKeys.xmlexists_key(); }

    public PLSQLParser_PLSQL_DMLParser.stantard_function_pedictions_return stantard_function_pedictions() throws RecognitionException { return gPLSQL_DMLParser.stantard_function_pedictions(); }

    public PLSQLParser_PLSQLKeys.comment_key_return comment_key() throws RecognitionException { return gPLSQLKeys.comment_key(); }

    public PLSQLParser_PLSQLKeys.enable_key_return enable_key() throws RecognitionException { return gPLSQLKeys.enable_key(); }

    public PLSQLParser_PLSQL_DMLParser.like_type_return like_type() throws RecognitionException { return gPLSQL_DMLParser.like_type(); }

    public PLSQLParser_PLSQLKeys.sysdate_key_return sysdate_key() throws RecognitionException { return gPLSQLKeys.sysdate_key(); }

    public PLSQLParser_PLSQLKeys.binary_double_max_normal_key_return binary_double_max_normal_key() throws RecognitionException { return gPLSQLKeys.binary_double_max_normal_key(); }

    public PLSQLParser_PLSQL_DMLParser.xml_general_default_part_return xml_general_default_part() throws RecognitionException { return gPLSQL_DMLParser.xml_general_default_part(); }

    public PLSQLParser_PLSQLKeys.char_length_key_return char_length_key() throws RecognitionException { return gPLSQLKeys.char_length_key(); }

    public PLSQLParser_PLSQLKeys.declare_key_return declare_key() throws RecognitionException { return gPLSQLKeys.declare_key(); }

    public PLSQLParser_PLSQLKeys.xmlpi_key_return xmlpi_key() throws RecognitionException { return gPLSQLKeys.xmlpi_key(); }

    public PLSQLParser_PLSQLKeys.exit_key_return exit_key() throws RecognitionException { return gPLSQLKeys.exit_key(); }

    public PLSQLParser_PLSQLKeys.binary_double_max_subnormal_key_return binary_double_max_subnormal_key() throws RecognitionException { return gPLSQLKeys.binary_double_max_subnormal_key(); }

    public PLSQLParser_PLSQLKeys.from_key_return from_key() throws RecognitionException { return gPLSQLKeys.from_key(); }

    public PLSQLParser_PLSQLKeys.name_key_return name_key() throws RecognitionException { return gPLSQLKeys.name_key(); }

    public PLSQLParser_PLSQLKeys.exception_init_key_return exception_init_key() throws RecognitionException { return gPLSQLKeys.exception_init_key(); }

    public PLSQLParser_PLSQLKeys.partition_key_return partition_key() throws RecognitionException { return gPLSQLKeys.partition_key(); }

    public PLSQLParser_PLSQL_DMLParser.merge_element_return merge_element() throws RecognitionException { return gPLSQL_DMLParser.merge_element(); }

    public PLSQLParser_PLSQLKeys.reference_key_return reference_key() throws RecognitionException { return gPLSQLKeys.reference_key(); }

    public PLSQLParser_PLSQLCommons.trigger_name_return trigger_name() throws RecognitionException { return gPLSQLCommons.trigger_name(); }

    public PLSQLParser_PLSQLKeys.inline_key_return inline_key() throws RecognitionException { return gPLSQLKeys.inline_key(); }

    public PLSQLParser_PLSQLKeys.single_key_return single_key() throws RecognitionException { return gPLSQLKeys.single_key(); }

    public PLSQLParser_PLSQLKeys.current_key_return current_key() throws RecognitionException { return gPLSQLKeys.current_key(); }

    public PLSQLParser_PLSQL_DMLParser.order_by_clause_return order_by_clause() throws RecognitionException { return gPLSQL_DMLParser.order_by_clause(); }

    public PLSQLParser_PLSQLKeys.locked_key_return locked_key() throws RecognitionException { return gPLSQLKeys.locked_key(); }

    public PLSQLParser_PLSQLKeys.new_key_return new_key() throws RecognitionException { return gPLSQLKeys.new_key(); }

    public PLSQLParser_PLSQL_DMLParser.concatenation_wrapper_return concatenation_wrapper() throws RecognitionException { return gPLSQL_DMLParser.concatenation_wrapper(); }

    public PLSQLParser_PLSQLKeys.by_key_return by_key() throws RecognitionException { return gPLSQLKeys.by_key(); }

    public PLSQLParser_PLSQLCommons.constant_return constant() throws RecognitionException { return gPLSQLCommons.constant(); }

    public PLSQLParser_PLSQL_DMLParser.group_by_elements_return group_by_elements() throws RecognitionException { return gPLSQL_DMLParser.group_by_elements(); }

    public PLSQLParser_PLSQLKeys.external_key_return external_key() throws RecognitionException { return gPLSQLKeys.external_key(); }

    public PLSQLParser_PLSQLKeys.indexed_key_return indexed_key() throws RecognitionException { return gPLSQLKeys.indexed_key(); }

    public PLSQLParser_PLSQLCommons.reference_model_name_return reference_model_name() throws RecognitionException { return gPLSQLCommons.reference_model_name(); }

    public PLSQLParser_PLSQLKeys.escape_key_return escape_key() throws RecognitionException { return gPLSQLKeys.escape_key(); }

    public PLSQLParser_PLSQLKeys.userenv_key_return userenv_key() throws RecognitionException { return gPLSQLKeys.userenv_key(); }

    public PLSQLParser_PLSQLKeys.disassociate_key_return disassociate_key() throws RecognitionException { return gPLSQLKeys.disassociate_key(); }

    public PLSQLParser_PLSQLKeys.evalname_key_return evalname_key() throws RecognitionException { return gPLSQLKeys.evalname_key(); }

    public PLSQLParser_PLSQLKeys.content_key_return content_key() throws RecognitionException { return gPLSQLKeys.content_key(); }

    public PLSQLParser_PLSQL_DMLParser.subquery_factoring_clause_return subquery_factoring_clause() throws RecognitionException { return gPLSQL_DMLParser.subquery_factoring_clause(); }

    public PLSQLParser_PLSQLCommons.table_var_name_return table_var_name() throws RecognitionException { return gPLSQLCommons.table_var_name(); }

    public PLSQLParser_PLSQL_DMLParser.model_expression_return model_expression() throws RecognitionException { return gPLSQL_DMLParser.model_expression(); }

    public PLSQLParser_PLSQL_DMLParser.search_clause_return search_clause() throws RecognitionException { return gPLSQL_DMLParser.search_clause(); }

    public PLSQLParser_PLSQLKeys.including_key_return including_key() throws RecognitionException { return gPLSQLKeys.including_key(); }

    public PLSQLParser_PLSQLKeys.current_date_key_return current_date_key() throws RecognitionException { return gPLSQLKeys.current_date_key(); }

    public PLSQLParser_PLSQLKeys.binary_float_max_subnormal_key_return binary_float_max_subnormal_key() throws RecognitionException { return gPLSQLKeys.binary_float_max_subnormal_key(); }

    public PLSQLParser_PLSQL_DMLParser.cost_matrix_clause_return cost_matrix_clause() throws RecognitionException { return gPLSQL_DMLParser.cost_matrix_clause(); }

    public PLSQLParser_PLSQLKeys.xmltable_key_return xmltable_key() throws RecognitionException { return gPLSQLKeys.xmltable_key(); }

    public PLSQLParser_PLSQL_DMLParser.from_clause_return from_clause() throws RecognitionException { return gPLSQL_DMLParser.from_clause(); }

    public PLSQLParser_PLSQLKeys.number_key_return number_key() throws RecognitionException { return gPLSQLKeys.number_key(); }

    public PLSQLParser_PLSQL_DMLParser.xmlserialize_param_version_part_return xmlserialize_param_version_part() throws RecognitionException { return gPLSQL_DMLParser.xmlserialize_param_version_part(); }

    public PLSQLParser_PLSQLCommons.cost_class_name_return cost_class_name() throws RecognitionException { return gPLSQLCommons.cost_class_name(); }

    public PLSQLParser_PLSQLKeys.desc_key_return desc_key() throws RecognitionException { return gPLSQLKeys.desc_key(); }

    public PLSQLParser_PLSQLKeys.initcap_key_return initcap_key() throws RecognitionException { return gPLSQLKeys.initcap_key(); }

    public PLSQLParser_PLSQL_DMLParser.update_statement_return update_statement() throws RecognitionException { return gPLSQL_DMLParser.update_statement(); }

    public PLSQLParser_PLSQLCommons.query_name_return query_name() throws RecognitionException { return gPLSQLCommons.query_name(); }

    public PLSQLParser_PLSQLKeys.timestamp_unconstrained_key_return timestamp_unconstrained_key() throws RecognitionException { return gPLSQLKeys.timestamp_unconstrained_key(); }

    public PLSQLParser_PLSQLKeys.index_key_return index_key() throws RecognitionException { return gPLSQLKeys.index_key(); }

    public PLSQLParser_PLSQL_DMLParser.model_column_partition_part_return model_column_partition_part() throws RecognitionException { return gPLSQL_DMLParser.model_column_partition_part(); }

    public PLSQLParser_PLSQL_DMLParser.pivot_clause_return pivot_clause() throws RecognitionException { return gPLSQL_DMLParser.pivot_clause(); }

    public PLSQLParser_PLSQLKeys.inout_key_return inout_key() throws RecognitionException { return gPLSQLKeys.inout_key(); }

    public PLSQLParser_PLSQL_DMLParser.values_clause_return values_clause() throws RecognitionException { return gPLSQL_DMLParser.values_clause(); }

    public PLSQLParser_PLSQLKeys.constraint_key_return constraint_key() throws RecognitionException { return gPLSQLKeys.constraint_key(); }

    public PLSQLParser_PLSQLKeys.sample_key_return sample_key() throws RecognitionException { return gPLSQLKeys.sample_key(); }

    public PLSQLParser_PLSQLKeys.ignore_key_return ignore_key() throws RecognitionException { return gPLSQLKeys.ignore_key(); }

    public PLSQLParser_PLSQLKeys.xmlroot_key_return xmlroot_key() throws RecognitionException { return gPLSQLKeys.xmlroot_key(); }

    public PLSQLParser_PLSQLKeys.yminterval_unconstrained_key_return yminterval_unconstrained_key() throws RecognitionException { return gPLSQLKeys.yminterval_unconstrained_key(); }

    public PLSQLParser_PLSQLKeys.warning_key_return warning_key() throws RecognitionException { return gPLSQLKeys.warning_key(); }

    public PLSQLParser_PLSQL_DMLParser.merge_update_clause_return merge_update_clause() throws RecognitionException { return gPLSQL_DMLParser.merge_update_clause(); }

    public PLSQLParser_PLSQL_DMLParser.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException { return gPLSQL_DMLParser.hierarchical_query_clause(); }

    public PLSQLParser_PLSQLKeys.unique_key_return unique_key() throws RecognitionException { return gPLSQLKeys.unique_key(); }

    public final boolean synpred28_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_PLSQLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_PLSQLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA74 dfa74 = new DFA74(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA216 dfa216 = new DFA216(this);
    protected DFA224 dfa224 = new DFA224(this);
    protected DFA262 dfa262 = new DFA262(this);
    protected DFA268 dfa268 = new DFA268(this);
    static final String DFA74_eotS =
        "\55\uffff";
    static final String DFA74_eofS =
        "\55\uffff";
    static final String DFA74_minS =
        "\2\11\1\uffff\1\6\5\uffff\1\22\1\0\1\6\7\uffff\2\22\1\0\1\6\4\uffff"+
        "\1\22\2\10\1\22\1\uffff\2\22\1\0\3\uffff\1\0\2\6\1\22\1\uffff\2"+
        "\6";
    static final String DFA74_maxS =
        "\2\u0092\1\uffff\1\u0094\5\uffff\1\112\1\0\1\u0092\7\uffff\2\112"+
        "\1\0\1\172\4\uffff\1\112\2\u0092\1\112\1\uffff\2\112\1\0\3\uffff"+
        "\1\0\2\172\1\112\1\uffff\2\172";
    static final String DFA74_acceptS =
        "\2\uffff\1\2\1\uffff\4\2\1\1\3\uffff\7\2\4\uffff\4\2\4\uffff\1\2"+
        "\3\uffff\3\2\4\uffff\1\2\2\uffff";
    static final String DFA74_specialS =
        "\1\uffff\1\15\1\uffff\1\17\5\uffff\1\7\1\22\1\12\7\uffff\1\2\1\16"+
        "\1\6\1\0\4\uffff\1\24\1\11\1\5\1\13\1\uffff\1\21\1\23\1\4\3\uffff"+
        "\1\3\1\14\1\20\1\25\1\uffff\1\1\1\10}>";
    static final String[] DFA74_transitionS = {
            "\1\2\4\uffff\1\2\3\uffff\1\2\11\uffff\1\2\55\uffff\1\1\15\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\13\uffff\1\2\24\uffff"+
            "\1\2\16\uffff\1\2",
            "\1\6\4\uffff\1\6\3\uffff\1\5\11\uffff\1\4\11\uffff\1\7\43\uffff"+
            "\1\3\15\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\7\1\6\7\uffff\1"+
            "\7\30\uffff\1\6\16\uffff\1\6",
            "",
            "\1\22\1\uffff\1\21\1\15\2\uffff\2\10\1\15\1\14\2\uffff\1\13"+
            "\11\uffff\1\11\1\uffff\1\22\3\uffff\1\10\2\uffff\1\22\1\7\43"+
            "\uffff\1\12\2\uffff\1\22\10\uffff\1\10\1\uffff\1\16\5\uffff"+
            "\1\15\1\uffff\1\15\1\17\1\14\1\22\6\uffff\1\20\15\uffff\1\22"+
            "\1\uffff\1\22\10\uffff\1\15\16\uffff\1\14\1\uffff\1\22",
            "",
            "",
            "",
            "",
            "",
            "\1\24\67\uffff\1\23",
            "\1\uffff",
            "\1\31\1\uffff\1\30\1\10\4\uffff\1\10\3\uffff\1\26\11\uffff"+
            "\1\10\1\uffff\1\30\6\uffff\1\31\1\22\43\uffff\1\25\2\uffff\1"+
            "\31\12\uffff\1\10\5\uffff\1\10\1\uffff\1\10\1\27\1\10\1\31\6"+
            "\uffff\1\27\3\uffff\1\10\11\uffff\1\32\1\uffff\1\31\10\uffff"+
            "\1\10\16\uffff\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\23\uffff\1\33\43\uffff\1\34",
            "\1\35\23\uffff\1\33\43\uffff\1\34",
            "\1\uffff",
            "\1\37\13\uffff\1\10\22\uffff\1\37\1\36\43\uffff\1\10\2\uffff"+
            "\1\37\23\uffff\1\10\1\uffff\1\37\6\uffff\1\10\17\uffff\1\37",
            "",
            "",
            "",
            "",
            "\1\41\67\uffff\1\40",
            "\1\30\1\10\4\uffff\1\10\3\uffff\1\26\11\uffff\1\10\1\uffff"+
            "\1\45\7\uffff\1\43\43\uffff\1\42\2\uffff\1\45\12\uffff\1\10"+
            "\5\uffff\1\10\1\uffff\1\10\1\27\1\10\7\uffff\1\44\3\uffff\1"+
            "\10\24\uffff\1\10\16\uffff\1\10",
            "\1\30\1\10\4\uffff\1\10\3\uffff\1\26\11\uffff\1\10\1\uffff"+
            "\1\45\7\uffff\1\43\43\uffff\1\46\2\uffff\1\45\12\uffff\1\10"+
            "\5\uffff\1\10\1\uffff\1\10\1\27\1\10\7\uffff\1\44\3\uffff\1"+
            "\10\24\uffff\1\10\16\uffff\1\10",
            "\1\50\67\uffff\1\47",
            "",
            "\1\35\23\uffff\1\33\43\uffff\1\34",
            "\1\35\23\uffff\1\33\43\uffff\1\34",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\52\13\uffff\1\10\22\uffff\1\37\1\51\43\uffff\1\10\2\uffff"+
            "\1\52\23\uffff\1\10\1\uffff\1\52\6\uffff\1\10\17\uffff\1\52",
            "\1\52\13\uffff\1\10\22\uffff\1\37\1\51\43\uffff\1\10\2\uffff"+
            "\1\52\23\uffff\1\10\1\uffff\1\52\6\uffff\1\10\17\uffff\1\52",
            "\1\54\67\uffff\1\53",
            "",
            "\1\52\36\uffff\1\37\1\51\46\uffff\1\52\25\uffff\1\52\6\uffff"+
            "\1\10\17\uffff\1\52",
            "\1\52\36\uffff\1\37\1\51\46\uffff\1\52\25\uffff\1\52\6\uffff"+
            "\1\10\17\uffff\1\52"
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "450:69: ( referencing_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA74_22 = input.LA(1);

                         
                        int index74_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_22==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 30;}

                        else if ( (LA74_22==DELIMITED_ID||LA74_22==REGULAR_ID||LA74_22==SQL92_RESERVED_DATE||LA74_22==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA74_22==ASSIGN_OP||LA74_22==PERCENT||LA74_22==SEMICOLON||LA74_22==SQL92_RESERVED_DEFAULT||LA74_22==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 31;}

                         
                        input.seek(index74_22);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA74_43 = input.LA(1);

                         
                        int index74_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_43==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA74_43==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 41;}

                        else if ( (LA74_43==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 31;}

                        else if ( (LA74_43==ASSIGN_OP||LA74_43==SEMICOLON||LA74_43==SQL92_RESERVED_DEFAULT||LA74_43==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}

                         
                        input.seek(index74_43);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA74_19 = input.LA(1);

                         
                        int index74_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_19==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 27;}

                        else if ( (LA74_19==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 28;}

                        else if ( (LA74_19==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 29;}

                         
                        input.seek(index74_19);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA74_38 = input.LA(1);

                         
                        int index74_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows")))) ) {s = 37;}

                         
                        input.seek(index74_38);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA74_34 = input.LA(1);

                         
                        int index74_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows")))) ) {s = 37;}

                         
                        input.seek(index74_34);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA74_29 = input.LA(1);

                         
                        int index74_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_29==BINDVAR||LA74_29==COLON||LA74_29==INTRODUCER||LA74_29==SQL92_RESERVED_BEGIN||LA74_29==SQL92_RESERVED_CREATE||LA74_29==SQL92_RESERVED_CURSOR||LA74_29==SQL92_RESERVED_DECLARE||LA74_29==SQL92_RESERVED_FOR||LA74_29==SQL92_RESERVED_PROCEDURE||LA74_29==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA74_29==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 38;}

                        else if ( (LA74_29==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 22;}

                        else if ( (LA74_29==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 35;}

                        else if ( (LA74_29==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 23;}

                        else if ( (LA74_29==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 36;}

                        else if ( (LA74_29==AT_SIGN) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 24;}

                        else if ( (LA74_29==LEFT_PAREN||LA74_29==SEMICOLON) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 37;}

                         
                        input.seek(index74_29);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA74_21 = input.LA(1);

                         
                        int index74_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows")))) ) {s = 26;}

                         
                        input.seek(index74_21);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA74_9 = input.LA(1);

                         
                        int index74_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_9==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 19;}

                        else if ( (LA74_9==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 20;}

                         
                        input.seek(index74_9);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA74_44 = input.LA(1);

                         
                        int index74_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_44==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA74_44==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 41;}

                        else if ( (LA74_44==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 31;}

                        else if ( (LA74_44==ASSIGN_OP||LA74_44==SEMICOLON||LA74_44==SQL92_RESERVED_DEFAULT||LA74_44==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}

                         
                        input.seek(index74_44);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA74_28 = input.LA(1);

                         
                        int index74_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_28==BINDVAR||LA74_28==COLON||LA74_28==INTRODUCER||LA74_28==SQL92_RESERVED_BEGIN||LA74_28==SQL92_RESERVED_CREATE||LA74_28==SQL92_RESERVED_CURSOR||LA74_28==SQL92_RESERVED_DECLARE||LA74_28==SQL92_RESERVED_FOR||LA74_28==SQL92_RESERVED_PROCEDURE||LA74_28==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA74_28==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 34;}

                        else if ( (LA74_28==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 22;}

                        else if ( (LA74_28==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 35;}

                        else if ( (LA74_28==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 23;}

                        else if ( (LA74_28==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 36;}

                        else if ( (LA74_28==AT_SIGN) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 24;}

                        else if ( (LA74_28==LEFT_PAREN||LA74_28==SEMICOLON) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 37;}

                         
                        input.seek(index74_28);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA74_11 = input.LA(1);

                         
                        int index74_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_11==BINDVAR||LA74_11==COLON||LA74_11==INTRODUCER||LA74_11==SQL92_RESERVED_BEGIN||LA74_11==SQL92_RESERVED_CREATE||LA74_11==SQL92_RESERVED_CURSOR||LA74_11==SQL92_RESERVED_DECLARE||LA74_11==SQL92_RESERVED_FOR||LA74_11==SQL92_RESERVED_PROCEDURE||LA74_11==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA74_11==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 21;}

                        else if ( (LA74_11==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 22;}

                        else if ( (LA74_11==PERIOD) ) {s = 18;}

                        else if ( (LA74_11==SQL92_RESERVED_DATE||LA74_11==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 23;}

                        else if ( (LA74_11==AT_SIGN||LA74_11==LEFT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 24;}

                        else if ( (LA74_11==ASSIGN_OP||LA74_11==PERCENT||LA74_11==SEMICOLON||LA74_11==SQL92_RESERVED_DEFAULT||LA74_11==SQL92_RESERVED_NOT) ) {s = 25;}

                        else if ( (LA74_11==SQL92_RESERVED_IS) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 26;}

                         
                        input.seek(index74_11);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA74_30 = input.LA(1);

                         
                        int index74_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_30==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 39;}

                        else if ( (LA74_30==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 40;}

                         
                        input.seek(index74_30);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA74_39 = input.LA(1);

                         
                        int index74_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_39==DELIMITED_ID||LA74_39==REGULAR_ID||LA74_39==SQL92_RESERVED_DATE||LA74_39==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA74_39==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 41;}

                        else if ( (LA74_39==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 31;}

                        else if ( (LA74_39==ASSIGN_OP||LA74_39==SEMICOLON||LA74_39==SQL92_RESERVED_DEFAULT||LA74_39==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}

                         
                        input.seek(index74_39);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA74_1 = input.LA(1);

                         
                        int index74_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_1==REGULAR_ID) ) {s = 3;}

                        else if ( (LA74_1==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call"))))) {s = 4;}

                        else if ( (LA74_1==DELIMITED_ID) ) {s = 5;}

                        else if ( (LA74_1==BINDVAR||LA74_1==COLON||LA74_1==SQL92_RESERVED_BEGIN||LA74_1==SQL92_RESERVED_CREATE||LA74_1==SQL92_RESERVED_CURSOR||LA74_1==SQL92_RESERVED_DECLARE||LA74_1==SQL92_RESERVED_PROCEDURE||LA74_1==SQL92_RESERVED_WHEN) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 6;}

                        else if ( (LA74_1==PERIOD||LA74_1==SQL92_RESERVED_DATE||LA74_1==SQL92_RESERVED_EXCEPTION) ) {s = 7;}

                         
                        input.seek(index74_1);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA74_20 = input.LA(1);

                         
                        int index74_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_20==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 27;}

                        else if ( (LA74_20==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 28;}

                        else if ( (LA74_20==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 29;}

                         
                        input.seek(index74_20);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA74_3 = input.LA(1);

                         
                        int index74_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA74_3 >= CHAR_STRING && LA74_3 <= CHAR_STRING_PERL)||LA74_3==NATIONAL_CHAR_STRING_LIT||LA74_3==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA74_3==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 9;}

                        else if ( (LA74_3==REGULAR_ID) ) {s = 10;}

                        else if ( (LA74_3==DELIMITED_ID) ) {s = 11;}

                        else if ( (LA74_3==PERIOD) ) {s = 7;}

                        else if ( (LA74_3==COMMA||LA74_3==SQL92_RESERVED_DECLARE||LA74_3==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("follows")))) {s = 12;}

                        else if ( (LA74_3==BINDVAR||LA74_3==COLON||LA74_3==SQL92_RESERVED_CREATE||LA74_3==SQL92_RESERVED_CURSOR||LA74_3==SQL92_RESERVED_PROCEDURE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 13;}

                        else if ( (LA74_3==SQL92_RESERVED_BEGIN) && ((input.LT(1).getText().equalsIgnoreCase("follows")))) {s = 14;}

                        else if ( (LA74_3==SQL92_RESERVED_DATE) ) {s = 15;}

                        else if ( (LA74_3==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 16;}

                        else if ( (LA74_3==AT_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("call")))) {s = 17;}

                        else if ( (LA74_3==ASSIGN_OP||LA74_3==LEFT_PAREN||LA74_3==PERCENT||LA74_3==SEMICOLON||LA74_3==SQL92_RESERVED_DEFAULT||LA74_3==SQL92_RESERVED_IS||LA74_3==SQL92_RESERVED_NOT||LA74_3==SQL92_RESERVED_WITH) ) {s = 18;}

                         
                        input.seek(index74_3);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA74_40 = input.LA(1);

                         
                        int index74_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_40==DELIMITED_ID||LA74_40==REGULAR_ID||LA74_40==SQL92_RESERVED_DATE||LA74_40==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA74_40==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 41;}

                        else if ( (LA74_40==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 31;}

                        else if ( (LA74_40==ASSIGN_OP||LA74_40==SEMICOLON||LA74_40==SQL92_RESERVED_DEFAULT||LA74_40==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}

                         
                        input.seek(index74_40);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA74_32 = input.LA(1);

                         
                        int index74_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_32==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 28;}

                        else if ( (LA74_32==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 29;}

                        else if ( (LA74_32==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 27;}

                         
                        input.seek(index74_32);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA74_10 = input.LA(1);

                         
                        int index74_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 8;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index74_10);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA74_33 = input.LA(1);

                         
                        int index74_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_33==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 28;}

                        else if ( (LA74_33==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 29;}

                        else if ( (LA74_33==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 27;}

                         
                        input.seek(index74_33);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA74_27 = input.LA(1);

                         
                        int index74_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_27==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 32;}

                        else if ( (LA74_27==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 33;}

                         
                        input.seek(index74_27);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA74_41 = input.LA(1);

                         
                        int index74_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA74_41==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 43;}

                        else if ( (LA74_41==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 44;}

                         
                        input.seek(index74_41);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA76_eotS =
        "\55\uffff";
    static final String DFA76_eofS =
        "\55\uffff";
    static final String DFA76_minS =
        "\2\11\1\uffff\1\6\5\uffff\1\22\1\0\1\6\7\uffff\2\22\1\0\1\6\4\uffff"+
        "\1\22\2\10\1\22\1\uffff\2\22\1\0\3\uffff\1\0\2\6\1\22\1\uffff\2"+
        "\6";
    static final String DFA76_maxS =
        "\2\u0092\1\uffff\1\u0094\5\uffff\1\112\1\0\1\u0092\7\uffff\2\112"+
        "\1\0\1\172\4\uffff\1\112\2\u0092\1\112\1\uffff\2\112\1\0\3\uffff"+
        "\1\0\2\172\1\112\1\uffff\2\172";
    static final String DFA76_acceptS =
        "\2\uffff\1\2\1\uffff\4\2\1\1\3\uffff\7\2\4\uffff\4\2\4\uffff\1\2"+
        "\3\uffff\3\2\4\uffff\1\2\2\uffff";
    static final String DFA76_specialS =
        "\1\uffff\1\14\1\uffff\1\16\5\uffff\1\6\1\21\1\7\7\uffff\1\2\1\15"+
        "\1\5\1\0\4\uffff\1\24\1\13\1\23\1\11\1\uffff\1\20\1\22\1\4\3\uffff"+
        "\1\3\1\12\1\17\1\25\1\uffff\1\1\1\10}>";
    static final String[] DFA76_transitionS = {
            "\1\2\4\uffff\1\2\3\uffff\1\2\11\uffff\1\2\55\uffff\1\1\15\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\40\uffff\1\2\16\uffff"+
            "\1\2",
            "\1\6\4\uffff\1\6\3\uffff\1\5\11\uffff\1\4\11\uffff\1\7\43\uffff"+
            "\1\3\15\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\7\1\6\7\uffff\1"+
            "\7\30\uffff\1\6\16\uffff\1\6",
            "",
            "\1\22\1\uffff\1\21\1\15\2\uffff\2\10\1\15\1\14\2\uffff\1\13"+
            "\11\uffff\1\11\1\uffff\1\22\3\uffff\1\10\2\uffff\1\22\1\7\43"+
            "\uffff\1\12\2\uffff\1\22\10\uffff\1\10\1\uffff\1\16\5\uffff"+
            "\1\15\1\uffff\1\15\1\17\1\14\1\22\6\uffff\1\20\15\uffff\1\22"+
            "\1\uffff\1\22\10\uffff\1\15\16\uffff\1\14\1\uffff\1\22",
            "",
            "",
            "",
            "",
            "",
            "\1\24\67\uffff\1\23",
            "\1\uffff",
            "\1\31\1\uffff\1\30\1\10\4\uffff\1\10\3\uffff\1\26\11\uffff"+
            "\1\10\1\uffff\1\30\6\uffff\1\31\1\22\43\uffff\1\25\2\uffff\1"+
            "\31\12\uffff\1\10\5\uffff\1\10\1\uffff\1\10\1\27\1\10\1\31\6"+
            "\uffff\1\27\15\uffff\1\32\1\uffff\1\31\10\uffff\1\10\16\uffff"+
            "\1\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\23\uffff\1\33\43\uffff\1\34",
            "\1\35\23\uffff\1\33\43\uffff\1\34",
            "\1\uffff",
            "\1\37\13\uffff\1\10\22\uffff\1\37\1\36\43\uffff\1\10\2\uffff"+
            "\1\37\23\uffff\1\10\1\uffff\1\37\6\uffff\1\10\17\uffff\1\37",
            "",
            "",
            "",
            "",
            "\1\41\67\uffff\1\40",
            "\1\30\1\10\4\uffff\1\10\3\uffff\1\26\11\uffff\1\10\1\uffff"+
            "\1\45\7\uffff\1\43\43\uffff\1\42\2\uffff\1\45\12\uffff\1\10"+
            "\5\uffff\1\10\1\uffff\1\10\1\27\1\10\7\uffff\1\44\30\uffff\1"+
            "\10\16\uffff\1\10",
            "\1\30\1\10\4\uffff\1\10\3\uffff\1\26\11\uffff\1\10\1\uffff"+
            "\1\45\7\uffff\1\43\43\uffff\1\46\2\uffff\1\45\12\uffff\1\10"+
            "\5\uffff\1\10\1\uffff\1\10\1\27\1\10\7\uffff\1\44\30\uffff\1"+
            "\10\16\uffff\1\10",
            "\1\50\67\uffff\1\47",
            "",
            "\1\35\23\uffff\1\33\43\uffff\1\34",
            "\1\35\23\uffff\1\33\43\uffff\1\34",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\52\13\uffff\1\10\22\uffff\1\37\1\51\43\uffff\1\10\2\uffff"+
            "\1\52\23\uffff\1\10\1\uffff\1\52\6\uffff\1\10\17\uffff\1\52",
            "\1\52\13\uffff\1\10\22\uffff\1\37\1\51\43\uffff\1\10\2\uffff"+
            "\1\52\23\uffff\1\10\1\uffff\1\52\6\uffff\1\10\17\uffff\1\52",
            "\1\54\67\uffff\1\53",
            "",
            "\1\52\36\uffff\1\37\1\51\46\uffff\1\52\25\uffff\1\52\6\uffff"+
            "\1\10\17\uffff\1\52",
            "\1\52\36\uffff\1\37\1\51\46\uffff\1\52\25\uffff\1\52\6\uffff"+
            "\1\10\17\uffff\1\52"
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "459:35: ( referencing_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA76_22 = input.LA(1);

                         
                        int index76_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_22==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 30;}

                        else if ( (LA76_22==DELIMITED_ID||LA76_22==REGULAR_ID||LA76_22==SQL92_RESERVED_DATE||LA76_22==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA76_22==ASSIGN_OP||LA76_22==PERCENT||LA76_22==SEMICOLON||LA76_22==SQL92_RESERVED_DEFAULT||LA76_22==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 31;}

                         
                        input.seek(index76_22);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA76_43 = input.LA(1);

                         
                        int index76_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_43==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA76_43==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 41;}

                        else if ( (LA76_43==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 31;}

                        else if ( (LA76_43==ASSIGN_OP||LA76_43==SEMICOLON||LA76_43==SQL92_RESERVED_DEFAULT||LA76_43==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}

                         
                        input.seek(index76_43);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA76_19 = input.LA(1);

                         
                        int index76_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_19==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 27;}

                        else if ( (LA76_19==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 28;}

                        else if ( (LA76_19==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 29;}

                         
                        input.seek(index76_19);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA76_38 = input.LA(1);

                         
                        int index76_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows")))) ) {s = 37;}

                         
                        input.seek(index76_38);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA76_34 = input.LA(1);

                         
                        int index76_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows")))) ) {s = 37;}

                         
                        input.seek(index76_34);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA76_21 = input.LA(1);

                         
                        int index76_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows")))) ) {s = 26;}

                         
                        input.seek(index76_21);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA76_9 = input.LA(1);

                         
                        int index76_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_9==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 19;}

                        else if ( (LA76_9==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 20;}

                         
                        input.seek(index76_9);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA76_11 = input.LA(1);

                         
                        int index76_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_11==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 21;}

                        else if ( (LA76_11==BINDVAR||LA76_11==COLON||LA76_11==INTRODUCER||LA76_11==SQL92_RESERVED_BEGIN||LA76_11==SQL92_RESERVED_CREATE||LA76_11==SQL92_RESERVED_CURSOR||LA76_11==SQL92_RESERVED_DECLARE||LA76_11==SQL92_RESERVED_PROCEDURE||LA76_11==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA76_11==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 22;}

                        else if ( (LA76_11==PERIOD) ) {s = 18;}

                        else if ( (LA76_11==SQL92_RESERVED_DATE||LA76_11==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 23;}

                        else if ( (LA76_11==AT_SIGN||LA76_11==LEFT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 24;}

                        else if ( (LA76_11==ASSIGN_OP||LA76_11==PERCENT||LA76_11==SEMICOLON||LA76_11==SQL92_RESERVED_DEFAULT||LA76_11==SQL92_RESERVED_NOT) ) {s = 25;}

                        else if ( (LA76_11==SQL92_RESERVED_IS) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 26;}

                         
                        input.seek(index76_11);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA76_44 = input.LA(1);

                         
                        int index76_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_44==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA76_44==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 41;}

                        else if ( (LA76_44==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 31;}

                        else if ( (LA76_44==ASSIGN_OP||LA76_44==SEMICOLON||LA76_44==SQL92_RESERVED_DEFAULT||LA76_44==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}

                         
                        input.seek(index76_44);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA76_30 = input.LA(1);

                         
                        int index76_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_30==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 39;}

                        else if ( (LA76_30==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 40;}

                         
                        input.seek(index76_30);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA76_39 = input.LA(1);

                         
                        int index76_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_39==DELIMITED_ID||LA76_39==REGULAR_ID||LA76_39==SQL92_RESERVED_DATE||LA76_39==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA76_39==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 41;}

                        else if ( (LA76_39==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 31;}

                        else if ( (LA76_39==ASSIGN_OP||LA76_39==SEMICOLON||LA76_39==SQL92_RESERVED_DEFAULT||LA76_39==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}

                         
                        input.seek(index76_39);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA76_28 = input.LA(1);

                         
                        int index76_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_28==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 34;}

                        else if ( (LA76_28==BINDVAR||LA76_28==COLON||LA76_28==INTRODUCER||LA76_28==SQL92_RESERVED_BEGIN||LA76_28==SQL92_RESERVED_CREATE||LA76_28==SQL92_RESERVED_CURSOR||LA76_28==SQL92_RESERVED_DECLARE||LA76_28==SQL92_RESERVED_PROCEDURE||LA76_28==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA76_28==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 22;}

                        else if ( (LA76_28==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 35;}

                        else if ( (LA76_28==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 23;}

                        else if ( (LA76_28==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 36;}

                        else if ( (LA76_28==AT_SIGN) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 24;}

                        else if ( (LA76_28==LEFT_PAREN||LA76_28==SEMICOLON) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 37;}

                         
                        input.seek(index76_28);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA76_1 = input.LA(1);

                         
                        int index76_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_1==REGULAR_ID) ) {s = 3;}

                        else if ( (LA76_1==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call"))))) {s = 4;}

                        else if ( (LA76_1==DELIMITED_ID) ) {s = 5;}

                        else if ( (LA76_1==BINDVAR||LA76_1==COLON||LA76_1==SQL92_RESERVED_BEGIN||LA76_1==SQL92_RESERVED_CREATE||LA76_1==SQL92_RESERVED_CURSOR||LA76_1==SQL92_RESERVED_DECLARE||LA76_1==SQL92_RESERVED_PROCEDURE||LA76_1==SQL92_RESERVED_WHEN) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 6;}

                        else if ( (LA76_1==PERIOD||LA76_1==SQL92_RESERVED_DATE||LA76_1==SQL92_RESERVED_EXCEPTION) ) {s = 7;}

                         
                        input.seek(index76_1);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA76_20 = input.LA(1);

                         
                        int index76_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_20==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 27;}

                        else if ( (LA76_20==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 28;}

                        else if ( (LA76_20==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 29;}

                         
                        input.seek(index76_20);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA76_3 = input.LA(1);

                         
                        int index76_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA76_3 >= CHAR_STRING && LA76_3 <= CHAR_STRING_PERL)||LA76_3==NATIONAL_CHAR_STRING_LIT||LA76_3==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA76_3==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 9;}

                        else if ( (LA76_3==REGULAR_ID) ) {s = 10;}

                        else if ( (LA76_3==DELIMITED_ID) ) {s = 11;}

                        else if ( (LA76_3==PERIOD) ) {s = 7;}

                        else if ( (LA76_3==COMMA||LA76_3==SQL92_RESERVED_DECLARE||LA76_3==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("follows")))) {s = 12;}

                        else if ( (LA76_3==BINDVAR||LA76_3==COLON||LA76_3==SQL92_RESERVED_CREATE||LA76_3==SQL92_RESERVED_CURSOR||LA76_3==SQL92_RESERVED_PROCEDURE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 13;}

                        else if ( (LA76_3==SQL92_RESERVED_BEGIN) && ((input.LT(1).getText().equalsIgnoreCase("follows")))) {s = 14;}

                        else if ( (LA76_3==SQL92_RESERVED_DATE) ) {s = 15;}

                        else if ( (LA76_3==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 16;}

                        else if ( (LA76_3==AT_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("call")))) {s = 17;}

                        else if ( (LA76_3==ASSIGN_OP||LA76_3==LEFT_PAREN||LA76_3==PERCENT||LA76_3==SEMICOLON||LA76_3==SQL92_RESERVED_DEFAULT||LA76_3==SQL92_RESERVED_IS||LA76_3==SQL92_RESERVED_NOT||LA76_3==SQL92_RESERVED_WITH) ) {s = 18;}

                         
                        input.seek(index76_3);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA76_40 = input.LA(1);

                         
                        int index76_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_40==DELIMITED_ID||LA76_40==REGULAR_ID||LA76_40==SQL92_RESERVED_DATE||LA76_40==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA76_40==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 41;}

                        else if ( (LA76_40==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 31;}

                        else if ( (LA76_40==ASSIGN_OP||LA76_40==SEMICOLON||LA76_40==SQL92_RESERVED_DEFAULT||LA76_40==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}

                         
                        input.seek(index76_40);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA76_32 = input.LA(1);

                         
                        int index76_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_32==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 28;}

                        else if ( (LA76_32==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 29;}

                        else if ( (LA76_32==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 27;}

                         
                        input.seek(index76_32);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA76_10 = input.LA(1);

                         
                        int index76_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 8;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index76_10);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA76_33 = input.LA(1);

                         
                        int index76_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_33==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 28;}

                        else if ( (LA76_33==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 29;}

                        else if ( (LA76_33==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 27;}

                         
                        input.seek(index76_33);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA76_29 = input.LA(1);

                         
                        int index76_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_29==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 38;}

                        else if ( (LA76_29==BINDVAR||LA76_29==COLON||LA76_29==INTRODUCER||LA76_29==SQL92_RESERVED_BEGIN||LA76_29==SQL92_RESERVED_CREATE||LA76_29==SQL92_RESERVED_CURSOR||LA76_29==SQL92_RESERVED_DECLARE||LA76_29==SQL92_RESERVED_PROCEDURE||LA76_29==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 8;}

                        else if ( (LA76_29==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 22;}

                        else if ( (LA76_29==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 35;}

                        else if ( (LA76_29==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 23;}

                        else if ( (LA76_29==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 36;}

                        else if ( (LA76_29==AT_SIGN) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 24;}

                        else if ( (LA76_29==LEFT_PAREN||LA76_29==SEMICOLON) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 37;}

                         
                        input.seek(index76_29);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA76_27 = input.LA(1);

                         
                        int index76_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_27==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 32;}

                        else if ( (LA76_27==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 33;}

                         
                        input.seek(index76_27);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA76_41 = input.LA(1);

                         
                        int index76_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA76_41==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 43;}

                        else if ( (LA76_41==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))))) {s = 44;}

                         
                        input.seek(index76_41);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA92_eotS =
        "\26\uffff";
    static final String DFA92_eofS =
        "\26\uffff";
    static final String DFA92_minS =
        "\1\11\1\uffff\1\11\1\22\2\0\3\uffff\3\22\4\0\2\22\4\0";
    static final String DFA92_maxS =
        "\1\u0092\1\uffff\1\u0092\1\112\2\0\3\uffff\3\112\4\0\2\112\4\0";
    static final String DFA92_acceptS =
        "\1\uffff\1\2\4\uffff\2\2\1\1\15\uffff";
    static final String DFA92_specialS =
        "\2\uffff\1\17\1\5\1\12\1\20\3\uffff\1\3\1\1\1\2\1\16\1\11\1\15\1"+
        "\10\1\4\1\0\1\14\1\7\1\13\1\6}>";
    static final String[] DFA92_transitionS = {
            "\1\1\4\uffff\1\1\3\uffff\1\1\11\uffff\1\1\55\uffff\1\2\15\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\13\uffff\1\1\24\uffff"+
            "\1\1\16\uffff\1\1",
            "",
            "\1\6\2\uffff\2\10\1\6\3\uffff\1\5\11\uffff\1\3\5\uffff\1\10"+
            "\3\uffff\1\7\43\uffff\1\4\13\uffff\1\10\1\uffff\1\6\5\uffff"+
            "\1\6\1\uffff\1\6\1\7\1\6\7\uffff\1\7\30\uffff\1\6\16\uffff\1"+
            "\6",
            "\1\12\67\uffff\1\11",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\15\23\uffff\1\13\43\uffff\1\14",
            "\1\17\23\uffff\1\13\43\uffff\1\16",
            "\1\21\67\uffff\1\20",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\23\23\uffff\1\13\43\uffff\1\22",
            "\1\25\23\uffff\1\13\43\uffff\1\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "()+ loopback of 542:27: ( referencing_element )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_17 = input.LA(1);

                         
                        int index92_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA92_17==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 20;}

                        else if ( (LA92_17==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 21;}

                        else if ( (LA92_17==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 11;}

                         
                        input.seek(index92_17);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA92_10 = input.LA(1);

                         
                        int index92_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA92_10==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 11;}

                        else if ( (LA92_10==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 14;}

                        else if ( (LA92_10==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 15;}

                         
                        input.seek(index92_10);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA92_11 = input.LA(1);

                         
                        int index92_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA92_11==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 16;}

                        else if ( (LA92_11==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 17;}

                         
                        input.seek(index92_11);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA92_9 = input.LA(1);

                         
                        int index92_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA92_9==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 11;}

                        else if ( (LA92_9==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 12;}

                        else if ( (LA92_9==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 13;}

                         
                        input.seek(index92_9);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA92_16 = input.LA(1);

                         
                        int index92_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA92_16==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 18;}

                        else if ( (LA92_16==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 19;}

                        else if ( (LA92_16==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 11;}

                         
                        input.seek(index92_16);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA92_3 = input.LA(1);

                         
                        int index92_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA92_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 9;}

                        else if ( (LA92_3==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 10;}

                         
                        input.seek(index92_3);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA92_21 = input.LA(1);

                         
                        int index92_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call")))) ) {s = 7;}

                         
                        input.seek(index92_21);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA92_19 = input.LA(1);

                         
                        int index92_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call")))) ) {s = 7;}

                         
                        input.seek(index92_19);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA92_15 = input.LA(1);

                         
                        int index92_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call")))) ) {s = 7;}

                         
                        input.seek(index92_15);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA92_13 = input.LA(1);

                         
                        int index92_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call")))) ) {s = 7;}

                         
                        input.seek(index92_13);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA92_4 = input.LA(1);

                         
                        int index92_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index92_4);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA92_20 = input.LA(1);

                         
                        int index92_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call")))) ) {s = 7;}

                         
                        input.seek(index92_20);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA92_18 = input.LA(1);

                         
                        int index92_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call")))) ) {s = 7;}

                         
                        input.seek(index92_18);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA92_14 = input.LA(1);

                         
                        int index92_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call")))) ) {s = 7;}

                         
                        input.seek(index92_14);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA92_12 = input.LA(1);

                         
                        int index92_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 8;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("call")))) ) {s = 7;}

                         
                        input.seek(index92_12);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA92_2 = input.LA(1);

                         
                        int index92_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA92_2==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 3;}

                        else if ( (LA92_2==REGULAR_ID) ) {s = 4;}

                        else if ( (LA92_2==DELIMITED_ID) ) {s = 5;}

                        else if ( (LA92_2==BINDVAR||LA92_2==COLON||LA92_2==SQL92_RESERVED_BEGIN||LA92_2==SQL92_RESERVED_CREATE||LA92_2==SQL92_RESERVED_CURSOR||LA92_2==SQL92_RESERVED_DECLARE||LA92_2==SQL92_RESERVED_PROCEDURE||LA92_2==SQL92_RESERVED_WHEN) && (((input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("disable"))))) {s = 6;}

                        else if ( (LA92_2==PERIOD||LA92_2==SQL92_RESERVED_DATE||LA92_2==SQL92_RESERVED_EXCEPTION) ) {s = 7;}

                        else if ( ((LA92_2 >= CHAR_STRING && LA92_2 <= CHAR_STRING_PERL)||LA92_2==NATIONAL_CHAR_STRING_LIT||LA92_2==SQL92_RESERVED_AS) && (((input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("new"))))) {s = 8;}

                         
                        input.seek(index92_2);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA92_5 = input.LA(1);

                         
                        int index92_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("parent"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("new")))) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index92_5);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA171_eotS =
        "\33\uffff";
    static final String DFA171_eofS =
        "\33\uffff";
    static final String DFA171_minS =
        "\1\22\1\17\1\uffff\1\112\2\uffff\1\17\1\112\1\uffff\1\5\1\0\1\22"+
        "\2\0\3\22\4\0\2\22\4\0";
    static final String DFA171_maxS =
        "\1\141\1\u0094\1\uffff\1\112\2\uffff\1\u0080\1\u0083\1\uffff\1\u0097"+
        "\1\0\1\112\2\0\3\112\4\0\2\112\4\0";
    static final String DFA171_acceptS =
        "\2\uffff\1\1\1\uffff\2\1\2\uffff\1\2\22\uffff";
    static final String DFA171_specialS =
        "\1\uffff\1\16\4\uffff\1\1\1\10\1\uffff\1\0\1\6\1\uffff\1\11\1\7"+
        "\3\uffff\1\13\1\3\1\14\1\4\2\uffff\1\15\1\5\1\12\1\2}>";
    static final String[] DFA171_transitionS = {
            "\1\2\67\uffff\1\1\26\uffff\1\2",
            "\1\2\2\uffff\1\4\13\uffff\1\2\6\uffff\2\5\43\uffff\1\2\1\uffff"+
            "\2\2\10\uffff\1\3\41\uffff\1\2\7\uffff\1\2\23\uffff\1\2",
            "",
            "\1\6",
            "",
            "",
            "\1\10\72\uffff\1\7\1\uffff\2\10\10\uffff\1\10\41\uffff\1\10"+
            "\7\uffff\1\10",
            "\1\11\2\uffff\1\10\54\uffff\1\10\10\uffff\1\10",
            "",
            "\1\10\3\uffff\1\10\2\uffff\1\12\2\10\3\uffff\1\15\3\uffff\1"+
            "\10\5\uffff\1\13\1\uffff\1\10\2\uffff\2\10\4\uffff\1\10\30\uffff"+
            "\1\10\11\uffff\1\14\7\uffff\1\10\2\uffff\1\10\5\uffff\1\10\4"+
            "\uffff\2\10\1\uffff\1\10\2\uffff\1\10\4\uffff\2\10\12\uffff"+
            "\1\10\2\uffff\2\10\6\uffff\1\10\5\uffff\1\10\2\uffff\2\10\12"+
            "\uffff\1\10",
            "\1\uffff",
            "\1\17\67\uffff\1\16",
            "\1\uffff",
            "\1\uffff",
            "\1\22\23\uffff\1\20\43\uffff\1\21",
            "\1\24\23\uffff\1\20\43\uffff\1\23",
            "\1\26\67\uffff\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\30\23\uffff\1\20\43\uffff\1\27",
            "\1\32\23\uffff\1\20\43\uffff\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "801:20: ( type_spec | self_key as_key result_key )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA171_9 = input.LA(1);

                         
                        int index171_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA171_9==CHAR_STRING) ) {s = 10;}

                        else if ( (LA171_9==INTRODUCER) ) {s = 11;}

                        else if ( (LA171_9==REGULAR_ID) ) {s = 12;}

                        else if ( (LA171_9==DELIMITED_ID) ) {s = 13;}

                        else if ( (LA171_9==APPROXIMATE_NUM_LIT||LA171_9==BINDVAR||(LA171_9 >= CHAR_STRING_PERL && LA171_9 <= COLON)||LA171_9==EXACT_NUM_LIT||LA171_9==LEFT_PAREN||(LA171_9 >= MINUS_SIGN && LA171_9 <= NATIONAL_CHAR_STRING_LIT)||LA171_9==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA171_9==PLUS_SIGN||LA171_9==SQL92_RESERVED_ALL||LA171_9==SQL92_RESERVED_ANY||LA171_9==SQL92_RESERVED_CASE||(LA171_9 >= SQL92_RESERVED_CURSOR && LA171_9 <= SQL92_RESERVED_DATE)||LA171_9==SQL92_RESERVED_DEFAULT||LA171_9==SQL92_RESERVED_DISTINCT||(LA171_9 >= SQL92_RESERVED_EXISTS && LA171_9 <= SQL92_RESERVED_FALSE)||LA171_9==SQL92_RESERVED_INTO||(LA171_9 >= SQL92_RESERVED_NOT && LA171_9 <= SQL92_RESERVED_NULL)||LA171_9==SQL92_RESERVED_PRIOR||LA171_9==SQL92_RESERVED_TABLE||(LA171_9 >= SQL92_RESERVED_TO && LA171_9 <= SQL92_RESERVED_TRUE)||LA171_9==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("self")))) {s = 8;}

                         
                        input.seek(index171_9);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA171_6 = input.LA(1);

                         
                        int index171_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA171_6==REGULAR_ID) ) {s = 7;}

                        else if ( (LA171_6==COMMA||(LA171_6 >= RIGHT_PAREN && LA171_6 <= SEMICOLON)||LA171_6==SQL92_RESERVED_AS||LA171_6==SQL92_RESERVED_IS||LA171_6==SQL92_RESERVED_ORDER) && ((input.LT(1).getText().equalsIgnoreCase("self")))) {s = 8;}

                         
                        input.seek(index171_6);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA171_26 = input.LA(1);

                         
                        int index171_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_26);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA171_18 = input.LA(1);

                         
                        int index171_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_18);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA171_20 = input.LA(1);

                         
                        int index171_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_20);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA171_24 = input.LA(1);

                         
                        int index171_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_24);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA171_10 = input.LA(1);

                         
                        int index171_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_10);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA171_13 = input.LA(1);

                         
                        int index171_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_13);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA171_7 = input.LA(1);

                         
                        int index171_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA171_7==REGULAR_ID) ) {s = 9;}

                        else if ( (LA171_7==SEMICOLON||LA171_7==SQL92_RESERVED_NOT||LA171_7==SQL92_RESERVED_PROCEDURE) && ((input.LT(1).getText().equalsIgnoreCase("self")))) {s = 8;}

                         
                        input.seek(index171_7);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA171_12 = input.LA(1);

                         
                        int index171_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_12);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA171_25 = input.LA(1);

                         
                        int index171_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_25);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA171_17 = input.LA(1);

                         
                        int index171_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_17);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA171_19 = input.LA(1);

                         
                        int index171_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_19);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA171_23 = input.LA(1);

                         
                        int index171_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}

                         
                        input.seek(index171_23);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA171_1 = input.LA(1);

                         
                        int index171_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA171_1==COMMA||LA171_1==LEFT_PAREN||LA171_1==REGULAR_ID||(LA171_1 >= RIGHT_PAREN && LA171_1 <= SEMICOLON)||LA171_1==SQL92_RESERVED_IS||LA171_1==SQL92_RESERVED_ORDER||LA171_1==SQL92_RESERVED_WITH) ) {s = 2;}

                        else if ( (LA171_1==SQL92_RESERVED_AS) ) {s = 3;}

                        else if ( (LA171_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("ref")))) {s = 4;}

                        else if ( ((LA171_1 >= PERCENT && LA171_1 <= PERIOD)) ) {s = 5;}

                         
                        input.seek(index171_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 171, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA215_eotS =
        "\36\uffff";
    static final String DFA215_eofS =
        "\36\uffff";
    static final String DFA215_minS =
        "\1\112\1\36\1\22\2\uffff\1\22\2\17\1\uffff\2\22\1\uffff\1\5\1\22"+
        "\1\7\1\uffff\1\5\1\7\3\22\2\0\3\22\2\7\2\22";
    static final String DFA215_maxS =
        "\1\112\1\36\1\143\2\uffff\1\112\2\46\1\uffff\2\112\1\uffff\1\u0097"+
        "\1\112\1\u0098\1\uffff\2\u0098\3\112\2\0\3\112\2\u0098\2\112";
    static final String DFA215_acceptS =
        "\3\uffff\1\1\1\2\3\uffff\1\5\2\uffff\1\3\3\uffff\1\4\16\uffff";
    static final String DFA215_specialS =
        "\1\uffff\1\5\1\6\11\uffff\1\10\1\uffff\1\4\1\uffff\1\15\1\12\1\17"+
        "\2\uffff\1\0\1\13\1\3\1\1\1\14\1\11\1\16\1\7\1\2}>";
    static final String[] DFA215_transitionS = {
            "\1\1",
            "\1\2",
            "\1\7\11\uffff\1\5\55\uffff\1\6\30\uffff\1\10",
            "",
            "",
            "\1\12\67\uffff\1\11",
            "\1\14\26\uffff\1\13",
            "\1\14\26\uffff\1\13",
            "",
            "\1\7\23\uffff\1\15\43\uffff\1\6",
            "\1\7\23\uffff\1\15\43\uffff\1\6",
            "",
            "\1\16\3\uffff\1\17\2\uffff\3\17\3\uffff\1\21\3\uffff\1\16\5"+
            "\uffff\1\22\1\uffff\1\17\2\uffff\2\17\4\uffff\1\17\30\uffff"+
            "\1\17\11\uffff\1\20\7\uffff\1\17\2\uffff\1\17\5\uffff\1\17\4"+
            "\uffff\2\17\1\uffff\1\17\2\uffff\1\17\4\uffff\2\17\15\uffff"+
            "\2\17\6\uffff\1\17\11\uffff\1\17\12\uffff\1\16",
            "\1\24\67\uffff\1\23",
            "\1\17\3\uffff\1\17\5\uffff\1\17\3\uffff\1\17\1\uffff\1\17\1"+
            "\uffff\2\17\2\uffff\1\17\1\uffff\3\17\2\uffff\1\17\33\uffff"+
            "\1\17\11\uffff\1\17\1\uffff\1\25\3\uffff\1\17\3\uffff\1\17\4"+
            "\uffff\1\17\32\uffff\1\17\3\uffff\3\17\4\uffff\1\17\30\uffff"+
            "\1\17",
            "",
            "\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\4\17\1\10\1\uffff\2"+
            "\17\2\uffff\3\17\1\uffff\2\17\1\uffff\7\17\1\uffff\1\17\1\uffff"+
            "\2\17\30\uffff\1\17\11\uffff\1\17\1\uffff\1\26\3\uffff\1\17"+
            "\1\uffff\1\17\1\uffff\2\17\3\uffff\1\17\1\uffff\1\17\5\uffff"+
            "\1\17\1\uffff\1\17\2\uffff\1\17\4\uffff\2\17\7\uffff\1\17\3"+
            "\uffff\4\17\3\uffff\1\17\2\uffff\1\17\11\uffff\1\17\12\uffff"+
            "\2\17",
            "\1\17\3\uffff\1\17\3\uffff\1\10\1\uffff\1\17\3\uffff\1\17\1"+
            "\uffff\1\17\1\uffff\2\17\2\uffff\5\17\2\uffff\1\17\1\uffff\1"+
            "\17\31\uffff\1\17\11\uffff\1\17\1\uffff\1\26\3\uffff\1\17\3"+
            "\uffff\1\17\4\uffff\1\17\1\uffff\1\17\30\uffff\1\17\3\uffff"+
            "\3\17\4\uffff\1\17\30\uffff\1\17",
            "\1\30\67\uffff\1\27",
            "\1\7\23\uffff\1\15\43\uffff\1\6",
            "\1\7\23\uffff\1\15\43\uffff\1\6",
            "\1\uffff",
            "\1\uffff",
            "\1\33\23\uffff\1\31\43\uffff\1\32",
            "\1\33\23\uffff\1\31\43\uffff\1\32",
            "\1\35\67\uffff\1\34",
            "\1\17\3\uffff\1\17\3\uffff\1\10\1\uffff\1\17\3\uffff\1\17\1"+
            "\uffff\1\17\1\uffff\2\17\2\uffff\5\17\2\uffff\1\17\1\uffff\1"+
            "\17\31\uffff\1\17\11\uffff\1\17\1\uffff\1\26\3\uffff\1\17\3"+
            "\uffff\1\17\4\uffff\1\17\32\uffff\1\17\3\uffff\3\17\4\uffff"+
            "\1\17\30\uffff\1\17",
            "\1\17\3\uffff\1\17\3\uffff\1\10\1\uffff\1\17\3\uffff\1\17\1"+
            "\uffff\1\17\1\uffff\2\17\2\uffff\5\17\2\uffff\1\17\1\uffff\1"+
            "\17\31\uffff\1\17\11\uffff\1\17\1\uffff\1\26\3\uffff\1\17\3"+
            "\uffff\1\17\4\uffff\1\17\32\uffff\1\17\3\uffff\3\17\4\uffff"+
            "\1\17\30\uffff\1\17",
            "\1\33\23\uffff\1\31\43\uffff\1\32",
            "\1\33\23\uffff\1\31\43\uffff\1\32"
    };

    static final short[] DFA215_eot = DFA.unpackEncodedString(DFA215_eotS);
    static final short[] DFA215_eof = DFA.unpackEncodedString(DFA215_eofS);
    static final char[] DFA215_min = DFA.unpackEncodedStringToUnsignedChars(DFA215_minS);
    static final char[] DFA215_max = DFA.unpackEncodedStringToUnsignedChars(DFA215_maxS);
    static final short[] DFA215_accept = DFA.unpackEncodedString(DFA215_acceptS);
    static final short[] DFA215_special = DFA.unpackEncodedString(DFA215_specialS);
    static final short[][] DFA215_transition;

    static {
        int numStates = DFA215_transitionS.length;
        DFA215_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA215_transition[i] = DFA.unpackEncodedString(DFA215_transitionS[i]);
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = DFA215_eot;
            this.eof = DFA215_eof;
            this.min = DFA215_min;
            this.max = DFA215_max;
            this.accept = DFA215_accept;
            this.special = DFA215_special;
            this.transition = DFA215_transition;
        }
        public String getDescription() {
            return "997:9: ( serially_reusable_key | autonomous_transaction_key | exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN | inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN | restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA215_21 = input.LA(1);

                         
                        int index215_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("exception_init"))) ) {s = 11;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("inline"))) ) {s = 15;}

                         
                        input.seek(index215_21);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA215_24 = input.LA(1);

                         
                        int index215_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_24==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 25;}

                        else if ( (LA215_24==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 26;}

                        else if ( (LA215_24==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 27;}

                         
                        input.seek(index215_24);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA215_29 = input.LA(1);

                         
                        int index215_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_29==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 26;}

                        else if ( (LA215_29==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 27;}

                        else if ( (LA215_29==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 25;}

                         
                        input.seek(index215_29);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA215_23 = input.LA(1);

                         
                        int index215_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_23==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 25;}

                        else if ( (LA215_23==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 26;}

                        else if ( (LA215_23==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 27;}

                         
                        input.seek(index215_23);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA215_14 = input.LA(1);

                         
                        int index215_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_14==RIGHT_PAREN) ) {s = 21;}

                        else if ( (LA215_14==ASTERISK||LA215_14==CARRET_OPERATOR_PART||LA215_14==CONCATENATION_OP||LA215_14==EQUALS_OP||LA215_14==EXCLAMATION_OPERATOR_PART||(LA215_14 >= GREATER_THAN_OP && LA215_14 <= GREATER_THAN_OR_EQUALS_OP)||LA215_14==LEFT_BRACKET||(LA215_14 >= LESS_THAN_OP && LA215_14 <= MINUS_SIGN)||LA215_14==NOT_EQUAL_OP||LA215_14==PLUS_SIGN||LA215_14==REGULAR_ID||LA215_14==SOLIDUS||LA215_14==SQL92_RESERVED_AND||LA215_14==SQL92_RESERVED_BETWEEN||LA215_14==SQL92_RESERVED_IN||(LA215_14 >= SQL92_RESERVED_IS && LA215_14 <= SQL92_RESERVED_NOT)||LA215_14==SQL92_RESERVED_OR||LA215_14==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 15;}

                         
                        input.seek(index215_14);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA215_1 = input.LA(1);

                         
                        int index215_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_1==LEFT_PAREN) ) {s = 2;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("serially_reusable"))) ) {s = 3;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("autonomous_transaction"))) ) {s = 4;}

                         
                        input.seek(index215_1);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA215_2 = input.LA(1);

                         
                        int index215_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_2==INTRODUCER) ) {s = 5;}

                        else if ( (LA215_2==REGULAR_ID) ) {s = 6;}

                        else if ( (LA215_2==DELIMITED_ID) ) {s = 7;}

                        else if ( (LA215_2==SQL92_RESERVED_DEFAULT) && ((input.LT(1).getText().equalsIgnoreCase("restrict_references")))) {s = 8;}

                         
                        input.seek(index215_2);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA215_28 = input.LA(1);

                         
                        int index215_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_28==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 26;}

                        else if ( (LA215_28==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 27;}

                        else if ( (LA215_28==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 25;}

                         
                        input.seek(index215_28);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA215_12 = input.LA(1);

                         
                        int index215_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_12==APPROXIMATE_NUM_LIT||LA215_12==EXACT_NUM_LIT||LA215_12==UNSIGNED_INTEGER) ) {s = 14;}

                        else if ( (LA215_12==BINDVAR||(LA215_12 >= CHAR_STRING && LA215_12 <= COLON)||LA215_12==LEFT_PAREN||(LA215_12 >= MINUS_SIGN && LA215_12 <= NATIONAL_CHAR_STRING_LIT)||LA215_12==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA215_12==PLUS_SIGN||LA215_12==SQL92_RESERVED_ALL||LA215_12==SQL92_RESERVED_ANY||LA215_12==SQL92_RESERVED_CASE||(LA215_12 >= SQL92_RESERVED_CURSOR && LA215_12 <= SQL92_RESERVED_DATE)||LA215_12==SQL92_RESERVED_DEFAULT||LA215_12==SQL92_RESERVED_DISTINCT||(LA215_12 >= SQL92_RESERVED_EXISTS && LA215_12 <= SQL92_RESERVED_FALSE)||(LA215_12 >= SQL92_RESERVED_NOT && LA215_12 <= SQL92_RESERVED_NULL)||LA215_12==SQL92_RESERVED_PRIOR||LA215_12==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 15;}

                        else if ( (LA215_12==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 16;}

                        else if ( (LA215_12==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 17;}

                        else if ( (LA215_12==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 18;}

                         
                        input.seek(index215_12);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA215_26 = input.LA(1);

                         
                        int index215_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_26==ASTERISK||LA215_26==CARRET_OPERATOR_PART||LA215_26==CONCATENATION_OP||LA215_26==EQUALS_OP||LA215_26==EXCLAMATION_OPERATOR_PART||(LA215_26 >= GREATER_THAN_OP && LA215_26 <= GREATER_THAN_OR_EQUALS_OP)||(LA215_26 >= LEFT_BRACKET && LA215_26 <= MINUS_SIGN)||LA215_26==NOT_EQUAL_OP||LA215_26==PERIOD||LA215_26==PLUS_SIGN||LA215_26==REGULAR_ID||LA215_26==SOLIDUS||LA215_26==SQL92_RESERVED_AND||LA215_26==SQL92_RESERVED_BETWEEN||LA215_26==SQL92_RESERVED_IN||(LA215_26 >= SQL92_RESERVED_IS && LA215_26 <= SQL92_RESERVED_NOT)||LA215_26==SQL92_RESERVED_OR||LA215_26==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 15;}

                        else if ( (LA215_26==RIGHT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 22;}

                        else if ( (LA215_26==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("restrict_references")))) {s = 8;}

                         
                        input.seek(index215_26);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA215_17 = input.LA(1);

                         
                        int index215_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_17==ASTERISK||LA215_17==CARRET_OPERATOR_PART||LA215_17==CONCATENATION_OP||LA215_17==EQUALS_OP||LA215_17==EXCLAMATION_OPERATOR_PART||(LA215_17 >= GREATER_THAN_OP && LA215_17 <= GREATER_THAN_OR_EQUALS_OP)||(LA215_17 >= LEFT_BRACKET && LA215_17 <= MINUS_SIGN)||LA215_17==NOT_EQUAL_OP||LA215_17==PERIOD||LA215_17==PLUS_SIGN||LA215_17==REGULAR_ID||LA215_17==SOLIDUS||LA215_17==SQL92_RESERVED_AND||LA215_17==SQL92_RESERVED_BETWEEN||LA215_17==SQL92_RESERVED_CASE||LA215_17==SQL92_RESERVED_IN||(LA215_17 >= SQL92_RESERVED_IS && LA215_17 <= SQL92_RESERVED_NOT)||LA215_17==SQL92_RESERVED_OR||LA215_17==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 15;}

                        else if ( (LA215_17==RIGHT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 22;}

                        else if ( (LA215_17==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("restrict_references")))) {s = 8;}

                         
                        input.seek(index215_17);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA215_22 = input.LA(1);

                         
                        int index215_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("inline"))) ) {s = 15;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("restrict_references"))) ) {s = 8;}

                         
                        input.seek(index215_22);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA215_25 = input.LA(1);

                         
                        int index215_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_25==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 28;}

                        else if ( (LA215_25==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 29;}

                         
                        input.seek(index215_25);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA215_16 = input.LA(1);

                         
                        int index215_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_16==APPROXIMATE_NUM_LIT||LA215_16==ASTERISK||LA215_16==BINDVAR||(LA215_16 >= CARRET_OPERATOR_PART && LA215_16 <= COLON)||(LA215_16 >= CONCATENATION_OP && LA215_16 <= DELIMITED_ID)||(LA215_16 >= EQUALS_OP && LA215_16 <= EXCLAMATION_OPERATOR_PART)||(LA215_16 >= GREATER_THAN_OP && LA215_16 <= GREATER_THAN_OR_EQUALS_OP)||(LA215_16 >= INTRODUCER && LA215_16 <= NATIONAL_CHAR_STRING_LIT)||LA215_16==NOT_EQUAL_OP||(LA215_16 >= PERIOD && LA215_16 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA215_16==PLUS_SIGN||LA215_16==REGULAR_ID||LA215_16==SOLIDUS||LA215_16==SQL92_RESERVED_ALL||(LA215_16 >= SQL92_RESERVED_AND && LA215_16 <= SQL92_RESERVED_ANY)||LA215_16==SQL92_RESERVED_BETWEEN||LA215_16==SQL92_RESERVED_CASE||LA215_16==SQL92_RESERVED_DATE||LA215_16==SQL92_RESERVED_DEFAULT||LA215_16==SQL92_RESERVED_DISTINCT||(LA215_16 >= SQL92_RESERVED_EXISTS && LA215_16 <= SQL92_RESERVED_FALSE)||LA215_16==SQL92_RESERVED_IN||(LA215_16 >= SQL92_RESERVED_IS && LA215_16 <= SQL92_RESERVED_NULL)||LA215_16==SQL92_RESERVED_OR||LA215_16==SQL92_RESERVED_PRIOR||LA215_16==SQL92_RESERVED_TRUE||(LA215_16 >= UNSIGNED_INTEGER && LA215_16 <= VERTICAL_BAR)) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 15;}

                        else if ( (LA215_16==RIGHT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 22;}

                        else if ( (LA215_16==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("restrict_references")))) {s = 8;}

                         
                        input.seek(index215_16);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA215_27 = input.LA(1);

                         
                        int index215_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_27==ASTERISK||LA215_27==CARRET_OPERATOR_PART||LA215_27==CONCATENATION_OP||LA215_27==EQUALS_OP||LA215_27==EXCLAMATION_OPERATOR_PART||(LA215_27 >= GREATER_THAN_OP && LA215_27 <= GREATER_THAN_OR_EQUALS_OP)||(LA215_27 >= LEFT_BRACKET && LA215_27 <= MINUS_SIGN)||LA215_27==NOT_EQUAL_OP||LA215_27==PERIOD||LA215_27==PLUS_SIGN||LA215_27==REGULAR_ID||LA215_27==SOLIDUS||LA215_27==SQL92_RESERVED_AND||LA215_27==SQL92_RESERVED_BETWEEN||LA215_27==SQL92_RESERVED_IN||(LA215_27 >= SQL92_RESERVED_IS && LA215_27 <= SQL92_RESERVED_NOT)||LA215_27==SQL92_RESERVED_OR||LA215_27==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 15;}

                        else if ( (LA215_27==RIGHT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 22;}

                        else if ( (LA215_27==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("restrict_references")))) {s = 8;}

                         
                        input.seek(index215_27);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA215_18 = input.LA(1);

                         
                        int index215_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA215_18==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 23;}

                        else if ( (LA215_18==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 24;}

                         
                        input.seek(index215_18);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 215, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA216_eotS =
        "\11\uffff";
    static final String DFA216_eofS =
        "\11\uffff";
    static final String DFA216_minS =
        "\1\11\1\22\1\uffff\2\45\1\22\1\uffff\2\45";
    static final String DFA216_maxS =
        "\2\112\1\uffff\2\170\1\112\1\uffff\2\170";
    static final String DFA216_acceptS =
        "\2\uffff\1\2\3\uffff\1\1\2\uffff";
    static final String DFA216_specialS =
        "\3\uffff\1\0\1\1\2\uffff\1\2\1\3}>";
    static final String[] DFA216_transitionS = {
            "\1\2\4\uffff\1\2\3\uffff\1\2\11\uffff\1\2\55\uffff\1\1",
            "\1\4\67\uffff\1\3",
            "",
            "\1\2\1\5\121\uffff\1\6",
            "\1\2\1\5\121\uffff\1\6",
            "\1\10\67\uffff\1\7",
            "",
            "\1\2\1\5\121\uffff\1\6",
            "\1\2\1\5\121\uffff\1\6"
    };

    static final short[] DFA216_eot = DFA.unpackEncodedString(DFA216_eotS);
    static final short[] DFA216_eof = DFA.unpackEncodedString(DFA216_eofS);
    static final char[] DFA216_min = DFA.unpackEncodedStringToUnsignedChars(DFA216_minS);
    static final char[] DFA216_max = DFA.unpackEncodedStringToUnsignedChars(DFA216_maxS);
    static final short[] DFA216_accept = DFA.unpackEncodedString(DFA216_acceptS);
    static final short[] DFA216_special = DFA.unpackEncodedString(DFA216_specialS);
    static final short[][] DFA216_transition;

    static {
        int numStates = DFA216_transitionS.length;
        DFA216_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
        }
    }

    class DFA216 extends DFA {

        public DFA216(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 216;
            this.eot = DFA216_eot;
            this.eof = DFA216_eof;
            this.min = DFA216_min;
            this.max = DFA216_max;
            this.accept = DFA216_accept;
            this.special = DFA216_special;
            this.transition = DFA216_transition;
        }
        public String getDescription() {
            return "1011:1: record_declaration : ( record_type_dec | record_var_dec );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA216_3 = input.LA(1);

                         
                        int index216_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA216_3==PERIOD) ) {s = 5;}

                        else if ( (LA216_3==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}

                        else if ( (LA216_3==PERCENT) ) {s = 2;}

                         
                        input.seek(index216_3);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA216_4 = input.LA(1);

                         
                        int index216_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA216_4==PERIOD) ) {s = 5;}

                        else if ( (LA216_4==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}

                        else if ( (LA216_4==PERCENT) ) {s = 2;}

                         
                        input.seek(index216_4);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA216_7 = input.LA(1);

                         
                        int index216_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA216_7==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}

                        else if ( (LA216_7==PERIOD) ) {s = 5;}

                        else if ( (LA216_7==PERCENT) ) {s = 2;}

                         
                        input.seek(index216_7);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA216_8 = input.LA(1);

                         
                        int index216_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA216_8==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}

                        else if ( (LA216_8==PERIOD) ) {s = 5;}

                        else if ( (LA216_8==PERCENT) ) {s = 2;}

                         
                        input.seek(index216_8);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 216, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA224_eotS =
        "\11\uffff";
    static final String DFA224_eofS =
        "\11\uffff";
    static final String DFA224_minS =
        "\2\22\1\uffff\1\22\1\45\1\22\1\uffff\2\45";
    static final String DFA224_maxS =
        "\1\112\1\141\1\uffff\1\u0094\1\170\1\112\1\uffff\2\170";
    static final String DFA224_acceptS =
        "\2\uffff\1\2\3\uffff\1\1\2\uffff";
    static final String DFA224_specialS =
        "\3\uffff\1\3\1\2\2\uffff\1\0\1\1}>";
    static final String[] DFA224_transitionS = {
            "\1\2\11\uffff\1\2\55\uffff\1\1",
            "\1\4\67\uffff\1\3\26\uffff\1\2",
            "",
            "\1\2\13\uffff\1\2\6\uffff\1\2\1\5\43\uffff\1\2\2\uffff\1\2"+
            "\52\uffff\1\6\33\uffff\1\2",
            "\1\2\1\5\46\uffff\1\2\52\uffff\1\6",
            "\1\10\67\uffff\1\7",
            "",
            "\1\2\1\5\46\uffff\1\2\52\uffff\1\6",
            "\1\2\1\5\46\uffff\1\2\52\uffff\1\6"
    };

    static final short[] DFA224_eot = DFA.unpackEncodedString(DFA224_eotS);
    static final short[] DFA224_eof = DFA.unpackEncodedString(DFA224_eofS);
    static final char[] DFA224_min = DFA.unpackEncodedStringToUnsignedChars(DFA224_minS);
    static final char[] DFA224_max = DFA.unpackEncodedStringToUnsignedChars(DFA224_maxS);
    static final short[] DFA224_accept = DFA.unpackEncodedString(DFA224_acceptS);
    static final short[] DFA224_special = DFA.unpackEncodedString(DFA224_specialS);
    static final short[][] DFA224_transition;

    static {
        int numStates = DFA224_transitionS.length;
        DFA224_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA224_transition[i] = DFA.unpackEncodedString(DFA224_transitionS[i]);
        }
    }

    class DFA224 extends DFA {

        public DFA224(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 224;
            this.eot = DFA224_eot;
            this.eof = DFA224_eof;
            this.min = DFA224_min;
            this.max = DFA224_max;
            this.accept = DFA224_accept;
            this.special = DFA224_special;
            this.transition = DFA224_transition;
        }
        public String getDescription() {
            return "1042:10: ( table_type_dec | table_var_dec )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA224_7 = input.LA(1);

                         
                        int index224_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA224_7==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}

                        else if ( (LA224_7==PERIOD) ) {s = 5;}

                        else if ( (LA224_7==PERCENT||LA224_7==SEMICOLON) ) {s = 2;}

                         
                        input.seek(index224_7);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA224_8 = input.LA(1);

                         
                        int index224_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA224_8==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}

                        else if ( (LA224_8==PERIOD) ) {s = 5;}

                        else if ( (LA224_8==PERCENT||LA224_8==SEMICOLON) ) {s = 2;}

                         
                        input.seek(index224_8);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA224_4 = input.LA(1);

                         
                        int index224_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA224_4==PERIOD) ) {s = 5;}

                        else if ( (LA224_4==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}

                        else if ( (LA224_4==PERCENT||LA224_4==SEMICOLON) ) {s = 2;}

                         
                        input.seek(index224_4);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA224_3 = input.LA(1);

                         
                        int index224_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA224_3==PERIOD) ) {s = 5;}

                        else if ( (LA224_3==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}

                        else if ( (LA224_3==DELIMITED_ID||LA224_3==LEFT_PAREN||LA224_3==PERCENT||LA224_3==REGULAR_ID||LA224_3==SEMICOLON||LA224_3==SQL92_RESERVED_WITH) ) {s = 2;}

                         
                        input.seek(index224_3);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 224, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA262_eotS =
        "\27\uffff";
    static final String DFA262_eofS =
        "\1\uffff\1\4\25\uffff";
    static final String DFA262_minS =
        "\1\36\1\11\3\uffff\1\5\1\22\1\0\2\uffff\3\22\4\0\2\22\4\0";
    static final String DFA262_maxS =
        "\1\u0094\1\u008b\3\uffff\1\u0097\1\112\1\0\2\uffff\3\112\4\0\2\112"+
        "\4\0";
    static final String DFA262_acceptS =
        "\2\uffff\1\2\1\3\1\4\3\uffff\1\4\1\1\15\uffff";
    static final String DFA262_specialS =
        "\1\uffff\1\7\3\uffff\1\10\1\17\1\5\2\uffff\1\20\1\0\1\6\1\14\1\4"+
        "\1\13\1\3\1\16\1\15\1\12\1\2\1\11\1\1}>";
    static final String[] DFA262_transitionS = {
            "\1\2\27\uffff\1\2\23\uffff\1\1\31\uffff\1\2\10\uffff\1\3\7\uffff"+
            "\1\2\20\uffff\1\2\10\uffff\1\2\4\uffff\1\2",
            "\1\3\4\uffff\1\3\3\uffff\1\7\11\uffff\1\6\55\uffff\1\5\2\uffff"+
            "\1\4\51\uffff\1\2\23\uffff\1\10",
            "",
            "",
            "",
            "\1\11\3\uffff\1\11\2\uffff\3\11\3\uffff\1\11\3\uffff\1\11\5"+
            "\uffff\1\11\1\uffff\1\11\2\uffff\2\11\4\uffff\1\11\30\uffff"+
            "\1\11\11\uffff\1\11\7\uffff\1\11\2\uffff\1\11\5\uffff\1\11\4"+
            "\uffff\2\11\1\uffff\1\11\2\uffff\1\11\4\uffff\2\11\15\uffff"+
            "\2\11\6\uffff\1\11\11\uffff\1\11\12\uffff\1\11",
            "\1\13\67\uffff\1\12",
            "\1\uffff",
            "",
            "",
            "\1\16\23\uffff\1\14\43\uffff\1\15",
            "\1\20\23\uffff\1\14\43\uffff\1\17",
            "\1\22\67\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\24\23\uffff\1\14\43\uffff\1\23",
            "\1\26\23\uffff\1\14\43\uffff\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA262_eot = DFA.unpackEncodedString(DFA262_eotS);
    static final short[] DFA262_eof = DFA.unpackEncodedString(DFA262_eofS);
    static final char[] DFA262_min = DFA.unpackEncodedStringToUnsignedChars(DFA262_minS);
    static final char[] DFA262_max = DFA.unpackEncodedStringToUnsignedChars(DFA262_maxS);
    static final short[] DFA262_accept = DFA.unpackEncodedString(DFA262_acceptS);
    static final short[] DFA262_special = DFA.unpackEncodedString(DFA262_specialS);
    static final short[][] DFA262_transition;

    static {
        int numStates = DFA262_transitionS.length;
        DFA262_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA262_transition[i] = DFA.unpackEncodedString(DFA262_transitionS[i]);
        }
    }

    class DFA262 extends DFA {

        public DFA262(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 262;
            this.eot = DFA262_eot;
            this.eof = DFA262_eof;
            this.min = DFA262_min;
            this.max = DFA262_max;
            this.accept = DFA262_accept;
            this.special = DFA262_special;
            this.transition = DFA262_transition;
        }
        public String getDescription() {
            return "1258:1: sql_statement options {backtrack=true; } : ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA262_11 = input.LA(1);

                         
                        int index262_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA262_11==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 12;}

                        else if ( (LA262_11==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 15;}

                        else if ( (LA262_11==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 16;}

                         
                        input.seek(index262_11);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA262_22 = input.LA(1);

                         
                        int index262_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open")))&&((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))&&synpred64_PLSQLParser())) ) {s = 3;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {s = 8;}

                         
                        input.seek(index262_22);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA262_20 = input.LA(1);

                         
                        int index262_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open")))&&((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))&&synpred64_PLSQLParser())) ) {s = 3;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {s = 8;}

                         
                        input.seek(index262_20);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA262_16 = input.LA(1);

                         
                        int index262_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open")))&&((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))&&synpred64_PLSQLParser())) ) {s = 3;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {s = 8;}

                         
                        input.seek(index262_16);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA262_14 = input.LA(1);

                         
                        int index262_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open")))&&((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))&&synpred64_PLSQLParser())) ) {s = 3;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {s = 8;}

                         
                        input.seek(index262_14);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA262_7 = input.LA(1);

                         
                        int index262_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open")))&&((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))&&synpred64_PLSQLParser())) ) {s = 3;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {s = 8;}

                         
                        input.seek(index262_7);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA262_12 = input.LA(1);

                         
                        int index262_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA262_12==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 17;}

                        else if ( (LA262_12==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 18;}

                         
                        input.seek(index262_12);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA262_1 = input.LA(1);

                         
                        int index262_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA262_1==EOF||LA262_1==SEMICOLON) && (((input.LT(1).getText().equalsIgnoreCase("rollback"))||(input.LT(1).getText().equalsIgnoreCase("commit"))))) {s = 4;}

                        else if ( (LA262_1==REGULAR_ID) ) {s = 5;}

                        else if ( (LA262_1==SQL92_RESERVED_INTO) ) {s = 2;}

                        else if ( (LA262_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 6;}

                        else if ( (LA262_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 7;}

                        else if ( (LA262_1==BINDVAR||LA262_1==COLON) ) {s = 3;}

                        else if ( (LA262_1==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("rollback")))) {s = 8;}

                         
                        input.seek(index262_1);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA262_5 = input.LA(1);

                         
                        int index262_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA262_5==APPROXIMATE_NUM_LIT||LA262_5==BINDVAR||(LA262_5 >= CHAR_STRING && LA262_5 <= COLON)||LA262_5==DELIMITED_ID||LA262_5==EXACT_NUM_LIT||LA262_5==INTRODUCER||LA262_5==LEFT_PAREN||(LA262_5 >= MINUS_SIGN && LA262_5 <= NATIONAL_CHAR_STRING_LIT)||LA262_5==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA262_5==PLUS_SIGN||LA262_5==REGULAR_ID||LA262_5==SQL92_RESERVED_ALL||LA262_5==SQL92_RESERVED_ANY||LA262_5==SQL92_RESERVED_CASE||(LA262_5 >= SQL92_RESERVED_CURSOR && LA262_5 <= SQL92_RESERVED_DATE)||LA262_5==SQL92_RESERVED_DEFAULT||LA262_5==SQL92_RESERVED_DISTINCT||(LA262_5 >= SQL92_RESERVED_EXISTS && LA262_5 <= SQL92_RESERVED_FALSE)||(LA262_5 >= SQL92_RESERVED_NOT && LA262_5 <= SQL92_RESERVED_NULL)||LA262_5==SQL92_RESERVED_PRIOR||LA262_5==SQL92_RESERVED_TRUE||LA262_5==UNSIGNED_INTEGER) ) {s = 9;}

                        else if ( (((((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open")))&&((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))&&synpred64_PLSQLParser())) ) {s = 3;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("savepoint"))||(input.LT(1).getText().equalsIgnoreCase("rollback"))||(input.LT(1).getText().equalsIgnoreCase("set"))||(input.LT(1).getText().equalsIgnoreCase("commit")))) ) {s = 8;}

                         
                        input.seek(index262_5);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA262_21 = input.LA(1);

                         
                        int index262_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open")))&&((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))&&synpred64_PLSQLParser())) ) {s = 3;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {s = 8;}

                         
                        input.seek(index262_21);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA262_19 = input.LA(1);

                         
                        int index262_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open")))&&((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))&&synpred64_PLSQLParser())) ) {s = 3;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {s = 8;}

                         
                        input.seek(index262_19);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA262_15 = input.LA(1);

                         
                        int index262_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open")))&&((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))&&synpred64_PLSQLParser())) ) {s = 3;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {s = 8;}

                         
                        input.seek(index262_15);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA262_13 = input.LA(1);

                         
                        int index262_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open")))&&((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))&&synpred64_PLSQLParser())) ) {s = 3;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {s = 8;}

                         
                        input.seek(index262_13);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA262_18 = input.LA(1);

                         
                        int index262_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA262_18==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 21;}

                        else if ( (LA262_18==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 22;}

                        else if ( (LA262_18==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 12;}

                         
                        input.seek(index262_18);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA262_17 = input.LA(1);

                         
                        int index262_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA262_17==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 19;}

                        else if ( (LA262_17==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 20;}

                        else if ( (LA262_17==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 12;}

                         
                        input.seek(index262_17);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA262_6 = input.LA(1);

                         
                        int index262_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA262_6==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 10;}

                        else if ( (LA262_6==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 11;}

                         
                        input.seek(index262_6);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA262_10 = input.LA(1);

                         
                        int index262_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA262_10==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 12;}

                        else if ( (LA262_10==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 13;}

                        else if ( (LA262_10==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {s = 14;}

                         
                        input.seek(index262_10);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 262, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA268_eotS =
        "\21\uffff";
    static final String DFA268_eofS =
        "\21\uffff";
    static final String DFA268_minS =
        "\1\112\1\11\1\uffff\1\22\2\46\1\11\1\u0097\2\22\3\uffff\1\11\3\22";
    static final String DFA268_maxS =
        "\1\155\1\112\1\uffff\1\112\3\156\1\u0097\2\112\3\uffff\1\156\3\112";
    static final String DFA268_acceptS =
        "\2\uffff\1\3\7\uffff\1\4\1\1\1\2\4\uffff";
    static final String DFA268_specialS =
        "\1\1\1\4\1\uffff\1\10\1\5\1\3\1\2\1\11\1\14\1\12\3\uffff\1\7\1\0"+
        "\1\6\1\13}>";
    static final String[] DFA268_transitionS = {
            "\1\1\42\uffff\1\2",
            "\1\6\4\uffff\1\7\3\uffff\1\5\11\uffff\1\3\55\uffff\1\4",
            "",
            "\1\11\67\uffff\1\10",
            "\1\12\107\uffff\1\12",
            "\1\12\107\uffff\1\12",
            "\1\12\4\uffff\1\12\27\uffff\1\12\43\uffff\1\12\43\uffff\1\12",
            "\1\15",
            "\1\5\23\uffff\1\16\43\uffff\1\4",
            "\1\5\23\uffff\1\16\43\uffff\1\4",
            "",
            "",
            "",
            "\1\12\4\uffff\1\12\27\uffff\1\12\43\uffff\1\12\43\uffff\1\12",
            "\1\20\67\uffff\1\17",
            "\1\5\23\uffff\1\16\43\uffff\1\4",
            "\1\5\23\uffff\1\16\43\uffff\1\4"
    };

    static final short[] DFA268_eot = DFA.unpackEncodedString(DFA268_eotS);
    static final short[] DFA268_eof = DFA.unpackEncodedString(DFA268_eofS);
    static final char[] DFA268_min = DFA.unpackEncodedStringToUnsignedChars(DFA268_minS);
    static final char[] DFA268_max = DFA.unpackEncodedStringToUnsignedChars(DFA268_maxS);
    static final short[] DFA268_accept = DFA.unpackEncodedString(DFA268_acceptS);
    static final short[] DFA268_special = DFA.unpackEncodedString(DFA268_specialS);
    static final short[][] DFA268_transition;

    static {
        int numStates = DFA268_transitionS.length;
        DFA268_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA268_transition[i] = DFA.unpackEncodedString(DFA268_transitionS[i]);
        }
    }

    class DFA268 extends DFA {

        public DFA268(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = DFA268_eot;
            this.eof = DFA268_eof;
            this.min = DFA268_min;
            this.max = DFA268_max;
            this.accept = DFA268_accept;
            this.special = DFA268_special;
            this.transition = DFA268_transition;
        }
        public String getDescription() {
            return "1299:1: cursor_manipulation_statements : ( close_statement | open_statement | fetch_statement | open_for_statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA268_14 = input.LA(1);

                         
                        int index268_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_14==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 15;}

                        else if ( (LA268_14==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 16;}

                         
                        input.seek(index268_14);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA268_0 = input.LA(1);

                         
                        int index268_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 1;}

                        else if ( (LA268_0==SQL92_RESERVED_FETCH) ) {s = 2;}

                         
                        input.seek(index268_0);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA268_6 = input.LA(1);

                         
                        int index268_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_6==BINDVAR||LA268_6==COLON||LA268_6==PERIOD||LA268_6==REGULAR_ID||LA268_6==SQL92_RESERVED_FOR) && ((input.LT(1).getText().equalsIgnoreCase("open")))) {s = 10;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("close"))) ) {s = 11;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("open"))) ) {s = 12;}

                         
                        input.seek(index268_6);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA268_5 = input.LA(1);

                         
                        int index268_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_5==PERIOD||LA268_5==SQL92_RESERVED_FOR) && ((input.LT(1).getText().equalsIgnoreCase("open")))) {s = 10;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("close"))) ) {s = 11;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("open"))) ) {s = 12;}

                         
                        input.seek(index268_5);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA268_1 = input.LA(1);

                         
                        int index268_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_1==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 3;}

                        else if ( (LA268_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 4;}

                        else if ( (LA268_1==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 5;}

                        else if ( (LA268_1==BINDVAR) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 6;}

                        else if ( (LA268_1==COLON) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 7;}

                         
                        input.seek(index268_1);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA268_4 = input.LA(1);

                         
                        int index268_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_4==PERIOD||LA268_4==SQL92_RESERVED_FOR) && ((input.LT(1).getText().equalsIgnoreCase("open")))) {s = 10;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("close"))) ) {s = 11;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("open"))) ) {s = 12;}

                         
                        input.seek(index268_4);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA268_15 = input.LA(1);

                         
                        int index268_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_15==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 4;}

                        else if ( (LA268_15==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 5;}

                        else if ( (LA268_15==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 14;}

                         
                        input.seek(index268_15);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA268_13 = input.LA(1);

                         
                        int index268_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_13==BINDVAR||LA268_13==COLON||LA268_13==PERIOD||LA268_13==REGULAR_ID||LA268_13==SQL92_RESERVED_FOR) && ((input.LT(1).getText().equalsIgnoreCase("open")))) {s = 10;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("close"))) ) {s = 11;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("open"))) ) {s = 12;}

                         
                        input.seek(index268_13);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA268_3 = input.LA(1);

                         
                        int index268_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 8;}

                        else if ( (LA268_3==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 9;}

                         
                        input.seek(index268_3);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA268_7 = input.LA(1);

                         
                        int index268_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_7==UNSIGNED_INTEGER) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 13;}

                         
                        input.seek(index268_7);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA268_9 = input.LA(1);

                         
                        int index268_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_9==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 14;}

                        else if ( (LA268_9==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 4;}

                        else if ( (LA268_9==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 5;}

                         
                        input.seek(index268_9);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA268_16 = input.LA(1);

                         
                        int index268_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_16==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 4;}

                        else if ( (LA268_16==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 5;}

                        else if ( (LA268_16==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 14;}

                         
                        input.seek(index268_16);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA268_8 = input.LA(1);

                         
                        int index268_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA268_8==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 14;}

                        else if ( (LA268_8==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 4;}

                        else if ( (LA268_8==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("open"))))) {s = 5;}

                         
                        input.seek(index268_8);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 268, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_unit_statement_in_compilation_unit761 = new BitSet(new long[]{0x0000000000000000L,0x0000008040080400L,0x0000000000000008L});
    public static final BitSet FOLLOW_EOF_in_compilation_unit764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unit_statement_in_sql_script801 = new BitSet(new long[]{0x0000000000000000L,0x0000008040090402L,0x0000000000000008L});
    public static final BitSet FOLLOW_sql_plus_command_in_sql_script803 = new BitSet(new long[]{0x0000000000000000L,0x0000008040090402L,0x0000000000000008L});
    public static final BitSet FOLLOW_EOF_in_sql_script807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_function_in_unit_statement855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_package_in_unit_statement866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_procedure_in_unit_statement877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_sequence_in_unit_statement888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_trigger_in_unit_statement899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_type_in_unit_statement910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_function_body_in_unit_statement921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_procedure_body_in_unit_statement932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_package_in_unit_statement943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_sequence_in_unit_statement954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_trigger_in_unit_statement972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_type_in_unit_statement983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_function_in_unit_statement994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_package_in_unit_statement1005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_procedure_in_unit_statement1016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_sequence_in_unit_statement1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_trigger_in_unit_statement1038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_type_in_unit_statement1049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_key_in_drop_function1073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_key_in_drop_function1075 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_name_in_drop_function1077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_drop_function1087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_key_in_alter_function1124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_key_in_alter_function1126 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_name_in_alter_function1128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_compile_key_in_alter_function1138 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_debug_key_in_alter_function1140 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_function1143 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_reuse_key_in_alter_function1155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_settings_key_in_alter_function1157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_alter_function1169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_key_in_create_function_body1224 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000400L});
    public static final BitSet FOLLOW_or_key_in_create_function_body1228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_replace_key_in_create_function_body1230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_key_in_create_function_body1237 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_name_in_create_function_body1239 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_create_function_body1258 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_parameter_in_create_function_body1260 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_create_function_body1263 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_parameter_in_create_function_body1265 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_create_function_body1269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_return_key_in_create_function_body1281 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_create_function_body1283 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400400L});
    public static final BitSet FOLLOW_invoker_rights_clause_in_create_function_body1302 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400400L});
    public static final BitSet FOLLOW_parallel_enable_clause_in_create_function_body1304 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400400L});
    public static final BitSet FOLLOW_result_cache_clause_in_create_function_body1306 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400400L});
    public static final BitSet FOLLOW_deterministic_key_in_create_function_body1308 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400400L});
    public static final BitSet FOLLOW_pipelined_key_in_create_function_body1339 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400000L});
    public static final BitSet FOLLOW_is_key_in_create_function_body1344 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_as_key_in_create_function_body1348 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_declare_key_in_create_function_body1379 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_declare_spec_in_create_function_body1382 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_body_in_create_function_body1385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_call_spec_in_create_function_body1415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_pipelined_key_in_create_function_body1448 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_aggregate_key_in_create_function_body1450 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_using_key_in_create_function_body1453 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_implementation_type_name_in_create_function_body1455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_create_function_body1483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parallel_enable_key_in_parallel_enable_clause1791 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_partition_by_clause_in_parallel_enable_clause1794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_partition_by_clause1823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_partition_key_in_partition_by_clause1837 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_partition_by_clause1839 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_partition_by_clause1841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200400L});
    public static final BitSet FOLLOW_any_key_in_partition_by_clause1861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L,0x0000000000000001L});
    public static final BitSet FOLLOW_hash_key_in_partition_by_clause1883 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_range_key_in_partition_by_clause1887 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_partition_by_clause1890 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_partition_by_clause1892 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_partition_by_clause1895 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_partition_by_clause1897 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_partition_by_clause1901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L,0x0000000000000001L});
    public static final BitSet FOLLOW_streaming_clause_in_partition_by_clause1929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_partition_by_clause1940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_result_cache_key_in_result_cache_clause2092 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_relies_on_part_in_result_cache_clause2094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relies_on_key_in_relies_on_part2132 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_relies_on_part2135 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableview_name_in_relies_on_part2138 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_relies_on_part2141 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableview_name_in_relies_on_part2144 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_relies_on_part2148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_key_in_streaming_clause2170 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_cluster_key_in_streaming_clause2172 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_streaming_clause2175 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_streaming_clause2177 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_streaming_clause2188 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_streaming_clause2190 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_streaming_clause2193 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_streaming_clause2195 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_streaming_clause2199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_key_in_drop_package2257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_package_key_in_drop_package2259 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_body_key_in_drop_package2261 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_package_name_in_drop_package2264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_drop_package2274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_key_in_alter_package2314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_package_key_in_alter_package2316 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_package_name_in_alter_package2318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_compile_key_in_alter_package2328 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_debug_key_in_alter_package2330 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_package_key_in_alter_package2334 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_body_key_in_alter_package2336 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_specification_key_in_alter_package2338 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_package2350 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_reuse_key_in_alter_package2362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_settings_key_in_alter_package2364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_alter_package2376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_key_in_create_package2456 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000400L});
    public static final BitSet FOLLOW_or_key_in_create_package2460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_replace_key_in_create_package2462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_package_key_in_create_package2467 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_package_spec_in_create_package2479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_package_body_in_create_package2485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_create_package2498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_body_key_in_package_body2558 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_package_name_in_package_body2560 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400000L});
    public static final BitSet FOLLOW_is_key_in_package_body2563 = new BitSet(new long[]{0x0000000010044200L,0x0000020141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_as_key_in_package_body2567 = new BitSet(new long[]{0x0000000010044200L,0x0000020141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_package_obj_body_in_package_body2578 = new BitSet(new long[]{0x0000000010044200L,0x0000020141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_begin_key_in_package_body2590 = new BitSet(new long[]{0x00480000D0044200L,0x0823601549080400L,0x0000000000108048L});
    public static final BitSet FOLLOW_seq_of_statements_in_package_body2592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_end_key_in_package_body2594 = new BitSet(new long[]{0x0000000010040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_package_name_in_package_body2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_name_in_package_spec2637 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400400L});
    public static final BitSet FOLLOW_invoker_rights_clause_in_package_spec2639 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400000L});
    public static final BitSet FOLLOW_is_key_in_package_spec2643 = new BitSet(new long[]{0x0000000010044200L,0x0000020100000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_as_key_in_package_spec2647 = new BitSet(new long[]{0x0000000010044200L,0x0000020100000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_package_obj_spec_in_package_spec2658 = new BitSet(new long[]{0x0000000010044200L,0x0000020100000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_end_key_in_package_spec2669 = new BitSet(new long[]{0x0000000010040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_package_name_in_package_spec2671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec2719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec2731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec2755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_spec2767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_declaration_in_package_obj_spec2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec2791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_package_obj_spec2803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_key_in_procedure_spec2824 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec2826 = new BitSet(new long[]{0x0000000040000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_procedure_spec2839 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_parameter_in_procedure_spec2841 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_procedure_spec2845 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_parameter_in_procedure_spec2847 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_procedure_spec2852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_procedure_spec2857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_key_in_function_spec2903 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_name_in_function_spec2905 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_function_spec2917 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_parameter_in_function_spec2919 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_function_spec2923 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_parameter_in_function_spec2925 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_function_spec2929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_return_key_in_function_spec2942 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_function_spec2944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_spec2946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_body3002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body3015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body3028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_body3041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_body3054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_declaration_in_package_obj_body3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_procedure_body_in_package_obj_body3078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_function_body_in_package_obj_body3090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_key_in_drop_procedure3117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_procedure_key_in_drop_procedure3119 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_procedure_name_in_drop_procedure3121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_drop_procedure3131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_key_in_alter_procedure3168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_procedure_key_in_alter_procedure3170 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_procedure_name_in_alter_procedure3172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_compile_key_in_alter_procedure3182 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_debug_key_in_alter_procedure3184 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_procedure3187 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_reuse_key_in_alter_procedure3199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_settings_key_in_alter_procedure3201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_alter_procedure3213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_key_in_create_procedure_body3268 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_or_key_in_create_procedure_body3272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_replace_key_in_create_procedure_body3274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_procedure_key_in_create_procedure_body3281 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_procedure_name_in_create_procedure_body3283 = new BitSet(new long[]{0x0000000040000000L,0x0100000000400400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_create_procedure_body3301 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_parameter_in_create_procedure_body3303 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_create_procedure_body3307 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_parameter_in_create_procedure_body3309 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_create_procedure_body3314 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400400L});
    public static final BitSet FOLLOW_invoker_rights_clause_in_create_procedure_body3334 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400000L});
    public static final BitSet FOLLOW_is_key_in_create_procedure_body3347 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_as_key_in_create_procedure_body3351 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_declare_key_in_create_procedure_body3374 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_declare_spec_in_create_procedure_body3377 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_body_in_create_procedure_body3380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_call_spec_in_create_procedure_body3402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_external_key_in_create_procedure_body3425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_create_procedure_body3459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_key_in_drop_trigger3706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_key_in_drop_trigger3708 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_name_in_drop_trigger3710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_drop_trigger3720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_key_in_alter_trigger3765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_key_in_alter_trigger3767 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_name_in_alter_trigger3771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_enable_key_in_alter_trigger3783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_disable_key_in_alter_trigger3785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_rename_key_in_alter_trigger3799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_to_key_in_alter_trigger3801 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_name_in_alter_trigger3805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_compile_key_in_alter_trigger3818 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_debug_key_in_alter_trigger3820 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_trigger3823 = new BitSet(new long[]{0x0000000010040000L,0x0000000000002400L});
    public static final BitSet FOLLOW_reuse_key_in_alter_trigger3827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_settings_key_in_alter_trigger3829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_alter_trigger3842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_key_in_create_trigger3930 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000400L});
    public static final BitSet FOLLOW_or_key_in_create_trigger3934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_replace_key_in_create_trigger3936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_key_in_create_trigger3941 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_name_in_create_trigger3943 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000400L});
    public static final BitSet FOLLOW_simple_dml_trigger_in_create_trigger3954 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000040008L});
    public static final BitSet FOLLOW_compound_dml_trigger_in_create_trigger3965 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000040008L});
    public static final BitSet FOLLOW_non_dml_trigger_in_create_trigger3976 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000040008L});
    public static final BitSet FOLLOW_trigger_follows_clause_in_create_trigger3988 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000040008L});
    public static final BitSet FOLLOW_enable_key_in_create_trigger3996 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000040008L});
    public static final BitSet FOLLOW_disable_key_in_create_trigger3998 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000040008L});
    public static final BitSet FOLLOW_trigger_when_clause_in_create_trigger4006 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_trigger_body_in_create_trigger4014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_create_trigger4016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_follows_key_in_trigger_follows_clause4093 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause4095 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_trigger_follows_clause4098 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause4100 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_when_key_in_trigger_when_clause4139 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_trigger_when_clause4141 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_trigger_when_clause4143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_trigger_when_clause4145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_before_key_in_simple_dml_trigger4187 = new BitSet(new long[]{0x0000000000000000L,0x0020001000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_after_key_in_simple_dml_trigger4189 = new BitSet(new long[]{0x0000000000000000L,0x0020001000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_instead_key_in_simple_dml_trigger4191 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_of_key_in_simple_dml_trigger4193 = new BitSet(new long[]{0x0000000000000000L,0x0020001000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_dml_event_clause_in_simple_dml_trigger4196 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000400L});
    public static final BitSet FOLLOW_referencing_clause_in_simple_dml_trigger4198 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_for_each_row_in_simple_dml_trigger4201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_for_each_row4253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_each_key_in_for_each_row4255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_row_key_in_for_each_row4257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_compound_dml_trigger4282 = new BitSet(new long[]{0x0000000000000000L,0x0020001000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger4284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger4286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_before_key_in_non_dml_trigger4328 = new BitSet(new long[]{0x0000000000000000L,0x0002008040080400L,0x0000000000000020L});
    public static final BitSet FOLLOW_after_key_in_non_dml_trigger4330 = new BitSet(new long[]{0x0000000000000000L,0x0002008040080400L,0x0000000000000020L});
    public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger4333 = new BitSet(new long[]{0x0000000000000000L,0xA000000000000000L});
    public static final BitSet FOLLOW_or_key_in_non_dml_trigger4336 = new BitSet(new long[]{0x0000000000000000L,0x0002008040080400L,0x0000000000000020L});
    public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger4338 = new BitSet(new long[]{0x0000000000000000L,0xA000000000000000L});
    public static final BitSet FOLLOW_on_key_in_non_dml_trigger4350 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_database_key_in_non_dml_trigger4353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_non_dml_trigger4358 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_PERIOD_in_non_dml_trigger4360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_schema_key_in_non_dml_trigger4364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_trigger_block_in_trigger_body4425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_key_in_trigger_body4443 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_routine_clause_in_trigger_body4446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_trigger_body4458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_routine_name_in_routine_clause4486 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_function_argument_in_routine_clause4488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_key_in_compound_trigger_block4509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_key_in_compound_trigger_block4511 = new BitSet(new long[]{0x0000000010044200L,0x0000000140000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_declare_spec_in_compound_trigger_block4513 = new BitSet(new long[]{0x0000000010044200L,0x0000000140000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_timing_point_section_in_compound_trigger_block4516 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_end_key_in_compound_trigger_block4519 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_name_in_compound_trigger_block4521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_before_key_in_timing_point_section4573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_statement_key_in_timing_point_section4575 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_is_key_in_timing_point_section4577 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_block_in_timing_point_section4579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_before_key_in_timing_point_section4581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_statement_key_in_timing_point_section4583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_timing_point_section4585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_before_key_in_timing_point_section4615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_each_key_in_timing_point_section4617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_row_key_in_timing_point_section4619 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_is_key_in_timing_point_section4621 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_block_in_timing_point_section4623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_before_key_in_timing_point_section4625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_each_key_in_timing_point_section4627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_row_key_in_timing_point_section4629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_timing_point_section4631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_after_key_in_timing_point_section4661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_statement_key_in_timing_point_section4663 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_is_key_in_timing_point_section4665 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_block_in_timing_point_section4667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_after_key_in_timing_point_section4669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_statement_key_in_timing_point_section4671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_timing_point_section4673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_after_key_in_timing_point_section4703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_each_key_in_timing_point_section4705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_row_key_in_timing_point_section4707 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_is_key_in_timing_point_section4709 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_block_in_timing_point_section4711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_after_key_in_timing_point_section4713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_each_key_in_timing_point_section4715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_row_key_in_timing_point_section4717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_timing_point_section4719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_key_in_non_dml_event4756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_analyze_key_in_non_dml_event4767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_associate_key_in_non_dml_event4778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_statistics_key_in_non_dml_event4780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_audit_key_in_non_dml_event4791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comment_key_in_non_dml_event4802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_key_in_non_dml_event4813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_disassociate_key_in_non_dml_event4824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_statistics_key_in_non_dml_event4826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_key_in_non_dml_event4837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grant_key_in_non_dml_event4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noaudit_key_in_non_dml_event4859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rename_key_in_non_dml_event4870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revoke_key_in_non_dml_event4881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_truncate_key_in_non_dml_event4892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ddl_key_in_non_dml_event4903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_startup_key_in_non_dml_event4914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shutdown_key_in_non_dml_event4925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_db_role_change_key_in_non_dml_event4936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logon_key_in_non_dml_event4947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logoff_key_in_non_dml_event4958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_servererror_key_in_non_dml_event4969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_suspend_key_in_non_dml_event4980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_database_key_in_non_dml_event4991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_key_in_non_dml_event5002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_follows_key_in_non_dml_event5013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause5033 = new BitSet(new long[]{0x0000000000000000L,0xA000000000000000L});
    public static final BitSet FOLLOW_or_key_in_dml_event_clause5036 = new BitSet(new long[]{0x0000000000000000L,0x0020001000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause5038 = new BitSet(new long[]{0x0000000000000000L,0xA000000000000000L});
    public static final BitSet FOLLOW_on_key_in_dml_event_clause5050 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_dml_event_nested_clause_in_dml_event_clause5061 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableview_name_in_dml_event_clause5064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_key_in_dml_event_element5113 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_insert_key_in_dml_event_element5115 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_update_key_in_dml_event_element5117 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_of_key_in_dml_event_element5121 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_dml_event_element5123 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_dml_event_element5126 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_dml_event_element5128 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_nested_key_in_dml_event_nested_clause5182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_table_key_in_dml_event_nested_clause5184 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableview_name_in_dml_event_nested_clause5186 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_of_key_in_dml_event_nested_clause5188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_referencing_key_in_referencing_clause5224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_referencing_element_in_referencing_clause5227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_new_key_in_referencing_element5250 = new BitSet(new long[]{0x0000000410043000L,0x0000000000400400L});
    public static final BitSet FOLLOW_old_key_in_referencing_element5255 = new BitSet(new long[]{0x0000000410043000L,0x0000000000400400L});
    public static final BitSet FOLLOW_parent_key_in_referencing_element5260 = new BitSet(new long[]{0x0000000410043000L,0x0000000000400400L});
    public static final BitSet FOLLOW_column_alias_in_referencing_element5265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_key_in_drop_type5290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_key_in_drop_type5292 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_body_key_in_drop_type5294 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_name_in_drop_type5297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_force_key_in_drop_type5300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_validate_key_in_drop_type5302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_drop_type5314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_key_in_alter_type5368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_key_in_alter_type5370 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_name_in_alter_type5372 = new BitSet(new long[]{0x0000000000000000L,0x0400008000000400L});
    public static final BitSet FOLLOW_compile_type_clause_in_alter_type5383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_replace_type_clause_in_alter_type5394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_alter_attribute_definition_in_alter_type5409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_alter_method_spec_in_alter_type5422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_alter_collection_clauses_in_alter_type5435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_modifier_clause_in_alter_type5448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_dependent_handling_clause_in_alter_type5466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_alter_type5477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compile_key_in_compile_type_clause5640 = new BitSet(new long[]{0x0000000010040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_debug_key_in_compile_type_clause5642 = new BitSet(new long[]{0x0000000010040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_specification_key_in_compile_type_clause5646 = new BitSet(new long[]{0x0000000010040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_body_key_in_compile_type_clause5648 = new BitSet(new long[]{0x0000000010040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_compiler_parameters_clause_in_compile_type_clause5652 = new BitSet(new long[]{0x0000000010040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_reuse_key_in_compile_type_clause5656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_settings_key_in_compile_type_clause5658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_replace_key_in_replace_type_clause5709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400400L});
    public static final BitSet FOLLOW_invoker_rights_clause_in_replace_type_clause5711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_as_key_in_replace_type_clause5714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_object_key_in_replace_type_clause5716 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_replace_type_clause5726 = new BitSet(new long[]{0x0000000010040000L,0x0400000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_object_member_spec_in_replace_type_clause5728 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_replace_type_clause5731 = new BitSet(new long[]{0x0000000010040000L,0x0400000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_object_member_spec_in_replace_type_clause5733 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_replace_type_clause5737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_method_element_in_alter_method_spec5782 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_alter_method_spec5785 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000400L});
    public static final BitSet FOLLOW_alter_method_element_in_alter_method_spec5787 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_add_key_in_alter_method_element5827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_drop_key_in_alter_method_element5829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_map_order_function_spec_in_alter_method_element5833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subprogram_spec_in_alter_method_element5835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_add_key_in_alter_attribute_definition5883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_modify_key_in_alter_attribute_definition5885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_drop_key_in_alter_attribute_definition5887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_attribute_key_in_alter_attribute_definition5890 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_attribute_definition_in_alter_attribute_definition5905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_alter_attribute_definition5920 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_attribute_definition_in_alter_attribute_definition5922 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_alter_attribute_definition5925 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_attribute_definition_in_alter_attribute_definition5927 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_alter_attribute_definition5931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attribute_name_in_attribute_definition5991 = new BitSet(new long[]{0x0000000000040002L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_attribute_definition5993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modify_key_in_alter_collection_clauses6041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_limit_key_in_alter_collection_clauses6052 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_alter_collection_clauses6054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_key_in_alter_collection_clauses6065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_key_in_alter_collection_clauses6067 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_alter_collection_clauses6069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invalidate_key_in_dependent_handling_clause6155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cascade_key_in_dependent_handling_clause6174 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000400L});
    public static final BitSet FOLLOW_convert_key_in_dependent_handling_clause6189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_to_key_in_dependent_handling_clause6191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_substitutable_key_in_dependent_handling_clause6193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_not_key_in_dependent_handling_clause6210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_including_key_in_dependent_handling_clause6213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_table_key_in_dependent_handling_clause6215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_data_key_in_dependent_handling_clause6217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_dependent_exceptions_part_in_dependent_handling_clause6240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_force_key_in_dependent_exceptions_part6335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_exceptions_key_in_dependent_exceptions_part6338 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_into_key_in_dependent_exceptions_part6340 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableview_name_in_dependent_exceptions_part6342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_key_in_create_type6391 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000400L});
    public static final BitSet FOLLOW_or_key_in_create_type6394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_replace_key_in_create_type6396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_key_in_create_type6400 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_definition_in_create_type6412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_body_in_create_type6416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_create_type6429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_type_definition6491 = new BitSet(new long[]{0x0000000000000002L,0x0100000000400400L});
    public static final BitSet FOLLOW_oid_key_in_type_definition6503 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_CHAR_STRING_in_type_definition6505 = new BitSet(new long[]{0x0000000000000002L,0x0100000000400400L});
    public static final BitSet FOLLOW_object_type_def_in_type_definition6517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invoker_rights_clause_in_object_type_def6556 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400400L});
    public static final BitSet FOLLOW_object_as_part_in_object_type_def6568 = new BitSet(new long[]{0x0000000040000002L,0x0400000000000400L});
    public static final BitSet FOLLOW_object_under_part_in_object_type_def6579 = new BitSet(new long[]{0x0000000040000002L,0x0400000000000400L});
    public static final BitSet FOLLOW_sqlj_object_type_in_object_type_def6595 = new BitSet(new long[]{0x0000000040000002L,0x0400000000000400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_object_type_def6607 = new BitSet(new long[]{0x0000000010040000L,0x0400000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_object_member_spec_in_object_type_def6609 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_object_type_def6612 = new BitSet(new long[]{0x0000000010040000L,0x0400000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_object_member_spec_in_object_type_def6614 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_object_type_def6618 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000400L});
    public static final BitSet FOLLOW_modifier_clause_in_object_type_def6630 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000400L});
    public static final BitSet FOLLOW_is_key_in_object_as_part6703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000100L});
    public static final BitSet FOLLOW_as_key_in_object_as_part6705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000100L});
    public static final BitSet FOLLOW_object_key_in_object_as_part6709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_def_in_object_as_part6711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_type_def_in_object_as_part6713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_under_key_in_object_under_part6757 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_object_under_part6760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_key_in_nested_table_type_def6780 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_of_key_in_nested_table_type_def6782 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_nested_table_type_def6784 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_not_key_in_nested_table_type_def6795 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_null_key_in_nested_table_type_def6797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_external_key_in_sqlj_object_type6840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_name_key_in_sqlj_object_type6842 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_sqlj_object_type6844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_language_key_in_sqlj_object_type6846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_java_key_in_sqlj_object_type6848 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_using_key_in_sqlj_object_type6850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sqldata_key_in_sqlj_object_type6853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_customdatum_key_in_sqlj_object_type6855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oradata_key_in_sqlj_object_type6857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_body_key_in_type_body6907 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_name_in_type_body6909 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400000L});
    public static final BitSet FOLLOW_is_key_in_type_body6920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_as_key_in_type_body6922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_type_body_elements_in_type_body6925 = new BitSet(new long[]{0x0000000000008000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COMMA_in_type_body6928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_type_body_elements_in_type_body6930 = new BitSet(new long[]{0x0000000000008000L,0x0000020000000000L});
    public static final BitSet FOLLOW_end_key_in_type_body6942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_elements6981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subprog_decl_in_type_in_type_body_elements6992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_key_in_map_order_func_declaration7013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_order_key_in_map_order_func_declaration7016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_member_key_in_map_order_func_declaration7020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_func_decl_in_type_in_map_order_func_declaration7023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_key_in_subprog_decl_in_type7044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_static_key_in_subprog_decl_in_type7047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_proc_decl_in_type_in_subprog_decl_in_type7060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_decl_in_type_in_subprog_decl_in_type7071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_declaration_in_subprog_decl_in_type7082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_key_in_proc_decl_in_type7111 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_procedure_name_in_proc_decl_in_type7113 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_proc_decl_in_type7123 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_proc_decl_in_type7125 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_proc_decl_in_type7128 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_proc_decl_in_type7130 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_proc_decl_in_type7134 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400000L});
    public static final BitSet FOLLOW_is_key_in_proc_decl_in_type7145 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_as_key_in_proc_decl_in_type7147 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_call_spec_in_proc_decl_in_type7164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declare_key_in_proc_decl_in_type7168 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_declare_spec_in_proc_decl_in_type7171 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_body_in_proc_decl_in_type7174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_proc_decl_in_type7176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_key_in_func_decl_in_type7268 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_name_in_func_decl_in_type7270 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_func_decl_in_type7282 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_func_decl_in_type7284 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_func_decl_in_type7287 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_func_decl_in_type7289 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_func_decl_in_type7293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_return_key_in_func_decl_in_type7306 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_func_decl_in_type7308 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400000L});
    public static final BitSet FOLLOW_is_key_in_func_decl_in_type7319 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_as_key_in_func_decl_in_type7321 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_call_spec_in_func_decl_in_type7337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declare_key_in_func_decl_in_type7341 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_declare_spec_in_func_decl_in_type7344 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_body_in_func_decl_in_type7347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_func_decl_in_type7349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_key_in_constructor_declaration7445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_instantiable_key_in_constructor_declaration7448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_constructor_key_in_constructor_declaration7451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_key_in_constructor_declaration7453 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_constructor_declaration7455 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_constructor_declaration7466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_self_key_in_constructor_declaration7469 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_in_key_in_constructor_declaration7471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_out_key_in_constructor_declaration7473 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_constructor_declaration7475 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_declaration7477 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration7480 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_declaration7483 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration7485 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_constructor_declaration7490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_return_key_in_constructor_declaration7502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_self_key_in_constructor_declaration7504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_as_key_in_constructor_declaration7506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_result_key_in_constructor_declaration7508 = new BitSet(new long[]{0x0000000000000000L,0x0100000000400000L});
    public static final BitSet FOLLOW_is_key_in_constructor_declaration7520 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_as_key_in_constructor_declaration7522 = new BitSet(new long[]{0x0000000010044200L,0x0000000541000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_call_spec_in_constructor_declaration7539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declare_key_in_constructor_declaration7543 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_declare_spec_in_constructor_declaration7546 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_body_in_constructor_declaration7549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_constructor_declaration7551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_not_key_in_modifier_clause7651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_instantiable_key_in_modifier_clause7655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_key_in_modifier_clause7657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_overriding_key_in_modifier_clause7659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_object_member_spec7713 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_object_member_spec7715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_sqlj_object_type_attr_in_object_member_spec7717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_spec_in_object_member_spec7746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_external_key_in_sqlj_object_type_attr7766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_name_key_in_sqlj_object_type_attr7768 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_sqlj_object_type_attr7770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_clause_in_element_spec7810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_element_spec_options_in_element_spec7821 = new BitSet(new long[]{0x0000000000008002L,0x0000000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMA_in_element_spec7833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_pragma_clause_in_element_spec7835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subprogram_spec_in_element_spec_options7880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_spec_in_element_spec_options7891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_order_function_spec_in_element_spec_options7902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_key_in_subprogram_spec7923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_static_key_in_subprogram_spec7926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_type_procedure_spec_in_subprogram_spec7939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_function_spec_in_subprogram_spec7941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_key_in_type_procedure_spec7970 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_procedure_name_in_type_procedure_spec7972 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_type_procedure_spec7982 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_type_procedure_spec7984 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_type_procedure_spec7987 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_type_procedure_spec7989 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_type_procedure_spec7993 = new BitSet(new long[]{0x0000000000000002L,0x0100000000400000L});
    public static final BitSet FOLLOW_is_key_in_type_procedure_spec8005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_as_key_in_type_procedure_spec8007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_call_spec_in_type_procedure_spec8010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_key_in_type_function_spec8095 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_name_in_type_function_spec8097 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_type_function_spec8109 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_type_function_spec8111 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_type_function_spec8114 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_type_function_spec8116 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_type_function_spec8120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_return_key_in_type_function_spec8133 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_type_function_spec8137 = new BitSet(new long[]{0x0000000000000002L,0x0100000000400400L});
    public static final BitSet FOLLOW_self_key_in_type_function_spec8141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_as_key_in_type_function_spec8143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_result_key_in_type_function_spec8145 = new BitSet(new long[]{0x0000000000000002L,0x0100000000400400L});
    public static final BitSet FOLLOW_is_key_in_type_function_spec8158 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_as_key_in_type_function_spec8160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_call_spec_in_type_function_spec8163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_external_key_in_type_function_spec8168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_variable_key_in_type_function_spec8170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_name_key_in_type_function_spec8173 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_type_function_spec8175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_final_key_in_constructor_spec8312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_instantiable_key_in_constructor_spec8315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_constructor_key_in_constructor_spec8318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_function_key_in_constructor_spec8320 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_constructor_spec8322 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_constructor_spec8333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_self_key_in_constructor_spec8336 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_in_key_in_constructor_spec8338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_out_key_in_constructor_spec8340 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_constructor_spec8342 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec8344 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec8347 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_constructor_spec8350 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec8352 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_constructor_spec8357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_return_key_in_constructor_spec8369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_self_key_in_constructor_spec8371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_as_key_in_constructor_spec8373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_result_key_in_constructor_spec8375 = new BitSet(new long[]{0x0000000000000002L,0x0100000000400000L});
    public static final BitSet FOLLOW_is_key_in_constructor_spec8379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_as_key_in_constructor_spec8381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_call_spec_in_constructor_spec8384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_key_in_map_order_function_spec8476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_order_key_in_map_order_function_spec8479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_member_key_in_map_order_function_spec8483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_function_spec_in_map_order_function_spec8486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_key_in_pragma_clause8506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_restrict_references_key_in_pragma_clause8508 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pragma_clause8510 = new BitSet(new long[]{0x0000000010040000L,0x0000000800000400L});
    public static final BitSet FOLLOW_pragma_elements_in_pragma_clause8512 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_clause8515 = new BitSet(new long[]{0x0000000010040000L,0x0000000800000400L});
    public static final BitSet FOLLOW_pragma_elements_in_pragma_clause8517 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pragma_clause8521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_pragma_elements8558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_pragma_elements8569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_name_in_type_elements_parameter8589 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_type_elements_parameter8591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_key_in_drop_sequence8633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sequence_key_in_drop_sequence8635 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sequence_name_in_drop_sequence8637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_drop_sequence8647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_key_in_alter_sequence8684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sequence_key_in_alter_sequence8686 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sequence_name_in_alter_sequence8688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000001L});
    public static final BitSet FOLLOW_sequence_spec_in_alter_sequence8690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002400L,0x0000000000000001L});
    public static final BitSet FOLLOW_SEMICOLON_in_alter_sequence8702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_key_in_create_sequence8742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sequence_key_in_create_sequence8744 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sequence_name_in_create_sequence8746 = new BitSet(new long[]{0x2000000000000000L,0x0000000000002400L,0x0000000000000001L});
    public static final BitSet FOLLOW_sequence_start_clause_in_create_sequence8757 = new BitSet(new long[]{0x2000000000000000L,0x0000000000002400L,0x0000000000000001L});
    public static final BitSet FOLLOW_sequence_spec_in_create_sequence8768 = new BitSet(new long[]{0x2000000000000000L,0x0000000000002400L,0x0000000000000001L});
    public static final BitSet FOLLOW_SEMICOLON_in_create_sequence8779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_key_in_sequence_spec8824 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_sequence_spec8827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec8830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_maxvalue_key_in_sequence_spec8841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec8844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minvalue_key_in_sequence_spec8855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec8858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cache_key_in_sequence_spec8869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec8872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nomaxvalue_key_in_sequence_spec8883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nominvalue_key_in_sequence_spec8894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycle_key_in_sequence_spec8905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nocycle_key_in_sequence_spec8916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nocache_key_in_sequence_spec8927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_key_in_sequence_spec8938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noorder_key_in_sequence_spec8949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_key_in_sequence_start_clause8969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_with_key_in_sequence_start_clause8972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_start_clause8975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_authid_key_in_invoker_rights_clause9001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_current_user_key_in_invoker_rights_clause9004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definer_key_in_invoker_rights_clause9006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_compiler_parameters_clause9047 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_compiler_parameters_clause9049 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_compiler_parameters_clause9051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_language_key_in_call_spec9098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_java_spec_in_call_spec9103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_c_spec_in_call_spec9107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_java_key_in_java_spec9131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_name_key_in_java_spec9134 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_CHAR_STRING_in_java_spec9137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_c_key_in_c_spec9157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_name_key_in_c_spec9160 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_CHAR_STRING_in_c_spec9162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_library_key_in_c_spec9175 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_id_in_c_spec9177 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000100000L});
    public static final BitSet FOLLOW_c_agent_in_clause_in_c_spec9187 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000100000L});
    public static final BitSet FOLLOW_with_key_in_c_spec9191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_context_key_in_c_spec9193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_c_parameters_clause_in_c_spec9197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_agent_key_in_c_agent_in_clause9250 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_in_key_in_c_agent_in_clause9252 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_c_agent_in_clause9254 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_c_agent_in_clause9256 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_c_agent_in_clause9259 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_c_agent_in_clause9261 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_c_agent_in_clause9265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameters_key_in_c_parameters_clause9314 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_c_parameters_clause9316 = new BitSet(new long[]{0x0000008650547220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_c_parameters_clause9319 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_c_parameters_clause9322 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_c_parameters_clause9324 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_c_parameters_clause9330 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_PERIOD_in_c_parameters_clause9332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_c_parameters_clause9337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_name_in_parameter9394 = new BitSet(new long[]{0x0000000000040042L,0x0010000A00000400L});
    public static final BitSet FOLLOW_in_key_in_parameter9398 = new BitSet(new long[]{0x0000000000040042L,0x0010000A00000400L});
    public static final BitSet FOLLOW_out_key_in_parameter9402 = new BitSet(new long[]{0x0000000000040042L,0x0010000A00000400L});
    public static final BitSet FOLLOW_inout_key_in_parameter9406 = new BitSet(new long[]{0x0000000000040042L,0x0010000A00000400L});
    public static final BitSet FOLLOW_nocopy_key_in_parameter9410 = new BitSet(new long[]{0x0000000000040042L,0x0010000A00000400L});
    public static final BitSet FOLLOW_type_spec_in_parameter9414 = new BitSet(new long[]{0x0000000000000042L,0x0000000800000000L});
    public static final BitSet FOLLOW_default_value_part_in_parameter9417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSIGN_OP_in_default_value_part9470 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_default_key_in_default_value_part9472 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_default_value_part9475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_declare_spec9529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_declare_spec9541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_declare_spec9553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_declare_spec9565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_declare_spec9577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_declare_spec9589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_declaration_in_declare_spec9601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_procedure_body_in_declare_spec9613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_function_body_in_declare_spec9625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_variable_declaration9646 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_constant_key_in_variable_declaration9648 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_variable_declaration9659 = new BitSet(new long[]{0x0000000000000040L,0x0400000800002000L});
    public static final BitSet FOLLOW_not_key_in_variable_declaration9662 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_null_key_in_variable_declaration9664 = new BitSet(new long[]{0x0000000000000040L,0x0000000800002000L});
    public static final BitSet FOLLOW_default_value_part_in_variable_declaration9677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_declaration9680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_key_in_subtype_declaration9741 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_name_in_subtype_declaration9743 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_is_key_in_subtype_declaration9745 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_subtype_declaration9747 = new BitSet(new long[]{0x0000000000000000L,0x0400000000002400L});
    public static final BitSet FOLLOW_range_key_in_subtype_declaration9760 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_subtype_declaration9762 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_subtype_declaration9764 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_subtype_declaration9766 = new BitSet(new long[]{0x0000000000000000L,0x0400000000002000L});
    public static final BitSet FOLLOW_not_key_in_subtype_declaration9783 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_null_key_in_subtype_declaration9785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_subtype_declaration9789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_key_in_cursor_declaration9873 = new BitSet(new long[]{0x0000000010044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_declaration9875 = new BitSet(new long[]{0x0000000040000000L,0x0100000000002400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cursor_declaration9892 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration9894 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_cursor_declaration9897 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration9899 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cursor_declaration9903 = new BitSet(new long[]{0x0000000000000000L,0x0100000000002400L});
    public static final BitSet FOLLOW_return_key_in_cursor_declaration9923 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_cursor_declaration9925 = new BitSet(new long[]{0x0000000000000000L,0x0100000000002000L});
    public static final BitSet FOLLOW_is_key_in_cursor_declaration9930 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_statement_in_cursor_declaration9932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_cursor_declaration9936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parameter_name_in_parameter_spec9987 = new BitSet(new long[]{0x0000000000040042L,0x0010000A00000400L});
    public static final BitSet FOLLOW_in_key_in_parameter_spec9990 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_parameter_spec9993 = new BitSet(new long[]{0x0000000000000042L,0x0000000800000000L});
    public static final BitSet FOLLOW_default_value_part_in_parameter_spec10006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_name_in_exception_declaration10050 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_exception_key_in_exception_declaration10052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_exception_declaration10054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_key_in_pragma_declaration10112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_serially_reusable_key_in_pragma_declaration10127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_autonomous_transaction_key_in_pragma_declaration10144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_exception_init_key_in_pragma_declaration10161 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pragma_declaration10163 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_exception_name_in_pragma_declaration10165 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration10167 = new BitSet(new long[]{0x0000000000400020L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_numeric_in_pragma_declaration10169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pragma_declaration10171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_inline_key_in_pragma_declaration10189 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pragma_declaration10191 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_id_in_pragma_declaration10195 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration10197 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_pragma_declaration10199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pragma_declaration10201 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_restrict_references_key_in_pragma_declaration10218 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pragma_declaration10220 = new BitSet(new long[]{0x0000000010040000L,0x0000000800000400L});
    public static final BitSet FOLLOW_id_in_pragma_declaration10223 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_default_key_in_pragma_declaration10225 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration10229 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_id_in_pragma_declaration10231 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pragma_declaration10235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pragma_declaration10255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_type_dec_in_record_declaration10398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_var_dec_in_record_declaration10409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_key_in_record_type_dec10432 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_name_in_record_type_dec10434 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_is_key_in_record_type_dec10436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_record_key_in_record_type_dec10448 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_record_type_dec10450 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_field_spec_in_record_type_dec10452 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_record_type_dec10456 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_field_spec_in_record_type_dec10458 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_record_type_dec10463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ref_key_in_record_type_dec10474 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_cursor_key_in_record_type_dec10476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_return_key_in_record_type_dec10479 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_record_type_dec10481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_record_type_dec10494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_field_spec10540 = new BitSet(new long[]{0x0000000000040042L,0x0400000A00000400L});
    public static final BitSet FOLLOW_type_spec_in_field_spec10542 = new BitSet(new long[]{0x0000000000000042L,0x0400000800000000L});
    public static final BitSet FOLLOW_not_key_in_field_spec10554 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_null_key_in_field_spec10556 = new BitSet(new long[]{0x0000000000000042L,0x0000000800000000L});
    public static final BitSet FOLLOW_default_value_part_in_field_spec10568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_record_var_dec10614 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_name_in_record_var_dec10616 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_percent_rowtype_key_in_record_var_dec10619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_percent_type_key_in_record_var_dec10621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_record_var_dec10624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_type_dec_in_table_declaration10671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_table_var_dec_in_table_declaration10675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_table_declaration10678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_key_in_table_type_dec10707 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_name_in_table_type_dec10709 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_is_key_in_table_type_dec10711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000100L});
    public static final BitSet FOLLOW_table_key_in_table_type_dec10723 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_of_key_in_table_type_dec10737 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_table_type_dec10739 = new BitSet(new long[]{0x0010000000000002L,0x0400000000000400L});
    public static final BitSet FOLLOW_table_indexed_by_part_in_table_type_dec10754 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_not_key_in_table_type_dec10766 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_null_key_in_table_type_dec10768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_type_def_in_table_type_dec10781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indexed_key_in_table_indexed_by_part10861 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_index_key_in_table_indexed_by_part10865 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_table_indexed_by_part10868 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_table_indexed_by_part10870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_key_in_varray_type_def10926 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_varying_key_in_varray_type_def10929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_array_key_in_varray_type_def10931 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_varray_type_def10942 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_varray_type_def10944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_varray_type_def10946 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_of_key_in_varray_type_def10957 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_varray_type_def10959 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_not_key_in_varray_type_def10970 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_null_key_in_varray_type_def10972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_var_name_in_table_var_dec11019 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_table_var_dec11021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_seq_of_statements11064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SEMICOLON_in_seq_of_statements11067 = new BitSet(new long[]{0x00480000D0044202L,0x0823601549080400L,0x0000000000108048L});
    public static final BitSet FOLLOW_EOF_in_seq_of_statements11069 = new BitSet(new long[]{0x00480000D0044202L,0x0823601549080400L,0x0000000000108048L});
    public static final BitSet FOLLOW_label_declaration_in_seq_of_statements11072 = new BitSet(new long[]{0x00480000D0044202L,0x0823601549080400L,0x0000000000108048L});
    public static final BitSet FOLLOW_LESS_THAN_OP_in_label_declaration11118 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_LESS_THAN_OP_in_label_declaration11120 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_label_name_in_label_declaration11122 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_GREATER_THAN_OP_in_label_declaration11124 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_GREATER_THAN_OP_in_label_declaration11126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_key_in_statement11171 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFDFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});
    public static final BitSet FOLLOW_swallow_to_semi_in_statement11173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_set_in_statement11175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_key_in_statement11190 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFDFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});
    public static final BitSet FOLLOW_swallow_to_semi_in_statement11192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_set_in_statement11195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grant_key_in_statement11210 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFDFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});
    public static final BitSet FOLLOW_swallow_to_semi_in_statement11212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_set_in_statement11215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_truncate_key_in_statement11230 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFDFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});
    public static final BitSet FOLLOW_swallow_to_semi_in_statement11232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_set_in_statement11235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_body_in_statement11256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement11273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_statement_in_statement11284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_statement11295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statement11306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statement11317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statement11328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statement11339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_statement_in_statement11350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_statement_in_statement11361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statement11372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statement11383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_statement11394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statement_in_statement11406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_statement11417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_element_in_assignment_statement11439 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_bind_variable_in_assignment_statement11441 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASSIGN_OP_in_assignment_statement11444 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_assignment_statement11446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_key_in_continue_statement11501 = new BitSet(new long[]{0x0000000000040002L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_label_name_in_continue_statement11503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_when_key_in_continue_statement11507 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_continue_statement11509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_key_in_exit_statement11586 = new BitSet(new long[]{0x0000000000040002L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_label_name_in_exit_statement11588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_when_key_in_exit_statement11592 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_exit_statement11594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_key_in_goto_statement11663 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_label_name_in_goto_statement11666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_key_in_if_statement11686 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_if_statement11688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_then_key_in_if_statement11690 = new BitSet(new long[]{0x00480000D0044200L,0x0823601549080400L,0x0000000000108048L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement11692 = new BitSet(new long[]{0x0000010000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_elsif_part_in_if_statement11702 = new BitSet(new long[]{0x0000010000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_else_part_in_if_statement11705 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_end_key_in_if_statement11716 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_if_key_in_if_statement11718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elsif_key_in_elsif_part11766 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_elsif_part11768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_then_key_in_elsif_part11770 = new BitSet(new long[]{0x00480000D0044200L,0x0823601549080400L,0x0000000000108048L});
    public static final BitSet FOLLOW_seq_of_statements_in_elsif_part11772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_key_in_else_part11814 = new BitSet(new long[]{0x00480000D0044200L,0x0823601549080400L,0x0000000000108048L});
    public static final BitSet FOLLOW_seq_of_statements_in_else_part11817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_loop_statement11846 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000400L});
    public static final BitSet FOLLOW_while_key_in_loop_statement11858 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_loop_statement11860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_for_key_in_loop_statement11866 = new BitSet(new long[]{0x0000000010044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement11868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_key_in_loop_statement11882 = new BitSet(new long[]{0x00480000D0044200L,0x0823601549080400L,0x0000000000108048L});
    public static final BitSet FOLLOW_seq_of_statements_in_loop_statement11892 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_end_key_in_loop_statement11902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_loop_key_in_loop_statement11904 = new BitSet(new long[]{0x0000000000040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_label_name_in_loop_statement11906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_name_in_cursor_loop_param12035 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_in_key_in_cursor_loop_param12037 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_reverse_key_in_cursor_loop_param12039 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_lower_bound_in_cursor_loop_param12042 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_cursor_loop_param12044 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_upper_bound_in_cursor_loop_param12046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_cursor_loop_param12085 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_in_key_in_cursor_loop_param12087 = new BitSet(new long[]{0x0000000050044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_loop_param12091 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_expression_list_in_cursor_loop_param12093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cursor_loop_param12100 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_statement_in_cursor_loop_param12102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cursor_loop_param12104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_key_in_forall_statement12166 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_index_name_in_forall_statement12168 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_in_key_in_forall_statement12170 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000811004L});
    public static final BitSet FOLLOW_bounds_clause_in_forall_statement12172 = new BitSet(new long[]{0x0040000040000000L,0x0020201000000400L,0x0000000000108040L});
    public static final BitSet FOLLOW_sql_statement_in_forall_statement12174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_save_key_in_forall_statement12177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_exceptions_key_in_forall_statement12179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lower_bound_in_bounds_clause12224 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_bounds_clause12226 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_upper_bound_in_bounds_clause12228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indices_key_in_bounds_clause12249 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_of_key_in_bounds_clause12251 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_collection_name_in_bounds_clause12253 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_between_bound_in_bounds_clause12255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_values_key_in_bounds_clause12287 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_of_key_in_bounds_clause12289 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_index_name_in_bounds_clause12291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_between_key_in_between_bound12321 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_lower_bound_in_between_bound12323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_and_key_in_between_bound12325 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_upper_bound_in_between_bound12327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenation_in_lower_bound12365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenation_in_upper_bound12401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_key_in_null_statement12437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_key_in_raise_statement12457 = new BitSet(new long[]{0x0000000010040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_exception_name_in_raise_statement12460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_key_in_return_statement12481 = new BitSet(new long[]{0x0000008650447222L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_return_statement12485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_key_in_function_call12534 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_routine_name_in_function_call12537 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_function_argument_in_function_call12539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_begin_key_in_body12579 = new BitSet(new long[]{0x00480000D0044200L,0x0823601549080400L,0x0000000000108048L});
    public static final BitSet FOLLOW_seq_of_statements_in_body12589 = new BitSet(new long[]{0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_exception_clause_in_body12599 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_end_key_in_body12610 = new BitSet(new long[]{0x0000000000040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_label_name_in_body12612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_key_in_exception_clause12659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_exception_handler_in_exception_clause12662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_when_key_in_exception_handler12683 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_exception_name_in_exception_handler12685 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_or_key_in_exception_handler12688 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_exception_name_in_exception_handler12690 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_then_key_in_exception_handler12694 = new BitSet(new long[]{0x00480000D0044200L,0x0823601549080400L,0x0000000000108048L});
    public static final BitSet FOLLOW_seq_of_statements_in_exception_handler12704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declare_key_in_block12746 = new BitSet(new long[]{0x0000000010044200L,0x0000000140000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_declare_spec_in_block12749 = new BitSet(new long[]{0x0000000010044200L,0x0000000141000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_body_in_block12762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execute_immediate_in_sql_statement12813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_data_manipulation_language_statements_in_sql_statement12824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_manipulation_statements_in_sql_statement12835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_transaction_control_statements_in_sql_statement12846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execute_key_in_execute_immediate12866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_immediate_key_in_execute_immediate12868 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_execute_immediate12870 = new BitSet(new long[]{0x0000100000000002L,0x0080000000000400L});
    public static final BitSet FOLLOW_into_clause_in_execute_immediate12881 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_using_clause_in_execute_immediate12883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_clause_in_execute_immediate12895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate12897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate12909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returning_key_in_dynamic_returning_clause12968 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000400L});
    public static final BitSet FOLLOW_return_key_in_dynamic_returning_clause12970 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000400L});
    public static final BitSet FOLLOW_into_clause_in_dynamic_returning_clause12973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_statement_in_data_manipulation_language_statements13013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_data_manipulation_language_statements13024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_statement_in_data_manipulation_language_statements13035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_statement_in_data_manipulation_language_statements13047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_statement_in_data_manipulation_language_statements13059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_statement_in_data_manipulation_language_statements13070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_cursor_manipulation_statements13094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_cursor_manipulation_statements13105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_cursor_manipulation_statements13116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_for_statement_in_cursor_manipulation_statements13127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_key_in_close_statement13148 = new BitSet(new long[]{0x0000000010044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_cursor_name_in_close_statement13151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_key_in_open_statement13171 = new BitSet(new long[]{0x0000000010044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_cursor_name_in_open_statement13174 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_expression_list_in_open_statement13176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_key_in_fetch_statement13205 = new BitSet(new long[]{0x0000000010044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_cursor_name_in_fetch_statement13207 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000400L});
    public static final BitSet FOLLOW_into_key_in_fetch_statement13221 = new BitSet(new long[]{0x0000000010044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_variable_name_in_fetch_statement13223 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_fetch_statement13226 = new BitSet(new long[]{0x0000000010044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_variable_name_in_fetch_statement13228 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_bulk_key_in_fetch_statement13244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_collect_key_in_fetch_statement13246 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_into_key_in_fetch_statement13248 = new BitSet(new long[]{0x0000000010044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_variable_name_in_fetch_statement13250 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_fetch_statement13253 = new BitSet(new long[]{0x0000000010044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_variable_name_in_fetch_statement13255 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_open_key_in_open_for_statement13340 = new BitSet(new long[]{0x0000000010044200L,0x0000000000000400L});
    public static final BitSet FOLLOW_variable_name_in_open_for_statement13342 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_for_key_in_open_for_statement13344 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000901044L});
    public static final BitSet FOLLOW_select_statement_in_open_for_statement13362 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_expression_in_open_for_statement13375 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_using_clause_in_open_for_statement13391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_transaction_command_in_transaction_control_statements13463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_constraint_command_in_transaction_control_statements13474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_transaction_control_statements13485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_transaction_control_statements13496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_transaction_control_statements13507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_key_in_set_transaction_command13535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_transaction_key_in_set_transaction_command13537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_read_key_in_set_transaction_command13549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_only_key_in_set_transaction_command13552 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_write_key_in_set_transaction_command13554 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_isolation_key_in_set_transaction_command13569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_level_key_in_set_transaction_command13571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_serializable_key_in_set_transaction_command13574 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_read_key_in_set_transaction_command13576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_committed_key_in_set_transaction_command13578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_use_key_in_set_transaction_command13592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rollback_key_in_set_transaction_command13594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_segment_key_in_set_transaction_command13596 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rollback_segment_name_in_set_transaction_command13598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_name_key_in_set_transaction_command13618 = new BitSet(new long[]{0x0000000400003000L});
    public static final BitSet FOLLOW_quoted_string_in_set_transaction_command13620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_key_in_set_constraint_command13743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_constraint_key_in_set_constraint_command13747 = new BitSet(new long[]{0x0000000010040000L,0x0000000000040400L});
    public static final BitSet FOLLOW_constraints_key_in_set_constraint_command13751 = new BitSet(new long[]{0x0000000010040000L,0x0000000000040400L});
    public static final BitSet FOLLOW_all_key_in_set_constraint_command13765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_constraint_name_in_set_constraint_command13769 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_set_constraint_command13772 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_constraint_name_in_set_constraint_command13774 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_immediate_key_in_set_constraint_command13789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_deferred_key_in_set_constraint_command13791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_key_in_commit_statement13848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_work_key_in_commit_statement13850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_comment_key_in_commit_statement13862 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_commit_statement13864 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_force_key_in_commit_statement13877 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_corrupt_xid_key_in_commit_statement13880 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_commit_statement13882 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_corrupt_xid_all_key_in_commit_statement13885 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_expression_in_commit_statement13889 = new BitSet(new long[]{0x0000000000008002L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_commit_statement13892 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_commit_statement13894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_write_clause_in_commit_statement13917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_write_key_in_write_clause14029 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_wait_key_in_write_clause14033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_nowait_key_in_write_clause14035 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_immediate_key_in_write_clause14040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_batch_key_in_write_clause14042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_key_in_rollback_statement14073 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000000800L});
    public static final BitSet FOLLOW_work_key_in_rollback_statement14075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000000800L});
    public static final BitSet FOLLOW_to_key_in_rollback_statement14088 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_savepoint_key_in_rollback_statement14090 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_savepoint_name_in_rollback_statement14093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_force_key_in_rollback_statement14106 = new BitSet(new long[]{0x0000000400003000L});
    public static final BitSet FOLLOW_quoted_string_in_rollback_statement14108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_key_in_savepoint_statement14204 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement14207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_function_in_synpred1_PLSQLParser855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_package_in_synpred2_PLSQLParser866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_procedure_in_synpred3_PLSQLParser877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_sequence_in_synpred4_PLSQLParser888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_trigger_in_synpred5_PLSQLParser899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_type_in_synpred6_PLSQLParser910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_function_body_in_synpred7_PLSQLParser921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_procedure_body_in_synpred8_PLSQLParser932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_package_in_synpred9_PLSQLParser943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_sequence_in_synpred10_PLSQLParser954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_trigger_in_synpred11_PLSQLParser972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_type_in_synpred12_PLSQLParser983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_function_in_synpred13_PLSQLParser994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_package_in_synpred14_PLSQLParser1005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_procedure_in_synpred15_PLSQLParser1016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_sequence_in_synpred16_PLSQLParser1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_trigger_in_synpred17_PLSQLParser1038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_synpred18_PLSQLParser2719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_synpred19_PLSQLParser2731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_synpred21_PLSQLParser2755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_synpred22_PLSQLParser2767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_declaration_in_synpred23_PLSQLParser2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_synpred25_PLSQLParser3002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_synpred26_PLSQLParser3015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_synpred28_PLSQLParser3041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_synpred29_PLSQLParser3054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_declaration_in_synpred30_PLSQLParser3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_procedure_body_in_synpred31_PLSQLParser3078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_key_in_synpred32_PLSQLParser4419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_trigger_key_in_synpred32_PLSQLParser4421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_key_in_synpred33_PLSQLParser4437 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_id_in_synpred33_PLSQLParser4439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_id_in_synpred34_PLSQLParser7713 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_synpred34_PLSQLParser7715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_sqlj_object_type_attr_in_synpred34_PLSQLParser7717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_synpred35_PLSQLParser9529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_synpred36_PLSQLParser9541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_synpred38_PLSQLParser9565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_synpred39_PLSQLParser9577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_synpred40_PLSQLParser9589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_declaration_in_synpred41_PLSQLParser9601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_procedure_body_in_synpred42_PLSQLParser9613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_key_in_synpred43_PLSQLParser11171 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFDFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});
    public static final BitSet FOLLOW_swallow_to_semi_in_synpred43_PLSQLParser11173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_set_in_synpred43_PLSQLParser11175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_truncate_key_in_synpred46_PLSQLParser11230 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFDFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});
    public static final BitSet FOLLOW_swallow_to_semi_in_synpred46_PLSQLParser11232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_set_in_synpred46_PLSQLParser11235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_begin_key_in_synpred47_PLSQLParser11251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declare_key_in_synpred48_PLSQLParser11268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_statement_in_synpred49_PLSQLParser11284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_synpred50_PLSQLParser11295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_synpred51_PLSQLParser11306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_synpred54_PLSQLParser11339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_statement_in_synpred55_PLSQLParser11350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_synpred57_PLSQLParser11372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_synpred58_PLSQLParser11383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_synpred59_PLSQLParser11394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statement_in_synpred60_PLSQLParser11406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_name_in_synpred61_PLSQLParser12009 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_in_key_in_synpred61_PLSQLParser12011 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_reverse_key_in_synpred61_PLSQLParser12013 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_lower_bound_in_synpred61_PLSQLParser12016 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DOUBLE_PERIOD_in_synpred61_PLSQLParser12018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_manipulation_statements_in_synpred64_PLSQLParser12835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_key_in_synpred65_PLSQLParser13356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred65_PLSQLParser13358 = new BitSet(new long[]{0x0000000000000002L});

}