package br.com.porcelli.parser;

import org.antlr.runtime.*;

import org.antlr.runtime.tree.*;


/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class PLSQLParser_PLSQLKeys extends Parser {
    public static final int EOF=-1;
    public static final int AMPERSAND=4;
    public static final int APPROXIMATE_NUM_LIT=5;
    public static final int ASSIGN_OP=6;
    public static final int ASTERISK=7;
    public static final int AT_SIGN=8;
    public static final int BINDVAR=9;
    public static final int BIT_STRING_LIT=10;
    public static final int CARRET_OPERATOR_PART=11;
    public static final int CHAR_STRING=12;
    public static final int CHAR_STRING_PERL=13;
    public static final int COLON=14;
    public static final int COMMA=15;
    public static final int COMMENT=16;
    public static final int CONCATENATION_OP=17;
    public static final int DELIMITED_ID=18;
    public static final int DOUBLE_ASTERISK=19;
    public static final int DOUBLE_PERIOD=20;
    public static final int EQUALS_OP=21;
    public static final int EXACT_NUM_LIT=22;
    public static final int EXCLAMATION_OPERATOR_PART=23;
    public static final int FOR_NOTATION=24;
    public static final int GREATER_THAN_OP=25;
    public static final int GREATER_THAN_OR_EQUALS_OP=26;
    public static final int HEX_STRING_LIT=27;
    public static final int INTRODUCER=28;
    public static final int LEFT_BRACKET=29;
    public static final int LEFT_PAREN=30;
    public static final int LESS_THAN_OP=31;
    public static final int LESS_THAN_OR_EQUALS_OP=32;
    public static final int MINUS_SIGN=33;
    public static final int NATIONAL_CHAR_STRING_LIT=34;
    public static final int NEWLINE=35;
    public static final int NOT_EQUAL_OP=36;
    public static final int PERCENT=37;
    public static final int PERIOD=38;
    public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=39;
    public static final int PLSQL_NON_RESERVED_ELSIF=40;
    public static final int PLSQL_NON_RESERVED_MODEL=41;
    public static final int PLSQL_NON_RESERVED_PIVOT=42;
    public static final int PLSQL_NON_RESERVED_UNPIVOT=43;
    public static final int PLSQL_NON_RESERVED_USING=44;
    public static final int PLSQL_RESERVED_CLUSTERS=45;
    public static final int PLSQL_RESERVED_COLAUTH=46;
    public static final int PLSQL_RESERVED_COMPRESS=47;
    public static final int PLSQL_RESERVED_CRASH=48;
    public static final int PLSQL_RESERVED_EXCLUSIVE=49;
    public static final int PLSQL_RESERVED_IDENTIFIED=50;
    public static final int PLSQL_RESERVED_IF=51;
    public static final int PLSQL_RESERVED_INDEX=52;
    public static final int PLSQL_RESERVED_INDEXES=53;
    public static final int PLSQL_RESERVED_LOCK=54;
    public static final int PLSQL_RESERVED_MINUS=55;
    public static final int PLSQL_RESERVED_MODE=56;
    public static final int PLSQL_RESERVED_NOCOMPRESS=57;
    public static final int PLSQL_RESERVED_NOWAIT=58;
    public static final int PLSQL_RESERVED_RESOURCE=59;
    public static final int PLSQL_RESERVED_SHARE=60;
    public static final int PLSQL_RESERVED_START=61;
    public static final int PLSQL_RESERVED_TABAUTH=62;
    public static final int PLSQL_RESERVED_VIEWS=63;
    public static final int PLUS_SIGN=64;
    public static final int PROMPT=65;
    public static final int QS_ANGLE=66;
    public static final int QS_BRACE=67;
    public static final int QS_BRACK=68;
    public static final int QS_OTHER=69;
    public static final int QS_OTHER_CH=70;
    public static final int QS_PAREN=71;
    public static final int QUESTION_MARK=72;
    public static final int QUOTE=73;
    public static final int REGULAR_ID=74;
    public static final int RIGHT_BRACKET=75;
    public static final int RIGHT_PAREN=76;
    public static final int SEMICOLON=77;
    public static final int SEPARATOR=78;
    public static final int SIMPLE_LETTER=79;
    public static final int SOLIDUS=80;
    public static final int SPACE=81;
    public static final int SQL92_RESERVED_ALL=82;
    public static final int SQL92_RESERVED_ALTER=83;
    public static final int SQL92_RESERVED_AND=84;
    public static final int SQL92_RESERVED_ANY=85;
    public static final int SQL92_RESERVED_AS=86;
    public static final int SQL92_RESERVED_ASC=87;
    public static final int SQL92_RESERVED_BEGIN=88;
    public static final int SQL92_RESERVED_BETWEEN=89;
    public static final int SQL92_RESERVED_BY=90;
    public static final int SQL92_RESERVED_CASE=91;
    public static final int SQL92_RESERVED_CHECK=92;
    public static final int SQL92_RESERVED_CONNECT=93;
    public static final int SQL92_RESERVED_CREATE=94;
    public static final int SQL92_RESERVED_CURRENT=95;
    public static final int SQL92_RESERVED_CURSOR=96;
    public static final int SQL92_RESERVED_DATE=97;
    public static final int SQL92_RESERVED_DECLARE=98;
    public static final int SQL92_RESERVED_DEFAULT=99;
    public static final int SQL92_RESERVED_DELETE=100;
    public static final int SQL92_RESERVED_DESC=101;
    public static final int SQL92_RESERVED_DISTINCT=102;
    public static final int SQL92_RESERVED_DROP=103;
    public static final int SQL92_RESERVED_ELSE=104;
    public static final int SQL92_RESERVED_END=105;
    public static final int SQL92_RESERVED_EXCEPTION=106;
    public static final int SQL92_RESERVED_EXISTS=107;
    public static final int SQL92_RESERVED_FALSE=108;
    public static final int SQL92_RESERVED_FETCH=109;
    public static final int SQL92_RESERVED_FOR=110;
    public static final int SQL92_RESERVED_FROM=111;
    public static final int SQL92_RESERVED_GOTO=112;
    public static final int SQL92_RESERVED_GRANT=113;
    public static final int SQL92_RESERVED_GROUP=114;
    public static final int SQL92_RESERVED_HAVING=115;
    public static final int SQL92_RESERVED_IN=116;
    public static final int SQL92_RESERVED_INSERT=117;
    public static final int SQL92_RESERVED_INTERSECT=118;
    public static final int SQL92_RESERVED_INTO=119;
    public static final int SQL92_RESERVED_IS=120;
    public static final int SQL92_RESERVED_LIKE=121;
    public static final int SQL92_RESERVED_NOT=122;
    public static final int SQL92_RESERVED_NULL=123;
    public static final int SQL92_RESERVED_OF=124;
    public static final int SQL92_RESERVED_ON=125;
    public static final int SQL92_RESERVED_OPTION=126;
    public static final int SQL92_RESERVED_OR=127;
    public static final int SQL92_RESERVED_ORDER=128;
    public static final int SQL92_RESERVED_OVERLAPS=129;
    public static final int SQL92_RESERVED_PRIOR=130;
    public static final int SQL92_RESERVED_PROCEDURE=131;
    public static final int SQL92_RESERVED_PUBLIC=132;
    public static final int SQL92_RESERVED_REVOKE=133;
    public static final int SQL92_RESERVED_SELECT=134;
    public static final int SQL92_RESERVED_SIZE=135;
    public static final int SQL92_RESERVED_TABLE=136;
    public static final int SQL92_RESERVED_THE=137;
    public static final int SQL92_RESERVED_THEN=138;
    public static final int SQL92_RESERVED_TO=139;
    public static final int SQL92_RESERVED_TRUE=140;
    public static final int SQL92_RESERVED_UNION=141;
    public static final int SQL92_RESERVED_UNIQUE=142;
    public static final int SQL92_RESERVED_UPDATE=143;
    public static final int SQL92_RESERVED_VALUES=144;
    public static final int SQL92_RESERVED_VIEW=145;
    public static final int SQL92_RESERVED_WHEN=146;
    public static final int SQL92_RESERVED_WHERE=147;
    public static final int SQL92_RESERVED_WITH=148;
    public static final int TILDE_OPERATOR_PART=149;
    public static final int UNDERSCORE=150;
    public static final int UNSIGNED_INTEGER=151;
    public static final int VERTICAL_BAR=152;
    public static final int ZV=153;
    public static final int ADD_VK=154;
    public static final int AFTER_EACH_ROW=155;
    public static final int AFTER_STATEMENT=156;
    public static final int AFTER_VK=157;
    public static final int AGENT_VK=158;
    public static final int AGGREGATE_VK=159;
    public static final int ALIAS=160;
    public static final int ALTER_ATTRIBUTE=161;
    public static final int ALTER_COLLECTION=162;
    public static final int ALTER_FUNCTION=163;
    public static final int ALTER_METHOD=164;
    public static final int ALTER_METHOD_ELEMENT=165;
    public static final int ALTER_PACKAGE=166;
    public static final int ALTER_PROCEDURE=167;
    public static final int ALTER_SEQUENCE=168;
    public static final int ALTER_TRIGGER=169;
    public static final int ALTER_TYPE=170;
    public static final int ANALYZE_VK=171;
    public static final int ANY_ELEMENT=172;
    public static final int ANY_MODE=173;
    public static final int ARGUMENT=175;
    public static final int ARGUMENTS=176;
    public static final int ASSIGN=177;
    public static final int ASSOCIATE_VK=178;
    public static final int ATTRIBUTE=180;
    public static final int ATTRIBUTES=181;
    public static final int ATTRIBUTE_NAME=182;
    public static final int AT_VK=184;
    public static final int AUDIT_VK=185;
    public static final int AUTHID_VK=186;
    public static final int AUTOMATIC_VK=187;
    public static final int AUTONOMOUS_TRANSACTION_VK=188;
    public static final int AUTO_VK=189;
    public static final int BATCH_VK=190;
    public static final int BEFORE_EACH_ROW=191;
    public static final int BEFORE_STATEMENT=192;
    public static final int BEFORE_VK=193;
    public static final int BFILE_VK=194;
    public static final int BINARY_DOUBLE_VK=195;
    public static final int BINARY_FLOAT_VK=196;
    public static final int BINARY_INTEGER_VK=197;
    public static final int BIT_VK=199;
    public static final int BLOB_VK=200;
    public static final int BLOCK=201;
    public static final int BLOCK_VK=202;
    public static final int BODY=203;
    public static final int BODY_MODE=204;
    public static final int BODY_VK=205;
    public static final int BOOLEAN_VK=206;
    public static final int BOTH_VK=207;
    public static final int BREADTH_VK=208;
    public static final int BULK_VK=209;
    public static final int BYTE_VK=210;
    public static final int CACHE_VK=211;
    public static final int CALL_MODE=212;
    public static final int CALL_VK=213;
    public static final int CANONICAL_VK=214;
    public static final int CASCADE_VK=216;
    public static final int CASCATED_ELEMENT=217;
    public static final int CAST_VK=218;
    public static final int CHARACTER_VK=219;
    public static final int CHAR_CS_VK=220;
    public static final int CHAR_SET_NAME=221;
    public static final int CHAR_VK=224;
    public static final int CHR_VK=225;
    public static final int CLOB_VK=226;
    public static final int CLOSE_VK=227;
    public static final int CLUSTER_VK=228;
    public static final int COLLECTION_MODE=229;
    public static final int COLLECTION_NAME=230;
    public static final int COLLECT_VK=231;
    public static final int COLUMNS=233;
    public static final int COLUMN_NAME=234;
    public static final int COMMENT_VK=236;
    public static final int COMMITTED_VK=237;
    public static final int COMMIT_VK=238;
    public static final int COMPATIBILITY_VK=239;
    public static final int COMPILATION_UNIT=240;
    public static final int COMPILER_PARAMETER=241;
    public static final int COMPILE_VK=242;
    public static final int COMPOUND_DML=243;
    public static final int COMPOUND_VK=244;
    public static final int CONDITIONAL_INSERT=246;
    public static final int CONSTANT_VK=247;
    public static final int CONSTRAINT_NAME=248;
    public static final int CONSTRUCTOR_SPEC=249;
    public static final int CONSTRUCTOR_VK=250;
    public static final int CONTENT_VK=251;
    public static final int CONTEXT_VK=252;
    public static final int CONTINUE_VK=253;
    public static final int CONVERT_VK=254;
    public static final int CORRUPT_XID_ALL_VK=255;
    public static final int CORRUPT_XID_VK=256;
    public static final int COST_CLASS_NAME=257;
    public static final int COST_VK=258;
    public static final int COUNT_VK=259;
    public static final int CREATE_FUNCTION=260;
    public static final int CREATE_PACKAGE_BODY=261;
    public static final int CREATE_PACKAGE_SPEC=262;
    public static final int CREATE_PROCEDURE=263;
    public static final int CREATE_SEQUENCE=264;
    public static final int CREATE_TRIGGER=265;
    public static final int CREATE_TYPE_BODY=266;
    public static final int CREATE_TYPE_SPEC=267;
    public static final int CROSS_VK=268;
    public static final int CUBE_VK=269;
    public static final int CURRENT_USER_VK=270;
    public static final int CURRENT_VK=271;
    public static final int CURSOR_BASED_FOR=272;
    public static final int CURSOR_DECLARE=273;
    public static final int CURSOR_NAME=274;
    public static final int CUSTOMDATUM_VK=275;
    public static final int CUSTOM_TYPE=276;
    public static final int CYCLE_VK=277;
    public static final int C_VK=278;
    public static final int DATABASE_VK=279;
    public static final int DATETIME_OP=280;
    public static final int DAY_VK=281;
    public static final int DBTIMEZONE_VK=282;
    public static final int DB_ROLE_CHANGE_VK=283;
    public static final int DDL_VK=284;
    public static final int DEBUG_VK=285;
    public static final int DECIMAL_VK=286;
    public static final int DECOMPOSE_VK=287;
    public static final int DECREMENT_VK=288;
    public static final int DEC_VK=289;
    public static final int DEFAULTS_VK=290;
    public static final int DEFAULT_VALUE=291;
    public static final int DEFERRED_VK=292;
    public static final int DEFINER_VK=293;
    public static final int DENSE_RANK_VK=295;
    public static final int DEPENDENT_HANDLING=296;
    public static final int DEPTH_VK=297;
    public static final int DETERMINISTIC_VK=298;
    public static final int DIMENSION_VK=299;
    public static final int DIRECT_MODE=300;
    public static final int DISABLE_VK=301;
    public static final int DISASSOCIATE_VK=302;
    public static final int DML_EVENT=303;
    public static final int DML_EVENT_ELEMENT=304;
    public static final int DOCUMENT_VK=305;
    public static final int DOT_ASTERISK=306;
    public static final int DOUBLE_VK=307;
    public static final int DROP_FUNCTION=308;
    public static final int DROP_PACKAGE=309;
    public static final int DROP_PROCEDURE=310;
    public static final int DROP_SEQUENCE=311;
    public static final int DROP_TRIGGER=312;
    public static final int DROP_TYPE=313;
    public static final int DSINTERVAL_UNCONSTRAINED_VK=314;
    public static final int DYNAMIC_RETURN=315;
    public static final int ELEMENT=316;
    public static final int ELEMENTS_MODE=317;
    public static final int ELEMENT_SPEC=318;
    public static final int ENABLE_VK=319;
    public static final int ENCODING_VK=320;
    public static final int ENTITYESCAPING_VK=321;
    public static final int EVALNAME_VK=323;
    public static final int EXCEPTIONS_VK=325;
    public static final int EXCEPTION_DECLARE=326;
    public static final int EXCEPTION_INIT_VK=327;
    public static final int EXCEPTION_NAME=328;
    public static final int EXCLUDE_VK=330;
    public static final int EXECUTE_VK=331;
    public static final int EXIT_VK=332;
    public static final int EXPLAIN_STATEMENT=333;
    public static final int EXPR=334;
    public static final int EXPR_LIST=335;
    public static final int EXTERNAL_MODE=336;
    public static final int EXTERNAL_VK=337;
    public static final int EXTRACT_VK=338;
    public static final int FACTORING=339;
    public static final int FIELDS=340;
    public static final int FIELD_SPEC=341;
    public static final int FINAL_VK=342;
    public static final int FIRST_VALUE_VK=343;
    public static final int FIRST_VK=344;
    public static final int FLOAT_VK=345;
    public static final int FOLLOWING_VK=346;
    public static final int FOLLOWS_VK=347;
    public static final int FORALL_VK=348;
    public static final int FORCE_VK=349;
    public static final int FOR_EACH_ROW=350;
    public static final int FOR_LOOP=351;
    public static final int FOR_MULTI_COLUMN=352;
    public static final int FOR_SINGLE_COLUMN=353;
    public static final int FULL_VK=354;
    public static final int FUNCTION_ENABLING_OVER=355;
    public static final int FUNCTION_ENABLING_USING=356;
    public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=357;
    public static final int FUNCTION_NAME=358;
    public static final int FUNCTION_SPEC=359;
    public static final int GROUPING_VK=362;
    public static final int GROUPIN_SET=363;
    public static final int GROUP_BY_ELEMENT=364;
    public static final int HASH_VK=365;
    public static final int HIDE_VK=366;
    public static final int HIERARCHICAL=367;
    public static final int HOSTED_VARIABLE=368;
    public static final int HOSTED_VARIABLE_NAME=369;
    public static final int HOSTED_VARIABLE_ROUTINE_CALL=370;
    public static final int HOUR_VK=371;
    public static final int ID=372;
    public static final int IGNORE_VK=373;
    public static final int IMMEDIATE_VK=374;
    public static final int IMPLEMENTATION_TYPE_NAME=375;
    public static final int INCLUDE_VK=376;
    public static final int INCLUDING_VK=377;
    public static final int INCREMENT_VK=378;
    public static final int INDENT_VK=379;
    public static final int INDEXED_BY=380;
    public static final int INDEXED_FOR=381;
    public static final int INDEX_NAME=382;
    public static final int INDICES_BOUND=383;
    public static final int INLINE_VK=384;
    public static final int INNER_VK=385;
    public static final int INOUT_VK=386;
    public static final int INSTANTIABLE_VK=387;
    public static final int INSTEAD_VK=388;
    public static final int INTEGER_VK=389;
    public static final int INTERVAL_DATATYPE=390;
    public static final int INT_VK=392;
    public static final int INVALIDATE_VK=393;
    public static final int ISOLATION_VK=394;
    public static final int IS_A_SET=395;
    public static final int IS_EMPTY=396;
    public static final int IS_INFINITE=397;
    public static final int IS_NAN=398;
    public static final int IS_NOT_A_SET=399;
    public static final int IS_NOT_EMPTY=400;
    public static final int IS_NOT_INFINITE=401;
    public static final int IS_NOT_NAN=402;
    public static final int IS_NOT_NULL=403;
    public static final int IS_NOT_OF_TYPE=404;
    public static final int IS_NOT_PRESENT=405;
    public static final int IS_NULL=406;
    public static final int IS_OF_TYPE=407;
    public static final int IS_PRESENT=408;
    public static final int ITERATE_VK=409;
    public static final int JAVA_VK=410;
    public static final int JOIN_DEF=411;
    public static final int KEEP_VK=412;
    public static final int LABEL_DECLARE=413;
    public static final int LABEL_NAME=414;
    public static final int LANGUAGE_VK=415;
    public static final int LAST_VALUE_VK=416;
    public static final int LAST_VK=417;
    public static final int LEADING_VK=418;
    public static final int LEFT_VK=421;
    public static final int LIBRARY_VK=424;
    public static final int LIKE2_VK=425;
    public static final int LIKE4_VK=426;
    public static final int LIKEC_VK=427;
    public static final int LIMIT_VK=428;
    public static final int LINK_NAME=429;
    public static final int LOCAL_VK=430;
    public static final int LOCK_TABLE_ELEMENT=431;
    public static final int LOGIC_EXPR=432;
    public static final int LOGOFF_VK=433;
    public static final int LOGON_VK=434;
    public static final int LOG_VK=435;
    public static final int LONG_VK=436;
    public static final int LOOP_VK=437;
    public static final int MAIN_MODEL=438;
    public static final int MAIN_MODEL_NAME=439;
    public static final int MAP_VK=440;
    public static final int MAXVALUE_VK=441;
    public static final int MEASURES_VK=442;
    public static final int MEMBER_VK=443;
    public static final int MERGE_INSERT=444;
    public static final int MERGE_UPDATE=445;
    public static final int MERGE_VK=446;
    public static final int MINUTE_VK=448;
    public static final int MINVALUE_VK=449;
    public static final int MLSLABEL_VK=450;
    public static final int MODEL_COLUMN=451;
    public static final int MODEL_COLUMNS=452;
    public static final int MODEL_EXPRESSION=453;
    public static final int MODEL_RULE=454;
    public static final int MODEL_RULES=455;
    public static final int MODIFIER=456;
    public static final int MODIFY_VK=457;
    public static final int MONTH_VK=458;
    public static final int MULTI_TABLE_MODE=459;
    public static final int NAME_VK=460;
    public static final int NATIVE_DATATYPE=462;
    public static final int NATURALN_VK=463;
    public static final int NATURAL_VK=464;
    public static final int NAV_VK=465;
    public static final int NCHAR_CS_VK=466;
    public static final int NCHAR_VK=467;
    public static final int NCLOB_VK=468;
    public static final int NESTED_TABLE_TYPE_DEF=469;
    public static final int NESTED_VK=470;
    public static final int NEW_VK=471;
    public static final int NOAUDIT_VK=472;
    public static final int NOCACHE_VK=473;
    public static final int NOCOPY_VK=474;
    public static final int NOCYCLE_VK=475;
    public static final int NOENTITYESCAPING_VK=476;
    public static final int NOMAXVALUE_VK=477;
    public static final int NOMINVALUE_VK=478;
    public static final int NON_DML=479;
    public static final int NOORDER_VK=480;
    public static final int NOSCHEMACHECK_VK=481;
    public static final int NOT_BETWEEN=482;
    public static final int NOT_IN=484;
    public static final int NOT_LIKE=485;
    public static final int NO_VK=486;
    public static final int NULLS_VK=487;
    public static final int NUMBER_VK=488;
    public static final int NUMERIC_VK=489;
    public static final int NVARCHAR2_VK=490;
    public static final int OBJECT_AS=491;
    public static final int OBJECT_MEMBERS=492;
    public static final int OBJECT_TYPE_DEF=493;
    public static final int OBJECT_VK=494;
    public static final int OFF_VK=495;
    public static final int OLD_VK=496;
    public static final int ONLY_VK=497;
    public static final int OPEN_VK=498;
    public static final int ORADATA_VK=499;
    public static final int ORDER_BY_ELEMENT=500;
    public static final int ORDER_BY_ELEMENTS=501;
    public static final int ORDINALITY_VK=502;
    public static final int OUT_VK=503;
    public static final int OVERRIDING_VK=504;
    public static final int OVER_VK=505;
    public static final int PACKAGE_NAME=506;
    public static final int PACKAGE_VK=507;
    public static final int PARALLEL_ENABLE_VK=508;
    public static final int PARAMETER=509;
    public static final int PARAMETERS=510;
    public static final int PARAMETERS_VK=511;
    public static final int PARAMETER_NAME=512;
    public static final int PARENT_VK=513;
    public static final int PARTITION_VK=514;
    public static final int PASSING_VK=515;
    public static final int PERCENT_FOUND_VK=517;
    public static final int PERCENT_ISOPEN_VK=518;
    public static final int PERCENT_NOTFOUND_VK=519;
    public static final int PERCENT_ROWCOUNT_VK=520;
    public static final int PERCENT_ROWTYPE_VK=521;
    public static final int PERCENT_TYPE_VK=522;
    public static final int PIPELINED_VK=524;
    public static final int PIVOT_ALIAS=525;
    public static final int PIVOT_ELEMENT=526;
    public static final int PIVOT_IN_ELEMENT=527;
    public static final int PIVOT_VK=528;
    public static final int PLS_INTEGER_VK=543;
    public static final int POSITIVEN_VK=545;
    public static final int POSITIVE_VK=546;
    public static final int PRAGMA_DECLARE=547;
    public static final int PRAGMA_VK=548;
    public static final int PRECEDING_VK=549;
    public static final int PRECISION=550;
    public static final int PRECISION_VK=551;
    public static final int PREDICTION_FUNCTION=552;
    public static final int PROCEDURE_NAME=553;
    public static final int PROCEDURE_SPEC=554;
    public static final int QUERY_NAME=556;
    public static final int RAISE_VK=557;
    public static final int RANGE_VK=558;
    public static final int RAW_VK=559;
    public static final int READ_VK=560;
    public static final int REAL_VK=561;
    public static final int RECORD_NAME=562;
    public static final int RECORD_TYPE_DECLARE=563;
    public static final int RECORD_VAR_DECLARE=564;
    public static final int REFERENCE_MODEL_NAME=565;
    public static final int REFERENCE_VK=566;
    public static final int REFERENCING_VK=567;
    public static final int REF_VK=568;
    public static final int REJECT_VK=570;
    public static final int RELIES_ON_VK=571;
    public static final int RENAME_VK=572;
    public static final int REPLACE_VK=573;
    public static final int RESPECT_VK=574;
    public static final int RESTRICT_REFERENCES_VK=575;
    public static final int RESULT_CACHE_VK=576;
    public static final int RETURN_VK=577;
    public static final int REUSE_VK=578;
    public static final int REVERSE_VK=579;
    public static final int RIGHT_VK=582;
    public static final int ROLLBACK_SEGMENT_NAME=583;
    public static final int ROLLBACK_VK=584;
    public static final int ROLLUP_VK=585;
    public static final int ROUTINE_CALL=586;
    public static final int ROUTINE_NAME=587;
    public static final int ROWID_VK=588;
    public static final int ROWS_VK=589;
    public static final int ROW_VK=590;
    public static final int RULES_VK=591;
    public static final int SAMPLE_VK=592;
    public static final int SAVEPOINT_NAME=593;
    public static final int SAVEPOINT_VK=594;
    public static final int SCHEMACHECK_VK=595;
    public static final int SCHEMA_NAME=596;
    public static final int SCHEMA_VK=597;
    public static final int SCN_VK=598;
    public static final int SEARCHED_CASE=599;
    public static final int SEARCH_VK=600;
    public static final int SECOND_VK=601;
    public static final int SEED_VK=602;
    public static final int SELECTED_TABLEVIEW=603;
    public static final int SELECT_BASED_FOR=604;
    public static final int SELECT_ITEM=605;
    public static final int SELECT_LIST=606;
    public static final int SELECT_MODE=607;
    public static final int SELECT_STATEMENT=608;
    public static final int SELF_VK=609;
    public static final int SEQUENCE_NAME=611;
    public static final int SEQUENCE_VK=612;
    public static final int SEQUENTIAL_VK=613;
    public static final int SERIALIZABLE_VK=614;
    public static final int SERIALLY_REUSABLE_VK=615;
    public static final int SERVERERROR_VK=616;
    public static final int SESSIONTIMEZONE_VK=617;
    public static final int SET_CONSTRAINT=618;
    public static final int SET_SERVEROUTPUT=619;
    public static final int SET_TRANSACTION=620;
    public static final int SET_VK=621;
    public static final int SHOW_VK=622;
    public static final int SHUTDOWN_VK=623;
    public static final int SIBLINGS_VK=624;
    public static final int SIGNTYPE_VK=625;
    public static final int SIMPLE_BOUND=626;
    public static final int SIMPLE_CASE=627;
    public static final int SIMPLE_DML=628;
    public static final int SIMPLE_INTEGER_VK=629;
    public static final int SINGLE_TABLE_MODE=630;
    public static final int SINGLE_VK=631;
    public static final int SKIP_VK=632;
    public static final int SMALLINT_VK=633;
    public static final int SOME_VK=635;
    public static final int SPECIFICATION_VK=636;
    public static final int SQLDATA_VK=701;
    public static final int SQL_SCRIPT=702;
    public static final int STANDALONE_VK=703;
    public static final int STANDARD_FUNCTION=704;
    public static final int STARTUP_VK=705;
    public static final int STATEMENTS=706;
    public static final int STATIC_RETURNING=707;
    public static final int STATIC_VK=708;
    public static final int STATISTICS_VK=709;
    public static final int STREAMING_CLAUSE=710;
    public static final int STRING_VK=711;
    public static final int SUBMULTISET_VK=712;
    public static final int SUBPARTITION_VK=713;
    public static final int SUBQUERY=714;
    public static final int SUBTYPE_DECLARE=715;
    public static final int SUSPEND_VK=716;
    public static final int TABLEVIEW_NAME=717;
    public static final int TABLE_ELEMENT=718;
    public static final int TABLE_EXPRESSION=719;
    public static final int TABLE_REF=720;
    public static final int TABLE_REF_ELEMENT=721;
    public static final int TABLE_TYPE_DECLARE=722;
    public static final int TABLE_VAR_DECLARE=723;
    public static final int TABLE_VAR_NAME=724;
    public static final int THREE_DOTS=725;
    public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=726;
    public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=727;
    public static final int TIMESTAMP_UNCONSTRAINED_VK=728;
    public static final int TIMESTAMP_VK=729;
    public static final int TIMEZONE_ABBR_VK=730;
    public static final int TIMEZONE_HOUR_VK=731;
    public static final int TIMEZONE_MINUTE_VK=732;
    public static final int TIMEZONE_REGION_VK=733;
    public static final int TIME_VK=734;
    public static final int TRAILING_VK=735;
    public static final int TRANSLATE_VK=736;
    public static final int TREAT_VK=737;
    public static final int TRIGGER_NAME=738;
    public static final int TRIM_VK=739;
    public static final int TRUNCATE_VK=740;
    public static final int TYPE_BODY_ELEMENTS=741;
    public static final int TYPE_NAME=742;
    public static final int TYPE_VK=743;
    public static final int UNARY_OPERATOR=744;
    public static final int UNBOUNDED_VK=745;
    public static final int UNDER_VK=746;
    public static final int UNLIMITED_VK=747;
    public static final int UNPIVOT_IN_ELEMENT=748;
    public static final int UNPIVOT_VK=749;
    public static final int UNTIL_VK=751;
    public static final int UPDATED_VK=752;
    public static final int UPSERT_VK=753;
    public static final int UROWID_VK=754;
    public static final int USING_MODE=755;
    public static final int VALIDATE_VK=756;
    public static final int VALUES_BOUND=757;
    public static final int VALUE_VK=758;
    public static final int VARCHAR2_VK=759;
    public static final int VARCHAR_VK=760;
    public static final int VARIABLE_DECLARE=761;
    public static final int VARIABLE_NAME=762;
    public static final int VARR_ARRAY_DEF=763;
    public static final int VECTOR_EXPR=764;
    public static final int VERSIONS_VK=765;
    public static final int VERSION_VK=766;
    public static final int WAIT_VK=768;
    public static final int WELLFORMED_VK=769;
    public static final int WHILE_LOOP=770;
    public static final int WITHIN_VK=771;
    public static final int WORK_VK=772;
    public static final int WRITE_VK=773;
    public static final int XMLAGG_VK=774;
    public static final int XMLATTRIBUTES_VK=775;
    public static final int XMLCAST_VK=776;
    public static final int XMLCOLATTVAL_VK=777;
    public static final int XMLELEMENT_VK=778;
    public static final int XMLEXISTS_VK=779;
    public static final int XMLFOREST_VK=780;
    public static final int XMLNAMESPACES_VK=781;
    public static final int XMLPARSE_VK=782;
    public static final int XMLPI_VK=783;
    public static final int XMLQUERY_VK=784;
    public static final int XMLROOT_VK=785;
    public static final int XMLSERIALIZE_VK=786;
    public static final int XMLTABLE_VK=787;
    public static final int XML_ALIAS=788;
    public static final int XML_COLUMN=789;
    public static final int XML_COLUMN_NAME=790;
    public static final int XML_ELEMENT=791;
    public static final int XML_VK=792;
    public static final int YEAR_VK=793;
    public static final int YES_VK=794;
    public static final int YMINTERVAL_UNCONSTRAINED_VK=795;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators
    public PLSQLParser gPLSQLParser;
    public PLSQLParser gParent;


    public PLSQLParser_PLSQLKeys(TokenStream input, PLSQLParser gPLSQLParser) {
        this(input, new RecognizerSharedState(), gPLSQLParser);
    }
    public PLSQLParser_PLSQLKeys(TokenStream input, RecognizerSharedState state, PLSQLParser gPLSQLParser) {
        super(input, state);
        this.gPLSQLParser = gPLSQLParser;
        gParent = gPLSQLParser;
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return PLSQLParser.tokenNames; }
    public String getGrammarFileName() { return "main.java.PLSQLKeys.g"; }


    public static class create_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "create_key"
    // main.java.PLSQLKeys.g:345:1: create_key : SQL92_RESERVED_CREATE ;
    public final create_key_return create_key() throws RecognitionException {
        create_key_return retval = new create_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_CREATE1=null;

        Object SQL92_RESERVED_CREATE1_tree=null;

        try {
            // main.java.PLSQLKeys.g:346:5: ( SQL92_RESERVED_CREATE )
            // main.java.PLSQLKeys.g:346:10: SQL92_RESERVED_CREATE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_CREATE1=(Token)match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_create_key2266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CREATE1_tree = 
            (Object)adaptor.create(SQL92_RESERVED_CREATE1)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_CREATE1_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "create_key"


    public static class replace_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "replace_key"
    // main.java.PLSQLKeys.g:349:1: replace_key :{...}? => REGULAR_ID -> REPLACE_VK[$REGULAR_ID] ;
    public final replace_key_return replace_key() throws RecognitionException {
        replace_key_return retval = new replace_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID2=null;

        Object REGULAR_ID2_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:350:5: ({...}? => REGULAR_ID -> REPLACE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:350:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("replace"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "replace_key", "input.LT(1).getText().equalsIgnoreCase(\"replace\")");
            }

            REGULAR_ID2=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_replace_key2293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID2);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:76: -> REPLACE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(REPLACE_VK, REGULAR_ID2)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "replace_key"


    public static class package_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "package_key"
    // main.java.PLSQLKeys.g:353:1: package_key :{...}? => REGULAR_ID -> PACKAGE_VK[$REGULAR_ID] ;
    public final package_key_return package_key() throws RecognitionException {
        package_key_return retval = new package_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID3=null;

        Object REGULAR_ID3_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:354:5: ({...}? => REGULAR_ID -> PACKAGE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:354:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("package"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "package_key", "input.LT(1).getText().equalsIgnoreCase(\"package\")");
            }

            REGULAR_ID3=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_package_key2321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID3);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 354:76: -> PACKAGE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PACKAGE_VK, REGULAR_ID3)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "package_key"


    public static class body_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_key"
    // main.java.PLSQLKeys.g:357:1: body_key :{...}? REGULAR_ID -> BODY_VK[$REGULAR_ID] ;
    public final body_key_return body_key() throws RecognitionException {
        body_key_return retval = new body_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID4=null;

        Object REGULAR_ID4_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:358:5: ({...}? REGULAR_ID -> BODY_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:358:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("body"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "body_key", "input.LT(1).getText().equalsIgnoreCase(\"body\")");
            }

            REGULAR_ID4=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_body_key2348); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID4);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:71: -> BODY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BODY_VK, REGULAR_ID4)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_key"


    public static class begin_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "begin_key"
    // main.java.PLSQLKeys.g:361:1: begin_key : SQL92_RESERVED_BEGIN ;
    public final begin_key_return begin_key() throws RecognitionException {
        begin_key_return retval = new begin_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_BEGIN5=null;

        Object SQL92_RESERVED_BEGIN5_tree=null;

        try {
            // main.java.PLSQLKeys.g:362:5: ( SQL92_RESERVED_BEGIN )
            // main.java.PLSQLKeys.g:362:10: SQL92_RESERVED_BEGIN
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_BEGIN5=(Token)match(input,SQL92_RESERVED_BEGIN,FOLLOW_SQL92_RESERVED_BEGIN_in_begin_key2373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_BEGIN5_tree = 
            (Object)adaptor.create(SQL92_RESERVED_BEGIN5)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_BEGIN5_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "begin_key"


    public static class exit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exit_key"
    // main.java.PLSQLKeys.g:365:1: exit_key :{...}? REGULAR_ID -> EXIT_VK[$REGULAR_ID] ;
    public final exit_key_return exit_key() throws RecognitionException {
        exit_key_return retval = new exit_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID6=null;

        Object REGULAR_ID6_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:365:9: ({...}? REGULAR_ID -> EXIT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:365:14: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("exit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exit_key", "input.LT(1).getText().equalsIgnoreCase(\"exit\")");
            }

            REGULAR_ID6=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_exit_key2390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID6);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:75: -> EXIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(EXIT_VK, REGULAR_ID6)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exit_key"


    public static class declare_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declare_key"
    // main.java.PLSQLKeys.g:368:1: declare_key : SQL92_RESERVED_DECLARE ;
    public final declare_key_return declare_key() throws RecognitionException {
        declare_key_return retval = new declare_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_DECLARE7=null;

        Object SQL92_RESERVED_DECLARE7_tree=null;

        try {
            // main.java.PLSQLKeys.g:369:5: ( SQL92_RESERVED_DECLARE )
            // main.java.PLSQLKeys.g:369:10: SQL92_RESERVED_DECLARE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_DECLARE7=(Token)match(input,SQL92_RESERVED_DECLARE,FOLLOW_SQL92_RESERVED_DECLARE_in_declare_key2415); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DECLARE7_tree = 
            (Object)adaptor.create(SQL92_RESERVED_DECLARE7)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_DECLARE7_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declare_key"


    public static class exception_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_key"
    // main.java.PLSQLKeys.g:372:1: exception_key : SQL92_RESERVED_EXCEPTION ;
    public final exception_key_return exception_key() throws RecognitionException {
        exception_key_return retval = new exception_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_EXCEPTION8=null;

        Object SQL92_RESERVED_EXCEPTION8_tree=null;

        try {
            // main.java.PLSQLKeys.g:373:5: ( SQL92_RESERVED_EXCEPTION )
            // main.java.PLSQLKeys.g:373:10: SQL92_RESERVED_EXCEPTION
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_EXCEPTION8=(Token)match(input,SQL92_RESERVED_EXCEPTION,FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_key2435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_EXCEPTION8_tree = 
            (Object)adaptor.create(SQL92_RESERVED_EXCEPTION8)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_EXCEPTION8_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exception_key"


    public static class serveroutput_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "serveroutput_key"
    // main.java.PLSQLKeys.g:376:1: serveroutput_key :{...}? REGULAR_ID ;
    public final serveroutput_key_return serveroutput_key() throws RecognitionException {
        serveroutput_key_return retval = new serveroutput_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID9=null;

        Object REGULAR_ID9_tree=null;

        try {
            // main.java.PLSQLKeys.g:377:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:377:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("serveroutput"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "serveroutput_key", "input.LT(1).getText().equalsIgnoreCase(\"serveroutput\")");
            }

            REGULAR_ID9=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_serveroutput_key2457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID9_tree = 
            (Object)adaptor.create(REGULAR_ID9)
            ;
            adaptor.addChild(root_0, REGULAR_ID9_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "serveroutput_key"


    public static class off_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "off_key"
    // main.java.PLSQLKeys.g:380:1: off_key :{...}? REGULAR_ID -> OFF_VK[$REGULAR_ID] ;
    public final off_key_return off_key() throws RecognitionException {
        off_key_return retval = new off_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID10=null;

        Object REGULAR_ID10_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:381:5: ({...}? REGULAR_ID -> OFF_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:381:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("off"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "off_key", "input.LT(1).getText().equalsIgnoreCase(\"off\")");
            }

            REGULAR_ID10=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_off_key2479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID10);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:70: -> OFF_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(OFF_VK, REGULAR_ID10)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "off_key"


    public static class constant_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constant_key"
    // main.java.PLSQLKeys.g:384:1: constant_key :{...}? REGULAR_ID -> CONSTANT_VK[$REGULAR_ID] ;
    public final constant_key_return constant_key() throws RecognitionException {
        constant_key_return retval = new constant_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID11=null;

        Object REGULAR_ID11_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:385:5: ({...}? REGULAR_ID -> CONSTANT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:385:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("constant"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "constant_key", "input.LT(1).getText().equalsIgnoreCase(\"constant\")");
            }

            REGULAR_ID11=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_constant_key2506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID11);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 385:75: -> CONSTANT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CONSTANT_VK, REGULAR_ID11)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constant_key"


    public static class subtype_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subtype_key"
    // main.java.PLSQLKeys.g:388:1: subtype_key :{...}? REGULAR_ID ;
    public final subtype_key_return subtype_key() throws RecognitionException {
        subtype_key_return retval = new subtype_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID12=null;

        Object REGULAR_ID12_tree=null;

        try {
            // main.java.PLSQLKeys.g:389:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:389:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("subtype"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "subtype_key", "input.LT(1).getText().equalsIgnoreCase(\"subtype\")");
            }

            REGULAR_ID12=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_subtype_key2533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID12_tree = 
            (Object)adaptor.create(REGULAR_ID12)
            ;
            adaptor.addChild(root_0, REGULAR_ID12_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subtype_key"


    public static class cursor_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_key"
    // main.java.PLSQLKeys.g:392:1: cursor_key : SQL92_RESERVED_CURSOR ;
    public final cursor_key_return cursor_key() throws RecognitionException {
        cursor_key_return retval = new cursor_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_CURSOR13=null;

        Object SQL92_RESERVED_CURSOR13_tree=null;

        try {
            // main.java.PLSQLKeys.g:393:5: ( SQL92_RESERVED_CURSOR )
            // main.java.PLSQLKeys.g:393:10: SQL92_RESERVED_CURSOR
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_CURSOR13=(Token)match(input,SQL92_RESERVED_CURSOR,FOLLOW_SQL92_RESERVED_CURSOR_in_cursor_key2553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CURSOR13_tree = 
            (Object)adaptor.create(SQL92_RESERVED_CURSOR13)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_CURSOR13_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cursor_key"


    public static class nextval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nextval_key"
    // main.java.PLSQLKeys.g:396:1: nextval_key :{...}? => REGULAR_ID ;
    public final nextval_key_return nextval_key() throws RecognitionException {
        nextval_key_return retval = new nextval_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID14=null;

        Object REGULAR_ID14_tree=null;

        try {
            // main.java.PLSQLKeys.g:397:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:397:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("nextval"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nextval_key", "input.LT(1).getText().equalsIgnoreCase(\"nextval\")");
            }

            REGULAR_ID14=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nextval_key2576); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID14_tree = 
            (Object)adaptor.create(REGULAR_ID14)
            ;
            adaptor.addChild(root_0, REGULAR_ID14_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nextval_key"


    public static class goto_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_key"
    // main.java.PLSQLKeys.g:400:1: goto_key : SQL92_RESERVED_GOTO ;
    public final goto_key_return goto_key() throws RecognitionException {
        goto_key_return retval = new goto_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_GOTO15=null;

        Object SQL92_RESERVED_GOTO15_tree=null;

        try {
            // main.java.PLSQLKeys.g:401:5: ( SQL92_RESERVED_GOTO )
            // main.java.PLSQLKeys.g:401:10: SQL92_RESERVED_GOTO
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_GOTO15=(Token)match(input,SQL92_RESERVED_GOTO,FOLLOW_SQL92_RESERVED_GOTO_in_goto_key2596); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_GOTO15_tree = 
            (Object)adaptor.create(SQL92_RESERVED_GOTO15)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_GOTO15_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_key"


    public static class execute_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "execute_key"
    // main.java.PLSQLKeys.g:404:1: execute_key :{...}? REGULAR_ID -> EXECUTE_VK[$REGULAR_ID] ;
    public final execute_key_return execute_key() throws RecognitionException {
        execute_key_return retval = new execute_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID16=null;

        Object REGULAR_ID16_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:405:5: ({...}? REGULAR_ID -> EXECUTE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:405:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("execute"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "execute_key", "input.LT(1).getText().equalsIgnoreCase(\"execute\")");
            }

            REGULAR_ID16=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_execute_key2618); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID16);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 405:74: -> EXECUTE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(EXECUTE_VK, REGULAR_ID16)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "execute_key"


    public static class immediate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "immediate_key"
    // main.java.PLSQLKeys.g:408:1: immediate_key :{...}? => REGULAR_ID -> IMMEDIATE_VK[$REGULAR_ID] ;
    public final immediate_key_return immediate_key() throws RecognitionException {
        immediate_key_return retval = new immediate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID17=null;

        Object REGULAR_ID17_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:409:5: ({...}? => REGULAR_ID -> IMMEDIATE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:409:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("immediate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "immediate_key", "input.LT(1).getText().equalsIgnoreCase(\"immediate\")");
            }

            REGULAR_ID17=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_immediate_key2646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID17);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 409:78: -> IMMEDIATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(IMMEDIATE_VK, REGULAR_ID17)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "immediate_key"


    public static class return_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_key"
    // main.java.PLSQLKeys.g:412:1: return_key :{...}? REGULAR_ID -> RETURN_VK[$REGULAR_ID] ;
    public final return_key_return return_key() throws RecognitionException {
        return_key_return retval = new return_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID18=null;

        Object REGULAR_ID18_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:413:5: ({...}? REGULAR_ID -> RETURN_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:413:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("return"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "return_key", "input.LT(1).getText().equalsIgnoreCase(\"return\")");
            }

            REGULAR_ID18=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_return_key2673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID18);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:73: -> RETURN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RETURN_VK, REGULAR_ID18)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_key"


    public static class procedure_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "procedure_key"
    // main.java.PLSQLKeys.g:416:1: procedure_key : SQL92_RESERVED_PROCEDURE ;
    public final procedure_key_return procedure_key() throws RecognitionException {
        procedure_key_return retval = new procedure_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_PROCEDURE19=null;

        Object SQL92_RESERVED_PROCEDURE19_tree=null;

        try {
            // main.java.PLSQLKeys.g:417:5: ( SQL92_RESERVED_PROCEDURE )
            // main.java.PLSQLKeys.g:417:10: SQL92_RESERVED_PROCEDURE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_PROCEDURE19=(Token)match(input,SQL92_RESERVED_PROCEDURE,FOLLOW_SQL92_RESERVED_PROCEDURE_in_procedure_key2698); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_PROCEDURE19_tree = 
            (Object)adaptor.create(SQL92_RESERVED_PROCEDURE19)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_PROCEDURE19_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "procedure_key"


    public static class function_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_key"
    // main.java.PLSQLKeys.g:420:1: function_key :{...}? => REGULAR_ID ;
    public final function_key_return function_key() throws RecognitionException {
        function_key_return retval = new function_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID20=null;

        Object REGULAR_ID20_tree=null;

        try {
            // main.java.PLSQLKeys.g:421:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:421:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_key", "input.LT(1).getText().equalsIgnoreCase(\"function\")");
            }

            REGULAR_ID20=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_function_key2721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID20_tree = 
            (Object)adaptor.create(REGULAR_ID20)
            ;
            adaptor.addChild(root_0, REGULAR_ID20_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_key"


    public static class pragma_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pragma_key"
    // main.java.PLSQLKeys.g:424:1: pragma_key :{...}? REGULAR_ID -> PRAGMA_VK[$REGULAR_ID] ;
    public final pragma_key_return pragma_key() throws RecognitionException {
        pragma_key_return retval = new pragma_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID21=null;

        Object REGULAR_ID21_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:425:5: ({...}? REGULAR_ID -> PRAGMA_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:425:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("pragma"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "pragma_key", "input.LT(1).getText().equalsIgnoreCase(\"pragma\")");
            }

            REGULAR_ID21=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_pragma_key2743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID21);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:73: -> PRAGMA_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PRAGMA_VK, REGULAR_ID21)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pragma_key"


    public static class exception_init_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exception_init_key"
    // main.java.PLSQLKeys.g:428:1: exception_init_key :{...}? REGULAR_ID -> EXCEPTION_INIT_VK[$REGULAR_ID] ;
    public final exception_init_key_return exception_init_key() throws RecognitionException {
        exception_init_key_return retval = new exception_init_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID22=null;

        Object REGULAR_ID22_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:429:5: ({...}? REGULAR_ID -> EXCEPTION_INIT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:429:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("exception_init"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exception_init_key", "input.LT(1).getText().equalsIgnoreCase(\"exception_init\")");
            }

            REGULAR_ID22=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_exception_init_key2770); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID22);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:81: -> EXCEPTION_INIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(EXCEPTION_INIT_VK, REGULAR_ID22)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exception_init_key"


    public static class type_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_key"
    // main.java.PLSQLKeys.g:432:1: type_key :{...}? => REGULAR_ID -> TYPE_VK[$REGULAR_ID] ;
    public final type_key_return type_key() throws RecognitionException {
        type_key_return retval = new type_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID23=null;

        Object REGULAR_ID23_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:433:5: ({...}? => REGULAR_ID -> TYPE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:433:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("type"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "type_key", "input.LT(1).getText().equalsIgnoreCase(\"type\")");
            }

            REGULAR_ID23=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_type_key2798); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID23);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:73: -> TYPE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TYPE_VK, REGULAR_ID23)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_key"


    public static class record_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "record_key"
    // main.java.PLSQLKeys.g:436:1: record_key :{...}? => REGULAR_ID ;
    public final record_key_return record_key() throws RecognitionException {
        record_key_return retval = new record_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID24=null;

        Object REGULAR_ID24_tree=null;

        try {
            // main.java.PLSQLKeys.g:437:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:437:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("record"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "record_key", "input.LT(1).getText().equalsIgnoreCase(\"record\")");
            }

            REGULAR_ID24=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_record_key2826); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID24_tree = 
            (Object)adaptor.create(REGULAR_ID24)
            ;
            adaptor.addChild(root_0, REGULAR_ID24_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "record_key"


    public static class indexed_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed_key"
    // main.java.PLSQLKeys.g:440:1: indexed_key :{...}? REGULAR_ID ;
    public final indexed_key_return indexed_key() throws RecognitionException {
        indexed_key_return retval = new indexed_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID25=null;

        Object REGULAR_ID25_tree=null;

        try {
            // main.java.PLSQLKeys.g:441:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:441:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("indexed"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "indexed_key", "input.LT(1).getText().equalsIgnoreCase(\"indexed\")");
            }

            REGULAR_ID25=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_indexed_key2848); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID25_tree = 
            (Object)adaptor.create(REGULAR_ID25)
            ;
            adaptor.addChild(root_0, REGULAR_ID25_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed_key"


    public static class index_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_key"
    // main.java.PLSQLKeys.g:444:1: index_key : PLSQL_RESERVED_INDEX ;
    public final index_key_return index_key() throws RecognitionException {
        index_key_return retval = new index_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_RESERVED_INDEX26=null;

        Object PLSQL_RESERVED_INDEX26_tree=null;

        try {
            // main.java.PLSQLKeys.g:445:5: ( PLSQL_RESERVED_INDEX )
            // main.java.PLSQLKeys.g:445:10: PLSQL_RESERVED_INDEX
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_RESERVED_INDEX26=(Token)match(input,PLSQL_RESERVED_INDEX,FOLLOW_PLSQL_RESERVED_INDEX_in_index_key2868); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_INDEX26_tree = 
            (Object)adaptor.create(PLSQL_RESERVED_INDEX26)
            ;
            adaptor.addChild(root_0, PLSQL_RESERVED_INDEX26_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_key"


    public static class percent_notfound_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "percent_notfound_key"
    // main.java.PLSQLKeys.g:448:1: percent_notfound_key :{...}? => PERCENT REGULAR_ID -> PERCENT_NOTFOUND_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final percent_notfound_key_return percent_notfound_key() throws RecognitionException {
        percent_notfound_key_return retval = new percent_notfound_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERCENT27=null;
        Token REGULAR_ID28=null;

        Object PERCENT27_tree=null;
        Object REGULAR_ID28_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:449:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_NOTFOUND_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // main.java.PLSQLKeys.g:449:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("notfound"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_notfound_key", "input.LT(2).getText().equalsIgnoreCase(\"notfound\")");
            }

            PERCENT27=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_notfound_key2891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT27);


            REGULAR_ID28=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_notfound_key2893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID28);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:85: -> PERCENT_NOTFOUND_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PERCENT_NOTFOUND_VK, REGULAR_ID28, (REGULAR_ID28!=null?REGULAR_ID28.getText():null))
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "percent_notfound_key"


    public static class percent_found_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "percent_found_key"
    // main.java.PLSQLKeys.g:452:1: percent_found_key :{...}? => PERCENT REGULAR_ID -> PERCENT_FOUND_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final percent_found_key_return percent_found_key() throws RecognitionException {
        percent_found_key_return retval = new percent_found_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERCENT29=null;
        Token REGULAR_ID30=null;

        Object PERCENT29_tree=null;
        Object REGULAR_ID30_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:453:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_FOUND_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // main.java.PLSQLKeys.g:453:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("found"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_found_key", "input.LT(2).getText().equalsIgnoreCase(\"found\")");
            }

            PERCENT29=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_found_key2921); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT29);


            REGULAR_ID30=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_found_key2923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID30);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:82: -> PERCENT_FOUND_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PERCENT_FOUND_VK, REGULAR_ID30, (REGULAR_ID30!=null?REGULAR_ID30.getText():null))
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "percent_found_key"


    public static class percent_isopen_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "percent_isopen_key"
    // main.java.PLSQLKeys.g:456:1: percent_isopen_key :{...}? => PERCENT REGULAR_ID -> PERCENT_ISOPEN_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final percent_isopen_key_return percent_isopen_key() throws RecognitionException {
        percent_isopen_key_return retval = new percent_isopen_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERCENT31=null;
        Token REGULAR_ID32=null;

        Object PERCENT31_tree=null;
        Object REGULAR_ID32_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:457:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_ISOPEN_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // main.java.PLSQLKeys.g:457:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("isopen"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_isopen_key", "input.LT(2).getText().equalsIgnoreCase(\"isopen\")");
            }

            PERCENT31=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_isopen_key2951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT31);


            REGULAR_ID32=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_isopen_key2953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID32);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:83: -> PERCENT_ISOPEN_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PERCENT_ISOPEN_VK, REGULAR_ID32, (REGULAR_ID32!=null?REGULAR_ID32.getText():null))
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "percent_isopen_key"


    public static class percent_rowcount_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "percent_rowcount_key"
    // main.java.PLSQLKeys.g:460:1: percent_rowcount_key :{...}? => PERCENT REGULAR_ID -> PERCENT_ROWCOUNT_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final percent_rowcount_key_return percent_rowcount_key() throws RecognitionException {
        percent_rowcount_key_return retval = new percent_rowcount_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERCENT33=null;
        Token REGULAR_ID34=null;

        Object PERCENT33_tree=null;
        Object REGULAR_ID34_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:461:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_ROWCOUNT_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // main.java.PLSQLKeys.g:461:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("rowcount"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_rowcount_key", "input.LT(2).getText().equalsIgnoreCase(\"rowcount\")");
            }

            PERCENT33=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_rowcount_key2981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT33);


            REGULAR_ID34=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_rowcount_key2983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID34);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 461:85: -> PERCENT_ROWCOUNT_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PERCENT_ROWCOUNT_VK, REGULAR_ID34, (REGULAR_ID34!=null?REGULAR_ID34.getText():null))
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "percent_rowcount_key"


    public static class percent_rowtype_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "percent_rowtype_key"
    // main.java.PLSQLKeys.g:464:1: percent_rowtype_key :{...}? => PERCENT REGULAR_ID -> PERCENT_ROWTYPE_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final percent_rowtype_key_return percent_rowtype_key() throws RecognitionException {
        percent_rowtype_key_return retval = new percent_rowtype_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERCENT35=null;
        Token REGULAR_ID36=null;

        Object PERCENT35_tree=null;
        Object REGULAR_ID36_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:465:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_ROWTYPE_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // main.java.PLSQLKeys.g:465:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("rowtype"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_rowtype_key", "input.LT(2).getText().equalsIgnoreCase(\"rowtype\")");
            }

            PERCENT35=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_rowtype_key3011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT35);


            REGULAR_ID36=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_rowtype_key3013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID36);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:84: -> PERCENT_ROWTYPE_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PERCENT_ROWTYPE_VK, REGULAR_ID36, (REGULAR_ID36!=null?REGULAR_ID36.getText():null))
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "percent_rowtype_key"


    public static class percent_type_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "percent_type_key"
    // main.java.PLSQLKeys.g:468:1: percent_type_key :{...}? => PERCENT REGULAR_ID -> PERCENT_TYPE_VK[$REGULAR_ID, $REGULAR_ID.text] ;
    public final percent_type_key_return percent_type_key() throws RecognitionException {
        percent_type_key_return retval = new percent_type_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERCENT37=null;
        Token REGULAR_ID38=null;

        Object PERCENT37_tree=null;
        Object REGULAR_ID38_tree=null;
        RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:469:5: ({...}? => PERCENT REGULAR_ID -> PERCENT_TYPE_VK[$REGULAR_ID, $REGULAR_ID.text] )
            // main.java.PLSQLKeys.g:469:10: {...}? => PERCENT REGULAR_ID
            {
            if ( !((input.LT(2).getText().equalsIgnoreCase("type"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "percent_type_key", "input.LT(2).getText().equalsIgnoreCase(\"type\")");
            }

            PERCENT37=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_percent_type_key3042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PERCENT.add(PERCENT37);


            REGULAR_ID38=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_percent_type_key3044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID38);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:81: -> PERCENT_TYPE_VK[$REGULAR_ID, $REGULAR_ID.text]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PERCENT_TYPE_VK, REGULAR_ID38, (REGULAR_ID38!=null?REGULAR_ID38.getText():null))
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "percent_type_key"


    public static class out_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "out_key"
    // main.java.PLSQLKeys.g:472:1: out_key :{...}? => REGULAR_ID -> OUT_VK[$REGULAR_ID] ;
    public final out_key_return out_key() throws RecognitionException {
        out_key_return retval = new out_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID39=null;

        Object REGULAR_ID39_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:473:5: ({...}? => REGULAR_ID -> OUT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:473:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("out"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "out_key", "input.LT(1).getText().equalsIgnoreCase(\"out\")");
            }

            REGULAR_ID39=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_out_key3072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID39);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:72: -> OUT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(OUT_VK, REGULAR_ID39)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "out_key"


    public static class inout_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inout_key"
    // main.java.PLSQLKeys.g:476:1: inout_key :{...}? REGULAR_ID -> INOUT_VK[$REGULAR_ID] ;
    public final inout_key_return inout_key() throws RecognitionException {
        inout_key_return retval = new inout_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID40=null;

        Object REGULAR_ID40_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:477:5: ({...}? REGULAR_ID -> INOUT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:477:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("inout"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "inout_key", "input.LT(1).getText().equalsIgnoreCase(\"inout\")");
            }

            REGULAR_ID40=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_inout_key3099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID40);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:72: -> INOUT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INOUT_VK, REGULAR_ID40)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inout_key"


    public static class extend_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extend_key"
    // main.java.PLSQLKeys.g:480:1: extend_key :{...}? => REGULAR_ID ;
    public final extend_key_return extend_key() throws RecognitionException {
        extend_key_return retval = new extend_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID41=null;

        Object REGULAR_ID41_tree=null;

        try {
            // main.java.PLSQLKeys.g:481:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:481:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("extend"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extend_key", "input.LT(1).getText().equalsIgnoreCase(\"extend\")");
            }

            REGULAR_ID41=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_extend_key3127); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID41_tree = 
            (Object)adaptor.create(REGULAR_ID41)
            ;
            adaptor.addChild(root_0, REGULAR_ID41_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extend_key"


    public static class raise_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "raise_key"
    // main.java.PLSQLKeys.g:484:1: raise_key :{...}? REGULAR_ID -> RAISE_VK[$REGULAR_ID] ;
    public final raise_key_return raise_key() throws RecognitionException {
        raise_key_return retval = new raise_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID42=null;

        Object REGULAR_ID42_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:485:5: ({...}? REGULAR_ID -> RAISE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:485:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("raise"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "raise_key", "input.LT(1).getText().equalsIgnoreCase(\"raise\")");
            }

            REGULAR_ID42=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_raise_key3149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID42);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 485:72: -> RAISE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RAISE_VK, REGULAR_ID42)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "raise_key"


    public static class while_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_key"
    // main.java.PLSQLKeys.g:488:1: while_key :{...}? REGULAR_ID ;
    public final while_key_return while_key() throws RecognitionException {
        while_key_return retval = new while_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID43=null;

        Object REGULAR_ID43_tree=null;

        try {
            // main.java.PLSQLKeys.g:489:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:489:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("while"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "while_key", "input.LT(1).getText().equalsIgnoreCase(\"while\")");
            }

            REGULAR_ID43=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_while_key3176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID43_tree = 
            (Object)adaptor.create(REGULAR_ID43)
            ;
            adaptor.addChild(root_0, REGULAR_ID43_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_key"


    public static class loop_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "loop_key"
    // main.java.PLSQLKeys.g:492:1: loop_key :{...}? REGULAR_ID -> LOOP_VK[$REGULAR_ID] ;
    public final loop_key_return loop_key() throws RecognitionException {
        loop_key_return retval = new loop_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID44=null;

        Object REGULAR_ID44_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:493:5: ({...}? REGULAR_ID -> LOOP_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:493:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("loop"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "loop_key", "input.LT(1).getText().equalsIgnoreCase(\"loop\")");
            }

            REGULAR_ID44=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_loop_key3198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID44);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 493:71: -> LOOP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LOOP_VK, REGULAR_ID44)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "loop_key"


    public static class commit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "commit_key"
    // main.java.PLSQLKeys.g:496:1: commit_key :{...}? => REGULAR_ID -> COMMIT_VK[$REGULAR_ID] ;
    public final commit_key_return commit_key() throws RecognitionException {
        commit_key_return retval = new commit_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID45=null;

        Object REGULAR_ID45_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:497:5: ({...}? => REGULAR_ID -> COMMIT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:497:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("commit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "commit_key", "input.LT(1).getText().equalsIgnoreCase(\"commit\")");
            }

            REGULAR_ID45=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_commit_key3226); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID45);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 497:75: -> COMMIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(COMMIT_VK, REGULAR_ID45)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "commit_key"


    public static class work_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "work_key"
    // main.java.PLSQLKeys.g:500:1: work_key :{...}? REGULAR_ID -> WORK_VK[$REGULAR_ID] ;
    public final work_key_return work_key() throws RecognitionException {
        work_key_return retval = new work_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID46=null;

        Object REGULAR_ID46_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:500:9: ({...}? REGULAR_ID -> WORK_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:500:14: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("work"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "work_key", "input.LT(1).getText().equalsIgnoreCase(\"work\")");
            }

            REGULAR_ID46=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_work_key3248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID46);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:75: -> WORK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(WORK_VK, REGULAR_ID46)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "work_key"


    public static class if_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_key"
    // main.java.PLSQLKeys.g:503:1: if_key : PLSQL_RESERVED_IF ;
    public final if_key_return if_key() throws RecognitionException {
        if_key_return retval = new if_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_RESERVED_IF47=null;

        Object PLSQL_RESERVED_IF47_tree=null;

        try {
            // main.java.PLSQLKeys.g:504:5: ( PLSQL_RESERVED_IF )
            // main.java.PLSQLKeys.g:504:10: PLSQL_RESERVED_IF
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_RESERVED_IF47=(Token)match(input,PLSQL_RESERVED_IF,FOLLOW_PLSQL_RESERVED_IF_in_if_key3273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_IF47_tree = 
            (Object)adaptor.create(PLSQL_RESERVED_IF47)
            ;
            adaptor.addChild(root_0, PLSQL_RESERVED_IF47_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_key"


    public static class elsif_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "elsif_key"
    // main.java.PLSQLKeys.g:507:1: elsif_key : PLSQL_NON_RESERVED_ELSIF ;
    public final elsif_key_return elsif_key() throws RecognitionException {
        elsif_key_return retval = new elsif_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_NON_RESERVED_ELSIF48=null;

        Object PLSQL_NON_RESERVED_ELSIF48_tree=null;

        try {
            // main.java.PLSQLKeys.g:508:5: ( PLSQL_NON_RESERVED_ELSIF )
            // main.java.PLSQLKeys.g:508:10: PLSQL_NON_RESERVED_ELSIF
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_NON_RESERVED_ELSIF48=(Token)match(input,PLSQL_NON_RESERVED_ELSIF,FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_key3293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_NON_RESERVED_ELSIF48_tree = 
            (Object)adaptor.create(PLSQL_NON_RESERVED_ELSIF48)
            ;
            adaptor.addChild(root_0, PLSQL_NON_RESERVED_ELSIF48_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "elsif_key"


    public static class authid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "authid_key"
    // main.java.PLSQLKeys.g:511:1: authid_key :{...}? => REGULAR_ID -> AUTHID_VK[$REGULAR_ID] ;
    public final authid_key_return authid_key() throws RecognitionException {
        authid_key_return retval = new authid_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID49=null;

        Object REGULAR_ID49_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:512:5: ({...}? => REGULAR_ID -> AUTHID_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:512:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("authid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "authid_key", "input.LT(1).getText().equalsIgnoreCase(\"authid\")");
            }

            REGULAR_ID49=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_authid_key3316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID49);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 512:75: -> AUTHID_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(AUTHID_VK, REGULAR_ID49)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "authid_key"


    public static class definer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "definer_key"
    // main.java.PLSQLKeys.g:515:1: definer_key :{...}? REGULAR_ID -> DEFINER_VK[$REGULAR_ID] ;
    public final definer_key_return definer_key() throws RecognitionException {
        definer_key_return retval = new definer_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID50=null;

        Object REGULAR_ID50_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:516:5: ({...}? REGULAR_ID -> DEFINER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:516:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("definer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "definer_key", "input.LT(1).getText().equalsIgnoreCase(\"definer\")");
            }

            REGULAR_ID50=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_definer_key3343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID50);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 516:74: -> DEFINER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DEFINER_VK, REGULAR_ID50)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "definer_key"


    public static class external_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "external_key"
    // main.java.PLSQLKeys.g:519:1: external_key :{...}? REGULAR_ID -> EXTERNAL_VK[$REGULAR_ID] ;
    public final external_key_return external_key() throws RecognitionException {
        external_key_return retval = new external_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID51=null;

        Object REGULAR_ID51_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:520:5: ({...}? REGULAR_ID -> EXTERNAL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:520:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "external_key", "input.LT(1).getText().equalsIgnoreCase(\"external\")");
            }

            REGULAR_ID51=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_external_key3370); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID51);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:75: -> EXTERNAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(EXTERNAL_VK, REGULAR_ID51)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "external_key"


    public static class language_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "language_key"
    // main.java.PLSQLKeys.g:523:1: language_key :{...}? REGULAR_ID -> LANGUAGE_VK[$REGULAR_ID] ;
    public final language_key_return language_key() throws RecognitionException {
        language_key_return retval = new language_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID52=null;

        Object REGULAR_ID52_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:524:5: ({...}? REGULAR_ID -> LANGUAGE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:524:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "language_key", "input.LT(1).getText().equalsIgnoreCase(\"language\")");
            }

            REGULAR_ID52=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_language_key3397); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID52);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:75: -> LANGUAGE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LANGUAGE_VK, REGULAR_ID52)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "language_key"


    public static class java_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "java_key"
    // main.java.PLSQLKeys.g:527:1: java_key :{...}? REGULAR_ID -> JAVA_VK[$REGULAR_ID] ;
    public final java_key_return java_key() throws RecognitionException {
        java_key_return retval = new java_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID53=null;

        Object REGULAR_ID53_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:528:5: ({...}? REGULAR_ID -> JAVA_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:528:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("java"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "java_key", "input.LT(1).getText().equalsIgnoreCase(\"java\")");
            }

            REGULAR_ID53=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_java_key3424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID53);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:71: -> JAVA_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(JAVA_VK, REGULAR_ID53)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "java_key"


    public static class name_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_key"
    // main.java.PLSQLKeys.g:531:1: name_key :{...}? => REGULAR_ID -> NAME_VK[$REGULAR_ID] ;
    public final name_key_return name_key() throws RecognitionException {
        name_key_return retval = new name_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID54=null;

        Object REGULAR_ID54_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:532:5: ({...}? => REGULAR_ID -> NAME_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:532:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("name"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "name_key", "input.LT(1).getText().equalsIgnoreCase(\"name\")");
            }

            REGULAR_ID54=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_name_key3452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID54);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 532:73: -> NAME_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NAME_VK, REGULAR_ID54)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_key"


    public static class deterministic_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deterministic_key"
    // main.java.PLSQLKeys.g:535:1: deterministic_key :{...}? => REGULAR_ID -> DETERMINISTIC_VK[$REGULAR_ID] ;
    public final deterministic_key_return deterministic_key() throws RecognitionException {
        deterministic_key_return retval = new deterministic_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID55=null;

        Object REGULAR_ID55_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:536:5: ({...}? => REGULAR_ID -> DETERMINISTIC_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:536:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("deterministic"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "deterministic_key", "input.LT(1).getText().equalsIgnoreCase(\"deterministic\")");
            }

            REGULAR_ID55=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_deterministic_key3480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID55);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:82: -> DETERMINISTIC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DETERMINISTIC_VK, REGULAR_ID55)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "deterministic_key"


    public static class parallel_enable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_enable_key"
    // main.java.PLSQLKeys.g:539:1: parallel_enable_key :{...}? => REGULAR_ID -> PARALLEL_ENABLE_VK[$REGULAR_ID] ;
    public final parallel_enable_key_return parallel_enable_key() throws RecognitionException {
        parallel_enable_key_return retval = new parallel_enable_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID56=null;

        Object REGULAR_ID56_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:540:5: ({...}? => REGULAR_ID -> PARALLEL_ENABLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:540:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("parallel_enable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "parallel_enable_key", "input.LT(1).getText().equalsIgnoreCase(\"parallel_enable\")");
            }

            REGULAR_ID56=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_parallel_enable_key3508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID56);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:84: -> PARALLEL_ENABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PARALLEL_ENABLE_VK, REGULAR_ID56)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_enable_key"


    public static class result_cache_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "result_cache_key"
    // main.java.PLSQLKeys.g:543:1: result_cache_key :{...}? => REGULAR_ID -> RESULT_CACHE_VK[$REGULAR_ID] ;
    public final result_cache_key_return result_cache_key() throws RecognitionException {
        result_cache_key_return retval = new result_cache_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID57=null;

        Object REGULAR_ID57_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:544:5: ({...}? => REGULAR_ID -> RESULT_CACHE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:544:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("result_cache"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "result_cache_key", "input.LT(1).getText().equalsIgnoreCase(\"result_cache\")");
            }

            REGULAR_ID57=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_result_cache_key3536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID57);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:81: -> RESULT_CACHE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RESULT_CACHE_VK, REGULAR_ID57)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "result_cache_key"


    public static class pipelined_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pipelined_key"
    // main.java.PLSQLKeys.g:547:1: pipelined_key :{...}? => REGULAR_ID -> PIPELINED_VK[$REGULAR_ID] ;
    public final pipelined_key_return pipelined_key() throws RecognitionException {
        pipelined_key_return retval = new pipelined_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID58=null;

        Object REGULAR_ID58_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:548:5: ({...}? => REGULAR_ID -> PIPELINED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:548:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("pipelined"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "pipelined_key", "input.LT(1).getText().equalsIgnoreCase(\"pipelined\")");
            }

            REGULAR_ID58=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_pipelined_key3564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID58);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 548:78: -> PIPELINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PIPELINED_VK, REGULAR_ID58)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pipelined_key"


    public static class aggregate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "aggregate_key"
    // main.java.PLSQLKeys.g:551:1: aggregate_key :{...}? REGULAR_ID -> AGGREGATE_VK[$REGULAR_ID] ;
    public final aggregate_key_return aggregate_key() throws RecognitionException {
        aggregate_key_return retval = new aggregate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID59=null;

        Object REGULAR_ID59_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:552:5: ({...}? REGULAR_ID -> AGGREGATE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:552:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("aggregate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "aggregate_key", "input.LT(1).getText().equalsIgnoreCase(\"aggregate\")");
            }

            REGULAR_ID59=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_aggregate_key3591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID59);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:76: -> AGGREGATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(AGGREGATE_VK, REGULAR_ID59)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "aggregate_key"


    public static class alter_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "alter_key"
    // main.java.PLSQLKeys.g:555:1: alter_key : SQL92_RESERVED_ALTER ;
    public final alter_key_return alter_key() throws RecognitionException {
        alter_key_return retval = new alter_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_ALTER60=null;

        Object SQL92_RESERVED_ALTER60_tree=null;

        try {
            // main.java.PLSQLKeys.g:556:5: ( SQL92_RESERVED_ALTER )
            // main.java.PLSQLKeys.g:556:10: SQL92_RESERVED_ALTER
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_ALTER60=(Token)match(input,SQL92_RESERVED_ALTER,FOLLOW_SQL92_RESERVED_ALTER_in_alter_key3616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ALTER60_tree = 
            (Object)adaptor.create(SQL92_RESERVED_ALTER60)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_ALTER60_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "alter_key"


    public static class compile_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compile_key"
    // main.java.PLSQLKeys.g:559:1: compile_key :{...}? REGULAR_ID -> COMPILE_VK[$REGULAR_ID] ;
    public final compile_key_return compile_key() throws RecognitionException {
        compile_key_return retval = new compile_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID61=null;

        Object REGULAR_ID61_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:560:5: ({...}? REGULAR_ID -> COMPILE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:560:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("compile"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "compile_key", "input.LT(1).getText().equalsIgnoreCase(\"compile\")");
            }

            REGULAR_ID61=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_compile_key3638); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID61);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:74: -> COMPILE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(COMPILE_VK, REGULAR_ID61)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compile_key"


    public static class debug_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "debug_key"
    // main.java.PLSQLKeys.g:563:1: debug_key :{...}? REGULAR_ID -> DEBUG_VK[$REGULAR_ID] ;
    public final debug_key_return debug_key() throws RecognitionException {
        debug_key_return retval = new debug_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID62=null;

        Object REGULAR_ID62_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:564:5: ({...}? REGULAR_ID -> DEBUG_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:564:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("debug"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "debug_key", "input.LT(1).getText().equalsIgnoreCase(\"debug\")");
            }

            REGULAR_ID62=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_debug_key3666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID62);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:72: -> DEBUG_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DEBUG_VK, REGULAR_ID62)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "debug_key"


    public static class reuse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reuse_key"
    // main.java.PLSQLKeys.g:567:1: reuse_key :{...}? REGULAR_ID -> REUSE_VK[$REGULAR_ID] ;
    public final reuse_key_return reuse_key() throws RecognitionException {
        reuse_key_return retval = new reuse_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID63=null;

        Object REGULAR_ID63_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:568:5: ({...}? REGULAR_ID -> REUSE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:568:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("reuse"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reuse_key", "input.LT(1).getText().equalsIgnoreCase(\"reuse\")");
            }

            REGULAR_ID63=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_reuse_key3693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID63);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 568:72: -> REUSE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(REUSE_VK, REGULAR_ID63)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reuse_key"


    public static class settings_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "settings_key"
    // main.java.PLSQLKeys.g:571:1: settings_key :{...}? REGULAR_ID ;
    public final settings_key_return settings_key() throws RecognitionException {
        settings_key_return retval = new settings_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID64=null;

        Object REGULAR_ID64_tree=null;

        try {
            // main.java.PLSQLKeys.g:572:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:572:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("settings"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "settings_key", "input.LT(1).getText().equalsIgnoreCase(\"settings\")");
            }

            REGULAR_ID64=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_settings_key3720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID64_tree = 
            (Object)adaptor.create(REGULAR_ID64)
            ;
            adaptor.addChild(root_0, REGULAR_ID64_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "settings_key"


    public static class specification_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "specification_key"
    // main.java.PLSQLKeys.g:575:1: specification_key :{...}? REGULAR_ID -> SPECIFICATION_VK[$REGULAR_ID] ;
    public final specification_key_return specification_key() throws RecognitionException {
        specification_key_return retval = new specification_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID65=null;

        Object REGULAR_ID65_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:576:5: ({...}? REGULAR_ID -> SPECIFICATION_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:576:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("specification"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "specification_key", "input.LT(1).getText().equalsIgnoreCase(\"specification\")");
            }

            REGULAR_ID65=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_specification_key3742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID65);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:80: -> SPECIFICATION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SPECIFICATION_VK, REGULAR_ID65)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "specification_key"


    public static class drop_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "drop_key"
    // main.java.PLSQLKeys.g:579:1: drop_key : SQL92_RESERVED_DROP ;
    public final drop_key_return drop_key() throws RecognitionException {
        drop_key_return retval = new drop_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_DROP66=null;

        Object SQL92_RESERVED_DROP66_tree=null;

        try {
            // main.java.PLSQLKeys.g:580:5: ( SQL92_RESERVED_DROP )
            // main.java.PLSQLKeys.g:580:10: SQL92_RESERVED_DROP
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_DROP66=(Token)match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_drop_key3767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DROP66_tree = 
            (Object)adaptor.create(SQL92_RESERVED_DROP66)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_DROP66_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "drop_key"


    public static class trigger_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "trigger_key"
    // main.java.PLSQLKeys.g:583:1: trigger_key :{...}? => REGULAR_ID ;
    public final trigger_key_return trigger_key() throws RecognitionException {
        trigger_key_return retval = new trigger_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID67=null;

        Object REGULAR_ID67_tree=null;

        try {
            // main.java.PLSQLKeys.g:584:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:584:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("trigger"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "trigger_key", "input.LT(1).getText().equalsIgnoreCase(\"trigger\")");
            }

            REGULAR_ID67=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_trigger_key3790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID67_tree = 
            (Object)adaptor.create(REGULAR_ID67)
            ;
            adaptor.addChild(root_0, REGULAR_ID67_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "trigger_key"


    public static class force_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "force_key"
    // main.java.PLSQLKeys.g:587:1: force_key :{...}? => REGULAR_ID -> FORCE_VK[$REGULAR_ID] ;
    public final force_key_return force_key() throws RecognitionException {
        force_key_return retval = new force_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID68=null;

        Object REGULAR_ID68_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:588:5: ({...}? => REGULAR_ID -> FORCE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:588:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("force"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "force_key", "input.LT(1).getText().equalsIgnoreCase(\"force\")");
            }

            REGULAR_ID68=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_force_key3813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID68);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 588:74: -> FORCE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FORCE_VK, REGULAR_ID68)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "force_key"


    public static class validate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "validate_key"
    // main.java.PLSQLKeys.g:591:1: validate_key :{...}? REGULAR_ID -> VALIDATE_VK[$REGULAR_ID] ;
    public final validate_key_return validate_key() throws RecognitionException {
        validate_key_return retval = new validate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID69=null;

        Object REGULAR_ID69_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:592:5: ({...}? REGULAR_ID -> VALIDATE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:592:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("validate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "validate_key", "input.LT(1).getText().equalsIgnoreCase(\"validate\")");
            }

            REGULAR_ID69=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_validate_key3840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID69);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 592:75: -> VALIDATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(VALIDATE_VK, REGULAR_ID69)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "validate_key"


    public static class ref_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ref_key"
    // main.java.PLSQLKeys.g:595:1: ref_key :{...}? => REGULAR_ID -> REF_VK[$REGULAR_ID] ;
    public final ref_key_return ref_key() throws RecognitionException {
        ref_key_return retval = new ref_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID70=null;

        Object REGULAR_ID70_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:596:5: ({...}? => REGULAR_ID -> REF_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:596:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("ref"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ref_key", "input.LT(1).getText().equalsIgnoreCase(\"ref\")");
            }

            REGULAR_ID70=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ref_key3868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID70);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 596:72: -> REF_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(REF_VK, REGULAR_ID70)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ref_key"


    public static class array_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_key"
    // main.java.PLSQLKeys.g:599:1: array_key :{...}? => REGULAR_ID ;
    public final array_key_return array_key() throws RecognitionException {
        array_key_return retval = new array_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID71=null;

        Object REGULAR_ID71_tree=null;

        try {
            // main.java.PLSQLKeys.g:600:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:600:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("array"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "array_key", "input.LT(1).getText().equalsIgnoreCase(\"array\")");
            }

            REGULAR_ID71=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_array_key3896); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID71_tree = 
            (Object)adaptor.create(REGULAR_ID71)
            ;
            adaptor.addChild(root_0, REGULAR_ID71_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_key"


    public static class varray_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varray_key"
    // main.java.PLSQLKeys.g:603:1: varray_key :{...}? => REGULAR_ID ;
    public final varray_key_return varray_key() throws RecognitionException {
        varray_key_return retval = new varray_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID72=null;

        Object REGULAR_ID72_tree=null;

        try {
            // main.java.PLSQLKeys.g:604:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:604:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("varray"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "varray_key", "input.LT(1).getText().equalsIgnoreCase(\"varray\")");
            }

            REGULAR_ID72=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_varray_key3919); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID72_tree = 
            (Object)adaptor.create(REGULAR_ID72)
            ;
            adaptor.addChild(root_0, REGULAR_ID72_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varray_key"


    public static class pls_integer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pls_integer_key"
    // main.java.PLSQLKeys.g:607:1: pls_integer_key :{...}? => REGULAR_ID -> PLS_INTEGER_VK[$REGULAR_ID] ;
    public final pls_integer_key_return pls_integer_key() throws RecognitionException {
        pls_integer_key_return retval = new pls_integer_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID73=null;

        Object REGULAR_ID73_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:608:5: ({...}? => REGULAR_ID -> PLS_INTEGER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:608:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("pls_integer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "pls_integer_key", "input.LT(1).getText().equalsIgnoreCase(\"pls_integer\")");
            }

            REGULAR_ID73=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_pls_integer_key3942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID73);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:80: -> PLS_INTEGER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PLS_INTEGER_VK, REGULAR_ID73)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pls_integer_key"


    public static class serially_reusable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "serially_reusable_key"
    // main.java.PLSQLKeys.g:611:1: serially_reusable_key :{...}? => REGULAR_ID -> SERIALLY_REUSABLE_VK[$REGULAR_ID] ;
    public final serially_reusable_key_return serially_reusable_key() throws RecognitionException {
        serially_reusable_key_return retval = new serially_reusable_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID74=null;

        Object REGULAR_ID74_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:612:5: ({...}? => REGULAR_ID -> SERIALLY_REUSABLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:612:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("serially_reusable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "serially_reusable_key", "input.LT(1).getText().equalsIgnoreCase(\"serially_reusable\")");
            }

            REGULAR_ID74=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_serially_reusable_key3970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID74);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 612:86: -> SERIALLY_REUSABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SERIALLY_REUSABLE_VK, REGULAR_ID74)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "serially_reusable_key"


    public static class autonomous_transaction_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "autonomous_transaction_key"
    // main.java.PLSQLKeys.g:615:1: autonomous_transaction_key :{...}? => REGULAR_ID -> AUTONOMOUS_TRANSACTION_VK[$REGULAR_ID] ;
    public final autonomous_transaction_key_return autonomous_transaction_key() throws RecognitionException {
        autonomous_transaction_key_return retval = new autonomous_transaction_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID75=null;

        Object REGULAR_ID75_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:616:5: ({...}? => REGULAR_ID -> AUTONOMOUS_TRANSACTION_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:616:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("autonomous_transaction"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "autonomous_transaction_key", "input.LT(1).getText().equalsIgnoreCase(\"autonomous_transaction\")");
            }

            REGULAR_ID75=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_autonomous_transaction_key3998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID75);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 616:91: -> AUTONOMOUS_TRANSACTION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(AUTONOMOUS_TRANSACTION_VK, REGULAR_ID75)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "autonomous_transaction_key"


    public static class inline_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_key"
    // main.java.PLSQLKeys.g:619:1: inline_key :{...}? => REGULAR_ID -> INLINE_VK[$REGULAR_ID] ;
    public final inline_key_return inline_key() throws RecognitionException {
        inline_key_return retval = new inline_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID76=null;

        Object REGULAR_ID76_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:620:5: ({...}? => REGULAR_ID -> INLINE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:620:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("inline"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "inline_key", "input.LT(1).getText().equalsIgnoreCase(\"inline\")");
            }

            REGULAR_ID76=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_inline_key4026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID76);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 620:75: -> INLINE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INLINE_VK, REGULAR_ID76)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_key"


    public static class restrict_references_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "restrict_references_key"
    // main.java.PLSQLKeys.g:623:1: restrict_references_key :{...}? => REGULAR_ID -> RESTRICT_REFERENCES_VK[$REGULAR_ID] ;
    public final restrict_references_key_return restrict_references_key() throws RecognitionException {
        restrict_references_key_return retval = new restrict_references_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID77=null;

        Object REGULAR_ID77_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:624:5: ({...}? => REGULAR_ID -> RESTRICT_REFERENCES_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:624:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("restrict_references"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "restrict_references_key", "input.LT(1).getText().equalsIgnoreCase(\"restrict_references\")");
            }

            REGULAR_ID77=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_restrict_references_key4054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID77);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 624:88: -> RESTRICT_REFERENCES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RESTRICT_REFERENCES_VK, REGULAR_ID77)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "restrict_references_key"


    public static class exceptions_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exceptions_key"
    // main.java.PLSQLKeys.g:627:1: exceptions_key :{...}? => REGULAR_ID -> EXCEPTIONS_VK[$REGULAR_ID] ;
    public final exceptions_key_return exceptions_key() throws RecognitionException {
        exceptions_key_return retval = new exceptions_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID78=null;

        Object REGULAR_ID78_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:628:5: ({...}? => REGULAR_ID -> EXCEPTIONS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:628:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("exceptions"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exceptions_key", "input.LT(1).getText().equalsIgnoreCase(\"exceptions\")");
            }

            REGULAR_ID78=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_exceptions_key4082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID78);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 628:79: -> EXCEPTIONS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(EXCEPTIONS_VK, REGULAR_ID78)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exceptions_key"


    public static class save_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "save_key"
    // main.java.PLSQLKeys.g:631:1: save_key :{...}? => REGULAR_ID ;
    public final save_key_return save_key() throws RecognitionException {
        save_key_return retval = new save_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID79=null;

        Object REGULAR_ID79_tree=null;

        try {
            // main.java.PLSQLKeys.g:632:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:632:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("save"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "save_key", "input.LT(1).getText().equalsIgnoreCase(\"save\")");
            }

            REGULAR_ID79=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_save_key4111); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID79_tree = 
            (Object)adaptor.create(REGULAR_ID79)
            ;
            adaptor.addChild(root_0, REGULAR_ID79_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "save_key"


    public static class forall_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forall_key"
    // main.java.PLSQLKeys.g:635:1: forall_key :{...}? => REGULAR_ID -> FORALL_VK[$REGULAR_ID] ;
    public final forall_key_return forall_key() throws RecognitionException {
        forall_key_return retval = new forall_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID80=null;

        Object REGULAR_ID80_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:636:5: ({...}? => REGULAR_ID -> FORALL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:636:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("forall"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "forall_key", "input.LT(1).getText().equalsIgnoreCase(\"forall\")");
            }

            REGULAR_ID80=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_forall_key4134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID80);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 636:75: -> FORALL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FORALL_VK, REGULAR_ID80)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forall_key"


    public static class continue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_key"
    // main.java.PLSQLKeys.g:639:1: continue_key :{...}? => REGULAR_ID -> CONTINUE_VK[$REGULAR_ID] ;
    public final continue_key_return continue_key() throws RecognitionException {
        continue_key_return retval = new continue_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID81=null;

        Object REGULAR_ID81_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:640:5: ({...}? => REGULAR_ID -> CONTINUE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:640:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("continue"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "continue_key", "input.LT(1).getText().equalsIgnoreCase(\"continue\")");
            }

            REGULAR_ID81=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_continue_key4162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID81);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 640:77: -> CONTINUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CONTINUE_VK, REGULAR_ID81)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_key"


    public static class indices_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indices_key"
    // main.java.PLSQLKeys.g:643:1: indices_key :{...}? => REGULAR_ID ;
    public final indices_key_return indices_key() throws RecognitionException {
        indices_key_return retval = new indices_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID82=null;

        Object REGULAR_ID82_tree=null;

        try {
            // main.java.PLSQLKeys.g:644:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:644:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("indices"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "indices_key", "input.LT(1).getText().equalsIgnoreCase(\"indices\")");
            }

            REGULAR_ID82=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_indices_key4190); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID82_tree = 
            (Object)adaptor.create(REGULAR_ID82)
            ;
            adaptor.addChild(root_0, REGULAR_ID82_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indices_key"


    public static class values_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "values_key"
    // main.java.PLSQLKeys.g:647:1: values_key : SQL92_RESERVED_VALUES ;
    public final values_key_return values_key() throws RecognitionException {
        values_key_return retval = new values_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_VALUES83=null;

        Object SQL92_RESERVED_VALUES83_tree=null;

        try {
            // main.java.PLSQLKeys.g:648:5: ( SQL92_RESERVED_VALUES )
            // main.java.PLSQLKeys.g:648:10: SQL92_RESERVED_VALUES
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_VALUES83=(Token)match(input,SQL92_RESERVED_VALUES,FOLLOW_SQL92_RESERVED_VALUES_in_values_key4210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_VALUES83_tree = 
            (Object)adaptor.create(SQL92_RESERVED_VALUES83)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_VALUES83_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "values_key"


    public static class case_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_key"
    // main.java.PLSQLKeys.g:651:1: case_key : SQL92_RESERVED_CASE ;
    public final case_key_return case_key() throws RecognitionException {
        case_key_return retval = new case_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_CASE84=null;

        Object SQL92_RESERVED_CASE84_tree=null;

        try {
            // main.java.PLSQLKeys.g:652:5: ( SQL92_RESERVED_CASE )
            // main.java.PLSQLKeys.g:652:10: SQL92_RESERVED_CASE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_CASE84=(Token)match(input,SQL92_RESERVED_CASE,FOLLOW_SQL92_RESERVED_CASE_in_case_key4230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CASE84_tree = 
            (Object)adaptor.create(SQL92_RESERVED_CASE84)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_CASE84_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_key"


    public static class bulk_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bulk_key"
    // main.java.PLSQLKeys.g:655:1: bulk_key :{...}? => REGULAR_ID -> BULK_VK[$REGULAR_ID] ;
    public final bulk_key_return bulk_key() throws RecognitionException {
        bulk_key_return retval = new bulk_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID85=null;

        Object REGULAR_ID85_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:656:5: ({...}? => REGULAR_ID -> BULK_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:656:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("bulk"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "bulk_key", "input.LT(1).getText().equalsIgnoreCase(\"bulk\")");
            }

            REGULAR_ID85=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_bulk_key4253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID85);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 656:73: -> BULK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BULK_VK, REGULAR_ID85)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bulk_key"


    public static class collect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "collect_key"
    // main.java.PLSQLKeys.g:659:1: collect_key :{...}? => REGULAR_ID -> COLLECT_VK[$REGULAR_ID] ;
    public final collect_key_return collect_key() throws RecognitionException {
        collect_key_return retval = new collect_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID86=null;

        Object REGULAR_ID86_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:660:5: ({...}? => REGULAR_ID -> COLLECT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:660:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("collect"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "collect_key", "input.LT(1).getText().equalsIgnoreCase(\"collect\")");
            }

            REGULAR_ID86=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_collect_key4281); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID86);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 660:76: -> COLLECT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(COLLECT_VK, REGULAR_ID86)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "collect_key"


    public static class committed_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "committed_key"
    // main.java.PLSQLKeys.g:663:1: committed_key :{...}? REGULAR_ID -> COMMITTED_VK[$REGULAR_ID] ;
    public final committed_key_return committed_key() throws RecognitionException {
        committed_key_return retval = new committed_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID87=null;

        Object REGULAR_ID87_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:664:5: ({...}? REGULAR_ID -> COMMITTED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:664:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("committed"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "committed_key", "input.LT(1).getText().equalsIgnoreCase(\"committed\")");
            }

            REGULAR_ID87=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_committed_key4308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID87);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 664:76: -> COMMITTED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(COMMITTED_VK, REGULAR_ID87)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "committed_key"


    public static class use_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "use_key"
    // main.java.PLSQLKeys.g:667:1: use_key :{...}? => REGULAR_ID ;
    public final use_key_return use_key() throws RecognitionException {
        use_key_return retval = new use_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID88=null;

        Object REGULAR_ID88_tree=null;

        try {
            // main.java.PLSQLKeys.g:668:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:668:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("use"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "use_key", "input.LT(1).getText().equalsIgnoreCase(\"use\")");
            }

            REGULAR_ID88=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_use_key4336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID88_tree = 
            (Object)adaptor.create(REGULAR_ID88)
            ;
            adaptor.addChild(root_0, REGULAR_ID88_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "use_key"


    public static class level_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "level_key"
    // main.java.PLSQLKeys.g:671:1: level_key :{...}? REGULAR_ID ;
    public final level_key_return level_key() throws RecognitionException {
        level_key_return retval = new level_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID89=null;

        Object REGULAR_ID89_tree=null;

        try {
            // main.java.PLSQLKeys.g:672:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:672:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("level"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "level_key", "input.LT(1).getText().equalsIgnoreCase(\"level\")");
            }

            REGULAR_ID89=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_level_key4358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID89_tree = 
            (Object)adaptor.create(REGULAR_ID89)
            ;
            adaptor.addChild(root_0, REGULAR_ID89_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "level_key"


    public static class isolation_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "isolation_key"
    // main.java.PLSQLKeys.g:675:1: isolation_key :{...}? => REGULAR_ID -> ISOLATION_VK[$REGULAR_ID] ;
    public final isolation_key_return isolation_key() throws RecognitionException {
        isolation_key_return retval = new isolation_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID90=null;

        Object REGULAR_ID90_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:676:5: ({...}? => REGULAR_ID -> ISOLATION_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:676:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("isolation"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "isolation_key", "input.LT(1).getText().equalsIgnoreCase(\"isolation\")");
            }

            REGULAR_ID90=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_isolation_key4381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID90);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 676:78: -> ISOLATION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ISOLATION_VK, REGULAR_ID90)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "isolation_key"


    public static class serializable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "serializable_key"
    // main.java.PLSQLKeys.g:679:1: serializable_key :{...}? REGULAR_ID -> SERIALIZABLE_VK[$REGULAR_ID] ;
    public final serializable_key_return serializable_key() throws RecognitionException {
        serializable_key_return retval = new serializable_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID91=null;

        Object REGULAR_ID91_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:680:5: ({...}? REGULAR_ID -> SERIALIZABLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:680:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("serializable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "serializable_key", "input.LT(1).getText().equalsIgnoreCase(\"serializable\")");
            }

            REGULAR_ID91=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_serializable_key4408); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID91);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 680:79: -> SERIALIZABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SERIALIZABLE_VK, REGULAR_ID91)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "serializable_key"


    public static class segment_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "segment_key"
    // main.java.PLSQLKeys.g:683:1: segment_key :{...}? REGULAR_ID ;
    public final segment_key_return segment_key() throws RecognitionException {
        segment_key_return retval = new segment_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID92=null;

        Object REGULAR_ID92_tree=null;

        try {
            // main.java.PLSQLKeys.g:684:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:684:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("segment"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "segment_key", "input.LT(1).getText().equalsIgnoreCase(\"segment\")");
            }

            REGULAR_ID92=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_segment_key4435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID92_tree = 
            (Object)adaptor.create(REGULAR_ID92)
            ;
            adaptor.addChild(root_0, REGULAR_ID92_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "segment_key"


    public static class write_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "write_key"
    // main.java.PLSQLKeys.g:687:1: write_key :{...}? => REGULAR_ID -> WRITE_VK[$REGULAR_ID] ;
    public final write_key_return write_key() throws RecognitionException {
        write_key_return retval = new write_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID93=null;

        Object REGULAR_ID93_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:688:5: ({...}? => REGULAR_ID -> WRITE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:688:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("write"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "write_key", "input.LT(1).getText().equalsIgnoreCase(\"write\")");
            }

            REGULAR_ID93=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_write_key4458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID93);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 688:74: -> WRITE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(WRITE_VK, REGULAR_ID93)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "write_key"


    public static class wait_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "wait_key"
    // main.java.PLSQLKeys.g:691:1: wait_key :{...}? => REGULAR_ID -> WAIT_VK[$REGULAR_ID] ;
    public final wait_key_return wait_key() throws RecognitionException {
        wait_key_return retval = new wait_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID94=null;

        Object REGULAR_ID94_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:692:5: ({...}? => REGULAR_ID -> WAIT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:692:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("wait"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "wait_key", "input.LT(1).getText().equalsIgnoreCase(\"wait\")");
            }

            REGULAR_ID94=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_wait_key4486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID94);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 692:73: -> WAIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(WAIT_VK, REGULAR_ID94)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "wait_key"


    public static class corrupt_xid_all_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "corrupt_xid_all_key"
    // main.java.PLSQLKeys.g:695:1: corrupt_xid_all_key :{...}? => REGULAR_ID -> CORRUPT_XID_ALL_VK[$REGULAR_ID] ;
    public final corrupt_xid_all_key_return corrupt_xid_all_key() throws RecognitionException {
        corrupt_xid_all_key_return retval = new corrupt_xid_all_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID95=null;

        Object REGULAR_ID95_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:696:5: ({...}? => REGULAR_ID -> CORRUPT_XID_ALL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:696:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("corrupt_xid_all"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "corrupt_xid_all_key", "input.LT(1).getText().equalsIgnoreCase(\"corrupt_xid_all\")");
            }

            REGULAR_ID95=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_corrupt_xid_all_key4514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID95);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 696:84: -> CORRUPT_XID_ALL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CORRUPT_XID_ALL_VK, REGULAR_ID95)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "corrupt_xid_all_key"


    public static class corrupt_xid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "corrupt_xid_key"
    // main.java.PLSQLKeys.g:699:1: corrupt_xid_key :{...}? => REGULAR_ID -> CORRUPT_XID_VK[$REGULAR_ID] ;
    public final corrupt_xid_key_return corrupt_xid_key() throws RecognitionException {
        corrupt_xid_key_return retval = new corrupt_xid_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID96=null;

        Object REGULAR_ID96_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:700:5: ({...}? => REGULAR_ID -> CORRUPT_XID_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:700:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("corrupt_xid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "corrupt_xid_key", "input.LT(1).getText().equalsIgnoreCase(\"corrupt_xid\")");
            }

            REGULAR_ID96=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_corrupt_xid_key4542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID96);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 700:80: -> CORRUPT_XID_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CORRUPT_XID_VK, REGULAR_ID96)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "corrupt_xid_key"


    public static class batch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "batch_key"
    // main.java.PLSQLKeys.g:703:1: batch_key :{...}? => REGULAR_ID -> BATCH_VK[$REGULAR_ID] ;
    public final batch_key_return batch_key() throws RecognitionException {
        batch_key_return retval = new batch_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID97=null;

        Object REGULAR_ID97_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:704:5: ({...}? => REGULAR_ID -> BATCH_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:704:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("batch"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "batch_key", "input.LT(1).getText().equalsIgnoreCase(\"batch\")");
            }

            REGULAR_ID97=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_batch_key4570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID97);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 704:74: -> BATCH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BATCH_VK, REGULAR_ID97)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "batch_key"


    public static class session_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "session_key"
    // main.java.PLSQLKeys.g:707:1: session_key :{...}? => REGULAR_ID ;
    public final session_key_return session_key() throws RecognitionException {
        session_key_return retval = new session_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID98=null;

        Object REGULAR_ID98_tree=null;

        try {
            // main.java.PLSQLKeys.g:708:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:708:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("session"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "session_key", "input.LT(1).getText().equalsIgnoreCase(\"session\")");
            }

            REGULAR_ID98=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_session_key4598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID98_tree = 
            (Object)adaptor.create(REGULAR_ID98)
            ;
            adaptor.addChild(root_0, REGULAR_ID98_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "session_key"


    public static class role_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "role_key"
    // main.java.PLSQLKeys.g:711:1: role_key :{...}? => REGULAR_ID ;
    public final role_key_return role_key() throws RecognitionException {
        role_key_return retval = new role_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID99=null;

        Object REGULAR_ID99_tree=null;

        try {
            // main.java.PLSQLKeys.g:712:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:712:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("role"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "role_key", "input.LT(1).getText().equalsIgnoreCase(\"role\")");
            }

            REGULAR_ID99=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_role_key4621); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID99_tree = 
            (Object)adaptor.create(REGULAR_ID99)
            ;
            adaptor.addChild(root_0, REGULAR_ID99_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "role_key"


    public static class constraint_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constraint_key"
    // main.java.PLSQLKeys.g:715:1: constraint_key :{...}? => REGULAR_ID ;
    public final constraint_key_return constraint_key() throws RecognitionException {
        constraint_key_return retval = new constraint_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID100=null;

        Object REGULAR_ID100_tree=null;

        try {
            // main.java.PLSQLKeys.g:716:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:716:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("constraint"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "constraint_key", "input.LT(1).getText().equalsIgnoreCase(\"constraint\")");
            }

            REGULAR_ID100=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_constraint_key4644); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID100_tree = 
            (Object)adaptor.create(REGULAR_ID100)
            ;
            adaptor.addChild(root_0, REGULAR_ID100_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constraint_key"


    public static class constraints_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constraints_key"
    // main.java.PLSQLKeys.g:719:1: constraints_key :{...}? => REGULAR_ID ;
    public final constraints_key_return constraints_key() throws RecognitionException {
        constraints_key_return retval = new constraints_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID101=null;

        Object REGULAR_ID101_tree=null;

        try {
            // main.java.PLSQLKeys.g:720:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:720:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("constraints"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "constraints_key", "input.LT(1).getText().equalsIgnoreCase(\"constraints\")");
            }

            REGULAR_ID101=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_constraints_key4667); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID101_tree = 
            (Object)adaptor.create(REGULAR_ID101)
            ;
            adaptor.addChild(root_0, REGULAR_ID101_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constraints_key"


    public static class call_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "call_key"
    // main.java.PLSQLKeys.g:723:1: call_key :{...}? => REGULAR_ID -> CALL_VK[$REGULAR_ID] ;
    public final call_key_return call_key() throws RecognitionException {
        call_key_return retval = new call_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID102=null;

        Object REGULAR_ID102_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:724:5: ({...}? => REGULAR_ID -> CALL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:724:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("call"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "call_key", "input.LT(1).getText().equalsIgnoreCase(\"call\")");
            }

            REGULAR_ID102=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_call_key4690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID102);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 724:73: -> CALL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CALL_VK, REGULAR_ID102)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "call_key"


    public static class explain_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explain_key"
    // main.java.PLSQLKeys.g:727:1: explain_key :{...}? => REGULAR_ID ;
    public final explain_key_return explain_key() throws RecognitionException {
        explain_key_return retval = new explain_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID103=null;

        Object REGULAR_ID103_tree=null;

        try {
            // main.java.PLSQLKeys.g:728:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:728:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("explain"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "explain_key", "input.LT(1).getText().equalsIgnoreCase(\"explain\")");
            }

            REGULAR_ID103=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_explain_key4718); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID103_tree = 
            (Object)adaptor.create(REGULAR_ID103)
            ;
            adaptor.addChild(root_0, REGULAR_ID103_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explain_key"


    public static class merge_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "merge_key"
    // main.java.PLSQLKeys.g:731:1: merge_key :{...}? => REGULAR_ID -> MERGE_VK[$REGULAR_ID] ;
    public final merge_key_return merge_key() throws RecognitionException {
        merge_key_return retval = new merge_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID104=null;

        Object REGULAR_ID104_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:732:5: ({...}? => REGULAR_ID -> MERGE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:732:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("merge"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "merge_key", "input.LT(1).getText().equalsIgnoreCase(\"merge\")");
            }

            REGULAR_ID104=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_merge_key4741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID104);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 732:74: -> MERGE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(MERGE_VK, REGULAR_ID104)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "merge_key"


    public static class plan_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "plan_key"
    // main.java.PLSQLKeys.g:735:1: plan_key :{...}? => REGULAR_ID ;
    public final plan_key_return plan_key() throws RecognitionException {
        plan_key_return retval = new plan_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID105=null;

        Object REGULAR_ID105_tree=null;

        try {
            // main.java.PLSQLKeys.g:736:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:736:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("plan"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "plan_key", "input.LT(1).getText().equalsIgnoreCase(\"plan\")");
            }

            REGULAR_ID105=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_plan_key4769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID105_tree = 
            (Object)adaptor.create(REGULAR_ID105)
            ;
            adaptor.addChild(root_0, REGULAR_ID105_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "plan_key"


    public static class system_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "system_key"
    // main.java.PLSQLKeys.g:739:1: system_key :{...}? => REGULAR_ID ;
    public final system_key_return system_key() throws RecognitionException {
        system_key_return retval = new system_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID106=null;

        Object REGULAR_ID106_tree=null;

        try {
            // main.java.PLSQLKeys.g:740:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:740:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("system"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "system_key", "input.LT(1).getText().equalsIgnoreCase(\"system\")");
            }

            REGULAR_ID106=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_system_key4792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID106_tree = 
            (Object)adaptor.create(REGULAR_ID106)
            ;
            adaptor.addChild(root_0, REGULAR_ID106_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "system_key"


    public static class subpartition_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subpartition_key"
    // main.java.PLSQLKeys.g:743:1: subpartition_key :{...}? => REGULAR_ID -> SUBPARTITION_VK[$REGULAR_ID] ;
    public final subpartition_key_return subpartition_key() throws RecognitionException {
        subpartition_key_return retval = new subpartition_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID107=null;

        Object REGULAR_ID107_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:744:5: ({...}? => REGULAR_ID -> SUBPARTITION_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:744:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("subpartition"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "subpartition_key", "input.LT(1).getText().equalsIgnoreCase(\"subpartition\")");
            }

            REGULAR_ID107=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_subpartition_key4815); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID107);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 744:81: -> SUBPARTITION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SUBPARTITION_VK, REGULAR_ID107)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subpartition_key"


    public static class partition_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partition_key"
    // main.java.PLSQLKeys.g:747:1: partition_key :{...}? => REGULAR_ID -> PARTITION_VK[$REGULAR_ID] ;
    public final partition_key_return partition_key() throws RecognitionException {
        partition_key_return retval = new partition_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID108=null;

        Object REGULAR_ID108_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:748:5: ({...}? => REGULAR_ID -> PARTITION_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:748:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("partition"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "partition_key", "input.LT(1).getText().equalsIgnoreCase(\"partition\")");
            }

            REGULAR_ID108=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_partition_key4843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID108);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 748:78: -> PARTITION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PARTITION_VK, REGULAR_ID108)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partition_key"


    public static class matched_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "matched_key"
    // main.java.PLSQLKeys.g:751:1: matched_key :{...}? => REGULAR_ID ;
    public final matched_key_return matched_key() throws RecognitionException {
        matched_key_return retval = new matched_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID109=null;

        Object REGULAR_ID109_tree=null;

        try {
            // main.java.PLSQLKeys.g:752:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:752:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("matched"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "matched_key", "input.LT(1).getText().equalsIgnoreCase(\"matched\")");
            }

            REGULAR_ID109=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_matched_key4871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID109_tree = 
            (Object)adaptor.create(REGULAR_ID109)
            ;
            adaptor.addChild(root_0, REGULAR_ID109_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "matched_key"


    public static class reject_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reject_key"
    // main.java.PLSQLKeys.g:755:1: reject_key :{...}? => REGULAR_ID -> REJECT_VK[$REGULAR_ID] ;
    public final reject_key_return reject_key() throws RecognitionException {
        reject_key_return retval = new reject_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID110=null;

        Object REGULAR_ID110_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:756:5: ({...}? => REGULAR_ID -> REJECT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:756:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("reject"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reject_key", "input.LT(1).getText().equalsIgnoreCase(\"reject\")");
            }

            REGULAR_ID110=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_reject_key4894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID110);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 756:75: -> REJECT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(REJECT_VK, REGULAR_ID110)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reject_key"


    public static class log_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "log_key"
    // main.java.PLSQLKeys.g:759:1: log_key :{...}? => REGULAR_ID -> LOG_VK[$REGULAR_ID] ;
    public final log_key_return log_key() throws RecognitionException {
        log_key_return retval = new log_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID111=null;

        Object REGULAR_ID111_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:760:5: ({...}? => REGULAR_ID -> LOG_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:760:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("log"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "log_key", "input.LT(1).getText().equalsIgnoreCase(\"log\")");
            }

            REGULAR_ID111=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_log_key4922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID111);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 760:72: -> LOG_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LOG_VK, REGULAR_ID111)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "log_key"


    public static class unlimited_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unlimited_key"
    // main.java.PLSQLKeys.g:763:1: unlimited_key :{...}? => REGULAR_ID -> UNLIMITED_VK[$REGULAR_ID] ;
    public final unlimited_key_return unlimited_key() throws RecognitionException {
        unlimited_key_return retval = new unlimited_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID112=null;

        Object REGULAR_ID112_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:764:5: ({...}? => REGULAR_ID -> UNLIMITED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:764:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("unlimited"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "unlimited_key", "input.LT(1).getText().equalsIgnoreCase(\"unlimited\")");
            }

            REGULAR_ID112=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_unlimited_key4950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID112);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 764:78: -> UNLIMITED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(UNLIMITED_VK, REGULAR_ID112)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unlimited_key"


    public static class limit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "limit_key"
    // main.java.PLSQLKeys.g:767:1: limit_key :{...}? => REGULAR_ID -> LIMIT_VK[$REGULAR_ID] ;
    public final limit_key_return limit_key() throws RecognitionException {
        limit_key_return retval = new limit_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID113=null;

        Object REGULAR_ID113_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:768:5: ({...}? => REGULAR_ID -> LIMIT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:768:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("limit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "limit_key", "input.LT(1).getText().equalsIgnoreCase(\"limit\")");
            }

            REGULAR_ID113=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_limit_key4978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID113);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 768:74: -> LIMIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LIMIT_VK, REGULAR_ID113)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "limit_key"


    public static class errors_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "errors_key"
    // main.java.PLSQLKeys.g:771:1: errors_key :{...}? => REGULAR_ID ;
    public final errors_key_return errors_key() throws RecognitionException {
        errors_key_return retval = new errors_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID114=null;

        Object REGULAR_ID114_tree=null;

        try {
            // main.java.PLSQLKeys.g:772:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:772:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("errors"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "errors_key", "input.LT(1).getText().equalsIgnoreCase(\"errors\")");
            }

            REGULAR_ID114=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_errors_key5006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID114_tree = 
            (Object)adaptor.create(REGULAR_ID114)
            ;
            adaptor.addChild(root_0, REGULAR_ID114_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "errors_key"


    public static class timestamp_tz_unconstrained_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "timestamp_tz_unconstrained_key"
    // main.java.PLSQLKeys.g:775:1: timestamp_tz_unconstrained_key :{...}? => REGULAR_ID -> TIMESTAMP_TZ_UNCONSTRAINED_VK[$REGULAR_ID] ;
    public final timestamp_tz_unconstrained_key_return timestamp_tz_unconstrained_key() throws RecognitionException {
        timestamp_tz_unconstrained_key_return retval = new timestamp_tz_unconstrained_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID115=null;

        Object REGULAR_ID115_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:776:5: ({...}? => REGULAR_ID -> TIMESTAMP_TZ_UNCONSTRAINED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:776:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timestamp_tz_unconstrained"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timestamp_tz_unconstrained_key", "input.LT(1).getText().equalsIgnoreCase(\"timestamp_tz_unconstrained\")");
            }

            REGULAR_ID115=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timestamp_tz_unconstrained_key5029); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID115);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 776:95: -> TIMESTAMP_TZ_UNCONSTRAINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TIMESTAMP_TZ_UNCONSTRAINED_VK, REGULAR_ID115)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "timestamp_tz_unconstrained_key"


    public static class urowid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "urowid_key"
    // main.java.PLSQLKeys.g:779:1: urowid_key :{...}? => REGULAR_ID -> UROWID_VK[$REGULAR_ID] ;
    public final urowid_key_return urowid_key() throws RecognitionException {
        urowid_key_return retval = new urowid_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID116=null;

        Object REGULAR_ID116_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:780:5: ({...}? => REGULAR_ID -> UROWID_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:780:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("urowid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "urowid_key", "input.LT(1).getText().equalsIgnoreCase(\"urowid\")");
            }

            REGULAR_ID116=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_urowid_key5057); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID116);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 780:75: -> UROWID_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(UROWID_VK, REGULAR_ID116)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "urowid_key"


    public static class binary_float_min_subnormal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_float_min_subnormal_key"
    // main.java.PLSQLKeys.g:783:1: binary_float_min_subnormal_key :{...}? => REGULAR_ID ;
    public final binary_float_min_subnormal_key_return binary_float_min_subnormal_key() throws RecognitionException {
        binary_float_min_subnormal_key_return retval = new binary_float_min_subnormal_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID117=null;

        Object REGULAR_ID117_tree=null;

        try {
            // main.java.PLSQLKeys.g:784:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:784:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_min_subnormal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_min_subnormal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_min_subnormal\")");
            }

            REGULAR_ID117=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_min_subnormal_key5085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID117_tree = 
            (Object)adaptor.create(REGULAR_ID117)
            ;
            adaptor.addChild(root_0, REGULAR_ID117_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_float_min_subnormal_key"


    public static class binary_double_min_normal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_double_min_normal_key"
    // main.java.PLSQLKeys.g:787:1: binary_double_min_normal_key :{...}? => REGULAR_ID ;
    public final binary_double_min_normal_key_return binary_double_min_normal_key() throws RecognitionException {
        binary_double_min_normal_key_return retval = new binary_double_min_normal_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID118=null;

        Object REGULAR_ID118_tree=null;

        try {
            // main.java.PLSQLKeys.g:788:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:788:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_min_normal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_min_normal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_min_normal\")");
            }

            REGULAR_ID118=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_min_normal_key5108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID118_tree = 
            (Object)adaptor.create(REGULAR_ID118)
            ;
            adaptor.addChild(root_0, REGULAR_ID118_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_double_min_normal_key"


    public static class binary_float_max_normal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_float_max_normal_key"
    // main.java.PLSQLKeys.g:791:1: binary_float_max_normal_key :{...}? => REGULAR_ID ;
    public final binary_float_max_normal_key_return binary_float_max_normal_key() throws RecognitionException {
        binary_float_max_normal_key_return retval = new binary_float_max_normal_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID119=null;

        Object REGULAR_ID119_tree=null;

        try {
            // main.java.PLSQLKeys.g:792:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:792:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_max_normal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_max_normal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_max_normal\")");
            }

            REGULAR_ID119=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_max_normal_key5131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID119_tree = 
            (Object)adaptor.create(REGULAR_ID119)
            ;
            adaptor.addChild(root_0, REGULAR_ID119_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_float_max_normal_key"


    public static class positiven_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "positiven_key"
    // main.java.PLSQLKeys.g:795:1: positiven_key :{...}? => REGULAR_ID -> POSITIVEN_VK[$REGULAR_ID] ;
    public final positiven_key_return positiven_key() throws RecognitionException {
        positiven_key_return retval = new positiven_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID120=null;

        Object REGULAR_ID120_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:796:5: ({...}? => REGULAR_ID -> POSITIVEN_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:796:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("positiven"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "positiven_key", "input.LT(1).getText().equalsIgnoreCase(\"positiven\")");
            }

            REGULAR_ID120=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_positiven_key5154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID120);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 796:78: -> POSITIVEN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(POSITIVEN_VK, REGULAR_ID120)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "positiven_key"


    public static class timezone_abbr_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "timezone_abbr_key"
    // main.java.PLSQLKeys.g:799:1: timezone_abbr_key :{...}? => REGULAR_ID -> TIMEZONE_ABBR_VK[$REGULAR_ID] ;
    public final timezone_abbr_key_return timezone_abbr_key() throws RecognitionException {
        timezone_abbr_key_return retval = new timezone_abbr_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID121=null;

        Object REGULAR_ID121_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:800:5: ({...}? => REGULAR_ID -> TIMEZONE_ABBR_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:800:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timezone_abbr"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timezone_abbr_key", "input.LT(1).getText().equalsIgnoreCase(\"timezone_abbr\")");
            }

            REGULAR_ID121=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timezone_abbr_key5182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID121);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 800:82: -> TIMEZONE_ABBR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TIMEZONE_ABBR_VK, REGULAR_ID121)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "timezone_abbr_key"


    public static class binary_double_min_subnormal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_double_min_subnormal_key"
    // main.java.PLSQLKeys.g:803:1: binary_double_min_subnormal_key :{...}? => REGULAR_ID ;
    public final binary_double_min_subnormal_key_return binary_double_min_subnormal_key() throws RecognitionException {
        binary_double_min_subnormal_key_return retval = new binary_double_min_subnormal_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID122=null;

        Object REGULAR_ID122_tree=null;

        try {
            // main.java.PLSQLKeys.g:804:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:804:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_min_subnormal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_min_subnormal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_min_subnormal\")");
            }

            REGULAR_ID122=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_min_subnormal_key5210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID122_tree = 
            (Object)adaptor.create(REGULAR_ID122)
            ;
            adaptor.addChild(root_0, REGULAR_ID122_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_double_min_subnormal_key"


    public static class binary_float_max_subnormal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_float_max_subnormal_key"
    // main.java.PLSQLKeys.g:807:1: binary_float_max_subnormal_key :{...}? => REGULAR_ID ;
    public final binary_float_max_subnormal_key_return binary_float_max_subnormal_key() throws RecognitionException {
        binary_float_max_subnormal_key_return retval = new binary_float_max_subnormal_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID123=null;

        Object REGULAR_ID123_tree=null;

        try {
            // main.java.PLSQLKeys.g:808:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:808:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_max_subnormal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_max_subnormal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_max_subnormal\")");
            }

            REGULAR_ID123=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_max_subnormal_key5233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID123_tree = 
            (Object)adaptor.create(REGULAR_ID123)
            ;
            adaptor.addChild(root_0, REGULAR_ID123_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_float_max_subnormal_key"


    public static class binary_double_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_double_key"
    // main.java.PLSQLKeys.g:811:1: binary_double_key :{...}? => REGULAR_ID -> BINARY_DOUBLE_VK[$REGULAR_ID] ;
    public final binary_double_key_return binary_double_key() throws RecognitionException {
        binary_double_key_return retval = new binary_double_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID124=null;

        Object REGULAR_ID124_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:812:5: ({...}? => REGULAR_ID -> BINARY_DOUBLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:812:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double\")");
            }

            REGULAR_ID124=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_key5256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID124);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 812:82: -> BINARY_DOUBLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BINARY_DOUBLE_VK, REGULAR_ID124)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_double_key"


    public static class bfile_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bfile_key"
    // main.java.PLSQLKeys.g:815:1: bfile_key :{...}? => REGULAR_ID -> BFILE_VK[$REGULAR_ID] ;
    public final bfile_key_return bfile_key() throws RecognitionException {
        bfile_key_return retval = new bfile_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID125=null;

        Object REGULAR_ID125_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:816:5: ({...}? => REGULAR_ID -> BFILE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:816:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("bfile"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "bfile_key", "input.LT(1).getText().equalsIgnoreCase(\"bfile\")");
            }

            REGULAR_ID125=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_bfile_key5284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID125);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 816:74: -> BFILE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BFILE_VK, REGULAR_ID125)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bfile_key"


    public static class binary_double_infinity_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_double_infinity_key"
    // main.java.PLSQLKeys.g:819:1: binary_double_infinity_key :{...}? => REGULAR_ID ;
    public final binary_double_infinity_key_return binary_double_infinity_key() throws RecognitionException {
        binary_double_infinity_key_return retval = new binary_double_infinity_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID126=null;

        Object REGULAR_ID126_tree=null;

        try {
            // main.java.PLSQLKeys.g:820:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:820:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_infinity"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_infinity_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_infinity\")");
            }

            REGULAR_ID126=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_infinity_key5312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID126_tree = 
            (Object)adaptor.create(REGULAR_ID126)
            ;
            adaptor.addChild(root_0, REGULAR_ID126_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_double_infinity_key"


    public static class timezone_region_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "timezone_region_key"
    // main.java.PLSQLKeys.g:823:1: timezone_region_key :{...}? => REGULAR_ID -> TIMEZONE_REGION_VK[$REGULAR_ID] ;
    public final timezone_region_key_return timezone_region_key() throws RecognitionException {
        timezone_region_key_return retval = new timezone_region_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID127=null;

        Object REGULAR_ID127_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:824:5: ({...}? => REGULAR_ID -> TIMEZONE_REGION_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:824:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timezone_region"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timezone_region_key", "input.LT(1).getText().equalsIgnoreCase(\"timezone_region\")");
            }

            REGULAR_ID127=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timezone_region_key5335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID127);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 824:84: -> TIMEZONE_REGION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TIMEZONE_REGION_VK, REGULAR_ID127)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "timezone_region_key"


    public static class timestamp_ltz_unconstrained_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "timestamp_ltz_unconstrained_key"
    // main.java.PLSQLKeys.g:827:1: timestamp_ltz_unconstrained_key :{...}? => REGULAR_ID -> TIMESTAMP_LTZ_UNCONSTRAINED_VK[$REGULAR_ID] ;
    public final timestamp_ltz_unconstrained_key_return timestamp_ltz_unconstrained_key() throws RecognitionException {
        timestamp_ltz_unconstrained_key_return retval = new timestamp_ltz_unconstrained_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID128=null;

        Object REGULAR_ID128_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:828:5: ({...}? => REGULAR_ID -> TIMESTAMP_LTZ_UNCONSTRAINED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:828:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timestamp_ltz_unconstrained"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timestamp_ltz_unconstrained_key", "input.LT(1).getText().equalsIgnoreCase(\"timestamp_ltz_unconstrained\")");
            }

            REGULAR_ID128=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timestamp_ltz_unconstrained_key5363); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID128);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 828:96: -> TIMESTAMP_LTZ_UNCONSTRAINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TIMESTAMP_LTZ_UNCONSTRAINED_VK, REGULAR_ID128)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "timestamp_ltz_unconstrained_key"


    public static class naturaln_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "naturaln_key"
    // main.java.PLSQLKeys.g:831:1: naturaln_key :{...}? => REGULAR_ID -> NATURALN_VK[$REGULAR_ID] ;
    public final naturaln_key_return naturaln_key() throws RecognitionException {
        naturaln_key_return retval = new naturaln_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID129=null;

        Object REGULAR_ID129_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:832:5: ({...}? => REGULAR_ID -> NATURALN_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:832:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("naturaln"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "naturaln_key", "input.LT(1).getText().equalsIgnoreCase(\"naturaln\")");
            }

            REGULAR_ID129=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_naturaln_key5391); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID129);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 832:77: -> NATURALN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NATURALN_VK, REGULAR_ID129)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "naturaln_key"


    public static class simple_integer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_integer_key"
    // main.java.PLSQLKeys.g:835:1: simple_integer_key :{...}? => REGULAR_ID -> SIMPLE_INTEGER_VK[$REGULAR_ID] ;
    public final simple_integer_key_return simple_integer_key() throws RecognitionException {
        simple_integer_key_return retval = new simple_integer_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID130=null;

        Object REGULAR_ID130_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:836:5: ({...}? => REGULAR_ID -> SIMPLE_INTEGER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:836:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("simple_integer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "simple_integer_key", "input.LT(1).getText().equalsIgnoreCase(\"simple_integer\")");
            }

            REGULAR_ID130=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_simple_integer_key5419); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID130);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 836:83: -> SIMPLE_INTEGER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SIMPLE_INTEGER_VK, REGULAR_ID130)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_integer_key"


    public static class binary_double_max_subnormal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_double_max_subnormal_key"
    // main.java.PLSQLKeys.g:839:1: binary_double_max_subnormal_key :{...}? => REGULAR_ID ;
    public final binary_double_max_subnormal_key_return binary_double_max_subnormal_key() throws RecognitionException {
        binary_double_max_subnormal_key_return retval = new binary_double_max_subnormal_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID131=null;

        Object REGULAR_ID131_tree=null;

        try {
            // main.java.PLSQLKeys.g:840:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:840:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_max_subnormal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_max_subnormal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_max_subnormal\")");
            }

            REGULAR_ID131=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_max_subnormal_key5447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID131_tree = 
            (Object)adaptor.create(REGULAR_ID131)
            ;
            adaptor.addChild(root_0, REGULAR_ID131_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_double_max_subnormal_key"


    public static class byte_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "byte_key"
    // main.java.PLSQLKeys.g:843:1: byte_key :{...}? => REGULAR_ID -> BYTE_VK[$REGULAR_ID] ;
    public final byte_key_return byte_key() throws RecognitionException {
        byte_key_return retval = new byte_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID132=null;

        Object REGULAR_ID132_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:844:5: ({...}? => REGULAR_ID -> BYTE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:844:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("byte"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "byte_key", "input.LT(1).getText().equalsIgnoreCase(\"byte\")");
            }

            REGULAR_ID132=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_byte_key5470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID132);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 844:73: -> BYTE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BYTE_VK, REGULAR_ID132)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "byte_key"


    public static class binary_float_infinity_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_float_infinity_key"
    // main.java.PLSQLKeys.g:847:1: binary_float_infinity_key :{...}? => REGULAR_ID ;
    public final binary_float_infinity_key_return binary_float_infinity_key() throws RecognitionException {
        binary_float_infinity_key_return retval = new binary_float_infinity_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID133=null;

        Object REGULAR_ID133_tree=null;

        try {
            // main.java.PLSQLKeys.g:848:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:848:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_infinity"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_infinity_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_infinity\")");
            }

            REGULAR_ID133=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_infinity_key5498); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID133_tree = 
            (Object)adaptor.create(REGULAR_ID133)
            ;
            adaptor.addChild(root_0, REGULAR_ID133_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_float_infinity_key"


    public static class binary_float_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_float_key"
    // main.java.PLSQLKeys.g:851:1: binary_float_key :{...}? => REGULAR_ID -> BINARY_FLOAT_VK[$REGULAR_ID] ;
    public final binary_float_key_return binary_float_key() throws RecognitionException {
        binary_float_key_return retval = new binary_float_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID134=null;

        Object REGULAR_ID134_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:852:5: ({...}? => REGULAR_ID -> BINARY_FLOAT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:852:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float\")");
            }

            REGULAR_ID134=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_key5521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID134);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 852:81: -> BINARY_FLOAT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BINARY_FLOAT_VK, REGULAR_ID134)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_float_key"


    public static class range_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "range_key"
    // main.java.PLSQLKeys.g:855:1: range_key :{...}? => REGULAR_ID -> RANGE_VK[$REGULAR_ID] ;
    public final range_key_return range_key() throws RecognitionException {
        range_key_return retval = new range_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID135=null;

        Object REGULAR_ID135_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:856:5: ({...}? => REGULAR_ID -> RANGE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:856:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("range"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "range_key", "input.LT(1).getText().equalsIgnoreCase(\"range\")");
            }

            REGULAR_ID135=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_range_key5549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID135);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 856:74: -> RANGE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RANGE_VK, REGULAR_ID135)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "range_key"


    public static class nclob_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nclob_key"
    // main.java.PLSQLKeys.g:859:1: nclob_key :{...}? => REGULAR_ID -> NCLOB_VK[$REGULAR_ID] ;
    public final nclob_key_return nclob_key() throws RecognitionException {
        nclob_key_return retval = new nclob_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID136=null;

        Object REGULAR_ID136_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:860:5: ({...}? => REGULAR_ID -> NCLOB_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:860:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nclob"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nclob_key", "input.LT(1).getText().equalsIgnoreCase(\"nclob\")");
            }

            REGULAR_ID136=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nclob_key5577); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID136);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 860:74: -> NCLOB_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NCLOB_VK, REGULAR_ID136)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nclob_key"


    public static class clob_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clob_key"
    // main.java.PLSQLKeys.g:863:1: clob_key :{...}? => REGULAR_ID -> CLOB_VK[$REGULAR_ID] ;
    public final clob_key_return clob_key() throws RecognitionException {
        clob_key_return retval = new clob_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID137=null;

        Object REGULAR_ID137_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:864:5: ({...}? => REGULAR_ID -> CLOB_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:864:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("clob"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "clob_key", "input.LT(1).getText().equalsIgnoreCase(\"clob\")");
            }

            REGULAR_ID137=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_clob_key5605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID137);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 864:73: -> CLOB_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CLOB_VK, REGULAR_ID137)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clob_key"


    public static class dsinterval_unconstrained_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dsinterval_unconstrained_key"
    // main.java.PLSQLKeys.g:867:1: dsinterval_unconstrained_key :{...}? => REGULAR_ID -> DSINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID] ;
    public final dsinterval_unconstrained_key_return dsinterval_unconstrained_key() throws RecognitionException {
        dsinterval_unconstrained_key_return retval = new dsinterval_unconstrained_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID138=null;

        Object REGULAR_ID138_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:868:5: ({...}? => REGULAR_ID -> DSINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:868:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("dsinterval_unconstrained"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dsinterval_unconstrained_key", "input.LT(1).getText().equalsIgnoreCase(\"dsinterval_unconstrained\")");
            }

            REGULAR_ID138=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dsinterval_unconstrained_key5633); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID138);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 868:93: -> DSINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DSINTERVAL_UNCONSTRAINED_VK, REGULAR_ID138)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dsinterval_unconstrained_key"


    public static class yminterval_unconstrained_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "yminterval_unconstrained_key"
    // main.java.PLSQLKeys.g:871:1: yminterval_unconstrained_key :{...}? => REGULAR_ID -> YMINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID] ;
    public final yminterval_unconstrained_key_return yminterval_unconstrained_key() throws RecognitionException {
        yminterval_unconstrained_key_return retval = new yminterval_unconstrained_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID139=null;

        Object REGULAR_ID139_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:872:5: ({...}? => REGULAR_ID -> YMINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:872:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("yminterval_unconstrained"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "yminterval_unconstrained_key", "input.LT(1).getText().equalsIgnoreCase(\"yminterval_unconstrained\")");
            }

            REGULAR_ID139=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_yminterval_unconstrained_key5661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID139);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 872:93: -> YMINTERVAL_UNCONSTRAINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(YMINTERVAL_UNCONSTRAINED_VK, REGULAR_ID139)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "yminterval_unconstrained_key"


    public static class rowid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowid_key"
    // main.java.PLSQLKeys.g:875:1: rowid_key :{...}? => REGULAR_ID -> ROWID_VK[$REGULAR_ID] ;
    public final rowid_key_return rowid_key() throws RecognitionException {
        rowid_key_return retval = new rowid_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID140=null;

        Object REGULAR_ID140_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:876:5: ({...}? => REGULAR_ID -> ROWID_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:876:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rowid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rowid_key", "input.LT(1).getText().equalsIgnoreCase(\"rowid\")");
            }

            REGULAR_ID140=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rowid_key5689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID140);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 876:74: -> ROWID_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ROWID_VK, REGULAR_ID140)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowid_key"


    public static class binary_double_nan_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_double_nan_key"
    // main.java.PLSQLKeys.g:879:1: binary_double_nan_key :{...}? => REGULAR_ID ;
    public final binary_double_nan_key_return binary_double_nan_key() throws RecognitionException {
        binary_double_nan_key_return retval = new binary_double_nan_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID141=null;

        Object REGULAR_ID141_tree=null;

        try {
            // main.java.PLSQLKeys.g:880:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:880:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_nan"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_nan_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_nan\")");
            }

            REGULAR_ID141=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_nan_key5717); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID141_tree = 
            (Object)adaptor.create(REGULAR_ID141)
            ;
            adaptor.addChild(root_0, REGULAR_ID141_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_double_nan_key"


    public static class timestamp_unconstrained_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "timestamp_unconstrained_key"
    // main.java.PLSQLKeys.g:883:1: timestamp_unconstrained_key :{...}? => REGULAR_ID -> TIMESTAMP_UNCONSTRAINED_VK[$REGULAR_ID] ;
    public final timestamp_unconstrained_key_return timestamp_unconstrained_key() throws RecognitionException {
        timestamp_unconstrained_key_return retval = new timestamp_unconstrained_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID142=null;

        Object REGULAR_ID142_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:884:5: ({...}? => REGULAR_ID -> TIMESTAMP_UNCONSTRAINED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:884:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timestamp_unconstrained"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timestamp_unconstrained_key", "input.LT(1).getText().equalsIgnoreCase(\"timestamp_unconstrained\")");
            }

            REGULAR_ID142=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timestamp_unconstrained_key5740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID142);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 884:92: -> TIMESTAMP_UNCONSTRAINED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TIMESTAMP_UNCONSTRAINED_VK, REGULAR_ID142)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "timestamp_unconstrained_key"


    public static class binary_float_min_normal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_float_min_normal_key"
    // main.java.PLSQLKeys.g:887:1: binary_float_min_normal_key :{...}? => REGULAR_ID ;
    public final binary_float_min_normal_key_return binary_float_min_normal_key() throws RecognitionException {
        binary_float_min_normal_key_return retval = new binary_float_min_normal_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID143=null;

        Object REGULAR_ID143_tree=null;

        try {
            // main.java.PLSQLKeys.g:888:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:888:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_min_normal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_min_normal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_min_normal\")");
            }

            REGULAR_ID143=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_min_normal_key5768); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID143_tree = 
            (Object)adaptor.create(REGULAR_ID143)
            ;
            adaptor.addChild(root_0, REGULAR_ID143_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_float_min_normal_key"


    public static class signtype_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "signtype_key"
    // main.java.PLSQLKeys.g:891:1: signtype_key :{...}? => REGULAR_ID -> SIGNTYPE_VK[$REGULAR_ID] ;
    public final signtype_key_return signtype_key() throws RecognitionException {
        signtype_key_return retval = new signtype_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID144=null;

        Object REGULAR_ID144_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:892:5: ({...}? => REGULAR_ID -> SIGNTYPE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:892:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("signtype"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "signtype_key", "input.LT(1).getText().equalsIgnoreCase(\"signtype\")");
            }

            REGULAR_ID144=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_signtype_key5791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID144);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 892:77: -> SIGNTYPE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SIGNTYPE_VK, REGULAR_ID144)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "signtype_key"


    public static class blob_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "blob_key"
    // main.java.PLSQLKeys.g:895:1: blob_key :{...}? => REGULAR_ID -> BLOB_VK[$REGULAR_ID] ;
    public final blob_key_return blob_key() throws RecognitionException {
        blob_key_return retval = new blob_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID145=null;

        Object REGULAR_ID145_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:896:5: ({...}? => REGULAR_ID -> BLOB_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:896:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("blob"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "blob_key", "input.LT(1).getText().equalsIgnoreCase(\"blob\")");
            }

            REGULAR_ID145=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_blob_key5819); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID145);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 896:73: -> BLOB_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BLOB_VK, REGULAR_ID145)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "blob_key"


    public static class nvarchar2_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nvarchar2_key"
    // main.java.PLSQLKeys.g:899:1: nvarchar2_key :{...}? => REGULAR_ID -> NVARCHAR2_VK[$REGULAR_ID] ;
    public final nvarchar2_key_return nvarchar2_key() throws RecognitionException {
        nvarchar2_key_return retval = new nvarchar2_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID146=null;

        Object REGULAR_ID146_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:900:5: ({...}? => REGULAR_ID -> NVARCHAR2_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:900:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nvarchar2"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nvarchar2_key", "input.LT(1).getText().equalsIgnoreCase(\"nvarchar2\")");
            }

            REGULAR_ID146=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nvarchar2_key5847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID146);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 900:78: -> NVARCHAR2_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NVARCHAR2_VK, REGULAR_ID146)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nvarchar2_key"


    public static class binary_double_max_normal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_double_max_normal_key"
    // main.java.PLSQLKeys.g:903:1: binary_double_max_normal_key :{...}? => REGULAR_ID ;
    public final binary_double_max_normal_key_return binary_double_max_normal_key() throws RecognitionException {
        binary_double_max_normal_key_return retval = new binary_double_max_normal_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID147=null;

        Object REGULAR_ID147_tree=null;

        try {
            // main.java.PLSQLKeys.g:904:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:904:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_double_max_normal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_double_max_normal_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_double_max_normal\")");
            }

            REGULAR_ID147=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_double_max_normal_key5875); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID147_tree = 
            (Object)adaptor.create(REGULAR_ID147)
            ;
            adaptor.addChild(root_0, REGULAR_ID147_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_double_max_normal_key"


    public static class binary_float_nan_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_float_nan_key"
    // main.java.PLSQLKeys.g:907:1: binary_float_nan_key :{...}? => REGULAR_ID ;
    public final binary_float_nan_key_return binary_float_nan_key() throws RecognitionException {
        binary_float_nan_key_return retval = new binary_float_nan_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID148=null;

        Object REGULAR_ID148_tree=null;

        try {
            // main.java.PLSQLKeys.g:908:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:908:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_float_nan"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_float_nan_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_float_nan\")");
            }

            REGULAR_ID148=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_float_nan_key5898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID148_tree = 
            (Object)adaptor.create(REGULAR_ID148)
            ;
            adaptor.addChild(root_0, REGULAR_ID148_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_float_nan_key"


    public static class string_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_key"
    // main.java.PLSQLKeys.g:911:1: string_key :{...}? => REGULAR_ID -> STRING_VK[$REGULAR_ID] ;
    public final string_key_return string_key() throws RecognitionException {
        string_key_return retval = new string_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID149=null;

        Object REGULAR_ID149_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:912:5: ({...}? => REGULAR_ID -> STRING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:912:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("string"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "string_key", "input.LT(1).getText().equalsIgnoreCase(\"string\")");
            }

            REGULAR_ID149=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_string_key5921); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID149);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 912:75: -> STRING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(STRING_VK, REGULAR_ID149)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_key"


    public static class c_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "c_key"
    // main.java.PLSQLKeys.g:915:1: c_key :{...}? => REGULAR_ID -> C_VK[$REGULAR_ID] ;
    public final c_key_return c_key() throws RecognitionException {
        c_key_return retval = new c_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID150=null;

        Object REGULAR_ID150_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:916:5: ({...}? => REGULAR_ID -> C_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:916:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("c"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "c_key", "input.LT(1).getText().equalsIgnoreCase(\"c\")");
            }

            REGULAR_ID150=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_c_key5949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID150);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 916:70: -> C_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(C_VK, REGULAR_ID150)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "c_key"


    public static class library_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "library_key"
    // main.java.PLSQLKeys.g:919:1: library_key :{...}? => REGULAR_ID -> LIBRARY_VK[$REGULAR_ID] ;
    public final library_key_return library_key() throws RecognitionException {
        library_key_return retval = new library_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID151=null;

        Object REGULAR_ID151_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:920:5: ({...}? => REGULAR_ID -> LIBRARY_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:920:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("library"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "library_key", "input.LT(1).getText().equalsIgnoreCase(\"library\")");
            }

            REGULAR_ID151=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_library_key5977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID151);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 920:76: -> LIBRARY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LIBRARY_VK, REGULAR_ID151)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "library_key"


    public static class context_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "context_key"
    // main.java.PLSQLKeys.g:923:1: context_key :{...}? => REGULAR_ID -> CONTEXT_VK[$REGULAR_ID] ;
    public final context_key_return context_key() throws RecognitionException {
        context_key_return retval = new context_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID152=null;

        Object REGULAR_ID152_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:924:5: ({...}? => REGULAR_ID -> CONTEXT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:924:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("context"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "context_key", "input.LT(1).getText().equalsIgnoreCase(\"context\")");
            }

            REGULAR_ID152=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_context_key6005); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID152);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 924:76: -> CONTEXT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CONTEXT_VK, REGULAR_ID152)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "context_key"


    public static class parameters_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parameters_key"
    // main.java.PLSQLKeys.g:927:1: parameters_key :{...}? => REGULAR_ID -> PARAMETERS_VK[$REGULAR_ID] ;
    public final parameters_key_return parameters_key() throws RecognitionException {
        parameters_key_return retval = new parameters_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID153=null;

        Object REGULAR_ID153_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:928:5: ({...}? => REGULAR_ID -> PARAMETERS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:928:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("parameters"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "parameters_key", "input.LT(1).getText().equalsIgnoreCase(\"parameters\")");
            }

            REGULAR_ID153=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_parameters_key6033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID153);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 928:79: -> PARAMETERS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PARAMETERS_VK, REGULAR_ID153)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parameters_key"


    public static class agent_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "agent_key"
    // main.java.PLSQLKeys.g:931:1: agent_key :{...}? => REGULAR_ID -> AGENT_VK[$REGULAR_ID] ;
    public final agent_key_return agent_key() throws RecognitionException {
        agent_key_return retval = new agent_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID154=null;

        Object REGULAR_ID154_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:932:5: ({...}? => REGULAR_ID -> AGENT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:932:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("agent"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "agent_key", "input.LT(1).getText().equalsIgnoreCase(\"agent\")");
            }

            REGULAR_ID154=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_agent_key6061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID154);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 932:74: -> AGENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(AGENT_VK, REGULAR_ID154)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "agent_key"


    public static class cluster_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cluster_key"
    // main.java.PLSQLKeys.g:935:1: cluster_key :{...}? => REGULAR_ID -> CLUSTER_VK[$REGULAR_ID] ;
    public final cluster_key_return cluster_key() throws RecognitionException {
        cluster_key_return retval = new cluster_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID155=null;

        Object REGULAR_ID155_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:936:5: ({...}? => REGULAR_ID -> CLUSTER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:936:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cluster"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cluster_key", "input.LT(1).getText().equalsIgnoreCase(\"cluster\")");
            }

            REGULAR_ID155=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cluster_key6089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID155);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 936:76: -> CLUSTER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CLUSTER_VK, REGULAR_ID155)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cluster_key"


    public static class hash_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hash_key"
    // main.java.PLSQLKeys.g:939:1: hash_key :{...}? => REGULAR_ID -> HASH_VK[$REGULAR_ID] ;
    public final hash_key_return hash_key() throws RecognitionException {
        hash_key_return retval = new hash_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID156=null;

        Object REGULAR_ID156_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:940:5: ({...}? => REGULAR_ID -> HASH_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:940:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("hash"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "hash_key", "input.LT(1).getText().equalsIgnoreCase(\"hash\")");
            }

            REGULAR_ID156=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_hash_key6117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID156);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 940:73: -> HASH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(HASH_VK, REGULAR_ID156)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hash_key"


    public static class relies_on_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relies_on_key"
    // main.java.PLSQLKeys.g:943:1: relies_on_key :{...}? => REGULAR_ID -> RELIES_ON_VK[$REGULAR_ID] ;
    public final relies_on_key_return relies_on_key() throws RecognitionException {
        relies_on_key_return retval = new relies_on_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID157=null;

        Object REGULAR_ID157_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:944:5: ({...}? => REGULAR_ID -> RELIES_ON_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:944:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("relies_on"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "relies_on_key", "input.LT(1).getText().equalsIgnoreCase(\"relies_on\")");
            }

            REGULAR_ID157=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_relies_on_key6145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID157);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 944:78: -> RELIES_ON_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RELIES_ON_VK, REGULAR_ID157)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relies_on_key"


    public static class returning_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "returning_key"
    // main.java.PLSQLKeys.g:947:1: returning_key :{...}? => REGULAR_ID ;
    public final returning_key_return returning_key() throws RecognitionException {
        returning_key_return retval = new returning_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID158=null;

        Object REGULAR_ID158_tree=null;

        try {
            // main.java.PLSQLKeys.g:948:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:948:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("returning"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "returning_key", "input.LT(1).getText().equalsIgnoreCase(\"returning\")");
            }

            REGULAR_ID158=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_returning_key6173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID158_tree = 
            (Object)adaptor.create(REGULAR_ID158)
            ;
            adaptor.addChild(root_0, REGULAR_ID158_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "returning_key"


    public static class statement_id_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement_id_key"
    // main.java.PLSQLKeys.g:951:1: statement_id_key :{...}? => REGULAR_ID ;
    public final statement_id_key_return statement_id_key() throws RecognitionException {
        statement_id_key_return retval = new statement_id_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID159=null;

        Object REGULAR_ID159_tree=null;

        try {
            // main.java.PLSQLKeys.g:952:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:952:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("statement_id"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "statement_id_key", "input.LT(1).getText().equalsIgnoreCase(\"statement_id\")");
            }

            REGULAR_ID159=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_statement_id_key6200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID159_tree = 
            (Object)adaptor.create(REGULAR_ID159)
            ;
            adaptor.addChild(root_0, REGULAR_ID159_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement_id_key"


    public static class deferred_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "deferred_key"
    // main.java.PLSQLKeys.g:955:1: deferred_key :{...}? => REGULAR_ID -> DEFERRED_VK[$REGULAR_ID] ;
    public final deferred_key_return deferred_key() throws RecognitionException {
        deferred_key_return retval = new deferred_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID160=null;

        Object REGULAR_ID160_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:956:5: ({...}? => REGULAR_ID -> DEFERRED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:956:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("deferred"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "deferred_key", "input.LT(1).getText().equalsIgnoreCase(\"deferred\")");
            }

            REGULAR_ID160=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_deferred_key6223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID160);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 956:77: -> DEFERRED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DEFERRED_VK, REGULAR_ID160)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "deferred_key"


    public static class advise_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "advise_key"
    // main.java.PLSQLKeys.g:959:1: advise_key :{...}? => REGULAR_ID ;
    public final advise_key_return advise_key() throws RecognitionException {
        advise_key_return retval = new advise_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID161=null;

        Object REGULAR_ID161_tree=null;

        try {
            // main.java.PLSQLKeys.g:960:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:960:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("advise"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "advise_key", "input.LT(1).getText().equalsIgnoreCase(\"advise\")");
            }

            REGULAR_ID161=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_advise_key6251); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID161_tree = 
            (Object)adaptor.create(REGULAR_ID161)
            ;
            adaptor.addChild(root_0, REGULAR_ID161_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "advise_key"


    public static class resumable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "resumable_key"
    // main.java.PLSQLKeys.g:963:1: resumable_key :{...}? => REGULAR_ID ;
    public final resumable_key_return resumable_key() throws RecognitionException {
        resumable_key_return retval = new resumable_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID162=null;

        Object REGULAR_ID162_tree=null;

        try {
            // main.java.PLSQLKeys.g:964:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:964:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("resumable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "resumable_key", "input.LT(1).getText().equalsIgnoreCase(\"resumable\")");
            }

            REGULAR_ID162=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_resumable_key6274); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID162_tree = 
            (Object)adaptor.create(REGULAR_ID162)
            ;
            adaptor.addChild(root_0, REGULAR_ID162_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "resumable_key"


    public static class timeout_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "timeout_key"
    // main.java.PLSQLKeys.g:967:1: timeout_key :{...}? => REGULAR_ID ;
    public final timeout_key_return timeout_key() throws RecognitionException {
        timeout_key_return retval = new timeout_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID163=null;

        Object REGULAR_ID163_tree=null;

        try {
            // main.java.PLSQLKeys.g:968:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:968:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("timeout"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timeout_key", "input.LT(1).getText().equalsIgnoreCase(\"timeout\")");
            }

            REGULAR_ID163=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timeout_key6297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID163_tree = 
            (Object)adaptor.create(REGULAR_ID163)
            ;
            adaptor.addChild(root_0, REGULAR_ID163_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "timeout_key"


    public static class parallel_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parallel_key"
    // main.java.PLSQLKeys.g:971:1: parallel_key :{...}? => REGULAR_ID ;
    public final parallel_key_return parallel_key() throws RecognitionException {
        parallel_key_return retval = new parallel_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID164=null;

        Object REGULAR_ID164_tree=null;

        try {
            // main.java.PLSQLKeys.g:972:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:972:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("parallel"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "parallel_key", "input.LT(1).getText().equalsIgnoreCase(\"parallel\")");
            }

            REGULAR_ID164=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_parallel_key6320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID164_tree = 
            (Object)adaptor.create(REGULAR_ID164)
            ;
            adaptor.addChild(root_0, REGULAR_ID164_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parallel_key"


    public static class ddl_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ddl_key"
    // main.java.PLSQLKeys.g:975:1: ddl_key :{...}? => REGULAR_ID -> DDL_VK[$REGULAR_ID] ;
    public final ddl_key_return ddl_key() throws RecognitionException {
        ddl_key_return retval = new ddl_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID165=null;

        Object REGULAR_ID165_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:976:5: ({...}? => REGULAR_ID -> DDL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:976:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("ddl"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ddl_key", "input.LT(1).getText().equalsIgnoreCase(\"ddl\")");
            }

            REGULAR_ID165=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ddl_key6343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID165);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 976:72: -> DDL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DDL_VK, REGULAR_ID165)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ddl_key"


    public static class query_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query_key"
    // main.java.PLSQLKeys.g:979:1: query_key :{...}? => REGULAR_ID ;
    public final query_key_return query_key() throws RecognitionException {
        query_key_return retval = new query_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID166=null;

        Object REGULAR_ID166_tree=null;

        try {
            // main.java.PLSQLKeys.g:980:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:980:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("query"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "query_key", "input.LT(1).getText().equalsIgnoreCase(\"query\")");
            }

            REGULAR_ID166=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_query_key6371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID166_tree = 
            (Object)adaptor.create(REGULAR_ID166)
            ;
            adaptor.addChild(root_0, REGULAR_ID166_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_key"


    public static class dml_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dml_key"
    // main.java.PLSQLKeys.g:983:1: dml_key :{...}? => REGULAR_ID ;
    public final dml_key_return dml_key() throws RecognitionException {
        dml_key_return retval = new dml_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID167=null;

        Object REGULAR_ID167_tree=null;

        try {
            // main.java.PLSQLKeys.g:984:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:984:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("dml"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dml_key", "input.LT(1).getText().equalsIgnoreCase(\"dml\")");
            }

            REGULAR_ID167=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dml_key6394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID167_tree = 
            (Object)adaptor.create(REGULAR_ID167)
            ;
            adaptor.addChild(root_0, REGULAR_ID167_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dml_key"


    public static class guard_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "guard_key"
    // main.java.PLSQLKeys.g:987:1: guard_key :{...}? => REGULAR_ID ;
    public final guard_key_return guard_key() throws RecognitionException {
        guard_key_return retval = new guard_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID168=null;

        Object REGULAR_ID168_tree=null;

        try {
            // main.java.PLSQLKeys.g:988:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:988:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("guard"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "guard_key", "input.LT(1).getText().equalsIgnoreCase(\"guard\")");
            }

            REGULAR_ID168=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_guard_key6417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID168_tree = 
            (Object)adaptor.create(REGULAR_ID168)
            ;
            adaptor.addChild(root_0, REGULAR_ID168_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "guard_key"


    public static class nothing_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nothing_key"
    // main.java.PLSQLKeys.g:991:1: nothing_key :{...}? => REGULAR_ID ;
    public final nothing_key_return nothing_key() throws RecognitionException {
        nothing_key_return retval = new nothing_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID169=null;

        Object REGULAR_ID169_tree=null;

        try {
            // main.java.PLSQLKeys.g:992:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:992:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("nothing"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nothing_key", "input.LT(1).getText().equalsIgnoreCase(\"nothing\")");
            }

            REGULAR_ID169=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nothing_key6440); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID169_tree = 
            (Object)adaptor.create(REGULAR_ID169)
            ;
            adaptor.addChild(root_0, REGULAR_ID169_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nothing_key"


    public static class enable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enable_key"
    // main.java.PLSQLKeys.g:995:1: enable_key :{...}? => REGULAR_ID -> ENABLE_VK[$REGULAR_ID] ;
    public final enable_key_return enable_key() throws RecognitionException {
        enable_key_return retval = new enable_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID170=null;

        Object REGULAR_ID170_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:996:5: ({...}? => REGULAR_ID -> ENABLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:996:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("enable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "enable_key", "input.LT(1).getText().equalsIgnoreCase(\"enable\")");
            }

            REGULAR_ID170=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_enable_key6463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID170);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 996:75: -> ENABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ENABLE_VK, REGULAR_ID170)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enable_key"


    public static class database_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "database_key"
    // main.java.PLSQLKeys.g:999:1: database_key :{...}? => REGULAR_ID -> DATABASE_VK[$REGULAR_ID] ;
    public final database_key_return database_key() throws RecognitionException {
        database_key_return retval = new database_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID171=null;

        Object REGULAR_ID171_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1000:5: ({...}? => REGULAR_ID -> DATABASE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1000:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("database"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "database_key", "input.LT(1).getText().equalsIgnoreCase(\"database\")");
            }

            REGULAR_ID171=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_database_key6491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID171);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1000:77: -> DATABASE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DATABASE_VK, REGULAR_ID171)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "database_key"


    public static class disable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "disable_key"
    // main.java.PLSQLKeys.g:1003:1: disable_key :{...}? => REGULAR_ID -> DISABLE_VK[$REGULAR_ID] ;
    public final disable_key_return disable_key() throws RecognitionException {
        disable_key_return retval = new disable_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID172=null;

        Object REGULAR_ID172_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1004:5: ({...}? => REGULAR_ID -> DISABLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1004:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("disable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "disable_key", "input.LT(1).getText().equalsIgnoreCase(\"disable\")");
            }

            REGULAR_ID172=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_disable_key6519); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID172);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1004:76: -> DISABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DISABLE_VK, REGULAR_ID172)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "disable_key"


    public static class link_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "link_key"
    // main.java.PLSQLKeys.g:1007:1: link_key :{...}? => REGULAR_ID ;
    public final link_key_return link_key() throws RecognitionException {
        link_key_return retval = new link_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID173=null;

        Object REGULAR_ID173_tree=null;

        try {
            // main.java.PLSQLKeys.g:1008:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1008:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("link"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "link_key", "input.LT(1).getText().equalsIgnoreCase(\"link\")");
            }

            REGULAR_ID173=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_link_key6547); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID173_tree = 
            (Object)adaptor.create(REGULAR_ID173)
            ;
            adaptor.addChild(root_0, REGULAR_ID173_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "link_key"


    public static class identified_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "identified_key"
    // main.java.PLSQLKeys.g:1011:1: identified_key : PLSQL_RESERVED_IDENTIFIED ;
    public final identified_key_return identified_key() throws RecognitionException {
        identified_key_return retval = new identified_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_RESERVED_IDENTIFIED174=null;

        Object PLSQL_RESERVED_IDENTIFIED174_tree=null;

        try {
            // main.java.PLSQLKeys.g:1012:5: ( PLSQL_RESERVED_IDENTIFIED )
            // main.java.PLSQLKeys.g:1012:10: PLSQL_RESERVED_IDENTIFIED
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_RESERVED_IDENTIFIED174=(Token)match(input,PLSQL_RESERVED_IDENTIFIED,FOLLOW_PLSQL_RESERVED_IDENTIFIED_in_identified_key6567); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_IDENTIFIED174_tree = 
            (Object)adaptor.create(PLSQL_RESERVED_IDENTIFIED174)
            ;
            adaptor.addChild(root_0, PLSQL_RESERVED_IDENTIFIED174_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "identified_key"


    public static class none_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "none_key"
    // main.java.PLSQLKeys.g:1015:1: none_key :{...}? => REGULAR_ID ;
    public final none_key_return none_key() throws RecognitionException {
        none_key_return retval = new none_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID175=null;

        Object REGULAR_ID175_tree=null;

        try {
            // main.java.PLSQLKeys.g:1016:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1016:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("none"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "none_key", "input.LT(1).getText().equalsIgnoreCase(\"none\")");
            }

            REGULAR_ID175=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_none_key6590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID175_tree = 
            (Object)adaptor.create(REGULAR_ID175)
            ;
            adaptor.addChild(root_0, REGULAR_ID175_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "none_key"


    public static class before_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "before_key"
    // main.java.PLSQLKeys.g:1019:1: before_key :{...}? => REGULAR_ID -> BEFORE_VK[$REGULAR_ID] ;
    public final before_key_return before_key() throws RecognitionException {
        before_key_return retval = new before_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID176=null;

        Object REGULAR_ID176_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1020:5: ({...}? => REGULAR_ID -> BEFORE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1020:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("before"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "before_key", "input.LT(1).getText().equalsIgnoreCase(\"before\")");
            }

            REGULAR_ID176=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_before_key6613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID176);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1020:75: -> BEFORE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BEFORE_VK, REGULAR_ID176)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "before_key"


    public static class referencing_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "referencing_key"
    // main.java.PLSQLKeys.g:1023:1: referencing_key :{...}? => REGULAR_ID -> REFERENCING_VK[$REGULAR_ID] ;
    public final referencing_key_return referencing_key() throws RecognitionException {
        referencing_key_return retval = new referencing_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID177=null;

        Object REGULAR_ID177_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1024:5: ({...}? => REGULAR_ID -> REFERENCING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1024:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "referencing_key", "input.LT(1).getText().equalsIgnoreCase(\"referencing\")");
            }

            REGULAR_ID177=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_referencing_key6642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID177);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1024:80: -> REFERENCING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(REFERENCING_VK, REGULAR_ID177)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "referencing_key"


    public static class logon_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logon_key"
    // main.java.PLSQLKeys.g:1027:1: logon_key :{...}? => REGULAR_ID -> LOGON_VK[$REGULAR_ID] ;
    public final logon_key_return logon_key() throws RecognitionException {
        logon_key_return retval = new logon_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID178=null;

        Object REGULAR_ID178_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1028:5: ({...}? => REGULAR_ID -> LOGON_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1028:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("logon"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "logon_key", "input.LT(1).getText().equalsIgnoreCase(\"logon\")");
            }

            REGULAR_ID178=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_logon_key6670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID178);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1028:74: -> LOGON_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LOGON_VK, REGULAR_ID178)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "logon_key"


    public static class after_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "after_key"
    // main.java.PLSQLKeys.g:1031:1: after_key :{...}? => REGULAR_ID -> AFTER_VK[$REGULAR_ID] ;
    public final after_key_return after_key() throws RecognitionException {
        after_key_return retval = new after_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID179=null;

        Object REGULAR_ID179_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1032:5: ({...}? => REGULAR_ID -> AFTER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1032:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("after"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "after_key", "input.LT(1).getText().equalsIgnoreCase(\"after\")");
            }

            REGULAR_ID179=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_after_key6698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID179);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1032:74: -> AFTER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(AFTER_VK, REGULAR_ID179)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "after_key"


    public static class schema_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "schema_key"
    // main.java.PLSQLKeys.g:1035:1: schema_key :{...}? => REGULAR_ID -> SCHEMA_VK[$REGULAR_ID] ;
    public final schema_key_return schema_key() throws RecognitionException {
        schema_key_return retval = new schema_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID180=null;

        Object REGULAR_ID180_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1036:5: ({...}? => REGULAR_ID -> SCHEMA_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1036:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("schema"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "schema_key", "input.LT(1).getText().equalsIgnoreCase(\"schema\")");
            }

            REGULAR_ID180=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_schema_key6726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID180);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1036:75: -> SCHEMA_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SCHEMA_VK, REGULAR_ID180)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "schema_key"


    public static class grant_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grant_key"
    // main.java.PLSQLKeys.g:1039:1: grant_key : SQL92_RESERVED_GRANT ;
    public final grant_key_return grant_key() throws RecognitionException {
        grant_key_return retval = new grant_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_GRANT181=null;

        Object SQL92_RESERVED_GRANT181_tree=null;

        try {
            // main.java.PLSQLKeys.g:1040:5: ( SQL92_RESERVED_GRANT )
            // main.java.PLSQLKeys.g:1040:10: SQL92_RESERVED_GRANT
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_GRANT181=(Token)match(input,SQL92_RESERVED_GRANT,FOLLOW_SQL92_RESERVED_GRANT_in_grant_key6751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_GRANT181_tree = 
            (Object)adaptor.create(SQL92_RESERVED_GRANT181)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_GRANT181_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grant_key"


    public static class truncate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "truncate_key"
    // main.java.PLSQLKeys.g:1043:1: truncate_key :{...}? => REGULAR_ID -> TRUNCATE_VK[$REGULAR_ID] ;
    public final truncate_key_return truncate_key() throws RecognitionException {
        truncate_key_return retval = new truncate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID182=null;

        Object REGULAR_ID182_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1044:5: ({...}? => REGULAR_ID -> TRUNCATE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1044:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("truncate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "truncate_key", "input.LT(1).getText().equalsIgnoreCase(\"truncate\")");
            }

            REGULAR_ID182=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_truncate_key6774); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID182);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1044:77: -> TRUNCATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TRUNCATE_VK, REGULAR_ID182)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "truncate_key"


    public static class startup_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "startup_key"
    // main.java.PLSQLKeys.g:1047:1: startup_key :{...}? => REGULAR_ID -> STARTUP_VK[$REGULAR_ID] ;
    public final startup_key_return startup_key() throws RecognitionException {
        startup_key_return retval = new startup_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID183=null;

        Object REGULAR_ID183_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1048:5: ({...}? => REGULAR_ID -> STARTUP_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1048:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("startup"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "startup_key", "input.LT(1).getText().equalsIgnoreCase(\"startup\")");
            }

            REGULAR_ID183=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_startup_key6802); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID183);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1048:76: -> STARTUP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(STARTUP_VK, REGULAR_ID183)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "startup_key"


    public static class statistics_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statistics_key"
    // main.java.PLSQLKeys.g:1051:1: statistics_key :{...}? => REGULAR_ID -> STATISTICS_VK[$REGULAR_ID] ;
    public final statistics_key_return statistics_key() throws RecognitionException {
        statistics_key_return retval = new statistics_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID184=null;

        Object REGULAR_ID184_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1052:5: ({...}? => REGULAR_ID -> STATISTICS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1052:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("statistics"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "statistics_key", "input.LT(1).getText().equalsIgnoreCase(\"statistics\")");
            }

            REGULAR_ID184=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_statistics_key6830); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID184);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1052:79: -> STATISTICS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(STATISTICS_VK, REGULAR_ID184)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statistics_key"


    public static class noaudit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "noaudit_key"
    // main.java.PLSQLKeys.g:1055:1: noaudit_key :{...}? => REGULAR_ID -> NOAUDIT_VK[$REGULAR_ID] ;
    public final noaudit_key_return noaudit_key() throws RecognitionException {
        noaudit_key_return retval = new noaudit_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID185=null;

        Object REGULAR_ID185_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1056:5: ({...}? => REGULAR_ID -> NOAUDIT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1056:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("noaudit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "noaudit_key", "input.LT(1).getText().equalsIgnoreCase(\"noaudit\")");
            }

            REGULAR_ID185=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_noaudit_key6858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID185);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1056:76: -> NOAUDIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NOAUDIT_VK, REGULAR_ID185)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "noaudit_key"


    public static class suspend_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "suspend_key"
    // main.java.PLSQLKeys.g:1059:1: suspend_key :{...}? => REGULAR_ID -> SUSPEND_VK[$REGULAR_ID] ;
    public final suspend_key_return suspend_key() throws RecognitionException {
        suspend_key_return retval = new suspend_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID186=null;

        Object REGULAR_ID186_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1060:5: ({...}? => REGULAR_ID -> SUSPEND_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1060:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("suspend"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "suspend_key", "input.LT(1).getText().equalsIgnoreCase(\"suspend\")");
            }

            REGULAR_ID186=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_suspend_key6886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID186);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1060:76: -> SUSPEND_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SUSPEND_VK, REGULAR_ID186)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "suspend_key"


    public static class audit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "audit_key"
    // main.java.PLSQLKeys.g:1063:1: audit_key :{...}? => REGULAR_ID -> AUDIT_VK[$REGULAR_ID] ;
    public final audit_key_return audit_key() throws RecognitionException {
        audit_key_return retval = new audit_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID187=null;

        Object REGULAR_ID187_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1064:5: ({...}? => REGULAR_ID -> AUDIT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1064:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("audit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "audit_key", "input.LT(1).getText().equalsIgnoreCase(\"audit\")");
            }

            REGULAR_ID187=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_audit_key6914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID187);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1064:74: -> AUDIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(AUDIT_VK, REGULAR_ID187)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "audit_key"


    public static class disassociate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "disassociate_key"
    // main.java.PLSQLKeys.g:1067:1: disassociate_key :{...}? => REGULAR_ID -> DISASSOCIATE_VK[$REGULAR_ID] ;
    public final disassociate_key_return disassociate_key() throws RecognitionException {
        disassociate_key_return retval = new disassociate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID188=null;

        Object REGULAR_ID188_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1068:5: ({...}? => REGULAR_ID -> DISASSOCIATE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1068:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("disassociate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "disassociate_key", "input.LT(1).getText().equalsIgnoreCase(\"disassociate\")");
            }

            REGULAR_ID188=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_disassociate_key6942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID188);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1068:81: -> DISASSOCIATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DISASSOCIATE_VK, REGULAR_ID188)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "disassociate_key"


    public static class shutdown_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "shutdown_key"
    // main.java.PLSQLKeys.g:1071:1: shutdown_key :{...}? => REGULAR_ID -> SHUTDOWN_VK[$REGULAR_ID] ;
    public final shutdown_key_return shutdown_key() throws RecognitionException {
        shutdown_key_return retval = new shutdown_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID189=null;

        Object REGULAR_ID189_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1072:5: ({...}? => REGULAR_ID -> SHUTDOWN_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1072:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("shutdown"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "shutdown_key", "input.LT(1).getText().equalsIgnoreCase(\"shutdown\")");
            }

            REGULAR_ID189=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_shutdown_key6971); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID189);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1072:77: -> SHUTDOWN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SHUTDOWN_VK, REGULAR_ID189)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "shutdown_key"


    public static class compound_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compound_key"
    // main.java.PLSQLKeys.g:1075:1: compound_key :{...}? => REGULAR_ID -> COMPOUND_VK[$REGULAR_ID] ;
    public final compound_key_return compound_key() throws RecognitionException {
        compound_key_return retval = new compound_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID190=null;

        Object REGULAR_ID190_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1076:5: ({...}? => REGULAR_ID -> COMPOUND_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1076:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("compound"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "compound_key", "input.LT(1).getText().equalsIgnoreCase(\"compound\")");
            }

            REGULAR_ID190=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_compound_key6999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID190);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1076:77: -> COMPOUND_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(COMPOUND_VK, REGULAR_ID190)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compound_key"


    public static class servererror_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "servererror_key"
    // main.java.PLSQLKeys.g:1079:1: servererror_key :{...}? => REGULAR_ID -> SERVERERROR_VK[$REGULAR_ID] ;
    public final servererror_key_return servererror_key() throws RecognitionException {
        servererror_key_return retval = new servererror_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID191=null;

        Object REGULAR_ID191_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1080:5: ({...}? => REGULAR_ID -> SERVERERROR_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1080:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("servererror"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "servererror_key", "input.LT(1).getText().equalsIgnoreCase(\"servererror\")");
            }

            REGULAR_ID191=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_servererror_key7027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID191);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1080:80: -> SERVERERROR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SERVERERROR_VK, REGULAR_ID191)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "servererror_key"


    public static class parent_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parent_key"
    // main.java.PLSQLKeys.g:1083:1: parent_key :{...}? => REGULAR_ID -> PARENT_VK[$REGULAR_ID] ;
    public final parent_key_return parent_key() throws RecognitionException {
        parent_key_return retval = new parent_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID192=null;

        Object REGULAR_ID192_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1084:5: ({...}? => REGULAR_ID -> PARENT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1084:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("parent"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "parent_key", "input.LT(1).getText().equalsIgnoreCase(\"parent\")");
            }

            REGULAR_ID192=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_parent_key7055); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID192);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1084:75: -> PARENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PARENT_VK, REGULAR_ID192)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "parent_key"


    public static class follows_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "follows_key"
    // main.java.PLSQLKeys.g:1087:1: follows_key :{...}? => REGULAR_ID -> FOLLOWS_VK[$REGULAR_ID] ;
    public final follows_key_return follows_key() throws RecognitionException {
        follows_key_return retval = new follows_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID193=null;

        Object REGULAR_ID193_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1088:5: ({...}? => REGULAR_ID -> FOLLOWS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1088:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("follows"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "follows_key", "input.LT(1).getText().equalsIgnoreCase(\"follows\")");
            }

            REGULAR_ID193=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_follows_key7083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID193);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1088:76: -> FOLLOWS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FOLLOWS_VK, REGULAR_ID193)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "follows_key"


    public static class nested_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nested_key"
    // main.java.PLSQLKeys.g:1091:1: nested_key :{...}? => REGULAR_ID -> NESTED_VK[$REGULAR_ID] ;
    public final nested_key_return nested_key() throws RecognitionException {
        nested_key_return retval = new nested_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID194=null;

        Object REGULAR_ID194_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1092:5: ({...}? => REGULAR_ID -> NESTED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1092:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nested"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nested_key", "input.LT(1).getText().equalsIgnoreCase(\"nested\")");
            }

            REGULAR_ID194=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nested_key7111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID194);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1092:75: -> NESTED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NESTED_VK, REGULAR_ID194)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nested_key"


    public static class old_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "old_key"
    // main.java.PLSQLKeys.g:1095:1: old_key :{...}? => REGULAR_ID -> OLD_VK[$REGULAR_ID] ;
    public final old_key_return old_key() throws RecognitionException {
        old_key_return retval = new old_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID195=null;

        Object REGULAR_ID195_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1096:5: ({...}? => REGULAR_ID -> OLD_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1096:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("old"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "old_key", "input.LT(1).getText().equalsIgnoreCase(\"old\")");
            }

            REGULAR_ID195=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_old_key7139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID195);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1096:72: -> OLD_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(OLD_VK, REGULAR_ID195)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "old_key"


    public static class statement_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement_key"
    // main.java.PLSQLKeys.g:1099:1: statement_key :{...}? => REGULAR_ID ;
    public final statement_key_return statement_key() throws RecognitionException {
        statement_key_return retval = new statement_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID196=null;

        Object REGULAR_ID196_tree=null;

        try {
            // main.java.PLSQLKeys.g:1100:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1100:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("statement"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "statement_key", "input.LT(1).getText().equalsIgnoreCase(\"statement\")");
            }

            REGULAR_ID196=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_statement_key7167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID196_tree = 
            (Object)adaptor.create(REGULAR_ID196)
            ;
            adaptor.addChild(root_0, REGULAR_ID196_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statement_key"


    public static class db_role_change_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "db_role_change_key"
    // main.java.PLSQLKeys.g:1103:1: db_role_change_key :{...}? => REGULAR_ID -> DB_ROLE_CHANGE_VK[$REGULAR_ID] ;
    public final db_role_change_key_return db_role_change_key() throws RecognitionException {
        db_role_change_key_return retval = new db_role_change_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID197=null;

        Object REGULAR_ID197_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1104:5: ({...}? => REGULAR_ID -> DB_ROLE_CHANGE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1104:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("db_role_change"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "db_role_change_key", "input.LT(1).getText().equalsIgnoreCase(\"db_role_change\")");
            }

            REGULAR_ID197=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_db_role_change_key7190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID197);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1104:83: -> DB_ROLE_CHANGE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DB_ROLE_CHANGE_VK, REGULAR_ID197)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "db_role_change_key"


    public static class each_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "each_key"
    // main.java.PLSQLKeys.g:1107:1: each_key :{...}? => REGULAR_ID ;
    public final each_key_return each_key() throws RecognitionException {
        each_key_return retval = new each_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID198=null;

        Object REGULAR_ID198_tree=null;

        try {
            // main.java.PLSQLKeys.g:1108:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1108:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("each"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "each_key", "input.LT(1).getText().equalsIgnoreCase(\"each\")");
            }

            REGULAR_ID198=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_each_key7218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID198_tree = 
            (Object)adaptor.create(REGULAR_ID198)
            ;
            adaptor.addChild(root_0, REGULAR_ID198_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "each_key"


    public static class logoff_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logoff_key"
    // main.java.PLSQLKeys.g:1111:1: logoff_key :{...}? => REGULAR_ID -> LOGOFF_VK[$REGULAR_ID] ;
    public final logoff_key_return logoff_key() throws RecognitionException {
        logoff_key_return retval = new logoff_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID199=null;

        Object REGULAR_ID199_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1112:5: ({...}? => REGULAR_ID -> LOGOFF_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1112:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("logoff"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "logoff_key", "input.LT(1).getText().equalsIgnoreCase(\"logoff\")");
            }

            REGULAR_ID199=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_logoff_key7241); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID199);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1112:75: -> LOGOFF_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LOGOFF_VK, REGULAR_ID199)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "logoff_key"


    public static class analyze_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "analyze_key"
    // main.java.PLSQLKeys.g:1115:1: analyze_key :{...}? => REGULAR_ID -> ANALYZE_VK[$REGULAR_ID] ;
    public final analyze_key_return analyze_key() throws RecognitionException {
        analyze_key_return retval = new analyze_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID200=null;

        Object REGULAR_ID200_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1116:5: ({...}? => REGULAR_ID -> ANALYZE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1116:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("analyze"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "analyze_key", "input.LT(1).getText().equalsIgnoreCase(\"analyze\")");
            }

            REGULAR_ID200=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_analyze_key7269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID200);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1116:76: -> ANALYZE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ANALYZE_VK, REGULAR_ID200)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "analyze_key"


    public static class instead_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "instead_key"
    // main.java.PLSQLKeys.g:1119:1: instead_key :{...}? => REGULAR_ID -> INSTEAD_VK[$REGULAR_ID] ;
    public final instead_key_return instead_key() throws RecognitionException {
        instead_key_return retval = new instead_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID201=null;

        Object REGULAR_ID201_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1120:5: ({...}? => REGULAR_ID -> INSTEAD_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1120:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("instead"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instead_key", "input.LT(1).getText().equalsIgnoreCase(\"instead\")");
            }

            REGULAR_ID201=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_instead_key7297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID201);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1120:76: -> INSTEAD_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INSTEAD_VK, REGULAR_ID201)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "instead_key"


    public static class associate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "associate_key"
    // main.java.PLSQLKeys.g:1123:1: associate_key :{...}? => REGULAR_ID -> ASSOCIATE_VK[$REGULAR_ID] ;
    public final associate_key_return associate_key() throws RecognitionException {
        associate_key_return retval = new associate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID202=null;

        Object REGULAR_ID202_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1124:5: ({...}? => REGULAR_ID -> ASSOCIATE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1124:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("associate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "associate_key", "input.LT(1).getText().equalsIgnoreCase(\"associate\")");
            }

            REGULAR_ID202=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_associate_key7325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID202);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1124:78: -> ASSOCIATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ASSOCIATE_VK, REGULAR_ID202)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "associate_key"


    public static class new_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "new_key"
    // main.java.PLSQLKeys.g:1127:1: new_key :{...}? => REGULAR_ID -> NEW_VK[$REGULAR_ID] ;
    public final new_key_return new_key() throws RecognitionException {
        new_key_return retval = new new_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID203=null;

        Object REGULAR_ID203_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1128:5: ({...}? => REGULAR_ID -> NEW_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1128:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("new"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "new_key", "input.LT(1).getText().equalsIgnoreCase(\"new\")");
            }

            REGULAR_ID203=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_new_key7353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID203);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1128:72: -> NEW_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NEW_VK, REGULAR_ID203)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "new_key"


    public static class revoke_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "revoke_key"
    // main.java.PLSQLKeys.g:1131:1: revoke_key : SQL92_RESERVED_REVOKE ;
    public final revoke_key_return revoke_key() throws RecognitionException {
        revoke_key_return retval = new revoke_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_REVOKE204=null;

        Object SQL92_RESERVED_REVOKE204_tree=null;

        try {
            // main.java.PLSQLKeys.g:1132:5: ( SQL92_RESERVED_REVOKE )
            // main.java.PLSQLKeys.g:1132:10: SQL92_RESERVED_REVOKE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_REVOKE204=(Token)match(input,SQL92_RESERVED_REVOKE,FOLLOW_SQL92_RESERVED_REVOKE_in_revoke_key7378); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_REVOKE204_tree = 
            (Object)adaptor.create(SQL92_RESERVED_REVOKE204)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_REVOKE204_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "revoke_key"


    public static class rename_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rename_key"
    // main.java.PLSQLKeys.g:1135:1: rename_key :{...}? => REGULAR_ID -> RENAME_VK[$REGULAR_ID] ;
    public final rename_key_return rename_key() throws RecognitionException {
        rename_key_return retval = new rename_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID205=null;

        Object REGULAR_ID205_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1136:5: ({...}? => REGULAR_ID -> RENAME_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1136:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rename"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rename_key", "input.LT(1).getText().equalsIgnoreCase(\"rename\")");
            }

            REGULAR_ID205=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rename_key7401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID205);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1136:75: -> RENAME_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RENAME_VK, REGULAR_ID205)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rename_key"


    public static class customdatum_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "customdatum_key"
    // main.java.PLSQLKeys.g:1139:1: customdatum_key :{...}? => REGULAR_ID -> CUSTOMDATUM_VK[$REGULAR_ID] ;
    public final customdatum_key_return customdatum_key() throws RecognitionException {
        customdatum_key_return retval = new customdatum_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID206=null;

        Object REGULAR_ID206_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1140:5: ({...}? => REGULAR_ID -> CUSTOMDATUM_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1140:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("customdatum"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "customdatum_key", "input.LT(1).getText().equalsIgnoreCase(\"customdatum\")");
            }

            REGULAR_ID206=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_customdatum_key7430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID206);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1140:80: -> CUSTOMDATUM_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CUSTOMDATUM_VK, REGULAR_ID206)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "customdatum_key"


    public static class oradata_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "oradata_key"
    // main.java.PLSQLKeys.g:1143:1: oradata_key :{...}? => REGULAR_ID -> ORADATA_VK[$REGULAR_ID] ;
    public final oradata_key_return oradata_key() throws RecognitionException {
        oradata_key_return retval = new oradata_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID207=null;

        Object REGULAR_ID207_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1144:5: ({...}? => REGULAR_ID -> ORADATA_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1144:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("oradata"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "oradata_key", "input.LT(1).getText().equalsIgnoreCase(\"oradata\")");
            }

            REGULAR_ID207=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_oradata_key7458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID207);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1144:76: -> ORADATA_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ORADATA_VK, REGULAR_ID207)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "oradata_key"


    public static class constructor_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "constructor_key"
    // main.java.PLSQLKeys.g:1147:1: constructor_key :{...}? => REGULAR_ID -> CONSTRUCTOR_VK[$REGULAR_ID] ;
    public final constructor_key_return constructor_key() throws RecognitionException {
        constructor_key_return retval = new constructor_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID208=null;

        Object REGULAR_ID208_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1148:5: ({...}? => REGULAR_ID -> CONSTRUCTOR_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1148:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("constructor"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "constructor_key", "input.LT(1).getText().equalsIgnoreCase(\"constructor\")");
            }

            REGULAR_ID208=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_constructor_key7486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID208);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1148:80: -> CONSTRUCTOR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CONSTRUCTOR_VK, REGULAR_ID208)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "constructor_key"


    public static class sqldata_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sqldata_key"
    // main.java.PLSQLKeys.g:1151:1: sqldata_key :{...}? => REGULAR_ID -> SQLDATA_VK[$REGULAR_ID] ;
    public final sqldata_key_return sqldata_key() throws RecognitionException {
        sqldata_key_return retval = new sqldata_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID209=null;

        Object REGULAR_ID209_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1152:5: ({...}? => REGULAR_ID -> SQLDATA_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1152:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("sqldata"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sqldata_key", "input.LT(1).getText().equalsIgnoreCase(\"sqldata\")");
            }

            REGULAR_ID209=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sqldata_key7514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID209);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1152:76: -> SQLDATA_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SQLDATA_VK, REGULAR_ID209)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sqldata_key"


    public static class member_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "member_key"
    // main.java.PLSQLKeys.g:1155:1: member_key :{...}? => REGULAR_ID -> MEMBER_VK[$REGULAR_ID] ;
    public final member_key_return member_key() throws RecognitionException {
        member_key_return retval = new member_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID210=null;

        Object REGULAR_ID210_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1156:5: ({...}? => REGULAR_ID -> MEMBER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1156:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("member"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "member_key", "input.LT(1).getText().equalsIgnoreCase(\"member\")");
            }

            REGULAR_ID210=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_member_key7542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID210);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1156:75: -> MEMBER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(MEMBER_VK, REGULAR_ID210)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "member_key"


    public static class self_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "self_key"
    // main.java.PLSQLKeys.g:1159:1: self_key :{...}? => REGULAR_ID -> SELF_VK[$REGULAR_ID] ;
    public final self_key_return self_key() throws RecognitionException {
        self_key_return retval = new self_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID211=null;

        Object REGULAR_ID211_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1160:5: ({...}? => REGULAR_ID -> SELF_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1160:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("self"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "self_key", "input.LT(1).getText().equalsIgnoreCase(\"self\")");
            }

            REGULAR_ID211=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_self_key7570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID211);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1160:73: -> SELF_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SELF_VK, REGULAR_ID211)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "self_key"


    public static class object_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_key"
    // main.java.PLSQLKeys.g:1163:1: object_key :{...}? => REGULAR_ID -> OBJECT_VK[$REGULAR_ID] ;
    public final object_key_return object_key() throws RecognitionException {
        object_key_return retval = new object_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID212=null;

        Object REGULAR_ID212_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1164:5: ({...}? => REGULAR_ID -> OBJECT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1164:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("object"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "object_key", "input.LT(1).getText().equalsIgnoreCase(\"object\")");
            }

            REGULAR_ID212=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_object_key7598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID212);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1164:75: -> OBJECT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(OBJECT_VK, REGULAR_ID212)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_key"


    public static class variable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_key"
    // main.java.PLSQLKeys.g:1167:1: variable_key :{...}? => REGULAR_ID ;
    public final variable_key_return variable_key() throws RecognitionException {
        variable_key_return retval = new variable_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID213=null;

        Object REGULAR_ID213_tree=null;

        try {
            // main.java.PLSQLKeys.g:1168:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1168:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("variable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "variable_key", "input.LT(1).getText().equalsIgnoreCase(\"variable\")");
            }

            REGULAR_ID213=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_variable_key7626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID213_tree = 
            (Object)adaptor.create(REGULAR_ID213)
            ;
            adaptor.addChild(root_0, REGULAR_ID213_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_key"


    public static class instantiable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "instantiable_key"
    // main.java.PLSQLKeys.g:1171:1: instantiable_key :{...}? => REGULAR_ID -> INSTANTIABLE_VK[$REGULAR_ID] ;
    public final instantiable_key_return instantiable_key() throws RecognitionException {
        instantiable_key_return retval = new instantiable_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID214=null;

        Object REGULAR_ID214_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1172:5: ({...}? => REGULAR_ID -> INSTANTIABLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1172:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("instantiable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instantiable_key", "input.LT(1).getText().equalsIgnoreCase(\"instantiable\")");
            }

            REGULAR_ID214=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_instantiable_key7649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID214);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1172:81: -> INSTANTIABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INSTANTIABLE_VK, REGULAR_ID214)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "instantiable_key"


    public static class final_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "final_key"
    // main.java.PLSQLKeys.g:1175:1: final_key :{...}? => REGULAR_ID -> FINAL_VK[$REGULAR_ID] ;
    public final final_key_return final_key() throws RecognitionException {
        final_key_return retval = new final_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID215=null;

        Object REGULAR_ID215_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1176:5: ({...}? => REGULAR_ID -> FINAL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1176:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("final"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "final_key", "input.LT(1).getText().equalsIgnoreCase(\"final\")");
            }

            REGULAR_ID215=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_final_key7677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID215);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1176:74: -> FINAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FINAL_VK, REGULAR_ID215)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "final_key"


    public static class static_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_key"
    // main.java.PLSQLKeys.g:1179:1: static_key :{...}? => REGULAR_ID -> STATIC_VK[$REGULAR_ID] ;
    public final static_key_return static_key() throws RecognitionException {
        static_key_return retval = new static_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID216=null;

        Object REGULAR_ID216_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1180:5: ({...}? => REGULAR_ID -> STATIC_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1180:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("static"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "static_key", "input.LT(1).getText().equalsIgnoreCase(\"static\")");
            }

            REGULAR_ID216=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_static_key7705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID216);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1180:75: -> STATIC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(STATIC_VK, REGULAR_ID216)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_key"


    public static class oid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "oid_key"
    // main.java.PLSQLKeys.g:1183:1: oid_key :{...}? => REGULAR_ID ;
    public final oid_key_return oid_key() throws RecognitionException {
        oid_key_return retval = new oid_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID217=null;

        Object REGULAR_ID217_tree=null;

        try {
            // main.java.PLSQLKeys.g:1184:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1184:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("oid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "oid_key", "input.LT(1).getText().equalsIgnoreCase(\"oid\")");
            }

            REGULAR_ID217=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_oid_key7733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID217_tree = 
            (Object)adaptor.create(REGULAR_ID217)
            ;
            adaptor.addChild(root_0, REGULAR_ID217_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "oid_key"


    public static class result_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "result_key"
    // main.java.PLSQLKeys.g:1187:1: result_key :{...}? => REGULAR_ID ;
    public final result_key_return result_key() throws RecognitionException {
        result_key_return retval = new result_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID218=null;

        Object REGULAR_ID218_tree=null;

        try {
            // main.java.PLSQLKeys.g:1188:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1188:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("result"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "result_key", "input.LT(1).getText().equalsIgnoreCase(\"result\")");
            }

            REGULAR_ID218=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_result_key7756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID218_tree = 
            (Object)adaptor.create(REGULAR_ID218)
            ;
            adaptor.addChild(root_0, REGULAR_ID218_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "result_key"


    public static class under_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "under_key"
    // main.java.PLSQLKeys.g:1191:1: under_key :{...}? => REGULAR_ID -> UNDER_VK[$REGULAR_ID] ;
    public final under_key_return under_key() throws RecognitionException {
        under_key_return retval = new under_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID219=null;

        Object REGULAR_ID219_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1192:5: ({...}? => REGULAR_ID -> UNDER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1192:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("under"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "under_key", "input.LT(1).getText().equalsIgnoreCase(\"under\")");
            }

            REGULAR_ID219=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_under_key7779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID219);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1192:74: -> UNDER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(UNDER_VK, REGULAR_ID219)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "under_key"


    public static class map_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "map_key"
    // main.java.PLSQLKeys.g:1195:1: map_key :{...}? => REGULAR_ID -> MAP_VK[$REGULAR_ID] ;
    public final map_key_return map_key() throws RecognitionException {
        map_key_return retval = new map_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID220=null;

        Object REGULAR_ID220_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1196:5: ({...}? => REGULAR_ID -> MAP_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1196:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("map"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "map_key", "input.LT(1).getText().equalsIgnoreCase(\"map\")");
            }

            REGULAR_ID220=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_map_key7807); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID220);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1196:72: -> MAP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(MAP_VK, REGULAR_ID220)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "map_key"


    public static class overriding_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "overriding_key"
    // main.java.PLSQLKeys.g:1199:1: overriding_key :{...}? => REGULAR_ID -> OVERRIDING_VK[$REGULAR_ID] ;
    public final overriding_key_return overriding_key() throws RecognitionException {
        overriding_key_return retval = new overriding_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID221=null;

        Object REGULAR_ID221_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1200:5: ({...}? => REGULAR_ID -> OVERRIDING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1200:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("overriding"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "overriding_key", "input.LT(1).getText().equalsIgnoreCase(\"overriding\")");
            }

            REGULAR_ID221=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_overriding_key7835); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID221);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1200:79: -> OVERRIDING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(OVERRIDING_VK, REGULAR_ID221)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "overriding_key"


    public static class add_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "add_key"
    // main.java.PLSQLKeys.g:1203:1: add_key :{...}? => REGULAR_ID -> ADD_VK[$REGULAR_ID] ;
    public final add_key_return add_key() throws RecognitionException {
        add_key_return retval = new add_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID222=null;

        Object REGULAR_ID222_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1204:5: ({...}? => REGULAR_ID -> ADD_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1204:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("add"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "add_key", "input.LT(1).getText().equalsIgnoreCase(\"add\")");
            }

            REGULAR_ID222=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_add_key7863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID222);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1204:72: -> ADD_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ADD_VK, REGULAR_ID222)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "add_key"


    public static class modify_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "modify_key"
    // main.java.PLSQLKeys.g:1207:1: modify_key :{...}? => REGULAR_ID -> MODIFY_VK[$REGULAR_ID] ;
    public final modify_key_return modify_key() throws RecognitionException {
        modify_key_return retval = new modify_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID223=null;

        Object REGULAR_ID223_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1208:5: ({...}? => REGULAR_ID -> MODIFY_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1208:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("modify"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "modify_key", "input.LT(1).getText().equalsIgnoreCase(\"modify\")");
            }

            REGULAR_ID223=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_modify_key7891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID223);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1208:75: -> MODIFY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(MODIFY_VK, REGULAR_ID223)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "modify_key"


    public static class including_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "including_key"
    // main.java.PLSQLKeys.g:1211:1: including_key :{...}? => REGULAR_ID -> INCLUDING_VK[$REGULAR_ID] ;
    public final including_key_return including_key() throws RecognitionException {
        including_key_return retval = new including_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID224=null;

        Object REGULAR_ID224_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1212:5: ({...}? => REGULAR_ID -> INCLUDING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1212:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("including"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "including_key", "input.LT(1).getText().equalsIgnoreCase(\"including\")");
            }

            REGULAR_ID224=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_including_key7919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID224);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1212:78: -> INCLUDING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INCLUDING_VK, REGULAR_ID224)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "including_key"


    public static class substitutable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "substitutable_key"
    // main.java.PLSQLKeys.g:1215:1: substitutable_key :{...}? => REGULAR_ID ;
    public final substitutable_key_return substitutable_key() throws RecognitionException {
        substitutable_key_return retval = new substitutable_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID225=null;

        Object REGULAR_ID225_tree=null;

        try {
            // main.java.PLSQLKeys.g:1216:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1216:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("substitutable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "substitutable_key", "input.LT(1).getText().equalsIgnoreCase(\"substitutable\")");
            }

            REGULAR_ID225=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_substitutable_key7947); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID225_tree = 
            (Object)adaptor.create(REGULAR_ID225)
            ;
            adaptor.addChild(root_0, REGULAR_ID225_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "substitutable_key"


    public static class attribute_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute_key"
    // main.java.PLSQLKeys.g:1219:1: attribute_key :{...}? => REGULAR_ID ;
    public final attribute_key_return attribute_key() throws RecognitionException {
        attribute_key_return retval = new attribute_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID226=null;

        Object REGULAR_ID226_tree=null;

        try {
            // main.java.PLSQLKeys.g:1220:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1220:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("attribute"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "attribute_key", "input.LT(1).getText().equalsIgnoreCase(\"attribute\")");
            }

            REGULAR_ID226=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_attribute_key7970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID226_tree = 
            (Object)adaptor.create(REGULAR_ID226)
            ;
            adaptor.addChild(root_0, REGULAR_ID226_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute_key"


    public static class cascade_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cascade_key"
    // main.java.PLSQLKeys.g:1223:1: cascade_key :{...}? => REGULAR_ID -> CASCADE_VK[$REGULAR_ID] ;
    public final cascade_key_return cascade_key() throws RecognitionException {
        cascade_key_return retval = new cascade_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID227=null;

        Object REGULAR_ID227_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1224:5: ({...}? => REGULAR_ID -> CASCADE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1224:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cascade"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cascade_key", "input.LT(1).getText().equalsIgnoreCase(\"cascade\")");
            }

            REGULAR_ID227=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cascade_key7993); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID227);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1224:76: -> CASCADE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CASCADE_VK, REGULAR_ID227)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cascade_key"


    public static class data_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "data_key"
    // main.java.PLSQLKeys.g:1227:1: data_key :{...}? => REGULAR_ID ;
    public final data_key_return data_key() throws RecognitionException {
        data_key_return retval = new data_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID228=null;

        Object REGULAR_ID228_tree=null;

        try {
            // main.java.PLSQLKeys.g:1228:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1228:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("data"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "data_key", "input.LT(1).getText().equalsIgnoreCase(\"data\")");
            }

            REGULAR_ID228=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_data_key8022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID228_tree = 
            (Object)adaptor.create(REGULAR_ID228)
            ;
            adaptor.addChild(root_0, REGULAR_ID228_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "data_key"


    public static class invalidate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "invalidate_key"
    // main.java.PLSQLKeys.g:1231:1: invalidate_key :{...}? => REGULAR_ID -> INVALIDATE_VK[$REGULAR_ID] ;
    public final invalidate_key_return invalidate_key() throws RecognitionException {
        invalidate_key_return retval = new invalidate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID229=null;

        Object REGULAR_ID229_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1232:5: ({...}? => REGULAR_ID -> INVALIDATE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1232:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("invalidate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "invalidate_key", "input.LT(1).getText().equalsIgnoreCase(\"invalidate\")");
            }

            REGULAR_ID229=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_invalidate_key8045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID229);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1232:79: -> INVALIDATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INVALIDATE_VK, REGULAR_ID229)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "invalidate_key"


    public static class element_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_key"
    // main.java.PLSQLKeys.g:1235:1: element_key :{...}? => REGULAR_ID ;
    public final element_key_return element_key() throws RecognitionException {
        element_key_return retval = new element_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID230=null;

        Object REGULAR_ID230_tree=null;

        try {
            // main.java.PLSQLKeys.g:1236:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1236:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("element"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "element_key", "input.LT(1).getText().equalsIgnoreCase(\"element\")");
            }

            REGULAR_ID230=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_element_key8073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID230_tree = 
            (Object)adaptor.create(REGULAR_ID230)
            ;
            adaptor.addChild(root_0, REGULAR_ID230_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_key"


    public static class first_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "first_key"
    // main.java.PLSQLKeys.g:1239:1: first_key :{...}? => REGULAR_ID -> FIRST_VK[$REGULAR_ID] ;
    public final first_key_return first_key() throws RecognitionException {
        first_key_return retval = new first_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID231=null;

        Object REGULAR_ID231_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1240:5: ({...}? => REGULAR_ID -> FIRST_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1240:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("first"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "first_key", "input.LT(1).getText().equalsIgnoreCase(\"first\")");
            }

            REGULAR_ID231=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_first_key8096); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID231);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1240:74: -> FIRST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FIRST_VK, REGULAR_ID231)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "first_key"


    public static class check_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "check_key"
    // main.java.PLSQLKeys.g:1243:1: check_key : SQL92_RESERVED_CHECK ;
    public final check_key_return check_key() throws RecognitionException {
        check_key_return retval = new check_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_CHECK232=null;

        Object SQL92_RESERVED_CHECK232_tree=null;

        try {
            // main.java.PLSQLKeys.g:1244:5: ( SQL92_RESERVED_CHECK )
            // main.java.PLSQLKeys.g:1244:10: SQL92_RESERVED_CHECK
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_CHECK232=(Token)match(input,SQL92_RESERVED_CHECK,FOLLOW_SQL92_RESERVED_CHECK_in_check_key8121); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CHECK232_tree = 
            (Object)adaptor.create(SQL92_RESERVED_CHECK232)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_CHECK232_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "check_key"


    public static class option_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "option_key"
    // main.java.PLSQLKeys.g:1247:1: option_key : SQL92_RESERVED_OPTION ;
    public final option_key_return option_key() throws RecognitionException {
        option_key_return retval = new option_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_OPTION233=null;

        Object SQL92_RESERVED_OPTION233_tree=null;

        try {
            // main.java.PLSQLKeys.g:1248:5: ( SQL92_RESERVED_OPTION )
            // main.java.PLSQLKeys.g:1248:10: SQL92_RESERVED_OPTION
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_OPTION233=(Token)match(input,SQL92_RESERVED_OPTION,FOLLOW_SQL92_RESERVED_OPTION_in_option_key8141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_OPTION233_tree = 
            (Object)adaptor.create(SQL92_RESERVED_OPTION233)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_OPTION233_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "option_key"


    public static class nocycle_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nocycle_key"
    // main.java.PLSQLKeys.g:1251:1: nocycle_key :{...}? => REGULAR_ID -> NOCYCLE_VK[$REGULAR_ID] ;
    public final nocycle_key_return nocycle_key() throws RecognitionException {
        nocycle_key_return retval = new nocycle_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID234=null;

        Object REGULAR_ID234_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1252:5: ({...}? => REGULAR_ID -> NOCYCLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1252:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nocycle"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nocycle_key", "input.LT(1).getText().equalsIgnoreCase(\"nocycle\")");
            }

            REGULAR_ID234=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nocycle_key8164); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID234);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1252:76: -> NOCYCLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NOCYCLE_VK, REGULAR_ID234)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nocycle_key"


    public static class locked_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "locked_key"
    // main.java.PLSQLKeys.g:1255:1: locked_key :{...}? => REGULAR_ID ;
    public final locked_key_return locked_key() throws RecognitionException {
        locked_key_return retval = new locked_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID235=null;

        Object REGULAR_ID235_tree=null;

        try {
            // main.java.PLSQLKeys.g:1256:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1256:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("locked"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "locked_key", "input.LT(1).getText().equalsIgnoreCase(\"locked\")");
            }

            REGULAR_ID235=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_locked_key8192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID235_tree = 
            (Object)adaptor.create(REGULAR_ID235)
            ;
            adaptor.addChild(root_0, REGULAR_ID235_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "locked_key"


    public static class block_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_key"
    // main.java.PLSQLKeys.g:1259:1: block_key :{...}? => REGULAR_ID -> BLOCK_VK[$REGULAR_ID] ;
    public final block_key_return block_key() throws RecognitionException {
        block_key_return retval = new block_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID236=null;

        Object REGULAR_ID236_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1260:5: ({...}? => REGULAR_ID -> BLOCK_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1260:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("block"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "block_key", "input.LT(1).getText().equalsIgnoreCase(\"block\")");
            }

            REGULAR_ID236=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_block_key8215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID236);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1260:74: -> BLOCK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BLOCK_VK, REGULAR_ID236)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_key"


    public static class xml_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xml_key"
    // main.java.PLSQLKeys.g:1263:1: xml_key :{...}? => REGULAR_ID -> XML_VK[$REGULAR_ID] ;
    public final xml_key_return xml_key() throws RecognitionException {
        xml_key_return retval = new xml_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID237=null;

        Object REGULAR_ID237_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1264:5: ({...}? => REGULAR_ID -> XML_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1264:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xml"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xml_key", "input.LT(1).getText().equalsIgnoreCase(\"xml\")");
            }

            REGULAR_ID237=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xml_key8243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID237);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1264:72: -> XML_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XML_VK, REGULAR_ID237)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xml_key"


    public static class pivot_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pivot_key"
    // main.java.PLSQLKeys.g:1267:1: pivot_key :{...}? => REGULAR_ID -> PIVOT_VK[$REGULAR_ID] ;
    public final pivot_key_return pivot_key() throws RecognitionException {
        pivot_key_return retval = new pivot_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID238=null;

        Object REGULAR_ID238_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1268:5: ({...}? => REGULAR_ID -> PIVOT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1268:10: {...}? => REGULAR_ID
            {
            if ( !(((input.LT(1).getText().equalsIgnoreCase("pivot")))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "pivot_key", "(input.LT(1).getText().equalsIgnoreCase(\"pivot\"))");
            }

            REGULAR_ID238=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_pivot_key8271); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID238);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1268:76: -> PIVOT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PIVOT_VK, REGULAR_ID238)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pivot_key"


    public static class prior_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prior_key"
    // main.java.PLSQLKeys.g:1271:1: prior_key : SQL92_RESERVED_PRIOR ;
    public final prior_key_return prior_key() throws RecognitionException {
        prior_key_return retval = new prior_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_PRIOR239=null;

        Object SQL92_RESERVED_PRIOR239_tree=null;

        try {
            // main.java.PLSQLKeys.g:1272:5: ( SQL92_RESERVED_PRIOR )
            // main.java.PLSQLKeys.g:1272:10: SQL92_RESERVED_PRIOR
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_PRIOR239=(Token)match(input,SQL92_RESERVED_PRIOR,FOLLOW_SQL92_RESERVED_PRIOR_in_prior_key8296); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_PRIOR239_tree = 
            (Object)adaptor.create(SQL92_RESERVED_PRIOR239)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_PRIOR239_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prior_key"


    public static class sequential_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sequential_key"
    // main.java.PLSQLKeys.g:1275:1: sequential_key :{...}? => REGULAR_ID -> SEQUENTIAL_VK[$REGULAR_ID] ;
    public final sequential_key_return sequential_key() throws RecognitionException {
        sequential_key_return retval = new sequential_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID240=null;

        Object REGULAR_ID240_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1276:5: ({...}? => REGULAR_ID -> SEQUENTIAL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1276:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("sequential"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sequential_key", "input.LT(1).getText().equalsIgnoreCase(\"sequential\")");
            }

            REGULAR_ID240=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sequential_key8319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID240);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1276:79: -> SEQUENTIAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SEQUENTIAL_VK, REGULAR_ID240)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sequential_key"


    public static class single_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_key"
    // main.java.PLSQLKeys.g:1279:1: single_key :{...}? => REGULAR_ID -> SINGLE_VK[$REGULAR_ID] ;
    public final single_key_return single_key() throws RecognitionException {
        single_key_return retval = new single_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID241=null;

        Object REGULAR_ID241_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1280:5: ({...}? => REGULAR_ID -> SINGLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1280:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("single"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "single_key", "input.LT(1).getText().equalsIgnoreCase(\"single\")");
            }

            REGULAR_ID241=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_single_key8347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID241);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1280:75: -> SINGLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SINGLE_VK, REGULAR_ID241)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_key"


    public static class skip_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "skip_key"
    // main.java.PLSQLKeys.g:1283:1: skip_key :{...}? => REGULAR_ID -> SKIP_VK[$REGULAR_ID] ;
    public final skip_key_return skip_key() throws RecognitionException {
        skip_key_return retval = new skip_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID242=null;

        Object REGULAR_ID242_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1284:5: ({...}? => REGULAR_ID -> SKIP_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1284:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("skip"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "skip_key", "input.LT(1).getText().equalsIgnoreCase(\"skip\")");
            }

            REGULAR_ID242=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_skip_key8375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID242);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1284:73: -> SKIP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SKIP_VK, REGULAR_ID242)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "skip_key"


    public static class model_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_key"
    // main.java.PLSQLKeys.g:1287:1: model_key : PLSQL_NON_RESERVED_MODEL ;
    public final model_key_return model_key() throws RecognitionException {
        model_key_return retval = new model_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_NON_RESERVED_MODEL243=null;

        Object PLSQL_NON_RESERVED_MODEL243_tree=null;

        try {
            // main.java.PLSQLKeys.g:1288:5: ( PLSQL_NON_RESERVED_MODEL )
            // main.java.PLSQLKeys.g:1289:9: PLSQL_NON_RESERVED_MODEL
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_NON_RESERVED_MODEL243=(Token)match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_key8409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_NON_RESERVED_MODEL243_tree = 
            (Object)adaptor.create(PLSQL_NON_RESERVED_MODEL243)
            ;
            adaptor.addChild(root_0, PLSQL_NON_RESERVED_MODEL243_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_key"


    public static class updated_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "updated_key"
    // main.java.PLSQLKeys.g:1292:1: updated_key :{...}? => REGULAR_ID -> UPDATED_VK[$REGULAR_ID] ;
    public final updated_key_return updated_key() throws RecognitionException {
        updated_key_return retval = new updated_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID244=null;

        Object REGULAR_ID244_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1293:5: ({...}? => REGULAR_ID -> UPDATED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1293:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("updated"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "updated_key", "input.LT(1).getText().equalsIgnoreCase(\"updated\")");
            }

            REGULAR_ID244=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_updated_key8432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID244);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1293:76: -> UPDATED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(UPDATED_VK, REGULAR_ID244)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "updated_key"


    public static class increment_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_key"
    // main.java.PLSQLKeys.g:1296:1: increment_key :{...}? => REGULAR_ID -> INCREMENT_VK[$REGULAR_ID] ;
    public final increment_key_return increment_key() throws RecognitionException {
        increment_key_return retval = new increment_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID245=null;

        Object REGULAR_ID245_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1297:5: ({...}? => REGULAR_ID -> INCREMENT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1297:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("increment"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "increment_key", "input.LT(1).getText().equalsIgnoreCase(\"increment\")");
            }

            REGULAR_ID245=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_increment_key8460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID245);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1297:78: -> INCREMENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INCREMENT_VK, REGULAR_ID245)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_key"


    public static class exclude_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exclude_key"
    // main.java.PLSQLKeys.g:1300:1: exclude_key :{...}? => REGULAR_ID -> EXCLUDE_VK[$REGULAR_ID] ;
    public final exclude_key_return exclude_key() throws RecognitionException {
        exclude_key_return retval = new exclude_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID246=null;

        Object REGULAR_ID246_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1301:5: ({...}? => REGULAR_ID -> EXCLUDE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1301:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("exclude"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "exclude_key", "input.LT(1).getText().equalsIgnoreCase(\"exclude\")");
            }

            REGULAR_ID246=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_exclude_key8488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID246);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1301:76: -> EXCLUDE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(EXCLUDE_VK, REGULAR_ID246)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exclude_key"


    public static class reference_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reference_key"
    // main.java.PLSQLKeys.g:1304:1: reference_key :{...}? => REGULAR_ID -> REFERENCE_VK[$REGULAR_ID] ;
    public final reference_key_return reference_key() throws RecognitionException {
        reference_key_return retval = new reference_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID247=null;

        Object REGULAR_ID247_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1305:5: ({...}? => REGULAR_ID -> REFERENCE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1305:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("reference"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reference_key", "input.LT(1).getText().equalsIgnoreCase(\"reference\")");
            }

            REGULAR_ID247=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_reference_key8516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID247);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1305:78: -> REFERENCE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(REFERENCE_VK, REGULAR_ID247)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reference_key"


    public static class sets_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sets_key"
    // main.java.PLSQLKeys.g:1308:1: sets_key :{...}? => REGULAR_ID ;
    public final sets_key_return sets_key() throws RecognitionException {
        sets_key_return retval = new sets_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID248=null;

        Object REGULAR_ID248_tree=null;

        try {
            // main.java.PLSQLKeys.g:1309:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1309:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("sets"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sets_key", "input.LT(1).getText().equalsIgnoreCase(\"sets\")");
            }

            REGULAR_ID248=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sets_key8544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID248_tree = 
            (Object)adaptor.create(REGULAR_ID248)
            ;
            adaptor.addChild(root_0, REGULAR_ID248_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sets_key"


    public static class until_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "until_key"
    // main.java.PLSQLKeys.g:1312:1: until_key :{...}? => REGULAR_ID -> UNTIL_VK[$REGULAR_ID] ;
    public final until_key_return until_key() throws RecognitionException {
        until_key_return retval = new until_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID249=null;

        Object REGULAR_ID249_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1313:5: ({...}? => REGULAR_ID -> UNTIL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1313:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("until"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "until_key", "input.LT(1).getText().equalsIgnoreCase(\"until\")");
            }

            REGULAR_ID249=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_until_key8567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID249);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1313:74: -> UNTIL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(UNTIL_VK, REGULAR_ID249)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "until_key"


    public static class seed_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "seed_key"
    // main.java.PLSQLKeys.g:1316:1: seed_key :{...}? => REGULAR_ID -> SEED_VK[$REGULAR_ID] ;
    public final seed_key_return seed_key() throws RecognitionException {
        seed_key_return retval = new seed_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID250=null;

        Object REGULAR_ID250_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1317:5: ({...}? => REGULAR_ID -> SEED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1317:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("seed"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "seed_key", "input.LT(1).getText().equalsIgnoreCase(\"seed\")");
            }

            REGULAR_ID250=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_seed_key8595); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID250);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1317:73: -> SEED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SEED_VK, REGULAR_ID250)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "seed_key"


    public static class maxvalue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "maxvalue_key"
    // main.java.PLSQLKeys.g:1320:1: maxvalue_key :{...}? => REGULAR_ID -> MAXVALUE_VK[$REGULAR_ID] ;
    public final maxvalue_key_return maxvalue_key() throws RecognitionException {
        maxvalue_key_return retval = new maxvalue_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID251=null;

        Object REGULAR_ID251_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1321:5: ({...}? => REGULAR_ID -> MAXVALUE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1321:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("maxvalue"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "maxvalue_key", "input.LT(1).getText().equalsIgnoreCase(\"maxvalue\")");
            }

            REGULAR_ID251=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_maxvalue_key8623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID251);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1321:77: -> MAXVALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(MAXVALUE_VK, REGULAR_ID251)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "maxvalue_key"


    public static class siblings_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "siblings_key"
    // main.java.PLSQLKeys.g:1324:1: siblings_key :{...}? => REGULAR_ID -> SIBLINGS_VK[$REGULAR_ID] ;
    public final siblings_key_return siblings_key() throws RecognitionException {
        siblings_key_return retval = new siblings_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID252=null;

        Object REGULAR_ID252_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1325:5: ({...}? => REGULAR_ID -> SIBLINGS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1325:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("siblings"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "siblings_key", "input.LT(1).getText().equalsIgnoreCase(\"siblings\")");
            }

            REGULAR_ID252=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_siblings_key8651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID252);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1325:77: -> SIBLINGS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SIBLINGS_VK, REGULAR_ID252)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "siblings_key"


    public static class cube_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cube_key"
    // main.java.PLSQLKeys.g:1328:1: cube_key :{...}? => REGULAR_ID -> CUBE_VK[$REGULAR_ID] ;
    public final cube_key_return cube_key() throws RecognitionException {
        cube_key_return retval = new cube_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID253=null;

        Object REGULAR_ID253_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1329:5: ({...}? => REGULAR_ID -> CUBE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1329:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cube"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cube_key", "input.LT(1).getText().equalsIgnoreCase(\"cube\")");
            }

            REGULAR_ID253=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cube_key8679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID253);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1329:73: -> CUBE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CUBE_VK, REGULAR_ID253)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cube_key"


    public static class nulls_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nulls_key"
    // main.java.PLSQLKeys.g:1332:1: nulls_key :{...}? => REGULAR_ID -> NULLS_VK[$REGULAR_ID] ;
    public final nulls_key_return nulls_key() throws RecognitionException {
        nulls_key_return retval = new nulls_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID254=null;

        Object REGULAR_ID254_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1333:5: ({...}? => REGULAR_ID -> NULLS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1333:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nulls"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nulls_key", "input.LT(1).getText().equalsIgnoreCase(\"nulls\")");
            }

            REGULAR_ID254=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nulls_key8707); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID254);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1333:74: -> NULLS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NULLS_VK, REGULAR_ID254)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nulls_key"


    public static class dimension_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dimension_key"
    // main.java.PLSQLKeys.g:1336:1: dimension_key :{...}? => REGULAR_ID -> DIMENSION_VK[$REGULAR_ID] ;
    public final dimension_key_return dimension_key() throws RecognitionException {
        dimension_key_return retval = new dimension_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID255=null;

        Object REGULAR_ID255_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1337:5: ({...}? => REGULAR_ID -> DIMENSION_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1337:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("dimension"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dimension_key", "input.LT(1).getText().equalsIgnoreCase(\"dimension\")");
            }

            REGULAR_ID255=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dimension_key8735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID255);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1337:78: -> DIMENSION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DIMENSION_VK, REGULAR_ID255)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dimension_key"


    public static class scn_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "scn_key"
    // main.java.PLSQLKeys.g:1340:1: scn_key :{...}? => REGULAR_ID -> SCN_VK[$REGULAR_ID] ;
    public final scn_key_return scn_key() throws RecognitionException {
        scn_key_return retval = new scn_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID256=null;

        Object REGULAR_ID256_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1341:5: ({...}? => REGULAR_ID -> SCN_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1341:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("scn"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "scn_key", "input.LT(1).getText().equalsIgnoreCase(\"scn\")");
            }

            REGULAR_ID256=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_scn_key8763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID256);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1341:72: -> SCN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SCN_VK, REGULAR_ID256)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "scn_key"


    public static class snapshot_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "snapshot_key"
    // main.java.PLSQLKeys.g:1344:1: snapshot_key :{...}? => REGULAR_ID ;
    public final snapshot_key_return snapshot_key() throws RecognitionException {
        snapshot_key_return retval = new snapshot_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID257=null;

        Object REGULAR_ID257_tree=null;

        try {
            // main.java.PLSQLKeys.g:1345:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1345:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("snapshot"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "snapshot_key", "input.LT(1).getText().equalsIgnoreCase(\"snapshot\")");
            }

            REGULAR_ID257=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_snapshot_key8791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID257_tree = 
            (Object)adaptor.create(REGULAR_ID257)
            ;
            adaptor.addChild(root_0, REGULAR_ID257_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "snapshot_key"


    public static class decrement_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "decrement_key"
    // main.java.PLSQLKeys.g:1348:1: decrement_key :{...}? => REGULAR_ID -> DECREMENT_VK[$REGULAR_ID] ;
    public final decrement_key_return decrement_key() throws RecognitionException {
        decrement_key_return retval = new decrement_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID258=null;

        Object REGULAR_ID258_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1349:5: ({...}? => REGULAR_ID -> DECREMENT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1349:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("decrement"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "decrement_key", "input.LT(1).getText().equalsIgnoreCase(\"decrement\")");
            }

            REGULAR_ID258=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_decrement_key8814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID258);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1349:78: -> DECREMENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DECREMENT_VK, REGULAR_ID258)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "decrement_key"


    public static class unpivot_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unpivot_key"
    // main.java.PLSQLKeys.g:1352:1: unpivot_key :{...}? => REGULAR_ID -> UNPIVOT_VK[$REGULAR_ID] ;
    public final unpivot_key_return unpivot_key() throws RecognitionException {
        unpivot_key_return retval = new unpivot_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID259=null;

        Object REGULAR_ID259_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1353:5: ({...}? => REGULAR_ID -> UNPIVOT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1353:10: {...}? => REGULAR_ID
            {
            if ( !(((input.LT(1).getText().equalsIgnoreCase("unpivot")))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "unpivot_key", "(input.LT(1).getText().equalsIgnoreCase(\"unpivot\"))");
            }

            REGULAR_ID259=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_unpivot_key8842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID259);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1353:78: -> UNPIVOT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(UNPIVOT_VK, REGULAR_ID259)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unpivot_key"


    public static class keep_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keep_key"
    // main.java.PLSQLKeys.g:1356:1: keep_key :{...}? => REGULAR_ID -> KEEP_VK[$REGULAR_ID] ;
    public final keep_key_return keep_key() throws RecognitionException {
        keep_key_return retval = new keep_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID260=null;

        Object REGULAR_ID260_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1357:5: ({...}? => REGULAR_ID -> KEEP_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1357:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("keep"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keep_key", "input.LT(1).getText().equalsIgnoreCase(\"keep\")");
            }

            REGULAR_ID260=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_keep_key8870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID260);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1357:73: -> KEEP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(KEEP_VK, REGULAR_ID260)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "keep_key"


    public static class measures_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "measures_key"
    // main.java.PLSQLKeys.g:1360:1: measures_key :{...}? => REGULAR_ID -> MEASURES_VK[$REGULAR_ID] ;
    public final measures_key_return measures_key() throws RecognitionException {
        measures_key_return retval = new measures_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID261=null;

        Object REGULAR_ID261_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1361:5: ({...}? => REGULAR_ID -> MEASURES_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1361:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("measures"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "measures_key", "input.LT(1).getText().equalsIgnoreCase(\"measures\")");
            }

            REGULAR_ID261=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_measures_key8898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID261);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1361:77: -> MEASURES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(MEASURES_VK, REGULAR_ID261)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "measures_key"


    public static class rows_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rows_key"
    // main.java.PLSQLKeys.g:1364:1: rows_key :{...}? => REGULAR_ID -> ROWS_VK[$REGULAR_ID] ;
    public final rows_key_return rows_key() throws RecognitionException {
        rows_key_return retval = new rows_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID262=null;

        Object REGULAR_ID262_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1365:5: ({...}? => REGULAR_ID -> ROWS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1365:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rows"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rows_key", "input.LT(1).getText().equalsIgnoreCase(\"rows\")");
            }

            REGULAR_ID262=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rows_key8926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID262);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1365:73: -> ROWS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ROWS_VK, REGULAR_ID262)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rows_key"


    public static class sample_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_key"
    // main.java.PLSQLKeys.g:1368:1: sample_key :{...}? => REGULAR_ID -> SAMPLE_VK[$REGULAR_ID] ;
    public final sample_key_return sample_key() throws RecognitionException {
        sample_key_return retval = new sample_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID263=null;

        Object REGULAR_ID263_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1369:5: ({...}? => REGULAR_ID -> SAMPLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1369:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("sample"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sample_key", "input.LT(1).getText().equalsIgnoreCase(\"sample\")");
            }

            REGULAR_ID263=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sample_key8954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID263);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1369:75: -> SAMPLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SAMPLE_VK, REGULAR_ID263)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_key"


    public static class upsert_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "upsert_key"
    // main.java.PLSQLKeys.g:1372:1: upsert_key :{...}? => REGULAR_ID -> UPSERT_VK[$REGULAR_ID] ;
    public final upsert_key_return upsert_key() throws RecognitionException {
        upsert_key_return retval = new upsert_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID264=null;

        Object REGULAR_ID264_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1373:5: ({...}? => REGULAR_ID -> UPSERT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1373:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("upsert"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "upsert_key", "input.LT(1).getText().equalsIgnoreCase(\"upsert\")");
            }

            REGULAR_ID264=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_upsert_key8982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID264);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1373:75: -> UPSERT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(UPSERT_VK, REGULAR_ID264)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "upsert_key"


    public static class versions_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "versions_key"
    // main.java.PLSQLKeys.g:1376:1: versions_key :{...}? => REGULAR_ID -> VERSIONS_VK[$REGULAR_ID] ;
    public final versions_key_return versions_key() throws RecognitionException {
        versions_key_return retval = new versions_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID265=null;

        Object REGULAR_ID265_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1377:5: ({...}? => REGULAR_ID -> VERSIONS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1377:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("versions"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "versions_key", "input.LT(1).getText().equalsIgnoreCase(\"versions\")");
            }

            REGULAR_ID265=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_versions_key9010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID265);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1377:77: -> VERSIONS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(VERSIONS_VK, REGULAR_ID265)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "versions_key"


    public static class rules_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rules_key"
    // main.java.PLSQLKeys.g:1380:1: rules_key :{...}? => REGULAR_ID -> RULES_VK[$REGULAR_ID] ;
    public final rules_key_return rules_key() throws RecognitionException {
        rules_key_return retval = new rules_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID266=null;

        Object REGULAR_ID266_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1381:5: ({...}? => REGULAR_ID -> RULES_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1381:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rules"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rules_key", "input.LT(1).getText().equalsIgnoreCase(\"rules\")");
            }

            REGULAR_ID266=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rules_key9038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID266);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1381:74: -> RULES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RULES_VK, REGULAR_ID266)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rules_key"


    public static class iterate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "iterate_key"
    // main.java.PLSQLKeys.g:1384:1: iterate_key :{...}? => REGULAR_ID -> ITERATE_VK[$REGULAR_ID] ;
    public final iterate_key_return iterate_key() throws RecognitionException {
        iterate_key_return retval = new iterate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID267=null;

        Object REGULAR_ID267_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1385:5: ({...}? => REGULAR_ID -> ITERATE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1385:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("iterate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "iterate_key", "input.LT(1).getText().equalsIgnoreCase(\"iterate\")");
            }

            REGULAR_ID267=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_iterate_key9066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID267);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1385:76: -> ITERATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ITERATE_VK, REGULAR_ID267)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "iterate_key"


    public static class minvalue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "minvalue_key"
    // main.java.PLSQLKeys.g:1388:1: minvalue_key :{...}? => REGULAR_ID -> MINVALUE_VK[$REGULAR_ID] ;
    public final minvalue_key_return minvalue_key() throws RecognitionException {
        minvalue_key_return retval = new minvalue_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID268=null;

        Object REGULAR_ID268_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1389:5: ({...}? => REGULAR_ID -> MINVALUE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1389:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("minvalue"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "minvalue_key", "input.LT(1).getText().equalsIgnoreCase(\"minvalue\")");
            }

            REGULAR_ID268=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_minvalue_key9094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID268);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1389:77: -> MINVALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(MINVALUE_VK, REGULAR_ID268)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "minvalue_key"


    public static class rollup_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rollup_key"
    // main.java.PLSQLKeys.g:1392:1: rollup_key :{...}? => REGULAR_ID -> ROLLUP_VK[$REGULAR_ID] ;
    public final rollup_key_return rollup_key() throws RecognitionException {
        rollup_key_return retval = new rollup_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID269=null;

        Object REGULAR_ID269_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1393:5: ({...}? => REGULAR_ID -> ROLLUP_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1393:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rollup"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rollup_key", "input.LT(1).getText().equalsIgnoreCase(\"rollup\")");
            }

            REGULAR_ID269=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rollup_key9122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID269);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1393:75: -> ROLLUP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ROLLUP_VK, REGULAR_ID269)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rollup_key"


    public static class nav_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nav_key"
    // main.java.PLSQLKeys.g:1396:1: nav_key :{...}? => REGULAR_ID -> NAV_VK[$REGULAR_ID] ;
    public final nav_key_return nav_key() throws RecognitionException {
        nav_key_return retval = new nav_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID270=null;

        Object REGULAR_ID270_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1397:5: ({...}? => REGULAR_ID -> NAV_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1397:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nav"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nav_key", "input.LT(1).getText().equalsIgnoreCase(\"nav\")");
            }

            REGULAR_ID270=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nav_key9150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID270);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1397:72: -> NAV_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NAV_VK, REGULAR_ID270)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nav_key"


    public static class automatic_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "automatic_key"
    // main.java.PLSQLKeys.g:1400:1: automatic_key :{...}? => REGULAR_ID -> AUTOMATIC_VK[$REGULAR_ID] ;
    public final automatic_key_return automatic_key() throws RecognitionException {
        automatic_key_return retval = new automatic_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID271=null;

        Object REGULAR_ID271_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1401:5: ({...}? => REGULAR_ID -> AUTOMATIC_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1401:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("automatic"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "automatic_key", "input.LT(1).getText().equalsIgnoreCase(\"automatic\")");
            }

            REGULAR_ID271=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_automatic_key9178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID271);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1401:78: -> AUTOMATIC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(AUTOMATIC_VK, REGULAR_ID271)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "automatic_key"


    public static class last_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "last_key"
    // main.java.PLSQLKeys.g:1404:1: last_key :{...}? => REGULAR_ID -> LAST_VK[$REGULAR_ID] ;
    public final last_key_return last_key() throws RecognitionException {
        last_key_return retval = new last_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID272=null;

        Object REGULAR_ID272_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1405:5: ({...}? => REGULAR_ID -> LAST_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1405:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("last"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "last_key", "input.LT(1).getText().equalsIgnoreCase(\"last\")");
            }

            REGULAR_ID272=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_last_key9206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID272);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1405:73: -> LAST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LAST_VK, REGULAR_ID272)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "last_key"


    public static class main_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "main_key"
    // main.java.PLSQLKeys.g:1408:1: main_key :{...}? => REGULAR_ID ;
    public final main_key_return main_key() throws RecognitionException {
        main_key_return retval = new main_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID273=null;

        Object REGULAR_ID273_tree=null;

        try {
            // main.java.PLSQLKeys.g:1409:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1409:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("main"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "main_key", "input.LT(1).getText().equalsIgnoreCase(\"main\")");
            }

            REGULAR_ID273=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_main_key9234); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID273_tree = 
            (Object)adaptor.create(REGULAR_ID273)
            ;
            adaptor.addChild(root_0, REGULAR_ID273_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "main_key"


    public static class grouping_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_key"
    // main.java.PLSQLKeys.g:1412:1: grouping_key :{...}? => REGULAR_ID -> GROUPING_VK[$REGULAR_ID] ;
    public final grouping_key_return grouping_key() throws RecognitionException {
        grouping_key_return retval = new grouping_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID274=null;

        Object REGULAR_ID274_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1413:5: ({...}? => REGULAR_ID -> GROUPING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1413:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("grouping"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "grouping_key", "input.LT(1).getText().equalsIgnoreCase(\"grouping\")");
            }

            REGULAR_ID274=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_grouping_key9257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID274);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1413:77: -> GROUPING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(GROUPING_VK, REGULAR_ID274)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grouping_key"


    public static class include_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "include_key"
    // main.java.PLSQLKeys.g:1416:1: include_key :{...}? => REGULAR_ID -> INCLUDE_VK[$REGULAR_ID] ;
    public final include_key_return include_key() throws RecognitionException {
        include_key_return retval = new include_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID275=null;

        Object REGULAR_ID275_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1417:5: ({...}? => REGULAR_ID -> INCLUDE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1417:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("include"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "include_key", "input.LT(1).getText().equalsIgnoreCase(\"include\")");
            }

            REGULAR_ID275=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_include_key9285); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID275);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1417:76: -> INCLUDE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INCLUDE_VK, REGULAR_ID275)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "include_key"


    public static class ignore_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ignore_key"
    // main.java.PLSQLKeys.g:1420:1: ignore_key :{...}? => REGULAR_ID -> IGNORE_VK[$REGULAR_ID] ;
    public final ignore_key_return ignore_key() throws RecognitionException {
        ignore_key_return retval = new ignore_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID276=null;

        Object REGULAR_ID276_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1421:5: ({...}? => REGULAR_ID -> IGNORE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1421:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("ignore"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ignore_key", "input.LT(1).getText().equalsIgnoreCase(\"ignore\")");
            }

            REGULAR_ID276=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ignore_key9313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID276);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1421:75: -> IGNORE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(IGNORE_VK, REGULAR_ID276)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ignore_key"


    public static class respect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "respect_key"
    // main.java.PLSQLKeys.g:1424:1: respect_key :{...}? => REGULAR_ID -> RESPECT_VK[$REGULAR_ID] ;
    public final respect_key_return respect_key() throws RecognitionException {
        respect_key_return retval = new respect_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID277=null;

        Object REGULAR_ID277_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1425:5: ({...}? => REGULAR_ID -> RESPECT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1425:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("respect"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "respect_key", "input.LT(1).getText().equalsIgnoreCase(\"respect\")");
            }

            REGULAR_ID277=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_respect_key9341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID277);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1425:76: -> RESPECT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RESPECT_VK, REGULAR_ID277)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "respect_key"


    public static class unique_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unique_key"
    // main.java.PLSQLKeys.g:1428:1: unique_key : SQL92_RESERVED_UNIQUE ;
    public final unique_key_return unique_key() throws RecognitionException {
        unique_key_return retval = new unique_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_UNIQUE278=null;

        Object SQL92_RESERVED_UNIQUE278_tree=null;

        try {
            // main.java.PLSQLKeys.g:1429:5: ( SQL92_RESERVED_UNIQUE )
            // main.java.PLSQLKeys.g:1429:10: SQL92_RESERVED_UNIQUE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_UNIQUE278=(Token)match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_unique_key9365); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_UNIQUE278_tree = 
            (Object)adaptor.create(SQL92_RESERVED_UNIQUE278)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_UNIQUE278_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unique_key"


    public static class submultiset_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "submultiset_key"
    // main.java.PLSQLKeys.g:1432:1: submultiset_key :{...}? => REGULAR_ID -> SUBMULTISET_VK[$REGULAR_ID] ;
    public final submultiset_key_return submultiset_key() throws RecognitionException {
        submultiset_key_return retval = new submultiset_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID279=null;

        Object REGULAR_ID279_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1433:5: ({...}? => REGULAR_ID -> SUBMULTISET_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1433:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("submultiset"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "submultiset_key", "input.LT(1).getText().equalsIgnoreCase(\"submultiset\")");
            }

            REGULAR_ID279=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_submultiset_key9388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID279);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1433:80: -> SUBMULTISET_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SUBMULTISET_VK, REGULAR_ID279)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "submultiset_key"


    public static class at_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "at_key"
    // main.java.PLSQLKeys.g:1436:1: at_key :{...}? => REGULAR_ID -> AT_VK[$REGULAR_ID] ;
    public final at_key_return at_key() throws RecognitionException {
        at_key_return retval = new at_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID280=null;

        Object REGULAR_ID280_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1437:5: ({...}? => REGULAR_ID -> AT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1437:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("at"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "at_key", "input.LT(1).getText().equalsIgnoreCase(\"at\")");
            }

            REGULAR_ID280=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_at_key9416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID280);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1437:71: -> AT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(AT_VK, REGULAR_ID280)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "at_key"


    public static class a_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_key"
    // main.java.PLSQLKeys.g:1440:1: a_key :{...}? => REGULAR_ID ;
    public final a_key_return a_key() throws RecognitionException {
        a_key_return retval = new a_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID281=null;

        Object REGULAR_ID281_tree=null;

        try {
            // main.java.PLSQLKeys.g:1441:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1441:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("a"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "a_key", "input.LT(1).getText().equalsIgnoreCase(\"a\")");
            }

            REGULAR_ID281=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_a_key9444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID281_tree = 
            (Object)adaptor.create(REGULAR_ID281)
            ;
            adaptor.addChild(root_0, REGULAR_ID281_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_key"


    public static class empty_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "empty_key"
    // main.java.PLSQLKeys.g:1444:1: empty_key :{...}? => REGULAR_ID ;
    public final empty_key_return empty_key() throws RecognitionException {
        empty_key_return retval = new empty_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID282=null;

        Object REGULAR_ID282_tree=null;

        try {
            // main.java.PLSQLKeys.g:1445:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1445:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("empty"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "empty_key", "input.LT(1).getText().equalsIgnoreCase(\"empty\")");
            }

            REGULAR_ID282=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_empty_key9467); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID282_tree = 
            (Object)adaptor.create(REGULAR_ID282)
            ;
            adaptor.addChild(root_0, REGULAR_ID282_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "empty_key"


    public static class likec_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "likec_key"
    // main.java.PLSQLKeys.g:1448:1: likec_key :{...}? => REGULAR_ID -> LIKEC_VK[$REGULAR_ID] ;
    public final likec_key_return likec_key() throws RecognitionException {
        likec_key_return retval = new likec_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID283=null;

        Object REGULAR_ID283_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1449:5: ({...}? => REGULAR_ID -> LIKEC_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1449:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("likec"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "likec_key", "input.LT(1).getText().equalsIgnoreCase(\"likec\")");
            }

            REGULAR_ID283=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_likec_key9490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID283);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1449:74: -> LIKEC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LIKEC_VK, REGULAR_ID283)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "likec_key"


    public static class nan_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nan_key"
    // main.java.PLSQLKeys.g:1452:1: nan_key :{...}? => REGULAR_ID ;
    public final nan_key_return nan_key() throws RecognitionException {
        nan_key_return retval = new nan_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID284=null;

        Object REGULAR_ID284_tree=null;

        try {
            // main.java.PLSQLKeys.g:1453:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1453:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("nan"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nan_key", "input.LT(1).getText().equalsIgnoreCase(\"nan\")");
            }

            REGULAR_ID284=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nan_key9518); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID284_tree = 
            (Object)adaptor.create(REGULAR_ID284)
            ;
            adaptor.addChild(root_0, REGULAR_ID284_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nan_key"


    public static class infinite_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "infinite_key"
    // main.java.PLSQLKeys.g:1456:1: infinite_key :{...}? => REGULAR_ID ;
    public final infinite_key_return infinite_key() throws RecognitionException {
        infinite_key_return retval = new infinite_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID285=null;

        Object REGULAR_ID285_tree=null;

        try {
            // main.java.PLSQLKeys.g:1457:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1457:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("infinite"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "infinite_key", "input.LT(1).getText().equalsIgnoreCase(\"infinite\")");
            }

            REGULAR_ID285=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_infinite_key9541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID285_tree = 
            (Object)adaptor.create(REGULAR_ID285)
            ;
            adaptor.addChild(root_0, REGULAR_ID285_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "infinite_key"


    public static class like2_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "like2_key"
    // main.java.PLSQLKeys.g:1460:1: like2_key :{...}? => REGULAR_ID -> LIKE2_VK[$REGULAR_ID] ;
    public final like2_key_return like2_key() throws RecognitionException {
        like2_key_return retval = new like2_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID286=null;

        Object REGULAR_ID286_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1461:5: ({...}? => REGULAR_ID -> LIKE2_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1461:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("like2"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "like2_key", "input.LT(1).getText().equalsIgnoreCase(\"like2\")");
            }

            REGULAR_ID286=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_like2_key9564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID286);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1461:74: -> LIKE2_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LIKE2_VK, REGULAR_ID286)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "like2_key"


    public static class like4_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "like4_key"
    // main.java.PLSQLKeys.g:1464:1: like4_key :{...}? => REGULAR_ID -> LIKE4_VK[$REGULAR_ID] ;
    public final like4_key_return like4_key() throws RecognitionException {
        like4_key_return retval = new like4_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID287=null;

        Object REGULAR_ID287_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1465:5: ({...}? => REGULAR_ID -> LIKE4_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1465:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("like4"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "like4_key", "input.LT(1).getText().equalsIgnoreCase(\"like4\")");
            }

            REGULAR_ID287=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_like4_key9592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID287);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1465:74: -> LIKE4_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LIKE4_VK, REGULAR_ID287)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "like4_key"


    public static class present_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "present_key"
    // main.java.PLSQLKeys.g:1468:1: present_key :{...}? => REGULAR_ID ;
    public final present_key_return present_key() throws RecognitionException {
        present_key_return retval = new present_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID288=null;

        Object REGULAR_ID288_tree=null;

        try {
            // main.java.PLSQLKeys.g:1469:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1469:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("present"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "present_key", "input.LT(1).getText().equalsIgnoreCase(\"present\")");
            }

            REGULAR_ID288=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_present_key9620); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID288_tree = 
            (Object)adaptor.create(REGULAR_ID288)
            ;
            adaptor.addChild(root_0, REGULAR_ID288_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "present_key"


    public static class dbtimezone_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dbtimezone_key"
    // main.java.PLSQLKeys.g:1472:1: dbtimezone_key :{...}? => REGULAR_ID -> DBTIMEZONE_VK[$REGULAR_ID] ;
    public final dbtimezone_key_return dbtimezone_key() throws RecognitionException {
        dbtimezone_key_return retval = new dbtimezone_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID289=null;

        Object REGULAR_ID289_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1473:5: ({...}? => REGULAR_ID -> DBTIMEZONE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1473:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("dbtimezone"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dbtimezone_key", "input.LT(1).getText().equalsIgnoreCase(\"dbtimezone\")");
            }

            REGULAR_ID289=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dbtimezone_key9643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID289);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1473:79: -> DBTIMEZONE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DBTIMEZONE_VK, REGULAR_ID289)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dbtimezone_key"


    public static class sessiontimezone_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sessiontimezone_key"
    // main.java.PLSQLKeys.g:1476:1: sessiontimezone_key :{...}? => REGULAR_ID -> SESSIONTIMEZONE_VK[$REGULAR_ID] ;
    public final sessiontimezone_key_return sessiontimezone_key() throws RecognitionException {
        sessiontimezone_key_return retval = new sessiontimezone_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID290=null;

        Object REGULAR_ID290_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1477:5: ({...}? => REGULAR_ID -> SESSIONTIMEZONE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1477:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("sessiontimezone"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sessiontimezone_key", "input.LT(1).getText().equalsIgnoreCase(\"sessiontimezone\")");
            }

            REGULAR_ID290=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sessiontimezone_key9671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID290);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1477:84: -> SESSIONTIMEZONE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SESSIONTIMEZONE_VK, REGULAR_ID290)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sessiontimezone_key"


    public static class nchar_cs_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nchar_cs_key"
    // main.java.PLSQLKeys.g:1480:1: nchar_cs_key :{...}? => REGULAR_ID -> NCHAR_CS_VK[$REGULAR_ID] ;
    public final nchar_cs_key_return nchar_cs_key() throws RecognitionException {
        nchar_cs_key_return retval = new nchar_cs_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID291=null;

        Object REGULAR_ID291_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1481:5: ({...}? => REGULAR_ID -> NCHAR_CS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1481:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nchar_cs"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nchar_cs_key", "input.LT(1).getText().equalsIgnoreCase(\"nchar_cs\")");
            }

            REGULAR_ID291=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nchar_cs_key9699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID291);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1481:77: -> NCHAR_CS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NCHAR_CS_VK, REGULAR_ID291)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nchar_cs_key"


    public static class decompose_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "decompose_key"
    // main.java.PLSQLKeys.g:1484:1: decompose_key :{...}? => REGULAR_ID -> DECOMPOSE_VK[$REGULAR_ID] ;
    public final decompose_key_return decompose_key() throws RecognitionException {
        decompose_key_return retval = new decompose_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID292=null;

        Object REGULAR_ID292_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1485:5: ({...}? => REGULAR_ID -> DECOMPOSE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1485:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("decompose"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "decompose_key", "input.LT(1).getText().equalsIgnoreCase(\"decompose\")");
            }

            REGULAR_ID292=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_decompose_key9727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID292);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1485:78: -> DECOMPOSE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DECOMPOSE_VK, REGULAR_ID292)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "decompose_key"


    public static class following_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "following_key"
    // main.java.PLSQLKeys.g:1488:1: following_key :{...}? => REGULAR_ID -> FOLLOWING_VK[$REGULAR_ID] ;
    public final following_key_return following_key() throws RecognitionException {
        following_key_return retval = new following_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID293=null;

        Object REGULAR_ID293_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1489:5: ({...}? => REGULAR_ID -> FOLLOWING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1489:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("following"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "following_key", "input.LT(1).getText().equalsIgnoreCase(\"following\")");
            }

            REGULAR_ID293=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_following_key9755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID293);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1489:78: -> FOLLOWING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FOLLOWING_VK, REGULAR_ID293)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "following_key"


    public static class first_value_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "first_value_key"
    // main.java.PLSQLKeys.g:1492:1: first_value_key :{...}? => REGULAR_ID -> FIRST_VALUE_VK[$REGULAR_ID] ;
    public final first_value_key_return first_value_key() throws RecognitionException {
        first_value_key_return retval = new first_value_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID294=null;

        Object REGULAR_ID294_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1493:5: ({...}? => REGULAR_ID -> FIRST_VALUE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1493:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("first_value"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "first_value_key", "input.LT(1).getText().equalsIgnoreCase(\"first_value\")");
            }

            REGULAR_ID294=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_first_value_key9783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID294);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1493:80: -> FIRST_VALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FIRST_VALUE_VK, REGULAR_ID294)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "first_value_key"


    public static class preceding_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "preceding_key"
    // main.java.PLSQLKeys.g:1496:1: preceding_key :{...}? => REGULAR_ID -> PRECEDING_VK[$REGULAR_ID] ;
    public final preceding_key_return preceding_key() throws RecognitionException {
        preceding_key_return retval = new preceding_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID295=null;

        Object REGULAR_ID295_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1497:5: ({...}? => REGULAR_ID -> PRECEDING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1497:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("preceding"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "preceding_key", "input.LT(1).getText().equalsIgnoreCase(\"preceding\")");
            }

            REGULAR_ID295=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_preceding_key9811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID295);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1497:78: -> PRECEDING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PRECEDING_VK, REGULAR_ID295)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "preceding_key"


    public static class within_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "within_key"
    // main.java.PLSQLKeys.g:1500:1: within_key :{...}? => REGULAR_ID -> WITHIN_VK[$REGULAR_ID] ;
    public final within_key_return within_key() throws RecognitionException {
        within_key_return retval = new within_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID296=null;

        Object REGULAR_ID296_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1501:5: ({...}? => REGULAR_ID -> WITHIN_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1501:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("within"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "within_key", "input.LT(1).getText().equalsIgnoreCase(\"within\")");
            }

            REGULAR_ID296=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_within_key9839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID296);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1501:75: -> WITHIN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(WITHIN_VK, REGULAR_ID296)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "within_key"


    public static class canonical_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "canonical_key"
    // main.java.PLSQLKeys.g:1504:1: canonical_key :{...}? => REGULAR_ID -> CANONICAL_VK[$REGULAR_ID] ;
    public final canonical_key_return canonical_key() throws RecognitionException {
        canonical_key_return retval = new canonical_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID297=null;

        Object REGULAR_ID297_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1505:5: ({...}? => REGULAR_ID -> CANONICAL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1505:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("canonical"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "canonical_key", "input.LT(1).getText().equalsIgnoreCase(\"canonical\")");
            }

            REGULAR_ID297=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_canonical_key9867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID297);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1505:78: -> CANONICAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CANONICAL_VK, REGULAR_ID297)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "canonical_key"


    public static class compatibility_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compatibility_key"
    // main.java.PLSQLKeys.g:1508:1: compatibility_key :{...}? => REGULAR_ID -> COMPATIBILITY_VK[$REGULAR_ID] ;
    public final compatibility_key_return compatibility_key() throws RecognitionException {
        compatibility_key_return retval = new compatibility_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID298=null;

        Object REGULAR_ID298_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1509:5: ({...}? => REGULAR_ID -> COMPATIBILITY_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1509:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("compatibility"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "compatibility_key", "input.LT(1).getText().equalsIgnoreCase(\"compatibility\")");
            }

            REGULAR_ID298=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_compatibility_key9895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID298);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1509:82: -> COMPATIBILITY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(COMPATIBILITY_VK, REGULAR_ID298)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compatibility_key"


    public static class over_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "over_key"
    // main.java.PLSQLKeys.g:1512:1: over_key :{...}? => REGULAR_ID -> OVER_VK[$REGULAR_ID] ;
    public final over_key_return over_key() throws RecognitionException {
        over_key_return retval = new over_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID299=null;

        Object REGULAR_ID299_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1513:5: ({...}? => REGULAR_ID -> OVER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1513:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("over"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "over_key", "input.LT(1).getText().equalsIgnoreCase(\"over\")");
            }

            REGULAR_ID299=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_over_key9923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID299);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1513:73: -> OVER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(OVER_VK, REGULAR_ID299)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "over_key"


    public static class multiset_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multiset_key"
    // main.java.PLSQLKeys.g:1516:1: multiset_key :{...}? => REGULAR_ID ;
    public final multiset_key_return multiset_key() throws RecognitionException {
        multiset_key_return retval = new multiset_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID300=null;

        Object REGULAR_ID300_tree=null;

        try {
            // main.java.PLSQLKeys.g:1517:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1517:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("multiset"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "multiset_key", "input.LT(1).getText().equalsIgnoreCase(\"multiset\")");
            }

            REGULAR_ID300=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_multiset_key9951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID300_tree = 
            (Object)adaptor.create(REGULAR_ID300)
            ;
            adaptor.addChild(root_0, REGULAR_ID300_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multiset_key"


    public static class connect_by_root_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "connect_by_root_key"
    // main.java.PLSQLKeys.g:1520:1: connect_by_root_key : PLSQL_NON_RESERVED_CONNECT_BY_ROOT ;
    public final connect_by_root_key_return connect_by_root_key() throws RecognitionException {
        connect_by_root_key_return retval = new connect_by_root_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_NON_RESERVED_CONNECT_BY_ROOT301=null;

        Object PLSQL_NON_RESERVED_CONNECT_BY_ROOT301_tree=null;

        try {
            // main.java.PLSQLKeys.g:1521:5: ( PLSQL_NON_RESERVED_CONNECT_BY_ROOT )
            // main.java.PLSQLKeys.g:1521:10: PLSQL_NON_RESERVED_CONNECT_BY_ROOT
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_NON_RESERVED_CONNECT_BY_ROOT301=(Token)match(input,PLSQL_NON_RESERVED_CONNECT_BY_ROOT,FOLLOW_PLSQL_NON_RESERVED_CONNECT_BY_ROOT_in_connect_by_root_key9971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_NON_RESERVED_CONNECT_BY_ROOT301_tree = 
            (Object)adaptor.create(PLSQL_NON_RESERVED_CONNECT_BY_ROOT301)
            ;
            adaptor.addChild(root_0, PLSQL_NON_RESERVED_CONNECT_BY_ROOT301_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "connect_by_root_key"


    public static class last_value_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "last_value_key"
    // main.java.PLSQLKeys.g:1524:1: last_value_key :{...}? => REGULAR_ID -> LAST_VALUE_VK[$REGULAR_ID] ;
    public final last_value_key_return last_value_key() throws RecognitionException {
        last_value_key_return retval = new last_value_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID302=null;

        Object REGULAR_ID302_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1525:5: ({...}? => REGULAR_ID -> LAST_VALUE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1525:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("last_value"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "last_value_key", "input.LT(1).getText().equalsIgnoreCase(\"last_value\")");
            }

            REGULAR_ID302=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_last_value_key9994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID302);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1525:79: -> LAST_VALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LAST_VALUE_VK, REGULAR_ID302)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "last_value_key"


    public static class current_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "current_key"
    // main.java.PLSQLKeys.g:1528:1: current_key : SQL92_RESERVED_CURRENT ;
    public final current_key_return current_key() throws RecognitionException {
        current_key_return retval = new current_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_CURRENT303=null;

        Object SQL92_RESERVED_CURRENT303_tree=null;

        try {
            // main.java.PLSQLKeys.g:1529:5: ( SQL92_RESERVED_CURRENT )
            // main.java.PLSQLKeys.g:1529:10: SQL92_RESERVED_CURRENT
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_CURRENT303=(Token)match(input,SQL92_RESERVED_CURRENT,FOLLOW_SQL92_RESERVED_CURRENT_in_current_key10019); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CURRENT303_tree = 
            (Object)adaptor.create(SQL92_RESERVED_CURRENT303)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_CURRENT303_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "current_key"


    public static class unbounded_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unbounded_key"
    // main.java.PLSQLKeys.g:1532:1: unbounded_key :{...}? => REGULAR_ID -> UNBOUNDED_VK[$REGULAR_ID] ;
    public final unbounded_key_return unbounded_key() throws RecognitionException {
        unbounded_key_return retval = new unbounded_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID304=null;

        Object REGULAR_ID304_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1533:5: ({...}? => REGULAR_ID -> UNBOUNDED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1533:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("unbounded"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "unbounded_key", "input.LT(1).getText().equalsIgnoreCase(\"unbounded\")");
            }

            REGULAR_ID304=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_unbounded_key10042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID304);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1533:78: -> UNBOUNDED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(UNBOUNDED_VK, REGULAR_ID304)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unbounded_key"


    public static class dense_rank_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dense_rank_key"
    // main.java.PLSQLKeys.g:1536:1: dense_rank_key :{...}? => REGULAR_ID -> DENSE_RANK_VK[$REGULAR_ID] ;
    public final dense_rank_key_return dense_rank_key() throws RecognitionException {
        dense_rank_key_return retval = new dense_rank_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID305=null;

        Object REGULAR_ID305_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1537:5: ({...}? => REGULAR_ID -> DENSE_RANK_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1537:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("dense_rank"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dense_rank_key", "input.LT(1).getText().equalsIgnoreCase(\"dense_rank\")");
            }

            REGULAR_ID305=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dense_rank_key10070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID305);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1537:79: -> DENSE_RANK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DENSE_RANK_VK, REGULAR_ID305)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dense_rank_key"


    public static class cost_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cost_key"
    // main.java.PLSQLKeys.g:1540:1: cost_key :{...}? => REGULAR_ID -> COST_VK[$REGULAR_ID] ;
    public final cost_key_return cost_key() throws RecognitionException {
        cost_key_return retval = new cost_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID306=null;

        Object REGULAR_ID306_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1541:5: ({...}? => REGULAR_ID -> COST_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1541:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cost"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cost_key", "input.LT(1).getText().equalsIgnoreCase(\"cost\")");
            }

            REGULAR_ID306=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cost_key10098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID306);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1541:73: -> COST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(COST_VK, REGULAR_ID306)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cost_key"


    public static class char_cs_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "char_cs_key"
    // main.java.PLSQLKeys.g:1544:1: char_cs_key :{...}? => REGULAR_ID -> CHAR_CS_VK[$REGULAR_ID] ;
    public final char_cs_key_return char_cs_key() throws RecognitionException {
        char_cs_key_return retval = new char_cs_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID307=null;

        Object REGULAR_ID307_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1545:5: ({...}? => REGULAR_ID -> CHAR_CS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1545:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("char_cs"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_cs_key", "input.LT(1).getText().equalsIgnoreCase(\"char_cs\")");
            }

            REGULAR_ID307=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_char_cs_key10126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID307);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1545:76: -> CHAR_CS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CHAR_CS_VK, REGULAR_ID307)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "char_cs_key"


    public static class auto_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "auto_key"
    // main.java.PLSQLKeys.g:1548:1: auto_key :{...}? => REGULAR_ID -> AUTO_VK[$REGULAR_ID] ;
    public final auto_key_return auto_key() throws RecognitionException {
        auto_key_return retval = new auto_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID308=null;

        Object REGULAR_ID308_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1549:5: ({...}? => REGULAR_ID -> AUTO_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1549:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("auto"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "auto_key", "input.LT(1).getText().equalsIgnoreCase(\"auto\")");
            }

            REGULAR_ID308=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_auto_key10154); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID308);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1549:73: -> AUTO_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(AUTO_VK, REGULAR_ID308)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "auto_key"


    public static class treat_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "treat_key"
    // main.java.PLSQLKeys.g:1552:1: treat_key :{...}? => REGULAR_ID -> TREAT_VK[$REGULAR_ID] ;
    public final treat_key_return treat_key() throws RecognitionException {
        treat_key_return retval = new treat_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID309=null;

        Object REGULAR_ID309_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1553:5: ({...}? => REGULAR_ID -> TREAT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1553:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("treat"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "treat_key", "input.LT(1).getText().equalsIgnoreCase(\"treat\")");
            }

            REGULAR_ID309=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_treat_key10182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID309);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1553:74: -> TREAT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TREAT_VK, REGULAR_ID309)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "treat_key"


    public static class content_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "content_key"
    // main.java.PLSQLKeys.g:1556:1: content_key :{...}? => REGULAR_ID -> CONTENT_VK[$REGULAR_ID] ;
    public final content_key_return content_key() throws RecognitionException {
        content_key_return retval = new content_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID310=null;

        Object REGULAR_ID310_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1557:5: ({...}? => REGULAR_ID -> CONTENT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1557:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("content"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "content_key", "input.LT(1).getText().equalsIgnoreCase(\"content\")");
            }

            REGULAR_ID310=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_content_key10210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID310);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1557:76: -> CONTENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CONTENT_VK, REGULAR_ID310)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "content_key"


    public static class xmlparse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlparse_key"
    // main.java.PLSQLKeys.g:1560:1: xmlparse_key :{...}? => REGULAR_ID -> XMLPARSE_VK[$REGULAR_ID] ;
    public final xmlparse_key_return xmlparse_key() throws RecognitionException {
        xmlparse_key_return retval = new xmlparse_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID311=null;

        Object REGULAR_ID311_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1561:5: ({...}? => REGULAR_ID -> XMLPARSE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1561:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlparse"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlparse_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlparse\")");
            }

            REGULAR_ID311=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlparse_key10238); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID311);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1561:77: -> XMLPARSE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLPARSE_VK, REGULAR_ID311)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlparse_key"


    public static class xmlelement_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlelement_key"
    // main.java.PLSQLKeys.g:1564:1: xmlelement_key :{...}? => REGULAR_ID -> XMLELEMENT_VK[$REGULAR_ID] ;
    public final xmlelement_key_return xmlelement_key() throws RecognitionException {
        xmlelement_key_return retval = new xmlelement_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID312=null;

        Object REGULAR_ID312_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1565:5: ({...}? => REGULAR_ID -> XMLELEMENT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1565:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlelement"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlelement_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlelement\")");
            }

            REGULAR_ID312=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlelement_key10266); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID312);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1565:79: -> XMLELEMENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLELEMENT_VK, REGULAR_ID312)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlelement_key"


    public static class entityescaping_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "entityescaping_key"
    // main.java.PLSQLKeys.g:1568:1: entityescaping_key :{...}? => REGULAR_ID -> ENTITYESCAPING_VK[$REGULAR_ID] ;
    public final entityescaping_key_return entityescaping_key() throws RecognitionException {
        entityescaping_key_return retval = new entityescaping_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID313=null;

        Object REGULAR_ID313_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1569:5: ({...}? => REGULAR_ID -> ENTITYESCAPING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1569:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("entityescaping"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "entityescaping_key", "input.LT(1).getText().equalsIgnoreCase(\"entityescaping\")");
            }

            REGULAR_ID313=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_entityescaping_key10294); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID313);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1569:83: -> ENTITYESCAPING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ENTITYESCAPING_VK, REGULAR_ID313)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "entityescaping_key"


    public static class standalone_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "standalone_key"
    // main.java.PLSQLKeys.g:1572:1: standalone_key :{...}? => REGULAR_ID -> STANDALONE_VK[$REGULAR_ID] ;
    public final standalone_key_return standalone_key() throws RecognitionException {
        standalone_key_return retval = new standalone_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID314=null;

        Object REGULAR_ID314_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1573:5: ({...}? => REGULAR_ID -> STANDALONE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1573:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("standalone"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "standalone_key", "input.LT(1).getText().equalsIgnoreCase(\"standalone\")");
            }

            REGULAR_ID314=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_standalone_key10322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID314);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1573:79: -> STANDALONE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(STANDALONE_VK, REGULAR_ID314)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "standalone_key"


    public static class wellformed_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "wellformed_key"
    // main.java.PLSQLKeys.g:1576:1: wellformed_key :{...}? => REGULAR_ID -> WELLFORMED_VK[$REGULAR_ID] ;
    public final wellformed_key_return wellformed_key() throws RecognitionException {
        wellformed_key_return retval = new wellformed_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID315=null;

        Object REGULAR_ID315_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1577:5: ({...}? => REGULAR_ID -> WELLFORMED_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1577:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("wellformed"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "wellformed_key", "input.LT(1).getText().equalsIgnoreCase(\"wellformed\")");
            }

            REGULAR_ID315=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_wellformed_key10350); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID315);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1577:79: -> WELLFORMED_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(WELLFORMED_VK, REGULAR_ID315)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "wellformed_key"


    public static class xmlexists_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlexists_key"
    // main.java.PLSQLKeys.g:1580:1: xmlexists_key :{...}? => REGULAR_ID -> XMLEXISTS_VK[$REGULAR_ID] ;
    public final xmlexists_key_return xmlexists_key() throws RecognitionException {
        xmlexists_key_return retval = new xmlexists_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID316=null;

        Object REGULAR_ID316_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1581:5: ({...}? => REGULAR_ID -> XMLEXISTS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1581:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlexists"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlexists_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlexists\")");
            }

            REGULAR_ID316=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlexists_key10378); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID316);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1581:78: -> XMLEXISTS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLEXISTS_VK, REGULAR_ID316)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlexists_key"


    public static class version_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "version_key"
    // main.java.PLSQLKeys.g:1584:1: version_key :{...}? => REGULAR_ID -> VERSION_VK[$REGULAR_ID] ;
    public final version_key_return version_key() throws RecognitionException {
        version_key_return retval = new version_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID317=null;

        Object REGULAR_ID317_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1585:5: ({...}? => REGULAR_ID -> VERSION_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1585:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("version"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "version_key", "input.LT(1).getText().equalsIgnoreCase(\"version\")");
            }

            REGULAR_ID317=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_version_key10406); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID317);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1585:76: -> VERSION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(VERSION_VK, REGULAR_ID317)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "version_key"


    public static class xmlcast_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlcast_key"
    // main.java.PLSQLKeys.g:1588:1: xmlcast_key :{...}? => REGULAR_ID -> XMLCAST_VK[$REGULAR_ID] ;
    public final xmlcast_key_return xmlcast_key() throws RecognitionException {
        xmlcast_key_return retval = new xmlcast_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID318=null;

        Object REGULAR_ID318_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1589:5: ({...}? => REGULAR_ID -> XMLCAST_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1589:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlcast"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlcast_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlcast\")");
            }

            REGULAR_ID318=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlcast_key10434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID318);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1589:76: -> XMLCAST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLCAST_VK, REGULAR_ID318)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlcast_key"


    public static class yes_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "yes_key"
    // main.java.PLSQLKeys.g:1592:1: yes_key :{...}? => REGULAR_ID -> YES_VK[$REGULAR_ID] ;
    public final yes_key_return yes_key() throws RecognitionException {
        yes_key_return retval = new yes_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID319=null;

        Object REGULAR_ID319_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1593:5: ({...}? => REGULAR_ID -> YES_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1593:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("yes"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "yes_key", "input.LT(1).getText().equalsIgnoreCase(\"yes\")");
            }

            REGULAR_ID319=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_yes_key10462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID319);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1593:72: -> YES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(YES_VK, REGULAR_ID319)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "yes_key"


    public static class no_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "no_key"
    // main.java.PLSQLKeys.g:1596:1: no_key :{...}? => REGULAR_ID -> NO_VK[$REGULAR_ID] ;
    public final no_key_return no_key() throws RecognitionException {
        no_key_return retval = new no_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID320=null;

        Object REGULAR_ID320_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1597:5: ({...}? => REGULAR_ID -> NO_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1597:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("no"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "no_key", "input.LT(1).getText().equalsIgnoreCase(\"no\")");
            }

            REGULAR_ID320=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_no_key10490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID320);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1597:71: -> NO_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NO_VK, REGULAR_ID320)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "no_key"


    public static class evalname_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "evalname_key"
    // main.java.PLSQLKeys.g:1600:1: evalname_key :{...}? => REGULAR_ID -> EVALNAME_VK[$REGULAR_ID] ;
    public final evalname_key_return evalname_key() throws RecognitionException {
        evalname_key_return retval = new evalname_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID321=null;

        Object REGULAR_ID321_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1601:5: ({...}? => REGULAR_ID -> EVALNAME_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1601:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "evalname_key", "input.LT(1).getText().equalsIgnoreCase(\"evalname\")");
            }

            REGULAR_ID321=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_evalname_key10518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID321);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1601:77: -> EVALNAME_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(EVALNAME_VK, REGULAR_ID321)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "evalname_key"


    public static class xmlpi_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlpi_key"
    // main.java.PLSQLKeys.g:1604:1: xmlpi_key :{...}? => REGULAR_ID -> XMLPI_VK[$REGULAR_ID] ;
    public final xmlpi_key_return xmlpi_key() throws RecognitionException {
        xmlpi_key_return retval = new xmlpi_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID322=null;

        Object REGULAR_ID322_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1605:5: ({...}? => REGULAR_ID -> XMLPI_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1605:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlpi"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlpi_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlpi\")");
            }

            REGULAR_ID322=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlpi_key10546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID322);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1605:74: -> XMLPI_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLPI_VK, REGULAR_ID322)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlpi_key"


    public static class xmlcolattval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlcolattval_key"
    // main.java.PLSQLKeys.g:1608:1: xmlcolattval_key :{...}? => REGULAR_ID -> XMLCOLATTVAL_VK[$REGULAR_ID] ;
    public final xmlcolattval_key_return xmlcolattval_key() throws RecognitionException {
        xmlcolattval_key_return retval = new xmlcolattval_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID323=null;

        Object REGULAR_ID323_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1609:5: ({...}? => REGULAR_ID -> XMLCOLATTVAL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1609:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlcolattval"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlcolattval_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlcolattval\")");
            }

            REGULAR_ID323=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlcolattval_key10574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID323);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1609:81: -> XMLCOLATTVAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLCOLATTVAL_VK, REGULAR_ID323)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlcolattval_key"


    public static class document_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "document_key"
    // main.java.PLSQLKeys.g:1612:1: document_key :{...}? => REGULAR_ID -> DOCUMENT_VK[$REGULAR_ID] ;
    public final document_key_return document_key() throws RecognitionException {
        document_key_return retval = new document_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID324=null;

        Object REGULAR_ID324_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1613:5: ({...}? => REGULAR_ID -> DOCUMENT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1613:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("document"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "document_key", "input.LT(1).getText().equalsIgnoreCase(\"document\")");
            }

            REGULAR_ID324=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_document_key10602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID324);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1613:77: -> DOCUMENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DOCUMENT_VK, REGULAR_ID324)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "document_key"


    public static class xmlforest_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlforest_key"
    // main.java.PLSQLKeys.g:1616:1: xmlforest_key :{...}? => REGULAR_ID -> XMLFOREST_VK[$REGULAR_ID] ;
    public final xmlforest_key_return xmlforest_key() throws RecognitionException {
        xmlforest_key_return retval = new xmlforest_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID325=null;

        Object REGULAR_ID325_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1617:5: ({...}? => REGULAR_ID -> XMLFOREST_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1617:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlforest"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlforest_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlforest\")");
            }

            REGULAR_ID325=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlforest_key10630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID325);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1617:78: -> XMLFOREST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLFOREST_VK, REGULAR_ID325)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlforest_key"


    public static class passing_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "passing_key"
    // main.java.PLSQLKeys.g:1620:1: passing_key :{...}? => REGULAR_ID -> PASSING_VK[$REGULAR_ID] ;
    public final passing_key_return passing_key() throws RecognitionException {
        passing_key_return retval = new passing_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID326=null;

        Object REGULAR_ID326_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1621:5: ({...}? => REGULAR_ID -> PASSING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1621:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("passing"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "passing_key", "input.LT(1).getText().equalsIgnoreCase(\"passing\")");
            }

            REGULAR_ID326=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_passing_key10658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID326);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1621:76: -> PASSING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PASSING_VK, REGULAR_ID326)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "passing_key"


    public static class columns_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "columns_key"
    // main.java.PLSQLKeys.g:1624:1: columns_key :{...}? => REGULAR_ID -> PASSING_VK[$REGULAR_ID] ;
    public final columns_key_return columns_key() throws RecognitionException {
        columns_key_return retval = new columns_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID327=null;

        Object REGULAR_ID327_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1625:5: ({...}? => REGULAR_ID -> PASSING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1625:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("columns"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "columns_key", "input.LT(1).getText().equalsIgnoreCase(\"columns\")");
            }

            REGULAR_ID327=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_columns_key10686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID327);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1625:76: -> PASSING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PASSING_VK, REGULAR_ID327)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "columns_key"


    public static class indent_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indent_key"
    // main.java.PLSQLKeys.g:1628:1: indent_key :{...}? => REGULAR_ID -> INDENT_VK[$REGULAR_ID] ;
    public final indent_key_return indent_key() throws RecognitionException {
        indent_key_return retval = new indent_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID328=null;

        Object REGULAR_ID328_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1629:5: ({...}? => REGULAR_ID -> INDENT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1629:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("indent"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "indent_key", "input.LT(1).getText().equalsIgnoreCase(\"indent\")");
            }

            REGULAR_ID328=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_indent_key10715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID328);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1629:75: -> INDENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INDENT_VK, REGULAR_ID328)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indent_key"


    public static class hide_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hide_key"
    // main.java.PLSQLKeys.g:1632:1: hide_key :{...}? => REGULAR_ID -> HIDE_VK[$REGULAR_ID] ;
    public final hide_key_return hide_key() throws RecognitionException {
        hide_key_return retval = new hide_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID329=null;

        Object REGULAR_ID329_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1633:5: ({...}? => REGULAR_ID -> HIDE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1633:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("hide"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "hide_key", "input.LT(1).getText().equalsIgnoreCase(\"hide\")");
            }

            REGULAR_ID329=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_hide_key10743); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID329);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1633:73: -> HIDE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(HIDE_VK, REGULAR_ID329)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hide_key"


    public static class xmlagg_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlagg_key"
    // main.java.PLSQLKeys.g:1636:1: xmlagg_key :{...}? => REGULAR_ID -> XMLAGG_VK[$REGULAR_ID] ;
    public final xmlagg_key_return xmlagg_key() throws RecognitionException {
        xmlagg_key_return retval = new xmlagg_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID330=null;

        Object REGULAR_ID330_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1637:5: ({...}? => REGULAR_ID -> XMLAGG_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1637:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlagg"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlagg_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlagg\")");
            }

            REGULAR_ID330=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlagg_key10771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID330);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1637:75: -> XMLAGG_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLAGG_VK, REGULAR_ID330)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlagg_key"


    public static class path_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "path_key"
    // main.java.PLSQLKeys.g:1640:1: path_key :{...}? => REGULAR_ID ;
    public final path_key_return path_key() throws RecognitionException {
        path_key_return retval = new path_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID331=null;

        Object REGULAR_ID331_tree=null;

        try {
            // main.java.PLSQLKeys.g:1641:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1641:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("path"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "path_key", "input.LT(1).getText().equalsIgnoreCase(\"path\")");
            }

            REGULAR_ID331=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_path_key10799); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID331_tree = 
            (Object)adaptor.create(REGULAR_ID331)
            ;
            adaptor.addChild(root_0, REGULAR_ID331_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "path_key"


    public static class xmlnamespaces_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlnamespaces_key"
    // main.java.PLSQLKeys.g:1644:1: xmlnamespaces_key :{...}? => REGULAR_ID -> XMLNAMESPACES_VK[$REGULAR_ID] ;
    public final xmlnamespaces_key_return xmlnamespaces_key() throws RecognitionException {
        xmlnamespaces_key_return retval = new xmlnamespaces_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID332=null;

        Object REGULAR_ID332_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1645:5: ({...}? => REGULAR_ID -> XMLNAMESPACES_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1645:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlnamespaces"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlnamespaces_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlnamespaces\")");
            }

            REGULAR_ID332=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlnamespaces_key10822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID332);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1645:82: -> XMLNAMESPACES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLNAMESPACES_VK, REGULAR_ID332)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlnamespaces_key"


    public static class size_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "size_key"
    // main.java.PLSQLKeys.g:1648:1: size_key : SQL92_RESERVED_SIZE ;
    public final size_key_return size_key() throws RecognitionException {
        size_key_return retval = new size_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_SIZE333=null;

        Object SQL92_RESERVED_SIZE333_tree=null;

        try {
            // main.java.PLSQLKeys.g:1649:5: ( SQL92_RESERVED_SIZE )
            // main.java.PLSQLKeys.g:1649:10: SQL92_RESERVED_SIZE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_SIZE333=(Token)match(input,SQL92_RESERVED_SIZE,FOLLOW_SQL92_RESERVED_SIZE_in_size_key10847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_SIZE333_tree = 
            (Object)adaptor.create(SQL92_RESERVED_SIZE333)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_SIZE333_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "size_key"


    public static class noschemacheck_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "noschemacheck_key"
    // main.java.PLSQLKeys.g:1652:1: noschemacheck_key :{...}? => REGULAR_ID -> NOSCHEMACHECK_VK[$REGULAR_ID] ;
    public final noschemacheck_key_return noschemacheck_key() throws RecognitionException {
        noschemacheck_key_return retval = new noschemacheck_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID334=null;

        Object REGULAR_ID334_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1653:5: ({...}? => REGULAR_ID -> NOSCHEMACHECK_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1653:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("noschemacheck"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "noschemacheck_key", "input.LT(1).getText().equalsIgnoreCase(\"noschemacheck\")");
            }

            REGULAR_ID334=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_noschemacheck_key10870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID334);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1653:82: -> NOSCHEMACHECK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NOSCHEMACHECK_VK, REGULAR_ID334)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "noschemacheck_key"


    public static class noentityescaping_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "noentityescaping_key"
    // main.java.PLSQLKeys.g:1656:1: noentityescaping_key :{...}? => REGULAR_ID -> NOENTITYESCAPING_VK[$REGULAR_ID] ;
    public final noentityescaping_key_return noentityescaping_key() throws RecognitionException {
        noentityescaping_key_return retval = new noentityescaping_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID335=null;

        Object REGULAR_ID335_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1657:5: ({...}? => REGULAR_ID -> NOENTITYESCAPING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1657:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("noentityescaping"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "noentityescaping_key", "input.LT(1).getText().equalsIgnoreCase(\"noentityescaping\")");
            }

            REGULAR_ID335=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_noentityescaping_key10898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID335);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1657:85: -> NOENTITYESCAPING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NOENTITYESCAPING_VK, REGULAR_ID335)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "noentityescaping_key"


    public static class xmlquery_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlquery_key"
    // main.java.PLSQLKeys.g:1660:1: xmlquery_key :{...}? => REGULAR_ID -> XMLQUERY_VK[$REGULAR_ID] ;
    public final xmlquery_key_return xmlquery_key() throws RecognitionException {
        xmlquery_key_return retval = new xmlquery_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID336=null;

        Object REGULAR_ID336_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1661:5: ({...}? => REGULAR_ID -> XMLQUERY_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1661:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlquery"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlquery_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlquery\")");
            }

            REGULAR_ID336=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlquery_key10926); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID336);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1661:77: -> XMLQUERY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLQUERY_VK, REGULAR_ID336)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlquery_key"


    public static class xmltable_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmltable_key"
    // main.java.PLSQLKeys.g:1664:1: xmltable_key :{...}? => REGULAR_ID -> XMLTABLE_VK[$REGULAR_ID] ;
    public final xmltable_key_return xmltable_key() throws RecognitionException {
        xmltable_key_return retval = new xmltable_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID337=null;

        Object REGULAR_ID337_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1665:5: ({...}? => REGULAR_ID -> XMLTABLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1665:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmltable"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmltable_key", "input.LT(1).getText().equalsIgnoreCase(\"xmltable\")");
            }

            REGULAR_ID337=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmltable_key10954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID337);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1665:77: -> XMLTABLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLTABLE_VK, REGULAR_ID337)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmltable_key"


    public static class xmlroot_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlroot_key"
    // main.java.PLSQLKeys.g:1668:1: xmlroot_key :{...}? => REGULAR_ID -> XMLROOT_VK[$REGULAR_ID] ;
    public final xmlroot_key_return xmlroot_key() throws RecognitionException {
        xmlroot_key_return retval = new xmlroot_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID338=null;

        Object REGULAR_ID338_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1669:5: ({...}? => REGULAR_ID -> XMLROOT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1669:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlroot"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlroot_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlroot\")");
            }

            REGULAR_ID338=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlroot_key10982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID338);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1669:76: -> XMLROOT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLROOT_VK, REGULAR_ID338)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlroot_key"


    public static class schemacheck_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "schemacheck_key"
    // main.java.PLSQLKeys.g:1672:1: schemacheck_key :{...}? => REGULAR_ID -> SCHEMACHECK_VK[$REGULAR_ID] ;
    public final schemacheck_key_return schemacheck_key() throws RecognitionException {
        schemacheck_key_return retval = new schemacheck_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID339=null;

        Object REGULAR_ID339_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1673:5: ({...}? => REGULAR_ID -> SCHEMACHECK_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1673:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("schemacheck"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "schemacheck_key", "input.LT(1).getText().equalsIgnoreCase(\"schemacheck\")");
            }

            REGULAR_ID339=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_schemacheck_key11010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID339);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1673:80: -> SCHEMACHECK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SCHEMACHECK_VK, REGULAR_ID339)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "schemacheck_key"


    public static class xmlattributes_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlattributes_key"
    // main.java.PLSQLKeys.g:1676:1: xmlattributes_key :{...}? => REGULAR_ID -> XMLATTRIBUTES_VK[$REGULAR_ID] ;
    public final xmlattributes_key_return xmlattributes_key() throws RecognitionException {
        xmlattributes_key_return retval = new xmlattributes_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID340=null;

        Object REGULAR_ID340_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1677:5: ({...}? => REGULAR_ID -> XMLATTRIBUTES_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1677:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlattributes"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlattributes_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlattributes\")");
            }

            REGULAR_ID340=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlattributes_key11038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID340);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1677:82: -> XMLATTRIBUTES_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLATTRIBUTES_VK, REGULAR_ID340)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlattributes_key"


    public static class encoding_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "encoding_key"
    // main.java.PLSQLKeys.g:1680:1: encoding_key :{...}? => REGULAR_ID -> ENCODING_VK[$REGULAR_ID] ;
    public final encoding_key_return encoding_key() throws RecognitionException {
        encoding_key_return retval = new encoding_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID341=null;

        Object REGULAR_ID341_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1681:5: ({...}? => REGULAR_ID -> ENCODING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1681:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("encoding"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "encoding_key", "input.LT(1).getText().equalsIgnoreCase(\"encoding\")");
            }

            REGULAR_ID341=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_encoding_key11066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID341);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1681:77: -> ENCODING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ENCODING_VK, REGULAR_ID341)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "encoding_key"


    public static class show_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "show_key"
    // main.java.PLSQLKeys.g:1684:1: show_key :{...}? => REGULAR_ID -> SHOW_VK[$REGULAR_ID] ;
    public final show_key_return show_key() throws RecognitionException {
        show_key_return retval = new show_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID342=null;

        Object REGULAR_ID342_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1685:5: ({...}? => REGULAR_ID -> SHOW_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1685:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("show"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "show_key", "input.LT(1).getText().equalsIgnoreCase(\"show\")");
            }

            REGULAR_ID342=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_show_key11094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID342);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1685:73: -> SHOW_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SHOW_VK, REGULAR_ID342)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "show_key"


    public static class xmlserialize_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlserialize_key"
    // main.java.PLSQLKeys.g:1688:1: xmlserialize_key :{...}? => REGULAR_ID -> XMLSERIALIZE_VK[$REGULAR_ID] ;
    public final xmlserialize_key_return xmlserialize_key() throws RecognitionException {
        xmlserialize_key_return retval = new xmlserialize_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID343=null;

        Object REGULAR_ID343_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1689:5: ({...}? => REGULAR_ID -> XMLSERIALIZE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1689:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("xmlserialize"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "xmlserialize_key", "input.LT(1).getText().equalsIgnoreCase(\"xmlserialize\")");
            }

            REGULAR_ID343=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_xmlserialize_key11122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID343);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1689:81: -> XMLSERIALIZE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(XMLSERIALIZE_VK, REGULAR_ID343)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlserialize_key"


    public static class ordinality_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ordinality_key"
    // main.java.PLSQLKeys.g:1692:1: ordinality_key :{...}? => REGULAR_ID -> ORDINALITY_VK[$REGULAR_ID] ;
    public final ordinality_key_return ordinality_key() throws RecognitionException {
        ordinality_key_return retval = new ordinality_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID344=null;

        Object REGULAR_ID344_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1693:5: ({...}? => REGULAR_ID -> ORDINALITY_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1693:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("ordinality"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ordinality_key", "input.LT(1).getText().equalsIgnoreCase(\"ordinality\")");
            }

            REGULAR_ID344=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ordinality_key11150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID344);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1693:79: -> ORDINALITY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ORDINALITY_VK, REGULAR_ID344)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ordinality_key"


    public static class defaults_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaults_key"
    // main.java.PLSQLKeys.g:1696:1: defaults_key :{...}? => REGULAR_ID -> DEFAULTS_VK[$REGULAR_ID] ;
    public final defaults_key_return defaults_key() throws RecognitionException {
        defaults_key_return retval = new defaults_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID345=null;

        Object REGULAR_ID345_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1697:5: ({...}? => REGULAR_ID -> DEFAULTS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1697:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("defaults"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "defaults_key", "input.LT(1).getText().equalsIgnoreCase(\"defaults\")");
            }

            REGULAR_ID345=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_defaults_key11178); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID345);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1697:77: -> DEFAULTS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DEFAULTS_VK, REGULAR_ID345)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "defaults_key"


    public static class sqlerror_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sqlerror_key"
    // main.java.PLSQLKeys.g:1700:1: sqlerror_key :{...}? REGULAR_ID ;
    public final sqlerror_key_return sqlerror_key() throws RecognitionException {
        sqlerror_key_return retval = new sqlerror_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID346=null;

        Object REGULAR_ID346_tree=null;

        try {
            // main.java.PLSQLKeys.g:1701:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1701:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("sqlerror"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sqlerror_key", "input.LT(1).getText().equalsIgnoreCase(\"sqlerror\")");
            }

            REGULAR_ID346=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sqlerror_key11205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID346_tree = 
            (Object)adaptor.create(REGULAR_ID346)
            ;
            adaptor.addChild(root_0, REGULAR_ID346_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sqlerror_key"


    public static class oserror_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "oserror_key"
    // main.java.PLSQLKeys.g:1704:1: oserror_key :{...}? REGULAR_ID ;
    public final oserror_key_return oserror_key() throws RecognitionException {
        oserror_key_return retval = new oserror_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID347=null;

        Object REGULAR_ID347_tree=null;

        try {
            // main.java.PLSQLKeys.g:1705:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1705:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("oserror"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "oserror_key", "input.LT(1).getText().equalsIgnoreCase(\"oserror\")");
            }

            REGULAR_ID347=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_oserror_key11229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID347_tree = 
            (Object)adaptor.create(REGULAR_ID347)
            ;
            adaptor.addChild(root_0, REGULAR_ID347_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "oserror_key"


    public static class success_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "success_key"
    // main.java.PLSQLKeys.g:1708:1: success_key :{...}? REGULAR_ID ;
    public final success_key_return success_key() throws RecognitionException {
        success_key_return retval = new success_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID348=null;

        Object REGULAR_ID348_tree=null;

        try {
            // main.java.PLSQLKeys.g:1709:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1709:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("success"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "success_key", "input.LT(1).getText().equalsIgnoreCase(\"success\")");
            }

            REGULAR_ID348=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_success_key11252); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID348_tree = 
            (Object)adaptor.create(REGULAR_ID348)
            ;
            adaptor.addChild(root_0, REGULAR_ID348_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "success_key"


    public static class warning_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "warning_key"
    // main.java.PLSQLKeys.g:1712:1: warning_key :{...}? REGULAR_ID ;
    public final warning_key_return warning_key() throws RecognitionException {
        warning_key_return retval = new warning_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID349=null;

        Object REGULAR_ID349_tree=null;

        try {
            // main.java.PLSQLKeys.g:1713:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1713:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("warning"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "warning_key", "input.LT(1).getText().equalsIgnoreCase(\"warning\")");
            }

            REGULAR_ID349=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_warning_key11275); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID349_tree = 
            (Object)adaptor.create(REGULAR_ID349)
            ;
            adaptor.addChild(root_0, REGULAR_ID349_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "warning_key"


    public static class failure_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "failure_key"
    // main.java.PLSQLKeys.g:1716:1: failure_key :{...}? REGULAR_ID ;
    public final failure_key_return failure_key() throws RecognitionException {
        failure_key_return retval = new failure_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID350=null;

        Object REGULAR_ID350_tree=null;

        try {
            // main.java.PLSQLKeys.g:1717:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1717:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("failure"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "failure_key", "input.LT(1).getText().equalsIgnoreCase(\"failure\")");
            }

            REGULAR_ID350=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_failure_key11298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID350_tree = 
            (Object)adaptor.create(REGULAR_ID350)
            ;
            adaptor.addChild(root_0, REGULAR_ID350_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "failure_key"


    public static class insert_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insert_key"
    // main.java.PLSQLKeys.g:1720:1: insert_key : SQL92_RESERVED_INSERT ;
    public final insert_key_return insert_key() throws RecognitionException {
        insert_key_return retval = new insert_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_INSERT351=null;

        Object SQL92_RESERVED_INSERT351_tree=null;

        try {
            // main.java.PLSQLKeys.g:1721:5: ( SQL92_RESERVED_INSERT )
            // main.java.PLSQLKeys.g:1721:10: SQL92_RESERVED_INSERT
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_INSERT351=(Token)match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_insert_key11319); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_INSERT351_tree = 
            (Object)adaptor.create(SQL92_RESERVED_INSERT351)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_INSERT351_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "insert_key"


    public static class order_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_key"
    // main.java.PLSQLKeys.g:1724:1: order_key : SQL92_RESERVED_ORDER ;
    public final order_key_return order_key() throws RecognitionException {
        order_key_return retval = new order_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_ORDER352=null;

        Object SQL92_RESERVED_ORDER352_tree=null;

        try {
            // main.java.PLSQLKeys.g:1725:5: ( SQL92_RESERVED_ORDER )
            // main.java.PLSQLKeys.g:1725:10: SQL92_RESERVED_ORDER
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_ORDER352=(Token)match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_order_key11339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ORDER352_tree = 
            (Object)adaptor.create(SQL92_RESERVED_ORDER352)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_ORDER352_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_key"


    public static class minus_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "minus_key"
    // main.java.PLSQLKeys.g:1728:1: minus_key : PLSQL_RESERVED_MINUS ;
    public final minus_key_return minus_key() throws RecognitionException {
        minus_key_return retval = new minus_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_RESERVED_MINUS353=null;

        Object PLSQL_RESERVED_MINUS353_tree=null;

        try {
            // main.java.PLSQLKeys.g:1729:5: ( PLSQL_RESERVED_MINUS )
            // main.java.PLSQLKeys.g:1729:10: PLSQL_RESERVED_MINUS
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_RESERVED_MINUS353=(Token)match(input,PLSQL_RESERVED_MINUS,FOLLOW_PLSQL_RESERVED_MINUS_in_minus_key11359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_MINUS353_tree = 
            (Object)adaptor.create(PLSQL_RESERVED_MINUS353)
            ;
            adaptor.addChild(root_0, PLSQL_RESERVED_MINUS353_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "minus_key"


    public static class row_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "row_key"
    // main.java.PLSQLKeys.g:1732:1: row_key :{...}? REGULAR_ID -> ROW_VK[$REGULAR_ID] ;
    public final row_key_return row_key() throws RecognitionException {
        row_key_return retval = new row_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID354=null;

        Object REGULAR_ID354_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1733:5: ({...}? REGULAR_ID -> ROW_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1733:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("row"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "row_key", "input.LT(1).getText().equalsIgnoreCase(\"row\")");
            }

            REGULAR_ID354=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_row_key11381); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID354);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1733:70: -> ROW_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ROW_VK, REGULAR_ID354)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "row_key"


    public static class mod_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mod_key"
    // main.java.PLSQLKeys.g:1736:1: mod_key :{...}? REGULAR_ID ;
    public final mod_key_return mod_key() throws RecognitionException {
        mod_key_return retval = new mod_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID355=null;

        Object REGULAR_ID355_tree=null;

        try {
            // main.java.PLSQLKeys.g:1737:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1737:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("mod"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "mod_key", "input.LT(1).getText().equalsIgnoreCase(\"mod\")");
            }

            REGULAR_ID355=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_mod_key11408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID355_tree = 
            (Object)adaptor.create(REGULAR_ID355)
            ;
            adaptor.addChild(root_0, REGULAR_ID355_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mod_key"


    public static class raw_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "raw_key"
    // main.java.PLSQLKeys.g:1740:1: raw_key :{...}? => REGULAR_ID -> RAW_VK[$REGULAR_ID] ;
    public final raw_key_return raw_key() throws RecognitionException {
        raw_key_return retval = new raw_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID356=null;

        Object REGULAR_ID356_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1741:5: ({...}? => REGULAR_ID -> RAW_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1741:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("raw"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "raw_key", "input.LT(1).getText().equalsIgnoreCase(\"raw\")");
            }

            REGULAR_ID356=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_raw_key11431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID356);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1741:72: -> RAW_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RAW_VK, REGULAR_ID356)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "raw_key"


    public static class power_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "power_key"
    // main.java.PLSQLKeys.g:1744:1: power_key :{...}? REGULAR_ID ;
    public final power_key_return power_key() throws RecognitionException {
        power_key_return retval = new power_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID357=null;

        Object REGULAR_ID357_tree=null;

        try {
            // main.java.PLSQLKeys.g:1745:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1745:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("power"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "power_key", "input.LT(1).getText().equalsIgnoreCase(\"power\")");
            }

            REGULAR_ID357=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_power_key11458); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID357_tree = 
            (Object)adaptor.create(REGULAR_ID357)
            ;
            adaptor.addChild(root_0, REGULAR_ID357_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "power_key"


    public static class lock_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lock_key"
    // main.java.PLSQLKeys.g:1748:1: lock_key : PLSQL_RESERVED_LOCK ;
    public final lock_key_return lock_key() throws RecognitionException {
        lock_key_return retval = new lock_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_RESERVED_LOCK358=null;

        Object PLSQL_RESERVED_LOCK358_tree=null;

        try {
            // main.java.PLSQLKeys.g:1749:5: ( PLSQL_RESERVED_LOCK )
            // main.java.PLSQLKeys.g:1749:10: PLSQL_RESERVED_LOCK
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_RESERVED_LOCK358=(Token)match(input,PLSQL_RESERVED_LOCK,FOLLOW_PLSQL_RESERVED_LOCK_in_lock_key11478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_LOCK358_tree = 
            (Object)adaptor.create(PLSQL_RESERVED_LOCK358)
            ;
            adaptor.addChild(root_0, PLSQL_RESERVED_LOCK358_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lock_key"


    public static class exists_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exists_key"
    // main.java.PLSQLKeys.g:1752:1: exists_key : SQL92_RESERVED_EXISTS ;
    public final exists_key_return exists_key() throws RecognitionException {
        exists_key_return retval = new exists_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_EXISTS359=null;

        Object SQL92_RESERVED_EXISTS359_tree=null;

        try {
            // main.java.PLSQLKeys.g:1753:5: ( SQL92_RESERVED_EXISTS )
            // main.java.PLSQLKeys.g:1753:10: SQL92_RESERVED_EXISTS
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_EXISTS359=(Token)match(input,SQL92_RESERVED_EXISTS,FOLLOW_SQL92_RESERVED_EXISTS_in_exists_key11498); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_EXISTS359_tree = 
            (Object)adaptor.create(SQL92_RESERVED_EXISTS359)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_EXISTS359_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exists_key"


    public static class having_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "having_key"
    // main.java.PLSQLKeys.g:1756:1: having_key : SQL92_RESERVED_HAVING ;
    public final having_key_return having_key() throws RecognitionException {
        having_key_return retval = new having_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_HAVING360=null;

        Object SQL92_RESERVED_HAVING360_tree=null;

        try {
            // main.java.PLSQLKeys.g:1757:5: ( SQL92_RESERVED_HAVING )
            // main.java.PLSQLKeys.g:1757:10: SQL92_RESERVED_HAVING
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_HAVING360=(Token)match(input,SQL92_RESERVED_HAVING,FOLLOW_SQL92_RESERVED_HAVING_in_having_key11518); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_HAVING360_tree = 
            (Object)adaptor.create(SQL92_RESERVED_HAVING360)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_HAVING360_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "having_key"


    public static class any_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "any_key"
    // main.java.PLSQLKeys.g:1760:1: any_key : SQL92_RESERVED_ANY ;
    public final any_key_return any_key() throws RecognitionException {
        any_key_return retval = new any_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_ANY361=null;

        Object SQL92_RESERVED_ANY361_tree=null;

        try {
            // main.java.PLSQLKeys.g:1761:5: ( SQL92_RESERVED_ANY )
            // main.java.PLSQLKeys.g:1761:10: SQL92_RESERVED_ANY
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_ANY361=(Token)match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_any_key11538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ANY361_tree = 
            (Object)adaptor.create(SQL92_RESERVED_ANY361)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_ANY361_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "any_key"


    public static class with_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "with_key"
    // main.java.PLSQLKeys.g:1764:1: with_key : SQL92_RESERVED_WITH ;
    public final with_key_return with_key() throws RecognitionException {
        with_key_return retval = new with_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_WITH362=null;

        Object SQL92_RESERVED_WITH362_tree=null;

        try {
            // main.java.PLSQLKeys.g:1765:5: ( SQL92_RESERVED_WITH )
            // main.java.PLSQLKeys.g:1765:10: SQL92_RESERVED_WITH
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_WITH362=(Token)match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_with_key11558); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_WITH362_tree = 
            (Object)adaptor.create(SQL92_RESERVED_WITH362)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_WITH362_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "with_key"


    public static class transaction_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "transaction_key"
    // main.java.PLSQLKeys.g:1768:1: transaction_key :{...}? => REGULAR_ID ;
    public final transaction_key_return transaction_key() throws RecognitionException {
        transaction_key_return retval = new transaction_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID363=null;

        Object REGULAR_ID363_tree=null;

        try {
            // main.java.PLSQLKeys.g:1769:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:1769:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("transaction"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "transaction_key", "input.LT(1).getText().equalsIgnoreCase(\"transaction\")");
            }

            REGULAR_ID363=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_transaction_key11581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID363_tree = 
            (Object)adaptor.create(REGULAR_ID363)
            ;
            adaptor.addChild(root_0, REGULAR_ID363_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "transaction_key"


    public static class rawtohex_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rawtohex_key"
    // main.java.PLSQLKeys.g:1772:1: rawtohex_key :{...}? REGULAR_ID ;
    public final rawtohex_key_return rawtohex_key() throws RecognitionException {
        rawtohex_key_return retval = new rawtohex_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID364=null;

        Object REGULAR_ID364_tree=null;

        try {
            // main.java.PLSQLKeys.g:1773:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1773:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("rawtohex"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rawtohex_key", "input.LT(1).getText().equalsIgnoreCase(\"rawtohex\")");
            }

            REGULAR_ID364=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rawtohex_key11603); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID364_tree = 
            (Object)adaptor.create(REGULAR_ID364)
            ;
            adaptor.addChild(root_0, REGULAR_ID364_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rawtohex_key"


    public static class number_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "number_key"
    // main.java.PLSQLKeys.g:1776:1: number_key :{...}? => REGULAR_ID -> NUMBER_VK[$REGULAR_ID] ;
    public final number_key_return number_key() throws RecognitionException {
        number_key_return retval = new number_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID365=null;

        Object REGULAR_ID365_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1777:5: ({...}? => REGULAR_ID -> NUMBER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1777:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("number"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "number_key", "input.LT(1).getText().equalsIgnoreCase(\"number\")");
            }

            REGULAR_ID365=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_number_key11626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID365);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1777:75: -> NUMBER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NUMBER_VK, REGULAR_ID365)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "number_key"


    public static class nocopy_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nocopy_key"
    // main.java.PLSQLKeys.g:1780:1: nocopy_key :{...}? => REGULAR_ID -> NOCOPY_VK[$REGULAR_ID] ;
    public final nocopy_key_return nocopy_key() throws RecognitionException {
        nocopy_key_return retval = new nocopy_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID366=null;

        Object REGULAR_ID366_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1781:5: ({...}? => REGULAR_ID -> NOCOPY_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1781:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nocopy"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nocopy_key", "input.LT(1).getText().equalsIgnoreCase(\"nocopy\")");
            }

            REGULAR_ID366=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nocopy_key11654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID366);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1781:75: -> NOCOPY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NOCOPY_VK, REGULAR_ID366)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nocopy_key"


    public static class to_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "to_key"
    // main.java.PLSQLKeys.g:1784:1: to_key : SQL92_RESERVED_TO ;
    public final to_key_return to_key() throws RecognitionException {
        to_key_return retval = new to_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_TO367=null;

        Object SQL92_RESERVED_TO367_tree=null;

        try {
            // main.java.PLSQLKeys.g:1785:5: ( SQL92_RESERVED_TO )
            // main.java.PLSQLKeys.g:1785:10: SQL92_RESERVED_TO
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_TO367=(Token)match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_to_key11679); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_TO367_tree = 
            (Object)adaptor.create(SQL92_RESERVED_TO367)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_TO367_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "to_key"


    public static class abs_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "abs_key"
    // main.java.PLSQLKeys.g:1788:1: abs_key :{...}? REGULAR_ID ;
    public final abs_key_return abs_key() throws RecognitionException {
        abs_key_return retval = new abs_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID368=null;

        Object REGULAR_ID368_tree=null;

        try {
            // main.java.PLSQLKeys.g:1789:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1789:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("abs"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "abs_key", "input.LT(1).getText().equalsIgnoreCase(\"abs\")");
            }

            REGULAR_ID368=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_abs_key11701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID368_tree = 
            (Object)adaptor.create(REGULAR_ID368)
            ;
            adaptor.addChild(root_0, REGULAR_ID368_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "abs_key"


    public static class rollback_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rollback_key"
    // main.java.PLSQLKeys.g:1792:1: rollback_key :{...}? => REGULAR_ID -> ROLLBACK_VK[$REGULAR_ID] ;
    public final rollback_key_return rollback_key() throws RecognitionException {
        rollback_key_return retval = new rollback_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID369=null;

        Object REGULAR_ID369_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1793:5: ({...}? => REGULAR_ID -> ROLLBACK_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1793:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("rollback"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rollback_key", "input.LT(1).getText().equalsIgnoreCase(\"rollback\")");
            }

            REGULAR_ID369=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rollback_key11724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID369);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1793:77: -> ROLLBACK_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ROLLBACK_VK, REGULAR_ID369)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rollback_key"


    public static class share_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "share_key"
    // main.java.PLSQLKeys.g:1796:1: share_key : PLSQL_RESERVED_SHARE ;
    public final share_key_return share_key() throws RecognitionException {
        share_key_return retval = new share_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_RESERVED_SHARE370=null;

        Object PLSQL_RESERVED_SHARE370_tree=null;

        try {
            // main.java.PLSQLKeys.g:1797:5: ( PLSQL_RESERVED_SHARE )
            // main.java.PLSQLKeys.g:1797:10: PLSQL_RESERVED_SHARE
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_RESERVED_SHARE370=(Token)match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_share_key11749); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_SHARE370_tree = 
            (Object)adaptor.create(PLSQL_RESERVED_SHARE370)
            ;
            adaptor.addChild(root_0, PLSQL_RESERVED_SHARE370_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "share_key"


    public static class greatest_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "greatest_key"
    // main.java.PLSQLKeys.g:1800:1: greatest_key :{...}? REGULAR_ID ;
    public final greatest_key_return greatest_key() throws RecognitionException {
        greatest_key_return retval = new greatest_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID371=null;

        Object REGULAR_ID371_tree=null;

        try {
            // main.java.PLSQLKeys.g:1801:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1801:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("greatest"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "greatest_key", "input.LT(1).getText().equalsIgnoreCase(\"greatest\")");
            }

            REGULAR_ID371=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_greatest_key11771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID371_tree = 
            (Object)adaptor.create(REGULAR_ID371)
            ;
            adaptor.addChild(root_0, REGULAR_ID371_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "greatest_key"


    public static class vsize_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "vsize_key"
    // main.java.PLSQLKeys.g:1804:1: vsize_key :{...}? REGULAR_ID ;
    public final vsize_key_return vsize_key() throws RecognitionException {
        vsize_key_return retval = new vsize_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID372=null;

        Object REGULAR_ID372_tree=null;

        try {
            // main.java.PLSQLKeys.g:1805:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1805:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("vsize"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "vsize_key", "input.LT(1).getText().equalsIgnoreCase(\"vsize\")");
            }

            REGULAR_ID372=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_vsize_key11793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID372_tree = 
            (Object)adaptor.create(REGULAR_ID372)
            ;
            adaptor.addChild(root_0, REGULAR_ID372_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "vsize_key"


    public static class exclusive_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "exclusive_key"
    // main.java.PLSQLKeys.g:1808:1: exclusive_key : PLSQL_RESERVED_EXCLUSIVE ;
    public final exclusive_key_return exclusive_key() throws RecognitionException {
        exclusive_key_return retval = new exclusive_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_RESERVED_EXCLUSIVE373=null;

        Object PLSQL_RESERVED_EXCLUSIVE373_tree=null;

        try {
            // main.java.PLSQLKeys.g:1809:5: ( PLSQL_RESERVED_EXCLUSIVE )
            // main.java.PLSQLKeys.g:1809:10: PLSQL_RESERVED_EXCLUSIVE
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_RESERVED_EXCLUSIVE373=(Token)match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_exclusive_key11813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_EXCLUSIVE373_tree = 
            (Object)adaptor.create(PLSQL_RESERVED_EXCLUSIVE373)
            ;
            adaptor.addChild(root_0, PLSQL_RESERVED_EXCLUSIVE373_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "exclusive_key"


    public static class varchar2_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varchar2_key"
    // main.java.PLSQLKeys.g:1812:1: varchar2_key :{...}? => REGULAR_ID -> VARCHAR2_VK[$REGULAR_ID] ;
    public final varchar2_key_return varchar2_key() throws RecognitionException {
        varchar2_key_return retval = new varchar2_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID374=null;

        Object REGULAR_ID374_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1813:5: ({...}? => REGULAR_ID -> VARCHAR2_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1813:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("varchar2"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "varchar2_key", "input.LT(1).getText().equalsIgnoreCase(\"varchar2\")");
            }

            REGULAR_ID374=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_varchar2_key11836); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID374);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1813:77: -> VARCHAR2_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(VARCHAR2_VK, REGULAR_ID374)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varchar2_key"


    public static class rowidtochar_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rowidtochar_key"
    // main.java.PLSQLKeys.g:1816:1: rowidtochar_key :{...}? REGULAR_ID ;
    public final rowidtochar_key_return rowidtochar_key() throws RecognitionException {
        rowidtochar_key_return retval = new rowidtochar_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID375=null;

        Object REGULAR_ID375_tree=null;

        try {
            // main.java.PLSQLKeys.g:1817:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1817:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("rowidtochar"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rowidtochar_key", "input.LT(1).getText().equalsIgnoreCase(\"rowidtochar\")");
            }

            REGULAR_ID375=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rowidtochar_key11863); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID375_tree = 
            (Object)adaptor.create(REGULAR_ID375)
            ;
            adaptor.addChild(root_0, REGULAR_ID375_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rowidtochar_key"


    public static class open_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "open_key"
    // main.java.PLSQLKeys.g:1820:1: open_key :{...}? => REGULAR_ID -> OPEN_VK[$REGULAR_ID] ;
    public final open_key_return open_key() throws RecognitionException {
        open_key_return retval = new open_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID376=null;

        Object REGULAR_ID376_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1821:5: ({...}? => REGULAR_ID -> OPEN_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1821:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("open"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "open_key", "input.LT(1).getText().equalsIgnoreCase(\"open\")");
            }

            REGULAR_ID376=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_open_key11886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID376);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1821:73: -> OPEN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(OPEN_VK, REGULAR_ID376)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "open_key"


    public static class comment_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comment_key"
    // main.java.PLSQLKeys.g:1824:1: comment_key :{...}? => REGULAR_ID -> COMMENT_VK[$REGULAR_ID] ;
    public final comment_key_return comment_key() throws RecognitionException {
        comment_key_return retval = new comment_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID377=null;

        Object REGULAR_ID377_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1825:5: ({...}? => REGULAR_ID -> COMMENT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1825:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("comment"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "comment_key", "input.LT(1).getText().equalsIgnoreCase(\"comment\")");
            }

            REGULAR_ID377=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_comment_key11914); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID377);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1825:76: -> COMMENT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(COMMENT_VK, REGULAR_ID377)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comment_key"


    public static class sqrt_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sqrt_key"
    // main.java.PLSQLKeys.g:1828:1: sqrt_key :{...}? REGULAR_ID ;
    public final sqrt_key_return sqrt_key() throws RecognitionException {
        sqrt_key_return retval = new sqrt_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID378=null;

        Object REGULAR_ID378_tree=null;

        try {
            // main.java.PLSQLKeys.g:1829:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1829:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("sqrt"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sqrt_key", "input.LT(1).getText().equalsIgnoreCase(\"sqrt\")");
            }

            REGULAR_ID378=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sqrt_key11941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID378_tree = 
            (Object)adaptor.create(REGULAR_ID378)
            ;
            adaptor.addChild(root_0, REGULAR_ID378_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sqrt_key"


    public static class instr_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "instr_key"
    // main.java.PLSQLKeys.g:1832:1: instr_key :{...}? REGULAR_ID ;
    public final instr_key_return instr_key() throws RecognitionException {
        instr_key_return retval = new instr_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID379=null;

        Object REGULAR_ID379_tree=null;

        try {
            // main.java.PLSQLKeys.g:1833:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1833:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("instr"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "instr_key", "input.LT(1).getText().equalsIgnoreCase(\"instr\")");
            }

            REGULAR_ID379=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_instr_key11963); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID379_tree = 
            (Object)adaptor.create(REGULAR_ID379)
            ;
            adaptor.addChild(root_0, REGULAR_ID379_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "instr_key"


    public static class nowait_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nowait_key"
    // main.java.PLSQLKeys.g:1836:1: nowait_key : PLSQL_RESERVED_NOWAIT ;
    public final nowait_key_return nowait_key() throws RecognitionException {
        nowait_key_return retval = new nowait_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_RESERVED_NOWAIT380=null;

        Object PLSQL_RESERVED_NOWAIT380_tree=null;

        try {
            // main.java.PLSQLKeys.g:1837:5: ( PLSQL_RESERVED_NOWAIT )
            // main.java.PLSQLKeys.g:1837:10: PLSQL_RESERVED_NOWAIT
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_RESERVED_NOWAIT380=(Token)match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_nowait_key11983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_NOWAIT380_tree = 
            (Object)adaptor.create(PLSQL_RESERVED_NOWAIT380)
            ;
            adaptor.addChild(root_0, PLSQL_RESERVED_NOWAIT380_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nowait_key"


    public static class lpad_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lpad_key"
    // main.java.PLSQLKeys.g:1840:1: lpad_key :{...}? REGULAR_ID ;
    public final lpad_key_return lpad_key() throws RecognitionException {
        lpad_key_return retval = new lpad_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID381=null;

        Object REGULAR_ID381_tree=null;

        try {
            // main.java.PLSQLKeys.g:1841:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1841:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("lpad"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "lpad_key", "input.LT(1).getText().equalsIgnoreCase(\"lpad\")");
            }

            REGULAR_ID381=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_lpad_key12005); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID381_tree = 
            (Object)adaptor.create(REGULAR_ID381)
            ;
            adaptor.addChild(root_0, REGULAR_ID381_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lpad_key"


    public static class boolean_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "boolean_key"
    // main.java.PLSQLKeys.g:1844:1: boolean_key :{...}? => REGULAR_ID -> BOOLEAN_VK[$REGULAR_ID] ;
    public final boolean_key_return boolean_key() throws RecognitionException {
        boolean_key_return retval = new boolean_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID382=null;

        Object REGULAR_ID382_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1845:5: ({...}? => REGULAR_ID -> BOOLEAN_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1845:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("boolean"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "boolean_key", "input.LT(1).getText().equalsIgnoreCase(\"boolean\")");
            }

            REGULAR_ID382=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_boolean_key12028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID382);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1845:76: -> BOOLEAN_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BOOLEAN_VK, REGULAR_ID382)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "boolean_key"


    public static class rpad_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rpad_key"
    // main.java.PLSQLKeys.g:1848:1: rpad_key :{...}? REGULAR_ID ;
    public final rpad_key_return rpad_key() throws RecognitionException {
        rpad_key_return retval = new rpad_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID383=null;

        Object REGULAR_ID383_tree=null;

        try {
            // main.java.PLSQLKeys.g:1849:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1849:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("rpad"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rpad_key", "input.LT(1).getText().equalsIgnoreCase(\"rpad\")");
            }

            REGULAR_ID383=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rpad_key12055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID383_tree = 
            (Object)adaptor.create(REGULAR_ID383)
            ;
            adaptor.addChild(root_0, REGULAR_ID383_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rpad_key"


    public static class savepoint_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "savepoint_key"
    // main.java.PLSQLKeys.g:1852:1: savepoint_key :{...}? => REGULAR_ID -> SAVEPOINT_VK[$REGULAR_ID] ;
    public final savepoint_key_return savepoint_key() throws RecognitionException {
        savepoint_key_return retval = new savepoint_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID384=null;

        Object REGULAR_ID384_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1853:5: ({...}? => REGULAR_ID -> SAVEPOINT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1853:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "savepoint_key", "input.LT(1).getText().equalsIgnoreCase(\"savepoint\")");
            }

            REGULAR_ID384=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_savepoint_key12078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID384);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1853:78: -> SAVEPOINT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SAVEPOINT_VK, REGULAR_ID384)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "savepoint_key"


    public static class decode_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "decode_key"
    // main.java.PLSQLKeys.g:1856:1: decode_key :{...}? REGULAR_ID ;
    public final decode_key_return decode_key() throws RecognitionException {
        decode_key_return retval = new decode_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID385=null;

        Object REGULAR_ID385_tree=null;

        try {
            // main.java.PLSQLKeys.g:1857:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1857:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("decode"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "decode_key", "input.LT(1).getText().equalsIgnoreCase(\"decode\")");
            }

            REGULAR_ID385=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_decode_key12105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID385_tree = 
            (Object)adaptor.create(REGULAR_ID385)
            ;
            adaptor.addChild(root_0, REGULAR_ID385_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "decode_key"


    public static class reverse_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reverse_key"
    // main.java.PLSQLKeys.g:1860:1: reverse_key :{...}? REGULAR_ID -> REVERSE_VK[$REGULAR_ID] ;
    public final reverse_key_return reverse_key() throws RecognitionException {
        reverse_key_return retval = new reverse_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID386=null;

        Object REGULAR_ID386_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1861:5: ({...}? REGULAR_ID -> REVERSE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1861:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("reverse"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "reverse_key", "input.LT(1).getText().equalsIgnoreCase(\"reverse\")");
            }

            REGULAR_ID386=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_reverse_key12127); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID386);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1861:74: -> REVERSE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(REVERSE_VK, REGULAR_ID386)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reverse_key"


    public static class least_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "least_key"
    // main.java.PLSQLKeys.g:1864:1: least_key :{...}? REGULAR_ID ;
    public final least_key_return least_key() throws RecognitionException {
        least_key_return retval = new least_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID387=null;

        Object REGULAR_ID387_tree=null;

        try {
            // main.java.PLSQLKeys.g:1865:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1865:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("least"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "least_key", "input.LT(1).getText().equalsIgnoreCase(\"least\")");
            }

            REGULAR_ID387=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_least_key12154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID387_tree = 
            (Object)adaptor.create(REGULAR_ID387)
            ;
            adaptor.addChild(root_0, REGULAR_ID387_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "least_key"


    public static class nvl_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nvl_key"
    // main.java.PLSQLKeys.g:1868:1: nvl_key :{...}? REGULAR_ID ;
    public final nvl_key_return nvl_key() throws RecognitionException {
        nvl_key_return retval = new nvl_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID388=null;

        Object REGULAR_ID388_tree=null;

        try {
            // main.java.PLSQLKeys.g:1869:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1869:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("nvl"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nvl_key", "input.LT(1).getText().equalsIgnoreCase(\"nvl\")");
            }

            REGULAR_ID388=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nvl_key12176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID388_tree = 
            (Object)adaptor.create(REGULAR_ID388)
            ;
            adaptor.addChild(root_0, REGULAR_ID388_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nvl_key"


    public static class variance_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variance_key"
    // main.java.PLSQLKeys.g:1872:1: variance_key :{...}? REGULAR_ID ;
    public final variance_key_return variance_key() throws RecognitionException {
        variance_key_return retval = new variance_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID389=null;

        Object REGULAR_ID389_tree=null;

        try {
            // main.java.PLSQLKeys.g:1873:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1873:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("variance"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "variance_key", "input.LT(1).getText().equalsIgnoreCase(\"variance\")");
            }

            REGULAR_ID389=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_variance_key12198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID389_tree = 
            (Object)adaptor.create(REGULAR_ID389)
            ;
            adaptor.addChild(root_0, REGULAR_ID389_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variance_key"


    public static class start_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "start_key"
    // main.java.PLSQLKeys.g:1876:1: start_key : PLSQL_RESERVED_START ;
    public final start_key_return start_key() throws RecognitionException {
        start_key_return retval = new start_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_RESERVED_START390=null;

        Object PLSQL_RESERVED_START390_tree=null;

        try {
            // main.java.PLSQLKeys.g:1877:5: ( PLSQL_RESERVED_START )
            // main.java.PLSQLKeys.g:1877:10: PLSQL_RESERVED_START
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_RESERVED_START390=(Token)match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_start_key12218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_START390_tree = 
            (Object)adaptor.create(PLSQL_RESERVED_START390)
            ;
            adaptor.addChild(root_0, PLSQL_RESERVED_START390_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "start_key"


    public static class desc_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "desc_key"
    // main.java.PLSQLKeys.g:1880:1: desc_key : SQL92_RESERVED_DESC ;
    public final desc_key_return desc_key() throws RecognitionException {
        desc_key_return retval = new desc_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_DESC391=null;

        Object SQL92_RESERVED_DESC391_tree=null;

        try {
            // main.java.PLSQLKeys.g:1881:5: ( SQL92_RESERVED_DESC )
            // main.java.PLSQLKeys.g:1881:10: SQL92_RESERVED_DESC
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_DESC391=(Token)match(input,SQL92_RESERVED_DESC,FOLLOW_SQL92_RESERVED_DESC_in_desc_key12238); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DESC391_tree = 
            (Object)adaptor.create(SQL92_RESERVED_DESC391)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_DESC391_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "desc_key"


    public static class concat_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "concat_key"
    // main.java.PLSQLKeys.g:1884:1: concat_key :{...}? REGULAR_ID ;
    public final concat_key_return concat_key() throws RecognitionException {
        concat_key_return retval = new concat_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID392=null;

        Object REGULAR_ID392_tree=null;

        try {
            // main.java.PLSQLKeys.g:1885:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1885:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("concat"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "concat_key", "input.LT(1).getText().equalsIgnoreCase(\"concat\")");
            }

            REGULAR_ID392=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_concat_key12260); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID392_tree = 
            (Object)adaptor.create(REGULAR_ID392)
            ;
            adaptor.addChild(root_0, REGULAR_ID392_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "concat_key"


    public static class dump_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dump_key"
    // main.java.PLSQLKeys.g:1888:1: dump_key :{...}? REGULAR_ID ;
    public final dump_key_return dump_key() throws RecognitionException {
        dump_key_return retval = new dump_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID393=null;

        Object REGULAR_ID393_tree=null;

        try {
            // main.java.PLSQLKeys.g:1889:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1889:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("dump"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dump_key", "input.LT(1).getText().equalsIgnoreCase(\"dump\")");
            }

            REGULAR_ID393=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dump_key12282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID393_tree = 
            (Object)adaptor.create(REGULAR_ID393)
            ;
            adaptor.addChild(root_0, REGULAR_ID393_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dump_key"


    public static class soundex_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "soundex_key"
    // main.java.PLSQLKeys.g:1892:1: soundex_key :{...}? REGULAR_ID ;
    public final soundex_key_return soundex_key() throws RecognitionException {
        soundex_key_return retval = new soundex_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID394=null;

        Object REGULAR_ID394_tree=null;

        try {
            // main.java.PLSQLKeys.g:1893:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1893:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("soundex"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "soundex_key", "input.LT(1).getText().equalsIgnoreCase(\"soundex\")");
            }

            REGULAR_ID394=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_soundex_key12304); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID394_tree = 
            (Object)adaptor.create(REGULAR_ID394)
            ;
            adaptor.addChild(root_0, REGULAR_ID394_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "soundex_key"


    public static class positive_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "positive_key"
    // main.java.PLSQLKeys.g:1896:1: positive_key :{...}? => REGULAR_ID -> POSITIVE_VK[$REGULAR_ID] ;
    public final positive_key_return positive_key() throws RecognitionException {
        positive_key_return retval = new positive_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID395=null;

        Object REGULAR_ID395_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1897:5: ({...}? => REGULAR_ID -> POSITIVE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1897:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("positive"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "positive_key", "input.LT(1).getText().equalsIgnoreCase(\"positive\")");
            }

            REGULAR_ID395=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_positive_key12327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID395);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1897:77: -> POSITIVE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(POSITIVE_VK, REGULAR_ID395)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "positive_key"


    public static class union_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_key"
    // main.java.PLSQLKeys.g:1900:1: union_key : SQL92_RESERVED_UNION ;
    public final union_key_return union_key() throws RecognitionException {
        union_key_return retval = new union_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_UNION396=null;

        Object SQL92_RESERVED_UNION396_tree=null;

        try {
            // main.java.PLSQLKeys.g:1901:5: ( SQL92_RESERVED_UNION )
            // main.java.PLSQLKeys.g:1901:10: SQL92_RESERVED_UNION
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_UNION396=(Token)match(input,SQL92_RESERVED_UNION,FOLLOW_SQL92_RESERVED_UNION_in_union_key12352); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_UNION396_tree = 
            (Object)adaptor.create(SQL92_RESERVED_UNION396)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_UNION396_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_key"


    public static class ascii_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ascii_key"
    // main.java.PLSQLKeys.g:1904:1: ascii_key :{...}? REGULAR_ID ;
    public final ascii_key_return ascii_key() throws RecognitionException {
        ascii_key_return retval = new ascii_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID397=null;

        Object REGULAR_ID397_tree=null;

        try {
            // main.java.PLSQLKeys.g:1905:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1905:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("ascii"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ascii_key", "input.LT(1).getText().equalsIgnoreCase(\"ascii\")");
            }

            REGULAR_ID397=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ascii_key12374); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID397_tree = 
            (Object)adaptor.create(REGULAR_ID397)
            ;
            adaptor.addChild(root_0, REGULAR_ID397_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ascii_key"


    public static class connect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "connect_key"
    // main.java.PLSQLKeys.g:1908:1: connect_key : SQL92_RESERVED_CONNECT ;
    public final connect_key_return connect_key() throws RecognitionException {
        connect_key_return retval = new connect_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_CONNECT398=null;

        Object SQL92_RESERVED_CONNECT398_tree=null;

        try {
            // main.java.PLSQLKeys.g:1909:5: ( SQL92_RESERVED_CONNECT )
            // main.java.PLSQLKeys.g:1909:10: SQL92_RESERVED_CONNECT
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_CONNECT398=(Token)match(input,SQL92_RESERVED_CONNECT,FOLLOW_SQL92_RESERVED_CONNECT_in_connect_key12394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_CONNECT398_tree = 
            (Object)adaptor.create(SQL92_RESERVED_CONNECT398)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_CONNECT398_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "connect_key"


    public static class asc_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "asc_key"
    // main.java.PLSQLKeys.g:1912:1: asc_key : SQL92_RESERVED_ASC ;
    public final asc_key_return asc_key() throws RecognitionException {
        asc_key_return retval = new asc_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_ASC399=null;

        Object SQL92_RESERVED_ASC399_tree=null;

        try {
            // main.java.PLSQLKeys.g:1913:5: ( SQL92_RESERVED_ASC )
            // main.java.PLSQLKeys.g:1913:10: SQL92_RESERVED_ASC
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_ASC399=(Token)match(input,SQL92_RESERVED_ASC,FOLLOW_SQL92_RESERVED_ASC_in_asc_key12414); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ASC399_tree = 
            (Object)adaptor.create(SQL92_RESERVED_ASC399)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_ASC399_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "asc_key"


    public static class hextoraw_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hextoraw_key"
    // main.java.PLSQLKeys.g:1916:1: hextoraw_key :{...}? REGULAR_ID ;
    public final hextoraw_key_return hextoraw_key() throws RecognitionException {
        hextoraw_key_return retval = new hextoraw_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID400=null;

        Object REGULAR_ID400_tree=null;

        try {
            // main.java.PLSQLKeys.g:1917:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1917:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("hextoraw"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "hextoraw_key", "input.LT(1).getText().equalsIgnoreCase(\"hextoraw\")");
            }

            REGULAR_ID400=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_hextoraw_key12436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID400_tree = 
            (Object)adaptor.create(REGULAR_ID400)
            ;
            adaptor.addChild(root_0, REGULAR_ID400_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hextoraw_key"


    public static class to_date_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "to_date_key"
    // main.java.PLSQLKeys.g:1920:1: to_date_key :{...}? REGULAR_ID ;
    public final to_date_key_return to_date_key() throws RecognitionException {
        to_date_key_return retval = new to_date_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID401=null;

        Object REGULAR_ID401_tree=null;

        try {
            // main.java.PLSQLKeys.g:1921:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1921:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("to_date"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "to_date_key", "input.LT(1).getText().equalsIgnoreCase(\"to_date\")");
            }

            REGULAR_ID401=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_to_date_key12458); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID401_tree = 
            (Object)adaptor.create(REGULAR_ID401)
            ;
            adaptor.addChild(root_0, REGULAR_ID401_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "to_date_key"


    public static class floor_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "floor_key"
    // main.java.PLSQLKeys.g:1924:1: floor_key :{...}? REGULAR_ID ;
    public final floor_key_return floor_key() throws RecognitionException {
        floor_key_return retval = new floor_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID402=null;

        Object REGULAR_ID402_tree=null;

        try {
            // main.java.PLSQLKeys.g:1925:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1925:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("floor"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "floor_key", "input.LT(1).getText().equalsIgnoreCase(\"floor\")");
            }

            REGULAR_ID402=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_floor_key12480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID402_tree = 
            (Object)adaptor.create(REGULAR_ID402)
            ;
            adaptor.addChild(root_0, REGULAR_ID402_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "floor_key"


    public static class sign_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sign_key"
    // main.java.PLSQLKeys.g:1928:1: sign_key :{...}? REGULAR_ID ;
    public final sign_key_return sign_key() throws RecognitionException {
        sign_key_return retval = new sign_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID403=null;

        Object REGULAR_ID403_tree=null;

        try {
            // main.java.PLSQLKeys.g:1929:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1929:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("sign"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sign_key", "input.LT(1).getText().equalsIgnoreCase(\"sign\")");
            }

            REGULAR_ID403=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sign_key12502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID403_tree = 
            (Object)adaptor.create(REGULAR_ID403)
            ;
            adaptor.addChild(root_0, REGULAR_ID403_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sign_key"


    public static class update_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_key"
    // main.java.PLSQLKeys.g:1932:1: update_key : SQL92_RESERVED_UPDATE ;
    public final update_key_return update_key() throws RecognitionException {
        update_key_return retval = new update_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_UPDATE404=null;

        Object SQL92_RESERVED_UPDATE404_tree=null;

        try {
            // main.java.PLSQLKeys.g:1933:5: ( SQL92_RESERVED_UPDATE )
            // main.java.PLSQLKeys.g:1933:10: SQL92_RESERVED_UPDATE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_UPDATE404=(Token)match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_update_key12522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_UPDATE404_tree = 
            (Object)adaptor.create(SQL92_RESERVED_UPDATE404)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_UPDATE404_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "update_key"


    public static class trunc_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "trunc_key"
    // main.java.PLSQLKeys.g:1936:1: trunc_key :{...}? REGULAR_ID ;
    public final trunc_key_return trunc_key() throws RecognitionException {
        trunc_key_return retval = new trunc_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID405=null;

        Object REGULAR_ID405_tree=null;

        try {
            // main.java.PLSQLKeys.g:1937:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1937:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("trunc"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "trunc_key", "input.LT(1).getText().equalsIgnoreCase(\"trunc\")");
            }

            REGULAR_ID405=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_trunc_key12544); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID405_tree = 
            (Object)adaptor.create(REGULAR_ID405)
            ;
            adaptor.addChild(root_0, REGULAR_ID405_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "trunc_key"


    public static class rtrim_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rtrim_key"
    // main.java.PLSQLKeys.g:1940:1: rtrim_key :{...}? REGULAR_ID ;
    public final rtrim_key_return rtrim_key() throws RecognitionException {
        rtrim_key_return retval = new rtrim_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID406=null;

        Object REGULAR_ID406_tree=null;

        try {
            // main.java.PLSQLKeys.g:1941:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1941:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("rtrim"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "rtrim_key", "input.LT(1).getText().equalsIgnoreCase(\"rtrim\")");
            }

            REGULAR_ID406=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_rtrim_key12566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID406_tree = 
            (Object)adaptor.create(REGULAR_ID406)
            ;
            adaptor.addChild(root_0, REGULAR_ID406_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rtrim_key"


    public static class close_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "close_key"
    // main.java.PLSQLKeys.g:1944:1: close_key :{...}? => REGULAR_ID -> CLOSE_VK[$REGULAR_ID] ;
    public final close_key_return close_key() throws RecognitionException {
        close_key_return retval = new close_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID407=null;

        Object REGULAR_ID407_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1945:5: ({...}? => REGULAR_ID -> CLOSE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1945:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("close"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "close_key", "input.LT(1).getText().equalsIgnoreCase(\"close\")");
            }

            REGULAR_ID407=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_close_key12589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID407);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1945:74: -> CLOSE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CLOSE_VK, REGULAR_ID407)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "close_key"


    public static class to_char_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "to_char_key"
    // main.java.PLSQLKeys.g:1948:1: to_char_key :{...}? REGULAR_ID ;
    public final to_char_key_return to_char_key() throws RecognitionException {
        to_char_key_return retval = new to_char_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID408=null;

        Object REGULAR_ID408_tree=null;

        try {
            // main.java.PLSQLKeys.g:1949:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1949:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("to_char"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "to_char_key", "input.LT(1).getText().equalsIgnoreCase(\"to_char\")");
            }

            REGULAR_ID408=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_to_char_key12616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID408_tree = 
            (Object)adaptor.create(REGULAR_ID408)
            ;
            adaptor.addChild(root_0, REGULAR_ID408_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "to_char_key"


    public static class ltrim_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ltrim_key"
    // main.java.PLSQLKeys.g:1952:1: ltrim_key :{...}? REGULAR_ID ;
    public final ltrim_key_return ltrim_key() throws RecognitionException {
        ltrim_key_return retval = new ltrim_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID409=null;

        Object REGULAR_ID409_tree=null;

        try {
            // main.java.PLSQLKeys.g:1953:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1953:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("ltrim"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ltrim_key", "input.LT(1).getText().equalsIgnoreCase(\"ltrim\")");
            }

            REGULAR_ID409=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ltrim_key12638); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID409_tree = 
            (Object)adaptor.create(REGULAR_ID409)
            ;
            adaptor.addChild(root_0, REGULAR_ID409_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ltrim_key"


    public static class mode_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mode_key"
    // main.java.PLSQLKeys.g:1956:1: mode_key : PLSQL_RESERVED_MODE ;
    public final mode_key_return mode_key() throws RecognitionException {
        mode_key_return retval = new mode_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_RESERVED_MODE410=null;

        Object PLSQL_RESERVED_MODE410_tree=null;

        try {
            // main.java.PLSQLKeys.g:1957:5: ( PLSQL_RESERVED_MODE )
            // main.java.PLSQLKeys.g:1957:10: PLSQL_RESERVED_MODE
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_RESERVED_MODE410=(Token)match(input,PLSQL_RESERVED_MODE,FOLLOW_PLSQL_RESERVED_MODE_in_mode_key12658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_RESERVED_MODE410_tree = 
            (Object)adaptor.create(PLSQL_RESERVED_MODE410)
            ;
            adaptor.addChild(root_0, PLSQL_RESERVED_MODE410_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mode_key"


    public static class uid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "uid_key"
    // main.java.PLSQLKeys.g:1960:1: uid_key :{...}? REGULAR_ID ;
    public final uid_key_return uid_key() throws RecognitionException {
        uid_key_return retval = new uid_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID411=null;

        Object REGULAR_ID411_tree=null;

        try {
            // main.java.PLSQLKeys.g:1961:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1961:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("uid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "uid_key", "input.LT(1).getText().equalsIgnoreCase(\"uid\")");
            }

            REGULAR_ID411=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_uid_key12680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID411_tree = 
            (Object)adaptor.create(REGULAR_ID411)
            ;
            adaptor.addChild(root_0, REGULAR_ID411_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "uid_key"


    public static class chr_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "chr_key"
    // main.java.PLSQLKeys.g:1964:1: chr_key :{...}? REGULAR_ID -> CHR_VK[$REGULAR_ID] ;
    public final chr_key_return chr_key() throws RecognitionException {
        chr_key_return retval = new chr_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID412=null;

        Object REGULAR_ID412_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1965:5: ({...}? REGULAR_ID -> CHR_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1965:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("chr"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "chr_key", "input.LT(1).getText().equalsIgnoreCase(\"chr\")");
            }

            REGULAR_ID412=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_chr_key12702); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID412);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1965:70: -> CHR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CHR_VK, REGULAR_ID412)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "chr_key"


    public static class intersect_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "intersect_key"
    // main.java.PLSQLKeys.g:1968:1: intersect_key : SQL92_RESERVED_INTERSECT ;
    public final intersect_key_return intersect_key() throws RecognitionException {
        intersect_key_return retval = new intersect_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_INTERSECT413=null;

        Object SQL92_RESERVED_INTERSECT413_tree=null;

        try {
            // main.java.PLSQLKeys.g:1969:5: ( SQL92_RESERVED_INTERSECT )
            // main.java.PLSQLKeys.g:1969:10: SQL92_RESERVED_INTERSECT
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_INTERSECT413=(Token)match(input,SQL92_RESERVED_INTERSECT,FOLLOW_SQL92_RESERVED_INTERSECT_in_intersect_key12727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_INTERSECT413_tree = 
            (Object)adaptor.create(SQL92_RESERVED_INTERSECT413)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_INTERSECT413_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "intersect_key"


    public static class chartorowid_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "chartorowid_key"
    // main.java.PLSQLKeys.g:1972:1: chartorowid_key :{...}? REGULAR_ID ;
    public final chartorowid_key_return chartorowid_key() throws RecognitionException {
        chartorowid_key_return retval = new chartorowid_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID414=null;

        Object REGULAR_ID414_tree=null;

        try {
            // main.java.PLSQLKeys.g:1973:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1973:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("chartorowid"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "chartorowid_key", "input.LT(1).getText().equalsIgnoreCase(\"chartorowid\")");
            }

            REGULAR_ID414=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_chartorowid_key12749); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID414_tree = 
            (Object)adaptor.create(REGULAR_ID414)
            ;
            adaptor.addChild(root_0, REGULAR_ID414_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "chartorowid_key"


    public static class mlslabel_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "mlslabel_key"
    // main.java.PLSQLKeys.g:1976:1: mlslabel_key :{...}? => REGULAR_ID -> MLSLABEL_VK[$REGULAR_ID] ;
    public final mlslabel_key_return mlslabel_key() throws RecognitionException {
        mlslabel_key_return retval = new mlslabel_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID415=null;

        Object REGULAR_ID415_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:1977:5: ({...}? => REGULAR_ID -> MLSLABEL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:1977:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("mlslabel"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "mlslabel_key", "input.LT(1).getText().equalsIgnoreCase(\"mlslabel\")");
            }

            REGULAR_ID415=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_mlslabel_key12772); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID415);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1977:77: -> MLSLABEL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(MLSLABEL_VK, REGULAR_ID415)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "mlslabel_key"


    public static class userenv_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "userenv_key"
    // main.java.PLSQLKeys.g:1980:1: userenv_key :{...}? REGULAR_ID ;
    public final userenv_key_return userenv_key() throws RecognitionException {
        userenv_key_return retval = new userenv_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID416=null;

        Object REGULAR_ID416_tree=null;

        try {
            // main.java.PLSQLKeys.g:1981:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1981:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("userenv"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "userenv_key", "input.LT(1).getText().equalsIgnoreCase(\"userenv\")");
            }

            REGULAR_ID416=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_userenv_key12799); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID416_tree = 
            (Object)adaptor.create(REGULAR_ID416)
            ;
            adaptor.addChild(root_0, REGULAR_ID416_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "userenv_key"


    public static class stddev_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stddev_key"
    // main.java.PLSQLKeys.g:1984:1: stddev_key :{...}? REGULAR_ID ;
    public final stddev_key_return stddev_key() throws RecognitionException {
        stddev_key_return retval = new stddev_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID417=null;

        Object REGULAR_ID417_tree=null;

        try {
            // main.java.PLSQLKeys.g:1985:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1985:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("stddev"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "stddev_key", "input.LT(1).getText().equalsIgnoreCase(\"stddev\")");
            }

            REGULAR_ID417=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_stddev_key12821); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID417_tree = 
            (Object)adaptor.create(REGULAR_ID417)
            ;
            adaptor.addChild(root_0, REGULAR_ID417_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stddev_key"


    public static class length_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "length_key"
    // main.java.PLSQLKeys.g:1988:1: length_key :{...}? REGULAR_ID ;
    public final length_key_return length_key() throws RecognitionException {
        length_key_return retval = new length_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID418=null;

        Object REGULAR_ID418_tree=null;

        try {
            // main.java.PLSQLKeys.g:1989:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:1989:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("length"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "length_key", "input.LT(1).getText().equalsIgnoreCase(\"length\")");
            }

            REGULAR_ID418=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_length_key12843); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID418_tree = 
            (Object)adaptor.create(REGULAR_ID418)
            ;
            adaptor.addChild(root_0, REGULAR_ID418_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "length_key"


    public static class fetch_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fetch_key"
    // main.java.PLSQLKeys.g:1992:1: fetch_key : SQL92_RESERVED_FETCH ;
    public final fetch_key_return fetch_key() throws RecognitionException {
        fetch_key_return retval = new fetch_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_FETCH419=null;

        Object SQL92_RESERVED_FETCH419_tree=null;

        try {
            // main.java.PLSQLKeys.g:1993:5: ( SQL92_RESERVED_FETCH )
            // main.java.PLSQLKeys.g:1993:10: SQL92_RESERVED_FETCH
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_FETCH419=(Token)match(input,SQL92_RESERVED_FETCH,FOLLOW_SQL92_RESERVED_FETCH_in_fetch_key12863); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_FETCH419_tree = 
            (Object)adaptor.create(SQL92_RESERVED_FETCH419)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_FETCH419_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fetch_key"


    public static class group_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_key"
    // main.java.PLSQLKeys.g:1996:1: group_key : SQL92_RESERVED_GROUP ;
    public final group_key_return group_key() throws RecognitionException {
        group_key_return retval = new group_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_GROUP420=null;

        Object SQL92_RESERVED_GROUP420_tree=null;

        try {
            // main.java.PLSQLKeys.g:1997:5: ( SQL92_RESERVED_GROUP )
            // main.java.PLSQLKeys.g:1997:10: SQL92_RESERVED_GROUP
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_GROUP420=(Token)match(input,SQL92_RESERVED_GROUP,FOLLOW_SQL92_RESERVED_GROUP_in_group_key12883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_GROUP420_tree = 
            (Object)adaptor.create(SQL92_RESERVED_GROUP420)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_GROUP420_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_key"


    public static class sysdate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sysdate_key"
    // main.java.PLSQLKeys.g:2000:1: sysdate_key :{...}? REGULAR_ID ;
    public final sysdate_key_return sysdate_key() throws RecognitionException {
        sysdate_key_return retval = new sysdate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID421=null;

        Object REGULAR_ID421_tree=null;

        try {
            // main.java.PLSQLKeys.g:2001:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2001:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("sysdate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sysdate_key", "input.LT(1).getText().equalsIgnoreCase(\"sysdate\")");
            }

            REGULAR_ID421=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sysdate_key12905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID421_tree = 
            (Object)adaptor.create(REGULAR_ID421)
            ;
            adaptor.addChild(root_0, REGULAR_ID421_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sysdate_key"


    public static class binary_integer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "binary_integer_key"
    // main.java.PLSQLKeys.g:2004:1: binary_integer_key :{...}? => REGULAR_ID -> BINARY_INTEGER_VK[$REGULAR_ID] ;
    public final binary_integer_key_return binary_integer_key() throws RecognitionException {
        binary_integer_key_return retval = new binary_integer_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID422=null;

        Object REGULAR_ID422_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2005:5: ({...}? => REGULAR_ID -> BINARY_INTEGER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2005:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("binary_integer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "binary_integer_key", "input.LT(1).getText().equalsIgnoreCase(\"binary_integer\")");
            }

            REGULAR_ID422=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_binary_integer_key12928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID422);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2005:83: -> BINARY_INTEGER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BINARY_INTEGER_VK, REGULAR_ID422)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "binary_integer_key"


    public static class to_number_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "to_number_key"
    // main.java.PLSQLKeys.g:2008:1: to_number_key :{...}? REGULAR_ID ;
    public final to_number_key_return to_number_key() throws RecognitionException {
        to_number_key_return retval = new to_number_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID423=null;

        Object REGULAR_ID423_tree=null;

        try {
            // main.java.PLSQLKeys.g:2009:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2009:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("to_number"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "to_number_key", "input.LT(1).getText().equalsIgnoreCase(\"to_number\")");
            }

            REGULAR_ID423=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_to_number_key12955); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID423_tree = 
            (Object)adaptor.create(REGULAR_ID423)
            ;
            adaptor.addChild(root_0, REGULAR_ID423_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "to_number_key"


    public static class substr_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "substr_key"
    // main.java.PLSQLKeys.g:2012:1: substr_key :{...}? REGULAR_ID ;
    public final substr_key_return substr_key() throws RecognitionException {
        substr_key_return retval = new substr_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID424=null;

        Object REGULAR_ID424_tree=null;

        try {
            // main.java.PLSQLKeys.g:2013:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2013:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("substr"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "substr_key", "input.LT(1).getText().equalsIgnoreCase(\"substr\")");
            }

            REGULAR_ID424=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_substr_key12977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID424_tree = 
            (Object)adaptor.create(REGULAR_ID424)
            ;
            adaptor.addChild(root_0, REGULAR_ID424_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "substr_key"


    public static class ceil_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ceil_key"
    // main.java.PLSQLKeys.g:2016:1: ceil_key :{...}? REGULAR_ID ;
    public final ceil_key_return ceil_key() throws RecognitionException {
        ceil_key_return retval = new ceil_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID425=null;

        Object REGULAR_ID425_tree=null;

        try {
            // main.java.PLSQLKeys.g:2017:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2017:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("ceil"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "ceil_key", "input.LT(1).getText().equalsIgnoreCase(\"ceil\")");
            }

            REGULAR_ID425=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_ceil_key12999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID425_tree = 
            (Object)adaptor.create(REGULAR_ID425)
            ;
            adaptor.addChild(root_0, REGULAR_ID425_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ceil_key"


    public static class initcap_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "initcap_key"
    // main.java.PLSQLKeys.g:2020:1: initcap_key :{...}? REGULAR_ID ;
    public final initcap_key_return initcap_key() throws RecognitionException {
        initcap_key_return retval = new initcap_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID426=null;

        Object REGULAR_ID426_tree=null;

        try {
            // main.java.PLSQLKeys.g:2021:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2021:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("initcap"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "initcap_key", "input.LT(1).getText().equalsIgnoreCase(\"initcap\")");
            }

            REGULAR_ID426=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_initcap_key13021); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID426_tree = 
            (Object)adaptor.create(REGULAR_ID426)
            ;
            adaptor.addChild(root_0, REGULAR_ID426_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "initcap_key"


    public static class round_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "round_key"
    // main.java.PLSQLKeys.g:2024:1: round_key :{...}? REGULAR_ID ;
    public final round_key_return round_key() throws RecognitionException {
        round_key_return retval = new round_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID427=null;

        Object REGULAR_ID427_tree=null;

        try {
            // main.java.PLSQLKeys.g:2025:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2025:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("round"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "round_key", "input.LT(1).getText().equalsIgnoreCase(\"round\")");
            }

            REGULAR_ID427=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_round_key13043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID427_tree = 
            (Object)adaptor.create(REGULAR_ID427)
            ;
            adaptor.addChild(root_0, REGULAR_ID427_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "round_key"


    public static class long_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "long_key"
    // main.java.PLSQLKeys.g:2028:1: long_key :{...}? => REGULAR_ID -> LONG_VK[$REGULAR_ID] ;
    public final long_key_return long_key() throws RecognitionException {
        long_key_return retval = new long_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID428=null;

        Object REGULAR_ID428_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2029:5: ({...}? => REGULAR_ID -> LONG_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2029:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("long"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "long_key", "input.LT(1).getText().equalsIgnoreCase(\"long\")");
            }

            REGULAR_ID428=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_long_key13066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID428);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2029:73: -> LONG_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LONG_VK, REGULAR_ID428)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "long_key"


    public static class read_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "read_key"
    // main.java.PLSQLKeys.g:2032:1: read_key :{...}? => REGULAR_ID -> READ_VK[$REGULAR_ID] ;
    public final read_key_return read_key() throws RecognitionException {
        read_key_return retval = new read_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID429=null;

        Object REGULAR_ID429_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2033:5: ({...}? => REGULAR_ID -> READ_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2033:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("read"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "read_key", "input.LT(1).getText().equalsIgnoreCase(\"read\")");
            }

            REGULAR_ID429=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_read_key13094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID429);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2033:73: -> READ_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(READ_VK, REGULAR_ID429)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "read_key"


    public static class only_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "only_key"
    // main.java.PLSQLKeys.g:2036:1: only_key :{...}? REGULAR_ID -> ONLY_VK[$REGULAR_ID] ;
    public final only_key_return only_key() throws RecognitionException {
        only_key_return retval = new only_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID430=null;

        Object REGULAR_ID430_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2037:5: ({...}? REGULAR_ID -> ONLY_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2037:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("only"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "only_key", "input.LT(1).getText().equalsIgnoreCase(\"only\")");
            }

            REGULAR_ID430=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_only_key13121); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID430);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2037:71: -> ONLY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(ONLY_VK, REGULAR_ID430)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "only_key"


    public static class set_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "set_key"
    // main.java.PLSQLKeys.g:2040:1: set_key :{...}? => REGULAR_ID -> SET_VK[$REGULAR_ID] ;
    public final set_key_return set_key() throws RecognitionException {
        set_key_return retval = new set_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID431=null;

        Object REGULAR_ID431_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2041:5: ({...}? => REGULAR_ID -> SET_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2041:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("set"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "set_key", "input.LT(1).getText().equalsIgnoreCase(\"set\")");
            }

            REGULAR_ID431=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_set_key13149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID431);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2041:72: -> SET_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SET_VK, REGULAR_ID431)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "set_key"


    public static class nullif_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nullif_key"
    // main.java.PLSQLKeys.g:2044:1: nullif_key :{...}? REGULAR_ID ;
    public final nullif_key_return nullif_key() throws RecognitionException {
        nullif_key_return retval = new nullif_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID432=null;

        Object REGULAR_ID432_tree=null;

        try {
            // main.java.PLSQLKeys.g:2045:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2045:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("nullif"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nullif_key", "input.LT(1).getText().equalsIgnoreCase(\"nullif\")");
            }

            REGULAR_ID432=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nullif_key13176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID432_tree = 
            (Object)adaptor.create(REGULAR_ID432)
            ;
            adaptor.addChild(root_0, REGULAR_ID432_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nullif_key"


    public static class coalesce_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "coalesce_key"
    // main.java.PLSQLKeys.g:2048:1: coalesce_key :{...}? REGULAR_ID ;
    public final coalesce_key_return coalesce_key() throws RecognitionException {
        coalesce_key_return retval = new coalesce_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID433=null;

        Object REGULAR_ID433_tree=null;

        try {
            // main.java.PLSQLKeys.g:2049:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2049:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("coalesce"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "coalesce_key", "input.LT(1).getText().equalsIgnoreCase(\"coalesce\")");
            }

            REGULAR_ID433=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_coalesce_key13198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID433_tree = 
            (Object)adaptor.create(REGULAR_ID433)
            ;
            adaptor.addChild(root_0, REGULAR_ID433_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "coalesce_key"


    public static class count_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "count_key"
    // main.java.PLSQLKeys.g:2052:1: count_key :{...}? REGULAR_ID -> COUNT_VK[$REGULAR_ID] ;
    public final count_key_return count_key() throws RecognitionException {
        count_key_return retval = new count_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID434=null;

        Object REGULAR_ID434_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2053:5: ({...}? REGULAR_ID -> COUNT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2053:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("count"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "count_key", "input.LT(1).getText().equalsIgnoreCase(\"count\")");
            }

            REGULAR_ID434=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_count_key13220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID434);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2053:72: -> COUNT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(COUNT_VK, REGULAR_ID434)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "count_key"


    public static class avg_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "avg_key"
    // main.java.PLSQLKeys.g:2056:1: avg_key :{...}? REGULAR_ID ;
    public final avg_key_return avg_key() throws RecognitionException {
        avg_key_return retval = new avg_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID435=null;

        Object REGULAR_ID435_tree=null;

        try {
            // main.java.PLSQLKeys.g:2056:12: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2056:17: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("avg"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "avg_key", "input.LT(1).getText().equalsIgnoreCase(\"avg\")");
            }

            REGULAR_ID435=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_avg_key13246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID435_tree = 
            (Object)adaptor.create(REGULAR_ID435)
            ;
            adaptor.addChild(root_0, REGULAR_ID435_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "avg_key"


    public static class max_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "max_key"
    // main.java.PLSQLKeys.g:2059:1: max_key :{...}? REGULAR_ID ;
    public final max_key_return max_key() throws RecognitionException {
        max_key_return retval = new max_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID436=null;

        Object REGULAR_ID436_tree=null;

        try {
            // main.java.PLSQLKeys.g:2059:12: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2059:17: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("max"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "max_key", "input.LT(1).getText().equalsIgnoreCase(\"max\")");
            }

            REGULAR_ID436=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_max_key13267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID436_tree = 
            (Object)adaptor.create(REGULAR_ID436)
            ;
            adaptor.addChild(root_0, REGULAR_ID436_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "max_key"


    public static class min_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "min_key"
    // main.java.PLSQLKeys.g:2062:1: min_key :{...}? REGULAR_ID ;
    public final min_key_return min_key() throws RecognitionException {
        min_key_return retval = new min_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID437=null;

        Object REGULAR_ID437_tree=null;

        try {
            // main.java.PLSQLKeys.g:2062:12: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2062:17: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("min"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "min_key", "input.LT(1).getText().equalsIgnoreCase(\"min\")");
            }

            REGULAR_ID437=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_min_key13288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID437_tree = 
            (Object)adaptor.create(REGULAR_ID437)
            ;
            adaptor.addChild(root_0, REGULAR_ID437_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "min_key"


    public static class sum_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sum_key"
    // main.java.PLSQLKeys.g:2065:1: sum_key :{...}? REGULAR_ID ;
    public final sum_key_return sum_key() throws RecognitionException {
        sum_key_return retval = new sum_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID438=null;

        Object REGULAR_ID438_tree=null;

        try {
            // main.java.PLSQLKeys.g:2065:12: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2065:17: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("sum"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sum_key", "input.LT(1).getText().equalsIgnoreCase(\"sum\")");
            }

            REGULAR_ID438=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sum_key13309); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID438_tree = 
            (Object)adaptor.create(REGULAR_ID438)
            ;
            adaptor.addChild(root_0, REGULAR_ID438_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sum_key"


    public static class unknown_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unknown_key"
    // main.java.PLSQLKeys.g:2068:1: unknown_key :{...}? REGULAR_ID ;
    public final unknown_key_return unknown_key() throws RecognitionException {
        unknown_key_return retval = new unknown_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID439=null;

        Object REGULAR_ID439_tree=null;

        try {
            // main.java.PLSQLKeys.g:2069:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2069:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("unknown"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "unknown_key", "input.LT(1).getText().equalsIgnoreCase(\"unknown\")");
            }

            REGULAR_ID439=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_unknown_key13331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID439_tree = 
            (Object)adaptor.create(REGULAR_ID439)
            ;
            adaptor.addChild(root_0, REGULAR_ID439_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unknown_key"


    public static class escape_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "escape_key"
    // main.java.PLSQLKeys.g:2072:1: escape_key :{...}? REGULAR_ID ;
    public final escape_key_return escape_key() throws RecognitionException {
        escape_key_return retval = new escape_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID440=null;

        Object REGULAR_ID440_tree=null;

        try {
            // main.java.PLSQLKeys.g:2073:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2073:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("escape"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "escape_key", "input.LT(1).getText().equalsIgnoreCase(\"escape\")");
            }

            REGULAR_ID440=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_escape_key13353); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID440_tree = 
            (Object)adaptor.create(REGULAR_ID440)
            ;
            adaptor.addChild(root_0, REGULAR_ID440_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "escape_key"


    public static class some_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "some_key"
    // main.java.PLSQLKeys.g:2076:1: some_key :{...}? REGULAR_ID -> SOME_VK[$REGULAR_ID] ;
    public final some_key_return some_key() throws RecognitionException {
        some_key_return retval = new some_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID441=null;

        Object REGULAR_ID441_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2077:5: ({...}? REGULAR_ID -> SOME_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2077:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("some"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "some_key", "input.LT(1).getText().equalsIgnoreCase(\"some\")");
            }

            REGULAR_ID441=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_some_key13375); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID441);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2077:71: -> SOME_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SOME_VK, REGULAR_ID441)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "some_key"


    public static class match_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "match_key"
    // main.java.PLSQLKeys.g:2080:1: match_key :{...}? REGULAR_ID ;
    public final match_key_return match_key() throws RecognitionException {
        match_key_return retval = new match_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID442=null;

        Object REGULAR_ID442_tree=null;

        try {
            // main.java.PLSQLKeys.g:2081:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2081:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("match"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "match_key", "input.LT(1).getText().equalsIgnoreCase(\"match\")");
            }

            REGULAR_ID442=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_match_key13402); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID442_tree = 
            (Object)adaptor.create(REGULAR_ID442)
            ;
            adaptor.addChild(root_0, REGULAR_ID442_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "match_key"


    public static class cast_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_key"
    // main.java.PLSQLKeys.g:2084:1: cast_key :{...}? REGULAR_ID -> CAST_VK[$REGULAR_ID] ;
    public final cast_key_return cast_key() throws RecognitionException {
        cast_key_return retval = new cast_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID443=null;

        Object REGULAR_ID443_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2085:5: ({...}? REGULAR_ID -> CAST_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2085:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cast"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cast_key", "input.LT(1).getText().equalsIgnoreCase(\"cast\")");
            }

            REGULAR_ID443=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cast_key13424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID443);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2085:71: -> CAST_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CAST_VK, REGULAR_ID443)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_key"


    public static class full_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_key"
    // main.java.PLSQLKeys.g:2088:1: full_key :{...}? => REGULAR_ID -> FULL_VK[$REGULAR_ID] ;
    public final full_key_return full_key() throws RecognitionException {
        full_key_return retval = new full_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID444=null;

        Object REGULAR_ID444_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2088:9: ({...}? => REGULAR_ID -> FULL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2088:14: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("full"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "full_key", "input.LT(1).getText().equalsIgnoreCase(\"full\")");
            }

            REGULAR_ID444=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_full_key13447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID444);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2088:77: -> FULL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FULL_VK, REGULAR_ID444)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_key"


    public static class partial_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "partial_key"
    // main.java.PLSQLKeys.g:2091:1: partial_key :{...}? REGULAR_ID ;
    public final partial_key_return partial_key() throws RecognitionException {
        partial_key_return retval = new partial_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID445=null;

        Object REGULAR_ID445_tree=null;

        try {
            // main.java.PLSQLKeys.g:2092:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2092:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("partial"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "partial_key", "input.LT(1).getText().equalsIgnoreCase(\"partial\")");
            }

            REGULAR_ID445=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_partial_key13474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID445_tree = 
            (Object)adaptor.create(REGULAR_ID445)
            ;
            adaptor.addChild(root_0, REGULAR_ID445_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "partial_key"


    public static class character_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "character_key"
    // main.java.PLSQLKeys.g:2095:1: character_key :{...}? => REGULAR_ID -> CHARACTER_VK[$REGULAR_ID] ;
    public final character_key_return character_key() throws RecognitionException {
        character_key_return retval = new character_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID446=null;

        Object REGULAR_ID446_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2096:5: ({...}? => REGULAR_ID -> CHARACTER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2096:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("character"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "character_key", "input.LT(1).getText().equalsIgnoreCase(\"character\")");
            }

            REGULAR_ID446=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_character_key13497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID446);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2096:78: -> CHARACTER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CHARACTER_VK, REGULAR_ID446)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "character_key"


    public static class except_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "except_key"
    // main.java.PLSQLKeys.g:2099:1: except_key :{...}? REGULAR_ID ;
    public final except_key_return except_key() throws RecognitionException {
        except_key_return retval = new except_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID447=null;

        Object REGULAR_ID447_tree=null;

        try {
            // main.java.PLSQLKeys.g:2100:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2100:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("except"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "except_key", "input.LT(1).getText().equalsIgnoreCase(\"except\")");
            }

            REGULAR_ID447=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_except_key13524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID447_tree = 
            (Object)adaptor.create(REGULAR_ID447)
            ;
            adaptor.addChild(root_0, REGULAR_ID447_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "except_key"


    public static class char_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "char_key"
    // main.java.PLSQLKeys.g:2103:1: char_key :{...}? => REGULAR_ID -> CHAR_VK[$REGULAR_ID] ;
    public final char_key_return char_key() throws RecognitionException {
        char_key_return retval = new char_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID448=null;

        Object REGULAR_ID448_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2103:9: ({...}? => REGULAR_ID -> CHAR_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2103:14: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("char"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_key", "input.LT(1).getText().equalsIgnoreCase(\"char\")");
            }

            REGULAR_ID448=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_char_key13542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID448);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2103:77: -> CHAR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CHAR_VK, REGULAR_ID448)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "char_key"


    public static class varying_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varying_key"
    // main.java.PLSQLKeys.g:2106:1: varying_key :{...}? => REGULAR_ID ;
    public final varying_key_return varying_key() throws RecognitionException {
        varying_key_return retval = new varying_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID449=null;

        Object REGULAR_ID449_tree=null;

        try {
            // main.java.PLSQLKeys.g:2107:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:2107:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("varying"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "varying_key", "input.LT(1).getText().equalsIgnoreCase(\"varying\")");
            }

            REGULAR_ID449=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_varying_key13570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID449_tree = 
            (Object)adaptor.create(REGULAR_ID449)
            ;
            adaptor.addChild(root_0, REGULAR_ID449_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varying_key"


    public static class varchar_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "varchar_key"
    // main.java.PLSQLKeys.g:2110:1: varchar_key :{...}? => REGULAR_ID -> VARCHAR_VK[$REGULAR_ID] ;
    public final varchar_key_return varchar_key() throws RecognitionException {
        varchar_key_return retval = new varchar_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID450=null;

        Object REGULAR_ID450_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2111:5: ({...}? => REGULAR_ID -> VARCHAR_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2111:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("varchar"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "varchar_key", "input.LT(1).getText().equalsIgnoreCase(\"varchar\")");
            }

            REGULAR_ID450=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_varchar_key13593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID450);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2111:76: -> VARCHAR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(VARCHAR_VK, REGULAR_ID450)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "varchar_key"


    public static class national_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "national_key"
    // main.java.PLSQLKeys.g:2114:1: national_key :{...}? REGULAR_ID ;
    public final national_key_return national_key() throws RecognitionException {
        national_key_return retval = new national_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID451=null;

        Object REGULAR_ID451_tree=null;

        try {
            // main.java.PLSQLKeys.g:2115:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2115:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("national"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "national_key", "input.LT(1).getText().equalsIgnoreCase(\"national\")");
            }

            REGULAR_ID451=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_national_key13620); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID451_tree = 
            (Object)adaptor.create(REGULAR_ID451)
            ;
            adaptor.addChild(root_0, REGULAR_ID451_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "national_key"


    public static class nchar_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nchar_key"
    // main.java.PLSQLKeys.g:2118:1: nchar_key :{...}? REGULAR_ID -> NCHAR_VK[$REGULAR_ID] ;
    public final nchar_key_return nchar_key() throws RecognitionException {
        nchar_key_return retval = new nchar_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID452=null;

        Object REGULAR_ID452_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2119:5: ({...}? REGULAR_ID -> NCHAR_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2119:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nchar"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nchar_key", "input.LT(1).getText().equalsIgnoreCase(\"nchar\")");
            }

            REGULAR_ID452=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nchar_key13642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID452);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2119:72: -> NCHAR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NCHAR_VK, REGULAR_ID452)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nchar_key"


    public static class bit_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bit_key"
    // main.java.PLSQLKeys.g:2122:1: bit_key :{...}? REGULAR_ID -> BIT_VK[$REGULAR_ID] ;
    public final bit_key_return bit_key() throws RecognitionException {
        bit_key_return retval = new bit_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID453=null;

        Object REGULAR_ID453_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2122:12: ({...}? REGULAR_ID -> BIT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2122:17: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("bit"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "bit_key", "input.LT(1).getText().equalsIgnoreCase(\"bit\")");
            }

            REGULAR_ID453=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_bit_key13668); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID453);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2122:77: -> BIT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BIT_VK, REGULAR_ID453)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bit_key"


    public static class float_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "float_key"
    // main.java.PLSQLKeys.g:2125:1: float_key :{...}? REGULAR_ID -> FLOAT_VK[$REGULAR_ID] ;
    public final float_key_return float_key() throws RecognitionException {
        float_key_return retval = new float_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID454=null;

        Object REGULAR_ID454_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2126:5: ({...}? REGULAR_ID -> FLOAT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2126:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("float"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "float_key", "input.LT(1).getText().equalsIgnoreCase(\"float\")");
            }

            REGULAR_ID454=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_float_key13695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID454);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2126:72: -> FLOAT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FLOAT_VK, REGULAR_ID454)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "float_key"


    public static class real_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "real_key"
    // main.java.PLSQLKeys.g:2129:1: real_key :{...}? => REGULAR_ID -> REAL_VK[$REGULAR_ID] ;
    public final real_key_return real_key() throws RecognitionException {
        real_key_return retval = new real_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID455=null;

        Object REGULAR_ID455_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2129:9: ({...}? => REGULAR_ID -> REAL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2129:14: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("real"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "real_key", "input.LT(1).getText().equalsIgnoreCase(\"real\")");
            }

            REGULAR_ID455=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_real_key13722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID455);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2129:77: -> REAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(REAL_VK, REGULAR_ID455)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "real_key"


    public static class double_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "double_key"
    // main.java.PLSQLKeys.g:2132:1: double_key :{...}? => REGULAR_ID -> DOUBLE_VK[$REGULAR_ID] ;
    public final double_key_return double_key() throws RecognitionException {
        double_key_return retval = new double_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID456=null;

        Object REGULAR_ID456_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2133:5: ({...}? => REGULAR_ID -> DOUBLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2133:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("double"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "double_key", "input.LT(1).getText().equalsIgnoreCase(\"double\")");
            }

            REGULAR_ID456=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_double_key13750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID456);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2133:75: -> DOUBLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DOUBLE_VK, REGULAR_ID456)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "double_key"


    public static class precision_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "precision_key"
    // main.java.PLSQLKeys.g:2136:1: precision_key :{...}? REGULAR_ID -> PRECISION_VK[$REGULAR_ID] ;
    public final precision_key_return precision_key() throws RecognitionException {
        precision_key_return retval = new precision_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID457=null;

        Object REGULAR_ID457_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2137:5: ({...}? REGULAR_ID -> PRECISION_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2137:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("precision"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "precision_key", "input.LT(1).getText().equalsIgnoreCase(\"precision\")");
            }

            REGULAR_ID457=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_precision_key13777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID457);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2137:76: -> PRECISION_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PRECISION_VK, REGULAR_ID457)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "precision_key"


    public static class interval_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interval_key"
    // main.java.PLSQLKeys.g:2140:1: interval_key :{...}? => REGULAR_ID ;
    public final interval_key_return interval_key() throws RecognitionException {
        interval_key_return retval = new interval_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID458=null;

        Object REGULAR_ID458_tree=null;

        try {
            // main.java.PLSQLKeys.g:2141:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:2141:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("interval"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "interval_key", "input.LT(1).getText().equalsIgnoreCase(\"interval\")");
            }

            REGULAR_ID458=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_interval_key13805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID458_tree = 
            (Object)adaptor.create(REGULAR_ID458)
            ;
            adaptor.addChild(root_0, REGULAR_ID458_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interval_key"


    public static class time_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "time_key"
    // main.java.PLSQLKeys.g:2144:1: time_key :{...}? REGULAR_ID -> TIME_VK[$REGULAR_ID] ;
    public final time_key_return time_key() throws RecognitionException {
        time_key_return retval = new time_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID459=null;

        Object REGULAR_ID459_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2145:5: ({...}? REGULAR_ID -> TIME_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2145:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("time"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "time_key", "input.LT(1).getText().equalsIgnoreCase(\"time\")");
            }

            REGULAR_ID459=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_time_key13827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID459);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2145:71: -> TIME_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TIME_VK, REGULAR_ID459)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "time_key"


    public static class zone_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "zone_key"
    // main.java.PLSQLKeys.g:2148:1: zone_key :{...}? REGULAR_ID ;
    public final zone_key_return zone_key() throws RecognitionException {
        zone_key_return retval = new zone_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID460=null;

        Object REGULAR_ID460_tree=null;

        try {
            // main.java.PLSQLKeys.g:2148:9: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2148:14: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("zone"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "zone_key", "input.LT(1).getText().equalsIgnoreCase(\"zone\")");
            }

            REGULAR_ID460=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_zone_key13850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID460_tree = 
            (Object)adaptor.create(REGULAR_ID460)
            ;
            adaptor.addChild(root_0, REGULAR_ID460_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "zone_key"


    public static class timestamp_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "timestamp_key"
    // main.java.PLSQLKeys.g:2151:1: timestamp_key :{...}? REGULAR_ID -> TIMESTAMP_VK[$REGULAR_ID] ;
    public final timestamp_key_return timestamp_key() throws RecognitionException {
        timestamp_key_return retval = new timestamp_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID461=null;

        Object REGULAR_ID461_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2152:5: ({...}? REGULAR_ID -> TIMESTAMP_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2152:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timestamp"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timestamp_key", "input.LT(1).getText().equalsIgnoreCase(\"timestamp\")");
            }

            REGULAR_ID461=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timestamp_key13872); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID461);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2152:76: -> TIMESTAMP_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TIMESTAMP_VK, REGULAR_ID461)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "timestamp_key"


    public static class date_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "date_key"
    // main.java.PLSQLKeys.g:2155:1: date_key : SQL92_RESERVED_DATE ;
    public final date_key_return date_key() throws RecognitionException {
        date_key_return retval = new date_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_DATE462=null;

        Object SQL92_RESERVED_DATE462_tree=null;

        try {
            // main.java.PLSQLKeys.g:2156:5: ( SQL92_RESERVED_DATE )
            // main.java.PLSQLKeys.g:2156:10: SQL92_RESERVED_DATE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_DATE462=(Token)match(input,SQL92_RESERVED_DATE,FOLLOW_SQL92_RESERVED_DATE_in_date_key13897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DATE462_tree = 
            (Object)adaptor.create(SQL92_RESERVED_DATE462)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_DATE462_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "date_key"


    public static class numeric_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "numeric_key"
    // main.java.PLSQLKeys.g:2159:1: numeric_key :{...}? => REGULAR_ID -> NUMERIC_VK[$REGULAR_ID] ;
    public final numeric_key_return numeric_key() throws RecognitionException {
        numeric_key_return retval = new numeric_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID463=null;

        Object REGULAR_ID463_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2160:5: ({...}? => REGULAR_ID -> NUMERIC_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2160:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("numeric"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "numeric_key", "input.LT(1).getText().equalsIgnoreCase(\"numeric\")");
            }

            REGULAR_ID463=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_numeric_key13920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID463);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2160:76: -> NUMERIC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NUMERIC_VK, REGULAR_ID463)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numeric_key"


    public static class decimal_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "decimal_key"
    // main.java.PLSQLKeys.g:2163:1: decimal_key :{...}? => REGULAR_ID -> DECIMAL_VK[$REGULAR_ID] ;
    public final decimal_key_return decimal_key() throws RecognitionException {
        decimal_key_return retval = new decimal_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID464=null;

        Object REGULAR_ID464_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2164:5: ({...}? => REGULAR_ID -> DECIMAL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2164:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("decimal"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "decimal_key", "input.LT(1).getText().equalsIgnoreCase(\"decimal\")");
            }

            REGULAR_ID464=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_decimal_key13948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID464);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2164:76: -> DECIMAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DECIMAL_VK, REGULAR_ID464)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "decimal_key"


    public static class dec_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dec_key"
    // main.java.PLSQLKeys.g:2167:1: dec_key :{...}? => REGULAR_ID -> DEC_VK[$REGULAR_ID] ;
    public final dec_key_return dec_key() throws RecognitionException {
        dec_key_return retval = new dec_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID465=null;

        Object REGULAR_ID465_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2167:12: ({...}? => REGULAR_ID -> DEC_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2167:17: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("dec"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "dec_key", "input.LT(1).getText().equalsIgnoreCase(\"dec\")");
            }

            REGULAR_ID465=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_dec_key13975); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID465);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2167:79: -> DEC_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DEC_VK, REGULAR_ID465)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dec_key"


    public static class integer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "integer_key"
    // main.java.PLSQLKeys.g:2170:1: integer_key :{...}? => REGULAR_ID -> INTEGER_VK[$REGULAR_ID] ;
    public final integer_key_return integer_key() throws RecognitionException {
        integer_key_return retval = new integer_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID466=null;

        Object REGULAR_ID466_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2171:5: ({...}? => REGULAR_ID -> INTEGER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2171:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("integer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "integer_key", "input.LT(1).getText().equalsIgnoreCase(\"integer\")");
            }

            REGULAR_ID466=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_integer_key14003); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID466);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2171:76: -> INTEGER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INTEGER_VK, REGULAR_ID466)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "integer_key"


    public static class int_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "int_key"
    // main.java.PLSQLKeys.g:2174:1: int_key :{...}? => REGULAR_ID -> INT_VK[$REGULAR_ID] ;
    public final int_key_return int_key() throws RecognitionException {
        int_key_return retval = new int_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID467=null;

        Object REGULAR_ID467_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2174:12: ({...}? => REGULAR_ID -> INT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2174:17: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("int"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "int_key", "input.LT(1).getText().equalsIgnoreCase(\"int\")");
            }

            REGULAR_ID467=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_int_key14030); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID467);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2174:79: -> INT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INT_VK, REGULAR_ID467)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "int_key"


    public static class smallint_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "smallint_key"
    // main.java.PLSQLKeys.g:2177:1: smallint_key :{...}? => REGULAR_ID -> SMALLINT_VK[$REGULAR_ID] ;
    public final smallint_key_return smallint_key() throws RecognitionException {
        smallint_key_return retval = new smallint_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID468=null;

        Object REGULAR_ID468_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2178:5: ({...}? => REGULAR_ID -> SMALLINT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2178:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("smallint"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "smallint_key", "input.LT(1).getText().equalsIgnoreCase(\"smallint\")");
            }

            REGULAR_ID468=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_smallint_key14058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID468);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2178:77: -> SMALLINT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SMALLINT_VK, REGULAR_ID468)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "smallint_key"


    public static class corresponding_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "corresponding_key"
    // main.java.PLSQLKeys.g:2181:1: corresponding_key :{...}? REGULAR_ID ;
    public final corresponding_key_return corresponding_key() throws RecognitionException {
        corresponding_key_return retval = new corresponding_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID469=null;

        Object REGULAR_ID469_tree=null;

        try {
            // main.java.PLSQLKeys.g:2182:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2182:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("corresponding"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "corresponding_key", "input.LT(1).getText().equalsIgnoreCase(\"corresponding\")");
            }

            REGULAR_ID469=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_corresponding_key14085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID469_tree = 
            (Object)adaptor.create(REGULAR_ID469)
            ;
            adaptor.addChild(root_0, REGULAR_ID469_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "corresponding_key"


    public static class cross_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cross_key"
    // main.java.PLSQLKeys.g:2185:1: cross_key :{...}? => REGULAR_ID -> CROSS_VK[$REGULAR_ID] ;
    public final cross_key_return cross_key() throws RecognitionException {
        cross_key_return retval = new cross_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID470=null;

        Object REGULAR_ID470_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2186:5: ({...}? => REGULAR_ID -> CROSS_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2186:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cross"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cross_key", "input.LT(1).getText().equalsIgnoreCase(\"cross\")");
            }

            REGULAR_ID470=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cross_key14108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID470);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2186:74: -> CROSS_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CROSS_VK, REGULAR_ID470)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cross_key"


    public static class join_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_key"
    // main.java.PLSQLKeys.g:2189:1: join_key :{...}? => REGULAR_ID ;
    public final join_key_return join_key() throws RecognitionException {
        join_key_return retval = new join_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID471=null;

        Object REGULAR_ID471_tree=null;

        try {
            // main.java.PLSQLKeys.g:2190:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:2190:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("join"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "join_key", "input.LT(1).getText().equalsIgnoreCase(\"join\")");
            }

            REGULAR_ID471=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_join_key14136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID471_tree = 
            (Object)adaptor.create(REGULAR_ID471)
            ;
            adaptor.addChild(root_0, REGULAR_ID471_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_key"


    public static class left_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "left_key"
    // main.java.PLSQLKeys.g:2193:1: left_key :{...}? => REGULAR_ID -> LEFT_VK[$REGULAR_ID] ;
    public final left_key_return left_key() throws RecognitionException {
        left_key_return retval = new left_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID472=null;

        Object REGULAR_ID472_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2194:5: ({...}? => REGULAR_ID -> LEFT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2194:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("left"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "left_key", "input.LT(1).getText().equalsIgnoreCase(\"left\")");
            }

            REGULAR_ID472=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_left_key14159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID472);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2194:73: -> LEFT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LEFT_VK, REGULAR_ID472)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "left_key"


    public static class right_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "right_key"
    // main.java.PLSQLKeys.g:2197:1: right_key :{...}? => REGULAR_ID -> RIGHT_VK[$REGULAR_ID] ;
    public final right_key_return right_key() throws RecognitionException {
        right_key_return retval = new right_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID473=null;

        Object REGULAR_ID473_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2198:5: ({...}? => REGULAR_ID -> RIGHT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2198:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("right"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "right_key", "input.LT(1).getText().equalsIgnoreCase(\"right\")");
            }

            REGULAR_ID473=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_right_key14187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID473);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2198:74: -> RIGHT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(RIGHT_VK, REGULAR_ID473)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "right_key"


    public static class inner_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inner_key"
    // main.java.PLSQLKeys.g:2201:1: inner_key :{...}? => REGULAR_ID -> INNER_VK[$REGULAR_ID] ;
    public final inner_key_return inner_key() throws RecognitionException {
        inner_key_return retval = new inner_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID474=null;

        Object REGULAR_ID474_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2202:5: ({...}? => REGULAR_ID -> INNER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2202:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("inner"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "inner_key", "input.LT(1).getText().equalsIgnoreCase(\"inner\")");
            }

            REGULAR_ID474=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_inner_key14215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID474);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2202:74: -> INNER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(INNER_VK, REGULAR_ID474)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inner_key"


    public static class natural_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "natural_key"
    // main.java.PLSQLKeys.g:2205:1: natural_key :{...}? => REGULAR_ID -> NATURAL_VK[$REGULAR_ID] ;
    public final natural_key_return natural_key() throws RecognitionException {
        natural_key_return retval = new natural_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID475=null;

        Object REGULAR_ID475_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2206:5: ({...}? => REGULAR_ID -> NATURAL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2206:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("natural"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "natural_key", "input.LT(1).getText().equalsIgnoreCase(\"natural\")");
            }

            REGULAR_ID475=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_natural_key14243); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID475);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2206:76: -> NATURAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NATURAL_VK, REGULAR_ID475)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "natural_key"


    public static class outer_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "outer_key"
    // main.java.PLSQLKeys.g:2209:1: outer_key :{...}? => REGULAR_ID ;
    public final outer_key_return outer_key() throws RecognitionException {
        outer_key_return retval = new outer_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID476=null;

        Object REGULAR_ID476_tree=null;

        try {
            // main.java.PLSQLKeys.g:2210:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:2210:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("outer"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "outer_key", "input.LT(1).getText().equalsIgnoreCase(\"outer\")");
            }

            REGULAR_ID476=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_outer_key14271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID476_tree = 
            (Object)adaptor.create(REGULAR_ID476)
            ;
            adaptor.addChild(root_0, REGULAR_ID476_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "outer_key"


    public static class using_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "using_key"
    // main.java.PLSQLKeys.g:2213:1: using_key : PLSQL_NON_RESERVED_USING ;
    public final using_key_return using_key() throws RecognitionException {
        using_key_return retval = new using_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLSQL_NON_RESERVED_USING477=null;

        Object PLSQL_NON_RESERVED_USING477_tree=null;

        try {
            // main.java.PLSQLKeys.g:2214:5: ( PLSQL_NON_RESERVED_USING )
            // main.java.PLSQLKeys.g:2214:10: PLSQL_NON_RESERVED_USING
            {
            root_0 = (Object)adaptor.nil();


            PLSQL_NON_RESERVED_USING477=(Token)match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_using_key14291); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLSQL_NON_RESERVED_USING477_tree = 
            (Object)adaptor.create(PLSQL_NON_RESERVED_USING477)
            ;
            adaptor.addChild(root_0, PLSQL_NON_RESERVED_USING477_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_key"


    public static class indicator_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indicator_key"
    // main.java.PLSQLKeys.g:2217:1: indicator_key :{...}? REGULAR_ID ;
    public final indicator_key_return indicator_key() throws RecognitionException {
        indicator_key_return retval = new indicator_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID478=null;

        Object REGULAR_ID478_tree=null;

        try {
            // main.java.PLSQLKeys.g:2218:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2218:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("indicator"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "indicator_key", "input.LT(1).getText().equalsIgnoreCase(\"indicator\")");
            }

            REGULAR_ID478=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_indicator_key14313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID478_tree = 
            (Object)adaptor.create(REGULAR_ID478)
            ;
            adaptor.addChild(root_0, REGULAR_ID478_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indicator_key"


    public static class user_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "user_key"
    // main.java.PLSQLKeys.g:2221:1: user_key :{...}? REGULAR_ID ;
    public final user_key_return user_key() throws RecognitionException {
        user_key_return retval = new user_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID479=null;

        Object REGULAR_ID479_tree=null;

        try {
            // main.java.PLSQLKeys.g:2222:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2222:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("user"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "user_key", "input.LT(1).getText().equalsIgnoreCase(\"user\")");
            }

            REGULAR_ID479=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_user_key14335); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID479_tree = 
            (Object)adaptor.create(REGULAR_ID479)
            ;
            adaptor.addChild(root_0, REGULAR_ID479_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "user_key"


    public static class current_user_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "current_user_key"
    // main.java.PLSQLKeys.g:2225:1: current_user_key :{...}? REGULAR_ID -> CURRENT_USER_VK[$REGULAR_ID] ;
    public final current_user_key_return current_user_key() throws RecognitionException {
        current_user_key_return retval = new current_user_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID480=null;

        Object REGULAR_ID480_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2226:5: ({...}? REGULAR_ID -> CURRENT_USER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2226:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("current_user"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "current_user_key", "input.LT(1).getText().equalsIgnoreCase(\"current_user\")");
            }

            REGULAR_ID480=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_current_user_key14357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID480);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2226:79: -> CURRENT_USER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CURRENT_USER_VK, REGULAR_ID480)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "current_user_key"


    public static class session_user_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "session_user_key"
    // main.java.PLSQLKeys.g:2229:1: session_user_key :{...}? REGULAR_ID ;
    public final session_user_key_return session_user_key() throws RecognitionException {
        session_user_key_return retval = new session_user_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID481=null;

        Object REGULAR_ID481_tree=null;

        try {
            // main.java.PLSQLKeys.g:2230:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2230:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("session_user"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "session_user_key", "input.LT(1).getText().equalsIgnoreCase(\"session_user\")");
            }

            REGULAR_ID481=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_session_user_key14384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID481_tree = 
            (Object)adaptor.create(REGULAR_ID481)
            ;
            adaptor.addChild(root_0, REGULAR_ID481_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "session_user_key"


    public static class system_user_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "system_user_key"
    // main.java.PLSQLKeys.g:2233:1: system_user_key :{...}? REGULAR_ID ;
    public final system_user_key_return system_user_key() throws RecognitionException {
        system_user_key_return retval = new system_user_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID482=null;

        Object REGULAR_ID482_tree=null;

        try {
            // main.java.PLSQLKeys.g:2234:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2234:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("system_user"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "system_user_key", "input.LT(1).getText().equalsIgnoreCase(\"system_user\")");
            }

            REGULAR_ID482=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_system_user_key14406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID482_tree = 
            (Object)adaptor.create(REGULAR_ID482)
            ;
            adaptor.addChild(root_0, REGULAR_ID482_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "system_user_key"


    public static class value_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value_key"
    // main.java.PLSQLKeys.g:2237:1: value_key :{...}? REGULAR_ID -> VALUE_VK[$REGULAR_ID] ;
    public final value_key_return value_key() throws RecognitionException {
        value_key_return retval = new value_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID483=null;

        Object REGULAR_ID483_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2238:5: ({...}? REGULAR_ID -> VALUE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2238:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("value"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "value_key", "input.LT(1).getText().equalsIgnoreCase(\"value\")");
            }

            REGULAR_ID483=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_value_key14428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID483);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2238:72: -> VALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(VALUE_VK, REGULAR_ID483)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value_key"


    public static class substring_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "substring_key"
    // main.java.PLSQLKeys.g:2241:1: substring_key :{...}? => REGULAR_ID ;
    public final substring_key_return substring_key() throws RecognitionException {
        substring_key_return retval = new substring_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID484=null;

        Object REGULAR_ID484_tree=null;

        try {
            // main.java.PLSQLKeys.g:2242:5: ({...}? => REGULAR_ID )
            // main.java.PLSQLKeys.g:2242:10: {...}? => REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("substring"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "substring_key", "input.LT(1).getText().equalsIgnoreCase(\"substring\")");
            }

            REGULAR_ID484=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_substring_key14456); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID484_tree = 
            (Object)adaptor.create(REGULAR_ID484)
            ;
            adaptor.addChild(root_0, REGULAR_ID484_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "substring_key"


    public static class upper_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "upper_key"
    // main.java.PLSQLKeys.g:2245:1: upper_key :{...}? REGULAR_ID ;
    public final upper_key_return upper_key() throws RecognitionException {
        upper_key_return retval = new upper_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID485=null;

        Object REGULAR_ID485_tree=null;

        try {
            // main.java.PLSQLKeys.g:2246:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2246:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("upper"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "upper_key", "input.LT(1).getText().equalsIgnoreCase(\"upper\")");
            }

            REGULAR_ID485=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_upper_key14478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID485_tree = 
            (Object)adaptor.create(REGULAR_ID485)
            ;
            adaptor.addChild(root_0, REGULAR_ID485_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "upper_key"


    public static class lower_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lower_key"
    // main.java.PLSQLKeys.g:2249:1: lower_key :{...}? REGULAR_ID ;
    public final lower_key_return lower_key() throws RecognitionException {
        lower_key_return retval = new lower_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID486=null;

        Object REGULAR_ID486_tree=null;

        try {
            // main.java.PLSQLKeys.g:2250:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2250:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("lower"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "lower_key", "input.LT(1).getText().equalsIgnoreCase(\"lower\")");
            }

            REGULAR_ID486=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_lower_key14500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID486_tree = 
            (Object)adaptor.create(REGULAR_ID486)
            ;
            adaptor.addChild(root_0, REGULAR_ID486_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lower_key"


    public static class convert_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "convert_key"
    // main.java.PLSQLKeys.g:2253:1: convert_key :{...}? REGULAR_ID -> CONVERT_VK[$REGULAR_ID] ;
    public final convert_key_return convert_key() throws RecognitionException {
        convert_key_return retval = new convert_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID487=null;

        Object REGULAR_ID487_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2254:5: ({...}? REGULAR_ID -> CONVERT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2254:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("convert"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "convert_key", "input.LT(1).getText().equalsIgnoreCase(\"convert\")");
            }

            REGULAR_ID487=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_convert_key14522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID487);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2254:74: -> CONVERT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CONVERT_VK, REGULAR_ID487)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "convert_key"


    public static class translate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "translate_key"
    // main.java.PLSQLKeys.g:2257:1: translate_key :{...}? REGULAR_ID -> TRANSLATE_VK[$REGULAR_ID] ;
    public final translate_key_return translate_key() throws RecognitionException {
        translate_key_return retval = new translate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID488=null;

        Object REGULAR_ID488_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2258:5: ({...}? REGULAR_ID -> TRANSLATE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2258:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("translate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "translate_key", "input.LT(1).getText().equalsIgnoreCase(\"translate\")");
            }

            REGULAR_ID488=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_translate_key14549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID488);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2258:76: -> TRANSLATE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TRANSLATE_VK, REGULAR_ID488)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "translate_key"


    public static class trim_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "trim_key"
    // main.java.PLSQLKeys.g:2261:1: trim_key :{...}? REGULAR_ID -> TRIM_VK[$REGULAR_ID] ;
    public final trim_key_return trim_key() throws RecognitionException {
        trim_key_return retval = new trim_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID489=null;

        Object REGULAR_ID489_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2262:5: ({...}? REGULAR_ID -> TRIM_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2262:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("trim"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "trim_key", "input.LT(1).getText().equalsIgnoreCase(\"trim\")");
            }

            REGULAR_ID489=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_trim_key14576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID489);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2262:71: -> TRIM_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TRIM_VK, REGULAR_ID489)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "trim_key"


    public static class leading_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "leading_key"
    // main.java.PLSQLKeys.g:2265:1: leading_key :{...}? REGULAR_ID -> LEADING_VK[$REGULAR_ID] ;
    public final leading_key_return leading_key() throws RecognitionException {
        leading_key_return retval = new leading_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID490=null;

        Object REGULAR_ID490_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2266:5: ({...}? REGULAR_ID -> LEADING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2266:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("leading"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "leading_key", "input.LT(1).getText().equalsIgnoreCase(\"leading\")");
            }

            REGULAR_ID490=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_leading_key14603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID490);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2266:74: -> LEADING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LEADING_VK, REGULAR_ID490)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "leading_key"


    public static class trailing_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "trailing_key"
    // main.java.PLSQLKeys.g:2269:1: trailing_key :{...}? REGULAR_ID -> TRAILING_VK[$REGULAR_ID] ;
    public final trailing_key_return trailing_key() throws RecognitionException {
        trailing_key_return retval = new trailing_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID491=null;

        Object REGULAR_ID491_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2270:5: ({...}? REGULAR_ID -> TRAILING_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2270:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("trailing"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "trailing_key", "input.LT(1).getText().equalsIgnoreCase(\"trailing\")");
            }

            REGULAR_ID491=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_trailing_key14630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID491);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2270:75: -> TRAILING_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TRAILING_VK, REGULAR_ID491)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "trailing_key"


    public static class both_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "both_key"
    // main.java.PLSQLKeys.g:2273:1: both_key :{...}? REGULAR_ID -> BOTH_VK[$REGULAR_ID] ;
    public final both_key_return both_key() throws RecognitionException {
        both_key_return retval = new both_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID492=null;

        Object REGULAR_ID492_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2274:5: ({...}? REGULAR_ID -> BOTH_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2274:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("both"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "both_key", "input.LT(1).getText().equalsIgnoreCase(\"both\")");
            }

            REGULAR_ID492=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_both_key14657); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID492);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2274:71: -> BOTH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BOTH_VK, REGULAR_ID492)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "both_key"


    public static class collate_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "collate_key"
    // main.java.PLSQLKeys.g:2277:1: collate_key :{...}? REGULAR_ID ;
    public final collate_key_return collate_key() throws RecognitionException {
        collate_key_return retval = new collate_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID493=null;

        Object REGULAR_ID493_tree=null;

        try {
            // main.java.PLSQLKeys.g:2278:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2278:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("collate"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "collate_key", "input.LT(1).getText().equalsIgnoreCase(\"collate\")");
            }

            REGULAR_ID493=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_collate_key14684); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID493_tree = 
            (Object)adaptor.create(REGULAR_ID493)
            ;
            adaptor.addChild(root_0, REGULAR_ID493_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "collate_key"


    public static class position_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "position_key"
    // main.java.PLSQLKeys.g:2281:1: position_key :{...}? REGULAR_ID ;
    public final position_key_return position_key() throws RecognitionException {
        position_key_return retval = new position_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID494=null;

        Object REGULAR_ID494_tree=null;

        try {
            // main.java.PLSQLKeys.g:2282:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2282:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("position"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "position_key", "input.LT(1).getText().equalsIgnoreCase(\"position\")");
            }

            REGULAR_ID494=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_position_key14706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID494_tree = 
            (Object)adaptor.create(REGULAR_ID494)
            ;
            adaptor.addChild(root_0, REGULAR_ID494_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "position_key"


    public static class extract_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extract_key"
    // main.java.PLSQLKeys.g:2285:1: extract_key :{...}? REGULAR_ID -> EXTRACT_VK[$REGULAR_ID] ;
    public final extract_key_return extract_key() throws RecognitionException {
        extract_key_return retval = new extract_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID495=null;

        Object REGULAR_ID495_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2286:5: ({...}? REGULAR_ID -> EXTRACT_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2286:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("extract"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "extract_key", "input.LT(1).getText().equalsIgnoreCase(\"extract\")");
            }

            REGULAR_ID495=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_extract_key14728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID495);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2286:74: -> EXTRACT_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(EXTRACT_VK, REGULAR_ID495)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extract_key"


    public static class second_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "second_key"
    // main.java.PLSQLKeys.g:2289:1: second_key :{...}? REGULAR_ID -> SECOND_VK[$REGULAR_ID] ;
    public final second_key_return second_key() throws RecognitionException {
        second_key_return retval = new second_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID496=null;

        Object REGULAR_ID496_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2290:5: ({...}? REGULAR_ID -> SECOND_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2290:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("second"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "second_key", "input.LT(1).getText().equalsIgnoreCase(\"second\")");
            }

            REGULAR_ID496=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_second_key14755); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID496);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2290:73: -> SECOND_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SECOND_VK, REGULAR_ID496)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "second_key"


    public static class timezone_hour_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "timezone_hour_key"
    // main.java.PLSQLKeys.g:2293:1: timezone_hour_key :{...}? REGULAR_ID -> TIMEZONE_HOUR_VK[$REGULAR_ID] ;
    public final timezone_hour_key_return timezone_hour_key() throws RecognitionException {
        timezone_hour_key_return retval = new timezone_hour_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID497=null;

        Object REGULAR_ID497_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2294:5: ({...}? REGULAR_ID -> TIMEZONE_HOUR_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2294:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timezone_hour"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timezone_hour_key", "input.LT(1).getText().equalsIgnoreCase(\"timezone_hour\")");
            }

            REGULAR_ID497=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timezone_hour_key14782); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID497);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2294:80: -> TIMEZONE_HOUR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TIMEZONE_HOUR_VK, REGULAR_ID497)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "timezone_hour_key"


    public static class timezone_minute_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "timezone_minute_key"
    // main.java.PLSQLKeys.g:2297:1: timezone_minute_key :{...}? REGULAR_ID -> TIMEZONE_MINUTE_VK[$REGULAR_ID] ;
    public final timezone_minute_key_return timezone_minute_key() throws RecognitionException {
        timezone_minute_key_return retval = new timezone_minute_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID498=null;

        Object REGULAR_ID498_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2298:5: ({...}? REGULAR_ID -> TIMEZONE_MINUTE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2298:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("timezone_minute"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "timezone_minute_key", "input.LT(1).getText().equalsIgnoreCase(\"timezone_minute\")");
            }

            REGULAR_ID498=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_timezone_minute_key14809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID498);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2298:82: -> TIMEZONE_MINUTE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(TIMEZONE_MINUTE_VK, REGULAR_ID498)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "timezone_minute_key"


    public static class char_length_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "char_length_key"
    // main.java.PLSQLKeys.g:2301:1: char_length_key :{...}? REGULAR_ID ;
    public final char_length_key_return char_length_key() throws RecognitionException {
        char_length_key_return retval = new char_length_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID499=null;

        Object REGULAR_ID499_tree=null;

        try {
            // main.java.PLSQLKeys.g:2302:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2302:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("char_length"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "char_length_key", "input.LT(1).getText().equalsIgnoreCase(\"char_length\")");
            }

            REGULAR_ID499=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_char_length_key14836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID499_tree = 
            (Object)adaptor.create(REGULAR_ID499)
            ;
            adaptor.addChild(root_0, REGULAR_ID499_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "char_length_key"


    public static class octet_length_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "octet_length_key"
    // main.java.PLSQLKeys.g:2305:1: octet_length_key :{...}? REGULAR_ID ;
    public final octet_length_key_return octet_length_key() throws RecognitionException {
        octet_length_key_return retval = new octet_length_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID500=null;

        Object REGULAR_ID500_tree=null;

        try {
            // main.java.PLSQLKeys.g:2306:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2306:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("octet_length"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "octet_length_key", "input.LT(1).getText().equalsIgnoreCase(\"octet_length\")");
            }

            REGULAR_ID500=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_octet_length_key14858); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID500_tree = 
            (Object)adaptor.create(REGULAR_ID500)
            ;
            adaptor.addChild(root_0, REGULAR_ID500_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "octet_length_key"


    public static class character_length_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "character_length_key"
    // main.java.PLSQLKeys.g:2309:1: character_length_key :{...}? REGULAR_ID ;
    public final character_length_key_return character_length_key() throws RecognitionException {
        character_length_key_return retval = new character_length_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID501=null;

        Object REGULAR_ID501_tree=null;

        try {
            // main.java.PLSQLKeys.g:2310:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2310:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("character_length"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "character_length_key", "input.LT(1).getText().equalsIgnoreCase(\"character_length\")");
            }

            REGULAR_ID501=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_character_length_key14880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID501_tree = 
            (Object)adaptor.create(REGULAR_ID501)
            ;
            adaptor.addChild(root_0, REGULAR_ID501_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "character_length_key"


    public static class bit_length_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bit_length_key"
    // main.java.PLSQLKeys.g:2313:1: bit_length_key :{...}? REGULAR_ID ;
    public final bit_length_key_return bit_length_key() throws RecognitionException {
        bit_length_key_return retval = new bit_length_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID502=null;

        Object REGULAR_ID502_tree=null;

        try {
            // main.java.PLSQLKeys.g:2314:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2314:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("bit_length"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "bit_length_key", "input.LT(1).getText().equalsIgnoreCase(\"bit_length\")");
            }

            REGULAR_ID502=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_bit_length_key14902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID502_tree = 
            (Object)adaptor.create(REGULAR_ID502)
            ;
            adaptor.addChild(root_0, REGULAR_ID502_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bit_length_key"


    public static class local_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "local_key"
    // main.java.PLSQLKeys.g:2317:1: local_key :{...}? REGULAR_ID -> LOCAL_VK[$REGULAR_ID] ;
    public final local_key_return local_key() throws RecognitionException {
        local_key_return retval = new local_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID503=null;

        Object REGULAR_ID503_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2318:5: ({...}? REGULAR_ID -> LOCAL_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2318:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("local"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "local_key", "input.LT(1).getText().equalsIgnoreCase(\"local\")");
            }

            REGULAR_ID503=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_local_key14924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID503);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2318:72: -> LOCAL_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(LOCAL_VK, REGULAR_ID503)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "local_key"


    public static class current_timestamp_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "current_timestamp_key"
    // main.java.PLSQLKeys.g:2321:1: current_timestamp_key :{...}? REGULAR_ID ;
    public final current_timestamp_key_return current_timestamp_key() throws RecognitionException {
        current_timestamp_key_return retval = new current_timestamp_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID504=null;

        Object REGULAR_ID504_tree=null;

        try {
            // main.java.PLSQLKeys.g:2322:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2322:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("current_timestamp"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "current_timestamp_key", "input.LT(1).getText().equalsIgnoreCase(\"current_timestamp\")");
            }

            REGULAR_ID504=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_current_timestamp_key14951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID504_tree = 
            (Object)adaptor.create(REGULAR_ID504)
            ;
            adaptor.addChild(root_0, REGULAR_ID504_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "current_timestamp_key"


    public static class current_date_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "current_date_key"
    // main.java.PLSQLKeys.g:2325:1: current_date_key :{...}? REGULAR_ID ;
    public final current_date_key_return current_date_key() throws RecognitionException {
        current_date_key_return retval = new current_date_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID505=null;

        Object REGULAR_ID505_tree=null;

        try {
            // main.java.PLSQLKeys.g:2326:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2326:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("current_date"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "current_date_key", "input.LT(1).getText().equalsIgnoreCase(\"current_date\")");
            }

            REGULAR_ID505=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_current_date_key14973); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID505_tree = 
            (Object)adaptor.create(REGULAR_ID505)
            ;
            adaptor.addChild(root_0, REGULAR_ID505_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "current_date_key"


    public static class current_time_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "current_time_key"
    // main.java.PLSQLKeys.g:2329:1: current_time_key :{...}? REGULAR_ID ;
    public final current_time_key_return current_time_key() throws RecognitionException {
        current_time_key_return retval = new current_time_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID506=null;

        Object REGULAR_ID506_tree=null;

        try {
            // main.java.PLSQLKeys.g:2330:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2330:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("current_time"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "current_time_key", "input.LT(1).getText().equalsIgnoreCase(\"current_time\")");
            }

            REGULAR_ID506=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_current_time_key14995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID506_tree = 
            (Object)adaptor.create(REGULAR_ID506)
            ;
            adaptor.addChild(root_0, REGULAR_ID506_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "current_time_key"


    public static class module_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "module_key"
    // main.java.PLSQLKeys.g:2333:1: module_key :{...}? REGULAR_ID ;
    public final module_key_return module_key() throws RecognitionException {
        module_key_return retval = new module_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID507=null;

        Object REGULAR_ID507_tree=null;

        try {
            // main.java.PLSQLKeys.g:2334:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2334:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("module"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "module_key", "input.LT(1).getText().equalsIgnoreCase(\"module\")");
            }

            REGULAR_ID507=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_module_key15017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID507_tree = 
            (Object)adaptor.create(REGULAR_ID507)
            ;
            adaptor.addChild(root_0, REGULAR_ID507_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "module_key"


    public static class global_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "global_key"
    // main.java.PLSQLKeys.g:2337:1: global_key :{...}? REGULAR_ID ;
    public final global_key_return global_key() throws RecognitionException {
        global_key_return retval = new global_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID508=null;

        Object REGULAR_ID508_tree=null;

        try {
            // main.java.PLSQLKeys.g:2338:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2338:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("global"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "global_key", "input.LT(1).getText().equalsIgnoreCase(\"global\")");
            }

            REGULAR_ID508=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_global_key15039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID508_tree = 
            (Object)adaptor.create(REGULAR_ID508)
            ;
            adaptor.addChild(root_0, REGULAR_ID508_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "global_key"


    public static class year_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "year_key"
    // main.java.PLSQLKeys.g:2341:1: year_key :{...}? => REGULAR_ID -> YEAR_VK[$REGULAR_ID] ;
    public final year_key_return year_key() throws RecognitionException {
        year_key_return retval = new year_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID509=null;

        Object REGULAR_ID509_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2342:5: ({...}? => REGULAR_ID -> YEAR_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2342:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("year"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "year_key", "input.LT(1).getText().equalsIgnoreCase(\"year\")");
            }

            REGULAR_ID509=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_year_key15062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID509);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2342:73: -> YEAR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(YEAR_VK, REGULAR_ID509)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "year_key"


    public static class month_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "month_key"
    // main.java.PLSQLKeys.g:2345:1: month_key :{...}? REGULAR_ID -> MONTH_VK[$REGULAR_ID] ;
    public final month_key_return month_key() throws RecognitionException {
        month_key_return retval = new month_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID510=null;

        Object REGULAR_ID510_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2346:5: ({...}? REGULAR_ID -> MONTH_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2346:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("month"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "month_key", "input.LT(1).getText().equalsIgnoreCase(\"month\")");
            }

            REGULAR_ID510=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_month_key15089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID510);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2346:72: -> MONTH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(MONTH_VK, REGULAR_ID510)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "month_key"


    public static class day_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "day_key"
    // main.java.PLSQLKeys.g:2349:1: day_key :{...}? => REGULAR_ID -> DAY_VK[$REGULAR_ID] ;
    public final day_key_return day_key() throws RecognitionException {
        day_key_return retval = new day_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID511=null;

        Object REGULAR_ID511_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2350:5: ({...}? => REGULAR_ID -> DAY_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2350:10: {...}? => REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("day"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "day_key", "input.LT(1).getText().equalsIgnoreCase(\"day\")");
            }

            REGULAR_ID511=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_day_key15117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID511);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2350:72: -> DAY_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DAY_VK, REGULAR_ID511)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "day_key"


    public static class hour_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hour_key"
    // main.java.PLSQLKeys.g:2353:1: hour_key :{...}? REGULAR_ID -> HOUR_VK[$REGULAR_ID] ;
    public final hour_key_return hour_key() throws RecognitionException {
        hour_key_return retval = new hour_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID512=null;

        Object REGULAR_ID512_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2353:9: ({...}? REGULAR_ID -> HOUR_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2353:14: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("hour"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "hour_key", "input.LT(1).getText().equalsIgnoreCase(\"hour\")");
            }

            REGULAR_ID512=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_hour_key15139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID512);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2353:75: -> HOUR_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(HOUR_VK, REGULAR_ID512)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hour_key"


    public static class minute_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "minute_key"
    // main.java.PLSQLKeys.g:2356:1: minute_key :{...}? REGULAR_ID -> MINUTE_VK[$REGULAR_ID] ;
    public final minute_key_return minute_key() throws RecognitionException {
        minute_key_return retval = new minute_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID513=null;

        Object REGULAR_ID513_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2357:5: ({...}? REGULAR_ID -> MINUTE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2357:10: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("minute"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "minute_key", "input.LT(1).getText().equalsIgnoreCase(\"minute\")");
            }

            REGULAR_ID513=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_minute_key15166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID513);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2357:73: -> MINUTE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(MINUTE_VK, REGULAR_ID513)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "minute_key"


    public static class whenever_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whenever_key"
    // main.java.PLSQLKeys.g:2360:1: whenever_key :{...}? REGULAR_ID ;
    public final whenever_key_return whenever_key() throws RecognitionException {
        whenever_key_return retval = new whenever_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID514=null;

        Object REGULAR_ID514_tree=null;

        try {
            // main.java.PLSQLKeys.g:2361:5: ({...}? REGULAR_ID )
            // main.java.PLSQLKeys.g:2361:10: {...}? REGULAR_ID
            {
            root_0 = (Object)adaptor.nil();


            if ( !((input.LT(1).getText().equalsIgnoreCase("whenever"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "whenever_key", "input.LT(1).getText().equalsIgnoreCase(\"whenever\")");
            }

            REGULAR_ID514=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_whenever_key15193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REGULAR_ID514_tree = 
            (Object)adaptor.create(REGULAR_ID514)
            ;
            adaptor.addChild(root_0, REGULAR_ID514_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "whenever_key"


    public static class is_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "is_key"
    // main.java.PLSQLKeys.g:2364:1: is_key : SQL92_RESERVED_IS ;
    public final is_key_return is_key() throws RecognitionException {
        is_key_return retval = new is_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_IS515=null;

        Object SQL92_RESERVED_IS515_tree=null;

        try {
            // main.java.PLSQLKeys.g:2365:5: ( SQL92_RESERVED_IS )
            // main.java.PLSQLKeys.g:2365:10: SQL92_RESERVED_IS
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_IS515=(Token)match(input,SQL92_RESERVED_IS,FOLLOW_SQL92_RESERVED_IS_in_is_key15213); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_IS515_tree = 
            (Object)adaptor.create(SQL92_RESERVED_IS515)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_IS515_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "is_key"


    public static class else_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_key"
    // main.java.PLSQLKeys.g:2368:1: else_key : SQL92_RESERVED_ELSE ;
    public final else_key_return else_key() throws RecognitionException {
        else_key_return retval = new else_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_ELSE516=null;

        Object SQL92_RESERVED_ELSE516_tree=null;

        try {
            // main.java.PLSQLKeys.g:2369:5: ( SQL92_RESERVED_ELSE )
            // main.java.PLSQLKeys.g:2369:10: SQL92_RESERVED_ELSE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_ELSE516=(Token)match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_else_key15233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ELSE516_tree = 
            (Object)adaptor.create(SQL92_RESERVED_ELSE516)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_ELSE516_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_key"


    public static class table_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_key"
    // main.java.PLSQLKeys.g:2372:1: table_key : SQL92_RESERVED_TABLE ;
    public final table_key_return table_key() throws RecognitionException {
        table_key_return retval = new table_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_TABLE517=null;

        Object SQL92_RESERVED_TABLE517_tree=null;

        try {
            // main.java.PLSQLKeys.g:2373:5: ( SQL92_RESERVED_TABLE )
            // main.java.PLSQLKeys.g:2373:10: SQL92_RESERVED_TABLE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_TABLE517=(Token)match(input,SQL92_RESERVED_TABLE,FOLLOW_SQL92_RESERVED_TABLE_in_table_key15253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_TABLE517_tree = 
            (Object)adaptor.create(SQL92_RESERVED_TABLE517)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_TABLE517_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "table_key"


    public static class the_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "the_key"
    // main.java.PLSQLKeys.g:2376:1: the_key : SQL92_RESERVED_THE ;
    public final the_key_return the_key() throws RecognitionException {
        the_key_return retval = new the_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_THE518=null;

        Object SQL92_RESERVED_THE518_tree=null;

        try {
            // main.java.PLSQLKeys.g:2377:5: ( SQL92_RESERVED_THE )
            // main.java.PLSQLKeys.g:2377:10: SQL92_RESERVED_THE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_THE518=(Token)match(input,SQL92_RESERVED_THE,FOLLOW_SQL92_RESERVED_THE_in_the_key15273); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_THE518_tree = 
            (Object)adaptor.create(SQL92_RESERVED_THE518)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_THE518_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "the_key"


    public static class then_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "then_key"
    // main.java.PLSQLKeys.g:2380:1: then_key : SQL92_RESERVED_THEN ;
    public final then_key_return then_key() throws RecognitionException {
        then_key_return retval = new then_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_THEN519=null;

        Object SQL92_RESERVED_THEN519_tree=null;

        try {
            // main.java.PLSQLKeys.g:2381:5: ( SQL92_RESERVED_THEN )
            // main.java.PLSQLKeys.g:2381:10: SQL92_RESERVED_THEN
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_THEN519=(Token)match(input,SQL92_RESERVED_THEN,FOLLOW_SQL92_RESERVED_THEN_in_then_key15293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_THEN519_tree = 
            (Object)adaptor.create(SQL92_RESERVED_THEN519)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_THEN519_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "then_key"


    public static class end_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "end_key"
    // main.java.PLSQLKeys.g:2384:1: end_key : SQL92_RESERVED_END ;
    public final end_key_return end_key() throws RecognitionException {
        end_key_return retval = new end_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_END520=null;

        Object SQL92_RESERVED_END520_tree=null;

        try {
            // main.java.PLSQLKeys.g:2385:5: ( SQL92_RESERVED_END )
            // main.java.PLSQLKeys.g:2385:10: SQL92_RESERVED_END
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_END520=(Token)match(input,SQL92_RESERVED_END,FOLLOW_SQL92_RESERVED_END_in_end_key15313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_END520_tree = 
            (Object)adaptor.create(SQL92_RESERVED_END520)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_END520_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "end_key"


    public static class all_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "all_key"
    // main.java.PLSQLKeys.g:2388:1: all_key : SQL92_RESERVED_ALL ;
    public final all_key_return all_key() throws RecognitionException {
        all_key_return retval = new all_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_ALL521=null;

        Object SQL92_RESERVED_ALL521_tree=null;

        try {
            // main.java.PLSQLKeys.g:2389:5: ( SQL92_RESERVED_ALL )
            // main.java.PLSQLKeys.g:2389:10: SQL92_RESERVED_ALL
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_ALL521=(Token)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_all_key15333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ALL521_tree = 
            (Object)adaptor.create(SQL92_RESERVED_ALL521)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_ALL521_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "all_key"


    public static class on_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "on_key"
    // main.java.PLSQLKeys.g:2392:1: on_key : SQL92_RESERVED_ON ;
    public final on_key_return on_key() throws RecognitionException {
        on_key_return retval = new on_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_ON522=null;

        Object SQL92_RESERVED_ON522_tree=null;

        try {
            // main.java.PLSQLKeys.g:2393:5: ( SQL92_RESERVED_ON )
            // main.java.PLSQLKeys.g:2393:10: SQL92_RESERVED_ON
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_ON522=(Token)match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_on_key15353); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_ON522_tree = 
            (Object)adaptor.create(SQL92_RESERVED_ON522)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_ON522_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "on_key"


    public static class or_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "or_key"
    // main.java.PLSQLKeys.g:2396:1: or_key : SQL92_RESERVED_OR ;
    public final or_key_return or_key() throws RecognitionException {
        or_key_return retval = new or_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_OR523=null;

        Object SQL92_RESERVED_OR523_tree=null;

        try {
            // main.java.PLSQLKeys.g:2397:5: ( SQL92_RESERVED_OR )
            // main.java.PLSQLKeys.g:2397:10: SQL92_RESERVED_OR
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_OR523=(Token)match(input,SQL92_RESERVED_OR,FOLLOW_SQL92_RESERVED_OR_in_or_key15373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_OR523_tree = 
            (Object)adaptor.create(SQL92_RESERVED_OR523)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_OR523_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "or_key"


    public static class and_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "and_key"
    // main.java.PLSQLKeys.g:2400:1: and_key : SQL92_RESERVED_AND ;
    public final and_key_return and_key() throws RecognitionException {
        and_key_return retval = new and_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_AND524=null;

        Object SQL92_RESERVED_AND524_tree=null;

        try {
            // main.java.PLSQLKeys.g:2401:5: ( SQL92_RESERVED_AND )
            // main.java.PLSQLKeys.g:2401:10: SQL92_RESERVED_AND
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_AND524=(Token)match(input,SQL92_RESERVED_AND,FOLLOW_SQL92_RESERVED_AND_in_and_key15393); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_AND524_tree = 
            (Object)adaptor.create(SQL92_RESERVED_AND524)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_AND524_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "and_key"


    public static class not_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "not_key"
    // main.java.PLSQLKeys.g:2404:1: not_key : SQL92_RESERVED_NOT ;
    public final not_key_return not_key() throws RecognitionException {
        not_key_return retval = new not_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_NOT525=null;

        Object SQL92_RESERVED_NOT525_tree=null;

        try {
            // main.java.PLSQLKeys.g:2405:5: ( SQL92_RESERVED_NOT )
            // main.java.PLSQLKeys.g:2405:10: SQL92_RESERVED_NOT
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_NOT525=(Token)match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_not_key15413); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_NOT525_tree = 
            (Object)adaptor.create(SQL92_RESERVED_NOT525)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_NOT525_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "not_key"


    public static class true_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "true_key"
    // main.java.PLSQLKeys.g:2408:1: true_key : SQL92_RESERVED_TRUE ;
    public final true_key_return true_key() throws RecognitionException {
        true_key_return retval = new true_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_TRUE526=null;

        Object SQL92_RESERVED_TRUE526_tree=null;

        try {
            // main.java.PLSQLKeys.g:2409:5: ( SQL92_RESERVED_TRUE )
            // main.java.PLSQLKeys.g:2409:10: SQL92_RESERVED_TRUE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_TRUE526=(Token)match(input,SQL92_RESERVED_TRUE,FOLLOW_SQL92_RESERVED_TRUE_in_true_key15433); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_TRUE526_tree = 
            (Object)adaptor.create(SQL92_RESERVED_TRUE526)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_TRUE526_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "true_key"


    public static class false_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "false_key"
    // main.java.PLSQLKeys.g:2412:1: false_key : SQL92_RESERVED_FALSE ;
    public final false_key_return false_key() throws RecognitionException {
        false_key_return retval = new false_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_FALSE527=null;

        Object SQL92_RESERVED_FALSE527_tree=null;

        try {
            // main.java.PLSQLKeys.g:2413:5: ( SQL92_RESERVED_FALSE )
            // main.java.PLSQLKeys.g:2413:10: SQL92_RESERVED_FALSE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_FALSE527=(Token)match(input,SQL92_RESERVED_FALSE,FOLLOW_SQL92_RESERVED_FALSE_in_false_key15453); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_FALSE527_tree = 
            (Object)adaptor.create(SQL92_RESERVED_FALSE527)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_FALSE527_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "false_key"


    public static class default_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_key"
    // main.java.PLSQLKeys.g:2416:1: default_key : SQL92_RESERVED_DEFAULT ;
    public final default_key_return default_key() throws RecognitionException {
        default_key_return retval = new default_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_DEFAULT528=null;

        Object SQL92_RESERVED_DEFAULT528_tree=null;

        try {
            // main.java.PLSQLKeys.g:2417:5: ( SQL92_RESERVED_DEFAULT )
            // main.java.PLSQLKeys.g:2417:10: SQL92_RESERVED_DEFAULT
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_DEFAULT528=(Token)match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_default_key15473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DEFAULT528_tree = 
            (Object)adaptor.create(SQL92_RESERVED_DEFAULT528)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_DEFAULT528_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_key"


    public static class distinct_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "distinct_key"
    // main.java.PLSQLKeys.g:2420:1: distinct_key : SQL92_RESERVED_DISTINCT ;
    public final distinct_key_return distinct_key() throws RecognitionException {
        distinct_key_return retval = new distinct_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_DISTINCT529=null;

        Object SQL92_RESERVED_DISTINCT529_tree=null;

        try {
            // main.java.PLSQLKeys.g:2421:5: ( SQL92_RESERVED_DISTINCT )
            // main.java.PLSQLKeys.g:2421:10: SQL92_RESERVED_DISTINCT
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_DISTINCT529=(Token)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_distinct_key15493); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DISTINCT529_tree = 
            (Object)adaptor.create(SQL92_RESERVED_DISTINCT529)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_DISTINCT529_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "distinct_key"


    public static class into_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "into_key"
    // main.java.PLSQLKeys.g:2424:1: into_key : SQL92_RESERVED_INTO ;
    public final into_key_return into_key() throws RecognitionException {
        into_key_return retval = new into_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_INTO530=null;

        Object SQL92_RESERVED_INTO530_tree=null;

        try {
            // main.java.PLSQLKeys.g:2425:5: ( SQL92_RESERVED_INTO )
            // main.java.PLSQLKeys.g:2425:10: SQL92_RESERVED_INTO
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_INTO530=(Token)match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_into_key15513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_INTO530_tree = 
            (Object)adaptor.create(SQL92_RESERVED_INTO530)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_INTO530_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "into_key"


    public static class by_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "by_key"
    // main.java.PLSQLKeys.g:2428:1: by_key : SQL92_RESERVED_BY ;
    public final by_key_return by_key() throws RecognitionException {
        by_key_return retval = new by_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_BY531=null;

        Object SQL92_RESERVED_BY531_tree=null;

        try {
            // main.java.PLSQLKeys.g:2429:5: ( SQL92_RESERVED_BY )
            // main.java.PLSQLKeys.g:2429:10: SQL92_RESERVED_BY
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_BY531=(Token)match(input,SQL92_RESERVED_BY,FOLLOW_SQL92_RESERVED_BY_in_by_key15533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_BY531_tree = 
            (Object)adaptor.create(SQL92_RESERVED_BY531)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_BY531_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "by_key"


    public static class as_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "as_key"
    // main.java.PLSQLKeys.g:2432:1: as_key : SQL92_RESERVED_AS ;
    public final as_key_return as_key() throws RecognitionException {
        as_key_return retval = new as_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_AS532=null;

        Object SQL92_RESERVED_AS532_tree=null;

        try {
            // main.java.PLSQLKeys.g:2433:5: ( SQL92_RESERVED_AS )
            // main.java.PLSQLKeys.g:2433:10: SQL92_RESERVED_AS
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_AS532=(Token)match(input,SQL92_RESERVED_AS,FOLLOW_SQL92_RESERVED_AS_in_as_key15553); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_AS532_tree = 
            (Object)adaptor.create(SQL92_RESERVED_AS532)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_AS532_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "as_key"


    public static class in_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_key"
    // main.java.PLSQLKeys.g:2436:1: in_key : SQL92_RESERVED_IN ;
    public final in_key_return in_key() throws RecognitionException {
        in_key_return retval = new in_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_IN533=null;

        Object SQL92_RESERVED_IN533_tree=null;

        try {
            // main.java.PLSQLKeys.g:2437:5: ( SQL92_RESERVED_IN )
            // main.java.PLSQLKeys.g:2437:10: SQL92_RESERVED_IN
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_IN533=(Token)match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_in_key15573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_IN533_tree = 
            (Object)adaptor.create(SQL92_RESERVED_IN533)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_IN533_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_key"


    public static class of_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "of_key"
    // main.java.PLSQLKeys.g:2440:1: of_key : SQL92_RESERVED_OF ;
    public final of_key_return of_key() throws RecognitionException {
        of_key_return retval = new of_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_OF534=null;

        Object SQL92_RESERVED_OF534_tree=null;

        try {
            // main.java.PLSQLKeys.g:2441:5: ( SQL92_RESERVED_OF )
            // main.java.PLSQLKeys.g:2441:10: SQL92_RESERVED_OF
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_OF534=(Token)match(input,SQL92_RESERVED_OF,FOLLOW_SQL92_RESERVED_OF_in_of_key15593); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_OF534_tree = 
            (Object)adaptor.create(SQL92_RESERVED_OF534)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_OF534_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "of_key"


    public static class null_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_key"
    // main.java.PLSQLKeys.g:2444:1: null_key : SQL92_RESERVED_NULL ;
    public final null_key_return null_key() throws RecognitionException {
        null_key_return retval = new null_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_NULL535=null;

        Object SQL92_RESERVED_NULL535_tree=null;

        try {
            // main.java.PLSQLKeys.g:2445:5: ( SQL92_RESERVED_NULL )
            // main.java.PLSQLKeys.g:2445:10: SQL92_RESERVED_NULL
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_NULL535=(Token)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_null_key15613); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_NULL535_tree = 
            (Object)adaptor.create(SQL92_RESERVED_NULL535)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_NULL535_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_key"


    public static class for_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_key"
    // main.java.PLSQLKeys.g:2448:1: for_key : SQL92_RESERVED_FOR ;
    public final for_key_return for_key() throws RecognitionException {
        for_key_return retval = new for_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_FOR536=null;

        Object SQL92_RESERVED_FOR536_tree=null;

        try {
            // main.java.PLSQLKeys.g:2449:5: ( SQL92_RESERVED_FOR )
            // main.java.PLSQLKeys.g:2449:10: SQL92_RESERVED_FOR
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_FOR536=(Token)match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_for_key15633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_FOR536_tree = 
            (Object)adaptor.create(SQL92_RESERVED_FOR536)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_FOR536_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_key"


    public static class select_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_key"
    // main.java.PLSQLKeys.g:2452:1: select_key : SQL92_RESERVED_SELECT ;
    public final select_key_return select_key() throws RecognitionException {
        select_key_return retval = new select_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_SELECT537=null;

        Object SQL92_RESERVED_SELECT537_tree=null;

        try {
            // main.java.PLSQLKeys.g:2453:5: ( SQL92_RESERVED_SELECT )
            // main.java.PLSQLKeys.g:2453:10: SQL92_RESERVED_SELECT
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_SELECT537=(Token)match(input,SQL92_RESERVED_SELECT,FOLLOW_SQL92_RESERVED_SELECT_in_select_key15653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_SELECT537_tree = 
            (Object)adaptor.create(SQL92_RESERVED_SELECT537)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_SELECT537_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "select_key"


    public static class when_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "when_key"
    // main.java.PLSQLKeys.g:2456:1: when_key : SQL92_RESERVED_WHEN ;
    public final when_key_return when_key() throws RecognitionException {
        when_key_return retval = new when_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_WHEN538=null;

        Object SQL92_RESERVED_WHEN538_tree=null;

        try {
            // main.java.PLSQLKeys.g:2457:5: ( SQL92_RESERVED_WHEN )
            // main.java.PLSQLKeys.g:2457:10: SQL92_RESERVED_WHEN
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_WHEN538=(Token)match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_when_key15673); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_WHEN538_tree = 
            (Object)adaptor.create(SQL92_RESERVED_WHEN538)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_WHEN538_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "when_key"


    public static class delete_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delete_key"
    // main.java.PLSQLKeys.g:2460:1: delete_key : SQL92_RESERVED_DELETE ;
    public final delete_key_return delete_key() throws RecognitionException {
        delete_key_return retval = new delete_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_DELETE539=null;

        Object SQL92_RESERVED_DELETE539_tree=null;

        try {
            // main.java.PLSQLKeys.g:2461:5: ( SQL92_RESERVED_DELETE )
            // main.java.PLSQLKeys.g:2461:10: SQL92_RESERVED_DELETE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_DELETE539=(Token)match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_delete_key15693); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_DELETE539_tree = 
            (Object)adaptor.create(SQL92_RESERVED_DELETE539)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_DELETE539_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delete_key"


    public static class between_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "between_key"
    // main.java.PLSQLKeys.g:2464:1: between_key : SQL92_RESERVED_BETWEEN ;
    public final between_key_return between_key() throws RecognitionException {
        between_key_return retval = new between_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_BETWEEN540=null;

        Object SQL92_RESERVED_BETWEEN540_tree=null;

        try {
            // main.java.PLSQLKeys.g:2465:5: ( SQL92_RESERVED_BETWEEN )
            // main.java.PLSQLKeys.g:2465:10: SQL92_RESERVED_BETWEEN
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_BETWEEN540=(Token)match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_between_key15713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_BETWEEN540_tree = 
            (Object)adaptor.create(SQL92_RESERVED_BETWEEN540)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_BETWEEN540_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "between_key"


    public static class like_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "like_key"
    // main.java.PLSQLKeys.g:2468:1: like_key : SQL92_RESERVED_LIKE ;
    public final like_key_return like_key() throws RecognitionException {
        like_key_return retval = new like_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_LIKE541=null;

        Object SQL92_RESERVED_LIKE541_tree=null;

        try {
            // main.java.PLSQLKeys.g:2469:5: ( SQL92_RESERVED_LIKE )
            // main.java.PLSQLKeys.g:2469:10: SQL92_RESERVED_LIKE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_LIKE541=(Token)match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_like_key15733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_LIKE541_tree = 
            (Object)adaptor.create(SQL92_RESERVED_LIKE541)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_LIKE541_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "like_key"


    public static class from_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "from_key"
    // main.java.PLSQLKeys.g:2472:1: from_key : SQL92_RESERVED_FROM ;
    public final from_key_return from_key() throws RecognitionException {
        from_key_return retval = new from_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_FROM542=null;

        Object SQL92_RESERVED_FROM542_tree=null;

        try {
            // main.java.PLSQLKeys.g:2473:5: ( SQL92_RESERVED_FROM )
            // main.java.PLSQLKeys.g:2473:10: SQL92_RESERVED_FROM
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_FROM542=(Token)match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_from_key15753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_FROM542_tree = 
            (Object)adaptor.create(SQL92_RESERVED_FROM542)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_FROM542_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "from_key"


    public static class where_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "where_key"
    // main.java.PLSQLKeys.g:2476:1: where_key : SQL92_RESERVED_WHERE ;
    public final where_key_return where_key() throws RecognitionException {
        where_key_return retval = new where_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SQL92_RESERVED_WHERE543=null;

        Object SQL92_RESERVED_WHERE543_tree=null;

        try {
            // main.java.PLSQLKeys.g:2477:5: ( SQL92_RESERVED_WHERE )
            // main.java.PLSQLKeys.g:2477:10: SQL92_RESERVED_WHERE
            {
            root_0 = (Object)adaptor.nil();


            SQL92_RESERVED_WHERE543=(Token)match(input,SQL92_RESERVED_WHERE,FOLLOW_SQL92_RESERVED_WHERE_in_where_key15773); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL92_RESERVED_WHERE543_tree = 
            (Object)adaptor.create(SQL92_RESERVED_WHERE543)
            ;
            adaptor.addChild(root_0, SQL92_RESERVED_WHERE543_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "where_key"


    public static class sequence_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sequence_key"
    // main.java.PLSQLKeys.g:2480:1: sequence_key :{...}? REGULAR_ID -> SEQUENCE_VK[$REGULAR_ID] ;
    public final sequence_key_return sequence_key() throws RecognitionException {
        sequence_key_return retval = new sequence_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID544=null;

        Object REGULAR_ID544_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2481:5: ({...}? REGULAR_ID -> SEQUENCE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2481:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("sequence"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "sequence_key", "input.LT(1).getText().equalsIgnoreCase(\"sequence\")");
            }

            REGULAR_ID544=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_sequence_key15794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID544);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2481:74: -> SEQUENCE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SEQUENCE_VK, REGULAR_ID544)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sequence_key"


    public static class noorder_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "noorder_key"
    // main.java.PLSQLKeys.g:2484:1: noorder_key :{...}? REGULAR_ID -> NOORDER_VK[$REGULAR_ID] ;
    public final noorder_key_return noorder_key() throws RecognitionException {
        noorder_key_return retval = new noorder_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID545=null;

        Object REGULAR_ID545_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2485:5: ({...}? REGULAR_ID -> NOORDER_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2485:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("noorder"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "noorder_key", "input.LT(1).getText().equalsIgnoreCase(\"noorder\")");
            }

            REGULAR_ID545=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_noorder_key15820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID545);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2485:73: -> NOORDER_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NOORDER_VK, REGULAR_ID545)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "noorder_key"


    public static class cycle_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cycle_key"
    // main.java.PLSQLKeys.g:2488:1: cycle_key :{...}? REGULAR_ID -> CYCLE_VK[$REGULAR_ID] ;
    public final cycle_key_return cycle_key() throws RecognitionException {
        cycle_key_return retval = new cycle_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID546=null;

        Object REGULAR_ID546_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2489:5: ({...}? REGULAR_ID -> CYCLE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2489:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cycle"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cycle_key", "input.LT(1).getText().equalsIgnoreCase(\"cycle\")");
            }

            REGULAR_ID546=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cycle_key15846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID546);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2489:71: -> CYCLE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CYCLE_VK, REGULAR_ID546)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cycle_key"


    public static class cache_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cache_key"
    // main.java.PLSQLKeys.g:2492:1: cache_key :{...}? REGULAR_ID -> CACHE_VK[$REGULAR_ID] ;
    public final cache_key_return cache_key() throws RecognitionException {
        cache_key_return retval = new cache_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID547=null;

        Object REGULAR_ID547_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2493:5: ({...}? REGULAR_ID -> CACHE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2493:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("cache"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "cache_key", "input.LT(1).getText().equalsIgnoreCase(\"cache\")");
            }

            REGULAR_ID547=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_cache_key15872); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID547);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2493:71: -> CACHE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(CACHE_VK, REGULAR_ID547)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cache_key"


    public static class nocache_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nocache_key"
    // main.java.PLSQLKeys.g:2496:1: nocache_key :{...}? REGULAR_ID -> NOCACHE_VK[$REGULAR_ID] ;
    public final nocache_key_return nocache_key() throws RecognitionException {
        nocache_key_return retval = new nocache_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID548=null;

        Object REGULAR_ID548_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2497:5: ({...}? REGULAR_ID -> NOCACHE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2497:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nocache"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nocache_key", "input.LT(1).getText().equalsIgnoreCase(\"nocache\")");
            }

            REGULAR_ID548=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nocache_key15898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID548);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2497:73: -> NOCACHE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NOCACHE_VK, REGULAR_ID548)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nocache_key"


    public static class nomaxvalue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nomaxvalue_key"
    // main.java.PLSQLKeys.g:2500:1: nomaxvalue_key :{...}? REGULAR_ID -> NOMAXVALUE_VK[$REGULAR_ID] ;
    public final nomaxvalue_key_return nomaxvalue_key() throws RecognitionException {
        nomaxvalue_key_return retval = new nomaxvalue_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID549=null;

        Object REGULAR_ID549_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2501:5: ({...}? REGULAR_ID -> NOMAXVALUE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2501:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nomaxvalue"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nomaxvalue_key", "input.LT(1).getText().equalsIgnoreCase(\"nomaxvalue\")");
            }

            REGULAR_ID549=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nomaxvalue_key15924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID549);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2501:76: -> NOMAXVALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NOMAXVALUE_VK, REGULAR_ID549)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nomaxvalue_key"


    public static class nominvalue_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nominvalue_key"
    // main.java.PLSQLKeys.g:2504:1: nominvalue_key :{...}? REGULAR_ID -> NOMINVALUE_VK[$REGULAR_ID] ;
    public final nominvalue_key_return nominvalue_key() throws RecognitionException {
        nominvalue_key_return retval = new nominvalue_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID550=null;

        Object REGULAR_ID550_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2505:5: ({...}? REGULAR_ID -> NOMINVALUE_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2505:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("nominvalue"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "nominvalue_key", "input.LT(1).getText().equalsIgnoreCase(\"nominvalue\")");
            }

            REGULAR_ID550=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_nominvalue_key15950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID550);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2505:76: -> NOMINVALUE_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(NOMINVALUE_VK, REGULAR_ID550)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "nominvalue_key"


    public static class search_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "search_key"
    // main.java.PLSQLKeys.g:2508:1: search_key :{...}? REGULAR_ID -> SEARCH_VK[$REGULAR_ID] ;
    public final search_key_return search_key() throws RecognitionException {
        search_key_return retval = new search_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID551=null;

        Object REGULAR_ID551_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2509:5: ({...}? REGULAR_ID -> SEARCH_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2509:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("search"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "search_key", "input.LT(1).getText().equalsIgnoreCase(\"search\")");
            }

            REGULAR_ID551=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_search_key15976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID551);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2509:72: -> SEARCH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(SEARCH_VK, REGULAR_ID551)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "search_key"


    public static class depth_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "depth_key"
    // main.java.PLSQLKeys.g:2512:1: depth_key :{...}? REGULAR_ID -> DEPTH_VK[$REGULAR_ID] ;
    public final depth_key_return depth_key() throws RecognitionException {
        depth_key_return retval = new depth_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID552=null;

        Object REGULAR_ID552_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2513:5: ({...}? REGULAR_ID -> DEPTH_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2513:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("depth"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "depth_key", "input.LT(1).getText().equalsIgnoreCase(\"depth\")");
            }

            REGULAR_ID552=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_depth_key16002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID552);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2513:71: -> DEPTH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(DEPTH_VK, REGULAR_ID552)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "depth_key"


    public static class breadth_key_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "breadth_key"
    // main.java.PLSQLKeys.g:2516:1: breadth_key :{...}? REGULAR_ID -> BREADTH_VK[$REGULAR_ID] ;
    public final breadth_key_return breadth_key() throws RecognitionException {
        breadth_key_return retval = new breadth_key_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID553=null;

        Object REGULAR_ID553_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // main.java.PLSQLKeys.g:2517:5: ({...}? REGULAR_ID -> BREADTH_VK[$REGULAR_ID] )
            // main.java.PLSQLKeys.g:2517:9: {...}? REGULAR_ID
            {
            if ( !((input.LT(1).getText().equalsIgnoreCase("breadth"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "breadth_key", "input.LT(1).getText().equalsIgnoreCase(\"breadth\")");
            }

            REGULAR_ID553=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_breadth_key16028); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID553);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 2517:73: -> BREADTH_VK[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(BREADTH_VK, REGULAR_ID553)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "breadth_key"

    // Delegated rules


 

    public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_create_key2266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_replace_key2293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_package_key2321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_body_key2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_BEGIN_in_begin_key2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_exit_key2390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DECLARE_in_declare_key2415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_key2435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_serveroutput_key2457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_off_key2479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_constant_key2506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_subtype_key2533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CURSOR_in_cursor_key2553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nextval_key2576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_GOTO_in_goto_key2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_execute_key2618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_immediate_key2646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_return_key2673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_PROCEDURE_in_procedure_key2698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_function_key2721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_pragma_key2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_exception_init_key2770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_type_key2798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_record_key2826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_indexed_key2848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_INDEX_in_index_key2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_notfound_key2891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_notfound_key2893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_found_key2921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_found_key2923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_isopen_key2951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_isopen_key2953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_rowcount_key2981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_rowcount_key2983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_rowtype_key3011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_rowtype_key3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_percent_type_key3042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_REGULAR_ID_in_percent_type_key3044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_out_key3072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_inout_key3099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_extend_key3127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_raise_key3149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_while_key3176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_loop_key3198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_commit_key3226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_work_key3248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_IF_in_if_key3273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_key3293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_authid_key3316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_definer_key3343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_external_key3370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_language_key3397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_java_key3424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_name_key3452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_deterministic_key3480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_parallel_enable_key3508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_result_cache_key3536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_pipelined_key3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_aggregate_key3591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ALTER_in_alter_key3616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_compile_key3638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_debug_key3666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_reuse_key3693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_settings_key3720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_specification_key3742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_drop_key3767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_trigger_key3790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_force_key3813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_validate_key3840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ref_key3868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_array_key3896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_varray_key3919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_pls_integer_key3942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_serially_reusable_key3970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_autonomous_transaction_key3998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_inline_key4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_restrict_references_key4054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_exceptions_key4082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_save_key4111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_forall_key4134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_continue_key4162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_indices_key4190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_VALUES_in_values_key4210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CASE_in_case_key4230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_bulk_key4253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_collect_key4281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_committed_key4308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_use_key4336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_level_key4358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_isolation_key4381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_serializable_key4408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_segment_key4435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_write_key4458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_wait_key4486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_corrupt_xid_all_key4514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_corrupt_xid_key4542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_batch_key4570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_session_key4598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_role_key4621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_constraint_key4644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_constraints_key4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_call_key4690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_explain_key4718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_merge_key4741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_plan_key4769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_system_key4792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_subpartition_key4815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_partition_key4843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_matched_key4871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_reject_key4894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_log_key4922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_unlimited_key4950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_limit_key4978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_errors_key5006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timestamp_tz_unconstrained_key5029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_urowid_key5057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_min_subnormal_key5085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_min_normal_key5108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_max_normal_key5131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_positiven_key5154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timezone_abbr_key5182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_min_subnormal_key5210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_max_subnormal_key5233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_key5256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_bfile_key5284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_infinity_key5312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timezone_region_key5335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timestamp_ltz_unconstrained_key5363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_naturaln_key5391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_simple_integer_key5419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_max_subnormal_key5447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_byte_key5470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_infinity_key5498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_key5521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_range_key5549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nclob_key5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_clob_key5605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dsinterval_unconstrained_key5633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_yminterval_unconstrained_key5661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rowid_key5689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_nan_key5717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timestamp_unconstrained_key5740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_min_normal_key5768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_signtype_key5791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_blob_key5819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nvarchar2_key5847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_double_max_normal_key5875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_float_nan_key5898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_string_key5921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_c_key5949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_library_key5977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_context_key6005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_parameters_key6033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_agent_key6061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cluster_key6089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_hash_key6117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_relies_on_key6145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_returning_key6173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_statement_id_key6200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_deferred_key6223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_advise_key6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_resumable_key6274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timeout_key6297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_parallel_key6320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ddl_key6343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_query_key6371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dml_key6394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_guard_key6417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nothing_key6440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_enable_key6463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_database_key6491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_disable_key6519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_link_key6547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_IDENTIFIED_in_identified_key6567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_none_key6590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_before_key6613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_referencing_key6642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_logon_key6670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_after_key6698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_schema_key6726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_GRANT_in_grant_key6751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_truncate_key6774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_startup_key6802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_statistics_key6830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_noaudit_key6858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_suspend_key6886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_audit_key6914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_disassociate_key6942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_shutdown_key6971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_compound_key6999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_servererror_key7027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_parent_key7055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_follows_key7083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nested_key7111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_old_key7139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_statement_key7167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_db_role_change_key7190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_each_key7218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_logoff_key7241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_analyze_key7269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_instead_key7297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_associate_key7325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_new_key7353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_REVOKE_in_revoke_key7378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rename_key7401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_customdatum_key7430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_oradata_key7458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_constructor_key7486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sqldata_key7514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_member_key7542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_self_key7570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_object_key7598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_variable_key7626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_instantiable_key7649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_final_key7677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_static_key7705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_oid_key7733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_result_key7756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_under_key7779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_map_key7807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_overriding_key7835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_add_key7863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_modify_key7891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_including_key7919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_substitutable_key7947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_attribute_key7970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cascade_key7993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_data_key8022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_invalidate_key8045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_element_key8073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_first_key8096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CHECK_in_check_key8121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_OPTION_in_option_key8141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nocycle_key8164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_locked_key8192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_block_key8215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xml_key8243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_pivot_key8271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_PRIOR_in_prior_key8296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sequential_key8319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_single_key8347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_skip_key8375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_key8409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_updated_key8432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_increment_key8460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_exclude_key8488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_reference_key8516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sets_key8544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_until_key8567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_seed_key8595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_maxvalue_key8623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_siblings_key8651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cube_key8679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nulls_key8707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dimension_key8735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_scn_key8763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_snapshot_key8791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_decrement_key8814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_unpivot_key8842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_keep_key8870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_measures_key8898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rows_key8926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sample_key8954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_upsert_key8982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_versions_key9010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rules_key9038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_iterate_key9066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_minvalue_key9094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rollup_key9122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nav_key9150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_automatic_key9178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_last_key9206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_main_key9234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_grouping_key9257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_include_key9285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ignore_key9313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_respect_key9341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_unique_key9365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_submultiset_key9388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_at_key9416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_a_key9444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_empty_key9467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_likec_key9490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nan_key9518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_infinite_key9541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_like2_key9564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_like4_key9592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_present_key9620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dbtimezone_key9643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sessiontimezone_key9671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nchar_cs_key9699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_decompose_key9727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_following_key9755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_first_value_key9783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_preceding_key9811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_within_key9839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_canonical_key9867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_compatibility_key9895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_over_key9923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_multiset_key9951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_CONNECT_BY_ROOT_in_connect_by_root_key9971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_last_value_key9994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CURRENT_in_current_key10019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_unbounded_key10042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dense_rank_key10070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cost_key10098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_char_cs_key10126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_auto_key10154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_treat_key10182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_content_key10210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlparse_key10238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlelement_key10266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_entityescaping_key10294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_standalone_key10322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_wellformed_key10350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlexists_key10378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_version_key10406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlcast_key10434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_yes_key10462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_no_key10490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_evalname_key10518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlpi_key10546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlcolattval_key10574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_document_key10602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlforest_key10630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_passing_key10658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_columns_key10686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_indent_key10715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_hide_key10743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlagg_key10771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_path_key10799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlnamespaces_key10822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_SIZE_in_size_key10847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_noschemacheck_key10870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_noentityescaping_key10898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlquery_key10926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmltable_key10954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlroot_key10982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_schemacheck_key11010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlattributes_key11038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_encoding_key11066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_show_key11094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_xmlserialize_key11122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ordinality_key11150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_defaults_key11178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sqlerror_key11205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_oserror_key11229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_success_key11252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_warning_key11275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_failure_key11298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_insert_key11319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_order_key11339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_MINUS_in_minus_key11359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_row_key11381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_mod_key11408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_raw_key11431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_power_key11458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_LOCK_in_lock_key11478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_EXISTS_in_exists_key11498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_HAVING_in_having_key11518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_any_key11538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_with_key11558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_transaction_key11581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rawtohex_key11603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_number_key11626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nocopy_key11654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_to_key11679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_abs_key11701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rollback_key11724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_share_key11749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_greatest_key11771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_vsize_key11793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_exclusive_key11813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_varchar2_key11836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rowidtochar_key11863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_open_key11886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_comment_key11914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sqrt_key11941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_instr_key11963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_nowait_key11983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_lpad_key12005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_boolean_key12028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rpad_key12055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_savepoint_key12078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_decode_key12105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_reverse_key12127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_least_key12154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nvl_key12176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_variance_key12198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_start_key12218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DESC_in_desc_key12238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_concat_key12260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dump_key12282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_soundex_key12304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_positive_key12327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UNION_in_union_key12352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ascii_key12374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CONNECT_in_connect_key12394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ASC_in_asc_key12414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_hextoraw_key12436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_to_date_key12458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_floor_key12480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sign_key12502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_update_key12522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_trunc_key12544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_rtrim_key12566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_close_key12589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_to_char_key12616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ltrim_key12638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_MODE_in_mode_key12658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_uid_key12680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_chr_key12702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INTERSECT_in_intersect_key12727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_chartorowid_key12749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_mlslabel_key12772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_userenv_key12799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_stddev_key12821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_length_key12843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FETCH_in_fetch_key12863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_GROUP_in_group_key12883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sysdate_key12905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_binary_integer_key12928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_to_number_key12955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_substr_key12977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_ceil_key12999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_initcap_key13021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_round_key13043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_long_key13066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_read_key13094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_only_key13121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_set_key13149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nullif_key13176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_coalesce_key13198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_count_key13220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_avg_key13246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_max_key13267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_min_key13288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sum_key13309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_unknown_key13331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_escape_key13353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_some_key13375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_match_key13402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cast_key13424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_full_key13447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_partial_key13474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_character_key13497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_except_key13524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_char_key13542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_varying_key13570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_varchar_key13593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_national_key13620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nchar_key13642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_bit_key13668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_float_key13695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_real_key13722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_double_key13750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_precision_key13777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_interval_key13805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_time_key13827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_zone_key13850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timestamp_key13872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DATE_in_date_key13897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_numeric_key13920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_decimal_key13948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_dec_key13975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_integer_key14003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_int_key14030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_smallint_key14058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_corresponding_key14085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cross_key14108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_join_key14136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_left_key14159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_right_key14187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_inner_key14215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_natural_key14243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_outer_key14271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_using_key14291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_indicator_key14313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_user_key14335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_current_user_key14357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_session_user_key14384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_system_user_key14406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_value_key14428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_substring_key14456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_upper_key14478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_lower_key14500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_convert_key14522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_translate_key14549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_trim_key14576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_leading_key14603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_trailing_key14630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_both_key14657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_collate_key14684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_position_key14706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_extract_key14728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_second_key14755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timezone_hour_key14782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_timezone_minute_key14809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_char_length_key14836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_octet_length_key14858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_character_length_key14880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_bit_length_key14902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_local_key14924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_current_timestamp_key14951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_current_date_key14973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_current_time_key14995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_module_key15017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_global_key15039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_year_key15062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_month_key15089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_day_key15117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_hour_key15139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_minute_key15166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_whenever_key15193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_IS_in_is_key15213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_else_key15233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_TABLE_in_table_key15253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_THE_in_the_key15273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_THEN_in_then_key15293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_END_in_end_key15313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_all_key15333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_on_key15353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_OR_in_or_key15373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_AND_in_and_key15393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_not_key15413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_TRUE_in_true_key15433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FALSE_in_false_key15453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_default_key15473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_distinct_key15493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_into_key15513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_BY_in_by_key15533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_AS_in_as_key15553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_in_key15573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_OF_in_of_key15593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_null_key15613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_for_key15633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_SELECT_in_select_key15653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_when_key15673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_delete_key15693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_between_key15713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_like_key15733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_from_key15753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WHERE_in_where_key15773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_sequence_key15794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_noorder_key15820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cycle_key15846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_cache_key15872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nocache_key15898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nomaxvalue_key15924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_nominvalue_key15950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_search_key15976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_depth_key16002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_breadth_key16028 = new BitSet(new long[]{0x0000000000000002L});

}