package br.com.porcelli.parser;


import org.antlr.runtime.*;
import java.util.Stack;

import org.antlr.runtime.tree.*;


/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *                                                                                bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class PLSQLParser_PLSQL_DMLParser extends Parser {
    public static final int EOF=-1;
    public static final int AMPERSAND=4;
    public static final int APPROXIMATE_NUM_LIT=5;
    public static final int ASSIGN_OP=6;
    public static final int ASTERISK=7;
    public static final int AT_SIGN=8;
    public static final int BINDVAR=9;
    public static final int BIT_STRING_LIT=10;
    public static final int CARRET_OPERATOR_PART=11;
    public static final int CHAR_STRING=12;
    public static final int CHAR_STRING_PERL=13;
    public static final int COLON=14;
    public static final int COMMA=15;
    public static final int COMMENT=16;
    public static final int CONCATENATION_OP=17;
    public static final int DELIMITED_ID=18;
    public static final int DOUBLE_ASTERISK=19;
    public static final int DOUBLE_PERIOD=20;
    public static final int EQUALS_OP=21;
    public static final int EXACT_NUM_LIT=22;
    public static final int EXCLAMATION_OPERATOR_PART=23;
    public static final int FOR_NOTATION=24;
    public static final int GREATER_THAN_OP=25;
    public static final int GREATER_THAN_OR_EQUALS_OP=26;
    public static final int HEX_STRING_LIT=27;
    public static final int INTRODUCER=28;
    public static final int LEFT_BRACKET=29;
    public static final int LEFT_PAREN=30;
    public static final int LESS_THAN_OP=31;
    public static final int LESS_THAN_OR_EQUALS_OP=32;
    public static final int MINUS_SIGN=33;
    public static final int NATIONAL_CHAR_STRING_LIT=34;
    public static final int NEWLINE=35;
    public static final int NOT_EQUAL_OP=36;
    public static final int PERCENT=37;
    public static final int PERIOD=38;
    public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=39;
    public static final int PLSQL_NON_RESERVED_ELSIF=40;
    public static final int PLSQL_NON_RESERVED_MODEL=41;
    public static final int PLSQL_NON_RESERVED_PIVOT=42;
    public static final int PLSQL_NON_RESERVED_UNPIVOT=43;
    public static final int PLSQL_NON_RESERVED_USING=44;
    public static final int PLSQL_RESERVED_CLUSTERS=45;
    public static final int PLSQL_RESERVED_COLAUTH=46;
    public static final int PLSQL_RESERVED_COMPRESS=47;
    public static final int PLSQL_RESERVED_CRASH=48;
    public static final int PLSQL_RESERVED_EXCLUSIVE=49;
    public static final int PLSQL_RESERVED_IDENTIFIED=50;
    public static final int PLSQL_RESERVED_IF=51;
    public static final int PLSQL_RESERVED_INDEX=52;
    public static final int PLSQL_RESERVED_INDEXES=53;
    public static final int PLSQL_RESERVED_LOCK=54;
    public static final int PLSQL_RESERVED_MINUS=55;
    public static final int PLSQL_RESERVED_MODE=56;
    public static final int PLSQL_RESERVED_NOCOMPRESS=57;
    public static final int PLSQL_RESERVED_NOWAIT=58;
    public static final int PLSQL_RESERVED_RESOURCE=59;
    public static final int PLSQL_RESERVED_SHARE=60;
    public static final int PLSQL_RESERVED_START=61;
    public static final int PLSQL_RESERVED_TABAUTH=62;
    public static final int PLSQL_RESERVED_VIEWS=63;
    public static final int PLUS_SIGN=64;
    public static final int PROMPT=65;
    public static final int QS_ANGLE=66;
    public static final int QS_BRACE=67;
    public static final int QS_BRACK=68;
    public static final int QS_OTHER=69;
    public static final int QS_OTHER_CH=70;
    public static final int QS_PAREN=71;
    public static final int QUESTION_MARK=72;
    public static final int QUOTE=73;
    public static final int REGULAR_ID=74;
    public static final int RIGHT_BRACKET=75;
    public static final int RIGHT_PAREN=76;
    public static final int SEMICOLON=77;
    public static final int SEPARATOR=78;
    public static final int SIMPLE_LETTER=79;
    public static final int SOLIDUS=80;
    public static final int SPACE=81;
    public static final int SQL92_RESERVED_ALL=82;
    public static final int SQL92_RESERVED_ALTER=83;
    public static final int SQL92_RESERVED_AND=84;
    public static final int SQL92_RESERVED_ANY=85;
    public static final int SQL92_RESERVED_AS=86;
    public static final int SQL92_RESERVED_ASC=87;
    public static final int SQL92_RESERVED_BEGIN=88;
    public static final int SQL92_RESERVED_BETWEEN=89;
    public static final int SQL92_RESERVED_BY=90;
    public static final int SQL92_RESERVED_CASE=91;
    public static final int SQL92_RESERVED_CHECK=92;
    public static final int SQL92_RESERVED_CONNECT=93;
    public static final int SQL92_RESERVED_CREATE=94;
    public static final int SQL92_RESERVED_CURRENT=95;
    public static final int SQL92_RESERVED_CURSOR=96;
    public static final int SQL92_RESERVED_DATE=97;
    public static final int SQL92_RESERVED_DECLARE=98;
    public static final int SQL92_RESERVED_DEFAULT=99;
    public static final int SQL92_RESERVED_DELETE=100;
    public static final int SQL92_RESERVED_DESC=101;
    public static final int SQL92_RESERVED_DISTINCT=102;
    public static final int SQL92_RESERVED_DROP=103;
    public static final int SQL92_RESERVED_ELSE=104;
    public static final int SQL92_RESERVED_END=105;
    public static final int SQL92_RESERVED_EXCEPTION=106;
    public static final int SQL92_RESERVED_EXISTS=107;
    public static final int SQL92_RESERVED_FALSE=108;
    public static final int SQL92_RESERVED_FETCH=109;
    public static final int SQL92_RESERVED_FOR=110;
    public static final int SQL92_RESERVED_FROM=111;
    public static final int SQL92_RESERVED_GOTO=112;
    public static final int SQL92_RESERVED_GRANT=113;
    public static final int SQL92_RESERVED_GROUP=114;
    public static final int SQL92_RESERVED_HAVING=115;
    public static final int SQL92_RESERVED_IN=116;
    public static final int SQL92_RESERVED_INSERT=117;
    public static final int SQL92_RESERVED_INTERSECT=118;
    public static final int SQL92_RESERVED_INTO=119;
    public static final int SQL92_RESERVED_IS=120;
    public static final int SQL92_RESERVED_LIKE=121;
    public static final int SQL92_RESERVED_NOT=122;
    public static final int SQL92_RESERVED_NULL=123;
    public static final int SQL92_RESERVED_OF=124;
    public static final int SQL92_RESERVED_ON=125;
    public static final int SQL92_RESERVED_OPTION=126;
    public static final int SQL92_RESERVED_OR=127;
    public static final int SQL92_RESERVED_ORDER=128;
    public static final int SQL92_RESERVED_OVERLAPS=129;
    public static final int SQL92_RESERVED_PRIOR=130;
    public static final int SQL92_RESERVED_PROCEDURE=131;
    public static final int SQL92_RESERVED_PUBLIC=132;
    public static final int SQL92_RESERVED_REVOKE=133;
    public static final int SQL92_RESERVED_SELECT=134;
    public static final int SQL92_RESERVED_SIZE=135;
    public static final int SQL92_RESERVED_TABLE=136;
    public static final int SQL92_RESERVED_THE=137;
    public static final int SQL92_RESERVED_THEN=138;
    public static final int SQL92_RESERVED_TO=139;
    public static final int SQL92_RESERVED_TRUE=140;
    public static final int SQL92_RESERVED_UNION=141;
    public static final int SQL92_RESERVED_UNIQUE=142;
    public static final int SQL92_RESERVED_UPDATE=143;
    public static final int SQL92_RESERVED_VALUES=144;
    public static final int SQL92_RESERVED_VIEW=145;
    public static final int SQL92_RESERVED_WHEN=146;
    public static final int SQL92_RESERVED_WHERE=147;
    public static final int SQL92_RESERVED_WITH=148;
    public static final int TILDE_OPERATOR_PART=149;
    public static final int UNDERSCORE=150;
    public static final int UNSIGNED_INTEGER=151;
    public static final int VERTICAL_BAR=152;
    public static final int ZV=153;
    public static final int ADD_VK=154;
    public static final int AFTER_EACH_ROW=155;
    public static final int AFTER_STATEMENT=156;
    public static final int AFTER_VK=157;
    public static final int AGENT_VK=158;
    public static final int AGGREGATE_VK=159;
    public static final int ALIAS=160;
    public static final int ALTER_ATTRIBUTE=161;
    public static final int ALTER_COLLECTION=162;
    public static final int ALTER_FUNCTION=163;
    public static final int ALTER_METHOD=164;
    public static final int ALTER_METHOD_ELEMENT=165;
    public static final int ALTER_PACKAGE=166;
    public static final int ALTER_PROCEDURE=167;
    public static final int ALTER_SEQUENCE=168;
    public static final int ALTER_TRIGGER=169;
    public static final int ALTER_TYPE=170;
    public static final int ANALYZE_VK=171;
    public static final int ANY_ELEMENT=172;
    public static final int ANY_MODE=173;
    public static final int ARGUMENT=175;
    public static final int ARGUMENTS=176;
    public static final int ASSIGN=177;
    public static final int ASSOCIATE_VK=178;
    public static final int ATTRIBUTE=180;
    public static final int ATTRIBUTES=181;
    public static final int ATTRIBUTE_NAME=182;
    public static final int AT_VK=184;
    public static final int AUDIT_VK=185;
    public static final int AUTHID_VK=186;
    public static final int AUTOMATIC_VK=187;
    public static final int AUTONOMOUS_TRANSACTION_VK=188;
    public static final int AUTO_VK=189;
    public static final int BATCH_VK=190;
    public static final int BEFORE_EACH_ROW=191;
    public static final int BEFORE_STATEMENT=192;
    public static final int BEFORE_VK=193;
    public static final int BFILE_VK=194;
    public static final int BINARY_DOUBLE_VK=195;
    public static final int BINARY_FLOAT_VK=196;
    public static final int BINARY_INTEGER_VK=197;
    public static final int BIT_VK=199;
    public static final int BLOB_VK=200;
    public static final int BLOCK=201;
    public static final int BLOCK_VK=202;
    public static final int BODY=203;
    public static final int BODY_MODE=204;
    public static final int BODY_VK=205;
    public static final int BOOLEAN_VK=206;
    public static final int BOTH_VK=207;
    public static final int BREADTH_VK=208;
    public static final int BULK_VK=209;
    public static final int BYTE_VK=210;
    public static final int CACHE_VK=211;
    public static final int CALL_MODE=212;
    public static final int CALL_VK=213;
    public static final int CANONICAL_VK=214;
    public static final int CASCADE_VK=216;
    public static final int CASCATED_ELEMENT=217;
    public static final int CAST_VK=218;
    public static final int CHARACTER_VK=219;
    public static final int CHAR_CS_VK=220;
    public static final int CHAR_SET_NAME=221;
    public static final int CHAR_VK=224;
    public static final int CHR_VK=225;
    public static final int CLOB_VK=226;
    public static final int CLOSE_VK=227;
    public static final int CLUSTER_VK=228;
    public static final int COLLECTION_MODE=229;
    public static final int COLLECTION_NAME=230;
    public static final int COLLECT_VK=231;
    public static final int COLUMNS=233;
    public static final int COLUMN_NAME=234;
    public static final int COMMENT_VK=236;
    public static final int COMMITTED_VK=237;
    public static final int COMMIT_VK=238;
    public static final int COMPATIBILITY_VK=239;
    public static final int COMPILATION_UNIT=240;
    public static final int COMPILER_PARAMETER=241;
    public static final int COMPILE_VK=242;
    public static final int COMPOUND_DML=243;
    public static final int COMPOUND_VK=244;
    public static final int CONDITIONAL_INSERT=246;
    public static final int CONSTANT_VK=247;
    public static final int CONSTRAINT_NAME=248;
    public static final int CONSTRUCTOR_SPEC=249;
    public static final int CONSTRUCTOR_VK=250;
    public static final int CONTENT_VK=251;
    public static final int CONTEXT_VK=252;
    public static final int CONTINUE_VK=253;
    public static final int CONVERT_VK=254;
    public static final int CORRUPT_XID_ALL_VK=255;
    public static final int CORRUPT_XID_VK=256;
    public static final int COST_CLASS_NAME=257;
    public static final int COST_VK=258;
    public static final int COUNT_VK=259;
    public static final int CREATE_FUNCTION=260;
    public static final int CREATE_PACKAGE_BODY=261;
    public static final int CREATE_PACKAGE_SPEC=262;
    public static final int CREATE_PROCEDURE=263;
    public static final int CREATE_SEQUENCE=264;
    public static final int CREATE_TRIGGER=265;
    public static final int CREATE_TYPE_BODY=266;
    public static final int CREATE_TYPE_SPEC=267;
    public static final int CROSS_VK=268;
    public static final int CUBE_VK=269;
    public static final int CURRENT_USER_VK=270;
    public static final int CURRENT_VK=271;
    public static final int CURSOR_BASED_FOR=272;
    public static final int CURSOR_DECLARE=273;
    public static final int CURSOR_NAME=274;
    public static final int CUSTOMDATUM_VK=275;
    public static final int CUSTOM_TYPE=276;
    public static final int CYCLE_VK=277;
    public static final int C_VK=278;
    public static final int DATABASE_VK=279;
    public static final int DATETIME_OP=280;
    public static final int DAY_VK=281;
    public static final int DBTIMEZONE_VK=282;
    public static final int DB_ROLE_CHANGE_VK=283;
    public static final int DDL_VK=284;
    public static final int DEBUG_VK=285;
    public static final int DECIMAL_VK=286;
    public static final int DECOMPOSE_VK=287;
    public static final int DECREMENT_VK=288;
    public static final int DEC_VK=289;
    public static final int DEFAULTS_VK=290;
    public static final int DEFAULT_VALUE=291;
    public static final int DEFERRED_VK=292;
    public static final int DEFINER_VK=293;
    public static final int DENSE_RANK_VK=295;
    public static final int DEPENDENT_HANDLING=296;
    public static final int DEPTH_VK=297;
    public static final int DETERMINISTIC_VK=298;
    public static final int DIMENSION_VK=299;
    public static final int DIRECT_MODE=300;
    public static final int DISABLE_VK=301;
    public static final int DISASSOCIATE_VK=302;
    public static final int DML_EVENT=303;
    public static final int DML_EVENT_ELEMENT=304;
    public static final int DOCUMENT_VK=305;
    public static final int DOT_ASTERISK=306;
    public static final int DOUBLE_VK=307;
    public static final int DROP_FUNCTION=308;
    public static final int DROP_PACKAGE=309;
    public static final int DROP_PROCEDURE=310;
    public static final int DROP_SEQUENCE=311;
    public static final int DROP_TRIGGER=312;
    public static final int DROP_TYPE=313;
    public static final int DSINTERVAL_UNCONSTRAINED_VK=314;
    public static final int DYNAMIC_RETURN=315;
    public static final int ELEMENT=316;
    public static final int ELEMENTS_MODE=317;
    public static final int ELEMENT_SPEC=318;
    public static final int ENABLE_VK=319;
    public static final int ENCODING_VK=320;
    public static final int ENTITYESCAPING_VK=321;
    public static final int EVALNAME_VK=323;
    public static final int EXCEPTIONS_VK=325;
    public static final int EXCEPTION_DECLARE=326;
    public static final int EXCEPTION_INIT_VK=327;
    public static final int EXCEPTION_NAME=328;
    public static final int EXCLUDE_VK=330;
    public static final int EXECUTE_VK=331;
    public static final int EXIT_VK=332;
    public static final int EXPLAIN_STATEMENT=333;
    public static final int EXPR=334;
    public static final int EXPR_LIST=335;
    public static final int EXTERNAL_MODE=336;
    public static final int EXTERNAL_VK=337;
    public static final int EXTRACT_VK=338;
    public static final int FACTORING=339;
    public static final int FIELDS=340;
    public static final int FIELD_SPEC=341;
    public static final int FINAL_VK=342;
    public static final int FIRST_VALUE_VK=343;
    public static final int FIRST_VK=344;
    public static final int FLOAT_VK=345;
    public static final int FOLLOWING_VK=346;
    public static final int FOLLOWS_VK=347;
    public static final int FORALL_VK=348;
    public static final int FORCE_VK=349;
    public static final int FOR_EACH_ROW=350;
    public static final int FOR_LOOP=351;
    public static final int FOR_MULTI_COLUMN=352;
    public static final int FOR_SINGLE_COLUMN=353;
    public static final int FULL_VK=354;
    public static final int FUNCTION_ENABLING_OVER=355;
    public static final int FUNCTION_ENABLING_USING=356;
    public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=357;
    public static final int FUNCTION_NAME=358;
    public static final int FUNCTION_SPEC=359;
    public static final int GROUPING_VK=362;
    public static final int GROUPIN_SET=363;
    public static final int GROUP_BY_ELEMENT=364;
    public static final int HASH_VK=365;
    public static final int HIDE_VK=366;
    public static final int HIERARCHICAL=367;
    public static final int HOSTED_VARIABLE=368;
    public static final int HOSTED_VARIABLE_NAME=369;
    public static final int HOSTED_VARIABLE_ROUTINE_CALL=370;
    public static final int HOUR_VK=371;
    public static final int ID=372;
    public static final int IGNORE_VK=373;
    public static final int IMMEDIATE_VK=374;
    public static final int IMPLEMENTATION_TYPE_NAME=375;
    public static final int INCLUDE_VK=376;
    public static final int INCLUDING_VK=377;
    public static final int INCREMENT_VK=378;
    public static final int INDENT_VK=379;
    public static final int INDEXED_BY=380;
    public static final int INDEXED_FOR=381;
    public static final int INDEX_NAME=382;
    public static final int INDICES_BOUND=383;
    public static final int INLINE_VK=384;
    public static final int INNER_VK=385;
    public static final int INOUT_VK=386;
    public static final int INSTANTIABLE_VK=387;
    public static final int INSTEAD_VK=388;
    public static final int INTEGER_VK=389;
    public static final int INTERVAL_DATATYPE=390;
    public static final int INT_VK=392;
    public static final int INVALIDATE_VK=393;
    public static final int ISOLATION_VK=394;
    public static final int IS_A_SET=395;
    public static final int IS_EMPTY=396;
    public static final int IS_INFINITE=397;
    public static final int IS_NAN=398;
    public static final int IS_NOT_A_SET=399;
    public static final int IS_NOT_EMPTY=400;
    public static final int IS_NOT_INFINITE=401;
    public static final int IS_NOT_NAN=402;
    public static final int IS_NOT_NULL=403;
    public static final int IS_NOT_OF_TYPE=404;
    public static final int IS_NOT_PRESENT=405;
    public static final int IS_NULL=406;
    public static final int IS_OF_TYPE=407;
    public static final int IS_PRESENT=408;
    public static final int ITERATE_VK=409;
    public static final int JAVA_VK=410;
    public static final int JOIN_DEF=411;
    public static final int KEEP_VK=412;
    public static final int LABEL_DECLARE=413;
    public static final int LABEL_NAME=414;
    public static final int LANGUAGE_VK=415;
    public static final int LAST_VALUE_VK=416;
    public static final int LAST_VK=417;
    public static final int LEADING_VK=418;
    public static final int LEFT_VK=421;
    public static final int LIBRARY_VK=424;
    public static final int LIKE2_VK=425;
    public static final int LIKE4_VK=426;
    public static final int LIKEC_VK=427;
    public static final int LIMIT_VK=428;
    public static final int LINK_NAME=429;
    public static final int LOCAL_VK=430;
    public static final int LOCK_TABLE_ELEMENT=431;
    public static final int LOGIC_EXPR=432;
    public static final int LOGOFF_VK=433;
    public static final int LOGON_VK=434;
    public static final int LOG_VK=435;
    public static final int LONG_VK=436;
    public static final int LOOP_VK=437;
    public static final int MAIN_MODEL=438;
    public static final int MAIN_MODEL_NAME=439;
    public static final int MAP_VK=440;
    public static final int MAXVALUE_VK=441;
    public static final int MEASURES_VK=442;
    public static final int MEMBER_VK=443;
    public static final int MERGE_INSERT=444;
    public static final int MERGE_UPDATE=445;
    public static final int MERGE_VK=446;
    public static final int MINUTE_VK=448;
    public static final int MINVALUE_VK=449;
    public static final int MLSLABEL_VK=450;
    public static final int MODEL_COLUMN=451;
    public static final int MODEL_COLUMNS=452;
    public static final int MODEL_EXPRESSION=453;
    public static final int MODEL_RULE=454;
    public static final int MODEL_RULES=455;
    public static final int MODIFIER=456;
    public static final int MODIFY_VK=457;
    public static final int MONTH_VK=458;
    public static final int MULTI_TABLE_MODE=459;
    public static final int NAME_VK=460;
    public static final int NATIVE_DATATYPE=462;
    public static final int NATURALN_VK=463;
    public static final int NATURAL_VK=464;
    public static final int NAV_VK=465;
    public static final int NCHAR_CS_VK=466;
    public static final int NCHAR_VK=467;
    public static final int NCLOB_VK=468;
    public static final int NESTED_TABLE_TYPE_DEF=469;
    public static final int NESTED_VK=470;
    public static final int NEW_VK=471;
    public static final int NOAUDIT_VK=472;
    public static final int NOCACHE_VK=473;
    public static final int NOCOPY_VK=474;
    public static final int NOCYCLE_VK=475;
    public static final int NOENTITYESCAPING_VK=476;
    public static final int NOMAXVALUE_VK=477;
    public static final int NOMINVALUE_VK=478;
    public static final int NON_DML=479;
    public static final int NOORDER_VK=480;
    public static final int NOSCHEMACHECK_VK=481;
    public static final int NOT_BETWEEN=482;
    public static final int NOT_IN=484;
    public static final int NOT_LIKE=485;
    public static final int NO_VK=486;
    public static final int NULLS_VK=487;
    public static final int NUMBER_VK=488;
    public static final int NUMERIC_VK=489;
    public static final int NVARCHAR2_VK=490;
    public static final int OBJECT_AS=491;
    public static final int OBJECT_MEMBERS=492;
    public static final int OBJECT_TYPE_DEF=493;
    public static final int OBJECT_VK=494;
    public static final int OFF_VK=495;
    public static final int OLD_VK=496;
    public static final int ONLY_VK=497;
    public static final int OPEN_VK=498;
    public static final int ORADATA_VK=499;
    public static final int ORDER_BY_ELEMENT=500;
    public static final int ORDER_BY_ELEMENTS=501;
    public static final int ORDINALITY_VK=502;
    public static final int OUT_VK=503;
    public static final int OVERRIDING_VK=504;
    public static final int OVER_VK=505;
    public static final int PACKAGE_NAME=506;
    public static final int PACKAGE_VK=507;
    public static final int PARALLEL_ENABLE_VK=508;
    public static final int PARAMETER=509;
    public static final int PARAMETERS=510;
    public static final int PARAMETERS_VK=511;
    public static final int PARAMETER_NAME=512;
    public static final int PARENT_VK=513;
    public static final int PARTITION_VK=514;
    public static final int PASSING_VK=515;
    public static final int PERCENT_FOUND_VK=517;
    public static final int PERCENT_ISOPEN_VK=518;
    public static final int PERCENT_NOTFOUND_VK=519;
    public static final int PERCENT_ROWCOUNT_VK=520;
    public static final int PERCENT_ROWTYPE_VK=521;
    public static final int PERCENT_TYPE_VK=522;
    public static final int PIPELINED_VK=524;
    public static final int PIVOT_ALIAS=525;
    public static final int PIVOT_ELEMENT=526;
    public static final int PIVOT_IN_ELEMENT=527;
    public static final int PIVOT_VK=528;
    public static final int PLS_INTEGER_VK=543;
    public static final int POSITIVEN_VK=545;
    public static final int POSITIVE_VK=546;
    public static final int PRAGMA_DECLARE=547;
    public static final int PRAGMA_VK=548;
    public static final int PRECEDING_VK=549;
    public static final int PRECISION=550;
    public static final int PRECISION_VK=551;
    public static final int PREDICTION_FUNCTION=552;
    public static final int PROCEDURE_NAME=553;
    public static final int PROCEDURE_SPEC=554;
    public static final int QUERY_NAME=556;
    public static final int RAISE_VK=557;
    public static final int RANGE_VK=558;
    public static final int RAW_VK=559;
    public static final int READ_VK=560;
    public static final int REAL_VK=561;
    public static final int RECORD_NAME=562;
    public static final int RECORD_TYPE_DECLARE=563;
    public static final int RECORD_VAR_DECLARE=564;
    public static final int REFERENCE_MODEL_NAME=565;
    public static final int REFERENCE_VK=566;
    public static final int REFERENCING_VK=567;
    public static final int REF_VK=568;
    public static final int REJECT_VK=570;
    public static final int RELIES_ON_VK=571;
    public static final int RENAME_VK=572;
    public static final int REPLACE_VK=573;
    public static final int RESPECT_VK=574;
    public static final int RESTRICT_REFERENCES_VK=575;
    public static final int RESULT_CACHE_VK=576;
    public static final int RETURN_VK=577;
    public static final int REUSE_VK=578;
    public static final int REVERSE_VK=579;
    public static final int RIGHT_VK=582;
    public static final int ROLLBACK_SEGMENT_NAME=583;
    public static final int ROLLBACK_VK=584;
    public static final int ROLLUP_VK=585;
    public static final int ROUTINE_CALL=586;
    public static final int ROUTINE_NAME=587;
    public static final int ROWID_VK=588;
    public static final int ROWS_VK=589;
    public static final int ROW_VK=590;
    public static final int RULES_VK=591;
    public static final int SAMPLE_VK=592;
    public static final int SAVEPOINT_NAME=593;
    public static final int SAVEPOINT_VK=594;
    public static final int SCHEMACHECK_VK=595;
    public static final int SCHEMA_NAME=596;
    public static final int SCHEMA_VK=597;
    public static final int SCN_VK=598;
    public static final int SEARCHED_CASE=599;
    public static final int SEARCH_VK=600;
    public static final int SECOND_VK=601;
    public static final int SEED_VK=602;
    public static final int SELECTED_TABLEVIEW=603;
    public static final int SELECT_BASED_FOR=604;
    public static final int SELECT_ITEM=605;
    public static final int SELECT_LIST=606;
    public static final int SELECT_MODE=607;
    public static final int SELECT_STATEMENT=608;
    public static final int SELF_VK=609;
    public static final int SEQUENCE_NAME=611;
    public static final int SEQUENCE_VK=612;
    public static final int SEQUENTIAL_VK=613;
    public static final int SERIALIZABLE_VK=614;
    public static final int SERIALLY_REUSABLE_VK=615;
    public static final int SERVERERROR_VK=616;
    public static final int SESSIONTIMEZONE_VK=617;
    public static final int SET_CONSTRAINT=618;
    public static final int SET_SERVEROUTPUT=619;
    public static final int SET_TRANSACTION=620;
    public static final int SET_VK=621;
    public static final int SHOW_VK=622;
    public static final int SHUTDOWN_VK=623;
    public static final int SIBLINGS_VK=624;
    public static final int SIGNTYPE_VK=625;
    public static final int SIMPLE_BOUND=626;
    public static final int SIMPLE_CASE=627;
    public static final int SIMPLE_DML=628;
    public static final int SIMPLE_INTEGER_VK=629;
    public static final int SINGLE_TABLE_MODE=630;
    public static final int SINGLE_VK=631;
    public static final int SKIP_VK=632;
    public static final int SMALLINT_VK=633;
    public static final int SOME_VK=635;
    public static final int SPECIFICATION_VK=636;
    public static final int SQLDATA_VK=701;
    public static final int SQL_SCRIPT=702;
    public static final int STANDALONE_VK=703;
    public static final int STANDARD_FUNCTION=704;
    public static final int STARTUP_VK=705;
    public static final int STATEMENTS=706;
    public static final int STATIC_RETURNING=707;
    public static final int STATIC_VK=708;
    public static final int STATISTICS_VK=709;
    public static final int STREAMING_CLAUSE=710;
    public static final int STRING_VK=711;
    public static final int SUBMULTISET_VK=712;
    public static final int SUBPARTITION_VK=713;
    public static final int SUBQUERY=714;
    public static final int SUBTYPE_DECLARE=715;
    public static final int SUSPEND_VK=716;
    public static final int TABLEVIEW_NAME=717;
    public static final int TABLE_ELEMENT=718;
    public static final int TABLE_EXPRESSION=719;
    public static final int TABLE_REF=720;
    public static final int TABLE_REF_ELEMENT=721;
    public static final int TABLE_TYPE_DECLARE=722;
    public static final int TABLE_VAR_DECLARE=723;
    public static final int TABLE_VAR_NAME=724;
    public static final int THREE_DOTS=725;
    public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=726;
    public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=727;
    public static final int TIMESTAMP_UNCONSTRAINED_VK=728;
    public static final int TIMESTAMP_VK=729;
    public static final int TIMEZONE_ABBR_VK=730;
    public static final int TIMEZONE_HOUR_VK=731;
    public static final int TIMEZONE_MINUTE_VK=732;
    public static final int TIMEZONE_REGION_VK=733;
    public static final int TIME_VK=734;
    public static final int TRAILING_VK=735;
    public static final int TRANSLATE_VK=736;
    public static final int TREAT_VK=737;
    public static final int TRIGGER_NAME=738;
    public static final int TRIM_VK=739;
    public static final int TRUNCATE_VK=740;
    public static final int TYPE_BODY_ELEMENTS=741;
    public static final int TYPE_NAME=742;
    public static final int TYPE_VK=743;
    public static final int UNARY_OPERATOR=744;
    public static final int UNBOUNDED_VK=745;
    public static final int UNDER_VK=746;
    public static final int UNLIMITED_VK=747;
    public static final int UNPIVOT_IN_ELEMENT=748;
    public static final int UNPIVOT_VK=749;
    public static final int UNTIL_VK=751;
    public static final int UPDATED_VK=752;
    public static final int UPSERT_VK=753;
    public static final int UROWID_VK=754;
    public static final int USING_MODE=755;
    public static final int VALIDATE_VK=756;
    public static final int VALUES_BOUND=757;
    public static final int VALUE_VK=758;
    public static final int VARCHAR2_VK=759;
    public static final int VARCHAR_VK=760;
    public static final int VARIABLE_DECLARE=761;
    public static final int VARIABLE_NAME=762;
    public static final int VARR_ARRAY_DEF=763;
    public static final int VECTOR_EXPR=764;
    public static final int VERSIONS_VK=765;
    public static final int VERSION_VK=766;
    public static final int WAIT_VK=768;
    public static final int WELLFORMED_VK=769;
    public static final int WHILE_LOOP=770;
    public static final int WITHIN_VK=771;
    public static final int WORK_VK=772;
    public static final int WRITE_VK=773;
    public static final int XMLAGG_VK=774;
    public static final int XMLATTRIBUTES_VK=775;
    public static final int XMLCAST_VK=776;
    public static final int XMLCOLATTVAL_VK=777;
    public static final int XMLELEMENT_VK=778;
    public static final int XMLEXISTS_VK=779;
    public static final int XMLFOREST_VK=780;
    public static final int XMLNAMESPACES_VK=781;
    public static final int XMLPARSE_VK=782;
    public static final int XMLPI_VK=783;
    public static final int XMLQUERY_VK=784;
    public static final int XMLROOT_VK=785;
    public static final int XMLSERIALIZE_VK=786;
    public static final int XMLTABLE_VK=787;
    public static final int XML_ALIAS=788;
    public static final int XML_COLUMN=789;
    public static final int XML_COLUMN_NAME=790;
    public static final int XML_ELEMENT=791;
    public static final int XML_VK=792;
    public static final int YEAR_VK=793;
    public static final int YES_VK=794;
    public static final int YMINTERVAL_UNCONSTRAINED_VK=795;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators
    public PLSQLParser gPLSQLParser;
    public PLSQLParser gParent;


    public PLSQLParser_PLSQL_DMLParser(TokenStream input, PLSQLParser gPLSQLParser) {
        this(input, new RecognizerSharedState(), gPLSQLParser);
    }
    public PLSQLParser_PLSQL_DMLParser(TokenStream input, RecognizerSharedState state, PLSQLParser gPLSQLParser) {
        super(input, state);
        this.gPLSQLParser = gPLSQLParser;
        gParent = gPLSQLParser;
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return PLSQLParser.tokenNames; }
    public String getGrammarFileName() { return "PLSQL_DMLParser.g"; }


        private boolean isTableAlias() {
            String lt1 = input.LT(1).getText().toLowerCase();
            String lt2 = "";
            if (input.LT(2).getText() != null){
                lt2 = input.LT(2).getText().toLowerCase();
            }

    //        if (lt1.equals("as")){
    //            return true;
    //        }

            if ((lt1.equals("partition") && lt2.equals("by")) || lt1.equals("cross")
                    || lt1.equals("natural") || lt1.equals("inner")
                    || lt1.equals("join")
                    || ((lt1.equals("full") || lt1.equals("left") || lt1.equals("right")) && (lt2.equals("outer") || lt2.equals("join")))) {
                return false;
            }
            return true;
        }

        private boolean isStandardPredictionFunction(String originalFunctionName) {
            String functionName = originalFunctionName.toLowerCase();
            if (functionName.equals("prediction")
                    || functionName.equals("prediction_bounds")
                    || functionName.equals("prediction_cost")
                    || functionName.equals("prediction_details")
                    || functionName.equals("prediction_probability")
                    || functionName.equals("prediction_set")) {
                return true;
            }
            return false;
        }

        private boolean enablesWithinOrOverClause(String originalFunctionName) {
            String functionName = originalFunctionName.toLowerCase();
            if (functionName.equals("cume_dist")
                    || functionName.equals("dense_rank")
                    || functionName.equals("listagg")
                    || functionName.equals("percent_rank")
                    || functionName.equals("percentile_cont")
                    || functionName.equals("percentile_disc")
                    || functionName.equals("rank")) {
                return true;
            }
            return false;
        }

        private boolean enablesUsingClause(String originalFunctionName) {
            String functionName = originalFunctionName.toLowerCase();
            if (functionName.startsWith("cluster_")
                    || functionName.startsWith("feature_")) {
                return true;
            }
            return false;
        }

        private boolean enablesOverClause(String originalFunctionName) {
            String functionName = originalFunctionName.toLowerCase();
            if (functionName.equals("avg") || functionName.equals("corr")
                    || functionName.equals("lag") || functionName.equals("lead")
                    || functionName.equals("max") || functionName.equals("median")
                    || functionName.equals("min") || functionName.equals("ntile")
                    || functionName.equals("ratio_to_report")
                    || functionName.equals("row_number")
                    || functionName.equals("sum")
                    || functionName.equals("variance")
                    || functionName.startsWith("regr_")
                    || functionName.startsWith("stddev")
                    || functionName.startsWith("var_")
                    || functionName.startsWith("covar_")) {
                return true;
            }
            return false;
        }


    public static class explain_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "explain_statement"
    // PLSQL_DMLParser.g:199:1: explain_statement : explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement ) -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? ) ;
    public final explain_statement_return explain_statement() throws RecognitionException {
        explain_statement_return retval = new explain_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUALS_OP5=null;
        PLSQLParser_PLSQLKeys.explain_key_return explain_key1 =null;

        PLSQLParser_PLSQLKeys.plan_key_return plan_key2 =null;

        PLSQLParser_PLSQLKeys.set_key_return set_key3 =null;

        PLSQLParser_PLSQLKeys.statement_id_key_return statement_id_key4 =null;

        PLSQLParser_PLSQLCommons.quoted_string_return quoted_string6 =null;

        PLSQLParser_PLSQLKeys.into_key_return into_key7 =null;

        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name8 =null;

        PLSQLParser_PLSQLKeys.for_key_return for_key9 =null;

        select_statement_return select_statement10 =null;

        update_statement_return update_statement11 =null;

        delete_statement_return delete_statement12 =null;

        insert_statement_return insert_statement13 =null;

        merge_statement_return merge_statement14 =null;


        Object EQUALS_OP5_tree=null;
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_update_statement=new RewriteRuleSubtreeStream(adaptor,"rule update_statement");
        RewriteRuleSubtreeStream stream_insert_statement=new RewriteRuleSubtreeStream(adaptor,"rule insert_statement");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        RewriteRuleSubtreeStream stream_delete_statement=new RewriteRuleSubtreeStream(adaptor,"rule delete_statement");
        RewriteRuleSubtreeStream stream_plan_key=new RewriteRuleSubtreeStream(adaptor,"rule plan_key");
        RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
        RewriteRuleSubtreeStream stream_into_key=new RewriteRuleSubtreeStream(adaptor,"rule into_key");
        RewriteRuleSubtreeStream stream_explain_key=new RewriteRuleSubtreeStream(adaptor,"rule explain_key");
        RewriteRuleSubtreeStream stream_statement_id_key=new RewriteRuleSubtreeStream(adaptor,"rule statement_id_key");
        RewriteRuleSubtreeStream stream_merge_statement=new RewriteRuleSubtreeStream(adaptor,"rule merge_statement");
        RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            // PLSQL_DMLParser.g:200:5: ( explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement ) -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? ) )
            // PLSQL_DMLParser.g:200:10: explain_key plan_key ( set_key statement_id_key EQUALS_OP quoted_string )? ( into_key tableview_name )? for_key ( select_statement | update_statement | delete_statement | insert_statement | merge_statement )
            {
            pushFollow(FOLLOW_explain_key_in_explain_statement698);
            explain_key1=gPLSQLParser.explain_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_explain_key.add(explain_key1.getTree());

            pushFollow(FOLLOW_plan_key_in_explain_statement700);
            plan_key2=gPLSQLParser.plan_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_plan_key.add(plan_key2.getTree());

            // PLSQL_DMLParser.g:201:10: ( set_key statement_id_key EQUALS_OP quoted_string )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // PLSQL_DMLParser.g:201:11: set_key statement_id_key EQUALS_OP quoted_string
                    {
                    pushFollow(FOLLOW_set_key_in_explain_statement712);
                    set_key3=gPLSQLParser.set_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_set_key.add(set_key3.getTree());

                    pushFollow(FOLLOW_statement_id_key_in_explain_statement714);
                    statement_id_key4=gPLSQLParser.statement_id_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement_id_key.add(statement_id_key4.getTree());

                    EQUALS_OP5=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_explain_statement716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP5);


                    pushFollow(FOLLOW_quoted_string_in_explain_statement718);
                    quoted_string6=gPLSQLParser.quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string6.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:202:10: ( into_key tableview_name )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==SQL92_RESERVED_INTO) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // PLSQL_DMLParser.g:202:11: into_key tableview_name
                    {
                    pushFollow(FOLLOW_into_key_in_explain_statement732);
                    into_key7=gPLSQLParser.into_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_into_key.add(into_key7.getTree());

                    pushFollow(FOLLOW_tableview_name_in_explain_statement734);
                    tableview_name8=gPLSQLParser.tableview_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name8.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_for_key_in_explain_statement747);
            for_key9=gPLSQLParser.for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key9.getTree());

            // PLSQL_DMLParser.g:204:10: ( select_statement | update_statement | delete_statement | insert_statement | merge_statement )
            int alt5=5;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==LEFT_PAREN||LA5_0==SQL92_RESERVED_SELECT||LA5_0==SQL92_RESERVED_WITH) ) {
                alt5=1;
            }
            else if ( (LA5_0==SQL92_RESERVED_UPDATE) ) {
                alt5=2;
            }
            else if ( (LA5_0==SQL92_RESERVED_DELETE) ) {
                alt5=3;
            }
            else if ( (LA5_0==SQL92_RESERVED_INSERT) ) {
                alt5=4;
            }
            else if ( (LA5_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("merge")))) {
                alt5=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }
            switch (alt5) {
                case 1 :
                    // PLSQL_DMLParser.g:204:12: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_explain_statement760);
                    select_statement10=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_statement.add(select_statement10.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:205:12: update_statement
                    {
                    pushFollow(FOLLOW_update_statement_in_explain_statement773);
                    update_statement11=update_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_update_statement.add(update_statement11.getTree());

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:206:12: delete_statement
                    {
                    pushFollow(FOLLOW_delete_statement_in_explain_statement786);
                    delete_statement12=delete_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_delete_statement.add(delete_statement12.getTree());

                    }
                    break;
                case 4 :
                    // PLSQL_DMLParser.g:207:12: insert_statement
                    {
                    pushFollow(FOLLOW_insert_statement_in_explain_statement799);
                    insert_statement13=insert_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insert_statement.add(insert_statement13.getTree());

                    }
                    break;
                case 5 :
                    // PLSQL_DMLParser.g:208:12: merge_statement
                    {
                    pushFollow(FOLLOW_merge_statement_in_explain_statement812);
                    merge_statement14=merge_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_merge_statement.add(merge_statement14.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: merge_statement, insert_statement, update_statement, delete_statement, select_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 210:10: -> ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? )
            {
                // PLSQL_DMLParser.g:210:13: ^( EXPLAIN_STATEMENT ( select_statement )? ( update_statement )? ( delete_statement )? ( insert_statement )? ( merge_statement )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPLAIN_STATEMENT, "EXPLAIN_STATEMENT")
                , root_1);

                // PLSQL_DMLParser.g:210:33: ( select_statement )?
                if ( stream_select_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_select_statement.nextTree());

                }
                stream_select_statement.reset();

                // PLSQL_DMLParser.g:210:51: ( update_statement )?
                if ( stream_update_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_update_statement.nextTree());

                }
                stream_update_statement.reset();

                // PLSQL_DMLParser.g:210:69: ( delete_statement )?
                if ( stream_delete_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_delete_statement.nextTree());

                }
                stream_delete_statement.reset();

                // PLSQL_DMLParser.g:210:87: ( insert_statement )?
                if ( stream_insert_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_insert_statement.nextTree());

                }
                stream_insert_statement.reset();

                // PLSQL_DMLParser.g:210:105: ( merge_statement )?
                if ( stream_merge_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_merge_statement.nextTree());

                }
                stream_merge_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "explain_statement"


    public static class select_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_statement"
    // PLSQL_DMLParser.g:213:1: select_statement : ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )* -> ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) ;
    public final select_statement_return select_statement() throws RecognitionException {
        select_statement_return retval = new select_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        subquery_factoring_clause_return subquery_factoring_clause15 =null;

        subquery_return subquery16 =null;

        for_update_clause_return for_update_clause17 =null;

        order_by_clause_return order_by_clause18 =null;


        RewriteRuleSubtreeStream stream_subquery_factoring_clause=new RewriteRuleSubtreeStream(adaptor,"rule subquery_factoring_clause");
        RewriteRuleSubtreeStream stream_order_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule order_by_clause");
        RewriteRuleSubtreeStream stream_for_update_clause=new RewriteRuleSubtreeStream(adaptor,"rule for_update_clause");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            // PLSQL_DMLParser.g:214:5: ( ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )* -> ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) )
            // PLSQL_DMLParser.g:214:10: ( subquery_factoring_clause )? subquery ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )*
            {
            // PLSQL_DMLParser.g:214:10: ( subquery_factoring_clause )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==SQL92_RESERVED_WITH) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // PLSQL_DMLParser.g:214:10: subquery_factoring_clause
                    {
                    pushFollow(FOLLOW_subquery_factoring_clause_in_select_statement873);
                    subquery_factoring_clause15=subquery_factoring_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery_factoring_clause.add(subquery_factoring_clause15.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_subquery_in_select_statement884);
            subquery16=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subquery.add(subquery16.getTree());

            // PLSQL_DMLParser.g:216:9: ( for_update_clause | ( order_key ( siblings_key )? by_key )=> order_by_clause )*
            loop7:
            do {
                int alt7=3;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==SQL92_RESERVED_FOR) ) {
                    alt7=1;
                }
                else if ( (LA7_0==SQL92_RESERVED_ORDER) && (synpred1_PLSQL_DMLParser())) {
                    alt7=2;
                }


                switch (alt7) {
            	case 1 :
            	    // PLSQL_DMLParser.g:216:10: for_update_clause
            	    {
            	    pushFollow(FOLLOW_for_update_clause_in_select_statement895);
            	    for_update_clause17=for_update_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_for_update_clause.add(for_update_clause17.getTree());

            	    }
            	    break;
            	case 2 :
            	    // PLSQL_DMLParser.g:216:28: ( order_key ( siblings_key )? by_key )=> order_by_clause
            	    {
            	    pushFollow(FOLLOW_order_by_clause_in_select_statement907);
            	    order_by_clause18=order_by_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_order_by_clause.add(order_by_clause18.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            // AST REWRITE
            // elements: order_by_clause, for_update_clause, subquery, subquery_factoring_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 217:9: -> ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
            {
                // PLSQL_DMLParser.g:217:12: ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECT_STATEMENT, "SELECT_STATEMENT")
                , root_1);

                // PLSQL_DMLParser.g:217:31: ( subquery_factoring_clause )?
                if ( stream_subquery_factoring_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_subquery_factoring_clause.nextTree());

                }
                stream_subquery_factoring_clause.reset();

                adaptor.addChild(root_1, stream_subquery.nextTree());

                // PLSQL_DMLParser.g:217:67: ( for_update_clause )*
                while ( stream_for_update_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_update_clause.nextTree());

                }
                stream_for_update_clause.reset();

                // PLSQL_DMLParser.g:217:86: ( order_by_clause )*
                while ( stream_order_by_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_order_by_clause.nextTree());

                }
                stream_order_by_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "select_statement"


    public static class subquery_factoring_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subquery_factoring_clause"
    // PLSQL_DMLParser.g:221:1: subquery_factoring_clause : with_key ^ factoring_element ( COMMA ! factoring_element )* ;
    public final subquery_factoring_clause_return subquery_factoring_clause() throws RecognitionException {
        subquery_factoring_clause_return retval = new subquery_factoring_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA21=null;
        PLSQLParser_PLSQLKeys.with_key_return with_key19 =null;

        factoring_element_return factoring_element20 =null;

        factoring_element_return factoring_element22 =null;


        Object COMMA21_tree=null;

        try {
            // PLSQL_DMLParser.g:222:5: ( with_key ^ factoring_element ( COMMA ! factoring_element )* )
            // PLSQL_DMLParser.g:222:10: with_key ^ factoring_element ( COMMA ! factoring_element )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_with_key_in_subquery_factoring_clause957);
            with_key19=gPLSQLParser.with_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(with_key19.getTree(), root_0);

            pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause960);
            factoring_element20=factoring_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, factoring_element20.getTree());

            // PLSQL_DMLParser.g:222:38: ( COMMA ! factoring_element )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // PLSQL_DMLParser.g:222:39: COMMA ! factoring_element
            	    {
            	    COMMA21=(Token)match(input,COMMA,FOLLOW_COMMA_in_subquery_factoring_clause963); if (state.failed) return retval;

            	    pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause966);
            	    factoring_element22=factoring_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, factoring_element22.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subquery_factoring_clause"


    public static class factoring_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "factoring_element"
    // PLSQL_DMLParser.g:225:1: factoring_element : query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )? -> ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? ) ;
    public final factoring_element_return factoring_element() throws RecognitionException {
        factoring_element_return retval = new factoring_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN24=null;
        Token COMMA26=null;
        Token RIGHT_PAREN28=null;
        Token LEFT_PAREN30=null;
        Token RIGHT_PAREN33=null;
        PLSQLParser_PLSQLCommons.query_name_return query_name23 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name25 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name27 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key29 =null;

        subquery_return subquery31 =null;

        order_by_clause_return order_by_clause32 =null;

        search_clause_return search_clause34 =null;

        cycle_clause_return cycle_clause35 =null;


        Object LEFT_PAREN24_tree=null;
        Object COMMA26_tree=null;
        Object RIGHT_PAREN28_tree=null;
        Object LEFT_PAREN30_tree=null;
        Object RIGHT_PAREN33_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_order_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule order_by_clause");
        RewriteRuleSubtreeStream stream_cycle_clause=new RewriteRuleSubtreeStream(adaptor,"rule cycle_clause");
        RewriteRuleSubtreeStream stream_search_clause=new RewriteRuleSubtreeStream(adaptor,"rule search_clause");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_query_name=new RewriteRuleSubtreeStream(adaptor,"rule query_name");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            // PLSQL_DMLParser.g:226:5: ( query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )? -> ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? ) )
            // PLSQL_DMLParser.g:226:10: query_name ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? as_key LEFT_PAREN subquery ( order_by_clause )? RIGHT_PAREN ( search_clause )? ( cycle_clause )?
            {
            pushFollow(FOLLOW_query_name_in_factoring_element988);
            query_name23=gPLSQLParser.query_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_query_name.add(query_name23.getTree());

            // PLSQL_DMLParser.g:226:21: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==LEFT_PAREN) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // PLSQL_DMLParser.g:226:22: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN24=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_factoring_element991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN24);


                    pushFollow(FOLLOW_column_name_in_factoring_element993);
                    column_name25=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name25.getTree());

                    // PLSQL_DMLParser.g:226:45: ( COMMA column_name )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==COMMA) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:226:46: COMMA column_name
                    	    {
                    	    COMMA26=(Token)match(input,COMMA,FOLLOW_COMMA_in_factoring_element996); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA26);


                    	    pushFollow(FOLLOW_column_name_in_factoring_element998);
                    	    column_name27=gPLSQLParser.column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name27.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);


                    RIGHT_PAREN28=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_factoring_element1002); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN28);


                    }
                    break;

            }


            pushFollow(FOLLOW_as_key_in_factoring_element1006);
            as_key29=gPLSQLParser.as_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_as_key.add(as_key29.getTree());

            LEFT_PAREN30=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_factoring_element1008); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN30);


            pushFollow(FOLLOW_subquery_in_factoring_element1010);
            subquery31=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subquery.add(subquery31.getTree());

            // PLSQL_DMLParser.g:226:107: ( order_by_clause )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==SQL92_RESERVED_ORDER) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // PLSQL_DMLParser.g:226:107: order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_factoring_element1012);
                    order_by_clause32=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_order_by_clause.add(order_by_clause32.getTree());

                    }
                    break;

            }


            RIGHT_PAREN33=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_factoring_element1015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN33);


            // PLSQL_DMLParser.g:227:10: ( search_clause )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==REGULAR_ID) ) {
                int LA12_1 = input.LA(2);

                if ( (LA12_1==REGULAR_ID) ) {
                    int LA12_3 = input.LA(3);

                    if ( (LA12_3==REGULAR_ID) ) {
                        int LA12_4 = input.LA(4);

                        if ( (LA12_4==SQL92_RESERVED_BY) ) {
                            alt12=1;
                        }
                    }
                }
            }
            switch (alt12) {
                case 1 :
                    // PLSQL_DMLParser.g:227:10: search_clause
                    {
                    pushFollow(FOLLOW_search_clause_in_factoring_element1026);
                    search_clause34=search_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_search_clause.add(search_clause34.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:228:10: ( cycle_clause )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==REGULAR_ID) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // PLSQL_DMLParser.g:228:10: cycle_clause
                    {
                    pushFollow(FOLLOW_cycle_clause_in_factoring_element1038);
                    cycle_clause35=cycle_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cycle_clause.add(cycle_clause35.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: query_name, search_clause, subquery, cycle_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 229:9: -> ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? )
            {
                // PLSQL_DMLParser.g:229:12: ^( FACTORING query_name subquery ( search_clause )? ( cycle_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FACTORING, "FACTORING")
                , root_1);

                adaptor.addChild(root_1, stream_query_name.nextTree());

                adaptor.addChild(root_1, stream_subquery.nextTree());

                // PLSQL_DMLParser.g:229:44: ( search_clause )?
                if ( stream_search_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_search_clause.nextTree());

                }
                stream_search_clause.reset();

                // PLSQL_DMLParser.g:229:59: ( cycle_clause )?
                if ( stream_cycle_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_cycle_clause.nextTree());

                }
                stream_cycle_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "factoring_element"


    public static class search_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "search_clause"
    // PLSQL_DMLParser.g:232:1: search_clause : search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name ;
    public final search_clause_return search_clause() throws RecognitionException {
        search_clause_return retval = new search_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA48=null;
        PLSQLParser_PLSQLKeys.search_key_return search_key36 =null;

        PLSQLParser_PLSQLKeys.depth_key_return depth_key37 =null;

        PLSQLParser_PLSQLKeys.breadth_key_return breadth_key38 =null;

        PLSQLParser_PLSQLKeys.first_key_return first_key39 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key40 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name41 =null;

        PLSQLParser_PLSQLKeys.asc_key_return asc_key42 =null;

        PLSQLParser_PLSQLKeys.desc_key_return desc_key43 =null;

        PLSQLParser_PLSQLKeys.nulls_key_return nulls_key44 =null;

        PLSQLParser_PLSQLKeys.first_key_return first_key45 =null;

        PLSQLParser_PLSQLKeys.nulls_key_return nulls_key46 =null;

        PLSQLParser_PLSQLKeys.last_key_return last_key47 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name49 =null;

        PLSQLParser_PLSQLKeys.asc_key_return asc_key50 =null;

        PLSQLParser_PLSQLKeys.desc_key_return desc_key51 =null;

        PLSQLParser_PLSQLKeys.nulls_key_return nulls_key52 =null;

        PLSQLParser_PLSQLKeys.first_key_return first_key53 =null;

        PLSQLParser_PLSQLKeys.nulls_key_return nulls_key54 =null;

        PLSQLParser_PLSQLKeys.last_key_return last_key55 =null;

        PLSQLParser_PLSQLKeys.set_key_return set_key56 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name57 =null;


        Object COMMA48_tree=null;

        try {
            // PLSQL_DMLParser.g:233:5: ( search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name )
            // PLSQL_DMLParser.g:233:10: search_key ( depth_key | breadth_key ) first_key by_key column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )* set_key column_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_search_key_in_search_clause1083);
            search_key36=gPLSQLParser.search_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, search_key36.getTree());

            // PLSQL_DMLParser.g:233:21: ( depth_key | breadth_key )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==REGULAR_ID) ) {
                int LA14_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("depth"))) ) {
                    alt14=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("breadth"))) ) {
                    alt14=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // PLSQL_DMLParser.g:233:23: depth_key
                    {
                    pushFollow(FOLLOW_depth_key_in_search_clause1087);
                    depth_key37=gPLSQLParser.depth_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, depth_key37.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:233:35: breadth_key
                    {
                    pushFollow(FOLLOW_breadth_key_in_search_clause1091);
                    breadth_key38=gPLSQLParser.breadth_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, breadth_key38.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_first_key_in_search_clause1095);
            first_key39=gPLSQLParser.first_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, first_key39.getTree());

            pushFollow(FOLLOW_by_key_in_search_clause1097);
            by_key40=gPLSQLParser.by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, by_key40.getTree());

            pushFollow(FOLLOW_column_name_in_search_clause1112);
            column_name41=gPLSQLParser.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name41.getTree());

            // PLSQL_DMLParser.g:234:26: ( asc_key )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==SQL92_RESERVED_ASC) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // PLSQL_DMLParser.g:234:26: asc_key
                    {
                    pushFollow(FOLLOW_asc_key_in_search_clause1114);
                    asc_key42=gPLSQLParser.asc_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asc_key42.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:234:36: ( desc_key )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==SQL92_RESERVED_DESC) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // PLSQL_DMLParser.g:234:36: desc_key
                    {
                    pushFollow(FOLLOW_desc_key_in_search_clause1118);
                    desc_key43=gPLSQLParser.desc_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, desc_key43.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:234:47: ( nulls_key first_key )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
                int LA17_1 = input.LA(2);

                if ( (LA17_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
                    int LA17_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("nulls"))) ) {
                        alt17=1;
                    }
                }
            }
            switch (alt17) {
                case 1 :
                    // PLSQL_DMLParser.g:234:48: nulls_key first_key
                    {
                    pushFollow(FOLLOW_nulls_key_in_search_clause1123);
                    nulls_key44=gPLSQLParser.nulls_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nulls_key44.getTree());

                    pushFollow(FOLLOW_first_key_in_search_clause1125);
                    first_key45=gPLSQLParser.first_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, first_key45.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:234:70: ( nulls_key last_key )?
            int alt18=2;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    // PLSQL_DMLParser.g:234:71: nulls_key last_key
                    {
                    pushFollow(FOLLOW_nulls_key_in_search_clause1130);
                    nulls_key46=gPLSQLParser.nulls_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nulls_key46.getTree());

                    pushFollow(FOLLOW_last_key_in_search_clause1132);
                    last_key47=gPLSQLParser.last_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, last_key47.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:235:14: ( COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )? )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==COMMA) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // PLSQL_DMLParser.g:235:15: COMMA column_name ( asc_key )? ( desc_key )? ( nulls_key first_key )? ( nulls_key last_key )?
            	    {
            	    COMMA48=(Token)match(input,COMMA,FOLLOW_COMMA_in_search_clause1150); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA48_tree = 
            	    (Object)adaptor.create(COMMA48)
            	    ;
            	    adaptor.addChild(root_0, COMMA48_tree);
            	    }

            	    pushFollow(FOLLOW_column_name_in_search_clause1152);
            	    column_name49=gPLSQLParser.column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name49.getTree());

            	    // PLSQL_DMLParser.g:235:33: ( asc_key )?
            	    int alt19=2;
            	    int LA19_0 = input.LA(1);

            	    if ( (LA19_0==SQL92_RESERVED_ASC) ) {
            	        alt19=1;
            	    }
            	    switch (alt19) {
            	        case 1 :
            	            // PLSQL_DMLParser.g:235:33: asc_key
            	            {
            	            pushFollow(FOLLOW_asc_key_in_search_clause1154);
            	            asc_key50=gPLSQLParser.asc_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, asc_key50.getTree());

            	            }
            	            break;

            	    }


            	    // PLSQL_DMLParser.g:235:43: ( desc_key )?
            	    int alt20=2;
            	    int LA20_0 = input.LA(1);

            	    if ( (LA20_0==SQL92_RESERVED_DESC) ) {
            	        alt20=1;
            	    }
            	    switch (alt20) {
            	        case 1 :
            	            // PLSQL_DMLParser.g:235:43: desc_key
            	            {
            	            pushFollow(FOLLOW_desc_key_in_search_clause1158);
            	            desc_key51=gPLSQLParser.desc_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, desc_key51.getTree());

            	            }
            	            break;

            	    }


            	    // PLSQL_DMLParser.g:235:54: ( nulls_key first_key )?
            	    int alt21=2;
            	    int LA21_0 = input.LA(1);

            	    if ( (LA21_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
            	        int LA21_1 = input.LA(2);

            	        if ( (LA21_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
            	            int LA21_3 = input.LA(3);

            	            if ( ((input.LT(1).getText().equalsIgnoreCase("nulls"))) ) {
            	                alt21=1;
            	            }
            	        }
            	    }
            	    switch (alt21) {
            	        case 1 :
            	            // PLSQL_DMLParser.g:235:55: nulls_key first_key
            	            {
            	            pushFollow(FOLLOW_nulls_key_in_search_clause1163);
            	            nulls_key52=gPLSQLParser.nulls_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nulls_key52.getTree());

            	            pushFollow(FOLLOW_first_key_in_search_clause1165);
            	            first_key53=gPLSQLParser.first_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, first_key53.getTree());

            	            }
            	            break;

            	    }


            	    // PLSQL_DMLParser.g:235:77: ( nulls_key last_key )?
            	    int alt22=2;
            	    alt22 = dfa22.predict(input);
            	    switch (alt22) {
            	        case 1 :
            	            // PLSQL_DMLParser.g:235:78: nulls_key last_key
            	            {
            	            pushFollow(FOLLOW_nulls_key_in_search_clause1170);
            	            nulls_key54=gPLSQLParser.nulls_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nulls_key54.getTree());

            	            pushFollow(FOLLOW_last_key_in_search_clause1172);
            	            last_key55=gPLSQLParser.last_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, last_key55.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            pushFollow(FOLLOW_set_key_in_search_clause1192);
            set_key56=gPLSQLParser.set_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, set_key56.getTree());

            pushFollow(FOLLOW_column_name_in_search_clause1194);
            column_name57=gPLSQLParser.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name57.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "search_clause"


    public static class cycle_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cycle_clause"
    // PLSQL_DMLParser.g:239:1: cycle_clause : cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression ;
    public final cycle_clause_return cycle_clause() throws RecognitionException {
        cycle_clause_return retval = new cycle_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA60=null;
        PLSQLParser_PLSQLKeys.cycle_key_return cycle_key58 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name59 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name61 =null;

        PLSQLParser_PLSQLKeys.set_key_return set_key62 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name63 =null;

        PLSQLParser_PLSQLKeys.to_key_return to_key64 =null;

        expression_return expression65 =null;

        PLSQLParser_PLSQLKeys.default_key_return default_key66 =null;

        expression_return expression67 =null;


        Object COMMA60_tree=null;

        try {
            // PLSQL_DMLParser.g:240:5: ( cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression )
            // PLSQL_DMLParser.g:240:10: cycle_key column_name ( COMMA column_name )* set_key column_name to_key expression default_key expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cycle_key_in_cycle_clause1214);
            cycle_key58=gPLSQLParser.cycle_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cycle_key58.getTree());

            pushFollow(FOLLOW_column_name_in_cycle_clause1216);
            column_name59=gPLSQLParser.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name59.getTree());

            // PLSQL_DMLParser.g:240:32: ( COMMA column_name )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMA) ) {
                    alt24=1;
                }


                switch (alt24) {
            	case 1 :
            	    // PLSQL_DMLParser.g:240:34: COMMA column_name
            	    {
            	    COMMA60=(Token)match(input,COMMA,FOLLOW_COMMA_in_cycle_clause1220); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA60_tree = 
            	    (Object)adaptor.create(COMMA60)
            	    ;
            	    adaptor.addChild(root_0, COMMA60_tree);
            	    }

            	    pushFollow(FOLLOW_column_name_in_cycle_clause1222);
            	    column_name61=gPLSQLParser.column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name61.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);


            pushFollow(FOLLOW_set_key_in_cycle_clause1226);
            set_key62=gPLSQLParser.set_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, set_key62.getTree());

            pushFollow(FOLLOW_column_name_in_cycle_clause1228);
            column_name63=gPLSQLParser.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name63.getTree());

            pushFollow(FOLLOW_to_key_in_cycle_clause1230);
            to_key64=gPLSQLParser.to_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, to_key64.getTree());

            pushFollow(FOLLOW_expression_in_cycle_clause1232);
            expression65=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression65.getTree());

            pushFollow(FOLLOW_default_key_in_cycle_clause1234);
            default_key66=gPLSQLParser.default_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, default_key66.getTree());

            pushFollow(FOLLOW_expression_in_cycle_clause1236);
            expression67=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression67.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cycle_clause"


    public static class subquery_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subquery"
    // PLSQL_DMLParser.g:243:1: subquery : subquery_basic_elements ( subquery_operation_part )* -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) ;
    public final subquery_return subquery() throws RecognitionException {
        subquery_return retval = new subquery_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        subquery_basic_elements_return subquery_basic_elements68 =null;

        subquery_operation_part_return subquery_operation_part69 =null;


        RewriteRuleSubtreeStream stream_subquery_operation_part=new RewriteRuleSubtreeStream(adaptor,"rule subquery_operation_part");
        RewriteRuleSubtreeStream stream_subquery_basic_elements=new RewriteRuleSubtreeStream(adaptor,"rule subquery_basic_elements");
        try {
            // PLSQL_DMLParser.g:244:5: ( subquery_basic_elements ( subquery_operation_part )* -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) )
            // PLSQL_DMLParser.g:244:10: subquery_basic_elements ( subquery_operation_part )*
            {
            pushFollow(FOLLOW_subquery_basic_elements_in_subquery1256);
            subquery_basic_elements68=subquery_basic_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subquery_basic_elements.add(subquery_basic_elements68.getTree());

            // PLSQL_DMLParser.g:244:34: ( subquery_operation_part )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==PLSQL_RESERVED_MINUS||LA25_0==SQL92_RESERVED_INTERSECT||LA25_0==SQL92_RESERVED_UNION) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // PLSQL_DMLParser.g:244:34: subquery_operation_part
            	    {
            	    pushFollow(FOLLOW_subquery_operation_part_in_subquery1258);
            	    subquery_operation_part69=subquery_operation_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_subquery_operation_part.add(subquery_operation_part69.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            // AST REWRITE
            // elements: subquery_operation_part, subquery_basic_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 245:9: -> ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
            {
                // PLSQL_DMLParser.g:245:12: ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUBQUERY, "SUBQUERY")
                , root_1);

                adaptor.addChild(root_1, stream_subquery_basic_elements.nextTree());

                // PLSQL_DMLParser.g:245:47: ( subquery_operation_part )*
                while ( stream_subquery_operation_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_subquery_operation_part.nextTree());

                }
                stream_subquery_operation_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subquery"


    public static class subquery_operation_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subquery_operation_part"
    // PLSQL_DMLParser.g:248:1: subquery_operation_part : ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements ;
    public final subquery_operation_part_return subquery_operation_part() throws RecognitionException {
        subquery_operation_part_return retval = new subquery_operation_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.union_key_return union_key70 =null;

        PLSQLParser_PLSQLKeys.all_key_return all_key71 =null;

        PLSQLParser_PLSQLKeys.intersect_key_return intersect_key72 =null;

        PLSQLParser_PLSQLKeys.minus_key_return minus_key73 =null;

        subquery_basic_elements_return subquery_basic_elements74 =null;



        try {
            // PLSQL_DMLParser.g:249:5: ( ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements )
            // PLSQL_DMLParser.g:249:10: ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^) subquery_basic_elements
            {
            root_0 = (Object)adaptor.nil();


            // PLSQL_DMLParser.g:249:10: ( union_key ^ ( all_key )? | intersect_key ^| minus_key ^)
            int alt27=3;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_UNION:
                {
                alt27=1;
                }
                break;
            case SQL92_RESERVED_INTERSECT:
                {
                alt27=2;
                }
                break;
            case PLSQL_RESERVED_MINUS:
                {
                alt27=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }

            switch (alt27) {
                case 1 :
                    // PLSQL_DMLParser.g:249:11: union_key ^ ( all_key )?
                    {
                    pushFollow(FOLLOW_union_key_in_subquery_operation_part1299);
                    union_key70=gPLSQLParser.union_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(union_key70.getTree(), root_0);

                    // PLSQL_DMLParser.g:249:22: ( all_key )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==SQL92_RESERVED_ALL) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // PLSQL_DMLParser.g:249:22: all_key
                            {
                            pushFollow(FOLLOW_all_key_in_subquery_operation_part1302);
                            all_key71=gPLSQLParser.all_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, all_key71.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:249:31: intersect_key ^
                    {
                    pushFollow(FOLLOW_intersect_key_in_subquery_operation_part1305);
                    intersect_key72=gPLSQLParser.intersect_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(intersect_key72.getTree(), root_0);

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:249:46: minus_key ^
                    {
                    pushFollow(FOLLOW_minus_key_in_subquery_operation_part1308);
                    minus_key73=gPLSQLParser.minus_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(minus_key73.getTree(), root_0);

                    }
                    break;

            }


            pushFollow(FOLLOW_subquery_basic_elements_in_subquery_operation_part1312);
            subquery_basic_elements74=subquery_basic_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery_basic_elements74.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subquery_operation_part"


    public static class subquery_basic_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subquery_basic_elements"
    // PLSQL_DMLParser.g:252:1: subquery_basic_elements : ( query_block | LEFT_PAREN ! subquery RIGHT_PAREN !);
    public final subquery_basic_elements_return subquery_basic_elements() throws RecognitionException {
        subquery_basic_elements_return retval = new subquery_basic_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN76=null;
        Token RIGHT_PAREN78=null;
        query_block_return query_block75 =null;

        subquery_return subquery77 =null;


        Object LEFT_PAREN76_tree=null;
        Object RIGHT_PAREN78_tree=null;

        try {
            // PLSQL_DMLParser.g:253:5: ( query_block | LEFT_PAREN ! subquery RIGHT_PAREN !)
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==SQL92_RESERVED_SELECT) ) {
                alt28=1;
            }
            else if ( (LA28_0==LEFT_PAREN) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;

            }
            switch (alt28) {
                case 1 :
                    // PLSQL_DMLParser.g:253:10: query_block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_query_block_in_subquery_basic_elements1332);
                    query_block75=query_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_block75.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:254:10: LEFT_PAREN ! subquery RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN76=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_subquery_basic_elements1343); if (state.failed) return retval;

                    pushFollow(FOLLOW_subquery_in_subquery_basic_elements1346);
                    subquery77=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery77.getTree());

                    RIGHT_PAREN78=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1348); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subquery_basic_elements"


    public static class query_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query_block"
    // PLSQL_DMLParser.g:257:1: query_block : select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? -> {mode == 1}? ^( select_key from_clause ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> ^( select_key from_clause ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) ;
    public final query_block_return query_block() throws RecognitionException {
        query_block_return retval = new query_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK83=null;
        Token COMMA85=null;
        PLSQLParser_PLSQLKeys.select_key_return select_key79 =null;

        PLSQLParser_PLSQLKeys.distinct_key_return distinct_key80 =null;

        PLSQLParser_PLSQLKeys.unique_key_return unique_key81 =null;

        PLSQLParser_PLSQLKeys.all_key_return all_key82 =null;

        selected_element_return selected_element84 =null;

        selected_element_return selected_element86 =null;

        PLSQLParser_PLSQLCommons.into_clause_return into_clause87 =null;

        from_clause_return from_clause88 =null;

        PLSQLParser_PLSQLCommons.where_clause_return where_clause89 =null;

        hierarchical_query_clause_return hierarchical_query_clause90 =null;

        group_by_clause_return group_by_clause91 =null;

        model_clause_return model_clause92 =null;


        Object ASTERISK83_tree=null;
        Object COMMA85_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
        RewriteRuleSubtreeStream stream_distinct_key=new RewriteRuleSubtreeStream(adaptor,"rule distinct_key");
        RewriteRuleSubtreeStream stream_group_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule group_by_clause");
        RewriteRuleSubtreeStream stream_selected_element=new RewriteRuleSubtreeStream(adaptor,"rule selected_element");
        RewriteRuleSubtreeStream stream_unique_key=new RewriteRuleSubtreeStream(adaptor,"rule unique_key");
        RewriteRuleSubtreeStream stream_model_clause=new RewriteRuleSubtreeStream(adaptor,"rule model_clause");
        RewriteRuleSubtreeStream stream_select_key=new RewriteRuleSubtreeStream(adaptor,"rule select_key");
        RewriteRuleSubtreeStream stream_hierarchical_query_clause=new RewriteRuleSubtreeStream(adaptor,"rule hierarchical_query_clause");
            int mode = 0;    
        try {
            // PLSQL_DMLParser.g:259:5: ( select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? -> {mode == 1}? ^( select_key from_clause ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> ^( select_key from_clause ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) )
            // PLSQL_DMLParser.g:259:10: select_key ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )? ( ASTERISK | selected_element ( COMMA selected_element )* ) ( into_clause )? from_clause ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )?
            {
            pushFollow(FOLLOW_select_key_in_query_block1377);
            select_key79=gPLSQLParser.select_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_select_key.add(select_key79.getTree());

            // PLSQL_DMLParser.g:260:9: ( ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key ) )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==SQL92_RESERVED_DISTINCT) ) {
                int LA30_1 = input.LA(2);

                if ( (synpred2_PLSQL_DMLParser()) ) {
                    alt30=1;
                }
            }
            else if ( (LA30_0==SQL92_RESERVED_UNIQUE) && (synpred2_PLSQL_DMLParser())) {
                alt30=1;
            }
            else if ( (LA30_0==SQL92_RESERVED_ALL) ) {
                int LA30_3 = input.LA(2);

                if ( (synpred2_PLSQL_DMLParser()) ) {
                    alt30=1;
                }
            }
            switch (alt30) {
                case 1 :
                    // PLSQL_DMLParser.g:260:10: ( distinct_key | unique_key | all_key )=> ( distinct_key | unique_key | all_key )
                    {
                    // PLSQL_DMLParser.g:260:46: ( distinct_key | unique_key | all_key )
                    int alt29=3;
                    switch ( input.LA(1) ) {
                    case SQL92_RESERVED_DISTINCT:
                        {
                        alt29=1;
                        }
                        break;
                    case SQL92_RESERVED_UNIQUE:
                        {
                        alt29=2;
                        }
                        break;
                    case SQL92_RESERVED_ALL:
                        {
                        alt29=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 29, 0, input);

                        throw nvae;

                    }

                    switch (alt29) {
                        case 1 :
                            // PLSQL_DMLParser.g:260:47: distinct_key
                            {
                            pushFollow(FOLLOW_distinct_key_in_query_block1398);
                            distinct_key80=gPLSQLParser.distinct_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinct_key.add(distinct_key80.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:260:60: unique_key
                            {
                            pushFollow(FOLLOW_unique_key_in_query_block1400);
                            unique_key81=gPLSQLParser.unique_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_unique_key.add(unique_key81.getTree());

                            }
                            break;
                        case 3 :
                            // PLSQL_DMLParser.g:260:71: all_key
                            {
                            pushFollow(FOLLOW_all_key_in_query_block1402);
                            all_key82=gPLSQLParser.all_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_all_key.add(all_key82.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // PLSQL_DMLParser.g:261:9: ( ASTERISK | selected_element ( COMMA selected_element )* )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==ASTERISK) ) {
                alt32=1;
            }
            else if ( (LA32_0==APPROXIMATE_NUM_LIT||LA32_0==BINDVAR||(LA32_0 >= CHAR_STRING && LA32_0 <= COLON)||LA32_0==DELIMITED_ID||LA32_0==EXACT_NUM_LIT||LA32_0==INTRODUCER||LA32_0==LEFT_PAREN||(LA32_0 >= MINUS_SIGN && LA32_0 <= NATIONAL_CHAR_STRING_LIT)||LA32_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA32_0==PLUS_SIGN||LA32_0==REGULAR_ID||LA32_0==SQL92_RESERVED_ALL||LA32_0==SQL92_RESERVED_ANY||LA32_0==SQL92_RESERVED_CASE||(LA32_0 >= SQL92_RESERVED_CURSOR && LA32_0 <= SQL92_RESERVED_DATE)||LA32_0==SQL92_RESERVED_DEFAULT||LA32_0==SQL92_RESERVED_DISTINCT||(LA32_0 >= SQL92_RESERVED_EXISTS && LA32_0 <= SQL92_RESERVED_FALSE)||(LA32_0 >= SQL92_RESERVED_NOT && LA32_0 <= SQL92_RESERVED_NULL)||LA32_0==SQL92_RESERVED_PRIOR||LA32_0==SQL92_RESERVED_TRUE||LA32_0==UNSIGNED_INTEGER) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // PLSQL_DMLParser.g:261:10: ASTERISK
                    {
                    ASTERISK83=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_query_block1416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASTERISK.add(ASTERISK83);


                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:261:32: selected_element ( COMMA selected_element )*
                    {
                    pushFollow(FOLLOW_selected_element_in_query_block1421);
                    selected_element84=selected_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_selected_element.add(selected_element84.getTree());

                    // PLSQL_DMLParser.g:261:49: ( COMMA selected_element )*
                    loop31:
                    do {
                        int alt31=2;
                        int LA31_0 = input.LA(1);

                        if ( (LA31_0==COMMA) ) {
                            alt31=1;
                        }


                        switch (alt31) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:261:50: COMMA selected_element
                    	    {
                    	    COMMA85=(Token)match(input,COMMA,FOLLOW_COMMA_in_query_block1424); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA85);


                    	    pushFollow(FOLLOW_selected_element_in_query_block1426);
                    	    selected_element86=selected_element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_selected_element.add(selected_element86.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop31;
                        }
                    } while (true);


                    }
                    break;

            }


            // PLSQL_DMLParser.g:262:9: ( into_clause )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==SQL92_RESERVED_INTO) ) {
                alt33=1;
            }
            else if ( (LA33_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("bulk")))) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // PLSQL_DMLParser.g:262:9: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_query_block1439);
                    into_clause87=gPLSQLParser.into_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_into_clause.add(into_clause87.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_from_clause_in_query_block1450);
            from_clause88=from_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_from_clause.add(from_clause88.getTree());

            // PLSQL_DMLParser.g:264:9: ( where_clause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==SQL92_RESERVED_WHERE) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // PLSQL_DMLParser.g:264:9: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_query_block1461);
                    where_clause89=gPLSQLParser.where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause89.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:265:9: ( hierarchical_query_clause )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==SQL92_RESERVED_CONNECT) ) {
                alt35=1;
            }
            else if ( (LA35_0==PLSQL_RESERVED_START) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // PLSQL_DMLParser.g:265:9: hierarchical_query_clause
                    {
                    pushFollow(FOLLOW_hierarchical_query_clause_in_query_block1473);
                    hierarchical_query_clause90=hierarchical_query_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hierarchical_query_clause.add(hierarchical_query_clause90.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:266:9: ( group_by_clause )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==SQL92_RESERVED_GROUP) ) {
                alt36=1;
            }
            else if ( (LA36_0==SQL92_RESERVED_HAVING) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // PLSQL_DMLParser.g:266:9: group_by_clause
                    {
                    pushFollow(FOLLOW_group_by_clause_in_query_block1485);
                    group_by_clause91=group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_group_by_clause.add(group_by_clause91.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:267:9: ( model_clause )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==PLSQL_NON_RESERVED_MODEL) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // PLSQL_DMLParser.g:267:9: model_clause
                    {
                    pushFollow(FOLLOW_model_clause_in_query_block1496);
                    model_clause92=model_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_model_clause.add(model_clause92.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: into_clause, select_key, from_clause, group_by_clause, model_clause, distinct_key, all_key, from_clause, where_clause, all_key, into_clause, select_key, unique_key, where_clause, hierarchical_query_clause, group_by_clause, distinct_key, ASTERISK, model_clause, selected_element, unique_key, hierarchical_query_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 268:9: -> {mode == 1}? ^( select_key from_clause ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            if (mode == 1) {
                // PLSQL_DMLParser.g:268:25: ^( select_key from_clause ( distinct_key )? ( unique_key )? ( all_key )? ASTERISK ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_select_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_from_clause.nextTree());

                // PLSQL_DMLParser.g:268:50: ( distinct_key )?
                if ( stream_distinct_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinct_key.nextTree());

                }
                stream_distinct_key.reset();

                // PLSQL_DMLParser.g:268:64: ( unique_key )?
                if ( stream_unique_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_unique_key.nextTree());

                }
                stream_unique_key.reset();

                // PLSQL_DMLParser.g:268:76: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_all_key.nextTree());

                }
                stream_all_key.reset();

                adaptor.addChild(root_1, 
                stream_ASTERISK.nextNode()
                );

                // PLSQL_DMLParser.g:269:17: ( into_clause )?
                if ( stream_into_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_into_clause.nextTree());

                }
                stream_into_clause.reset();

                // PLSQL_DMLParser.g:269:30: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();

                // PLSQL_DMLParser.g:269:44: ( hierarchical_query_clause )?
                if ( stream_hierarchical_query_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_hierarchical_query_clause.nextTree());

                }
                stream_hierarchical_query_clause.reset();

                // PLSQL_DMLParser.g:269:71: ( group_by_clause )?
                if ( stream_group_by_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_group_by_clause.nextTree());

                }
                stream_group_by_clause.reset();

                // PLSQL_DMLParser.g:269:88: ( model_clause )?
                if ( stream_model_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_clause.nextTree());

                }
                stream_model_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 270:9: -> ^( select_key from_clause ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
            {
                // PLSQL_DMLParser.g:270:12: ^( select_key from_clause ( distinct_key )? ( unique_key )? ( all_key )? ^( SELECT_LIST ( selected_element )+ ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_select_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_from_clause.nextTree());

                // PLSQL_DMLParser.g:270:37: ( distinct_key )?
                if ( stream_distinct_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinct_key.nextTree());

                }
                stream_distinct_key.reset();

                // PLSQL_DMLParser.g:270:51: ( unique_key )?
                if ( stream_unique_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_unique_key.nextTree());

                }
                stream_unique_key.reset();

                // PLSQL_DMLParser.g:270:63: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_all_key.nextTree());

                }
                stream_all_key.reset();

                // PLSQL_DMLParser.g:270:72: ^( SELECT_LIST ( selected_element )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECT_LIST, "SELECT_LIST")
                , root_2);

                if ( !(stream_selected_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_selected_element.hasNext() ) {
                    adaptor.addChild(root_2, stream_selected_element.nextTree());

                }
                stream_selected_element.reset();

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:271:17: ( into_clause )?
                if ( stream_into_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_into_clause.nextTree());

                }
                stream_into_clause.reset();

                // PLSQL_DMLParser.g:271:30: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();

                // PLSQL_DMLParser.g:271:44: ( hierarchical_query_clause )?
                if ( stream_hierarchical_query_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_hierarchical_query_clause.nextTree());

                }
                stream_hierarchical_query_clause.reset();

                // PLSQL_DMLParser.g:271:71: ( group_by_clause )?
                if ( stream_group_by_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_group_by_clause.nextTree());

                }
                stream_group_by_clause.reset();

                // PLSQL_DMLParser.g:271:88: ( model_clause )?
                if ( stream_model_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_clause.nextTree());

                }
                stream_model_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_block"


    public static class selected_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selected_element"
    // PLSQL_DMLParser.g:274:1: selected_element : select_list_elements ( column_alias )? -> ^( SELECT_ITEM select_list_elements ( column_alias )? ) ;
    public final selected_element_return selected_element() throws RecognitionException {
        selected_element_return retval = new selected_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        select_list_elements_return select_list_elements93 =null;

        PLSQLParser_PLSQLCommons.column_alias_return column_alias94 =null;


        RewriteRuleSubtreeStream stream_column_alias=new RewriteRuleSubtreeStream(adaptor,"rule column_alias");
        RewriteRuleSubtreeStream stream_select_list_elements=new RewriteRuleSubtreeStream(adaptor,"rule select_list_elements");
        try {
            // PLSQL_DMLParser.g:275:5: ( select_list_elements ( column_alias )? -> ^( SELECT_ITEM select_list_elements ( column_alias )? ) )
            // PLSQL_DMLParser.g:275:10: select_list_elements ( column_alias )?
            {
            pushFollow(FOLLOW_select_list_elements_in_selected_element1640);
            select_list_elements93=select_list_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_select_list_elements.add(select_list_elements93.getTree());

            // PLSQL_DMLParser.g:275:31: ( column_alias )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( ((LA38_0 >= CHAR_STRING && LA38_0 <= CHAR_STRING_PERL)||LA38_0==DELIMITED_ID||LA38_0==INTRODUCER||LA38_0==NATIONAL_CHAR_STRING_LIT||LA38_0==SQL92_RESERVED_AS) ) {
                alt38=1;
            }
            else if ( (LA38_0==REGULAR_ID) ) {
                int LA38_2 = input.LA(2);

                if ( (LA38_2==COMMA||LA38_2==SQL92_RESERVED_FROM||LA38_2==SQL92_RESERVED_INTO) ) {
                    alt38=1;
                }
                else if ( (LA38_2==REGULAR_ID) ) {
                    int LA38_4 = input.LA(3);

                    if ( (LA38_4==REGULAR_ID) ) {
                        alt38=1;
                    }
                }
            }
            switch (alt38) {
                case 1 :
                    // PLSQL_DMLParser.g:275:31: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_selected_element1642);
                    column_alias94=gPLSQLParser.column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_alias.add(column_alias94.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: column_alias, select_list_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 276:9: -> ^( SELECT_ITEM select_list_elements ( column_alias )? )
            {
                // PLSQL_DMLParser.g:276:12: ^( SELECT_ITEM select_list_elements ( column_alias )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECT_ITEM, "SELECT_ITEM")
                , root_1);

                adaptor.addChild(root_1, stream_select_list_elements.nextTree());

                // PLSQL_DMLParser.g:276:47: ( column_alias )?
                if ( stream_column_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_alias.nextTree());

                }
                stream_column_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selected_element"


    public static class from_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "from_clause"
    // PLSQL_DMLParser.g:279:1: from_clause : from_key ^ table_ref_list ;
    public final from_clause_return from_clause() throws RecognitionException {
        from_clause_return retval = new from_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.from_key_return from_key95 =null;

        table_ref_list_return table_ref_list96 =null;



        try {
            // PLSQL_DMLParser.g:280:5: ( from_key ^ table_ref_list )
            // PLSQL_DMLParser.g:280:10: from_key ^ table_ref_list
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_from_key_in_from_clause1682);
            from_key95=gPLSQLParser.from_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(from_key95.getTree(), root_0);

            pushFollow(FOLLOW_table_ref_list_in_from_clause1685);
            table_ref_list96=table_ref_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_ref_list96.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "from_clause"


    public static class select_list_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "select_list_elements"
    // PLSQL_DMLParser.g:283:1: select_list_elements : ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) );
    public final select_list_elements_return select_list_elements() throws RecognitionException {
        select_list_elements_return retval = new select_list_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PERIOD98=null;
        Token ASTERISK99=null;
        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name97 =null;

        expression_return expression100 =null;


        Object PERIOD98_tree=null;
        Object ASTERISK99_tree=null;
        RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            // PLSQL_DMLParser.g:284:5: ( ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) ) | expression -> ^( EXPR expression ) )
            int alt39=2;
            switch ( input.LA(1) ) {
            case INTRODUCER:
                {
                int LA39_1 = input.LA(2);

                if ( (synpred3_PLSQL_DMLParser()) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 1, input);

                    throw nvae;

                }
                }
                break;
            case REGULAR_ID:
                {
                int LA39_2 = input.LA(2);

                if ( (synpred3_PLSQL_DMLParser()) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 2, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA39_3 = input.LA(2);

                if ( (synpred3_PLSQL_DMLParser()) ) {
                    alt39=1;
                }
                else if ( (true) ) {
                    alt39=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 3, input);

                    throw nvae;

                }
                }
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case EXACT_NUM_LIT:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
                {
                alt39=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // PLSQL_DMLParser.g:284:10: ( tableview_name PERIOD ASTERISK )=> tableview_name PERIOD ASTERISK
                    {
                    pushFollow(FOLLOW_tableview_name_in_select_list_elements1714);
                    tableview_name97=gPLSQLParser.tableview_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name97.getTree());

                    PERIOD98=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_select_list_elements1716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD98);


                    ASTERISK99=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list_elements1718); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASTERISK.add(ASTERISK99);


                    // AST REWRITE
                    // elements: tableview_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 284:76: -> ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) )
                    {
                        // PLSQL_DMLParser.g:284:79: ^( EXPR ^( DOT_ASTERISK[$ASTERISK] tableview_name ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_1);

                        // PLSQL_DMLParser.g:284:86: ^( DOT_ASTERISK[$ASTERISK] tableview_name )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DOT_ASTERISK, ASTERISK99)
                        , root_2);

                        adaptor.addChild(root_2, stream_tableview_name.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:285:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_select_list_elements1744);
                    expression100=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression100.getTree());

                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 285:21: -> ^( EXPR expression )
                    {
                        // PLSQL_DMLParser.g:285:24: ^( EXPR expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "select_list_elements"


    public static class table_ref_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_ref_list"
    // PLSQL_DMLParser.g:288:1: table_ref_list : table_ref ( COMMA ! table_ref )* ;
    public final table_ref_list_return table_ref_list() throws RecognitionException {
        table_ref_list_return retval = new table_ref_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA102=null;
        table_ref_return table_ref101 =null;

        table_ref_return table_ref103 =null;


        Object COMMA102_tree=null;

        try {
            // PLSQL_DMLParser.g:289:5: ( table_ref ( COMMA ! table_ref )* )
            // PLSQL_DMLParser.g:289:10: table_ref ( COMMA ! table_ref )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_table_ref_in_table_ref_list1772);
            table_ref101=table_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_ref101.getTree());

            // PLSQL_DMLParser.g:289:20: ( COMMA ! table_ref )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==COMMA) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // PLSQL_DMLParser.g:289:21: COMMA ! table_ref
            	    {
            	    COMMA102=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_ref_list1775); if (state.failed) return retval;

            	    pushFollow(FOLLOW_table_ref_in_table_ref_list1778);
            	    table_ref103=table_ref();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_ref103.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "table_ref_list"


    public static class table_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_ref"
    // PLSQL_DMLParser.g:296:1: table_ref : table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )? -> ^( TABLE_REF table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? ) ;
    public final table_ref_return table_ref() throws RecognitionException {
        table_ref_return retval = new table_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        table_ref_aux_return table_ref_aux104 =null;

        join_clause_return join_clause105 =null;

        pivot_clause_return pivot_clause106 =null;

        unpivot_clause_return unpivot_clause107 =null;


        RewriteRuleSubtreeStream stream_join_clause=new RewriteRuleSubtreeStream(adaptor,"rule join_clause");
        RewriteRuleSubtreeStream stream_unpivot_clause=new RewriteRuleSubtreeStream(adaptor,"rule unpivot_clause");
        RewriteRuleSubtreeStream stream_pivot_clause=new RewriteRuleSubtreeStream(adaptor,"rule pivot_clause");
        RewriteRuleSubtreeStream stream_table_ref_aux=new RewriteRuleSubtreeStream(adaptor,"rule table_ref_aux");
        try {
            // PLSQL_DMLParser.g:297:5: ( table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )? -> ^( TABLE_REF table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? ) )
            // PLSQL_DMLParser.g:297:10: table_ref_aux ( join_clause )* ( pivot_clause | unpivot_clause )?
            {
            pushFollow(FOLLOW_table_ref_aux_in_table_ref1804);
            table_ref_aux104=table_ref_aux();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_ref_aux.add(table_ref_aux104.getTree());

            // PLSQL_DMLParser.g:297:24: ( join_clause )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==REGULAR_ID) ) {
                    int LA41_1 = input.LA(2);

                    if ( (((input.LT(1).getText().equalsIgnoreCase("natural"))||(input.LT(1).getText().equalsIgnoreCase("join"))||(input.LT(1).getText().equalsIgnoreCase("left"))||(input.LT(1).getText().equalsIgnoreCase("inner"))||(input.LT(1).getText().equalsIgnoreCase("full"))||(input.LT(1).getText().equalsIgnoreCase("partition"))||(input.LT(1).getText().equalsIgnoreCase("right"))||(input.LT(1).getText().equalsIgnoreCase("cross")))) ) {
                        alt41=1;
                    }


                }


                switch (alt41) {
            	case 1 :
            	    // PLSQL_DMLParser.g:297:24: join_clause
            	    {
            	    pushFollow(FOLLOW_join_clause_in_table_ref1806);
            	    join_clause105=join_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_join_clause.add(join_clause105.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            // PLSQL_DMLParser.g:297:37: ( pivot_clause | unpivot_clause )?
            int alt42=3;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==REGULAR_ID) ) {
                int LA42_1 = input.LA(2);

                if ( (((input.LT(1).getText().equalsIgnoreCase("pivot")))) ) {
                    alt42=1;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("unpivot")))) ) {
                    alt42=2;
                }
            }
            switch (alt42) {
                case 1 :
                    // PLSQL_DMLParser.g:297:38: pivot_clause
                    {
                    pushFollow(FOLLOW_pivot_clause_in_table_ref1810);
                    pivot_clause106=pivot_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pivot_clause.add(pivot_clause106.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:297:51: unpivot_clause
                    {
                    pushFollow(FOLLOW_unpivot_clause_in_table_ref1812);
                    unpivot_clause107=unpivot_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unpivot_clause.add(unpivot_clause107.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: unpivot_clause, pivot_clause, table_ref_aux, join_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 298:9: -> ^( TABLE_REF table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? )
            {
                // PLSQL_DMLParser.g:298:12: ^( TABLE_REF table_ref_aux ( join_clause )* ( pivot_clause )? ( unpivot_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TABLE_REF, "TABLE_REF")
                , root_1);

                adaptor.addChild(root_1, stream_table_ref_aux.nextTree());

                // PLSQL_DMLParser.g:298:38: ( join_clause )*
                while ( stream_join_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_join_clause.nextTree());

                }
                stream_join_clause.reset();

                // PLSQL_DMLParser.g:298:51: ( pivot_clause )?
                if ( stream_pivot_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_pivot_clause.nextTree());

                }
                stream_pivot_clause.reset();

                // PLSQL_DMLParser.g:298:65: ( unpivot_clause )?
                if ( stream_unpivot_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_unpivot_clause.nextTree());

                }
                stream_unpivot_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "table_ref"


    public static class table_ref_aux_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_ref_aux"
    // PLSQL_DMLParser.g:301:1: table_ref_aux : ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? ) ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT ( table_alias )? ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ) ;
    public final table_ref_aux_return table_ref_aux() throws RecognitionException {
        table_ref_aux_return retval = new table_ref_aux_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN111=null;
        Token RIGHT_PAREN114=null;
        Token LEFT_PAREN118=null;
        Token RIGHT_PAREN120=null;
        dml_table_expression_clause_return dml_table_expression_clause108 =null;

        pivot_clause_return pivot_clause109 =null;

        unpivot_clause_return unpivot_clause110 =null;

        table_ref_return table_ref112 =null;

        subquery_operation_part_return subquery_operation_part113 =null;

        pivot_clause_return pivot_clause115 =null;

        unpivot_clause_return unpivot_clause116 =null;

        PLSQLParser_PLSQLKeys.only_key_return only_key117 =null;

        dml_table_expression_clause_return dml_table_expression_clause119 =null;

        dml_table_expression_clause_return dml_table_expression_clause121 =null;

        pivot_clause_return pivot_clause122 =null;

        unpivot_clause_return unpivot_clause123 =null;

        flashback_query_clause_return flashback_query_clause124 =null;

        PLSQLParser_PLSQLCommons.table_alias_return table_alias125 =null;


        Object LEFT_PAREN111_tree=null;
        Object RIGHT_PAREN114_tree=null;
        Object LEFT_PAREN118_tree=null;
        Object RIGHT_PAREN120_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_dml_table_expression_clause=new RewriteRuleSubtreeStream(adaptor,"rule dml_table_expression_clause");
        RewriteRuleSubtreeStream stream_subquery_operation_part=new RewriteRuleSubtreeStream(adaptor,"rule subquery_operation_part");
        RewriteRuleSubtreeStream stream_unpivot_clause=new RewriteRuleSubtreeStream(adaptor,"rule unpivot_clause");
        RewriteRuleSubtreeStream stream_table_ref=new RewriteRuleSubtreeStream(adaptor,"rule table_ref");
        RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
        RewriteRuleSubtreeStream stream_pivot_clause=new RewriteRuleSubtreeStream(adaptor,"rule pivot_clause");
        RewriteRuleSubtreeStream stream_only_key=new RewriteRuleSubtreeStream(adaptor,"rule only_key");
        RewriteRuleSubtreeStream stream_flashback_query_clause=new RewriteRuleSubtreeStream(adaptor,"rule flashback_query_clause");
        try {
            // PLSQL_DMLParser.g:302:5: ( ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? ) ( flashback_query_clause )* ({...}? table_alias )? -> ^( TABLE_REF_ELEMENT ( table_alias )? ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ) )
            // PLSQL_DMLParser.g:303:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? ) ( flashback_query_clause )* ({...}? table_alias )?
            {
            // PLSQL_DMLParser.g:303:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )? | ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )? | ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN | dml_table_expression_clause ( pivot_clause | unpivot_clause )? )
            int alt47=4;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_TABLE:
                {
                int LA47_1 = input.LA(2);

                if ( (synpred4_PLSQL_DMLParser()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 1, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_THE:
                {
                int LA47_2 = input.LA(2);

                if ( (synpred4_PLSQL_DMLParser()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 2, input);

                    throw nvae;

                }
                }
                break;
            case LEFT_PAREN:
                {
                int LA47_3 = input.LA(2);

                if ( (synpred4_PLSQL_DMLParser()) ) {
                    alt47=1;
                }
                else if ( (synpred5_PLSQL_DMLParser()) ) {
                    alt47=2;
                }
                else if ( (true) ) {
                    alt47=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 3, input);

                    throw nvae;

                }
                }
                break;
            case INTRODUCER:
                {
                int LA47_4 = input.LA(2);

                if ( (synpred4_PLSQL_DMLParser()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 4, input);

                    throw nvae;

                }
                }
                break;
            case REGULAR_ID:
                {
                int LA47_5 = input.LA(2);

                if ( (synpred4_PLSQL_DMLParser()) ) {
                    alt47=1;
                }
                else if ( ((((input.LT(1).getText().equalsIgnoreCase("only"))&&(input.LT(1).getText().equalsIgnoreCase("only")))&&synpred6_PLSQL_DMLParser())) ) {
                    alt47=3;
                }
                else if ( (true) ) {
                    alt47=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 5, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA47_6 = input.LA(2);

                if ( (synpred4_PLSQL_DMLParser()) ) {
                    alt47=1;
                }
                else if ( (true) ) {
                    alt47=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 47, 6, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }

            switch (alt47) {
                case 1 :
                    // PLSQL_DMLParser.g:303:10: ( LEFT_PAREN ( select_key | with_key ) )=> dml_table_expression_clause ( pivot_clause | unpivot_clause )?
                    {
                    pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux1877);
                    dml_table_expression_clause108=dml_table_expression_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_table_expression_clause.add(dml_table_expression_clause108.getTree());

                    // PLSQL_DMLParser.g:303:76: ( pivot_clause | unpivot_clause )?
                    int alt43=3;
                    alt43 = dfa43.predict(input);
                    switch (alt43) {
                        case 1 :
                            // PLSQL_DMLParser.g:303:77: pivot_clause
                            {
                            pushFollow(FOLLOW_pivot_clause_in_table_ref_aux1880);
                            pivot_clause109=pivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pivot_clause.add(pivot_clause109.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:303:90: unpivot_clause
                            {
                            pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux1882);
                            unpivot_clause110=unpivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_unpivot_clause.add(unpivot_clause110.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:304:10: ( LEFT_PAREN )=> LEFT_PAREN table_ref ( subquery_operation_part )* RIGHT_PAREN ( pivot_clause | unpivot_clause )?
                    {
                    LEFT_PAREN111=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_table_ref_aux1901); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN111);


                    pushFollow(FOLLOW_table_ref_in_table_ref_aux1903);
                    table_ref112=table_ref();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_ref.add(table_ref112.getTree());

                    // PLSQL_DMLParser.g:304:47: ( subquery_operation_part )*
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==PLSQL_RESERVED_MINUS||LA44_0==SQL92_RESERVED_INTERSECT||LA44_0==SQL92_RESERVED_UNION) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:304:47: subquery_operation_part
                    	    {
                    	    pushFollow(FOLLOW_subquery_operation_part_in_table_ref_aux1905);
                    	    subquery_operation_part113=subquery_operation_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_subquery_operation_part.add(subquery_operation_part113.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);


                    RIGHT_PAREN114=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_table_ref_aux1908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN114);


                    // PLSQL_DMLParser.g:304:84: ( pivot_clause | unpivot_clause )?
                    int alt45=3;
                    alt45 = dfa45.predict(input);
                    switch (alt45) {
                        case 1 :
                            // PLSQL_DMLParser.g:304:85: pivot_clause
                            {
                            pushFollow(FOLLOW_pivot_clause_in_table_ref_aux1911);
                            pivot_clause115=pivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pivot_clause.add(pivot_clause115.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:304:98: unpivot_clause
                            {
                            pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux1913);
                            unpivot_clause116=unpivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_unpivot_clause.add(unpivot_clause116.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:305:10: ( only_key LEFT_PAREN )=> only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_only_key_in_table_ref_aux1934);
                    only_key117=gPLSQLParser.only_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_only_key.add(only_key117.getTree());

                    LEFT_PAREN118=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_table_ref_aux1936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN118);


                    pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux1938);
                    dml_table_expression_clause119=dml_table_expression_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_table_expression_clause.add(dml_table_expression_clause119.getTree());

                    RIGHT_PAREN120=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_table_ref_aux1940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN120);


                    }
                    break;
                case 4 :
                    // PLSQL_DMLParser.g:306:10: dml_table_expression_clause ( pivot_clause | unpivot_clause )?
                    {
                    pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux1951);
                    dml_table_expression_clause121=dml_table_expression_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_table_expression_clause.add(dml_table_expression_clause121.getTree());

                    // PLSQL_DMLParser.g:306:38: ( pivot_clause | unpivot_clause )?
                    int alt46=3;
                    alt46 = dfa46.predict(input);
                    switch (alt46) {
                        case 1 :
                            // PLSQL_DMLParser.g:306:39: pivot_clause
                            {
                            pushFollow(FOLLOW_pivot_clause_in_table_ref_aux1954);
                            pivot_clause122=pivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_pivot_clause.add(pivot_clause122.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:306:52: unpivot_clause
                            {
                            pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux1956);
                            unpivot_clause123=unpivot_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_unpivot_clause.add(unpivot_clause123.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // PLSQL_DMLParser.g:308:9: ( flashback_query_clause )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==REGULAR_ID) ) {
                    int LA48_2 = input.LA(2);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("versions"))) ) {
                        alt48=1;
                    }


                }
                else if ( (LA48_0==SQL92_RESERVED_AS) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // PLSQL_DMLParser.g:308:9: flashback_query_clause
            	    {
            	    pushFollow(FOLLOW_flashback_query_clause_in_table_ref_aux1974);
            	    flashback_query_clause124=flashback_query_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_flashback_query_clause.add(flashback_query_clause124.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            // PLSQL_DMLParser.g:309:9: ({...}? table_alias )?
            int alt49=2;
            switch ( input.LA(1) ) {
                case INTRODUCER:
                    {
                    int LA49_1 = input.LA(2);

                    if ( ((isTableAlias())) ) {
                        alt49=1;
                    }
                    }
                    break;
                case REGULAR_ID:
                    {
                    int LA49_2 = input.LA(2);

                    if ( ((isTableAlias())) ) {
                        alt49=1;
                    }
                    }
                    break;
                case DELIMITED_ID:
                    {
                    int LA49_3 = input.LA(2);

                    if ( ((isTableAlias())) ) {
                        alt49=1;
                    }
                    }
                    break;
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case NATIONAL_CHAR_STRING_LIT:
                    {
                    int LA49_4 = input.LA(2);

                    if ( ((isTableAlias())) ) {
                        alt49=1;
                    }
                    }
                    break;
            }

            switch (alt49) {
                case 1 :
                    // PLSQL_DMLParser.g:309:10: {...}? table_alias
                    {
                    if ( !((isTableAlias())) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "table_ref_aux", "isTableAlias()");
                    }

                    pushFollow(FOLLOW_table_alias_in_table_ref_aux1988);
                    table_alias125=gPLSQLParser.table_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_alias.add(table_alias125.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: subquery_operation_part, dml_table_expression_clause, pivot_clause, table_ref, only_key, flashback_query_clause, unpivot_clause, table_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 310:9: -> ^( TABLE_REF_ELEMENT ( table_alias )? ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* )
            {
                // PLSQL_DMLParser.g:310:12: ^( TABLE_REF_ELEMENT ( table_alias )? ( dml_table_expression_clause )? ( table_ref )? ( subquery_operation_part )* ( only_key )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TABLE_REF_ELEMENT, "TABLE_REF_ELEMENT")
                , root_1);

                // PLSQL_DMLParser.g:310:32: ( table_alias )?
                if ( stream_table_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_alias.nextTree());

                }
                stream_table_alias.reset();

                // PLSQL_DMLParser.g:310:45: ( dml_table_expression_clause )?
                if ( stream_dml_table_expression_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_dml_table_expression_clause.nextTree());

                }
                stream_dml_table_expression_clause.reset();

                // PLSQL_DMLParser.g:310:74: ( table_ref )?
                if ( stream_table_ref.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_ref.nextTree());

                }
                stream_table_ref.reset();

                // PLSQL_DMLParser.g:310:85: ( subquery_operation_part )*
                while ( stream_subquery_operation_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_subquery_operation_part.nextTree());

                }
                stream_subquery_operation_part.reset();

                // PLSQL_DMLParser.g:310:110: ( only_key )?
                if ( stream_only_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_only_key.nextTree());

                }
                stream_only_key.reset();

                // PLSQL_DMLParser.g:310:120: ( pivot_clause )?
                if ( stream_pivot_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_pivot_clause.nextTree());

                }
                stream_pivot_clause.reset();

                // PLSQL_DMLParser.g:310:134: ( unpivot_clause )?
                if ( stream_unpivot_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_unpivot_clause.nextTree());

                }
                stream_unpivot_clause.reset();

                // PLSQL_DMLParser.g:310:150: ( flashback_query_clause )*
                while ( stream_flashback_query_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_flashback_query_clause.nextTree());

                }
                stream_flashback_query_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "table_ref_aux"


    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_clause"
    // PLSQL_DMLParser.g:313:1: join_clause : ( query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux ( query_partition_clause )? ( join_on_part | join_using_part )* -> ^( JOIN_DEF[$join_key.start] ( cross_key )? ( natural_key )? ( inner_key )? ( outer_join_type )? table_ref_aux ( query_partition_clause )* ( join_on_part )* ( join_using_part )* ) ;
    public final join_clause_return join_clause() throws RecognitionException {
        join_clause_return retval = new join_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        query_partition_clause_return query_partition_clause126 =null;

        PLSQLParser_PLSQLKeys.cross_key_return cross_key127 =null;

        PLSQLParser_PLSQLKeys.natural_key_return natural_key128 =null;

        PLSQLParser_PLSQLKeys.inner_key_return inner_key129 =null;

        outer_join_type_return outer_join_type130 =null;

        PLSQLParser_PLSQLKeys.join_key_return join_key131 =null;

        table_ref_aux_return table_ref_aux132 =null;

        query_partition_clause_return query_partition_clause133 =null;

        join_on_part_return join_on_part134 =null;

        join_using_part_return join_using_part135 =null;


        RewriteRuleSubtreeStream stream_inner_key=new RewriteRuleSubtreeStream(adaptor,"rule inner_key");
        RewriteRuleSubtreeStream stream_join_using_part=new RewriteRuleSubtreeStream(adaptor,"rule join_using_part");
        RewriteRuleSubtreeStream stream_join_on_part=new RewriteRuleSubtreeStream(adaptor,"rule join_on_part");
        RewriteRuleSubtreeStream stream_join_key=new RewriteRuleSubtreeStream(adaptor,"rule join_key");
        RewriteRuleSubtreeStream stream_outer_join_type=new RewriteRuleSubtreeStream(adaptor,"rule outer_join_type");
        RewriteRuleSubtreeStream stream_query_partition_clause=new RewriteRuleSubtreeStream(adaptor,"rule query_partition_clause");
        RewriteRuleSubtreeStream stream_cross_key=new RewriteRuleSubtreeStream(adaptor,"rule cross_key");
        RewriteRuleSubtreeStream stream_natural_key=new RewriteRuleSubtreeStream(adaptor,"rule natural_key");
        RewriteRuleSubtreeStream stream_table_ref_aux=new RewriteRuleSubtreeStream(adaptor,"rule table_ref_aux");
        try {
            // PLSQL_DMLParser.g:314:5: ( ( query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux ( query_partition_clause )? ( join_on_part | join_using_part )* -> ^( JOIN_DEF[$join_key.start] ( cross_key )? ( natural_key )? ( inner_key )? ( outer_join_type )? table_ref_aux ( query_partition_clause )* ( join_on_part )* ( join_using_part )* ) )
            // PLSQL_DMLParser.g:314:10: ( query_partition_clause )? ( cross_key | natural_key )? ( inner_key | outer_join_type )? join_key table_ref_aux ( query_partition_clause )? ( join_on_part | join_using_part )*
            {
            // PLSQL_DMLParser.g:314:10: ( query_partition_clause )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("natural"))||(input.LT(1).getText().equalsIgnoreCase("join"))||(input.LT(1).getText().equalsIgnoreCase("inner"))||(input.LT(1).getText().equalsIgnoreCase("left"))||(input.LT(1).getText().equalsIgnoreCase("full"))||(input.LT(1).getText().equalsIgnoreCase("right"))||(input.LT(1).getText().equalsIgnoreCase("partition"))||(input.LT(1).getText().equalsIgnoreCase("cross"))))) {
                int LA50_1 = input.LA(2);

                if ( (LA50_1==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("partition")))) {
                    alt50=1;
                }
            }
            switch (alt50) {
                case 1 :
                    // PLSQL_DMLParser.g:314:10: query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_join_clause2048);
                    query_partition_clause126=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_query_partition_clause.add(query_partition_clause126.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:315:9: ( cross_key | natural_key )?
            int alt51=3;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("natural"))||(input.LT(1).getText().equalsIgnoreCase("join"))||(input.LT(1).getText().equalsIgnoreCase("left"))||(input.LT(1).getText().equalsIgnoreCase("inner"))||(input.LT(1).getText().equalsIgnoreCase("full"))||(input.LT(1).getText().equalsIgnoreCase("right"))||(input.LT(1).getText().equalsIgnoreCase("cross"))))) {
                int LA51_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("cross"))) ) {
                    alt51=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("natural"))) ) {
                    alt51=2;
                }
            }
            switch (alt51) {
                case 1 :
                    // PLSQL_DMLParser.g:315:10: cross_key
                    {
                    pushFollow(FOLLOW_cross_key_in_join_clause2060);
                    cross_key127=gPLSQLParser.cross_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cross_key.add(cross_key127.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:315:20: natural_key
                    {
                    pushFollow(FOLLOW_natural_key_in_join_clause2062);
                    natural_key128=gPLSQLParser.natural_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_natural_key.add(natural_key128.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:315:34: ( inner_key | outer_join_type )?
            int alt52=3;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("join"))||(input.LT(1).getText().equalsIgnoreCase("inner"))||(input.LT(1).getText().equalsIgnoreCase("left"))||(input.LT(1).getText().equalsIgnoreCase("full"))||(input.LT(1).getText().equalsIgnoreCase("right"))))) {
                int LA52_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("inner"))) ) {
                    alt52=1;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("left"))||(input.LT(1).getText().equalsIgnoreCase("full"))||(input.LT(1).getText().equalsIgnoreCase("right")))) ) {
                    alt52=2;
                }
            }
            switch (alt52) {
                case 1 :
                    // PLSQL_DMLParser.g:315:35: inner_key
                    {
                    pushFollow(FOLLOW_inner_key_in_join_clause2067);
                    inner_key129=gPLSQLParser.inner_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inner_key.add(inner_key129.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:315:45: outer_join_type
                    {
                    pushFollow(FOLLOW_outer_join_type_in_join_clause2069);
                    outer_join_type130=outer_join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outer_join_type.add(outer_join_type130.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_join_key_in_join_clause2073);
            join_key131=gPLSQLParser.join_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_join_key.add(join_key131.getTree());

            pushFollow(FOLLOW_table_ref_aux_in_join_clause2083);
            table_ref_aux132=table_ref_aux();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_ref_aux.add(table_ref_aux132.getTree());

            // PLSQL_DMLParser.g:317:9: ( query_partition_clause )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==REGULAR_ID) ) {
                int LA53_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("partition"))) ) {
                    alt53=1;
                }
            }
            switch (alt53) {
                case 1 :
                    // PLSQL_DMLParser.g:317:9: query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_join_clause2093);
                    query_partition_clause133=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_query_partition_clause.add(query_partition_clause133.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:318:5: ( join_on_part | join_using_part )*
            loop54:
            do {
                int alt54=3;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==PLSQL_NON_RESERVED_USING) ) {
                    alt54=2;
                }
                else if ( (LA54_0==SQL92_RESERVED_ON) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // PLSQL_DMLParser.g:318:10: join_on_part
            	    {
            	    pushFollow(FOLLOW_join_on_part_in_join_clause2105);
            	    join_on_part134=join_on_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_join_on_part.add(join_on_part134.getTree());

            	    }
            	    break;
            	case 2 :
            	    // PLSQL_DMLParser.g:319:10: join_using_part
            	    {
            	    pushFollow(FOLLOW_join_using_part_in_join_clause2116);
            	    join_using_part135=join_using_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_join_using_part.add(join_using_part135.getTree());

            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);


            // AST REWRITE
            // elements: query_partition_clause, outer_join_type, join_using_part, cross_key, table_ref_aux, natural_key, join_on_part, inner_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 321:9: -> ^( JOIN_DEF[$join_key.start] ( cross_key )? ( natural_key )? ( inner_key )? ( outer_join_type )? table_ref_aux ( query_partition_clause )* ( join_on_part )* ( join_using_part )* )
            {
                // PLSQL_DMLParser.g:321:12: ^( JOIN_DEF[$join_key.start] ( cross_key )? ( natural_key )? ( inner_key )? ( outer_join_type )? table_ref_aux ( query_partition_clause )* ( join_on_part )* ( join_using_part )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(JOIN_DEF, (join_key131!=null?((Token)join_key131.start):null))
                , root_1);

                // PLSQL_DMLParser.g:321:40: ( cross_key )?
                if ( stream_cross_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_cross_key.nextTree());

                }
                stream_cross_key.reset();

                // PLSQL_DMLParser.g:321:51: ( natural_key )?
                if ( stream_natural_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_natural_key.nextTree());

                }
                stream_natural_key.reset();

                // PLSQL_DMLParser.g:321:64: ( inner_key )?
                if ( stream_inner_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_inner_key.nextTree());

                }
                stream_inner_key.reset();

                // PLSQL_DMLParser.g:321:75: ( outer_join_type )?
                if ( stream_outer_join_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_outer_join_type.nextTree());

                }
                stream_outer_join_type.reset();

                adaptor.addChild(root_1, stream_table_ref_aux.nextTree());

                // PLSQL_DMLParser.g:321:106: ( query_partition_clause )*
                while ( stream_query_partition_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_query_partition_clause.nextTree());

                }
                stream_query_partition_clause.reset();

                // PLSQL_DMLParser.g:321:130: ( join_on_part )*
                while ( stream_join_on_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_join_on_part.nextTree());

                }
                stream_join_on_part.reset();

                // PLSQL_DMLParser.g:321:144: ( join_using_part )*
                while ( stream_join_using_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_join_using_part.nextTree());

                }
                stream_join_using_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_clause"


    public static class join_on_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_on_part"
    // PLSQL_DMLParser.g:324:1: join_on_part : on_key condition -> ^( on_key ^( LOGIC_EXPR condition ) ) ;
    public final join_on_part_return join_on_part() throws RecognitionException {
        join_on_part_return retval = new join_on_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.on_key_return on_key136 =null;

        condition_return condition137 =null;


        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_on_key=new RewriteRuleSubtreeStream(adaptor,"rule on_key");
        try {
            // PLSQL_DMLParser.g:325:5: ( on_key condition -> ^( on_key ^( LOGIC_EXPR condition ) ) )
            // PLSQL_DMLParser.g:325:10: on_key condition
            {
            pushFollow(FOLLOW_on_key_in_join_on_part2181);
            on_key136=gPLSQLParser.on_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_on_key.add(on_key136.getTree());

            pushFollow(FOLLOW_condition_in_join_on_part2183);
            condition137=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition137.getTree());

            // AST REWRITE
            // elements: on_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:9: -> ^( on_key ^( LOGIC_EXPR condition ) )
            {
                // PLSQL_DMLParser.g:326:12: ^( on_key ^( LOGIC_EXPR condition ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_on_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:326:21: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_on_part"


    public static class join_using_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "join_using_part"
    // PLSQL_DMLParser.g:329:1: join_using_part : using_key ^ LEFT_PAREN ! column_name ( COMMA ! column_name )* RIGHT_PAREN !;
    public final join_using_part_return join_using_part() throws RecognitionException {
        join_using_part_return retval = new join_using_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN139=null;
        Token COMMA141=null;
        Token RIGHT_PAREN143=null;
        PLSQLParser_PLSQLKeys.using_key_return using_key138 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name140 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name142 =null;


        Object LEFT_PAREN139_tree=null;
        Object COMMA141_tree=null;
        Object RIGHT_PAREN143_tree=null;

        try {
            // PLSQL_DMLParser.g:330:5: ( using_key ^ LEFT_PAREN ! column_name ( COMMA ! column_name )* RIGHT_PAREN !)
            // PLSQL_DMLParser.g:330:10: using_key ^ LEFT_PAREN ! column_name ( COMMA ! column_name )* RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_using_key_in_join_using_part2224);
            using_key138=gPLSQLParser.using_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(using_key138.getTree(), root_0);

            LEFT_PAREN139=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_join_using_part2227); if (state.failed) return retval;

            pushFollow(FOLLOW_column_name_in_join_using_part2230);
            column_name140=gPLSQLParser.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name140.getTree());

            // PLSQL_DMLParser.g:330:45: ( COMMA ! column_name )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==COMMA) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // PLSQL_DMLParser.g:330:46: COMMA ! column_name
            	    {
            	    COMMA141=(Token)match(input,COMMA,FOLLOW_COMMA_in_join_using_part2233); if (state.failed) return retval;

            	    pushFollow(FOLLOW_column_name_in_join_using_part2236);
            	    column_name142=gPLSQLParser.column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name142.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            RIGHT_PAREN143=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_join_using_part2240); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "join_using_part"


    public static class outer_join_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "outer_join_type"
    // PLSQL_DMLParser.g:333:1: outer_join_type : ( full_key | left_key | right_key ) ( outer_key !)? ;
    public final outer_join_type_return outer_join_type() throws RecognitionException {
        outer_join_type_return retval = new outer_join_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.full_key_return full_key144 =null;

        PLSQLParser_PLSQLKeys.left_key_return left_key145 =null;

        PLSQLParser_PLSQLKeys.right_key_return right_key146 =null;

        PLSQLParser_PLSQLKeys.outer_key_return outer_key147 =null;



        try {
            // PLSQL_DMLParser.g:334:5: ( ( full_key | left_key | right_key ) ( outer_key !)? )
            // PLSQL_DMLParser.g:335:5: ( full_key | left_key | right_key ) ( outer_key !)?
            {
            root_0 = (Object)adaptor.nil();


            // PLSQL_DMLParser.g:335:5: ( full_key | left_key | right_key )
            int alt56=3;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("left"))||(input.LT(1).getText().equalsIgnoreCase("full"))||(input.LT(1).getText().equalsIgnoreCase("right"))))) {
                int LA56_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("full"))) ) {
                    alt56=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("left"))) ) {
                    alt56=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("right"))) ) {
                    alt56=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 56, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
                case 1 :
                    // PLSQL_DMLParser.g:335:10: full_key
                    {
                    pushFollow(FOLLOW_full_key_in_outer_join_type2271);
                    full_key144=gPLSQLParser.full_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, full_key144.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:336:10: left_key
                    {
                    pushFollow(FOLLOW_left_key_in_outer_join_type2282);
                    left_key145=gPLSQLParser.left_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, left_key145.getTree());

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:337:10: right_key
                    {
                    pushFollow(FOLLOW_right_key_in_outer_join_type2293);
                    right_key146=gPLSQLParser.right_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, right_key146.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:339:18: ( outer_key !)?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("join"))||(input.LT(1).getText().equalsIgnoreCase("outer"))))) {
                int LA57_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("outer"))) ) {
                    alt57=1;
                }
            }
            switch (alt57) {
                case 1 :
                    // PLSQL_DMLParser.g:339:18: outer_key !
                    {
                    pushFollow(FOLLOW_outer_key_in_outer_join_type2309);
                    outer_key147=gPLSQLParser.outer_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "outer_join_type"


    public static class query_partition_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "query_partition_clause"
    // PLSQL_DMLParser.g:342:1: query_partition_clause : partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* ) -> ^( partition_key ( expression_list )? ( EXPR expression )* ) ;
    public final query_partition_clause_return query_partition_clause() throws RecognitionException {
        query_partition_clause_return retval = new query_partition_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN150=null;
        Token RIGHT_PAREN152=null;
        Token COMMA155=null;
        PLSQLParser_PLSQLKeys.partition_key_return partition_key148 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key149 =null;

        subquery_return subquery151 =null;

        expression_list_return expression_list153 =null;

        expression_return expression154 =null;

        expression_return expression156 =null;


        Object LEFT_PAREN150_tree=null;
        Object RIGHT_PAREN152_tree=null;
        Object COMMA155_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
        RewriteRuleSubtreeStream stream_partition_key=new RewriteRuleSubtreeStream(adaptor,"rule partition_key");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            // PLSQL_DMLParser.g:343:5: ( partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* ) -> ^( partition_key ( expression_list )? ( EXPR expression )* ) )
            // PLSQL_DMLParser.g:343:10: partition_key by_key ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )
            {
            pushFollow(FOLLOW_partition_key_in_query_partition_clause2331);
            partition_key148=gPLSQLParser.partition_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_partition_key.add(partition_key148.getTree());

            pushFollow(FOLLOW_by_key_in_query_partition_clause2333);
            by_key149=gPLSQLParser.by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_by_key.add(by_key149.getTree());

            // PLSQL_DMLParser.g:344:5: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | ( LEFT_PAREN )=> expression_list | expression ( COMMA expression )* )
            int alt59=3;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==LEFT_PAREN) ) {
                int LA59_1 = input.LA(2);

                if ( (synpred7_PLSQL_DMLParser()) ) {
                    alt59=1;
                }
                else if ( (synpred8_PLSQL_DMLParser()) ) {
                    alt59=2;
                }
                else if ( (true) ) {
                    alt59=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 59, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA59_0==APPROXIMATE_NUM_LIT||LA59_0==BINDVAR||(LA59_0 >= CHAR_STRING && LA59_0 <= COLON)||LA59_0==DELIMITED_ID||LA59_0==EXACT_NUM_LIT||LA59_0==INTRODUCER||(LA59_0 >= MINUS_SIGN && LA59_0 <= NATIONAL_CHAR_STRING_LIT)||LA59_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA59_0==PLUS_SIGN||LA59_0==REGULAR_ID||LA59_0==SQL92_RESERVED_ALL||LA59_0==SQL92_RESERVED_ANY||LA59_0==SQL92_RESERVED_CASE||(LA59_0 >= SQL92_RESERVED_CURSOR && LA59_0 <= SQL92_RESERVED_DATE)||LA59_0==SQL92_RESERVED_DEFAULT||LA59_0==SQL92_RESERVED_DISTINCT||(LA59_0 >= SQL92_RESERVED_EXISTS && LA59_0 <= SQL92_RESERVED_FALSE)||(LA59_0 >= SQL92_RESERVED_NOT && LA59_0 <= SQL92_RESERVED_NULL)||LA59_0==SQL92_RESERVED_PRIOR||LA59_0==SQL92_RESERVED_TRUE||LA59_0==UNSIGNED_INTEGER) ) {
                alt59=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }
            switch (alt59) {
                case 1 :
                    // PLSQL_DMLParser.g:344:10: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
                    {
                    LEFT_PAREN150=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_query_partition_clause2356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN150);


                    pushFollow(FOLLOW_subquery_in_query_partition_clause2358);
                    subquery151=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery151.getTree());

                    RIGHT_PAREN152=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_query_partition_clause2360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN152);


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:345:10: ( LEFT_PAREN )=> expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_query_partition_clause2376);
                    expression_list153=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_list.add(expression_list153.getTree());

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:346:10: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_query_partition_clause2387);
                    expression154=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression154.getTree());

                    // PLSQL_DMLParser.g:346:21: ( COMMA expression )*
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==COMMA) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:346:22: COMMA expression
                    	    {
                    	    COMMA155=(Token)match(input,COMMA,FOLLOW_COMMA_in_query_partition_clause2390); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA155);


                    	    pushFollow(FOLLOW_expression_in_query_partition_clause2392);
                    	    expression156=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression156.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);


                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, expression_list, partition_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:9: -> ^( partition_key ( expression_list )? ( EXPR expression )* )
            {
                // PLSQL_DMLParser.g:348:12: ^( partition_key ( expression_list )? ( EXPR expression )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_partition_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:348:28: ( expression_list )?
                if ( stream_expression_list.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression_list.nextTree());

                }
                stream_expression_list.reset();

                // PLSQL_DMLParser.g:348:45: ( EXPR expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, 
                    (Object)adaptor.create(EXPR, "EXPR")
                    );

                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "query_partition_clause"


    public static class flashback_query_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "flashback_query_clause"
    // PLSQL_DMLParser.g:351:1: flashback_query_clause : ( versions_key between_key ( scn_key | timestamp_key ) expression -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) ) | as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) ) );
    public final flashback_query_clause_return flashback_query_clause() throws RecognitionException {
        flashback_query_clause_return retval = new flashback_query_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.versions_key_return versions_key157 =null;

        PLSQLParser_PLSQLKeys.between_key_return between_key158 =null;

        PLSQLParser_PLSQLKeys.scn_key_return scn_key159 =null;

        PLSQLParser_PLSQLKeys.timestamp_key_return timestamp_key160 =null;

        expression_return expression161 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key162 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key163 =null;

        PLSQLParser_PLSQLKeys.scn_key_return scn_key164 =null;

        PLSQLParser_PLSQLKeys.timestamp_key_return timestamp_key165 =null;

        PLSQLParser_PLSQLKeys.snapshot_key_return snapshot_key166 =null;

        expression_return expression167 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_snapshot_key=new RewriteRuleSubtreeStream(adaptor,"rule snapshot_key");
        RewriteRuleSubtreeStream stream_scn_key=new RewriteRuleSubtreeStream(adaptor,"rule scn_key");
        RewriteRuleSubtreeStream stream_versions_key=new RewriteRuleSubtreeStream(adaptor,"rule versions_key");
        RewriteRuleSubtreeStream stream_between_key=new RewriteRuleSubtreeStream(adaptor,"rule between_key");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_timestamp_key=new RewriteRuleSubtreeStream(adaptor,"rule timestamp_key");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        try {
            // PLSQL_DMLParser.g:352:5: ( versions_key between_key ( scn_key | timestamp_key ) expression -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) ) | as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) ) )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("versions")))) {
                alt62=1;
            }
            else if ( (LA62_0==SQL92_RESERVED_AS) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // PLSQL_DMLParser.g:352:10: versions_key between_key ( scn_key | timestamp_key ) expression
                    {
                    pushFollow(FOLLOW_versions_key_in_flashback_query_clause2444);
                    versions_key157=gPLSQLParser.versions_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_versions_key.add(versions_key157.getTree());

                    pushFollow(FOLLOW_between_key_in_flashback_query_clause2446);
                    between_key158=gPLSQLParser.between_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_between_key.add(between_key158.getTree());

                    // PLSQL_DMLParser.g:352:35: ( scn_key | timestamp_key )
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==REGULAR_ID) ) {
                        int LA60_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("scn"))) ) {
                            alt60=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("timestamp"))) ) {
                            alt60=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 60, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 60, 0, input);

                        throw nvae;

                    }
                    switch (alt60) {
                        case 1 :
                            // PLSQL_DMLParser.g:352:36: scn_key
                            {
                            pushFollow(FOLLOW_scn_key_in_flashback_query_clause2449);
                            scn_key159=gPLSQLParser.scn_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_scn_key.add(scn_key159.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:352:44: timestamp_key
                            {
                            pushFollow(FOLLOW_timestamp_key_in_flashback_query_clause2451);
                            timestamp_key160=gPLSQLParser.timestamp_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timestamp_key.add(timestamp_key160.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_flashback_query_clause2454);
                    expression161=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression161.getTree());

                    // AST REWRITE
                    // elements: timestamp_key, versions_key, expression, scn_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 352:70: -> ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) )
                    {
                        // PLSQL_DMLParser.g:352:73: ^( versions_key ( scn_key )? ( timestamp_key )? ^( EXPR expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_versions_key.nextNode(), root_1);

                        // PLSQL_DMLParser.g:352:88: ( scn_key )?
                        if ( stream_scn_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_scn_key.nextTree());

                        }
                        stream_scn_key.reset();

                        // PLSQL_DMLParser.g:352:97: ( timestamp_key )?
                        if ( stream_timestamp_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_timestamp_key.nextTree());

                        }
                        stream_timestamp_key.reset();

                        // PLSQL_DMLParser.g:352:112: ^( EXPR expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:353:10: as_key of_key ( scn_key | timestamp_key | snapshot_key ) expression
                    {
                    pushFollow(FOLLOW_as_key_in_flashback_query_clause2484);
                    as_key162=gPLSQLParser.as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key162.getTree());

                    pushFollow(FOLLOW_of_key_in_flashback_query_clause2486);
                    of_key163=gPLSQLParser.of_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_of_key.add(of_key163.getTree());

                    // PLSQL_DMLParser.g:353:24: ( scn_key | timestamp_key | snapshot_key )
                    int alt61=3;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==REGULAR_ID) ) {
                        int LA61_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("scn"))) ) {
                            alt61=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("timestamp"))) ) {
                            alt61=2;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("snapshot"))) ) {
                            alt61=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 61, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 61, 0, input);

                        throw nvae;

                    }
                    switch (alt61) {
                        case 1 :
                            // PLSQL_DMLParser.g:353:25: scn_key
                            {
                            pushFollow(FOLLOW_scn_key_in_flashback_query_clause2489);
                            scn_key164=gPLSQLParser.scn_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_scn_key.add(scn_key164.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:353:33: timestamp_key
                            {
                            pushFollow(FOLLOW_timestamp_key_in_flashback_query_clause2491);
                            timestamp_key165=gPLSQLParser.timestamp_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timestamp_key.add(timestamp_key165.getTree());

                            }
                            break;
                        case 3 :
                            // PLSQL_DMLParser.g:353:47: snapshot_key
                            {
                            pushFollow(FOLLOW_snapshot_key_in_flashback_query_clause2493);
                            snapshot_key166=gPLSQLParser.snapshot_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_snapshot_key.add(snapshot_key166.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_flashback_query_clause2496);
                    expression167=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression167.getTree());

                    // AST REWRITE
                    // elements: scn_key, expression, timestamp_key, as_key, snapshot_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 353:72: -> ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) )
                    {
                        // PLSQL_DMLParser.g:353:75: ^( as_key ( scn_key )? ( timestamp_key )? ( snapshot_key )? ^( EXPR expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_as_key.nextNode(), root_1);

                        // PLSQL_DMLParser.g:353:84: ( scn_key )?
                        if ( stream_scn_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_scn_key.nextTree());

                        }
                        stream_scn_key.reset();

                        // PLSQL_DMLParser.g:353:93: ( timestamp_key )?
                        if ( stream_timestamp_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_timestamp_key.nextTree());

                        }
                        stream_timestamp_key.reset();

                        // PLSQL_DMLParser.g:353:108: ( snapshot_key )?
                        if ( stream_snapshot_key.hasNext() ) {
                            adaptor.addChild(root_1, stream_snapshot_key.nextTree());

                        }
                        stream_snapshot_key.reset();

                        // PLSQL_DMLParser.g:353:122: ^( EXPR expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "flashback_query_clause"


    public static class pivot_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pivot_clause"
    // PLSQL_DMLParser.g:356:1: pivot_clause : pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN -> ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) ;
    public final pivot_clause_return pivot_clause() throws RecognitionException {
        pivot_clause_return retval = new pivot_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN170=null;
        Token COMMA172=null;
        Token RIGHT_PAREN176=null;
        PLSQLParser_PLSQLKeys.pivot_key_return pivot_key168 =null;

        PLSQLParser_PLSQLKeys.xml_key_return xml_key169 =null;

        pivot_element_return pivot_element171 =null;

        pivot_element_return pivot_element173 =null;

        pivot_for_clause_return pivot_for_clause174 =null;

        pivot_in_clause_return pivot_in_clause175 =null;


        Object LEFT_PAREN170_tree=null;
        Object COMMA172_tree=null;
        Object RIGHT_PAREN176_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_pivot_in_clause=new RewriteRuleSubtreeStream(adaptor,"rule pivot_in_clause");
        RewriteRuleSubtreeStream stream_pivot_element=new RewriteRuleSubtreeStream(adaptor,"rule pivot_element");
        RewriteRuleSubtreeStream stream_pivot_key=new RewriteRuleSubtreeStream(adaptor,"rule pivot_key");
        RewriteRuleSubtreeStream stream_pivot_for_clause=new RewriteRuleSubtreeStream(adaptor,"rule pivot_for_clause");
        RewriteRuleSubtreeStream stream_xml_key=new RewriteRuleSubtreeStream(adaptor,"rule xml_key");
        try {
            // PLSQL_DMLParser.g:357:5: ( pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN -> ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) )
            // PLSQL_DMLParser.g:357:10: pivot_key ( xml_key )? LEFT_PAREN pivot_element ( COMMA pivot_element )* pivot_for_clause pivot_in_clause RIGHT_PAREN
            {
            pushFollow(FOLLOW_pivot_key_in_pivot_clause2537);
            pivot_key168=gPLSQLParser.pivot_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_key.add(pivot_key168.getTree());

            // PLSQL_DMLParser.g:357:20: ( xml_key )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("xml")))) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // PLSQL_DMLParser.g:357:20: xml_key
                    {
                    pushFollow(FOLLOW_xml_key_in_pivot_clause2539);
                    xml_key169=gPLSQLParser.xml_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_xml_key.add(xml_key169.getTree());

                    }
                    break;

            }


            LEFT_PAREN170=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pivot_clause2550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN170);


            pushFollow(FOLLOW_pivot_element_in_pivot_clause2564);
            pivot_element171=pivot_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_element.add(pivot_element171.getTree());

            // PLSQL_DMLParser.g:359:27: ( COMMA pivot_element )*
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==COMMA) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // PLSQL_DMLParser.g:359:28: COMMA pivot_element
            	    {
            	    COMMA172=(Token)match(input,COMMA,FOLLOW_COMMA_in_pivot_clause2567); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA172);


            	    pushFollow(FOLLOW_pivot_element_in_pivot_clause2569);
            	    pivot_element173=pivot_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pivot_element.add(pivot_element173.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            pushFollow(FOLLOW_pivot_for_clause_in_pivot_clause2585);
            pivot_for_clause174=pivot_for_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_for_clause.add(pivot_for_clause174.getTree());

            pushFollow(FOLLOW_pivot_in_clause_in_pivot_clause2599);
            pivot_in_clause175=pivot_in_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_in_clause.add(pivot_in_clause175.getTree());

            RIGHT_PAREN176=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pivot_clause2611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN176);


            // AST REWRITE
            // elements: pivot_for_clause, pivot_in_clause, xml_key, pivot_key, pivot_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:9: -> ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
            {
                // PLSQL_DMLParser.g:363:12: ^( pivot_key ( xml_key )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_pivot_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:363:24: ( xml_key )?
                if ( stream_xml_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_xml_key.nextTree());

                }
                stream_xml_key.reset();

                if ( !(stream_pivot_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pivot_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_pivot_element.nextTree());

                }
                stream_pivot_element.reset();

                adaptor.addChild(root_1, stream_pivot_for_clause.nextTree());

                adaptor.addChild(root_1, stream_pivot_in_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pivot_clause"


    public static class pivot_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pivot_element"
    // PLSQL_DMLParser.g:366:1: pivot_element : aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )? -> ^( PIVOT_ELEMENT ( column_alias )? ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) ) ;
    public final pivot_element_return pivot_element() throws RecognitionException {
        pivot_element_return retval = new pivot_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN178=null;
        Token RIGHT_PAREN180=null;
        PLSQLParser_PLSQLCommons.aggregate_function_name_return aggregate_function_name177 =null;

        expression_return expression179 =null;

        PLSQLParser_PLSQLCommons.column_alias_return column_alias181 =null;


        Object LEFT_PAREN178_tree=null;
        Object RIGHT_PAREN180_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_column_alias=new RewriteRuleSubtreeStream(adaptor,"rule column_alias");
        RewriteRuleSubtreeStream stream_aggregate_function_name=new RewriteRuleSubtreeStream(adaptor,"rule aggregate_function_name");
        try {
            // PLSQL_DMLParser.g:367:5: ( aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )? -> ^( PIVOT_ELEMENT ( column_alias )? ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) ) )
            // PLSQL_DMLParser.g:367:10: aggregate_function_name LEFT_PAREN expression RIGHT_PAREN ( column_alias )?
            {
            pushFollow(FOLLOW_aggregate_function_name_in_pivot_element2655);
            aggregate_function_name177=gPLSQLParser.aggregate_function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_aggregate_function_name.add(aggregate_function_name177.getTree());

            LEFT_PAREN178=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pivot_element2657); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN178);


            pushFollow(FOLLOW_expression_in_pivot_element2659);
            expression179=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression179.getTree());

            RIGHT_PAREN180=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pivot_element2661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN180);


            // PLSQL_DMLParser.g:367:68: ( column_alias )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0 >= CHAR_STRING && LA65_0 <= CHAR_STRING_PERL)||LA65_0==DELIMITED_ID||LA65_0==INTRODUCER||LA65_0==NATIONAL_CHAR_STRING_LIT||LA65_0==REGULAR_ID||LA65_0==SQL92_RESERVED_AS) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // PLSQL_DMLParser.g:367:68: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_pivot_element2663);
                    column_alias181=gPLSQLParser.column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_alias.add(column_alias181.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: column_alias, expression, aggregate_function_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:9: -> ^( PIVOT_ELEMENT ( column_alias )? ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) )
            {
                // PLSQL_DMLParser.g:368:12: ^( PIVOT_ELEMENT ( column_alias )? ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PIVOT_ELEMENT, "PIVOT_ELEMENT")
                , root_1);

                // PLSQL_DMLParser.g:368:28: ( column_alias )?
                if ( stream_column_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_alias.nextTree());

                }
                stream_column_alias.reset();

                // PLSQL_DMLParser.g:368:42: ^( EXPR ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                // PLSQL_DMLParser.g:368:49: ^( ROUTINE_CALL aggregate_function_name ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) ) )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ROUTINE_CALL, "ROUTINE_CALL")
                , root_3);

                adaptor.addChild(root_3, stream_aggregate_function_name.nextTree());

                // PLSQL_DMLParser.g:368:88: ^( ARGUMENTS ^( ARGUMENT ^( EXPR expression ) ) )
                {
                Object root_4 = (Object)adaptor.nil();
                root_4 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ARGUMENTS, "ARGUMENTS")
                , root_4);

                // PLSQL_DMLParser.g:368:100: ^( ARGUMENT ^( EXPR expression ) )
                {
                Object root_5 = (Object)adaptor.nil();
                root_5 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ARGUMENT, "ARGUMENT")
                , root_5);

                // PLSQL_DMLParser.g:368:111: ^( EXPR expression )
                {
                Object root_6 = (Object)adaptor.nil();
                root_6 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_6);

                adaptor.addChild(root_6, stream_expression.nextTree());

                adaptor.addChild(root_5, root_6);
                }

                adaptor.addChild(root_4, root_5);
                }

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pivot_element"


    public static class pivot_for_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pivot_for_clause"
    // PLSQL_DMLParser.g:371:1: pivot_for_clause : for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) -> ^( for_key ( column_name )+ ) ;
    public final pivot_for_clause_return pivot_for_clause() throws RecognitionException {
        pivot_for_clause_return retval = new pivot_for_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN184=null;
        Token COMMA186=null;
        Token RIGHT_PAREN188=null;
        PLSQLParser_PLSQLKeys.for_key_return for_key182 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name183 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name185 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name187 =null;


        Object LEFT_PAREN184_tree=null;
        Object COMMA186_tree=null;
        Object RIGHT_PAREN188_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            // PLSQL_DMLParser.g:372:5: ( for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) -> ^( for_key ( column_name )+ ) )
            // PLSQL_DMLParser.g:372:10: for_key ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            {
            pushFollow(FOLLOW_for_key_in_pivot_for_clause2725);
            for_key182=gPLSQLParser.for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key182.getTree());

            // PLSQL_DMLParser.g:373:5: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==DELIMITED_ID||LA67_0==INTRODUCER||LA67_0==REGULAR_ID) ) {
                alt67=1;
            }
            else if ( (LA67_0==LEFT_PAREN) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }
            switch (alt67) {
                case 1 :
                    // PLSQL_DMLParser.g:373:10: column_name
                    {
                    pushFollow(FOLLOW_column_name_in_pivot_for_clause2737);
                    column_name183=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name183.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:374:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN184=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pivot_for_clause2748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN184);


                    pushFollow(FOLLOW_column_name_in_pivot_for_clause2750);
                    column_name185=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name185.getTree());

                    // PLSQL_DMLParser.g:374:33: ( COMMA column_name )*
                    loop66:
                    do {
                        int alt66=2;
                        int LA66_0 = input.LA(1);

                        if ( (LA66_0==COMMA) ) {
                            alt66=1;
                        }


                        switch (alt66) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:374:34: COMMA column_name
                    	    {
                    	    COMMA186=(Token)match(input,COMMA,FOLLOW_COMMA_in_pivot_for_clause2753); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA186);


                    	    pushFollow(FOLLOW_column_name_in_pivot_for_clause2755);
                    	    column_name187=gPLSQLParser.column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name187.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop66;
                        }
                    } while (true);


                    RIGHT_PAREN188=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pivot_for_clause2759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN188);


                    }
                    break;

            }


            // AST REWRITE
            // elements: for_key, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 376:9: -> ^( for_key ( column_name )+ )
            {
                // PLSQL_DMLParser.g:376:12: ^( for_key ( column_name )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_for_key.nextNode(), root_1);

                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pivot_for_clause"


    public static class pivot_in_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pivot_in_clause"
    // PLSQL_DMLParser.g:379:1: pivot_in_clause : in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN -> {mode == 1}? ^( in_key subquery ) -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) ) -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ;
    public final pivot_in_clause_return pivot_in_clause() throws RecognitionException {
        pivot_in_clause_return retval = new pivot_in_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN190=null;
        Token COMMA193=null;
        Token COMMA196=null;
        Token RIGHT_PAREN198=null;
        PLSQLParser_PLSQLKeys.in_key_return in_key189 =null;

        subquery_return subquery191 =null;

        PLSQLParser_PLSQLKeys.any_key_return any_key192 =null;

        PLSQLParser_PLSQLKeys.any_key_return any_key194 =null;

        pivot_in_clause_element_return pivot_in_clause_element195 =null;

        pivot_in_clause_element_return pivot_in_clause_element197 =null;


        Object LEFT_PAREN190_tree=null;
        Object COMMA193_tree=null;
        Object COMMA196_tree=null;
        Object RIGHT_PAREN198_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_any_key=new RewriteRuleSubtreeStream(adaptor,"rule any_key");
        RewriteRuleSubtreeStream stream_pivot_in_clause_element=new RewriteRuleSubtreeStream(adaptor,"rule pivot_in_clause_element");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
            int mode = 0;    
        try {
            // PLSQL_DMLParser.g:381:5: ( in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN -> {mode == 1}? ^( in_key subquery ) -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) ) -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
            // PLSQL_DMLParser.g:381:10: in_key LEFT_PAREN ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* ) RIGHT_PAREN
            {
            pushFollow(FOLLOW_in_key_in_pivot_in_clause2810);
            in_key189=gPLSQLParser.in_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_in_key.add(in_key189.getTree());

            LEFT_PAREN190=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pivot_in_clause2820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN190);


            // PLSQL_DMLParser.g:383:13: ( ( select_key )=> subquery | ( any_key )=> any_key ( COMMA any_key )* | pivot_in_clause_element ( COMMA pivot_in_clause_element )* )
            int alt70=3;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==SQL92_RESERVED_SELECT) && (synpred9_PLSQL_DMLParser())) {
                alt70=1;
            }
            else if ( (LA70_0==LEFT_PAREN) ) {
                int LA70_2 = input.LA(2);

                if ( (synpred9_PLSQL_DMLParser()) ) {
                    alt70=1;
                }
                else if ( (true) ) {
                    alt70=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 70, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA70_0==SQL92_RESERVED_ANY) ) {
                int LA70_3 = input.LA(2);

                if ( (synpred10_PLSQL_DMLParser()) ) {
                    alt70=2;
                }
                else if ( (true) ) {
                    alt70=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 70, 3, input);

                    throw nvae;

                }
            }
            else if ( (LA70_0==APPROXIMATE_NUM_LIT||LA70_0==BINDVAR||(LA70_0 >= CHAR_STRING && LA70_0 <= COLON)||LA70_0==DELIMITED_ID||LA70_0==EXACT_NUM_LIT||LA70_0==INTRODUCER||(LA70_0 >= MINUS_SIGN && LA70_0 <= NATIONAL_CHAR_STRING_LIT)||LA70_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA70_0==PLUS_SIGN||LA70_0==REGULAR_ID||LA70_0==SQL92_RESERVED_ALL||LA70_0==SQL92_RESERVED_CASE||(LA70_0 >= SQL92_RESERVED_CURSOR && LA70_0 <= SQL92_RESERVED_DATE)||LA70_0==SQL92_RESERVED_DEFAULT||LA70_0==SQL92_RESERVED_DISTINCT||(LA70_0 >= SQL92_RESERVED_EXISTS && LA70_0 <= SQL92_RESERVED_FALSE)||(LA70_0 >= SQL92_RESERVED_NOT && LA70_0 <= SQL92_RESERVED_NULL)||LA70_0==SQL92_RESERVED_PRIOR||LA70_0==SQL92_RESERVED_TRUE||LA70_0==UNSIGNED_INTEGER) ) {
                alt70=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // PLSQL_DMLParser.g:383:18: ( select_key )=> subquery
                    {
                    pushFollow(FOLLOW_subquery_in_pivot_in_clause2844);
                    subquery191=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery191.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:384:18: ( any_key )=> any_key ( COMMA any_key )*
                    {
                    pushFollow(FOLLOW_any_key_in_pivot_in_clause2870);
                    any_key192=gPLSQLParser.any_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_any_key.add(any_key192.getTree());

                    // PLSQL_DMLParser.g:384:38: ( COMMA any_key )*
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==COMMA) ) {
                            alt68=1;
                        }


                        switch (alt68) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:384:39: COMMA any_key
                    	    {
                    	    COMMA193=(Token)match(input,COMMA,FOLLOW_COMMA_in_pivot_in_clause2873); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA193);


                    	    pushFollow(FOLLOW_any_key_in_pivot_in_clause2875);
                    	    any_key194=gPLSQLParser.any_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_any_key.add(any_key194.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:385:18: pivot_in_clause_element ( COMMA pivot_in_clause_element )*
                    {
                    pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause2898);
                    pivot_in_clause_element195=pivot_in_clause_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_pivot_in_clause_element.add(pivot_in_clause_element195.getTree());

                    // PLSQL_DMLParser.g:385:42: ( COMMA pivot_in_clause_element )*
                    loop69:
                    do {
                        int alt69=2;
                        int LA69_0 = input.LA(1);

                        if ( (LA69_0==COMMA) ) {
                            alt69=1;
                        }


                        switch (alt69) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:385:43: COMMA pivot_in_clause_element
                    	    {
                    	    COMMA196=(Token)match(input,COMMA,FOLLOW_COMMA_in_pivot_in_clause2901); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA196);


                    	    pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause2903);
                    	    pivot_in_clause_element197=pivot_in_clause_element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pivot_in_clause_element.add(pivot_in_clause_element197.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop69;
                        }
                    } while (true);


                    }
                    break;

            }


            RIGHT_PAREN198=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pivot_in_clause2929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN198);


            // AST REWRITE
            // elements: in_key, subquery, pivot_in_clause_element, any_key, in_key, in_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:9: -> {mode == 1}? ^( in_key subquery )
            if (mode == 1) {
                // PLSQL_DMLParser.g:388:24: ^( in_key subquery )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_subquery.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 389:9: -> {mode == 2}? ^( in_key ^( ANY_MODE ( any_key )+ ) )
            if (mode == 2) {
                // PLSQL_DMLParser.g:389:24: ^( in_key ^( ANY_MODE ( any_key )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:389:33: ^( ANY_MODE ( any_key )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ANY_MODE, "ANY_MODE")
                , root_2);

                if ( !(stream_any_key.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_any_key.hasNext() ) {
                    adaptor.addChild(root_2, stream_any_key.nextTree());

                }
                stream_any_key.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 390:9: -> ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
            {
                // PLSQL_DMLParser.g:390:12: ^( in_key ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:390:21: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELEMENTS_MODE, "ELEMENTS_MODE")
                , root_2);

                if ( !(stream_pivot_in_clause_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_pivot_in_clause_element.hasNext() ) {
                    adaptor.addChild(root_2, stream_pivot_in_clause_element.nextTree());

                }
                stream_pivot_in_clause_element.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pivot_in_clause"


    public static class pivot_in_clause_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pivot_in_clause_element"
    // PLSQL_DMLParser.g:393:1: pivot_in_clause_element : pivot_in_clause_elements ( column_alias )? -> ^( PIVOT_IN_ELEMENT ( column_alias )? pivot_in_clause_elements ) ;
    public final pivot_in_clause_element_return pivot_in_clause_element() throws RecognitionException {
        pivot_in_clause_element_return retval = new pivot_in_clause_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        pivot_in_clause_elements_return pivot_in_clause_elements199 =null;

        PLSQLParser_PLSQLCommons.column_alias_return column_alias200 =null;


        RewriteRuleSubtreeStream stream_column_alias=new RewriteRuleSubtreeStream(adaptor,"rule column_alias");
        RewriteRuleSubtreeStream stream_pivot_in_clause_elements=new RewriteRuleSubtreeStream(adaptor,"rule pivot_in_clause_elements");
        try {
            // PLSQL_DMLParser.g:394:5: ( pivot_in_clause_elements ( column_alias )? -> ^( PIVOT_IN_ELEMENT ( column_alias )? pivot_in_clause_elements ) )
            // PLSQL_DMLParser.g:394:10: pivot_in_clause_elements ( column_alias )?
            {
            pushFollow(FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3009);
            pivot_in_clause_elements199=pivot_in_clause_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_in_clause_elements.add(pivot_in_clause_elements199.getTree());

            // PLSQL_DMLParser.g:394:35: ( column_alias )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( ((LA71_0 >= CHAR_STRING && LA71_0 <= CHAR_STRING_PERL)||LA71_0==DELIMITED_ID||LA71_0==INTRODUCER||LA71_0==NATIONAL_CHAR_STRING_LIT||LA71_0==REGULAR_ID||LA71_0==SQL92_RESERVED_AS) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // PLSQL_DMLParser.g:394:35: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_pivot_in_clause_element3011);
                    column_alias200=gPLSQLParser.column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_alias.add(column_alias200.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: column_alias, pivot_in_clause_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 395:9: -> ^( PIVOT_IN_ELEMENT ( column_alias )? pivot_in_clause_elements )
            {
                // PLSQL_DMLParser.g:395:12: ^( PIVOT_IN_ELEMENT ( column_alias )? pivot_in_clause_elements )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PIVOT_IN_ELEMENT, "PIVOT_IN_ELEMENT")
                , root_1);

                // PLSQL_DMLParser.g:395:31: ( column_alias )?
                if ( stream_column_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_alias.nextTree());

                }
                stream_column_alias.reset();

                adaptor.addChild(root_1, stream_pivot_in_clause_elements.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pivot_in_clause_element"


    public static class pivot_in_clause_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "pivot_in_clause_elements"
    // PLSQL_DMLParser.g:398:1: pivot_in_clause_elements : ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list );
    public final pivot_in_clause_elements_return pivot_in_clause_elements() throws RecognitionException {
        pivot_in_clause_elements_return retval = new pivot_in_clause_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        expression_return expression201 =null;

        expression_list_return expression_list202 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // PLSQL_DMLParser.g:399:5: ( expression -> ^( EXPR expression ) | ( LEFT_PAREN )=> expression_list )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==APPROXIMATE_NUM_LIT||LA72_0==BINDVAR||(LA72_0 >= CHAR_STRING && LA72_0 <= COLON)||LA72_0==DELIMITED_ID||LA72_0==EXACT_NUM_LIT||LA72_0==INTRODUCER||(LA72_0 >= MINUS_SIGN && LA72_0 <= NATIONAL_CHAR_STRING_LIT)||LA72_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA72_0==PLUS_SIGN||LA72_0==REGULAR_ID||LA72_0==SQL92_RESERVED_ALL||LA72_0==SQL92_RESERVED_ANY||LA72_0==SQL92_RESERVED_CASE||(LA72_0 >= SQL92_RESERVED_CURSOR && LA72_0 <= SQL92_RESERVED_DATE)||LA72_0==SQL92_RESERVED_DEFAULT||LA72_0==SQL92_RESERVED_DISTINCT||(LA72_0 >= SQL92_RESERVED_EXISTS && LA72_0 <= SQL92_RESERVED_FALSE)||(LA72_0 >= SQL92_RESERVED_NOT && LA72_0 <= SQL92_RESERVED_NULL)||LA72_0==SQL92_RESERVED_PRIOR||LA72_0==SQL92_RESERVED_TRUE||LA72_0==UNSIGNED_INTEGER) ) {
                alt72=1;
            }
            else if ( (LA72_0==LEFT_PAREN) ) {
                int LA72_24 = input.LA(2);

                if ( (true) ) {
                    alt72=1;
                }
                else if ( (synpred11_PLSQL_DMLParser()) ) {
                    alt72=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 72, 24, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;

            }
            switch (alt72) {
                case 1 :
                    // PLSQL_DMLParser.g:399:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_pivot_in_clause_elements3051);
                    expression201=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression201.getTree());

                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 399:21: -> ^( EXPR expression )
                    {
                        // PLSQL_DMLParser.g:399:24: ^( EXPR expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:400:10: ( LEFT_PAREN )=> expression_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_list_in_pivot_in_clause_elements3075);
                    expression_list202=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list202.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "pivot_in_clause_elements"


    public static class unpivot_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unpivot_clause"
    // PLSQL_DMLParser.g:403:1: unpivot_clause : unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause ) ;
    public final unpivot_clause_return unpivot_clause() throws RecognitionException {
        unpivot_clause_return retval = new unpivot_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN207=null;
        Token LEFT_PAREN209=null;
        Token COMMA211=null;
        Token RIGHT_PAREN213=null;
        Token RIGHT_PAREN216=null;
        PLSQLParser_PLSQLKeys.unpivot_key_return unpivot_key203 =null;

        PLSQLParser_PLSQLKeys.include_key_return include_key204 =null;

        PLSQLParser_PLSQLKeys.exclude_key_return exclude_key205 =null;

        PLSQLParser_PLSQLKeys.nulls_key_return nulls_key206 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name208 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name210 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name212 =null;

        pivot_for_clause_return pivot_for_clause214 =null;

        unpivot_in_clause_return unpivot_in_clause215 =null;


        Object LEFT_PAREN207_tree=null;
        Object LEFT_PAREN209_tree=null;
        Object COMMA211_tree=null;
        Object RIGHT_PAREN213_tree=null;
        Object RIGHT_PAREN216_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_nulls_key=new RewriteRuleSubtreeStream(adaptor,"rule nulls_key");
        RewriteRuleSubtreeStream stream_exclude_key=new RewriteRuleSubtreeStream(adaptor,"rule exclude_key");
        RewriteRuleSubtreeStream stream_include_key=new RewriteRuleSubtreeStream(adaptor,"rule include_key");
        RewriteRuleSubtreeStream stream_unpivot_key=new RewriteRuleSubtreeStream(adaptor,"rule unpivot_key");
        RewriteRuleSubtreeStream stream_pivot_for_clause=new RewriteRuleSubtreeStream(adaptor,"rule pivot_for_clause");
        RewriteRuleSubtreeStream stream_unpivot_in_clause=new RewriteRuleSubtreeStream(adaptor,"rule unpivot_in_clause");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            // PLSQL_DMLParser.g:404:5: ( unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause ) )
            // PLSQL_DMLParser.g:404:10: unpivot_key ( ( include_key | exclude_key ) nulls_key )? LEFT_PAREN ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) pivot_for_clause unpivot_in_clause RIGHT_PAREN
            {
            pushFollow(FOLLOW_unpivot_key_in_unpivot_clause3095);
            unpivot_key203=gPLSQLParser.unpivot_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unpivot_key.add(unpivot_key203.getTree());

            // PLSQL_DMLParser.g:405:9: ( ( include_key | exclude_key ) nulls_key )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("exclude"))||(input.LT(1).getText().equalsIgnoreCase("include"))))) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // PLSQL_DMLParser.g:405:10: ( include_key | exclude_key ) nulls_key
                    {
                    // PLSQL_DMLParser.g:405:10: ( include_key | exclude_key )
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("exclude"))||(input.LT(1).getText().equalsIgnoreCase("include"))))) {
                        int LA73_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("include"))) ) {
                            alt73=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("exclude"))) ) {
                            alt73=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 73, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 73, 0, input);

                        throw nvae;

                    }
                    switch (alt73) {
                        case 1 :
                            // PLSQL_DMLParser.g:405:11: include_key
                            {
                            pushFollow(FOLLOW_include_key_in_unpivot_clause3108);
                            include_key204=gPLSQLParser.include_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_include_key.add(include_key204.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:405:23: exclude_key
                            {
                            pushFollow(FOLLOW_exclude_key_in_unpivot_clause3110);
                            exclude_key205=gPLSQLParser.exclude_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_exclude_key.add(exclude_key205.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_nulls_key_in_unpivot_clause3113);
                    nulls_key206=gPLSQLParser.nulls_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nulls_key.add(nulls_key206.getTree());

                    }
                    break;

            }


            LEFT_PAREN207=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unpivot_clause3125); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN207);


            // PLSQL_DMLParser.g:407:13: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==DELIMITED_ID||LA76_0==INTRODUCER||LA76_0==REGULAR_ID) ) {
                alt76=1;
            }
            else if ( (LA76_0==LEFT_PAREN) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }
            switch (alt76) {
                case 1 :
                    // PLSQL_DMLParser.g:407:18: column_name
                    {
                    pushFollow(FOLLOW_column_name_in_unpivot_clause3144);
                    column_name208=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name208.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:408:18: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN209=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unpivot_clause3163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN209);


                    pushFollow(FOLLOW_column_name_in_unpivot_clause3165);
                    column_name210=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name210.getTree());

                    // PLSQL_DMLParser.g:408:41: ( COMMA column_name )*
                    loop75:
                    do {
                        int alt75=2;
                        int LA75_0 = input.LA(1);

                        if ( (LA75_0==COMMA) ) {
                            alt75=1;
                        }


                        switch (alt75) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:408:42: COMMA column_name
                    	    {
                    	    COMMA211=(Token)match(input,COMMA,FOLLOW_COMMA_in_unpivot_clause3168); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA211);


                    	    pushFollow(FOLLOW_column_name_in_unpivot_clause3170);
                    	    column_name212=gPLSQLParser.column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name212.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop75;
                        }
                    } while (true);


                    RIGHT_PAREN213=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unpivot_clause3174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN213);


                    }
                    break;

            }


            pushFollow(FOLLOW_pivot_for_clause_in_unpivot_clause3202);
            pivot_for_clause214=pivot_for_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pivot_for_clause.add(pivot_for_clause214.getTree());

            pushFollow(FOLLOW_unpivot_in_clause_in_unpivot_clause3216);
            unpivot_in_clause215=unpivot_in_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unpivot_in_clause.add(unpivot_in_clause215.getTree());

            RIGHT_PAREN216=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unpivot_clause3226); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN216);


            // AST REWRITE
            // elements: nulls_key, unpivot_key, column_name, include_key, exclude_key, unpivot_in_clause, pivot_for_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:9: -> ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause )
            {
                // PLSQL_DMLParser.g:413:12: ^( unpivot_key ( include_key )? ( exclude_key )? ( nulls_key )? ( column_name )+ pivot_for_clause unpivot_in_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_unpivot_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:413:26: ( include_key )?
                if ( stream_include_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_include_key.nextTree());

                }
                stream_include_key.reset();

                // PLSQL_DMLParser.g:413:39: ( exclude_key )?
                if ( stream_exclude_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_exclude_key.nextTree());

                }
                stream_exclude_key.reset();

                // PLSQL_DMLParser.g:413:52: ( nulls_key )?
                if ( stream_nulls_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_nulls_key.nextTree());

                }
                stream_nulls_key.reset();

                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_1, stream_pivot_for_clause.nextTree());

                adaptor.addChild(root_1, stream_unpivot_in_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unpivot_clause"


    public static class unpivot_in_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unpivot_in_clause"
    // PLSQL_DMLParser.g:416:1: unpivot_in_clause : in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ ) ;
    public final unpivot_in_clause_return unpivot_in_clause() throws RecognitionException {
        unpivot_in_clause_return retval = new unpivot_in_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN218=null;
        Token COMMA220=null;
        Token RIGHT_PAREN222=null;
        PLSQLParser_PLSQLKeys.in_key_return in_key217 =null;

        unpivot_in_elements_return unpivot_in_elements219 =null;

        unpivot_in_elements_return unpivot_in_elements221 =null;


        Object LEFT_PAREN218_tree=null;
        Object COMMA220_tree=null;
        Object RIGHT_PAREN222_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_unpivot_in_elements=new RewriteRuleSubtreeStream(adaptor,"rule unpivot_in_elements");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        try {
            // PLSQL_DMLParser.g:417:5: ( in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ ) )
            // PLSQL_DMLParser.g:417:10: in_key LEFT_PAREN unpivot_in_elements ( COMMA unpivot_in_elements )* RIGHT_PAREN
            {
            pushFollow(FOLLOW_in_key_in_unpivot_in_clause3276);
            in_key217=gPLSQLParser.in_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_in_key.add(in_key217.getTree());

            LEFT_PAREN218=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unpivot_in_clause3286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN218);


            pushFollow(FOLLOW_unpivot_in_elements_in_unpivot_in_clause3300);
            unpivot_in_elements219=unpivot_in_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unpivot_in_elements.add(unpivot_in_elements219.getTree());

            // PLSQL_DMLParser.g:419:33: ( COMMA unpivot_in_elements )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // PLSQL_DMLParser.g:419:34: COMMA unpivot_in_elements
            	    {
            	    COMMA220=(Token)match(input,COMMA,FOLLOW_COMMA_in_unpivot_in_clause3303); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA220);


            	    pushFollow(FOLLOW_unpivot_in_elements_in_unpivot_in_clause3305);
            	    unpivot_in_elements221=unpivot_in_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_unpivot_in_elements.add(unpivot_in_elements221.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            RIGHT_PAREN222=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3317); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN222);


            // AST REWRITE
            // elements: in_key, unpivot_in_elements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:9: -> ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ )
            {
                // PLSQL_DMLParser.g:421:12: ^( in_key ( ^( UNPIVOT_IN_ELEMENT unpivot_in_elements ) )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_1);

                if ( !(stream_unpivot_in_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unpivot_in_elements.hasNext() ) {
                    // PLSQL_DMLParser.g:421:21: ^( UNPIVOT_IN_ELEMENT unpivot_in_elements )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(UNPIVOT_IN_ELEMENT, "UNPIVOT_IN_ELEMENT")
                    , root_2);

                    adaptor.addChild(root_2, stream_unpivot_in_elements.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_unpivot_in_elements.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unpivot_in_clause"


    public static class unpivot_in_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unpivot_in_elements"
    // PLSQL_DMLParser.g:424:1: unpivot_in_elements : ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( ( as_key )? ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )? -> ( column_name )+ ^( PIVOT_ALIAS ( constant )+ ) ;
    public final unpivot_in_elements_return unpivot_in_elements() throws RecognitionException {
        unpivot_in_elements_return retval = new unpivot_in_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN224=null;
        Token COMMA226=null;
        Token RIGHT_PAREN228=null;
        Token LEFT_PAREN231=null;
        Token COMMA233=null;
        Token RIGHT_PAREN235=null;
        PLSQLParser_PLSQLCommons.column_name_return column_name223 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name225 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name227 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key229 =null;

        PLSQLParser_PLSQLCommons.constant_return constant230 =null;

        PLSQLParser_PLSQLCommons.constant_return constant232 =null;

        PLSQLParser_PLSQLCommons.constant_return constant234 =null;


        Object LEFT_PAREN224_tree=null;
        Object COMMA226_tree=null;
        Object RIGHT_PAREN228_tree=null;
        Object LEFT_PAREN231_tree=null;
        Object COMMA233_tree=null;
        Object RIGHT_PAREN235_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            // PLSQL_DMLParser.g:425:5: ( ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( ( as_key )? ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )? -> ( column_name )+ ^( PIVOT_ALIAS ( constant )+ ) )
            // PLSQL_DMLParser.g:425:9: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( ( as_key )? ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )?
            {
            // PLSQL_DMLParser.g:425:9: ( column_name | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==DELIMITED_ID||LA79_0==INTRODUCER||LA79_0==REGULAR_ID) ) {
                alt79=1;
            }
            else if ( (LA79_0==LEFT_PAREN) ) {
                alt79=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }
            switch (alt79) {
                case 1 :
                    // PLSQL_DMLParser.g:425:14: column_name
                    {
                    pushFollow(FOLLOW_column_name_in_unpivot_in_elements3362);
                    column_name223=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name223.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:426:14: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN224=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unpivot_in_elements3377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN224);


                    pushFollow(FOLLOW_column_name_in_unpivot_in_elements3379);
                    column_name225=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name225.getTree());

                    // PLSQL_DMLParser.g:426:37: ( COMMA column_name )*
                    loop78:
                    do {
                        int alt78=2;
                        int LA78_0 = input.LA(1);

                        if ( (LA78_0==COMMA) ) {
                            alt78=1;
                        }


                        switch (alt78) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:426:38: COMMA column_name
                    	    {
                    	    COMMA226=(Token)match(input,COMMA,FOLLOW_COMMA_in_unpivot_in_elements3382); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA226);


                    	    pushFollow(FOLLOW_column_name_in_unpivot_in_elements3384);
                    	    column_name227=gPLSQLParser.column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name227.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop78;
                        }
                    } while (true);


                    RIGHT_PAREN228=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN228);


                    }
                    break;

            }


            // PLSQL_DMLParser.g:428:9: ( ( as_key )? ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN ) )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==APPROXIMATE_NUM_LIT||(LA83_0 >= CHAR_STRING && LA83_0 <= CHAR_STRING_PERL)||LA83_0==EXACT_NUM_LIT||LA83_0==LEFT_PAREN||LA83_0==NATIONAL_CHAR_STRING_LIT||LA83_0==REGULAR_ID||LA83_0==SQL92_RESERVED_AS||LA83_0==SQL92_RESERVED_DATE||LA83_0==SQL92_RESERVED_DEFAULT||LA83_0==SQL92_RESERVED_FALSE||LA83_0==SQL92_RESERVED_NULL||LA83_0==SQL92_RESERVED_TRUE||LA83_0==UNSIGNED_INTEGER) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // PLSQL_DMLParser.g:428:14: ( as_key )? ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN )
                    {
                    // PLSQL_DMLParser.g:428:14: ( as_key )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==SQL92_RESERVED_AS) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // PLSQL_DMLParser.g:428:14: as_key
                            {
                            pushFollow(FOLLOW_as_key_in_unpivot_in_elements3413);
                            as_key229=gPLSQLParser.as_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_as_key.add(as_key229.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:429:9: ( constant | ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN )
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==APPROXIMATE_NUM_LIT||(LA82_0 >= CHAR_STRING && LA82_0 <= CHAR_STRING_PERL)||LA82_0==EXACT_NUM_LIT||LA82_0==NATIONAL_CHAR_STRING_LIT||LA82_0==REGULAR_ID||LA82_0==SQL92_RESERVED_DATE||LA82_0==SQL92_RESERVED_DEFAULT||LA82_0==SQL92_RESERVED_FALSE||LA82_0==SQL92_RESERVED_NULL||LA82_0==SQL92_RESERVED_TRUE||LA82_0==UNSIGNED_INTEGER) ) {
                        alt82=1;
                    }
                    else if ( (LA82_0==LEFT_PAREN) && (synpred12_PLSQL_DMLParser())) {
                        alt82=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 82, 0, input);

                        throw nvae;

                    }
                    switch (alt82) {
                        case 1 :
                            // PLSQL_DMLParser.g:429:14: constant
                            {
                            pushFollow(FOLLOW_constant_in_unpivot_in_elements3429);
                            constant230=gPLSQLParser.constant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constant.add(constant230.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:430:14: ( LEFT_PAREN )=> LEFT_PAREN constant ( COMMA constant )* RIGHT_PAREN
                            {
                            LEFT_PAREN231=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_unpivot_in_elements3449); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN231);


                            pushFollow(FOLLOW_constant_in_unpivot_in_elements3451);
                            constant232=gPLSQLParser.constant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constant.add(constant232.getTree());

                            // PLSQL_DMLParser.g:430:49: ( COMMA constant )*
                            loop81:
                            do {
                                int alt81=2;
                                int LA81_0 = input.LA(1);

                                if ( (LA81_0==COMMA) ) {
                                    alt81=1;
                                }


                                switch (alt81) {
                            	case 1 :
                            	    // PLSQL_DMLParser.g:430:50: COMMA constant
                            	    {
                            	    COMMA233=(Token)match(input,COMMA,FOLLOW_COMMA_in_unpivot_in_elements3454); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA233);


                            	    pushFollow(FOLLOW_constant_in_unpivot_in_elements3456);
                            	    constant234=gPLSQLParser.constant();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_constant.add(constant234.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop81;
                                }
                            } while (true);


                            RIGHT_PAREN235=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3460); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN235);


                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: constant, column_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:9: -> ( column_name )+ ^( PIVOT_ALIAS ( constant )+ )
            {
                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_0, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                // PLSQL_DMLParser.g:433:25: ^( PIVOT_ALIAS ( constant )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PIVOT_ALIAS, "PIVOT_ALIAS")
                , root_1);

                if ( !(stream_constant.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_constant.hasNext() ) {
                    adaptor.addChild(root_1, stream_constant.nextTree());

                }
                stream_constant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unpivot_in_elements"


    public static class hierarchical_query_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "hierarchical_query_clause"
    // PLSQL_DMLParser.g:436:1: hierarchical_query_clause : ( connect_key by_key ( nocycle_key )? condition ( start_part )? -> ^( HIERARCHICAL ( start_part )? ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) | start_part connect_key by_key ( nocycle_key )? condition -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) );
    public final hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
        hierarchical_query_clause_return retval = new hierarchical_query_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.connect_key_return connect_key236 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key237 =null;

        PLSQLParser_PLSQLKeys.nocycle_key_return nocycle_key238 =null;

        condition_return condition239 =null;

        start_part_return start_part240 =null;

        start_part_return start_part241 =null;

        PLSQLParser_PLSQLKeys.connect_key_return connect_key242 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key243 =null;

        PLSQLParser_PLSQLKeys.nocycle_key_return nocycle_key244 =null;

        condition_return condition245 =null;


        RewriteRuleSubtreeStream stream_connect_key=new RewriteRuleSubtreeStream(adaptor,"rule connect_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_start_part=new RewriteRuleSubtreeStream(adaptor,"rule start_part");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_nocycle_key=new RewriteRuleSubtreeStream(adaptor,"rule nocycle_key");
        try {
            // PLSQL_DMLParser.g:437:5: ( connect_key by_key ( nocycle_key )? condition ( start_part )? -> ^( HIERARCHICAL ( start_part )? ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) | start_part connect_key by_key ( nocycle_key )? condition -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) ) )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==SQL92_RESERVED_CONNECT) ) {
                alt87=1;
            }
            else if ( (LA87_0==PLSQL_RESERVED_START) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }
            switch (alt87) {
                case 1 :
                    // PLSQL_DMLParser.g:437:10: connect_key by_key ( nocycle_key )? condition ( start_part )?
                    {
                    pushFollow(FOLLOW_connect_key_in_hierarchical_query_clause3521);
                    connect_key236=gPLSQLParser.connect_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_connect_key.add(connect_key236.getTree());

                    pushFollow(FOLLOW_by_key_in_hierarchical_query_clause3523);
                    by_key237=gPLSQLParser.by_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_by_key.add(by_key237.getTree());

                    // PLSQL_DMLParser.g:437:29: ( nocycle_key )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==REGULAR_ID) ) {
                        int LA84_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("nocycle"))) ) {
                            alt84=1;
                        }
                    }
                    switch (alt84) {
                        case 1 :
                            // PLSQL_DMLParser.g:437:29: nocycle_key
                            {
                            pushFollow(FOLLOW_nocycle_key_in_hierarchical_query_clause3525);
                            nocycle_key238=gPLSQLParser.nocycle_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nocycle_key.add(nocycle_key238.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_condition_in_hierarchical_query_clause3528);
                    condition239=condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition.add(condition239.getTree());

                    // PLSQL_DMLParser.g:437:52: ( start_part )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==PLSQL_RESERVED_START) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // PLSQL_DMLParser.g:437:52: start_part
                            {
                            pushFollow(FOLLOW_start_part_in_hierarchical_query_clause3530);
                            start_part240=start_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_start_part.add(start_part240.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: connect_key, start_part, nocycle_key, condition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 438:9: -> ^( HIERARCHICAL ( start_part )? ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
                    {
                        // PLSQL_DMLParser.g:438:12: ^( HIERARCHICAL ( start_part )? ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(HIERARCHICAL, "HIERARCHICAL")
                        , root_1);

                        // PLSQL_DMLParser.g:438:27: ( start_part )?
                        if ( stream_start_part.hasNext() ) {
                            adaptor.addChild(root_1, stream_start_part.nextTree());

                        }
                        stream_start_part.reset();

                        // PLSQL_DMLParser.g:438:39: ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(stream_connect_key.nextNode(), root_2);

                        // PLSQL_DMLParser.g:438:53: ( nocycle_key )?
                        if ( stream_nocycle_key.hasNext() ) {
                            adaptor.addChild(root_2, stream_nocycle_key.nextTree());

                        }
                        stream_nocycle_key.reset();

                        // PLSQL_DMLParser.g:438:66: ^( LOGIC_EXPR condition )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        root_3 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                        , root_3);

                        adaptor.addChild(root_3, stream_condition.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:439:10: start_part connect_key by_key ( nocycle_key )? condition
                    {
                    pushFollow(FOLLOW_start_part_in_hierarchical_query_clause3572);
                    start_part241=start_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_start_part.add(start_part241.getTree());

                    pushFollow(FOLLOW_connect_key_in_hierarchical_query_clause3574);
                    connect_key242=gPLSQLParser.connect_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_connect_key.add(connect_key242.getTree());

                    pushFollow(FOLLOW_by_key_in_hierarchical_query_clause3576);
                    by_key243=gPLSQLParser.by_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_by_key.add(by_key243.getTree());

                    // PLSQL_DMLParser.g:439:40: ( nocycle_key )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==REGULAR_ID) ) {
                        int LA86_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("nocycle"))) ) {
                            alt86=1;
                        }
                    }
                    switch (alt86) {
                        case 1 :
                            // PLSQL_DMLParser.g:439:40: nocycle_key
                            {
                            pushFollow(FOLLOW_nocycle_key_in_hierarchical_query_clause3578);
                            nocycle_key244=gPLSQLParser.nocycle_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nocycle_key.add(nocycle_key244.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_condition_in_hierarchical_query_clause3581);
                    condition245=condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_condition.add(condition245.getTree());

                    // AST REWRITE
                    // elements: nocycle_key, connect_key, condition, start_part
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 440:9: -> ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
                    {
                        // PLSQL_DMLParser.g:440:12: ^( HIERARCHICAL start_part ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(HIERARCHICAL, "HIERARCHICAL")
                        , root_1);

                        adaptor.addChild(root_1, stream_start_part.nextTree());

                        // PLSQL_DMLParser.g:440:38: ^( connect_key ( nocycle_key )? ^( LOGIC_EXPR condition ) )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(stream_connect_key.nextNode(), root_2);

                        // PLSQL_DMLParser.g:440:52: ( nocycle_key )?
                        if ( stream_nocycle_key.hasNext() ) {
                            adaptor.addChild(root_2, stream_nocycle_key.nextTree());

                        }
                        stream_nocycle_key.reset();

                        // PLSQL_DMLParser.g:440:65: ^( LOGIC_EXPR condition )
                        {
                        Object root_3 = (Object)adaptor.nil();
                        root_3 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                        , root_3);

                        adaptor.addChild(root_3, stream_condition.nextTree());

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "hierarchical_query_clause"


    public static class start_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "start_part"
    // PLSQL_DMLParser.g:443:1: start_part : start_key with_key condition -> ^( start_key ^( LOGIC_EXPR condition ) ) ;
    public final start_part_return start_part() throws RecognitionException {
        start_part_return retval = new start_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.start_key_return start_key246 =null;

        PLSQLParser_PLSQLKeys.with_key_return with_key247 =null;

        condition_return condition248 =null;


        RewriteRuleSubtreeStream stream_start_key=new RewriteRuleSubtreeStream(adaptor,"rule start_key");
        RewriteRuleSubtreeStream stream_with_key=new RewriteRuleSubtreeStream(adaptor,"rule with_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        try {
            // PLSQL_DMLParser.g:444:5: ( start_key with_key condition -> ^( start_key ^( LOGIC_EXPR condition ) ) )
            // PLSQL_DMLParser.g:444:10: start_key with_key condition
            {
            pushFollow(FOLLOW_start_key_in_start_part3630);
            start_key246=gPLSQLParser.start_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_start_key.add(start_key246.getTree());

            pushFollow(FOLLOW_with_key_in_start_part3632);
            with_key247=gPLSQLParser.with_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_with_key.add(with_key247.getTree());

            pushFollow(FOLLOW_condition_in_start_part3634);
            condition248=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition248.getTree());

            // AST REWRITE
            // elements: condition, start_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:9: -> ^( start_key ^( LOGIC_EXPR condition ) )
            {
                // PLSQL_DMLParser.g:445:12: ^( start_key ^( LOGIC_EXPR condition ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_start_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:445:24: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "start_part"


    public static class group_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_by_clause"
    // PLSQL_DMLParser.g:448:1: group_by_clause : ( ( group_key )=> group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ( having_clause )? -> ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ( having_clause )? ) | ( having_key )=> having_clause ( group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )? -> ^( group_key having_clause ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ) );
    public final group_by_clause_return group_by_clause() throws RecognitionException {
        group_by_clause_return retval = new group_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA252=null;
        Token COMMA259=null;
        PLSQLParser_PLSQLKeys.group_key_return group_key249 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key250 =null;

        group_by_elements_return group_by_elements251 =null;

        group_by_elements_return group_by_elements253 =null;

        having_clause_return having_clause254 =null;

        having_clause_return having_clause255 =null;

        PLSQLParser_PLSQLKeys.group_key_return group_key256 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key257 =null;

        group_by_elements_return group_by_elements258 =null;

        group_by_elements_return group_by_elements260 =null;


        Object COMMA252_tree=null;
        Object COMMA259_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_having_clause=new RewriteRuleSubtreeStream(adaptor,"rule having_clause");
        RewriteRuleSubtreeStream stream_group_key=new RewriteRuleSubtreeStream(adaptor,"rule group_key");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_group_by_elements=new RewriteRuleSubtreeStream(adaptor,"rule group_by_elements");
        try {
            // PLSQL_DMLParser.g:449:5: ( ( group_key )=> group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ( having_clause )? -> ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ( having_clause )? ) | ( having_key )=> having_clause ( group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )? -> ^( group_key having_clause ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ) )
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==SQL92_RESERVED_GROUP) && (synpred13_PLSQL_DMLParser())) {
                alt92=1;
            }
            else if ( (LA92_0==SQL92_RESERVED_HAVING) && (synpred15_PLSQL_DMLParser())) {
                alt92=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;

            }
            switch (alt92) {
                case 1 :
                    // PLSQL_DMLParser.g:449:10: ( group_key )=> group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* ( having_clause )?
                    {
                    pushFollow(FOLLOW_group_key_in_group_by_clause3680);
                    group_key249=gPLSQLParser.group_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_group_key.add(group_key249.getTree());

                    pushFollow(FOLLOW_by_key_in_group_by_clause3682);
                    by_key250=gPLSQLParser.by_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_by_key.add(by_key250.getTree());

                    pushFollow(FOLLOW_group_by_elements_in_group_by_clause3684);
                    group_by_elements251=group_by_elements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_group_by_elements.add(group_by_elements251.getTree());

                    // PLSQL_DMLParser.g:449:60: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==COMMA) ) {
                            int LA88_2 = input.LA(2);

                            if ( (synpred14_PLSQL_DMLParser()) ) {
                                alt88=1;
                            }


                        }


                        switch (alt88) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:449:61: ( COMMA group_by_elements )=> COMMA group_by_elements
                    	    {
                    	    COMMA252=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_by_clause3694); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA252);


                    	    pushFollow(FOLLOW_group_by_elements_in_group_by_clause3696);
                    	    group_by_elements253=group_by_elements();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_group_by_elements.add(group_by_elements253.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop88;
                        }
                    } while (true);


                    // PLSQL_DMLParser.g:449:115: ( having_clause )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==SQL92_RESERVED_HAVING) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // PLSQL_DMLParser.g:449:115: having_clause
                            {
                            pushFollow(FOLLOW_having_clause_in_group_by_clause3700);
                            having_clause254=having_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_having_clause.add(having_clause254.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: having_clause, group_by_elements, group_key
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 450:10: -> ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ( having_clause )? )
                    {
                        // PLSQL_DMLParser.g:450:13: ^( group_key ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ ( having_clause )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_group_key.nextNode(), root_1);

                        if ( !(stream_group_by_elements.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_group_by_elements.hasNext() ) {
                            // PLSQL_DMLParser.g:450:25: ^( GROUP_BY_ELEMENT group_by_elements )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot(
                            (Object)adaptor.create(GROUP_BY_ELEMENT, "GROUP_BY_ELEMENT")
                            , root_2);

                            adaptor.addChild(root_2, stream_group_by_elements.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_group_by_elements.reset();

                        // PLSQL_DMLParser.g:450:64: ( having_clause )?
                        if ( stream_having_clause.hasNext() ) {
                            adaptor.addChild(root_1, stream_having_clause.nextTree());

                        }
                        stream_having_clause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:451:10: ( having_key )=> having_clause ( group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )?
                    {
                    pushFollow(FOLLOW_having_clause_in_group_by_clause3743);
                    having_clause255=having_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_having_clause.add(having_clause255.getTree());

                    // PLSQL_DMLParser.g:451:40: ( group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )* )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==SQL92_RESERVED_GROUP) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // PLSQL_DMLParser.g:451:41: group_key by_key group_by_elements ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
                            {
                            pushFollow(FOLLOW_group_key_in_group_by_clause3746);
                            group_key256=gPLSQLParser.group_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_group_key.add(group_key256.getTree());

                            pushFollow(FOLLOW_by_key_in_group_by_clause3748);
                            by_key257=gPLSQLParser.by_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_by_key.add(by_key257.getTree());

                            pushFollow(FOLLOW_group_by_elements_in_group_by_clause3750);
                            group_by_elements258=group_by_elements();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_group_by_elements.add(group_by_elements258.getTree());

                            // PLSQL_DMLParser.g:451:76: ( ( COMMA group_by_elements )=> COMMA group_by_elements )*
                            loop90:
                            do {
                                int alt90=2;
                                int LA90_0 = input.LA(1);

                                if ( (LA90_0==COMMA) ) {
                                    int LA90_2 = input.LA(2);

                                    if ( (synpred16_PLSQL_DMLParser()) ) {
                                        alt90=1;
                                    }


                                }


                                switch (alt90) {
                            	case 1 :
                            	    // PLSQL_DMLParser.g:451:77: ( COMMA group_by_elements )=> COMMA group_by_elements
                            	    {
                            	    COMMA259=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_by_clause3760); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA259);


                            	    pushFollow(FOLLOW_group_by_elements_in_group_by_clause3762);
                            	    group_by_elements260=group_by_elements();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_group_by_elements.add(group_by_elements260.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop90;
                                }
                            } while (true);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: group_key, group_by_elements, having_clause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 452:10: -> ^( group_key having_clause ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ )
                    {
                        // PLSQL_DMLParser.g:452:13: ^( group_key having_clause ( ^( GROUP_BY_ELEMENT group_by_elements ) )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_group_key.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_having_clause.nextTree());

                        if ( !(stream_group_by_elements.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_group_by_elements.hasNext() ) {
                            // PLSQL_DMLParser.g:452:39: ^( GROUP_BY_ELEMENT group_by_elements )
                            {
                            Object root_2 = (Object)adaptor.nil();
                            root_2 = (Object)adaptor.becomeRoot(
                            (Object)adaptor.create(GROUP_BY_ELEMENT, "GROUP_BY_ELEMENT")
                            , root_2);

                            adaptor.addChild(root_2, stream_group_by_elements.nextTree());

                            adaptor.addChild(root_1, root_2);
                            }

                        }
                        stream_group_by_elements.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_by_clause"


    public static class group_by_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_by_elements"
    // PLSQL_DMLParser.g:455:1: group_by_elements : ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) );
    public final group_by_elements_return group_by_elements() throws RecognitionException {
        group_by_elements_return retval = new group_by_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        grouping_sets_clause_return grouping_sets_clause261 =null;

        rollup_cube_clause_return rollup_cube_clause262 =null;

        expression_return expression263 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // PLSQL_DMLParser.g:456:5: ( grouping_sets_clause | rollup_cube_clause | expression -> ^( EXPR expression ) )
            int alt93=3;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==REGULAR_ID) ) {
                int LA93_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("grouping"))) ) {
                    alt93=1;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("cube"))||(input.LT(1).getText().equalsIgnoreCase("rollup")))) ) {
                    alt93=2;
                }
                else if ( (true) ) {
                    alt93=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA93_0==APPROXIMATE_NUM_LIT||LA93_0==BINDVAR||(LA93_0 >= CHAR_STRING && LA93_0 <= COLON)||LA93_0==DELIMITED_ID||LA93_0==EXACT_NUM_LIT||LA93_0==INTRODUCER||LA93_0==LEFT_PAREN||(LA93_0 >= MINUS_SIGN && LA93_0 <= NATIONAL_CHAR_STRING_LIT)||LA93_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA93_0==PLUS_SIGN||LA93_0==SQL92_RESERVED_ALL||LA93_0==SQL92_RESERVED_ANY||LA93_0==SQL92_RESERVED_CASE||(LA93_0 >= SQL92_RESERVED_CURSOR && LA93_0 <= SQL92_RESERVED_DATE)||LA93_0==SQL92_RESERVED_DEFAULT||LA93_0==SQL92_RESERVED_DISTINCT||(LA93_0 >= SQL92_RESERVED_EXISTS && LA93_0 <= SQL92_RESERVED_FALSE)||(LA93_0 >= SQL92_RESERVED_NOT && LA93_0 <= SQL92_RESERVED_NULL)||LA93_0==SQL92_RESERVED_PRIOR||LA93_0==SQL92_RESERVED_TRUE||LA93_0==UNSIGNED_INTEGER) ) {
                alt93=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }
            switch (alt93) {
                case 1 :
                    // PLSQL_DMLParser.g:456:10: grouping_sets_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_grouping_sets_clause_in_group_by_elements3810);
                    grouping_sets_clause261=grouping_sets_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_clause261.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:457:10: rollup_cube_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rollup_cube_clause_in_group_by_elements3821);
                    rollup_cube_clause262=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollup_cube_clause262.getTree());

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:458:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_group_by_elements3833);
                    expression263=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression263.getTree());

                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 458:21: -> ^( EXPR expression )
                    {
                        // PLSQL_DMLParser.g:458:24: ^( EXPR expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_by_elements"


    public static class rollup_cube_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "rollup_cube_clause"
    // PLSQL_DMLParser.g:461:1: rollup_cube_clause : ( rollup_key ^| cube_key ^) LEFT_PAREN ! grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN !;
    public final rollup_cube_clause_return rollup_cube_clause() throws RecognitionException {
        rollup_cube_clause_return retval = new rollup_cube_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN266=null;
        Token COMMA268=null;
        Token RIGHT_PAREN270=null;
        PLSQLParser_PLSQLKeys.rollup_key_return rollup_key264 =null;

        PLSQLParser_PLSQLKeys.cube_key_return cube_key265 =null;

        grouping_sets_elements_return grouping_sets_elements267 =null;

        grouping_sets_elements_return grouping_sets_elements269 =null;


        Object LEFT_PAREN266_tree=null;
        Object COMMA268_tree=null;
        Object RIGHT_PAREN270_tree=null;

        try {
            // PLSQL_DMLParser.g:462:5: ( ( rollup_key ^| cube_key ^) LEFT_PAREN ! grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN !)
            // PLSQL_DMLParser.g:462:10: ( rollup_key ^| cube_key ^) LEFT_PAREN ! grouping_sets_elements ( COMMA ! grouping_sets_elements )* RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            // PLSQL_DMLParser.g:462:10: ( rollup_key ^| cube_key ^)
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("cube"))||(input.LT(1).getText().equalsIgnoreCase("rollup"))))) {
                int LA94_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("rollup"))) ) {
                    alt94=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("cube"))) ) {
                    alt94=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 94, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // PLSQL_DMLParser.g:462:11: rollup_key ^
                    {
                    pushFollow(FOLLOW_rollup_key_in_rollup_cube_clause3862);
                    rollup_key264=gPLSQLParser.rollup_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(rollup_key264.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:462:23: cube_key ^
                    {
                    pushFollow(FOLLOW_cube_key_in_rollup_cube_clause3865);
                    cube_key265=gPLSQLParser.cube_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(cube_key265.getTree(), root_0);

                    }
                    break;

            }


            LEFT_PAREN266=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_rollup_cube_clause3869); if (state.failed) return retval;

            pushFollow(FOLLOW_grouping_sets_elements_in_rollup_cube_clause3872);
            grouping_sets_elements267=grouping_sets_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_elements267.getTree());

            // PLSQL_DMLParser.g:462:69: ( COMMA ! grouping_sets_elements )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // PLSQL_DMLParser.g:462:70: COMMA ! grouping_sets_elements
            	    {
            	    COMMA268=(Token)match(input,COMMA,FOLLOW_COMMA_in_rollup_cube_clause3875); if (state.failed) return retval;

            	    pushFollow(FOLLOW_grouping_sets_elements_in_rollup_cube_clause3878);
            	    grouping_sets_elements269=grouping_sets_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_elements269.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            RIGHT_PAREN270=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_rollup_cube_clause3882); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rollup_cube_clause"


    public static class grouping_sets_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_sets_clause"
    // PLSQL_DMLParser.g:465:1: grouping_sets_clause : grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ ) ;
    public final grouping_sets_clause_return grouping_sets_clause() throws RecognitionException {
        grouping_sets_clause_return retval = new grouping_sets_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN273=null;
        Token COMMA275=null;
        Token RIGHT_PAREN277=null;
        PLSQLParser_PLSQLKeys.grouping_key_return grouping_key271 =null;

        PLSQLParser_PLSQLKeys.sets_key_return sets_key272 =null;

        grouping_sets_elements_return grouping_sets_elements274 =null;

        grouping_sets_elements_return grouping_sets_elements276 =null;


        Object LEFT_PAREN273_tree=null;
        Object COMMA275_tree=null;
        Object RIGHT_PAREN277_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_grouping_key=new RewriteRuleSubtreeStream(adaptor,"rule grouping_key");
        RewriteRuleSubtreeStream stream_sets_key=new RewriteRuleSubtreeStream(adaptor,"rule sets_key");
        RewriteRuleSubtreeStream stream_grouping_sets_elements=new RewriteRuleSubtreeStream(adaptor,"rule grouping_sets_elements");
        try {
            // PLSQL_DMLParser.g:466:5: ( grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ ) )
            // PLSQL_DMLParser.g:466:10: grouping_key sets_key LEFT_PAREN grouping_sets_elements ( COMMA grouping_sets_elements )* RIGHT_PAREN
            {
            pushFollow(FOLLOW_grouping_key_in_grouping_sets_clause3904);
            grouping_key271=gPLSQLParser.grouping_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_grouping_key.add(grouping_key271.getTree());

            pushFollow(FOLLOW_sets_key_in_grouping_sets_clause3906);
            sets_key272=gPLSQLParser.sets_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sets_key.add(sets_key272.getTree());

            LEFT_PAREN273=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_grouping_sets_clause3917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN273);


            pushFollow(FOLLOW_grouping_sets_elements_in_grouping_sets_clause3919);
            grouping_sets_elements274=grouping_sets_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_grouping_sets_elements.add(grouping_sets_elements274.getTree());

            // PLSQL_DMLParser.g:467:43: ( COMMA grouping_sets_elements )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==COMMA) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // PLSQL_DMLParser.g:467:44: COMMA grouping_sets_elements
            	    {
            	    COMMA275=(Token)match(input,COMMA,FOLLOW_COMMA_in_grouping_sets_clause3922); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA275);


            	    pushFollow(FOLLOW_grouping_sets_elements_in_grouping_sets_clause3924);
            	    grouping_sets_elements276=grouping_sets_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_grouping_sets_elements.add(grouping_sets_elements276.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            RIGHT_PAREN277=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_grouping_sets_clause3928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN277);


            // AST REWRITE
            // elements: grouping_sets_elements, grouping_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:9: -> ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ )
            {
                // PLSQL_DMLParser.g:468:12: ^( grouping_key ( ^( GROUPIN_SET grouping_sets_elements ) )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_grouping_key.nextNode(), root_1);

                if ( !(stream_grouping_sets_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_grouping_sets_elements.hasNext() ) {
                    // PLSQL_DMLParser.g:468:27: ^( GROUPIN_SET grouping_sets_elements )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(GROUPIN_SET, "GROUPIN_SET")
                    , root_2);

                    adaptor.addChild(root_2, stream_grouping_sets_elements.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_grouping_sets_elements.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grouping_sets_clause"


    public static class grouping_sets_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "grouping_sets_elements"
    // PLSQL_DMLParser.g:471:1: grouping_sets_elements : ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) );
    public final grouping_sets_elements_return grouping_sets_elements() throws RecognitionException {
        grouping_sets_elements_return retval = new grouping_sets_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        rollup_cube_clause_return rollup_cube_clause278 =null;

        expression_list_return expression_list279 =null;

        expression_return expression280 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // PLSQL_DMLParser.g:472:5: ( ( rollup_key | cube_key )=> rollup_cube_clause | ( LEFT_PAREN )=> expression_list | expression -> ^( EXPR expression ) )
            int alt97=3;
            switch ( input.LA(1) ) {
            case REGULAR_ID:
                {
                int LA97_1 = input.LA(2);

                if ( (((((input.LT(1).getText().equalsIgnoreCase("cube"))||(input.LT(1).getText().equalsIgnoreCase("rollup")))&&((input.LT(1).getText().equalsIgnoreCase("cube"))||(input.LT(1).getText().equalsIgnoreCase("rollup"))))&&synpred17_PLSQL_DMLParser())) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 1, input);

                    throw nvae;

                }
                }
                break;
            case LEFT_PAREN:
                {
                int LA97_2 = input.LA(2);

                if ( (synpred18_PLSQL_DMLParser()) ) {
                    alt97=2;
                }
                else if ( (true) ) {
                    alt97=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 2, input);

                    throw nvae;

                }
                }
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_CURSOR:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
                {
                alt97=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }

            switch (alt97) {
                case 1 :
                    // PLSQL_DMLParser.g:472:10: ( rollup_key | cube_key )=> rollup_cube_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rollup_cube_clause_in_grouping_sets_elements3976);
                    rollup_cube_clause278=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollup_cube_clause278.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:473:10: ( LEFT_PAREN )=> expression_list
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_expression_list_in_grouping_sets_elements3992);
                    expression_list279=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list279.getTree());

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:474:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_grouping_sets_elements4003);
                    expression280=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression280.getTree());

                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 474:21: -> ^( EXPR expression )
                    {
                        // PLSQL_DMLParser.g:474:24: ^( EXPR expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "grouping_sets_elements"


    public static class having_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "having_clause"
    // PLSQL_DMLParser.g:477:1: having_clause : having_key condition -> ^( having_key ^( LOGIC_EXPR condition ) ) ;
    public final having_clause_return having_clause() throws RecognitionException {
        having_clause_return retval = new having_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.having_key_return having_key281 =null;

        condition_return condition282 =null;


        RewriteRuleSubtreeStream stream_having_key=new RewriteRuleSubtreeStream(adaptor,"rule having_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        try {
            // PLSQL_DMLParser.g:478:5: ( having_key condition -> ^( having_key ^( LOGIC_EXPR condition ) ) )
            // PLSQL_DMLParser.g:478:10: having_key condition
            {
            pushFollow(FOLLOW_having_key_in_having_clause4031);
            having_key281=gPLSQLParser.having_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_having_key.add(having_key281.getTree());

            pushFollow(FOLLOW_condition_in_having_clause4033);
            condition282=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition282.getTree());

            // AST REWRITE
            // elements: condition, having_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:9: -> ^( having_key ^( LOGIC_EXPR condition ) )
            {
                // PLSQL_DMLParser.g:479:12: ^( having_key ^( LOGIC_EXPR condition ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_having_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:479:25: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "having_clause"


    public static class model_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_clause"
    // PLSQL_DMLParser.g:482:1: model_clause : model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model -> ^( model_key main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) ;
    public final model_clause_return model_clause() throws RecognitionException {
        model_clause_return retval = new model_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.model_key_return model_key283 =null;

        cell_reference_options_return cell_reference_options284 =null;

        return_rows_clause_return return_rows_clause285 =null;

        reference_model_return reference_model286 =null;

        main_model_return main_model287 =null;


        RewriteRuleSubtreeStream stream_return_rows_clause=new RewriteRuleSubtreeStream(adaptor,"rule return_rows_clause");
        RewriteRuleSubtreeStream stream_model_key=new RewriteRuleSubtreeStream(adaptor,"rule model_key");
        RewriteRuleSubtreeStream stream_cell_reference_options=new RewriteRuleSubtreeStream(adaptor,"rule cell_reference_options");
        RewriteRuleSubtreeStream stream_reference_model=new RewriteRuleSubtreeStream(adaptor,"rule reference_model");
        RewriteRuleSubtreeStream stream_main_model=new RewriteRuleSubtreeStream(adaptor,"rule main_model");
        try {
            // PLSQL_DMLParser.g:483:5: ( model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model -> ^( model_key main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) )
            // PLSQL_DMLParser.g:483:10: model_key ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* main_model
            {
            pushFollow(FOLLOW_model_key_in_model_clause4073);
            model_key283=gPLSQLParser.model_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_key.add(model_key283.getTree());

            // PLSQL_DMLParser.g:483:20: ( cell_reference_options )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==REGULAR_ID) ) {
                    int LA98_1 = input.LA(2);

                    if ( (LA98_1==REGULAR_ID) ) {
                        int LA98_3 = input.LA(3);

                        if ( (((input.LT(1).getText().equalsIgnoreCase("keep"))||(input.LT(1).getText().equalsIgnoreCase("ignore")))) ) {
                            alt98=1;
                        }


                    }


                }
                else if ( (LA98_0==SQL92_RESERVED_UNIQUE) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // PLSQL_DMLParser.g:483:20: cell_reference_options
            	    {
            	    pushFollow(FOLLOW_cell_reference_options_in_model_clause4075);
            	    cell_reference_options284=cell_reference_options();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cell_reference_options.add(cell_reference_options284.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            // PLSQL_DMLParser.g:483:44: ( return_rows_clause )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==REGULAR_ID) ) {
                int LA99_1 = input.LA(2);

                if ( (LA99_1==REGULAR_ID) ) {
                    int LA99_2 = input.LA(3);

                    if ( (LA99_2==REGULAR_ID) ) {
                        int LA99_6 = input.LA(4);

                        if ( (LA99_6==REGULAR_ID) ) {
                            alt99=1;
                        }
                    }
                }
                else if ( (LA99_1==SQL92_RESERVED_ALL) ) {
                    alt99=1;
                }
            }
            switch (alt99) {
                case 1 :
                    // PLSQL_DMLParser.g:483:44: return_rows_clause
                    {
                    pushFollow(FOLLOW_return_rows_clause_in_model_clause4078);
                    return_rows_clause285=return_rows_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_return_rows_clause.add(return_rows_clause285.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:483:64: ( reference_model )*
            loop100:
            do {
                int alt100=2;
                alt100 = dfa100.predict(input);
                switch (alt100) {
            	case 1 :
            	    // PLSQL_DMLParser.g:483:64: reference_model
            	    {
            	    pushFollow(FOLLOW_reference_model_in_model_clause4081);
            	    reference_model286=reference_model();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_reference_model.add(reference_model286.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            pushFollow(FOLLOW_main_model_in_model_clause4084);
            main_model287=main_model();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_main_model.add(main_model287.getTree());

            // AST REWRITE
            // elements: main_model, model_key, cell_reference_options, return_rows_clause, reference_model
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:9: -> ^( model_key main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
            {
                // PLSQL_DMLParser.g:484:12: ^( model_key main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_model_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_main_model.nextTree());

                // PLSQL_DMLParser.g:484:35: ( cell_reference_options )*
                while ( stream_cell_reference_options.hasNext() ) {
                    adaptor.addChild(root_1, stream_cell_reference_options.nextTree());

                }
                stream_cell_reference_options.reset();

                // PLSQL_DMLParser.g:484:59: ( return_rows_clause )?
                if ( stream_return_rows_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_return_rows_clause.nextTree());

                }
                stream_return_rows_clause.reset();

                // PLSQL_DMLParser.g:484:79: ( reference_model )*
                while ( stream_reference_model.hasNext() ) {
                    adaptor.addChild(root_1, stream_reference_model.nextTree());

                }
                stream_reference_model.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_clause"


    public static class cell_reference_options_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_reference_options"
    // PLSQL_DMLParser.g:487:1: cell_reference_options : ( ( ignore_key ^| keep_key ^) nav_key | unique_key ^ ( dimension_key | single_key reference_key !) );
    public final cell_reference_options_return cell_reference_options() throws RecognitionException {
        cell_reference_options_return retval = new cell_reference_options_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.ignore_key_return ignore_key288 =null;

        PLSQLParser_PLSQLKeys.keep_key_return keep_key289 =null;

        PLSQLParser_PLSQLKeys.nav_key_return nav_key290 =null;

        PLSQLParser_PLSQLKeys.unique_key_return unique_key291 =null;

        PLSQLParser_PLSQLKeys.dimension_key_return dimension_key292 =null;

        PLSQLParser_PLSQLKeys.single_key_return single_key293 =null;

        PLSQLParser_PLSQLKeys.reference_key_return reference_key294 =null;



        try {
            // PLSQL_DMLParser.g:488:5: ( ( ignore_key ^| keep_key ^) nav_key | unique_key ^ ( dimension_key | single_key reference_key !) )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("keep"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                alt103=1;
            }
            else if ( (LA103_0==SQL92_RESERVED_UNIQUE) ) {
                alt103=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }
            switch (alt103) {
                case 1 :
                    // PLSQL_DMLParser.g:488:10: ( ignore_key ^| keep_key ^) nav_key
                    {
                    root_0 = (Object)adaptor.nil();


                    // PLSQL_DMLParser.g:488:10: ( ignore_key ^| keep_key ^)
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("keep"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                        int LA101_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("ignore"))) ) {
                            alt101=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("keep"))) ) {
                            alt101=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 101, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 101, 0, input);

                        throw nvae;

                    }
                    switch (alt101) {
                        case 1 :
                            // PLSQL_DMLParser.g:488:11: ignore_key ^
                            {
                            pushFollow(FOLLOW_ignore_key_in_cell_reference_options4130);
                            ignore_key288=gPLSQLParser.ignore_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(ignore_key288.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:488:23: keep_key ^
                            {
                            pushFollow(FOLLOW_keep_key_in_cell_reference_options4133);
                            keep_key289=gPLSQLParser.keep_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(keep_key289.getTree(), root_0);

                            }
                            break;

                    }


                    pushFollow(FOLLOW_nav_key_in_cell_reference_options4137);
                    nav_key290=gPLSQLParser.nav_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nav_key290.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:489:10: unique_key ^ ( dimension_key | single_key reference_key !)
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_unique_key_in_cell_reference_options4148);
                    unique_key291=gPLSQLParser.unique_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(unique_key291.getTree(), root_0);

                    // PLSQL_DMLParser.g:489:22: ( dimension_key | single_key reference_key !)
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("single"))||(input.LT(1).getText().equalsIgnoreCase("dimension"))))) {
                        int LA102_1 = input.LA(2);

                        if ( (LA102_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("single"))||(input.LT(1).getText().equalsIgnoreCase("dimension"))))) {
                            int LA102_2 = input.LA(3);

                            if ( ((input.LT(1).getText().equalsIgnoreCase("dimension"))) ) {
                                alt102=1;
                            }
                            else if ( ((input.LT(1).getText().equalsIgnoreCase("single"))) ) {
                                alt102=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 102, 2, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA102_1==LEFT_PAREN||LA102_1==SQL92_RESERVED_UNIQUE) && ((input.LT(1).getText().equalsIgnoreCase("dimension")))) {
                            alt102=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 102, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 0, input);

                        throw nvae;

                    }
                    switch (alt102) {
                        case 1 :
                            // PLSQL_DMLParser.g:489:23: dimension_key
                            {
                            pushFollow(FOLLOW_dimension_key_in_cell_reference_options4152);
                            dimension_key292=gPLSQLParser.dimension_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dimension_key292.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:489:37: single_key reference_key !
                            {
                            pushFollow(FOLLOW_single_key_in_cell_reference_options4154);
                            single_key293=gPLSQLParser.single_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, single_key293.getTree());

                            pushFollow(FOLLOW_reference_key_in_cell_reference_options4156);
                            reference_key294=gPLSQLParser.reference_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cell_reference_options"


    public static class return_rows_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_rows_clause"
    // PLSQL_DMLParser.g:492:1: return_rows_clause : return_key ^ ( updated_key | all_key ) rows_key !;
    public final return_rows_clause_return return_rows_clause() throws RecognitionException {
        return_rows_clause_return retval = new return_rows_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.return_key_return return_key295 =null;

        PLSQLParser_PLSQLKeys.updated_key_return updated_key296 =null;

        PLSQLParser_PLSQLKeys.all_key_return all_key297 =null;

        PLSQLParser_PLSQLKeys.rows_key_return rows_key298 =null;



        try {
            // PLSQL_DMLParser.g:493:5: ( return_key ^ ( updated_key | all_key ) rows_key !)
            // PLSQL_DMLParser.g:493:10: return_key ^ ( updated_key | all_key ) rows_key !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_return_key_in_return_rows_clause4179);
            return_key295=gPLSQLParser.return_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(return_key295.getTree(), root_0);

            // PLSQL_DMLParser.g:493:22: ( updated_key | all_key )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("updated")))) {
                alt104=1;
            }
            else if ( (LA104_0==SQL92_RESERVED_ALL) ) {
                alt104=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }
            switch (alt104) {
                case 1 :
                    // PLSQL_DMLParser.g:493:23: updated_key
                    {
                    pushFollow(FOLLOW_updated_key_in_return_rows_clause4183);
                    updated_key296=gPLSQLParser.updated_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updated_key296.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:493:35: all_key
                    {
                    pushFollow(FOLLOW_all_key_in_return_rows_clause4185);
                    all_key297=gPLSQLParser.all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, all_key297.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_rows_key_in_return_rows_clause4188);
            rows_key298=gPLSQLParser.rows_key();

            state._fsp--;
            if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_rows_clause"


    public static class reference_model_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reference_model"
    // PLSQL_DMLParser.g:496:1: reference_model : reference_key ^ reference_model_name on_key ! LEFT_PAREN ! subquery RIGHT_PAREN ! model_column_clauses ( cell_reference_options )* ;
    public final reference_model_return reference_model() throws RecognitionException {
        reference_model_return retval = new reference_model_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN302=null;
        Token RIGHT_PAREN304=null;
        PLSQLParser_PLSQLKeys.reference_key_return reference_key299 =null;

        PLSQLParser_PLSQLCommons.reference_model_name_return reference_model_name300 =null;

        PLSQLParser_PLSQLKeys.on_key_return on_key301 =null;

        subquery_return subquery303 =null;

        model_column_clauses_return model_column_clauses305 =null;

        cell_reference_options_return cell_reference_options306 =null;


        Object LEFT_PAREN302_tree=null;
        Object RIGHT_PAREN304_tree=null;

        try {
            // PLSQL_DMLParser.g:497:5: ( reference_key ^ reference_model_name on_key ! LEFT_PAREN ! subquery RIGHT_PAREN ! model_column_clauses ( cell_reference_options )* )
            // PLSQL_DMLParser.g:497:10: reference_key ^ reference_model_name on_key ! LEFT_PAREN ! subquery RIGHT_PAREN ! model_column_clauses ( cell_reference_options )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_reference_key_in_reference_model4209);
            reference_key299=gPLSQLParser.reference_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(reference_key299.getTree(), root_0);

            pushFollow(FOLLOW_reference_model_name_in_reference_model4212);
            reference_model_name300=gPLSQLParser.reference_model_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_model_name300.getTree());

            pushFollow(FOLLOW_on_key_in_reference_model4214);
            on_key301=gPLSQLParser.on_key();

            state._fsp--;
            if (state.failed) return retval;

            LEFT_PAREN302=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_reference_model4230); if (state.failed) return retval;

            pushFollow(FOLLOW_subquery_in_reference_model4233);
            subquery303=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery303.getTree());

            RIGHT_PAREN304=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_reference_model4235); if (state.failed) return retval;

            pushFollow(FOLLOW_model_column_clauses_in_reference_model4238);
            model_column_clauses305=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column_clauses305.getTree());

            // PLSQL_DMLParser.g:499:13: ( cell_reference_options )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("dimension"))||(input.LT(1).getText().equalsIgnoreCase("keep"))||(input.LT(1).getText().equalsIgnoreCase("main"))||(input.LT(1).getText().equalsIgnoreCase("partition"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                    int LA105_1 = input.LA(2);

                    if ( (LA105_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("keep"))||(input.LT(1).getText().equalsIgnoreCase("main"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                        int LA105_4 = input.LA(3);

                        if ( (((input.LT(1).getText().equalsIgnoreCase("keep"))||(input.LT(1).getText().equalsIgnoreCase("ignore")))) ) {
                            alt105=1;
                        }


                    }


                }
                else if ( (LA105_0==SQL92_RESERVED_UNIQUE) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // PLSQL_DMLParser.g:499:13: cell_reference_options
            	    {
            	    pushFollow(FOLLOW_cell_reference_options_in_reference_model4253);
            	    cell_reference_options306=cell_reference_options();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options306.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "reference_model"


    public static class main_model_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "main_model"
    // PLSQL_DMLParser.g:502:1: main_model : ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) ;
    public final main_model_return main_model() throws RecognitionException {
        main_model_return retval = new main_model_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.main_key_return main_key307 =null;

        PLSQLParser_PLSQLCommons.main_model_name_return main_model_name308 =null;

        model_column_clauses_return model_column_clauses309 =null;

        cell_reference_options_return cell_reference_options310 =null;

        model_rules_clause_return model_rules_clause311 =null;


        RewriteRuleSubtreeStream stream_main_key=new RewriteRuleSubtreeStream(adaptor,"rule main_key");
        RewriteRuleSubtreeStream stream_main_model_name=new RewriteRuleSubtreeStream(adaptor,"rule main_model_name");
        RewriteRuleSubtreeStream stream_model_column_clauses=new RewriteRuleSubtreeStream(adaptor,"rule model_column_clauses");
        RewriteRuleSubtreeStream stream_cell_reference_options=new RewriteRuleSubtreeStream(adaptor,"rule cell_reference_options");
        RewriteRuleSubtreeStream stream_model_rules_clause=new RewriteRuleSubtreeStream(adaptor,"rule model_rules_clause");
        try {
            // PLSQL_DMLParser.g:503:5: ( ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) )
            // PLSQL_DMLParser.g:503:10: ( main_key main_model_name )? model_column_clauses ( cell_reference_options )* model_rules_clause
            {
            // PLSQL_DMLParser.g:503:10: ( main_key main_model_name )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("dimension"))||(input.LT(1).getText().equalsIgnoreCase("main"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {
                int LA106_1 = input.LA(2);

                if ( (LA106_1==DELIMITED_ID||LA106_1==INTRODUCER||LA106_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {
                    alt106=1;
                }
            }
            switch (alt106) {
                case 1 :
                    // PLSQL_DMLParser.g:503:11: main_key main_model_name
                    {
                    pushFollow(FOLLOW_main_key_in_main_model4275);
                    main_key307=gPLSQLParser.main_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_main_key.add(main_key307.getTree());

                    pushFollow(FOLLOW_main_model_name_in_main_model4277);
                    main_model_name308=gPLSQLParser.main_model_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_main_model_name.add(main_model_name308.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_model_column_clauses_in_main_model4281);
            model_column_clauses309=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_column_clauses.add(model_column_clauses309.getTree());

            // PLSQL_DMLParser.g:503:59: ( cell_reference_options )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("rules"))||(input.LT(1).getText().equalsIgnoreCase("keep"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                    int LA107_1 = input.LA(2);

                    if ( (LA107_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("rules"))||(input.LT(1).getText().equalsIgnoreCase("keep"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                        int LA107_5 = input.LA(3);

                        if ( (((input.LT(1).getText().equalsIgnoreCase("keep"))||(input.LT(1).getText().equalsIgnoreCase("ignore")))) ) {
                            alt107=1;
                        }


                    }


                }
                else if ( (LA107_0==SQL92_RESERVED_UNIQUE) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // PLSQL_DMLParser.g:503:59: cell_reference_options
            	    {
            	    pushFollow(FOLLOW_cell_reference_options_in_main_model4283);
            	    cell_reference_options310=cell_reference_options();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cell_reference_options.add(cell_reference_options310.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);


            pushFollow(FOLLOW_model_rules_clause_in_main_model4286);
            model_rules_clause311=model_rules_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_rules_clause.add(model_rules_clause311.getTree());

            // AST REWRITE
            // elements: model_rules_clause, main_model_name, cell_reference_options, model_column_clauses
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:9: -> ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
            {
                // PLSQL_DMLParser.g:504:12: ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MAIN_MODEL, "MAIN_MODEL")
                , root_1);

                // PLSQL_DMLParser.g:504:25: ( main_model_name )?
                if ( stream_main_model_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_main_model_name.nextTree());

                }
                stream_main_model_name.reset();

                adaptor.addChild(root_1, stream_model_column_clauses.nextTree());

                adaptor.addChild(root_1, stream_model_rules_clause.nextTree());

                // PLSQL_DMLParser.g:504:82: ( cell_reference_options )*
                while ( stream_cell_reference_options.hasNext() ) {
                    adaptor.addChild(root_1, stream_cell_reference_options.nextTree());

                }
                stream_cell_reference_options.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "main_model"


    public static class model_column_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_column_clauses"
    // PLSQL_DMLParser.g:507:1: model_column_clauses : ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list -> ^( MODEL_COLUMN ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ( model_column_partition_part )? ) ;
    public final model_column_clauses_return model_column_clauses() throws RecognitionException {
        model_column_clauses_return retval = new model_column_clauses_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        model_column_partition_part_return model_column_partition_part312 =null;

        PLSQLParser_PLSQLKeys.dimension_key_return dimension_key313 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key314 =null;

        model_column_list_return model_column_list315 =null;

        PLSQLParser_PLSQLKeys.measures_key_return measures_key316 =null;

        model_column_list_return model_column_list317 =null;


        RewriteRuleSubtreeStream stream_model_column_list=new RewriteRuleSubtreeStream(adaptor,"rule model_column_list");
        RewriteRuleSubtreeStream stream_dimension_key=new RewriteRuleSubtreeStream(adaptor,"rule dimension_key");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_model_column_partition_part=new RewriteRuleSubtreeStream(adaptor,"rule model_column_partition_part");
        RewriteRuleSubtreeStream stream_measures_key=new RewriteRuleSubtreeStream(adaptor,"rule measures_key");
        try {
            // PLSQL_DMLParser.g:508:5: ( ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list -> ^( MODEL_COLUMN ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ( model_column_partition_part )? ) )
            // PLSQL_DMLParser.g:508:10: ( model_column_partition_part )? dimension_key by_key model_column_list measures_key model_column_list
            {
            // PLSQL_DMLParser.g:508:10: ( model_column_partition_part )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("dimension"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {
                int LA108_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("partition"))) ) {
                    alt108=1;
                }
            }
            switch (alt108) {
                case 1 :
                    // PLSQL_DMLParser.g:508:10: model_column_partition_part
                    {
                    pushFollow(FOLLOW_model_column_partition_part_in_model_column_clauses4330);
                    model_column_partition_part312=model_column_partition_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_model_column_partition_part.add(model_column_partition_part312.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_dimension_key_in_model_column_clauses4341);
            dimension_key313=gPLSQLParser.dimension_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_dimension_key.add(dimension_key313.getTree());

            pushFollow(FOLLOW_by_key_in_model_column_clauses4343);
            by_key314=gPLSQLParser.by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_by_key.add(by_key314.getTree());

            pushFollow(FOLLOW_model_column_list_in_model_column_clauses4345);
            model_column_list315=model_column_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_column_list.add(model_column_list315.getTree());

            pushFollow(FOLLOW_measures_key_in_model_column_clauses4347);
            measures_key316=gPLSQLParser.measures_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_measures_key.add(measures_key316.getTree());

            pushFollow(FOLLOW_model_column_list_in_model_column_clauses4349);
            model_column_list317=model_column_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_column_list.add(model_column_list317.getTree());

            // AST REWRITE
            // elements: measures_key, model_column_partition_part, model_column_list, model_column_list, dimension_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 510:9: -> ^( MODEL_COLUMN ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ( model_column_partition_part )? )
            {
                // PLSQL_DMLParser.g:510:12: ^( MODEL_COLUMN ^( dimension_key model_column_list ) ^( measures_key model_column_list ) ( model_column_partition_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODEL_COLUMN, "MODEL_COLUMN")
                , root_1);

                // PLSQL_DMLParser.g:510:27: ^( dimension_key model_column_list )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_dimension_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_model_column_list.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:510:62: ^( measures_key model_column_list )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_measures_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_model_column_list.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:510:96: ( model_column_partition_part )?
                if ( stream_model_column_partition_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_column_partition_part.nextTree());

                }
                stream_model_column_partition_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_column_clauses"


    public static class model_column_partition_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_column_partition_part"
    // PLSQL_DMLParser.g:513:1: model_column_partition_part : partition_key ^ by_key ! model_column_list ;
    public final model_column_partition_part_return model_column_partition_part() throws RecognitionException {
        model_column_partition_part_return retval = new model_column_partition_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.partition_key_return partition_key318 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key319 =null;

        model_column_list_return model_column_list320 =null;



        try {
            // PLSQL_DMLParser.g:514:5: ( partition_key ^ by_key ! model_column_list )
            // PLSQL_DMLParser.g:514:10: partition_key ^ by_key ! model_column_list
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_partition_key_in_model_column_partition_part4398);
            partition_key318=gPLSQLParser.partition_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(partition_key318.getTree(), root_0);

            pushFollow(FOLLOW_by_key_in_model_column_partition_part4401);
            by_key319=gPLSQLParser.by_key();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_model_column_list_in_model_column_partition_part4404);
            model_column_list320=model_column_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column_list320.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_column_partition_part"


    public static class model_column_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_column_list"
    // PLSQL_DMLParser.g:517:1: model_column_list : LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN -> ^( MODEL_COLUMNS ( model_column )+ ) ;
    public final model_column_list_return model_column_list() throws RecognitionException {
        model_column_list_return retval = new model_column_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN321=null;
        Token COMMA323=null;
        Token RIGHT_PAREN325=null;
        model_column_return model_column322 =null;

        model_column_return model_column324 =null;


        Object LEFT_PAREN321_tree=null;
        Object COMMA323_tree=null;
        Object RIGHT_PAREN325_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_model_column=new RewriteRuleSubtreeStream(adaptor,"rule model_column");
        try {
            // PLSQL_DMLParser.g:518:5: ( LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN -> ^( MODEL_COLUMNS ( model_column )+ ) )
            // PLSQL_DMLParser.g:518:10: LEFT_PAREN model_column ( COMMA model_column )* RIGHT_PAREN
            {
            LEFT_PAREN321=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_model_column_list4424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN321);


            pushFollow(FOLLOW_model_column_in_model_column_list4426);
            model_column322=model_column();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_column.add(model_column322.getTree());

            // PLSQL_DMLParser.g:518:34: ( COMMA model_column )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==COMMA) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // PLSQL_DMLParser.g:518:35: COMMA model_column
            	    {
            	    COMMA323=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_column_list4429); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA323);


            	    pushFollow(FOLLOW_model_column_in_model_column_list4431);
            	    model_column324=model_column();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_model_column.add(model_column324.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            RIGHT_PAREN325=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_model_column_list4436); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN325);


            // AST REWRITE
            // elements: model_column
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 519:9: -> ^( MODEL_COLUMNS ( model_column )+ )
            {
                // PLSQL_DMLParser.g:519:12: ^( MODEL_COLUMNS ( model_column )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODEL_COLUMNS, "MODEL_COLUMNS")
                , root_1);

                if ( !(stream_model_column.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_model_column.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_column.nextTree());

                }
                stream_model_column.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_column_list"


    public static class model_column_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_column"
    // PLSQL_DMLParser.g:522:1: model_column : expression ( table_alias )? -> ^( MODEL_COLUMN ( table_alias )? ^( EXPR expression ) ) ;
    public final model_column_return model_column() throws RecognitionException {
        model_column_return retval = new model_column_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        expression_return expression326 =null;

        PLSQLParser_PLSQLCommons.table_alias_return table_alias327 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
        try {
            // PLSQL_DMLParser.g:523:5: ( expression ( table_alias )? -> ^( MODEL_COLUMN ( table_alias )? ^( EXPR expression ) ) )
            // PLSQL_DMLParser.g:523:10: expression ( table_alias )?
            {
            pushFollow(FOLLOW_expression_in_model_column4473);
            expression326=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression326.getTree());

            // PLSQL_DMLParser.g:523:21: ( table_alias )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( ((LA110_0 >= CHAR_STRING && LA110_0 <= CHAR_STRING_PERL)||LA110_0==DELIMITED_ID||LA110_0==INTRODUCER||LA110_0==NATIONAL_CHAR_STRING_LIT||LA110_0==REGULAR_ID) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // PLSQL_DMLParser.g:523:21: table_alias
                    {
                    pushFollow(FOLLOW_table_alias_in_model_column4475);
                    table_alias327=gPLSQLParser.table_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_alias.add(table_alias327.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, table_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:9: -> ^( MODEL_COLUMN ( table_alias )? ^( EXPR expression ) )
            {
                // PLSQL_DMLParser.g:524:12: ^( MODEL_COLUMN ( table_alias )? ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODEL_COLUMN, "MODEL_COLUMN")
                , root_1);

                // PLSQL_DMLParser.g:524:27: ( table_alias )?
                if ( stream_table_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_alias.nextTree());

                }
                stream_table_alias.reset();

                // PLSQL_DMLParser.g:524:40: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_column"


    public static class model_rules_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_rules_clause"
    // PLSQL_DMLParser.g:527:1: model_rules_clause : ( model_rules_part )? LEFT_PAREN model_rules_element ( COMMA model_rules_element )* RIGHT_PAREN -> ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) ;
    public final model_rules_clause_return model_rules_clause() throws RecognitionException {
        model_rules_clause_return retval = new model_rules_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN329=null;
        Token COMMA331=null;
        Token RIGHT_PAREN333=null;
        model_rules_part_return model_rules_part328 =null;

        model_rules_element_return model_rules_element330 =null;

        model_rules_element_return model_rules_element332 =null;


        Object LEFT_PAREN329_tree=null;
        Object COMMA331_tree=null;
        Object RIGHT_PAREN333_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_model_rules_element=new RewriteRuleSubtreeStream(adaptor,"rule model_rules_element");
        RewriteRuleSubtreeStream stream_model_rules_part=new RewriteRuleSubtreeStream(adaptor,"rule model_rules_part");
        try {
            // PLSQL_DMLParser.g:528:5: ( ( model_rules_part )? LEFT_PAREN model_rules_element ( COMMA model_rules_element )* RIGHT_PAREN -> ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) )
            // PLSQL_DMLParser.g:528:10: ( model_rules_part )? LEFT_PAREN model_rules_element ( COMMA model_rules_element )* RIGHT_PAREN
            {
            // PLSQL_DMLParser.g:528:10: ( model_rules_part )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("rules")))) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // PLSQL_DMLParser.g:528:10: model_rules_part
                    {
                    pushFollow(FOLLOW_model_rules_part_in_model_rules_clause4519);
                    model_rules_part328=model_rules_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_model_rules_part.add(model_rules_part328.getTree());

                    }
                    break;

            }


            LEFT_PAREN329=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_model_rules_clause4522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN329);


            pushFollow(FOLLOW_model_rules_element_in_model_rules_clause4524);
            model_rules_element330=model_rules_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_rules_element.add(model_rules_element330.getTree());

            // PLSQL_DMLParser.g:528:59: ( COMMA model_rules_element )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // PLSQL_DMLParser.g:528:60: COMMA model_rules_element
            	    {
            	    COMMA331=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_rules_clause4527); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA331);


            	    pushFollow(FOLLOW_model_rules_element_in_model_rules_clause4529);
            	    model_rules_element332=model_rules_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_model_rules_element.add(model_rules_element332.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            RIGHT_PAREN333=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_model_rules_clause4533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN333);


            // AST REWRITE
            // elements: model_rules_part, model_rules_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 529:9: -> ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
            {
                // PLSQL_DMLParser.g:529:12: ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODEL_RULES, "MODEL_RULES")
                , root_1);

                if ( !(stream_model_rules_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_model_rules_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_rules_element.nextTree());

                }
                stream_model_rules_element.reset();

                // PLSQL_DMLParser.g:529:47: ( model_rules_part )?
                if ( stream_model_rules_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_rules_part.nextTree());

                }
                stream_model_rules_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_rules_clause"


    public static class model_rules_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_rules_part"
    // PLSQL_DMLParser.g:532:1: model_rules_part : rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )? -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? ) ;
    public final model_rules_part_return model_rules_part() throws RecognitionException {
        model_rules_part_return retval = new model_rules_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.rules_key_return rules_key334 =null;

        PLSQLParser_PLSQLKeys.update_key_return update_key335 =null;

        PLSQLParser_PLSQLKeys.upsert_key_return upsert_key336 =null;

        PLSQLParser_PLSQLKeys.all_key_return all_key337 =null;

        PLSQLParser_PLSQLKeys.automatic_key_return automatic_key338 =null;

        PLSQLParser_PLSQLKeys.sequential_key_return sequential_key339 =null;

        PLSQLParser_PLSQLKeys.order_key_return order_key340 =null;

        model_iterate_clause_return model_iterate_clause341 =null;


        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_sequential_key=new RewriteRuleSubtreeStream(adaptor,"rule sequential_key");
        RewriteRuleSubtreeStream stream_order_key=new RewriteRuleSubtreeStream(adaptor,"rule order_key");
        RewriteRuleSubtreeStream stream_rules_key=new RewriteRuleSubtreeStream(adaptor,"rule rules_key");
        RewriteRuleSubtreeStream stream_model_iterate_clause=new RewriteRuleSubtreeStream(adaptor,"rule model_iterate_clause");
        RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
        RewriteRuleSubtreeStream stream_automatic_key=new RewriteRuleSubtreeStream(adaptor,"rule automatic_key");
        RewriteRuleSubtreeStream stream_upsert_key=new RewriteRuleSubtreeStream(adaptor,"rule upsert_key");
        try {
            // PLSQL_DMLParser.g:533:5: ( rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )? -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? ) )
            // PLSQL_DMLParser.g:533:10: rules_key ( update_key | upsert_key ( all_key )? )? ( ( automatic_key | sequential_key ) order_key )? ( model_iterate_clause )?
            {
            pushFollow(FOLLOW_rules_key_in_model_rules_part4573);
            rules_key334=gPLSQLParser.rules_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rules_key.add(rules_key334.getTree());

            // PLSQL_DMLParser.g:533:20: ( update_key | upsert_key ( all_key )? )?
            int alt114=3;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==SQL92_RESERVED_UPDATE) ) {
                alt114=1;
            }
            else if ( (LA114_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("automatic"))||(input.LT(1).getText().equalsIgnoreCase("iterate"))||(input.LT(1).getText().equalsIgnoreCase("upsert"))||(input.LT(1).getText().equalsIgnoreCase("sequential"))))) {
                int LA114_2 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("upsert"))) ) {
                    alt114=2;
                }
            }
            switch (alt114) {
                case 1 :
                    // PLSQL_DMLParser.g:533:21: update_key
                    {
                    pushFollow(FOLLOW_update_key_in_model_rules_part4576);
                    update_key335=gPLSQLParser.update_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_update_key.add(update_key335.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:533:32: upsert_key ( all_key )?
                    {
                    pushFollow(FOLLOW_upsert_key_in_model_rules_part4578);
                    upsert_key336=gPLSQLParser.upsert_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_upsert_key.add(upsert_key336.getTree());

                    // PLSQL_DMLParser.g:533:43: ( all_key )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==SQL92_RESERVED_ALL) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // PLSQL_DMLParser.g:533:43: all_key
                            {
                            pushFollow(FOLLOW_all_key_in_model_rules_part4580);
                            all_key337=gPLSQLParser.all_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_all_key.add(all_key337.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // PLSQL_DMLParser.g:533:54: ( ( automatic_key | sequential_key ) order_key )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("automatic"))||(input.LT(1).getText().equalsIgnoreCase("iterate"))||(input.LT(1).getText().equalsIgnoreCase("sequential"))))) {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==SQL92_RESERVED_ORDER) && (((input.LT(1).getText().equalsIgnoreCase("automatic"))||(input.LT(1).getText().equalsIgnoreCase("sequential"))))) {
                    alt116=1;
                }
            }
            switch (alt116) {
                case 1 :
                    // PLSQL_DMLParser.g:533:55: ( automatic_key | sequential_key ) order_key
                    {
                    // PLSQL_DMLParser.g:533:55: ( automatic_key | sequential_key )
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("automatic"))||(input.LT(1).getText().equalsIgnoreCase("sequential"))))) {
                        int LA115_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("automatic"))) ) {
                            alt115=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("sequential"))) ) {
                            alt115=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 115, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 115, 0, input);

                        throw nvae;

                    }
                    switch (alt115) {
                        case 1 :
                            // PLSQL_DMLParser.g:533:56: automatic_key
                            {
                            pushFollow(FOLLOW_automatic_key_in_model_rules_part4587);
                            automatic_key338=gPLSQLParser.automatic_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_automatic_key.add(automatic_key338.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:533:70: sequential_key
                            {
                            pushFollow(FOLLOW_sequential_key_in_model_rules_part4589);
                            sequential_key339=gPLSQLParser.sequential_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sequential_key.add(sequential_key339.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_order_key_in_model_rules_part4592);
                    order_key340=gPLSQLParser.order_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_order_key.add(order_key340.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:533:98: ( model_iterate_clause )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("iterate")))) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // PLSQL_DMLParser.g:533:98: model_iterate_clause
                    {
                    pushFollow(FOLLOW_model_iterate_clause_in_model_rules_part4596);
                    model_iterate_clause341=model_iterate_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_model_iterate_clause.add(model_iterate_clause341.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: model_iterate_clause, update_key, automatic_key, all_key, sequential_key, upsert_key, rules_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:9: -> ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? )
            {
                // PLSQL_DMLParser.g:534:12: ^( rules_key ( update_key )? ( upsert_key )? ( all_key )? ( automatic_key )? ( sequential_key )? ( model_iterate_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_rules_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:534:24: ( update_key )?
                if ( stream_update_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_update_key.nextTree());

                }
                stream_update_key.reset();

                // PLSQL_DMLParser.g:534:36: ( upsert_key )?
                if ( stream_upsert_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_upsert_key.nextTree());

                }
                stream_upsert_key.reset();

                // PLSQL_DMLParser.g:534:48: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_all_key.nextTree());

                }
                stream_all_key.reset();

                // PLSQL_DMLParser.g:534:57: ( automatic_key )?
                if ( stream_automatic_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_automatic_key.nextTree());

                }
                stream_automatic_key.reset();

                // PLSQL_DMLParser.g:534:72: ( sequential_key )?
                if ( stream_sequential_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_sequential_key.nextTree());

                }
                stream_sequential_key.reset();

                // PLSQL_DMLParser.g:534:88: ( model_iterate_clause )?
                if ( stream_model_iterate_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_model_iterate_clause.nextTree());

                }
                stream_model_iterate_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_rules_part"


    public static class model_rules_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_rules_element"
    // PLSQL_DMLParser.g:537:1: model_rules_element : ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? ) ;
    public final model_rules_element_return model_rules_element() throws RecognitionException {
        model_rules_element_return retval = new model_rules_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUALS_OP347=null;
        PLSQLParser_PLSQLKeys.update_key_return update_key342 =null;

        PLSQLParser_PLSQLKeys.upsert_key_return upsert_key343 =null;

        PLSQLParser_PLSQLKeys.all_key_return all_key344 =null;

        cell_assignment_return cell_assignment345 =null;

        order_by_clause_return order_by_clause346 =null;

        expression_return expression348 =null;


        Object EQUALS_OP347_tree=null;
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_order_by_clause=new RewriteRuleSubtreeStream(adaptor,"rule order_by_clause");
        RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
        RewriteRuleSubtreeStream stream_cell_assignment=new RewriteRuleSubtreeStream(adaptor,"rule cell_assignment");
        RewriteRuleSubtreeStream stream_upsert_key=new RewriteRuleSubtreeStream(adaptor,"rule upsert_key");
        try {
            // PLSQL_DMLParser.g:538:5: ( ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? ) )
            // PLSQL_DMLParser.g:538:10: ( update_key | upsert_key ( ( all_key )=> all_key )? )? cell_assignment ( order_by_clause )? EQUALS_OP expression
            {
            // PLSQL_DMLParser.g:538:10: ( update_key | upsert_key ( ( all_key )=> all_key )? )?
            int alt119=3;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==SQL92_RESERVED_UPDATE) ) {
                alt119=1;
            }
            else if ( (LA119_0==REGULAR_ID) ) {
                int LA119_2 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("upsert"))) ) {
                    alt119=2;
                }
            }
            switch (alt119) {
                case 1 :
                    // PLSQL_DMLParser.g:538:11: update_key
                    {
                    pushFollow(FOLLOW_update_key_in_model_rules_element4650);
                    update_key342=gPLSQLParser.update_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_update_key.add(update_key342.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:538:22: upsert_key ( ( all_key )=> all_key )?
                    {
                    pushFollow(FOLLOW_upsert_key_in_model_rules_element4652);
                    upsert_key343=gPLSQLParser.upsert_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_upsert_key.add(upsert_key343.getTree());

                    // PLSQL_DMLParser.g:538:33: ( ( all_key )=> all_key )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==SQL92_RESERVED_ALL) ) {
                        int LA118_1 = input.LA(2);

                        if ( (synpred19_PLSQL_DMLParser()) ) {
                            alt118=1;
                        }
                    }
                    switch (alt118) {
                        case 1 :
                            // PLSQL_DMLParser.g:538:34: ( all_key )=> all_key
                            {
                            pushFollow(FOLLOW_all_key_in_model_rules_element4660);
                            all_key344=gPLSQLParser.all_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_all_key.add(all_key344.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_cell_assignment_in_model_rules_element4674);
            cell_assignment345=cell_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cell_assignment.add(cell_assignment345.getTree());

            // PLSQL_DMLParser.g:540:17: ( order_by_clause )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==SQL92_RESERVED_ORDER) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // PLSQL_DMLParser.g:540:17: order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_model_rules_element4692);
                    order_by_clause346=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_order_by_clause.add(order_by_clause346.getTree());

                    }
                    break;

            }


            EQUALS_OP347=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_model_rules_element4707); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP347);


            pushFollow(FOLLOW_expression_in_model_rules_element4709);
            expression348=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression348.getTree());

            // AST REWRITE
            // elements: update_key, upsert_key, expression, order_by_clause, cell_assignment, all_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 542:9: -> ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? )
            {
                // PLSQL_DMLParser.g:542:12: ^( MODEL_RULE ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) ) ( update_key )? ( upsert_key )? ( all_key )? ( order_by_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODEL_RULE, "MODEL_RULE")
                , root_1);

                // PLSQL_DMLParser.g:542:25: ^( ASSIGN[$EQUALS_OP] cell_assignment ^( EXPR expression ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, EQUALS_OP347)
                , root_2);

                adaptor.addChild(root_2, stream_cell_assignment.nextTree());

                // PLSQL_DMLParser.g:542:62: ^( EXPR expression )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_expression.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:542:82: ( update_key )?
                if ( stream_update_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_update_key.nextTree());

                }
                stream_update_key.reset();

                // PLSQL_DMLParser.g:542:94: ( upsert_key )?
                if ( stream_upsert_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_upsert_key.nextTree());

                }
                stream_upsert_key.reset();

                // PLSQL_DMLParser.g:542:106: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_all_key.nextTree());

                }
                stream_all_key.reset();

                // PLSQL_DMLParser.g:542:115: ( order_by_clause )?
                if ( stream_order_by_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_order_by_clause.nextTree());

                }
                stream_order_by_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_rules_element"


    public static class cell_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cell_assignment"
    // PLSQL_DMLParser.g:545:1: cell_assignment : model_expression ;
    public final cell_assignment_return cell_assignment() throws RecognitionException {
        cell_assignment_return retval = new cell_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        model_expression_return model_expression349 =null;



        try {
            // PLSQL_DMLParser.g:546:5: ( model_expression )
            // PLSQL_DMLParser.g:546:10: model_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_model_expression_in_cell_assignment4768);
            model_expression349=model_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_expression349.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cell_assignment"


    public static class model_iterate_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_iterate_clause"
    // PLSQL_DMLParser.g:549:1: model_iterate_clause : iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )? -> ^( iterate_key ^( EXPR expression ) ( until_part )? ) ;
    public final model_iterate_clause_return model_iterate_clause() throws RecognitionException {
        model_iterate_clause_return retval = new model_iterate_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN351=null;
        Token RIGHT_PAREN353=null;
        PLSQLParser_PLSQLKeys.iterate_key_return iterate_key350 =null;

        expression_return expression352 =null;

        until_part_return until_part354 =null;


        Object LEFT_PAREN351_tree=null;
        Object RIGHT_PAREN353_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_iterate_key=new RewriteRuleSubtreeStream(adaptor,"rule iterate_key");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_until_part=new RewriteRuleSubtreeStream(adaptor,"rule until_part");
        try {
            // PLSQL_DMLParser.g:550:5: ( iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )? -> ^( iterate_key ^( EXPR expression ) ( until_part )? ) )
            // PLSQL_DMLParser.g:550:10: iterate_key LEFT_PAREN expression RIGHT_PAREN ( until_part )?
            {
            pushFollow(FOLLOW_iterate_key_in_model_iterate_clause4788);
            iterate_key350=gPLSQLParser.iterate_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_iterate_key.add(iterate_key350.getTree());

            LEFT_PAREN351=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_model_iterate_clause4790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN351);


            pushFollow(FOLLOW_expression_in_model_iterate_clause4792);
            expression352=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression352.getTree());

            RIGHT_PAREN353=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_model_iterate_clause4794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN353);


            // PLSQL_DMLParser.g:550:56: ( until_part )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("until")))) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // PLSQL_DMLParser.g:550:56: until_part
                    {
                    pushFollow(FOLLOW_until_part_in_model_iterate_clause4796);
                    until_part354=until_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_until_part.add(until_part354.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: iterate_key, until_part, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 551:9: -> ^( iterate_key ^( EXPR expression ) ( until_part )? )
            {
                // PLSQL_DMLParser.g:551:11: ^( iterate_key ^( EXPR expression ) ( until_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_iterate_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:551:25: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:551:44: ( until_part )?
                if ( stream_until_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_until_part.nextTree());

                }
                stream_until_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_iterate_clause"


    public static class until_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "until_part"
    // PLSQL_DMLParser.g:554:1: until_part : until_key LEFT_PAREN condition RIGHT_PAREN -> ^( until_key ^( LOGIC_EXPR condition ) ) ;
    public final until_part_return until_part() throws RecognitionException {
        until_part_return retval = new until_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN356=null;
        Token RIGHT_PAREN358=null;
        PLSQLParser_PLSQLKeys.until_key_return until_key355 =null;

        condition_return condition357 =null;


        Object LEFT_PAREN356_tree=null;
        Object RIGHT_PAREN358_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_until_key=new RewriteRuleSubtreeStream(adaptor,"rule until_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        try {
            // PLSQL_DMLParser.g:555:5: ( until_key LEFT_PAREN condition RIGHT_PAREN -> ^( until_key ^( LOGIC_EXPR condition ) ) )
            // PLSQL_DMLParser.g:555:10: until_key LEFT_PAREN condition RIGHT_PAREN
            {
            pushFollow(FOLLOW_until_key_in_until_part4839);
            until_key355=gPLSQLParser.until_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_until_key.add(until_key355.getTree());

            LEFT_PAREN356=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_until_part4841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN356);


            pushFollow(FOLLOW_condition_in_until_part4843);
            condition357=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition357.getTree());

            RIGHT_PAREN358=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_until_part4845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN358);


            // AST REWRITE
            // elements: condition, until_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 556:9: -> ^( until_key ^( LOGIC_EXPR condition ) )
            {
                // PLSQL_DMLParser.g:556:12: ^( until_key ^( LOGIC_EXPR condition ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_until_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:556:24: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "until_part"


    public static class order_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_clause"
    // PLSQL_DMLParser.g:559:1: order_by_clause : order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )* -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) ;
    public final order_by_clause_return order_by_clause() throws RecognitionException {
        order_by_clause_return retval = new order_by_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA363=null;
        PLSQLParser_PLSQLKeys.order_key_return order_key359 =null;

        PLSQLParser_PLSQLKeys.siblings_key_return siblings_key360 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key361 =null;

        order_by_elements_return order_by_elements362 =null;

        order_by_elements_return order_by_elements364 =null;


        Object COMMA363_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_order_key=new RewriteRuleSubtreeStream(adaptor,"rule order_key");
        RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
        RewriteRuleSubtreeStream stream_siblings_key=new RewriteRuleSubtreeStream(adaptor,"rule siblings_key");
        RewriteRuleSubtreeStream stream_order_by_elements=new RewriteRuleSubtreeStream(adaptor,"rule order_by_elements");
        try {
            // PLSQL_DMLParser.g:560:5: ( order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )* -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) )
            // PLSQL_DMLParser.g:560:10: order_key ( siblings_key )? by_key order_by_elements ( COMMA order_by_elements )*
            {
            pushFollow(FOLLOW_order_key_in_order_by_clause4885);
            order_key359=gPLSQLParser.order_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_order_key.add(order_key359.getTree());

            // PLSQL_DMLParser.g:560:20: ( siblings_key )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("siblings")))) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // PLSQL_DMLParser.g:560:20: siblings_key
                    {
                    pushFollow(FOLLOW_siblings_key_in_order_by_clause4887);
                    siblings_key360=gPLSQLParser.siblings_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_siblings_key.add(siblings_key360.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_by_key_in_order_by_clause4890);
            by_key361=gPLSQLParser.by_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_by_key.add(by_key361.getTree());

            pushFollow(FOLLOW_order_by_elements_in_order_by_clause4892);
            order_by_elements362=order_by_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_order_by_elements.add(order_by_elements362.getTree());

            // PLSQL_DMLParser.g:560:59: ( COMMA order_by_elements )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==COMMA) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // PLSQL_DMLParser.g:560:60: COMMA order_by_elements
            	    {
            	    COMMA363=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_by_clause4895); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA363);


            	    pushFollow(FOLLOW_order_by_elements_in_order_by_clause4897);
            	    order_by_elements364=order_by_elements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_order_by_elements.add(order_by_elements364.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            // AST REWRITE
            // elements: order_key, order_by_elements, siblings_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 561:9: -> ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
            {
                // PLSQL_DMLParser.g:561:12: ^( order_key ( siblings_key )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_order_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:561:24: ( siblings_key )?
                if ( stream_siblings_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_siblings_key.nextTree());

                }
                stream_siblings_key.reset();

                // PLSQL_DMLParser.g:561:38: ^( ORDER_BY_ELEMENTS ( order_by_elements )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ORDER_BY_ELEMENTS, "ORDER_BY_ELEMENTS")
                , root_2);

                if ( !(stream_order_by_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_order_by_elements.hasNext() ) {
                    adaptor.addChild(root_2, stream_order_by_elements.nextTree());

                }
                stream_order_by_elements.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"


    public static class order_by_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "order_by_elements"
    // PLSQL_DMLParser.g:564:1: order_by_elements : expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )? -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? ) ;
    public final order_by_elements_return order_by_elements() throws RecognitionException {
        order_by_elements_return retval = new order_by_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        expression_return expression365 =null;

        PLSQLParser_PLSQLKeys.asc_key_return asc_key366 =null;

        PLSQLParser_PLSQLKeys.desc_key_return desc_key367 =null;

        PLSQLParser_PLSQLKeys.nulls_key_return nulls_key368 =null;

        PLSQLParser_PLSQLKeys.first_key_return first_key369 =null;

        PLSQLParser_PLSQLKeys.last_key_return last_key370 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_desc_key=new RewriteRuleSubtreeStream(adaptor,"rule desc_key");
        RewriteRuleSubtreeStream stream_nulls_key=new RewriteRuleSubtreeStream(adaptor,"rule nulls_key");
        RewriteRuleSubtreeStream stream_last_key=new RewriteRuleSubtreeStream(adaptor,"rule last_key");
        RewriteRuleSubtreeStream stream_asc_key=new RewriteRuleSubtreeStream(adaptor,"rule asc_key");
        RewriteRuleSubtreeStream stream_first_key=new RewriteRuleSubtreeStream(adaptor,"rule first_key");
        try {
            // PLSQL_DMLParser.g:565:5: ( expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )? -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? ) )
            // PLSQL_DMLParser.g:565:10: expression ( asc_key | desc_key )? ( nulls_key ( first_key | last_key ) )?
            {
            pushFollow(FOLLOW_expression_in_order_by_elements4943);
            expression365=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression365.getTree());

            // PLSQL_DMLParser.g:565:21: ( asc_key | desc_key )?
            int alt124=3;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==SQL92_RESERVED_ASC) ) {
                alt124=1;
            }
            else if ( (LA124_0==SQL92_RESERVED_DESC) ) {
                alt124=2;
            }
            switch (alt124) {
                case 1 :
                    // PLSQL_DMLParser.g:565:22: asc_key
                    {
                    pushFollow(FOLLOW_asc_key_in_order_by_elements4946);
                    asc_key366=gPLSQLParser.asc_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_asc_key.add(asc_key366.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:565:30: desc_key
                    {
                    pushFollow(FOLLOW_desc_key_in_order_by_elements4948);
                    desc_key367=gPLSQLParser.desc_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_desc_key.add(desc_key367.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:565:41: ( nulls_key ( first_key | last_key ) )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))||(input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {
                int LA126_1 = input.LA(2);

                if ( (LA126_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))||(input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {
                    int LA126_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("nulls"))) ) {
                        alt126=1;
                    }
                }
            }
            switch (alt126) {
                case 1 :
                    // PLSQL_DMLParser.g:565:42: nulls_key ( first_key | last_key )
                    {
                    pushFollow(FOLLOW_nulls_key_in_order_by_elements4953);
                    nulls_key368=gPLSQLParser.nulls_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nulls_key.add(nulls_key368.getTree());

                    // PLSQL_DMLParser.g:565:52: ( first_key | last_key )
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("first"))||(input.LT(1).getText().equalsIgnoreCase("last"))))) {
                        int LA125_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("first"))) ) {
                            alt125=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("last"))) ) {
                            alt125=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);

                        throw nvae;

                    }
                    switch (alt125) {
                        case 1 :
                            // PLSQL_DMLParser.g:565:53: first_key
                            {
                            pushFollow(FOLLOW_first_key_in_order_by_elements4956);
                            first_key369=gPLSQLParser.first_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_first_key.add(first_key369.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:565:63: last_key
                            {
                            pushFollow(FOLLOW_last_key_in_order_by_elements4958);
                            last_key370=gPLSQLParser.last_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_last_key.add(last_key370.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: nulls_key, last_key, desc_key, asc_key, first_key, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:9: -> ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? )
            {
                // PLSQL_DMLParser.g:566:12: ^( ORDER_BY_ELEMENT ^( EXPR expression ) ( asc_key )? ( desc_key )? ( nulls_key )? ( first_key )? ( last_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ORDER_BY_ELEMENT, "ORDER_BY_ELEMENT")
                , root_1);

                // PLSQL_DMLParser.g:566:31: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:566:50: ( asc_key )?
                if ( stream_asc_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_asc_key.nextTree());

                }
                stream_asc_key.reset();

                // PLSQL_DMLParser.g:566:59: ( desc_key )?
                if ( stream_desc_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_desc_key.nextTree());

                }
                stream_desc_key.reset();

                // PLSQL_DMLParser.g:566:69: ( nulls_key )?
                if ( stream_nulls_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_nulls_key.nextTree());

                }
                stream_nulls_key.reset();

                // PLSQL_DMLParser.g:566:80: ( first_key )?
                if ( stream_first_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_first_key.nextTree());

                }
                stream_first_key.reset();

                // PLSQL_DMLParser.g:566:91: ( last_key )?
                if ( stream_last_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_last_key.nextTree());

                }
                stream_last_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "order_by_elements"


    public static class for_update_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_update_clause"
    // PLSQL_DMLParser.g:569:1: for_update_clause : for_key update_key ( for_update_of_part )? ( for_update_options )? -> ^( for_key ( for_update_of_part )? ( for_update_options )? ) ;
    public final for_update_clause_return for_update_clause() throws RecognitionException {
        for_update_clause_return retval = new for_update_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.for_key_return for_key371 =null;

        PLSQLParser_PLSQLKeys.update_key_return update_key372 =null;

        for_update_of_part_return for_update_of_part373 =null;

        for_update_options_return for_update_options374 =null;


        RewriteRuleSubtreeStream stream_for_update_of_part=new RewriteRuleSubtreeStream(adaptor,"rule for_update_of_part");
        RewriteRuleSubtreeStream stream_for_update_options=new RewriteRuleSubtreeStream(adaptor,"rule for_update_options");
        RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            // PLSQL_DMLParser.g:570:5: ( for_key update_key ( for_update_of_part )? ( for_update_options )? -> ^( for_key ( for_update_of_part )? ( for_update_options )? ) )
            // PLSQL_DMLParser.g:570:10: for_key update_key ( for_update_of_part )? ( for_update_options )?
            {
            pushFollow(FOLLOW_for_key_in_for_update_clause5016);
            for_key371=gPLSQLParser.for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key371.getTree());

            pushFollow(FOLLOW_update_key_in_for_update_clause5018);
            update_key372=gPLSQLParser.update_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_update_key.add(update_key372.getTree());

            // PLSQL_DMLParser.g:570:29: ( for_update_of_part )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==SQL92_RESERVED_OF) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // PLSQL_DMLParser.g:570:29: for_update_of_part
                    {
                    pushFollow(FOLLOW_for_update_of_part_in_for_update_clause5020);
                    for_update_of_part373=for_update_of_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_for_update_of_part.add(for_update_of_part373.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:570:49: ( for_update_options )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))||(input.LT(1).getText().equalsIgnoreCase("skip"))||(input.LT(1).getText().equalsIgnoreCase("wait"))))) {
                int LA128_1 = input.LA(2);

                if ( (LA128_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("skip"))||(input.LT(1).getText().equalsIgnoreCase("log"))||(input.LT(1).getText().equalsIgnoreCase("wait"))))) {
                    int LA128_4 = input.LA(3);

                    if ( (((input.LT(1).getText().equalsIgnoreCase("skip"))||(input.LT(1).getText().equalsIgnoreCase("wait")))) ) {
                        alt128=1;
                    }
                }
                else if ( (LA128_1==APPROXIMATE_NUM_LIT||LA128_1==BINDVAR||(LA128_1 >= CHAR_STRING && LA128_1 <= COLON)||LA128_1==DELIMITED_ID||LA128_1==EXACT_NUM_LIT||LA128_1==INTRODUCER||LA128_1==LEFT_PAREN||(LA128_1 >= MINUS_SIGN && LA128_1 <= NATIONAL_CHAR_STRING_LIT)||LA128_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA128_1==PLUS_SIGN||LA128_1==SQL92_RESERVED_ALL||LA128_1==SQL92_RESERVED_ANY||LA128_1==SQL92_RESERVED_CASE||(LA128_1 >= SQL92_RESERVED_CURSOR && LA128_1 <= SQL92_RESERVED_DATE)||LA128_1==SQL92_RESERVED_DEFAULT||LA128_1==SQL92_RESERVED_DISTINCT||(LA128_1 >= SQL92_RESERVED_EXISTS && LA128_1 <= SQL92_RESERVED_FALSE)||(LA128_1 >= SQL92_RESERVED_NOT && LA128_1 <= SQL92_RESERVED_NULL)||LA128_1==SQL92_RESERVED_PRIOR||LA128_1==SQL92_RESERVED_TRUE||LA128_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("wait")))) {
                    alt128=1;
                }
            }
            else if ( (LA128_0==PLSQL_RESERVED_NOWAIT) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // PLSQL_DMLParser.g:570:49: for_update_options
                    {
                    pushFollow(FOLLOW_for_update_options_in_for_update_clause5023);
                    for_update_options374=for_update_options();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_for_update_options.add(for_update_options374.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: for_key, for_update_options, for_update_of_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:9: -> ^( for_key ( for_update_of_part )? ( for_update_options )? )
            {
                // PLSQL_DMLParser.g:571:12: ^( for_key ( for_update_of_part )? ( for_update_options )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_for_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:571:22: ( for_update_of_part )?
                if ( stream_for_update_of_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_update_of_part.nextTree());

                }
                stream_for_update_of_part.reset();

                // PLSQL_DMLParser.g:571:42: ( for_update_options )?
                if ( stream_for_update_options.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_update_options.nextTree());

                }
                stream_for_update_options.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_update_clause"


    public static class for_update_of_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_update_of_part"
    // PLSQL_DMLParser.g:574:1: for_update_of_part : of_key ^ column_name ( COMMA ! column_name )* ;
    public final for_update_of_part_return for_update_of_part() throws RecognitionException {
        for_update_of_part_return retval = new for_update_of_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA377=null;
        PLSQLParser_PLSQLKeys.of_key_return of_key375 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name376 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name378 =null;


        Object COMMA377_tree=null;

        try {
            // PLSQL_DMLParser.g:575:5: ( of_key ^ column_name ( COMMA ! column_name )* )
            // PLSQL_DMLParser.g:575:10: of_key ^ column_name ( COMMA ! column_name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_of_key_in_for_update_of_part5064);
            of_key375=gPLSQLParser.of_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(of_key375.getTree(), root_0);

            pushFollow(FOLLOW_column_name_in_for_update_of_part5067);
            column_name376=gPLSQLParser.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name376.getTree());

            // PLSQL_DMLParser.g:575:30: ( COMMA ! column_name )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==COMMA) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // PLSQL_DMLParser.g:575:31: COMMA ! column_name
            	    {
            	    COMMA377=(Token)match(input,COMMA,FOLLOW_COMMA_in_for_update_of_part5070); if (state.failed) return retval;

            	    pushFollow(FOLLOW_column_name_in_for_update_of_part5073);
            	    column_name378=gPLSQLParser.column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name378.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_update_of_part"


    public static class for_update_options_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_update_options"
    // PLSQL_DMLParser.g:578:1: for_update_options : ( skip_key locked_key !| nowait_key | wait_key expression -> ^( wait_key ^( EXPR expression ) ) );
    public final for_update_options_return for_update_options() throws RecognitionException {
        for_update_options_return retval = new for_update_options_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.skip_key_return skip_key379 =null;

        PLSQLParser_PLSQLKeys.locked_key_return locked_key380 =null;

        PLSQLParser_PLSQLKeys.nowait_key_return nowait_key381 =null;

        PLSQLParser_PLSQLKeys.wait_key_return wait_key382 =null;

        expression_return expression383 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_wait_key=new RewriteRuleSubtreeStream(adaptor,"rule wait_key");
        try {
            // PLSQL_DMLParser.g:579:5: ( skip_key locked_key !| nowait_key | wait_key expression -> ^( wait_key ^( EXPR expression ) ) )
            int alt130=3;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("skip"))||(input.LT(1).getText().equalsIgnoreCase("wait"))))) {
                int LA130_1 = input.LA(2);

                if ( (LA130_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("skip"))||(input.LT(1).getText().equalsIgnoreCase("wait"))))) {
                    int LA130_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("skip"))) ) {
                        alt130=1;
                    }
                    else if ( ((input.LT(1).getText().equalsIgnoreCase("wait"))) ) {
                        alt130=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 3, input);

                        throw nvae;

                    }
                }
                else if ( (LA130_1==APPROXIMATE_NUM_LIT||LA130_1==BINDVAR||(LA130_1 >= CHAR_STRING && LA130_1 <= COLON)||LA130_1==DELIMITED_ID||LA130_1==EXACT_NUM_LIT||LA130_1==INTRODUCER||LA130_1==LEFT_PAREN||(LA130_1 >= MINUS_SIGN && LA130_1 <= NATIONAL_CHAR_STRING_LIT)||LA130_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA130_1==PLUS_SIGN||LA130_1==SQL92_RESERVED_ALL||LA130_1==SQL92_RESERVED_ANY||LA130_1==SQL92_RESERVED_CASE||(LA130_1 >= SQL92_RESERVED_CURSOR && LA130_1 <= SQL92_RESERVED_DATE)||LA130_1==SQL92_RESERVED_DEFAULT||LA130_1==SQL92_RESERVED_DISTINCT||(LA130_1 >= SQL92_RESERVED_EXISTS && LA130_1 <= SQL92_RESERVED_FALSE)||(LA130_1 >= SQL92_RESERVED_NOT && LA130_1 <= SQL92_RESERVED_NULL)||LA130_1==SQL92_RESERVED_PRIOR||LA130_1==SQL92_RESERVED_TRUE||LA130_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("wait")))) {
                    alt130=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA130_0==PLSQL_RESERVED_NOWAIT) ) {
                alt130=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;

            }
            switch (alt130) {
                case 1 :
                    // PLSQL_DMLParser.g:579:10: skip_key locked_key !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_skip_key_in_for_update_options5095);
                    skip_key379=gPLSQLParser.skip_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, skip_key379.getTree());

                    pushFollow(FOLLOW_locked_key_in_for_update_options5097);
                    locked_key380=gPLSQLParser.locked_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:580:10: nowait_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nowait_key_in_for_update_options5109);
                    nowait_key381=gPLSQLParser.nowait_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nowait_key381.getTree());

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:581:10: wait_key expression
                    {
                    pushFollow(FOLLOW_wait_key_in_for_update_options5120);
                    wait_key382=gPLSQLParser.wait_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wait_key.add(wait_key382.getTree());

                    pushFollow(FOLLOW_expression_in_for_update_options5122);
                    expression383=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression383.getTree());

                    // AST REWRITE
                    // elements: wait_key, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 581:30: -> ^( wait_key ^( EXPR expression ) )
                    {
                        // PLSQL_DMLParser.g:581:33: ^( wait_key ^( EXPR expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_wait_key.nextNode(), root_1);

                        // PLSQL_DMLParser.g:581:44: ^( EXPR expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_update_options"


    public static class update_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_statement"
    // PLSQL_DMLParser.g:586:1: update_statement : update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ;
    public final update_statement_return update_statement() throws RecognitionException {
        update_statement_return retval = new update_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.update_key_return update_key384 =null;

        general_table_ref_return general_table_ref385 =null;

        update_set_clause_return update_set_clause386 =null;

        PLSQLParser_PLSQLCommons.where_clause_return where_clause387 =null;

        static_returning_clause_return static_returning_clause388 =null;

        error_logging_clause_return error_logging_clause389 =null;



        try {
            // PLSQL_DMLParser.g:587:5: ( update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
            // PLSQL_DMLParser.g:587:10: update_key ^ general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_update_key_in_update_statement5156);
            update_key384=gPLSQLParser.update_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(update_key384.getTree(), root_0);

            pushFollow(FOLLOW_general_table_ref_in_update_statement5159);
            general_table_ref385=general_table_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_table_ref385.getTree());

            pushFollow(FOLLOW_update_set_clause_in_update_statement5169);
            update_set_clause386=update_set_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, update_set_clause386.getTree());

            // PLSQL_DMLParser.g:589:9: ( where_clause )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==SQL92_RESERVED_WHERE) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // PLSQL_DMLParser.g:589:9: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_update_statement5179);
                    where_clause387=gPLSQLParser.where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause387.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:589:23: ( static_returning_clause )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==REGULAR_ID) ) {
                int LA132_1 = input.LA(2);

                if ( (((input.LT(1).getText().equalsIgnoreCase("returning"))||(input.LT(1).getText().equalsIgnoreCase("return")))) ) {
                    alt132=1;
                }
            }
            switch (alt132) {
                case 1 :
                    // PLSQL_DMLParser.g:589:23: static_returning_clause
                    {
                    pushFollow(FOLLOW_static_returning_clause_in_update_statement5182);
                    static_returning_clause388=static_returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_returning_clause388.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:589:48: ( error_logging_clause )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))))) {
                int LA133_1 = input.LA(2);

                if ( (LA133_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))))) {
                    int LA133_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("log"))) ) {
                        alt133=1;
                    }
                }
            }
            switch (alt133) {
                case 1 :
                    // PLSQL_DMLParser.g:589:48: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_update_statement5185);
                    error_logging_clause389=error_logging_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, error_logging_clause389.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "update_statement"


    public static class update_set_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "update_set_clause"
    // PLSQL_DMLParser.g:593:1: update_set_clause : set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id RIGHT_PAREN EQUALS_OP expression ) -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ ) -> ^( set_key ^( value_key id ^( EXPR expression ) ) ) ;
    public final update_set_clause_return update_set_clause() throws RecognitionException {
        update_set_clause_return retval = new update_set_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA392=null;
        Token LEFT_PAREN395=null;
        Token RIGHT_PAREN397=null;
        Token EQUALS_OP398=null;
        PLSQLParser_PLSQLKeys.set_key_return set_key390 =null;

        column_based_update_set_clause_return column_based_update_set_clause391 =null;

        column_based_update_set_clause_return column_based_update_set_clause393 =null;

        PLSQLParser_PLSQLKeys.value_key_return value_key394 =null;

        PLSQLParser_PLSQLCommons.id_return id396 =null;

        expression_return expression399 =null;


        Object COMMA392_tree=null;
        Object LEFT_PAREN395_tree=null;
        Object RIGHT_PAREN397_tree=null;
        Object EQUALS_OP398_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_value_key=new RewriteRuleSubtreeStream(adaptor,"rule value_key");
        RewriteRuleSubtreeStream stream_column_based_update_set_clause=new RewriteRuleSubtreeStream(adaptor,"rule column_based_update_set_clause");
        RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
            int mode = 0;    
        try {
            // PLSQL_DMLParser.g:595:5: ( set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id RIGHT_PAREN EQUALS_OP expression ) -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ ) -> ^( set_key ^( value_key id ^( EXPR expression ) ) ) )
            // PLSQL_DMLParser.g:595:10: set_key ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id RIGHT_PAREN EQUALS_OP expression )
            {
            pushFollow(FOLLOW_set_key_in_update_set_clause5215);
            set_key390=gPLSQLParser.set_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_set_key.add(set_key390.getTree());

            // PLSQL_DMLParser.g:596:5: ( column_based_update_set_clause ( COMMA column_based_update_set_clause )* | value_key LEFT_PAREN id RIGHT_PAREN EQUALS_OP expression )
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==DELIMITED_ID||LA135_0==INTRODUCER||LA135_0==LEFT_PAREN) ) {
                alt135=1;
            }
            else if ( (LA135_0==REGULAR_ID) ) {
                int LA135_2 = input.LA(2);

                if ( (LA135_2==EQUALS_OP||LA135_2==PERIOD) ) {
                    alt135=1;
                }
                else if ( (LA135_2==LEFT_PAREN) ) {
                    alt135=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }
            switch (alt135) {
                case 1 :
                    // PLSQL_DMLParser.g:596:10: column_based_update_set_clause ( COMMA column_based_update_set_clause )*
                    {
                    pushFollow(FOLLOW_column_based_update_set_clause_in_update_set_clause5226);
                    column_based_update_set_clause391=column_based_update_set_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_based_update_set_clause.add(column_based_update_set_clause391.getTree());

                    // PLSQL_DMLParser.g:596:41: ( COMMA column_based_update_set_clause )*
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==COMMA) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:596:42: COMMA column_based_update_set_clause
                    	    {
                    	    COMMA392=(Token)match(input,COMMA,FOLLOW_COMMA_in_update_set_clause5229); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA392);


                    	    pushFollow(FOLLOW_column_based_update_set_clause_in_update_set_clause5231);
                    	    column_based_update_set_clause393=column_based_update_set_clause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_based_update_set_clause.add(column_based_update_set_clause393.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:597:10: value_key LEFT_PAREN id RIGHT_PAREN EQUALS_OP expression
                    {
                    pushFollow(FOLLOW_value_key_in_update_set_clause5246);
                    value_key394=gPLSQLParser.value_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_value_key.add(value_key394.getTree());

                    LEFT_PAREN395=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_update_set_clause5248); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN395);


                    pushFollow(FOLLOW_id_in_update_set_clause5250);
                    id396=gPLSQLParser.id();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_id.add(id396.getTree());

                    RIGHT_PAREN397=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_update_set_clause5252); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN397);


                    EQUALS_OP398=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_update_set_clause5254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP398);


                    pushFollow(FOLLOW_expression_in_update_set_clause5256);
                    expression399=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression399.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: id, set_key, column_based_update_set_clause, expression, set_key, value_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 599:9: -> {mode == 1}? ^( set_key ( column_based_update_set_clause )+ )
            if (mode == 1) {
                // PLSQL_DMLParser.g:599:24: ^( set_key ( column_based_update_set_clause )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_set_key.nextNode(), root_1);

                if ( !(stream_column_based_update_set_clause.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_based_update_set_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_based_update_set_clause.nextTree());

                }
                stream_column_based_update_set_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 600:9: -> ^( set_key ^( value_key id ^( EXPR expression ) ) )
            {
                // PLSQL_DMLParser.g:600:12: ^( set_key ^( value_key id ^( EXPR expression ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_set_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:600:22: ^( value_key id ^( EXPR expression ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_value_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_id.nextTree());

                // PLSQL_DMLParser.g:600:37: ^( EXPR expression )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_expression.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "update_set_clause"


    public static class column_based_update_set_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "column_based_update_set_clause"
    // PLSQL_DMLParser.g:603:1: column_based_update_set_clause : ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery ) );
    public final column_based_update_set_clause_return column_based_update_set_clause() throws RecognitionException {
        column_based_update_set_clause_return retval = new column_based_update_set_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUALS_OP401=null;
        Token LEFT_PAREN403=null;
        Token COMMA405=null;
        Token RIGHT_PAREN407=null;
        Token EQUALS_OP408=null;
        PLSQLParser_PLSQLCommons.column_name_return column_name400 =null;

        expression_return expression402 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name404 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name406 =null;

        subquery_return subquery409 =null;


        Object EQUALS_OP401_tree=null;
        Object LEFT_PAREN403_tree=null;
        Object COMMA405_tree=null;
        Object RIGHT_PAREN407_tree=null;
        Object EQUALS_OP408_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            // PLSQL_DMLParser.g:604:5: ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) | LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery ) )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==DELIMITED_ID||LA137_0==INTRODUCER||LA137_0==REGULAR_ID) ) {
                alt137=1;
            }
            else if ( (LA137_0==LEFT_PAREN) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // PLSQL_DMLParser.g:604:10: column_name EQUALS_OP expression
                    {
                    pushFollow(FOLLOW_column_name_in_column_based_update_set_clause5326);
                    column_name400=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name400.getTree());

                    EQUALS_OP401=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_column_based_update_set_clause5328); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP401);


                    pushFollow(FOLLOW_expression_in_column_based_update_set_clause5330);
                    expression402=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression402.getTree());

                    // AST REWRITE
                    // elements: expression, column_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 604:43: -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
                    {
                        // PLSQL_DMLParser.g:604:46: ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ASSIGN, EQUALS_OP401)
                        , root_1);

                        adaptor.addChild(root_1, stream_column_name.nextTree());

                        // PLSQL_DMLParser.g:604:79: ^( EXPR expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:605:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN EQUALS_OP subquery
                    {
                    LEFT_PAREN403=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN403);


                    pushFollow(FOLLOW_column_name_in_column_based_update_set_clause5358);
                    column_name404=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name404.getTree());

                    // PLSQL_DMLParser.g:605:33: ( COMMA column_name )*
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==COMMA) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:605:34: COMMA column_name
                    	    {
                    	    COMMA405=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_based_update_set_clause5361); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA405);


                    	    pushFollow(FOLLOW_column_name_in_column_based_update_set_clause5363);
                    	    column_name406=gPLSQLParser.column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name406.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop136;
                        }
                    } while (true);


                    RIGHT_PAREN407=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5367); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN407);


                    EQUALS_OP408=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_column_based_update_set_clause5369); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP408);


                    pushFollow(FOLLOW_subquery_in_column_based_update_set_clause5371);
                    subquery409=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery409.getTree());

                    // AST REWRITE
                    // elements: column_name, subquery
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 605:85: -> ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery )
                    {
                        // PLSQL_DMLParser.g:605:88: ^( ASSIGN[$EQUALS_OP] ( column_name )+ subquery )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ASSIGN, EQUALS_OP408)
                        , root_1);

                        if ( !(stream_column_name.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_column_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_column_name.nextTree());

                        }
                        stream_column_name.reset();

                        adaptor.addChild(root_1, stream_subquery.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "column_based_update_set_clause"


    public static class delete_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "delete_statement"
    // PLSQL_DMLParser.g:610:1: delete_statement : delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ;
    public final delete_statement_return delete_statement() throws RecognitionException {
        delete_statement_return retval = new delete_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.delete_key_return delete_key410 =null;

        PLSQLParser_PLSQLKeys.from_key_return from_key411 =null;

        general_table_ref_return general_table_ref412 =null;

        PLSQLParser_PLSQLCommons.where_clause_return where_clause413 =null;

        static_returning_clause_return static_returning_clause414 =null;

        error_logging_clause_return error_logging_clause415 =null;



        try {
            // PLSQL_DMLParser.g:611:5: ( delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
            // PLSQL_DMLParser.g:611:10: delete_key ^ ( from_key !)? general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_delete_key_in_delete_statement5405);
            delete_key410=gPLSQLParser.delete_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(delete_key410.getTree(), root_0);

            // PLSQL_DMLParser.g:611:30: ( from_key !)?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==SQL92_RESERVED_FROM) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // PLSQL_DMLParser.g:611:30: from_key !
                    {
                    pushFollow(FOLLOW_from_key_in_delete_statement5408);
                    from_key411=gPLSQLParser.from_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_general_table_ref_in_delete_statement5420);
            general_table_ref412=general_table_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_table_ref412.getTree());

            // PLSQL_DMLParser.g:613:9: ( where_clause )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==SQL92_RESERVED_WHERE) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // PLSQL_DMLParser.g:613:9: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_delete_statement5430);
                    where_clause413=gPLSQLParser.where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause413.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:613:23: ( static_returning_clause )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==REGULAR_ID) ) {
                int LA140_1 = input.LA(2);

                if ( (((input.LT(1).getText().equalsIgnoreCase("returning"))||(input.LT(1).getText().equalsIgnoreCase("return")))) ) {
                    alt140=1;
                }
            }
            switch (alt140) {
                case 1 :
                    // PLSQL_DMLParser.g:613:23: static_returning_clause
                    {
                    pushFollow(FOLLOW_static_returning_clause_in_delete_statement5433);
                    static_returning_clause414=static_returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_returning_clause414.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:613:48: ( error_logging_clause )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))))) {
                int LA141_1 = input.LA(2);

                if ( (LA141_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))))) {
                    int LA141_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("log"))) ) {
                        alt141=1;
                    }
                }
            }
            switch (alt141) {
                case 1 :
                    // PLSQL_DMLParser.g:613:48: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_delete_statement5436);
                    error_logging_clause415=error_logging_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, error_logging_clause415.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "delete_statement"


    public static class insert_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insert_statement"
    // PLSQL_DMLParser.g:616:1: insert_statement : insert_key ^ ( single_table_insert | multi_table_insert ) ;
    public final insert_statement_return insert_statement() throws RecognitionException {
        insert_statement_return retval = new insert_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.insert_key_return insert_key416 =null;

        single_table_insert_return single_table_insert417 =null;

        multi_table_insert_return multi_table_insert418 =null;



        try {
            // PLSQL_DMLParser.g:617:5: ( insert_key ^ ( single_table_insert | multi_table_insert ) )
            // PLSQL_DMLParser.g:617:10: insert_key ^ ( single_table_insert | multi_table_insert )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_insert_key_in_insert_statement5457);
            insert_key416=gPLSQLParser.insert_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(insert_key416.getTree(), root_0);

            // PLSQL_DMLParser.g:618:5: ( single_table_insert | multi_table_insert )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==SQL92_RESERVED_INTO) ) {
                alt142=1;
            }
            else if ( (LA142_0==SQL92_RESERVED_ALL) ) {
                alt142=2;
            }
            else if ( (LA142_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("first")))) {
                alt142=2;
            }
            else if ( (LA142_0==SQL92_RESERVED_WHEN) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }
            switch (alt142) {
                case 1 :
                    // PLSQL_DMLParser.g:618:10: single_table_insert
                    {
                    pushFollow(FOLLOW_single_table_insert_in_insert_statement5469);
                    single_table_insert417=single_table_insert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_table_insert417.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:619:10: multi_table_insert
                    {
                    pushFollow(FOLLOW_multi_table_insert_in_insert_statement5480);
                    multi_table_insert418=multi_table_insert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_table_insert418.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "insert_statement"


    public static class single_table_insert_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_table_insert"
    // PLSQL_DMLParser.g:625:1: single_table_insert : insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? ) ;
    public final single_table_insert_return single_table_insert() throws RecognitionException {
        single_table_insert_return retval = new single_table_insert_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        insert_into_clause_return insert_into_clause419 =null;

        values_clause_return values_clause420 =null;

        static_returning_clause_return static_returning_clause421 =null;

        select_statement_return select_statement422 =null;

        error_logging_clause_return error_logging_clause423 =null;


        RewriteRuleSubtreeStream stream_static_returning_clause=new RewriteRuleSubtreeStream(adaptor,"rule static_returning_clause");
        RewriteRuleSubtreeStream stream_values_clause=new RewriteRuleSubtreeStream(adaptor,"rule values_clause");
        RewriteRuleSubtreeStream stream_insert_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule insert_into_clause");
        RewriteRuleSubtreeStream stream_error_logging_clause=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_clause");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        try {
            // PLSQL_DMLParser.g:626:5: ( insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? ) )
            // PLSQL_DMLParser.g:626:10: insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )?
            {
            pushFollow(FOLLOW_insert_into_clause_in_single_table_insert5508);
            insert_into_clause419=insert_into_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insert_into_clause.add(insert_into_clause419.getTree());

            // PLSQL_DMLParser.g:627:5: ( values_clause ( static_returning_clause )? | select_statement )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==SQL92_RESERVED_VALUES) ) {
                alt144=1;
            }
            else if ( (LA144_0==LEFT_PAREN||LA144_0==SQL92_RESERVED_SELECT||LA144_0==SQL92_RESERVED_WITH) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // PLSQL_DMLParser.g:627:10: values_clause ( static_returning_clause )?
                    {
                    pushFollow(FOLLOW_values_clause_in_single_table_insert5519);
                    values_clause420=values_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_values_clause.add(values_clause420.getTree());

                    // PLSQL_DMLParser.g:627:24: ( static_returning_clause )?
                    int alt143=2;
                    int LA143_0 = input.LA(1);

                    if ( (LA143_0==REGULAR_ID) ) {
                        int LA143_1 = input.LA(2);

                        if ( (((input.LT(1).getText().equalsIgnoreCase("returning"))||(input.LT(1).getText().equalsIgnoreCase("return")))) ) {
                            alt143=1;
                        }
                    }
                    switch (alt143) {
                        case 1 :
                            // PLSQL_DMLParser.g:627:24: static_returning_clause
                            {
                            pushFollow(FOLLOW_static_returning_clause_in_single_table_insert5521);
                            static_returning_clause421=static_returning_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_static_returning_clause.add(static_returning_clause421.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:628:10: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_single_table_insert5533);
                    select_statement422=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_statement.add(select_statement422.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:630:9: ( error_logging_clause )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))))) {
                int LA145_1 = input.LA(2);

                if ( (LA145_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))))) {
                    int LA145_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("log"))) ) {
                        alt145=1;
                    }
                }
            }
            switch (alt145) {
                case 1 :
                    // PLSQL_DMLParser.g:630:9: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_single_table_insert5549);
                    error_logging_clause423=error_logging_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_clause.add(error_logging_clause423.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: values_clause, insert_into_clause, error_logging_clause, static_returning_clause, select_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 631:9: -> ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? )
            {
                // PLSQL_DMLParser.g:631:12: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause )? ( static_returning_clause )? ( select_statement )? ( error_logging_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_TABLE_MODE, "SINGLE_TABLE_MODE")
                , root_1);

                adaptor.addChild(root_1, stream_insert_into_clause.nextTree());

                // PLSQL_DMLParser.g:631:51: ( values_clause )?
                if ( stream_values_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_values_clause.nextTree());

                }
                stream_values_clause.reset();

                // PLSQL_DMLParser.g:631:66: ( static_returning_clause )?
                if ( stream_static_returning_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_static_returning_clause.nextTree());

                }
                stream_static_returning_clause.reset();

                // PLSQL_DMLParser.g:631:91: ( select_statement )?
                if ( stream_select_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_select_statement.nextTree());

                }
                stream_select_statement.reset();

                // PLSQL_DMLParser.g:631:109: ( error_logging_clause )?
                if ( stream_error_logging_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_clause.nextTree());

                }
                stream_error_logging_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_table_insert"


    public static class multi_table_insert_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_table_insert"
    // PLSQL_DMLParser.g:634:1: multi_table_insert : ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement -> ^( MULTI_TABLE_MODE select_statement ( multi_table_element )* ( conditional_insert_clause )? ) ;
    public final multi_table_insert_return multi_table_insert() throws RecognitionException {
        multi_table_insert_return retval = new multi_table_insert_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.all_key_return all_key424 =null;

        multi_table_element_return multi_table_element425 =null;

        conditional_insert_clause_return conditional_insert_clause426 =null;

        select_statement_return select_statement427 =null;


        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_multi_table_element=new RewriteRuleSubtreeStream(adaptor,"rule multi_table_element");
        RewriteRuleSubtreeStream stream_conditional_insert_clause=new RewriteRuleSubtreeStream(adaptor,"rule conditional_insert_clause");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        try {
            // PLSQL_DMLParser.g:635:5: ( ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement -> ^( MULTI_TABLE_MODE select_statement ( multi_table_element )* ( conditional_insert_clause )? ) )
            // PLSQL_DMLParser.g:636:5: ( all_key ( multi_table_element )+ | conditional_insert_clause ) select_statement
            {
            // PLSQL_DMLParser.g:636:5: ( all_key ( multi_table_element )+ | conditional_insert_clause )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==SQL92_RESERVED_ALL) ) {
                int LA147_1 = input.LA(2);

                if ( (LA147_1==SQL92_RESERVED_INTO) ) {
                    alt147=1;
                }
                else if ( (LA147_1==SQL92_RESERVED_WHEN) ) {
                    alt147=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA147_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("first")))) {
                alt147=2;
            }
            else if ( (LA147_0==SQL92_RESERVED_WHEN) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;

            }
            switch (alt147) {
                case 1 :
                    // PLSQL_DMLParser.g:636:10: all_key ( multi_table_element )+
                    {
                    pushFollow(FOLLOW_all_key_in_multi_table_insert5608);
                    all_key424=gPLSQLParser.all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_all_key.add(all_key424.getTree());

                    // PLSQL_DMLParser.g:636:18: ( multi_table_element )+
                    int cnt146=0;
                    loop146:
                    do {
                        int alt146=2;
                        int LA146_0 = input.LA(1);

                        if ( (LA146_0==SQL92_RESERVED_INTO) ) {
                            alt146=1;
                        }


                        switch (alt146) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:636:18: multi_table_element
                    	    {
                    	    pushFollow(FOLLOW_multi_table_element_in_multi_table_insert5610);
                    	    multi_table_element425=multi_table_element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_multi_table_element.add(multi_table_element425.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt146 >= 1 ) break loop146;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(146, input);
                                throw eee;
                        }
                        cnt146++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:637:10: conditional_insert_clause
                    {
                    pushFollow(FOLLOW_conditional_insert_clause_in_multi_table_insert5622);
                    conditional_insert_clause426=conditional_insert_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditional_insert_clause.add(conditional_insert_clause426.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_select_statement_in_multi_table_insert5638);
            select_statement427=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_select_statement.add(select_statement427.getTree());

            // AST REWRITE
            // elements: conditional_insert_clause, multi_table_element, select_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 640:9: -> ^( MULTI_TABLE_MODE select_statement ( multi_table_element )* ( conditional_insert_clause )? )
            {
                // PLSQL_DMLParser.g:640:12: ^( MULTI_TABLE_MODE select_statement ( multi_table_element )* ( conditional_insert_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_TABLE_MODE, "MULTI_TABLE_MODE")
                , root_1);

                adaptor.addChild(root_1, stream_select_statement.nextTree());

                // PLSQL_DMLParser.g:640:48: ( multi_table_element )*
                while ( stream_multi_table_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_multi_table_element.nextTree());

                }
                stream_multi_table_element.reset();

                // PLSQL_DMLParser.g:640:69: ( conditional_insert_clause )?
                if ( stream_conditional_insert_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_conditional_insert_clause.nextTree());

                }
                stream_conditional_insert_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_table_insert"


    public static class multi_table_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_table_element"
    // PLSQL_DMLParser.g:643:1: multi_table_element : insert_into_clause ( values_clause )? ( error_logging_clause )? -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) ;
    public final multi_table_element_return multi_table_element() throws RecognitionException {
        multi_table_element_return retval = new multi_table_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        insert_into_clause_return insert_into_clause428 =null;

        values_clause_return values_clause429 =null;

        error_logging_clause_return error_logging_clause430 =null;


        RewriteRuleSubtreeStream stream_values_clause=new RewriteRuleSubtreeStream(adaptor,"rule values_clause");
        RewriteRuleSubtreeStream stream_insert_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule insert_into_clause");
        RewriteRuleSubtreeStream stream_error_logging_clause=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_clause");
        try {
            // PLSQL_DMLParser.g:644:5: ( insert_into_clause ( values_clause )? ( error_logging_clause )? -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) )
            // PLSQL_DMLParser.g:644:10: insert_into_clause ( values_clause )? ( error_logging_clause )?
            {
            pushFollow(FOLLOW_insert_into_clause_in_multi_table_element5680);
            insert_into_clause428=insert_into_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insert_into_clause.add(insert_into_clause428.getTree());

            // PLSQL_DMLParser.g:644:29: ( values_clause )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==SQL92_RESERVED_VALUES) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // PLSQL_DMLParser.g:644:29: values_clause
                    {
                    pushFollow(FOLLOW_values_clause_in_multi_table_element5682);
                    values_clause429=values_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_values_clause.add(values_clause429.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:644:44: ( error_logging_clause )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("log")))) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // PLSQL_DMLParser.g:644:44: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_multi_table_element5685);
                    error_logging_clause430=error_logging_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_clause.add(error_logging_clause430.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: insert_into_clause, error_logging_clause, values_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:9: -> ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
            {
                // PLSQL_DMLParser.g:645:12: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TABLE_ELEMENT, "TABLE_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_insert_into_clause.nextTree());

                // PLSQL_DMLParser.g:645:47: ( values_clause )?
                if ( stream_values_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_values_clause.nextTree());

                }
                stream_values_clause.reset();

                // PLSQL_DMLParser.g:645:62: ( error_logging_clause )?
                if ( stream_error_logging_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_clause.nextTree());

                }
                stream_error_logging_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_table_element"


    public static class conditional_insert_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditional_insert_clause"
    // PLSQL_DMLParser.g:648:1: conditional_insert_clause : ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) ;
    public final conditional_insert_clause_return conditional_insert_clause() throws RecognitionException {
        conditional_insert_clause_return retval = new conditional_insert_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.all_key_return all_key431 =null;

        PLSQLParser_PLSQLKeys.first_key_return first_key432 =null;

        conditional_insert_when_part_return conditional_insert_when_part433 =null;

        conditional_insert_else_part_return conditional_insert_else_part434 =null;


        RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
        RewriteRuleSubtreeStream stream_conditional_insert_when_part=new RewriteRuleSubtreeStream(adaptor,"rule conditional_insert_when_part");
        RewriteRuleSubtreeStream stream_conditional_insert_else_part=new RewriteRuleSubtreeStream(adaptor,"rule conditional_insert_else_part");
        RewriteRuleSubtreeStream stream_first_key=new RewriteRuleSubtreeStream(adaptor,"rule first_key");
        try {
            // PLSQL_DMLParser.g:649:5: ( ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) )
            // PLSQL_DMLParser.g:649:10: ( all_key | first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )?
            {
            // PLSQL_DMLParser.g:649:10: ( all_key | first_key )?
            int alt150=3;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==SQL92_RESERVED_ALL) ) {
                alt150=1;
            }
            else if ( (LA150_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("first")))) {
                alt150=2;
            }
            switch (alt150) {
                case 1 :
                    // PLSQL_DMLParser.g:649:11: all_key
                    {
                    pushFollow(FOLLOW_all_key_in_conditional_insert_clause5729);
                    all_key431=gPLSQLParser.all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_all_key.add(all_key431.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:649:19: first_key
                    {
                    pushFollow(FOLLOW_first_key_in_conditional_insert_clause5731);
                    first_key432=gPLSQLParser.first_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_first_key.add(first_key432.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:650:9: ( conditional_insert_when_part )+
            int cnt151=0;
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==SQL92_RESERVED_WHEN) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // PLSQL_DMLParser.g:650:9: conditional_insert_when_part
            	    {
            	    pushFollow(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause5743);
            	    conditional_insert_when_part433=conditional_insert_when_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_conditional_insert_when_part.add(conditional_insert_when_part433.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt151 >= 1 ) break loop151;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(151, input);
                        throw eee;
                }
                cnt151++;
            } while (true);


            // PLSQL_DMLParser.g:650:39: ( conditional_insert_else_part )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==SQL92_RESERVED_ELSE) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // PLSQL_DMLParser.g:650:39: conditional_insert_else_part
                    {
                    pushFollow(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause5746);
                    conditional_insert_else_part434=conditional_insert_else_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditional_insert_else_part.add(conditional_insert_else_part434.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: all_key, conditional_insert_when_part, first_key, conditional_insert_else_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:9: -> ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
            {
                // PLSQL_DMLParser.g:651:12: ^( CONDITIONAL_INSERT ( all_key )? ( first_key )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONDITIONAL_INSERT, "CONDITIONAL_INSERT")
                , root_1);

                // PLSQL_DMLParser.g:651:33: ( all_key )?
                if ( stream_all_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_all_key.nextTree());

                }
                stream_all_key.reset();

                // PLSQL_DMLParser.g:651:42: ( first_key )?
                if ( stream_first_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_first_key.nextTree());

                }
                stream_first_key.reset();

                if ( !(stream_conditional_insert_when_part.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_conditional_insert_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_conditional_insert_when_part.nextTree());

                }
                stream_conditional_insert_when_part.reset();

                // PLSQL_DMLParser.g:651:83: ( conditional_insert_else_part )?
                if ( stream_conditional_insert_else_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_conditional_insert_else_part.nextTree());

                }
                stream_conditional_insert_else_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_insert_clause"


    public static class conditional_insert_when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditional_insert_when_part"
    // PLSQL_DMLParser.g:654:1: conditional_insert_when_part : when_key condition then_key ( multi_table_element )+ -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ ) ;
    public final conditional_insert_when_part_return conditional_insert_when_part() throws RecognitionException {
        conditional_insert_when_part_return retval = new conditional_insert_when_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.when_key_return when_key435 =null;

        condition_return condition436 =null;

        PLSQLParser_PLSQLKeys.then_key_return then_key437 =null;

        multi_table_element_return multi_table_element438 =null;


        RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_multi_table_element=new RewriteRuleSubtreeStream(adaptor,"rule multi_table_element");
        RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
        try {
            // PLSQL_DMLParser.g:655:5: ( when_key condition then_key ( multi_table_element )+ -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ ) )
            // PLSQL_DMLParser.g:655:10: when_key condition then_key ( multi_table_element )+
            {
            pushFollow(FOLLOW_when_key_in_conditional_insert_when_part5794);
            when_key435=gPLSQLParser.when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_when_key.add(when_key435.getTree());

            pushFollow(FOLLOW_condition_in_conditional_insert_when_part5796);
            condition436=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition436.getTree());

            pushFollow(FOLLOW_then_key_in_conditional_insert_when_part5798);
            then_key437=gPLSQLParser.then_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_then_key.add(then_key437.getTree());

            // PLSQL_DMLParser.g:655:38: ( multi_table_element )+
            int cnt153=0;
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==SQL92_RESERVED_INTO) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // PLSQL_DMLParser.g:655:38: multi_table_element
            	    {
            	    pushFollow(FOLLOW_multi_table_element_in_conditional_insert_when_part5800);
            	    multi_table_element438=multi_table_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_multi_table_element.add(multi_table_element438.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);


            // AST REWRITE
            // elements: multi_table_element, when_key, condition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 656:9: -> ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ )
            {
                // PLSQL_DMLParser.g:656:12: ^( when_key ^( LOGIC_EXPR condition ) ( multi_table_element )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_when_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:656:23: ^( LOGIC_EXPR condition )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_condition.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                if ( !(stream_multi_table_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_multi_table_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_multi_table_element.nextTree());

                }
                stream_multi_table_element.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_insert_when_part"


    public static class conditional_insert_else_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditional_insert_else_part"
    // PLSQL_DMLParser.g:659:1: conditional_insert_else_part : else_key ^ ( multi_table_element )+ ;
    public final conditional_insert_else_part_return conditional_insert_else_part() throws RecognitionException {
        conditional_insert_else_part_return retval = new conditional_insert_else_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.else_key_return else_key439 =null;

        multi_table_element_return multi_table_element440 =null;



        try {
            // PLSQL_DMLParser.g:660:5: ( else_key ^ ( multi_table_element )+ )
            // PLSQL_DMLParser.g:660:10: else_key ^ ( multi_table_element )+
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_else_key_in_conditional_insert_else_part5844);
            else_key439=gPLSQLParser.else_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(else_key439.getTree(), root_0);

            // PLSQL_DMLParser.g:660:20: ( multi_table_element )+
            int cnt154=0;
            loop154:
            do {
                int alt154=2;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==SQL92_RESERVED_INTO) ) {
                    alt154=1;
                }


                switch (alt154) {
            	case 1 :
            	    // PLSQL_DMLParser.g:660:20: multi_table_element
            	    {
            	    pushFollow(FOLLOW_multi_table_element_in_conditional_insert_else_part5847);
            	    multi_table_element440=multi_table_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_table_element440.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt154 >= 1 ) break loop154;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(154, input);
                        throw eee;
                }
                cnt154++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "conditional_insert_else_part"


    public static class insert_into_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "insert_into_clause"
    // PLSQL_DMLParser.g:663:1: insert_into_clause : into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) ) ;
    public final insert_into_clause_return insert_into_clause() throws RecognitionException {
        insert_into_clause_return retval = new insert_into_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN443=null;
        Token COMMA445=null;
        Token RIGHT_PAREN447=null;
        PLSQLParser_PLSQLKeys.into_key_return into_key441 =null;

        general_table_ref_return general_table_ref442 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name444 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name446 =null;


        Object LEFT_PAREN443_tree=null;
        Object COMMA445_tree=null;
        Object RIGHT_PAREN447_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_general_table_ref=new RewriteRuleSubtreeStream(adaptor,"rule general_table_ref");
        RewriteRuleSubtreeStream stream_into_key=new RewriteRuleSubtreeStream(adaptor,"rule into_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            // PLSQL_DMLParser.g:664:5: ( into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) ) )
            // PLSQL_DMLParser.g:664:10: into_key general_table_ref ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            {
            pushFollow(FOLLOW_into_key_in_insert_into_clause5868);
            into_key441=gPLSQLParser.into_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_into_key.add(into_key441.getTree());

            pushFollow(FOLLOW_general_table_ref_in_insert_into_clause5870);
            general_table_ref442=general_table_ref();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_general_table_ref.add(general_table_ref442.getTree());

            // PLSQL_DMLParser.g:665:9: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==LEFT_PAREN) ) {
                int LA156_1 = input.LA(2);

                if ( (LA156_1==DELIMITED_ID||LA156_1==INTRODUCER||LA156_1==REGULAR_ID) ) {
                    alt156=1;
                }
            }
            switch (alt156) {
                case 1 :
                    // PLSQL_DMLParser.g:665:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN443=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_insert_into_clause5882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN443);


                    pushFollow(FOLLOW_column_name_in_insert_into_clause5884);
                    column_name444=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name444.getTree());

                    // PLSQL_DMLParser.g:665:33: ( COMMA column_name )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==COMMA) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:665:34: COMMA column_name
                    	    {
                    	    COMMA445=(Token)match(input,COMMA,FOLLOW_COMMA_in_insert_into_clause5887); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA445);


                    	    pushFollow(FOLLOW_column_name_in_insert_into_clause5889);
                    	    column_name446=gPLSQLParser.column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name446.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);


                    RIGHT_PAREN447=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_insert_into_clause5893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN447);


                    }
                    break;

            }


            // AST REWRITE
            // elements: column_name, into_key, general_table_ref
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 666:9: -> ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) )
            {
                // PLSQL_DMLParser.g:666:12: ^( into_key general_table_ref ^( COLUMNS ( column_name )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_into_key.nextNode(), root_1);

                adaptor.addChild(root_1, stream_general_table_ref.nextTree());

                // PLSQL_DMLParser.g:666:41: ^( COLUMNS ( column_name )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(COLUMNS, "COLUMNS")
                , root_2);

                // PLSQL_DMLParser.g:666:51: ( column_name )*
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_2, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "insert_into_clause"


    public static class values_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "values_clause"
    // PLSQL_DMLParser.g:669:1: values_clause : values_key ^ expression_list ;
    public final values_clause_return values_clause() throws RecognitionException {
        values_clause_return retval = new values_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.values_key_return values_key448 =null;

        expression_list_return expression_list449 =null;



        try {
            // PLSQL_DMLParser.g:670:5: ( values_key ^ expression_list )
            // PLSQL_DMLParser.g:670:10: values_key ^ expression_list
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_values_key_in_values_clause5938);
            values_key448=gPLSQLParser.values_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(values_key448.getTree(), root_0);

            pushFollow(FOLLOW_expression_list_in_values_clause5941);
            expression_list449=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list449.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "values_clause"


    public static class merge_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "merge_statement"
    // PLSQL_DMLParser.g:674:1: merge_statement : merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )? | ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )? )? ( error_logging_clause )? -> ^( merge_key ( table_alias )? tableview_name ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) ;
    public final merge_statement_return merge_statement() throws RecognitionException {
        merge_statement_return retval = new merge_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN457=null;
        Token RIGHT_PAREN459=null;
        PLSQLParser_PLSQLKeys.merge_key_return merge_key450 =null;

        PLSQLParser_PLSQLKeys.into_key_return into_key451 =null;

        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name452 =null;

        PLSQLParser_PLSQLCommons.table_alias_return table_alias453 =null;

        PLSQLParser_PLSQLKeys.using_key_return using_key454 =null;

        selected_tableview_return selected_tableview455 =null;

        PLSQLParser_PLSQLKeys.on_key_return on_key456 =null;

        condition_return condition458 =null;

        merge_update_clause_return merge_update_clause460 =null;

        merge_insert_clause_return merge_insert_clause461 =null;

        merge_insert_clause_return merge_insert_clause462 =null;

        merge_update_clause_return merge_update_clause463 =null;

        error_logging_clause_return error_logging_clause464 =null;


        Object LEFT_PAREN457_tree=null;
        Object RIGHT_PAREN459_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_using_key=new RewriteRuleSubtreeStream(adaptor,"rule using_key");
        RewriteRuleSubtreeStream stream_merge_insert_clause=new RewriteRuleSubtreeStream(adaptor,"rule merge_insert_clause");
        RewriteRuleSubtreeStream stream_into_key=new RewriteRuleSubtreeStream(adaptor,"rule into_key");
        RewriteRuleSubtreeStream stream_merge_key=new RewriteRuleSubtreeStream(adaptor,"rule merge_key");
        RewriteRuleSubtreeStream stream_merge_update_clause=new RewriteRuleSubtreeStream(adaptor,"rule merge_update_clause");
        RewriteRuleSubtreeStream stream_error_logging_clause=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_clause");
        RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
        RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
        RewriteRuleSubtreeStream stream_selected_tableview=new RewriteRuleSubtreeStream(adaptor,"rule selected_tableview");
        RewriteRuleSubtreeStream stream_on_key=new RewriteRuleSubtreeStream(adaptor,"rule on_key");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            // PLSQL_DMLParser.g:675:5: ( merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )? | ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )? )? ( error_logging_clause )? -> ^( merge_key ( table_alias )? tableview_name ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) )
            // PLSQL_DMLParser.g:675:10: merge_key into_key tableview_name ( table_alias )? using_key selected_tableview on_key LEFT_PAREN condition RIGHT_PAREN ( ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )? | ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )? )? ( error_logging_clause )?
            {
            pushFollow(FOLLOW_merge_key_in_merge_statement5962);
            merge_key450=gPLSQLParser.merge_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_merge_key.add(merge_key450.getTree());

            pushFollow(FOLLOW_into_key_in_merge_statement5964);
            into_key451=gPLSQLParser.into_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_into_key.add(into_key451.getTree());

            pushFollow(FOLLOW_tableview_name_in_merge_statement5966);
            tableview_name452=gPLSQLParser.tableview_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name452.getTree());

            // PLSQL_DMLParser.g:675:44: ( table_alias )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( ((LA157_0 >= CHAR_STRING && LA157_0 <= CHAR_STRING_PERL)||LA157_0==DELIMITED_ID||LA157_0==INTRODUCER||LA157_0==NATIONAL_CHAR_STRING_LIT||LA157_0==REGULAR_ID) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // PLSQL_DMLParser.g:675:44: table_alias
                    {
                    pushFollow(FOLLOW_table_alias_in_merge_statement5968);
                    table_alias453=gPLSQLParser.table_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_alias.add(table_alias453.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_using_key_in_merge_statement5979);
            using_key454=gPLSQLParser.using_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_using_key.add(using_key454.getTree());

            pushFollow(FOLLOW_selected_tableview_in_merge_statement5981);
            selected_tableview455=selected_tableview();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selected_tableview.add(selected_tableview455.getTree());

            pushFollow(FOLLOW_on_key_in_merge_statement5983);
            on_key456=gPLSQLParser.on_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_on_key.add(on_key456.getTree());

            LEFT_PAREN457=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_merge_statement5985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN457);


            pushFollow(FOLLOW_condition_in_merge_statement5987);
            condition458=condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_condition.add(condition458.getTree());

            RIGHT_PAREN459=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_merge_statement5989); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN459);


            // PLSQL_DMLParser.g:677:9: ( ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )? | ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )? )?
            int alt160=3;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==SQL92_RESERVED_WHEN) ) {
                int LA160_1 = input.LA(2);

                if ( (LA160_1==REGULAR_ID) && (synpred20_PLSQL_DMLParser())) {
                    alt160=1;
                }
                else if ( (LA160_1==SQL92_RESERVED_NOT) && (synpred21_PLSQL_DMLParser())) {
                    alt160=2;
                }
            }
            switch (alt160) {
                case 1 :
                    // PLSQL_DMLParser.g:678:13: ( when_key matched_key )=> merge_update_clause ( merge_insert_clause )?
                    {
                    pushFollow(FOLLOW_merge_update_clause_in_merge_statement6021);
                    merge_update_clause460=merge_update_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_merge_update_clause.add(merge_update_clause460.getTree());

                    // PLSQL_DMLParser.g:678:59: ( merge_insert_clause )?
                    int alt158=2;
                    int LA158_0 = input.LA(1);

                    if ( (LA158_0==SQL92_RESERVED_WHEN) ) {
                        alt158=1;
                    }
                    switch (alt158) {
                        case 1 :
                            // PLSQL_DMLParser.g:678:59: merge_insert_clause
                            {
                            pushFollow(FOLLOW_merge_insert_clause_in_merge_statement6023);
                            merge_insert_clause461=merge_insert_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_merge_insert_clause.add(merge_insert_clause461.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:680:13: ( when_key not_key matched_key )=> merge_insert_clause ( merge_update_clause )?
                    {
                    pushFollow(FOLLOW_merge_insert_clause_in_merge_statement6058);
                    merge_insert_clause462=merge_insert_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_merge_insert_clause.add(merge_insert_clause462.getTree());

                    // PLSQL_DMLParser.g:680:67: ( merge_update_clause )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==SQL92_RESERVED_WHEN) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // PLSQL_DMLParser.g:680:67: merge_update_clause
                            {
                            pushFollow(FOLLOW_merge_update_clause_in_merge_statement6060);
                            merge_update_clause463=merge_update_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_merge_update_clause.add(merge_update_clause463.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // PLSQL_DMLParser.g:682:9: ( error_logging_clause )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))))) {
                int LA161_1 = input.LA(2);

                if ( (LA161_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("log"))))) {
                    int LA161_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("log"))) ) {
                        alt161=1;
                    }
                }
            }
            switch (alt161) {
                case 1 :
                    // PLSQL_DMLParser.g:682:9: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_merge_statement6082);
                    error_logging_clause464=error_logging_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_clause.add(error_logging_clause464.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: condition, table_alias, selected_tableview, merge_update_clause, using_key, merge_key, tableview_name, merge_insert_clause, error_logging_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 683:9: -> ^( merge_key ( table_alias )? tableview_name ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
            {
                // PLSQL_DMLParser.g:683:12: ^( merge_key ( table_alias )? tableview_name ^( using_key selected_tableview ^( LOGIC_EXPR condition ) ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_merge_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:683:24: ( table_alias )?
                if ( stream_table_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_alias.nextTree());

                }
                stream_table_alias.reset();

                adaptor.addChild(root_1, stream_tableview_name.nextTree());

                // PLSQL_DMLParser.g:683:52: ^( using_key selected_tableview ^( LOGIC_EXPR condition ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_using_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_selected_tableview.nextTree());

                // PLSQL_DMLParser.g:683:83: ^( LOGIC_EXPR condition )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_condition.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:684:18: ( merge_update_clause )?
                if ( stream_merge_update_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_merge_update_clause.nextTree());

                }
                stream_merge_update_clause.reset();

                // PLSQL_DMLParser.g:684:39: ( merge_insert_clause )?
                if ( stream_merge_insert_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_merge_insert_clause.nextTree());

                }
                stream_merge_insert_clause.reset();

                // PLSQL_DMLParser.g:684:60: ( error_logging_clause )?
                if ( stream_error_logging_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_clause.nextTree());

                }
                stream_error_logging_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "merge_statement"


    public static class merge_update_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "merge_update_clause"
    // PLSQL_DMLParser.g:689:1: merge_update_clause : when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )? -> ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) ;
    public final merge_update_clause_return merge_update_clause() throws RecognitionException {
        merge_update_clause_return retval = new merge_update_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA471=null;
        PLSQLParser_PLSQLKeys.when_key_return when_key465 =null;

        PLSQLParser_PLSQLKeys.matched_key_return matched_key466 =null;

        PLSQLParser_PLSQLKeys.then_key_return then_key467 =null;

        PLSQLParser_PLSQLKeys.update_key_return update_key468 =null;

        PLSQLParser_PLSQLKeys.set_key_return set_key469 =null;

        merge_element_return merge_element470 =null;

        merge_element_return merge_element472 =null;

        PLSQLParser_PLSQLCommons.where_clause_return where_clause473 =null;

        merge_update_delete_part_return merge_update_delete_part474 =null;


        Object COMMA471_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
        RewriteRuleSubtreeStream stream_merge_update_delete_part=new RewriteRuleSubtreeStream(adaptor,"rule merge_update_delete_part");
        RewriteRuleSubtreeStream stream_merge_element=new RewriteRuleSubtreeStream(adaptor,"rule merge_element");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
        RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
        RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
        RewriteRuleSubtreeStream stream_matched_key=new RewriteRuleSubtreeStream(adaptor,"rule matched_key");
        try {
            // PLSQL_DMLParser.g:690:5: ( when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )? -> ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) )
            // PLSQL_DMLParser.g:690:10: when_key matched_key then_key update_key set_key merge_element ( COMMA merge_element )* ( where_clause )? ( merge_update_delete_part )?
            {
            pushFollow(FOLLOW_when_key_in_merge_update_clause6162);
            when_key465=gPLSQLParser.when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_when_key.add(when_key465.getTree());

            pushFollow(FOLLOW_matched_key_in_merge_update_clause6164);
            matched_key466=gPLSQLParser.matched_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matched_key.add(matched_key466.getTree());

            pushFollow(FOLLOW_then_key_in_merge_update_clause6166);
            then_key467=gPLSQLParser.then_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_then_key.add(then_key467.getTree());

            pushFollow(FOLLOW_update_key_in_merge_update_clause6168);
            update_key468=gPLSQLParser.update_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_update_key.add(update_key468.getTree());

            pushFollow(FOLLOW_set_key_in_merge_update_clause6170);
            set_key469=gPLSQLParser.set_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_set_key.add(set_key469.getTree());

            pushFollow(FOLLOW_merge_element_in_merge_update_clause6181);
            merge_element470=merge_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_merge_element.add(merge_element470.getTree());

            // PLSQL_DMLParser.g:691:23: ( COMMA merge_element )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==COMMA) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // PLSQL_DMLParser.g:691:24: COMMA merge_element
            	    {
            	    COMMA471=(Token)match(input,COMMA,FOLLOW_COMMA_in_merge_update_clause6184); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA471);


            	    pushFollow(FOLLOW_merge_element_in_merge_update_clause6186);
            	    merge_element472=merge_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_merge_element.add(merge_element472.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);


            // PLSQL_DMLParser.g:692:9: ( where_clause )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==SQL92_RESERVED_WHERE) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // PLSQL_DMLParser.g:692:9: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_merge_update_clause6198);
                    where_clause473=gPLSQLParser.where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause473.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:692:23: ( merge_update_delete_part )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==SQL92_RESERVED_DELETE) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // PLSQL_DMLParser.g:692:23: merge_update_delete_part
                    {
                    pushFollow(FOLLOW_merge_update_delete_part_in_merge_update_clause6201);
                    merge_update_delete_part474=merge_update_delete_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_merge_update_delete_part.add(merge_update_delete_part474.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: merge_update_delete_part, where_clause, merge_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 693:9: -> ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
            {
                // PLSQL_DMLParser.g:693:11: ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MERGE_UPDATE, "MERGE_UPDATE")
                , root_1);

                if ( !(stream_merge_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_merge_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_merge_element.nextTree());

                }
                stream_merge_element.reset();

                // PLSQL_DMLParser.g:693:41: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();

                // PLSQL_DMLParser.g:693:55: ( merge_update_delete_part )?
                if ( stream_merge_update_delete_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_merge_update_delete_part.nextTree());

                }
                stream_merge_update_delete_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "merge_update_clause"


    public static class merge_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "merge_element"
    // PLSQL_DMLParser.g:696:1: merge_element : column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) ;
    public final merge_element_return merge_element() throws RecognitionException {
        merge_element_return retval = new merge_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUALS_OP476=null;
        PLSQLParser_PLSQLCommons.column_name_return column_name475 =null;

        expression_return expression477 =null;


        Object EQUALS_OP476_tree=null;
        RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        try {
            // PLSQL_DMLParser.g:697:5: ( column_name EQUALS_OP expression -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) ) )
            // PLSQL_DMLParser.g:697:10: column_name EQUALS_OP expression
            {
            pushFollow(FOLLOW_column_name_in_merge_element6244);
            column_name475=gPLSQLParser.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_column_name.add(column_name475.getTree());

            EQUALS_OP476=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_merge_element6246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP476);


            pushFollow(FOLLOW_expression_in_merge_element6248);
            expression477=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression477.getTree());

            // AST REWRITE
            // elements: column_name, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 698:9: -> ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
            {
                // PLSQL_DMLParser.g:698:12: ^( ASSIGN[$EQUALS_OP] column_name ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, EQUALS_OP476)
                , root_1);

                adaptor.addChild(root_1, stream_column_name.nextTree());

                // PLSQL_DMLParser.g:698:45: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "merge_element"


    public static class merge_update_delete_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "merge_update_delete_part"
    // PLSQL_DMLParser.g:701:1: merge_update_delete_part : delete_key ^ where_clause ;
    public final merge_update_delete_part_return merge_update_delete_part() throws RecognitionException {
        merge_update_delete_part_return retval = new merge_update_delete_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.delete_key_return delete_key478 =null;

        PLSQLParser_PLSQLCommons.where_clause_return where_clause479 =null;



        try {
            // PLSQL_DMLParser.g:702:5: ( delete_key ^ where_clause )
            // PLSQL_DMLParser.g:702:10: delete_key ^ where_clause
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_delete_key_in_merge_update_delete_part6291);
            delete_key478=gPLSQLParser.delete_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(delete_key478.getTree(), root_0);

            pushFollow(FOLLOW_where_clause_in_merge_update_delete_part6294);
            where_clause479=gPLSQLParser.where_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause479.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "merge_update_delete_part"


    public static class merge_insert_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "merge_insert_clause"
    // PLSQL_DMLParser.g:705:1: merge_insert_clause : when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )? -> ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) ;
    public final merge_insert_clause_return merge_insert_clause() throws RecognitionException {
        merge_insert_clause_return retval = new merge_insert_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN485=null;
        Token COMMA487=null;
        Token RIGHT_PAREN489=null;
        PLSQLParser_PLSQLKeys.when_key_return when_key480 =null;

        PLSQLParser_PLSQLKeys.not_key_return not_key481 =null;

        PLSQLParser_PLSQLKeys.matched_key_return matched_key482 =null;

        PLSQLParser_PLSQLKeys.then_key_return then_key483 =null;

        PLSQLParser_PLSQLKeys.insert_key_return insert_key484 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name486 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name488 =null;

        PLSQLParser_PLSQLKeys.values_key_return values_key490 =null;

        expression_list_return expression_list491 =null;

        PLSQLParser_PLSQLCommons.where_clause_return where_clause492 =null;


        Object LEFT_PAREN485_tree=null;
        Object COMMA487_tree=null;
        Object RIGHT_PAREN489_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
        RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
        RewriteRuleSubtreeStream stream_insert_key=new RewriteRuleSubtreeStream(adaptor,"rule insert_key");
        RewriteRuleSubtreeStream stream_values_key=new RewriteRuleSubtreeStream(adaptor,"rule values_key");
        RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
        RewriteRuleSubtreeStream stream_matched_key=new RewriteRuleSubtreeStream(adaptor,"rule matched_key");
        try {
            // PLSQL_DMLParser.g:706:5: ( when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )? -> ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) )
            // PLSQL_DMLParser.g:706:10: when_key not_key matched_key then_key insert_key ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )? values_key expression_list ( where_clause )?
            {
            pushFollow(FOLLOW_when_key_in_merge_insert_clause6314);
            when_key480=gPLSQLParser.when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_when_key.add(when_key480.getTree());

            pushFollow(FOLLOW_not_key_in_merge_insert_clause6316);
            not_key481=gPLSQLParser.not_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_key.add(not_key481.getTree());

            pushFollow(FOLLOW_matched_key_in_merge_insert_clause6318);
            matched_key482=gPLSQLParser.matched_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matched_key.add(matched_key482.getTree());

            pushFollow(FOLLOW_then_key_in_merge_insert_clause6320);
            then_key483=gPLSQLParser.then_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_then_key.add(then_key483.getTree());

            pushFollow(FOLLOW_insert_key_in_merge_insert_clause6322);
            insert_key484=gPLSQLParser.insert_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insert_key.add(insert_key484.getTree());

            // PLSQL_DMLParser.g:707:9: ( LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==LEFT_PAREN) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // PLSQL_DMLParser.g:707:10: LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
                    {
                    LEFT_PAREN485=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_merge_insert_clause6334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN485);


                    pushFollow(FOLLOW_column_name_in_merge_insert_clause6336);
                    column_name486=gPLSQLParser.column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_name.add(column_name486.getTree());

                    // PLSQL_DMLParser.g:707:33: ( COMMA column_name )*
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==COMMA) ) {
                            alt165=1;
                        }


                        switch (alt165) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:707:34: COMMA column_name
                    	    {
                    	    COMMA487=(Token)match(input,COMMA,FOLLOW_COMMA_in_merge_insert_clause6339); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA487);


                    	    pushFollow(FOLLOW_column_name_in_merge_insert_clause6341);
                    	    column_name488=gPLSQLParser.column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_column_name.add(column_name488.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);


                    RIGHT_PAREN489=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_merge_insert_clause6345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN489);


                    }
                    break;

            }


            pushFollow(FOLLOW_values_key_in_merge_insert_clause6357);
            values_key490=gPLSQLParser.values_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_values_key.add(values_key490.getTree());

            pushFollow(FOLLOW_expression_list_in_merge_insert_clause6359);
            expression_list491=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression_list.add(expression_list491.getTree());

            // PLSQL_DMLParser.g:708:36: ( where_clause )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==SQL92_RESERVED_WHERE) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // PLSQL_DMLParser.g:708:36: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_merge_insert_clause6361);
                    where_clause492=gPLSQLParser.where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_where_clause.add(where_clause492.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: where_clause, column_name, expression_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 709:9: -> ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? )
            {
                // PLSQL_DMLParser.g:709:12: ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MERGE_INSERT, "MERGE_INSERT")
                , root_1);

                // PLSQL_DMLParser.g:709:27: ^( COLUMNS ( column_name )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(COLUMNS, "COLUMNS")
                , root_2);

                // PLSQL_DMLParser.g:709:37: ( column_name )*
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_2, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_expression_list.nextTree());

                // PLSQL_DMLParser.g:709:67: ( where_clause )?
                if ( stream_where_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_where_clause.nextTree());

                }
                stream_where_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "merge_insert_clause"


    public static class selected_tableview_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selected_tableview"
    // PLSQL_DMLParser.g:712:1: selected_tableview : ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )? -> ^( SELECTED_TABLEVIEW ( table_alias )? ( tableview_name )? ( select_statement )? ) ;
    public final selected_tableview_return selected_tableview() throws RecognitionException {
        selected_tableview_return retval = new selected_tableview_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN494=null;
        Token RIGHT_PAREN496=null;
        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name493 =null;

        select_statement_return select_statement495 =null;

        PLSQLParser_PLSQLCommons.table_alias_return table_alias497 =null;


        Object LEFT_PAREN494_tree=null;
        Object RIGHT_PAREN496_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            // PLSQL_DMLParser.g:713:5: ( ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )? -> ^( SELECTED_TABLEVIEW ( table_alias )? ( tableview_name )? ( select_statement )? ) )
            // PLSQL_DMLParser.g:713:10: ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN ) ( table_alias )?
            {
            // PLSQL_DMLParser.g:713:10: ( tableview_name | LEFT_PAREN select_statement RIGHT_PAREN )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==DELIMITED_ID||LA168_0==INTRODUCER||LA168_0==REGULAR_ID) ) {
                alt168=1;
            }
            else if ( (LA168_0==LEFT_PAREN) ) {
                alt168=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;

            }
            switch (alt168) {
                case 1 :
                    // PLSQL_DMLParser.g:713:12: tableview_name
                    {
                    pushFollow(FOLLOW_tableview_name_in_selected_tableview6411);
                    tableview_name493=gPLSQLParser.tableview_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name493.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:713:29: LEFT_PAREN select_statement RIGHT_PAREN
                    {
                    LEFT_PAREN494=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_selected_tableview6415); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN494);


                    pushFollow(FOLLOW_select_statement_in_selected_tableview6417);
                    select_statement495=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_statement.add(select_statement495.getTree());

                    RIGHT_PAREN496=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_selected_tableview6419); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN496);


                    }
                    break;

            }


            // PLSQL_DMLParser.g:713:70: ( table_alias )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( ((LA169_0 >= CHAR_STRING && LA169_0 <= CHAR_STRING_PERL)||LA169_0==DELIMITED_ID||LA169_0==INTRODUCER||LA169_0==NATIONAL_CHAR_STRING_LIT||LA169_0==REGULAR_ID) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // PLSQL_DMLParser.g:713:70: table_alias
                    {
                    pushFollow(FOLLOW_table_alias_in_selected_tableview6422);
                    table_alias497=gPLSQLParser.table_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_alias.add(table_alias497.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableview_name, table_alias, select_statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 714:9: -> ^( SELECTED_TABLEVIEW ( table_alias )? ( tableview_name )? ( select_statement )? )
            {
                // PLSQL_DMLParser.g:714:12: ^( SELECTED_TABLEVIEW ( table_alias )? ( tableview_name )? ( select_statement )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTED_TABLEVIEW, "SELECTED_TABLEVIEW")
                , root_1);

                // PLSQL_DMLParser.g:714:33: ( table_alias )?
                if ( stream_table_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_alias.nextTree());

                }
                stream_table_alias.reset();

                // PLSQL_DMLParser.g:714:46: ( tableview_name )?
                if ( stream_tableview_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableview_name.nextTree());

                }
                stream_tableview_name.reset();

                // PLSQL_DMLParser.g:714:62: ( select_statement )?
                if ( stream_select_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_select_statement.nextTree());

                }
                stream_select_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selected_tableview"


    public static class lock_table_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lock_table_statement"
    // PLSQL_DMLParser.g:719:1: lock_table_statement : lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )? -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) ;
    public final lock_table_statement_return lock_table_statement() throws RecognitionException {
        lock_table_statement_return retval = new lock_table_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA501=null;
        PLSQLParser_PLSQLKeys.lock_key_return lock_key498 =null;

        PLSQLParser_PLSQLKeys.table_key_return table_key499 =null;

        lock_table_element_return lock_table_element500 =null;

        lock_table_element_return lock_table_element502 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key503 =null;

        lock_mode_return lock_mode504 =null;

        PLSQLParser_PLSQLKeys.mode_key_return mode_key505 =null;

        wait_nowait_part_return wait_nowait_part506 =null;


        Object COMMA501_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_lock_table_element=new RewriteRuleSubtreeStream(adaptor,"rule lock_table_element");
        RewriteRuleSubtreeStream stream_mode_key=new RewriteRuleSubtreeStream(adaptor,"rule mode_key");
        RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
        RewriteRuleSubtreeStream stream_lock_mode=new RewriteRuleSubtreeStream(adaptor,"rule lock_mode");
        RewriteRuleSubtreeStream stream_wait_nowait_part=new RewriteRuleSubtreeStream(adaptor,"rule wait_nowait_part");
        RewriteRuleSubtreeStream stream_lock_key=new RewriteRuleSubtreeStream(adaptor,"rule lock_key");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        try {
            // PLSQL_DMLParser.g:720:5: ( lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )? -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) )
            // PLSQL_DMLParser.g:720:10: lock_key table_key lock_table_element ( COMMA lock_table_element )* in_key lock_mode mode_key ( wait_nowait_part )?
            {
            pushFollow(FOLLOW_lock_key_in_lock_table_statement6468);
            lock_key498=gPLSQLParser.lock_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lock_key.add(lock_key498.getTree());

            pushFollow(FOLLOW_table_key_in_lock_table_statement6470);
            table_key499=gPLSQLParser.table_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_table_key.add(table_key499.getTree());

            pushFollow(FOLLOW_lock_table_element_in_lock_table_statement6481);
            lock_table_element500=lock_table_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lock_table_element.add(lock_table_element500.getTree());

            // PLSQL_DMLParser.g:721:28: ( COMMA lock_table_element )*
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==COMMA) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // PLSQL_DMLParser.g:721:29: COMMA lock_table_element
            	    {
            	    COMMA501=(Token)match(input,COMMA,FOLLOW_COMMA_in_lock_table_statement6484); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA501);


            	    pushFollow(FOLLOW_lock_table_element_in_lock_table_statement6486);
            	    lock_table_element502=lock_table_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_lock_table_element.add(lock_table_element502.getTree());

            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);


            pushFollow(FOLLOW_in_key_in_lock_table_statement6499);
            in_key503=gPLSQLParser.in_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_in_key.add(in_key503.getTree());

            pushFollow(FOLLOW_lock_mode_in_lock_table_statement6501);
            lock_mode504=lock_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lock_mode.add(lock_mode504.getTree());

            pushFollow(FOLLOW_mode_key_in_lock_table_statement6503);
            mode_key505=gPLSQLParser.mode_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_mode_key.add(mode_key505.getTree());

            // PLSQL_DMLParser.g:722:35: ( wait_nowait_part )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("wait"))))) {
                int LA171_1 = input.LA(2);

                if ( (LA171_1==APPROXIMATE_NUM_LIT||LA171_1==BINDVAR||(LA171_1 >= CHAR_STRING && LA171_1 <= COLON)||LA171_1==DELIMITED_ID||LA171_1==EXACT_NUM_LIT||LA171_1==INTRODUCER||LA171_1==LEFT_PAREN||(LA171_1 >= MINUS_SIGN && LA171_1 <= NATIONAL_CHAR_STRING_LIT)||LA171_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA171_1==PLUS_SIGN||LA171_1==SQL92_RESERVED_ALL||LA171_1==SQL92_RESERVED_ANY||LA171_1==SQL92_RESERVED_CASE||(LA171_1 >= SQL92_RESERVED_CURSOR && LA171_1 <= SQL92_RESERVED_DATE)||LA171_1==SQL92_RESERVED_DEFAULT||LA171_1==SQL92_RESERVED_DISTINCT||(LA171_1 >= SQL92_RESERVED_EXISTS && LA171_1 <= SQL92_RESERVED_FALSE)||(LA171_1 >= SQL92_RESERVED_NOT && LA171_1 <= SQL92_RESERVED_NULL)||LA171_1==SQL92_RESERVED_PRIOR||LA171_1==SQL92_RESERVED_TRUE||LA171_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("wait")))) {
                    alt171=1;
                }
                else if ( (LA171_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("wait"))))) {
                    int LA171_5 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("wait"))) ) {
                        alt171=1;
                    }
                }
            }
            else if ( (LA171_0==PLSQL_RESERVED_NOWAIT) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // PLSQL_DMLParser.g:722:35: wait_nowait_part
                    {
                    pushFollow(FOLLOW_wait_nowait_part_in_lock_table_statement6505);
                    wait_nowait_part506=wait_nowait_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wait_nowait_part.add(wait_nowait_part506.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: lock_mode, lock_table_element, wait_nowait_part, lock_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 723:9: -> ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
            {
                // PLSQL_DMLParser.g:723:12: ^( lock_key ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_lock_key.nextNode(), root_1);

                if ( !(stream_lock_table_element.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_lock_table_element.hasNext() ) {
                    adaptor.addChild(root_1, stream_lock_table_element.nextTree());

                }
                stream_lock_table_element.reset();

                adaptor.addChild(root_1, stream_lock_mode.nextTree());

                // PLSQL_DMLParser.g:723:53: ( wait_nowait_part )?
                if ( stream_wait_nowait_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_wait_nowait_part.nextTree());

                }
                stream_wait_nowait_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"


    public static class wait_nowait_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "wait_nowait_part"
    // PLSQL_DMLParser.g:726:1: wait_nowait_part : ( wait_key expression -> ^( wait_key ^( EXPR expression ) ) | nowait_key );
    public final wait_nowait_part_return wait_nowait_part() throws RecognitionException {
        wait_nowait_part_return retval = new wait_nowait_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.wait_key_return wait_key507 =null;

        expression_return expression508 =null;

        PLSQLParser_PLSQLKeys.nowait_key_return nowait_key509 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_wait_key=new RewriteRuleSubtreeStream(adaptor,"rule wait_key");
        try {
            // PLSQL_DMLParser.g:727:5: ( wait_key expression -> ^( wait_key ^( EXPR expression ) ) | nowait_key )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("wait")))) {
                alt172=1;
            }
            else if ( (LA172_0==PLSQL_RESERVED_NOWAIT) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;

            }
            switch (alt172) {
                case 1 :
                    // PLSQL_DMLParser.g:727:10: wait_key expression
                    {
                    pushFollow(FOLLOW_wait_key_in_wait_nowait_part6548);
                    wait_key507=gPLSQLParser.wait_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_wait_key.add(wait_key507.getTree());

                    pushFollow(FOLLOW_expression_in_wait_nowait_part6550);
                    expression508=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression508.getTree());

                    // AST REWRITE
                    // elements: wait_key, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 727:30: -> ^( wait_key ^( EXPR expression ) )
                    {
                        // PLSQL_DMLParser.g:727:33: ^( wait_key ^( EXPR expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_wait_key.nextNode(), root_1);

                        // PLSQL_DMLParser.g:727:44: ^( EXPR expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_2);

                        adaptor.addChild(root_2, stream_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:728:10: nowait_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_nowait_key_in_wait_nowait_part6573);
                    nowait_key509=gPLSQLParser.nowait_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nowait_key509.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "wait_nowait_part"


    public static class lock_table_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lock_table_element"
    // PLSQL_DMLParser.g:733:1: lock_table_element : tableview_name ( partition_extension_clause )? -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) ;
    public final lock_table_element_return lock_table_element() throws RecognitionException {
        lock_table_element_return retval = new lock_table_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name510 =null;

        PLSQLParser_PLSQLCommons.partition_extension_clause_return partition_extension_clause511 =null;


        RewriteRuleSubtreeStream stream_partition_extension_clause=new RewriteRuleSubtreeStream(adaptor,"rule partition_extension_clause");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        try {
            // PLSQL_DMLParser.g:734:5: ( tableview_name ( partition_extension_clause )? -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) )
            // PLSQL_DMLParser.g:734:10: tableview_name ( partition_extension_clause )?
            {
            pushFollow(FOLLOW_tableview_name_in_lock_table_element6595);
            tableview_name510=gPLSQLParser.tableview_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name510.getTree());

            // PLSQL_DMLParser.g:734:25: ( partition_extension_clause )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("subpartition"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // PLSQL_DMLParser.g:734:25: partition_extension_clause
                    {
                    pushFollow(FOLLOW_partition_extension_clause_in_lock_table_element6597);
                    partition_extension_clause511=gPLSQLParser.partition_extension_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_partition_extension_clause.add(partition_extension_clause511.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableview_name, partition_extension_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 735:9: -> ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
            {
                // PLSQL_DMLParser.g:735:12: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOCK_TABLE_ELEMENT, "LOCK_TABLE_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_tableview_name.nextTree());

                // PLSQL_DMLParser.g:735:48: ( partition_extension_clause )?
                if ( stream_partition_extension_clause.hasNext() ) {
                    adaptor.addChild(root_1, stream_partition_extension_clause.nextTree());

                }
                stream_partition_extension_clause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lock_table_element"


    public static class lock_mode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lock_mode"
    // PLSQL_DMLParser.g:738:1: lock_mode : ( row_key share_key | row_key exclusive_key | share_key ( update_key )? | share_key row_key exclusive_key | exclusive_key );
    public final lock_mode_return lock_mode() throws RecognitionException {
        lock_mode_return retval = new lock_mode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.row_key_return row_key512 =null;

        PLSQLParser_PLSQLKeys.share_key_return share_key513 =null;

        PLSQLParser_PLSQLKeys.row_key_return row_key514 =null;

        PLSQLParser_PLSQLKeys.exclusive_key_return exclusive_key515 =null;

        PLSQLParser_PLSQLKeys.share_key_return share_key516 =null;

        PLSQLParser_PLSQLKeys.update_key_return update_key517 =null;

        PLSQLParser_PLSQLKeys.share_key_return share_key518 =null;

        PLSQLParser_PLSQLKeys.row_key_return row_key519 =null;

        PLSQLParser_PLSQLKeys.exclusive_key_return exclusive_key520 =null;

        PLSQLParser_PLSQLKeys.exclusive_key_return exclusive_key521 =null;



        try {
            // PLSQL_DMLParser.g:739:5: ( row_key share_key | row_key exclusive_key | share_key ( update_key )? | share_key row_key exclusive_key | exclusive_key )
            int alt175=5;
            switch ( input.LA(1) ) {
            case REGULAR_ID:
                {
                int LA175_1 = input.LA(2);

                if ( (LA175_1==PLSQL_RESERVED_SHARE) ) {
                    alt175=1;
                }
                else if ( (LA175_1==PLSQL_RESERVED_EXCLUSIVE) ) {
                    alt175=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 175, 1, input);

                    throw nvae;

                }
                }
                break;
            case PLSQL_RESERVED_SHARE:
                {
                int LA175_2 = input.LA(2);

                if ( (LA175_2==PLSQL_RESERVED_MODE||LA175_2==SQL92_RESERVED_UPDATE) ) {
                    alt175=3;
                }
                else if ( (LA175_2==REGULAR_ID) ) {
                    alt175=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 175, 2, input);

                    throw nvae;

                }
                }
                break;
            case PLSQL_RESERVED_EXCLUSIVE:
                {
                alt175=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;

            }

            switch (alt175) {
                case 1 :
                    // PLSQL_DMLParser.g:739:10: row_key share_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_row_key_in_lock_mode6637);
                    row_key512=gPLSQLParser.row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, row_key512.getTree());

                    pushFollow(FOLLOW_share_key_in_lock_mode6639);
                    share_key513=gPLSQLParser.share_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, share_key513.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:740:10: row_key exclusive_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_row_key_in_lock_mode6650);
                    row_key514=gPLSQLParser.row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, row_key514.getTree());

                    pushFollow(FOLLOW_exclusive_key_in_lock_mode6652);
                    exclusive_key515=gPLSQLParser.exclusive_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_key515.getTree());

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:741:10: share_key ( update_key )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_share_key_in_lock_mode6663);
                    share_key516=gPLSQLParser.share_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, share_key516.getTree());

                    // PLSQL_DMLParser.g:741:20: ( update_key )?
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==SQL92_RESERVED_UPDATE) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // PLSQL_DMLParser.g:741:20: update_key
                            {
                            pushFollow(FOLLOW_update_key_in_lock_mode6665);
                            update_key517=gPLSQLParser.update_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, update_key517.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // PLSQL_DMLParser.g:742:10: share_key row_key exclusive_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_share_key_in_lock_mode6677);
                    share_key518=gPLSQLParser.share_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, share_key518.getTree());

                    pushFollow(FOLLOW_row_key_in_lock_mode6679);
                    row_key519=gPLSQLParser.row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, row_key519.getTree());

                    pushFollow(FOLLOW_exclusive_key_in_lock_mode6681);
                    exclusive_key520=gPLSQLParser.exclusive_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_key520.getTree());

                    }
                    break;
                case 5 :
                    // PLSQL_DMLParser.g:743:10: exclusive_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_exclusive_key_in_lock_mode6692);
                    exclusive_key521=gPLSQLParser.exclusive_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exclusive_key521.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lock_mode"


    public static class general_table_ref_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "general_table_ref"
    // PLSQL_DMLParser.g:749:1: general_table_ref : ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )? -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? ) ;
    public final general_table_ref_return general_table_ref() throws RecognitionException {
        general_table_ref_return retval = new general_table_ref_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN524=null;
        Token RIGHT_PAREN526=null;
        dml_table_expression_clause_return dml_table_expression_clause522 =null;

        PLSQLParser_PLSQLKeys.only_key_return only_key523 =null;

        dml_table_expression_clause_return dml_table_expression_clause525 =null;

        PLSQLParser_PLSQLCommons.table_alias_return table_alias527 =null;


        Object LEFT_PAREN524_tree=null;
        Object RIGHT_PAREN526_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_dml_table_expression_clause=new RewriteRuleSubtreeStream(adaptor,"rule dml_table_expression_clause");
        RewriteRuleSubtreeStream stream_table_alias=new RewriteRuleSubtreeStream(adaptor,"rule table_alias");
        RewriteRuleSubtreeStream stream_only_key=new RewriteRuleSubtreeStream(adaptor,"rule only_key");
        try {
            // PLSQL_DMLParser.g:750:5: ( ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )? -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? ) )
            // PLSQL_DMLParser.g:750:10: ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN ) ( table_alias )?
            {
            // PLSQL_DMLParser.g:750:10: ( dml_table_expression_clause | only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==DELIMITED_ID||LA176_0==INTRODUCER||LA176_0==LEFT_PAREN||(LA176_0 >= SQL92_RESERVED_TABLE && LA176_0 <= SQL92_RESERVED_THE)) ) {
                alt176=1;
            }
            else if ( (LA176_0==REGULAR_ID) ) {
                int LA176_5 = input.LA(2);

                if ( (!(((input.LT(1).getText().equalsIgnoreCase("only"))))) ) {
                    alt176=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("only"))) ) {
                    alt176=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 176, 5, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }
            switch (alt176) {
                case 1 :
                    // PLSQL_DMLParser.g:750:15: dml_table_expression_clause
                    {
                    pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref6720);
                    dml_table_expression_clause522=dml_table_expression_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_table_expression_clause.add(dml_table_expression_clause522.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:751:14: only_key LEFT_PAREN dml_table_expression_clause RIGHT_PAREN
                    {
                    pushFollow(FOLLOW_only_key_in_general_table_ref6735);
                    only_key523=gPLSQLParser.only_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_only_key.add(only_key523.getTree());

                    LEFT_PAREN524=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_general_table_ref6737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN524);


                    pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref6739);
                    dml_table_expression_clause525=dml_table_expression_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dml_table_expression_clause.add(dml_table_expression_clause525.getTree());

                    RIGHT_PAREN526=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_general_table_ref6741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN526);


                    }
                    break;

            }


            // PLSQL_DMLParser.g:752:14: ( table_alias )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( ((LA177_0 >= CHAR_STRING && LA177_0 <= CHAR_STRING_PERL)||LA177_0==DELIMITED_ID||LA177_0==INTRODUCER||LA177_0==NATIONAL_CHAR_STRING_LIT) ) {
                alt177=1;
            }
            else if ( (LA177_0==REGULAR_ID) ) {
                int LA177_2 = input.LA(2);

                if ( (!((((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("returning"))||(input.LT(1).getText().equalsIgnoreCase("log"))||(input.LT(1).getText().equalsIgnoreCase("return"))||(input.LT(1).getText().equalsIgnoreCase("set")))))) ) {
                    alt177=1;
                }
            }
            switch (alt177) {
                case 1 :
                    // PLSQL_DMLParser.g:752:14: table_alias
                    {
                    pushFollow(FOLLOW_table_alias_in_general_table_ref6756);
                    table_alias527=gPLSQLParser.table_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_alias.add(table_alias527.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: table_alias, dml_table_expression_clause, only_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 753:9: -> ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? )
            {
                // PLSQL_DMLParser.g:753:12: ^( TABLE_REF ( table_alias )? dml_table_expression_clause ( only_key )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TABLE_REF, "TABLE_REF")
                , root_1);

                // PLSQL_DMLParser.g:753:24: ( table_alias )?
                if ( stream_table_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_table_alias.nextTree());

                }
                stream_table_alias.reset();

                adaptor.addChild(root_1, stream_dml_table_expression_clause.nextTree());

                // PLSQL_DMLParser.g:753:65: ( only_key )?
                if ( stream_only_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_only_key.nextTree());

                }
                stream_only_key.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "general_table_ref"


    public static class static_returning_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_returning_clause"
    // PLSQL_DMLParser.g:756:1: static_returning_clause : ( returning_key | return_key ) expression ( COMMA expression )* into_clause -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause ) ;
    public final static_returning_clause_return static_returning_clause() throws RecognitionException {
        static_returning_clause_return retval = new static_returning_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA531=null;
        PLSQLParser_PLSQLKeys.returning_key_return returning_key528 =null;

        PLSQLParser_PLSQLKeys.return_key_return return_key529 =null;

        expression_return expression530 =null;

        expression_return expression532 =null;

        PLSQLParser_PLSQLCommons.into_clause_return into_clause533 =null;


        Object COMMA531_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_returning_key=new RewriteRuleSubtreeStream(adaptor,"rule returning_key");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
        RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
        try {
            // PLSQL_DMLParser.g:757:5: ( ( returning_key | return_key ) expression ( COMMA expression )* into_clause -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause ) )
            // PLSQL_DMLParser.g:757:10: ( returning_key | return_key ) expression ( COMMA expression )* into_clause
            {
            // PLSQL_DMLParser.g:757:10: ( returning_key | return_key )
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==REGULAR_ID) ) {
                int LA178_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("returning"))) ) {
                    alt178=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("return"))) ) {
                    alt178=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 178, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;

            }
            switch (alt178) {
                case 1 :
                    // PLSQL_DMLParser.g:757:11: returning_key
                    {
                    pushFollow(FOLLOW_returning_key_in_static_returning_clause6800);
                    returning_key528=gPLSQLParser.returning_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_returning_key.add(returning_key528.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:757:25: return_key
                    {
                    pushFollow(FOLLOW_return_key_in_static_returning_clause6802);
                    return_key529=gPLSQLParser.return_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_return_key.add(return_key529.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_expression_in_static_returning_clause6805);
            expression530=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression530.getTree());

            // PLSQL_DMLParser.g:757:48: ( COMMA expression )*
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==COMMA) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // PLSQL_DMLParser.g:757:49: COMMA expression
            	    {
            	    COMMA531=(Token)match(input,COMMA,FOLLOW_COMMA_in_static_returning_clause6808); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA531);


            	    pushFollow(FOLLOW_expression_in_static_returning_clause6810);
            	    expression532=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression532.getTree());

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);


            pushFollow(FOLLOW_into_clause_in_static_returning_clause6823);
            into_clause533=gPLSQLParser.into_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_into_clause.add(into_clause533.getTree());

            // AST REWRITE
            // elements: expression, into_clause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 759:9: -> ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause )
            {
                // PLSQL_DMLParser.g:759:12: ^( STATIC_RETURNING ( ^( EXPR expression ) )+ into_clause )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_RETURNING, "STATIC_RETURNING")
                , root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    // PLSQL_DMLParser.g:759:31: ^( EXPR expression )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(EXPR, "EXPR")
                    , root_2);

                    adaptor.addChild(root_2, stream_expression.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_expression.reset();

                adaptor.addChild(root_1, stream_into_clause.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_returning_clause"


    public static class error_logging_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_logging_clause"
    // PLSQL_DMLParser.g:762:1: error_logging_clause : log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )? -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? ) ;
    public final error_logging_clause_return error_logging_clause() throws RecognitionException {
        error_logging_clause_return retval = new error_logging_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.log_key_return log_key534 =null;

        PLSQLParser_PLSQLKeys.errors_key_return errors_key535 =null;

        error_logging_into_part_return error_logging_into_part536 =null;

        expression_wrapper_return expression_wrapper537 =null;

        error_logging_reject_part_return error_logging_reject_part538 =null;


        RewriteRuleSubtreeStream stream_error_logging_reject_part=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_reject_part");
        RewriteRuleSubtreeStream stream_expression_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule expression_wrapper");
        RewriteRuleSubtreeStream stream_errors_key=new RewriteRuleSubtreeStream(adaptor,"rule errors_key");
        RewriteRuleSubtreeStream stream_error_logging_into_part=new RewriteRuleSubtreeStream(adaptor,"rule error_logging_into_part");
        RewriteRuleSubtreeStream stream_log_key=new RewriteRuleSubtreeStream(adaptor,"rule log_key");
        try {
            // PLSQL_DMLParser.g:763:5: ( log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )? -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? ) )
            // PLSQL_DMLParser.g:763:10: log_key errors_key ( error_logging_into_part )? ( ( LEFT_PAREN )=> expression_wrapper )? ( error_logging_reject_part )?
            {
            pushFollow(FOLLOW_log_key_in_error_logging_clause6866);
            log_key534=gPLSQLParser.log_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_log_key.add(log_key534.getTree());

            pushFollow(FOLLOW_errors_key_in_error_logging_clause6868);
            errors_key535=gPLSQLParser.errors_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_errors_key.add(errors_key535.getTree());

            // PLSQL_DMLParser.g:764:9: ( error_logging_into_part )?
            int alt180=2;
            alt180 = dfa180.predict(input);
            switch (alt180) {
                case 1 :
                    // PLSQL_DMLParser.g:764:9: error_logging_into_part
                    {
                    pushFollow(FOLLOW_error_logging_into_part_in_error_logging_clause6879);
                    error_logging_into_part536=error_logging_into_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_into_part.add(error_logging_into_part536.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:765:9: ( ( LEFT_PAREN )=> expression_wrapper )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==SQL92_RESERVED_CURSOR) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_NOT) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==MINUS_SIGN) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==PLUS_SIGN) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_PRIOR) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("reject"))))) {
                int LA181_7 = input.LA(2);

                if ( (synpred22_PLSQL_DMLParser()) ) {
                    alt181=1;
                }
            }
            else if ( (LA181_0==SQL92_RESERVED_DISTINCT) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_ALL) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==DELIMITED_ID) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_CASE) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_EXISTS) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_ANY) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==INTRODUCER) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==BINDVAR) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==COLON) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==APPROXIMATE_NUM_LIT||LA181_0==EXACT_NUM_LIT||LA181_0==UNSIGNED_INTEGER) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_DATE) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( ((LA181_0 >= CHAR_STRING && LA181_0 <= CHAR_STRING_PERL)||LA181_0==NATIONAL_CHAR_STRING_LIT) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_NULL) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_TRUE) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_FALSE) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==SQL92_RESERVED_DEFAULT) && (synpred22_PLSQL_DMLParser())) {
                alt181=1;
            }
            else if ( (LA181_0==LEFT_PAREN) ) {
                int LA181_24 = input.LA(2);

                if ( (synpred22_PLSQL_DMLParser()) ) {
                    alt181=1;
                }
            }
            switch (alt181) {
                case 1 :
                    // PLSQL_DMLParser.g:765:10: ( LEFT_PAREN )=> expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_error_logging_clause6896);
                    expression_wrapper537=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_wrapper.add(expression_wrapper537.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:766:9: ( error_logging_reject_part )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("reject"))))) {
                int LA182_1 = input.LA(2);

                if ( (LA182_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("reject"))))) {
                    int LA182_3 = input.LA(3);

                    if ( (LA182_3==APPROXIMATE_NUM_LIT||LA182_3==BINDVAR||(LA182_3 >= CHAR_STRING && LA182_3 <= COLON)||LA182_3==DELIMITED_ID||LA182_3==EXACT_NUM_LIT||LA182_3==INTRODUCER||LA182_3==LEFT_PAREN||(LA182_3 >= MINUS_SIGN && LA182_3 <= NATIONAL_CHAR_STRING_LIT)||LA182_3==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA182_3==PLUS_SIGN||LA182_3==REGULAR_ID||LA182_3==SQL92_RESERVED_ALL||LA182_3==SQL92_RESERVED_ANY||LA182_3==SQL92_RESERVED_CASE||(LA182_3 >= SQL92_RESERVED_CURSOR && LA182_3 <= SQL92_RESERVED_DATE)||LA182_3==SQL92_RESERVED_DEFAULT||LA182_3==SQL92_RESERVED_DISTINCT||(LA182_3 >= SQL92_RESERVED_EXISTS && LA182_3 <= SQL92_RESERVED_FALSE)||(LA182_3 >= SQL92_RESERVED_NOT && LA182_3 <= SQL92_RESERVED_NULL)||LA182_3==SQL92_RESERVED_PRIOR||LA182_3==SQL92_RESERVED_TRUE||LA182_3==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("reject")))) {
                        alt182=1;
                    }
                }
            }
            switch (alt182) {
                case 1 :
                    // PLSQL_DMLParser.g:766:9: error_logging_reject_part
                    {
                    pushFollow(FOLLOW_error_logging_reject_part_in_error_logging_clause6908);
                    error_logging_reject_part538=error_logging_reject_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_error_logging_reject_part.add(error_logging_reject_part538.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: log_key, error_logging_reject_part, error_logging_into_part, expression_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 767:9: -> ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? )
            {
                // PLSQL_DMLParser.g:767:12: ^( log_key ( error_logging_into_part )? ( expression_wrapper )? ( error_logging_reject_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_log_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:767:22: ( error_logging_into_part )?
                if ( stream_error_logging_into_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_into_part.nextTree());

                }
                stream_error_logging_into_part.reset();

                // PLSQL_DMLParser.g:767:47: ( expression_wrapper )?
                if ( stream_expression_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression_wrapper.nextTree());

                }
                stream_expression_wrapper.reset();

                // PLSQL_DMLParser.g:767:67: ( error_logging_reject_part )?
                if ( stream_error_logging_reject_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_error_logging_reject_part.nextTree());

                }
                stream_error_logging_reject_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_logging_clause"


    public static class error_logging_into_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_logging_into_part"
    // PLSQL_DMLParser.g:770:1: error_logging_into_part : into_key ^ tableview_name ;
    public final error_logging_into_part_return error_logging_into_part() throws RecognitionException {
        error_logging_into_part_return retval = new error_logging_into_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.into_key_return into_key539 =null;

        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name540 =null;



        try {
            // PLSQL_DMLParser.g:771:5: ( into_key ^ tableview_name )
            // PLSQL_DMLParser.g:771:10: into_key ^ tableview_name
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_into_key_in_error_logging_into_part6952);
            into_key539=gPLSQLParser.into_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(into_key539.getTree(), root_0);

            pushFollow(FOLLOW_tableview_name_in_error_logging_into_part6955);
            tableview_name540=gPLSQLParser.tableview_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tableview_name540.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_logging_into_part"


    public static class error_logging_reject_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "error_logging_reject_part"
    // PLSQL_DMLParser.g:774:1: error_logging_reject_part : reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper ) ;
    public final error_logging_reject_part_return error_logging_reject_part() throws RecognitionException {
        error_logging_reject_part_return retval = new error_logging_reject_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.reject_key_return reject_key541 =null;

        PLSQLParser_PLSQLKeys.limit_key_return limit_key542 =null;

        PLSQLParser_PLSQLKeys.unlimited_key_return unlimited_key543 =null;

        expression_wrapper_return expression_wrapper544 =null;



        try {
            // PLSQL_DMLParser.g:775:5: ( reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper ) )
            // PLSQL_DMLParser.g:775:10: reject_key ^ limit_key ! ( ( unlimited_key )=> unlimited_key | expression_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_reject_key_in_error_logging_reject_part6975);
            reject_key541=gPLSQLParser.reject_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(reject_key541.getTree(), root_0);

            pushFollow(FOLLOW_limit_key_in_error_logging_reject_part6978);
            limit_key542=gPLSQLParser.limit_key();

            state._fsp--;
            if (state.failed) return retval;

            // PLSQL_DMLParser.g:775:33: ( ( unlimited_key )=> unlimited_key | expression_wrapper )
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==REGULAR_ID) ) {
                int LA183_1 = input.LA(2);

                if ( ((((input.LT(1).getText().equalsIgnoreCase("unlimited"))&&(input.LT(1).getText().equalsIgnoreCase("unlimited")))&&synpred23_PLSQL_DMLParser())) ) {
                    alt183=1;
                }
                else if ( (true) ) {
                    alt183=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 183, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA183_0==APPROXIMATE_NUM_LIT||LA183_0==BINDVAR||(LA183_0 >= CHAR_STRING && LA183_0 <= COLON)||LA183_0==DELIMITED_ID||LA183_0==EXACT_NUM_LIT||LA183_0==INTRODUCER||LA183_0==LEFT_PAREN||(LA183_0 >= MINUS_SIGN && LA183_0 <= NATIONAL_CHAR_STRING_LIT)||LA183_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA183_0==PLUS_SIGN||LA183_0==SQL92_RESERVED_ALL||LA183_0==SQL92_RESERVED_ANY||LA183_0==SQL92_RESERVED_CASE||(LA183_0 >= SQL92_RESERVED_CURSOR && LA183_0 <= SQL92_RESERVED_DATE)||LA183_0==SQL92_RESERVED_DEFAULT||LA183_0==SQL92_RESERVED_DISTINCT||(LA183_0 >= SQL92_RESERVED_EXISTS && LA183_0 <= SQL92_RESERVED_FALSE)||(LA183_0 >= SQL92_RESERVED_NOT && LA183_0 <= SQL92_RESERVED_NULL)||LA183_0==SQL92_RESERVED_PRIOR||LA183_0==SQL92_RESERVED_TRUE||LA183_0==UNSIGNED_INTEGER) ) {
                alt183=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 183, 0, input);

                throw nvae;

            }
            switch (alt183) {
                case 1 :
                    // PLSQL_DMLParser.g:775:34: ( unlimited_key )=> unlimited_key
                    {
                    pushFollow(FOLLOW_unlimited_key_in_error_logging_reject_part6986);
                    unlimited_key543=gPLSQLParser.unlimited_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unlimited_key543.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:775:65: expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_error_logging_reject_part6988);
                    expression_wrapper544=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper544.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "error_logging_reject_part"


    public static class dml_table_expression_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "dml_table_expression_clause"
    // PLSQL_DMLParser.g:778:1: dml_table_expression_clause : ( table_collection_expression -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) ) | LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN -> ^( TABLE_EXPRESSION ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) ) | tableview_name ( sample_clause )? -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) );
    public final dml_table_expression_clause_return dml_table_expression_clause() throws RecognitionException {
        dml_table_expression_clause_return retval = new dml_table_expression_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN546=null;
        Token RIGHT_PAREN549=null;
        table_collection_expression_return table_collection_expression545 =null;

        select_statement_return select_statement547 =null;

        subquery_restriction_clause_return subquery_restriction_clause548 =null;

        PLSQLParser_PLSQLCommons.tableview_name_return tableview_name550 =null;

        sample_clause_return sample_clause551 =null;


        Object LEFT_PAREN546_tree=null;
        Object RIGHT_PAREN549_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_sample_clause=new RewriteRuleSubtreeStream(adaptor,"rule sample_clause");
        RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
        RewriteRuleSubtreeStream stream_table_collection_expression=new RewriteRuleSubtreeStream(adaptor,"rule table_collection_expression");
        RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
        RewriteRuleSubtreeStream stream_subquery_restriction_clause=new RewriteRuleSubtreeStream(adaptor,"rule subquery_restriction_clause");
        try {
            // PLSQL_DMLParser.g:779:5: ( table_collection_expression -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) ) | LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN -> ^( TABLE_EXPRESSION ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) ) | tableview_name ( sample_clause )? -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) )
            int alt186=3;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_TABLE:
            case SQL92_RESERVED_THE:
                {
                alt186=1;
                }
                break;
            case LEFT_PAREN:
                {
                alt186=2;
                }
                break;
            case DELIMITED_ID:
            case INTRODUCER:
            case REGULAR_ID:
                {
                alt186=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;

            }

            switch (alt186) {
                case 1 :
                    // PLSQL_DMLParser.g:779:10: table_collection_expression
                    {
                    pushFollow(FOLLOW_table_collection_expression_in_dml_table_expression_clause7009);
                    table_collection_expression545=table_collection_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_collection_expression.add(table_collection_expression545.getTree());

                    // AST REWRITE
                    // elements: table_collection_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 779:38: -> ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) )
                    {
                        // PLSQL_DMLParser.g:779:41: ^( TABLE_EXPRESSION ^( COLLECTION_MODE table_collection_expression ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TABLE_EXPRESSION, "TABLE_EXPRESSION")
                        , root_1);

                        // PLSQL_DMLParser.g:779:60: ^( COLLECTION_MODE table_collection_expression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(COLLECTION_MODE, "COLLECTION_MODE")
                        , root_2);

                        adaptor.addChild(root_2, stream_table_collection_expression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:780:10: LEFT_PAREN select_statement ( subquery_restriction_clause )? RIGHT_PAREN
                    {
                    LEFT_PAREN546=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7032); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN546);


                    pushFollow(FOLLOW_select_statement_in_dml_table_expression_clause7034);
                    select_statement547=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_select_statement.add(select_statement547.getTree());

                    // PLSQL_DMLParser.g:780:38: ( subquery_restriction_clause )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==SQL92_RESERVED_WITH) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // PLSQL_DMLParser.g:780:38: subquery_restriction_clause
                            {
                            pushFollow(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7036);
                            subquery_restriction_clause548=subquery_restriction_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_subquery_restriction_clause.add(subquery_restriction_clause548.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN549=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN549);


                    // AST REWRITE
                    // elements: subquery_restriction_clause, select_statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 780:79: -> ^( TABLE_EXPRESSION ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) )
                    {
                        // PLSQL_DMLParser.g:780:82: ^( TABLE_EXPRESSION ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TABLE_EXPRESSION, "TABLE_EXPRESSION")
                        , root_1);

                        // PLSQL_DMLParser.g:780:101: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(SELECT_MODE, "SELECT_MODE")
                        , root_2);

                        adaptor.addChild(root_2, stream_select_statement.nextTree());

                        // PLSQL_DMLParser.g:780:132: ( subquery_restriction_clause )?
                        if ( stream_subquery_restriction_clause.hasNext() ) {
                            adaptor.addChild(root_2, stream_subquery_restriction_clause.nextTree());

                        }
                        stream_subquery_restriction_clause.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:781:10: tableview_name ( sample_clause )?
                    {
                    pushFollow(FOLLOW_tableview_name_in_dml_table_expression_clause7065);
                    tableview_name550=gPLSQLParser.tableview_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name550.getTree());

                    // PLSQL_DMLParser.g:781:25: ( sample_clause )?
                    int alt185=2;
                    alt185 = dfa185.predict(input);
                    switch (alt185) {
                        case 1 :
                            // PLSQL_DMLParser.g:781:25: sample_clause
                            {
                            pushFollow(FOLLOW_sample_clause_in_dml_table_expression_clause7067);
                            sample_clause551=sample_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_sample_clause.add(sample_clause551.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: sample_clause, tableview_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 781:40: -> ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
                    {
                        // PLSQL_DMLParser.g:781:43: ^( TABLE_EXPRESSION ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TABLE_EXPRESSION, "TABLE_EXPRESSION")
                        , root_1);

                        // PLSQL_DMLParser.g:781:62: ^( DIRECT_MODE tableview_name ( sample_clause )? )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DIRECT_MODE, "DIRECT_MODE")
                        , root_2);

                        adaptor.addChild(root_2, stream_tableview_name.nextTree());

                        // PLSQL_DMLParser.g:781:91: ( sample_clause )?
                        if ( stream_sample_clause.hasNext() ) {
                            adaptor.addChild(root_2, stream_sample_clause.nextTree());

                        }
                        stream_sample_clause.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "dml_table_expression_clause"


    public static class table_collection_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "table_collection_expression"
    // PLSQL_DMLParser.g:784:1: table_collection_expression : ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN ) -> ^( EXPR ( subquery )? ( expression )? ) ;
    public final table_collection_expression_return table_collection_expression() throws RecognitionException {
        table_collection_expression_return retval = new table_collection_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN554=null;
        Token RIGHT_PAREN556=null;
        Token LEFT_PAREN557=null;
        Token RIGHT_PAREN559=null;
        PLSQLParser_PLSQLKeys.table_key_return table_key552 =null;

        PLSQLParser_PLSQLKeys.the_key_return the_key553 =null;

        subquery_return subquery555 =null;

        expression_return expression558 =null;


        Object LEFT_PAREN554_tree=null;
        Object RIGHT_PAREN556_tree=null;
        Object LEFT_PAREN557_tree=null;
        Object RIGHT_PAREN559_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
        RewriteRuleSubtreeStream stream_the_key=new RewriteRuleSubtreeStream(adaptor,"rule the_key");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            // PLSQL_DMLParser.g:785:5: ( ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN ) -> ^( EXPR ( subquery )? ( expression )? ) )
            // PLSQL_DMLParser.g:785:10: ( table_key | the_key ) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN )
            {
            // PLSQL_DMLParser.g:785:10: ( table_key | the_key )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==SQL92_RESERVED_TABLE) ) {
                alt187=1;
            }
            else if ( (LA187_0==SQL92_RESERVED_THE) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;

            }
            switch (alt187) {
                case 1 :
                    // PLSQL_DMLParser.g:785:12: table_key
                    {
                    pushFollow(FOLLOW_table_key_in_table_collection_expression7105);
                    table_key552=gPLSQLParser.table_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_table_key.add(table_key552.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:785:24: the_key
                    {
                    pushFollow(FOLLOW_the_key_in_table_collection_expression7109);
                    the_key553=gPLSQLParser.the_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_the_key.add(the_key553.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:786:10: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN | LEFT_PAREN expression RIGHT_PAREN )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==LEFT_PAREN) ) {
                int LA188_1 = input.LA(2);

                if ( (synpred24_PLSQL_DMLParser()) ) {
                    alt188=1;
                }
                else if ( (true) ) {
                    alt188=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 188, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }
            switch (alt188) {
                case 1 :
                    // PLSQL_DMLParser.g:786:12: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
                    {
                    LEFT_PAREN554=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_table_collection_expression7137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN554);


                    pushFollow(FOLLOW_subquery_in_table_collection_expression7139);
                    subquery555=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery555.getTree());

                    RIGHT_PAREN556=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_table_collection_expression7141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN556);


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:787:12: LEFT_PAREN expression RIGHT_PAREN
                    {
                    LEFT_PAREN557=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_table_collection_expression7154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN557);


                    pushFollow(FOLLOW_expression_in_table_collection_expression7156);
                    expression558=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression558.getTree());

                    RIGHT_PAREN559=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_table_collection_expression7158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN559);


                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 789:9: -> ^( EXPR ( subquery )? ( expression )? )
            {
                // PLSQL_DMLParser.g:789:12: ^( EXPR ( subquery )? ( expression )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_1);

                // PLSQL_DMLParser.g:789:19: ( subquery )?
                if ( stream_subquery.hasNext() ) {
                    adaptor.addChild(root_1, stream_subquery.nextTree());

                }
                stream_subquery.reset();

                // PLSQL_DMLParser.g:789:29: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "table_collection_expression"


    public static class subquery_restriction_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "subquery_restriction_clause"
    // PLSQL_DMLParser.g:792:1: subquery_restriction_clause : with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? ) -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? ) ;
    public final subquery_restriction_clause_return subquery_restriction_clause() throws RecognitionException {
        subquery_restriction_clause_return retval = new subquery_restriction_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.with_key_return with_key560 =null;

        PLSQLParser_PLSQLKeys.read_key_return read_key561 =null;

        PLSQLParser_PLSQLKeys.only_key_return only_key562 =null;

        PLSQLParser_PLSQLKeys.check_key_return check_key563 =null;

        PLSQLParser_PLSQLKeys.option_key_return option_key564 =null;

        PLSQLParser_PLSQLKeys.constraint_key_return constraint_key565 =null;

        PLSQLParser_PLSQLCommons.constraint_name_return constraint_name566 =null;


        RewriteRuleSubtreeStream stream_with_key=new RewriteRuleSubtreeStream(adaptor,"rule with_key");
        RewriteRuleSubtreeStream stream_constraint_key=new RewriteRuleSubtreeStream(adaptor,"rule constraint_key");
        RewriteRuleSubtreeStream stream_check_key=new RewriteRuleSubtreeStream(adaptor,"rule check_key");
        RewriteRuleSubtreeStream stream_option_key=new RewriteRuleSubtreeStream(adaptor,"rule option_key");
        RewriteRuleSubtreeStream stream_constraint_name=new RewriteRuleSubtreeStream(adaptor,"rule constraint_name");
        RewriteRuleSubtreeStream stream_read_key=new RewriteRuleSubtreeStream(adaptor,"rule read_key");
        RewriteRuleSubtreeStream stream_only_key=new RewriteRuleSubtreeStream(adaptor,"rule only_key");
        try {
            // PLSQL_DMLParser.g:793:5: ( with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? ) -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? ) )
            // PLSQL_DMLParser.g:793:10: with_key ( read_key only_key | check_key option_key ( constraint_key constraint_name )? )
            {
            pushFollow(FOLLOW_with_key_in_subquery_restriction_clause7211);
            with_key560=gPLSQLParser.with_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_with_key.add(with_key560.getTree());

            // PLSQL_DMLParser.g:794:5: ( read_key only_key | check_key option_key ( constraint_key constraint_name )? )
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("read")))) {
                alt190=1;
            }
            else if ( (LA190_0==SQL92_RESERVED_CHECK) ) {
                alt190=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;

            }
            switch (alt190) {
                case 1 :
                    // PLSQL_DMLParser.g:794:10: read_key only_key
                    {
                    pushFollow(FOLLOW_read_key_in_subquery_restriction_clause7222);
                    read_key561=gPLSQLParser.read_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_read_key.add(read_key561.getTree());

                    pushFollow(FOLLOW_only_key_in_subquery_restriction_clause7224);
                    only_key562=gPLSQLParser.only_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_only_key.add(only_key562.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:795:10: check_key option_key ( constraint_key constraint_name )?
                    {
                    pushFollow(FOLLOW_check_key_in_subquery_restriction_clause7235);
                    check_key563=gPLSQLParser.check_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_check_key.add(check_key563.getTree());

                    pushFollow(FOLLOW_option_key_in_subquery_restriction_clause7237);
                    option_key564=gPLSQLParser.option_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_option_key.add(option_key564.getTree());

                    // PLSQL_DMLParser.g:795:31: ( constraint_key constraint_name )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("constraint")))) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // PLSQL_DMLParser.g:795:32: constraint_key constraint_name
                            {
                            pushFollow(FOLLOW_constraint_key_in_subquery_restriction_clause7240);
                            constraint_key565=gPLSQLParser.constraint_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constraint_key.add(constraint_key565.getTree());

                            pushFollow(FOLLOW_constraint_name_in_subquery_restriction_clause7242);
                            constraint_name566=gPLSQLParser.constraint_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constraint_name.add(constraint_name566.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: check_key, with_key, constraint_name, read_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 797:9: -> ^( with_key ( read_key )? ( check_key )? ( constraint_name )? )
            {
                // PLSQL_DMLParser.g:797:12: ^( with_key ( read_key )? ( check_key )? ( constraint_name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_with_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:797:23: ( read_key )?
                if ( stream_read_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_read_key.nextTree());

                }
                stream_read_key.reset();

                // PLSQL_DMLParser.g:797:33: ( check_key )?
                if ( stream_check_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_check_key.nextTree());

                }
                stream_check_key.reset();

                // PLSQL_DMLParser.g:797:44: ( constraint_name )?
                if ( stream_constraint_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_constraint_name.nextTree());

                }
                stream_constraint_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "subquery_restriction_clause"


    public static class sample_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sample_clause"
    // PLSQL_DMLParser.g:800:1: sample_clause : sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )? -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? ) ;
    public final sample_clause_return sample_clause() throws RecognitionException {
        sample_clause_return retval = new sample_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN569=null;
        Token COMMA570=null;
        Token RIGHT_PAREN571=null;
        expression_return e1 =null;

        expression_return e2 =null;

        PLSQLParser_PLSQLKeys.sample_key_return sample_key567 =null;

        PLSQLParser_PLSQLKeys.block_key_return block_key568 =null;

        seed_part_return seed_part572 =null;


        Object LEFT_PAREN569_tree=null;
        Object COMMA570_tree=null;
        Object RIGHT_PAREN571_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_seed_part=new RewriteRuleSubtreeStream(adaptor,"rule seed_part");
        RewriteRuleSubtreeStream stream_sample_key=new RewriteRuleSubtreeStream(adaptor,"rule sample_key");
        RewriteRuleSubtreeStream stream_block_key=new RewriteRuleSubtreeStream(adaptor,"rule block_key");
        try {
            // PLSQL_DMLParser.g:801:5: ( sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )? -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? ) )
            // PLSQL_DMLParser.g:801:10: sample_key ( block_key )? LEFT_PAREN e1= expression ( COMMA e2= expression )? RIGHT_PAREN ( seed_part )?
            {
            pushFollow(FOLLOW_sample_key_in_sample_clause7293);
            sample_key567=gPLSQLParser.sample_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_sample_key.add(sample_key567.getTree());

            // PLSQL_DMLParser.g:801:21: ( block_key )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("block")))) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // PLSQL_DMLParser.g:801:21: block_key
                    {
                    pushFollow(FOLLOW_block_key_in_sample_clause7295);
                    block_key568=gPLSQLParser.block_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_key.add(block_key568.getTree());

                    }
                    break;

            }


            LEFT_PAREN569=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_sample_clause7307); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN569);


            pushFollow(FOLLOW_expression_in_sample_clause7311);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(e1.getTree());

            // PLSQL_DMLParser.g:802:34: ( COMMA e2= expression )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==COMMA) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // PLSQL_DMLParser.g:802:35: COMMA e2= expression
                    {
                    COMMA570=(Token)match(input,COMMA,FOLLOW_COMMA_in_sample_clause7314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA570);


                    pushFollow(FOLLOW_expression_in_sample_clause7318);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(e2.getTree());

                    }
                    break;

            }


            RIGHT_PAREN571=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_sample_clause7322); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN571);


            // PLSQL_DMLParser.g:803:9: ( seed_part )?
            int alt193=2;
            alt193 = dfa193.predict(input);
            switch (alt193) {
                case 1 :
                    // PLSQL_DMLParser.g:803:9: seed_part
                    {
                    pushFollow(FOLLOW_seed_part_in_sample_clause7332);
                    seed_part572=seed_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_seed_part.add(seed_part572.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: sample_key, block_key, seed_part, e1, e2
            // token labels: 
            // rule labels: retval, e1, e2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
            RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

            root_0 = (Object)adaptor.nil();
            // 804:9: -> ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? )
            {
                // PLSQL_DMLParser.g:804:12: ^( sample_key ( block_key )? ^( EXPR $e1) ( ^( EXPR $e2) )? ( seed_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_sample_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:804:25: ( block_key )?
                if ( stream_block_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_block_key.nextTree());

                }
                stream_block_key.reset();

                // PLSQL_DMLParser.g:804:36: ^( EXPR $e1)
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_e1.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:804:48: ( ^( EXPR $e2) )?
                if ( stream_e2.hasNext() ) {
                    // PLSQL_DMLParser.g:804:48: ^( EXPR $e2)
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(EXPR, "EXPR")
                    , root_2);

                    adaptor.addChild(root_2, stream_e2.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_e2.reset();

                // PLSQL_DMLParser.g:804:61: ( seed_part )?
                if ( stream_seed_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_seed_part.nextTree());

                }
                stream_seed_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sample_clause"


    public static class seed_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "seed_part"
    // PLSQL_DMLParser.g:807:1: seed_part : seed_key LEFT_PAREN expression RIGHT_PAREN -> ^( seed_key ^( EXPR expression ) ) ;
    public final seed_part_return seed_part() throws RecognitionException {
        seed_part_return retval = new seed_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN574=null;
        Token RIGHT_PAREN576=null;
        PLSQLParser_PLSQLKeys.seed_key_return seed_key573 =null;

        expression_return expression575 =null;


        Object LEFT_PAREN574_tree=null;
        Object RIGHT_PAREN576_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_seed_key=new RewriteRuleSubtreeStream(adaptor,"rule seed_key");
        try {
            // PLSQL_DMLParser.g:808:5: ( seed_key LEFT_PAREN expression RIGHT_PAREN -> ^( seed_key ^( EXPR expression ) ) )
            // PLSQL_DMLParser.g:808:10: seed_key LEFT_PAREN expression RIGHT_PAREN
            {
            pushFollow(FOLLOW_seed_key_in_seed_part7388);
            seed_key573=gPLSQLParser.seed_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_seed_key.add(seed_key573.getTree());

            LEFT_PAREN574=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_seed_part7390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN574);


            pushFollow(FOLLOW_expression_in_seed_part7392);
            expression575=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression575.getTree());

            RIGHT_PAREN576=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_seed_part7394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN576);


            // AST REWRITE
            // elements: expression, seed_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 809:9: -> ^( seed_key ^( EXPR expression ) )
            {
                // PLSQL_DMLParser.g:809:12: ^( seed_key ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_seed_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:809:23: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "seed_part"


    public static class cursor_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cursor_expression"
    // PLSQL_DMLParser.g:815:1: cursor_expression : cursor_key LEFT_PAREN subquery RIGHT_PAREN ;
    public final cursor_expression_return cursor_expression() throws RecognitionException {
        cursor_expression_return retval = new cursor_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN578=null;
        Token RIGHT_PAREN580=null;
        PLSQLParser_PLSQLKeys.cursor_key_return cursor_key577 =null;

        subquery_return subquery579 =null;


        Object LEFT_PAREN578_tree=null;
        Object RIGHT_PAREN580_tree=null;

        try {
            // PLSQL_DMLParser.g:816:5: ( cursor_key LEFT_PAREN subquery RIGHT_PAREN )
            // PLSQL_DMLParser.g:816:10: cursor_key LEFT_PAREN subquery RIGHT_PAREN
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cursor_key_in_cursor_expression7437);
            cursor_key577=gPLSQLParser.cursor_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_key577.getTree());

            LEFT_PAREN578=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cursor_expression7439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LEFT_PAREN578_tree = 
            (Object)adaptor.create(LEFT_PAREN578)
            ;
            adaptor.addChild(root_0, LEFT_PAREN578_tree);
            }

            pushFollow(FOLLOW_subquery_in_cursor_expression7441);
            subquery579=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery579.getTree());

            RIGHT_PAREN580=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cursor_expression7443); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RIGHT_PAREN580_tree = 
            (Object)adaptor.create(RIGHT_PAREN580)
            ;
            adaptor.addChild(root_0, RIGHT_PAREN580_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cursor_expression"


    public static class expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression_list"
    // PLSQL_DMLParser.g:819:1: expression_list : LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN -> ^( EXPR_LIST ( ^( EXPR expression ) )* ) ;
    public final expression_list_return expression_list() throws RecognitionException {
        expression_list_return retval = new expression_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN581=null;
        Token COMMA583=null;
        Token RIGHT_PAREN585=null;
        expression_return expression582 =null;

        expression_return expression584 =null;


        Object LEFT_PAREN581_tree=null;
        Object COMMA583_tree=null;
        Object RIGHT_PAREN585_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // PLSQL_DMLParser.g:820:5: ( LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN -> ^( EXPR_LIST ( ^( EXPR expression ) )* ) )
            // PLSQL_DMLParser.g:820:10: LEFT_PAREN ( expression )? ( COMMA expression )* RIGHT_PAREN
            {
            LEFT_PAREN581=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_expression_list7463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN581);


            // PLSQL_DMLParser.g:820:21: ( expression )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==APPROXIMATE_NUM_LIT||LA194_0==BINDVAR||(LA194_0 >= CHAR_STRING && LA194_0 <= COLON)||LA194_0==DELIMITED_ID||LA194_0==EXACT_NUM_LIT||LA194_0==INTRODUCER||LA194_0==LEFT_PAREN||(LA194_0 >= MINUS_SIGN && LA194_0 <= NATIONAL_CHAR_STRING_LIT)||LA194_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA194_0==PLUS_SIGN||LA194_0==REGULAR_ID||LA194_0==SQL92_RESERVED_ALL||LA194_0==SQL92_RESERVED_ANY||LA194_0==SQL92_RESERVED_CASE||(LA194_0 >= SQL92_RESERVED_CURSOR && LA194_0 <= SQL92_RESERVED_DATE)||LA194_0==SQL92_RESERVED_DEFAULT||LA194_0==SQL92_RESERVED_DISTINCT||(LA194_0 >= SQL92_RESERVED_EXISTS && LA194_0 <= SQL92_RESERVED_FALSE)||(LA194_0 >= SQL92_RESERVED_NOT && LA194_0 <= SQL92_RESERVED_NULL)||LA194_0==SQL92_RESERVED_PRIOR||LA194_0==SQL92_RESERVED_TRUE||LA194_0==UNSIGNED_INTEGER) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // PLSQL_DMLParser.g:820:21: expression
                    {
                    pushFollow(FOLLOW_expression_in_expression_list7465);
                    expression582=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression582.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:820:33: ( COMMA expression )*
            loop195:
            do {
                int alt195=2;
                int LA195_0 = input.LA(1);

                if ( (LA195_0==COMMA) ) {
                    alt195=1;
                }


                switch (alt195) {
            	case 1 :
            	    // PLSQL_DMLParser.g:820:34: COMMA expression
            	    {
            	    COMMA583=(Token)match(input,COMMA,FOLLOW_COMMA_in_expression_list7469); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA583);


            	    pushFollow(FOLLOW_expression_in_expression_list7471);
            	    expression584=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression584.getTree());

            	    }
            	    break;

            	default :
            	    break loop195;
                }
            } while (true);


            RIGHT_PAREN585=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_expression_list7475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN585);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 821:9: -> ^( EXPR_LIST ( ^( EXPR expression ) )* )
            {
                // PLSQL_DMLParser.g:821:12: ^( EXPR_LIST ( ^( EXPR expression ) )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_LIST, "EXPR_LIST")
                , root_1);

                // PLSQL_DMLParser.g:821:24: ( ^( EXPR expression ) )*
                while ( stream_expression.hasNext() ) {
                    // PLSQL_DMLParser.g:821:24: ^( EXPR expression )
                    {
                    Object root_2 = (Object)adaptor.nil();
                    root_2 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(EXPR, "EXPR")
                    , root_2);

                    adaptor.addChild(root_2, stream_expression.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression_list"


    public static class condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition"
    // PLSQL_DMLParser.g:824:1: condition : expression ;
    public final condition_return condition() throws RecognitionException {
        condition_return retval = new condition_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        expression_return expression586 =null;



        try {
            // PLSQL_DMLParser.g:825:5: ( expression )
            // PLSQL_DMLParser.g:825:11: expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_condition7517);
            expression586=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression586.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "condition"


    public static class condition_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "condition_wrapper"
    // PLSQL_DMLParser.g:828:1: condition_wrapper : expression -> ^( LOGIC_EXPR expression ) ;
    public final condition_wrapper_return condition_wrapper() throws RecognitionException {
        condition_wrapper_return retval = new condition_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        expression_return expression587 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // PLSQL_DMLParser.g:829:5: ( expression -> ^( LOGIC_EXPR expression ) )
            // PLSQL_DMLParser.g:829:10: expression
            {
            pushFollow(FOLLOW_expression_in_condition_wrapper7537);
            expression587=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression587.getTree());

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 830:9: -> ^( LOGIC_EXPR expression )
            {
                // PLSQL_DMLParser.g:830:12: ^( LOGIC_EXPR expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "condition_wrapper"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // PLSQL_DMLParser.g:833:1: expression : ( ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression | logical_and_expression ( or_key ^ logical_and_expression )* );
    public final expression_return expression() throws RecognitionException {
        expression_return retval = new expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        cursor_expression_return cursor_expression588 =null;

        logical_and_expression_return logical_and_expression589 =null;

        PLSQLParser_PLSQLKeys.or_key_return or_key590 =null;

        logical_and_expression_return logical_and_expression591 =null;



        try {
            // PLSQL_DMLParser.g:834:5: ( ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression | logical_and_expression ( or_key ^ logical_and_expression )* )
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==SQL92_RESERVED_CURSOR) && (synpred25_PLSQL_DMLParser())) {
                alt197=1;
            }
            else if ( (LA197_0==APPROXIMATE_NUM_LIT||LA197_0==BINDVAR||(LA197_0 >= CHAR_STRING && LA197_0 <= COLON)||LA197_0==DELIMITED_ID||LA197_0==EXACT_NUM_LIT||LA197_0==INTRODUCER||LA197_0==LEFT_PAREN||(LA197_0 >= MINUS_SIGN && LA197_0 <= NATIONAL_CHAR_STRING_LIT)||LA197_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA197_0==PLUS_SIGN||LA197_0==REGULAR_ID||LA197_0==SQL92_RESERVED_ALL||LA197_0==SQL92_RESERVED_ANY||LA197_0==SQL92_RESERVED_CASE||LA197_0==SQL92_RESERVED_DATE||LA197_0==SQL92_RESERVED_DEFAULT||LA197_0==SQL92_RESERVED_DISTINCT||(LA197_0 >= SQL92_RESERVED_EXISTS && LA197_0 <= SQL92_RESERVED_FALSE)||(LA197_0 >= SQL92_RESERVED_NOT && LA197_0 <= SQL92_RESERVED_NULL)||LA197_0==SQL92_RESERVED_PRIOR||LA197_0==SQL92_RESERVED_TRUE||LA197_0==UNSIGNED_INTEGER) ) {
                alt197=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;

            }
            switch (alt197) {
                case 1 :
                    // PLSQL_DMLParser.g:834:10: ( cursor_key LEFT_PAREN ( select_key | with_key ) )=> cursor_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cursor_expression_in_expression7587);
                    cursor_expression588=cursor_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_expression588.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:835:10: logical_and_expression ( or_key ^ logical_and_expression )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_logical_and_expression_in_expression7598);
                    logical_and_expression589=logical_and_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_and_expression589.getTree());

                    // PLSQL_DMLParser.g:835:33: ( or_key ^ logical_and_expression )*
                    loop196:
                    do {
                        int alt196=2;
                        int LA196_0 = input.LA(1);

                        if ( (LA196_0==SQL92_RESERVED_OR) ) {
                            alt196=1;
                        }


                        switch (alt196) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:835:35: or_key ^ logical_and_expression
                    	    {
                    	    pushFollow(FOLLOW_or_key_in_expression7602);
                    	    or_key590=gPLSQLParser.or_key();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(or_key590.getTree(), root_0);

                    	    pushFollow(FOLLOW_logical_and_expression_in_expression7605);
                    	    logical_and_expression591=logical_and_expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logical_and_expression591.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop196;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class expression_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression_wrapper"
    // PLSQL_DMLParser.g:838:1: expression_wrapper : expression -> ^( EXPR expression ) ;
    public final expression_wrapper_return expression_wrapper() throws RecognitionException {
        expression_wrapper_return retval = new expression_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        expression_return expression592 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // PLSQL_DMLParser.g:839:5: ( expression -> ^( EXPR expression ) )
            // PLSQL_DMLParser.g:839:10: expression
            {
            pushFollow(FOLLOW_expression_in_expression_wrapper7628);
            expression592=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression592.getTree());

            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 840:9: -> ^( EXPR expression )
            {
                // PLSQL_DMLParser.g:840:12: ^( EXPR expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression_wrapper"


    public static class logical_and_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logical_and_expression"
    // PLSQL_DMLParser.g:843:1: logical_and_expression : negated_expression ( and_key ^ negated_expression )* ;
    public final logical_and_expression_return logical_and_expression() throws RecognitionException {
        logical_and_expression_return retval = new logical_and_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        negated_expression_return negated_expression593 =null;

        PLSQLParser_PLSQLKeys.and_key_return and_key594 =null;

        negated_expression_return negated_expression595 =null;



        try {
            // PLSQL_DMLParser.g:844:5: ( negated_expression ( and_key ^ negated_expression )* )
            // PLSQL_DMLParser.g:844:10: negated_expression ( and_key ^ negated_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_negated_expression_in_logical_and_expression7664);
            negated_expression593=negated_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negated_expression593.getTree());

            // PLSQL_DMLParser.g:844:29: ( and_key ^ negated_expression )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==SQL92_RESERVED_AND) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // PLSQL_DMLParser.g:844:31: and_key ^ negated_expression
            	    {
            	    pushFollow(FOLLOW_and_key_in_logical_and_expression7668);
            	    and_key594=gPLSQLParser.and_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(and_key594.getTree(), root_0);

            	    pushFollow(FOLLOW_negated_expression_in_logical_and_expression7671);
            	    negated_expression595=negated_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negated_expression595.getTree());

            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "logical_and_expression"


    public static class negated_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "negated_expression"
    // PLSQL_DMLParser.g:847:1: negated_expression : ( not_key ^ negated_expression | equality_expression );
    public final negated_expression_return negated_expression() throws RecognitionException {
        negated_expression_return retval = new negated_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.not_key_return not_key596 =null;

        negated_expression_return negated_expression597 =null;

        equality_expression_return equality_expression598 =null;



        try {
            // PLSQL_DMLParser.g:848:5: ( not_key ^ negated_expression | equality_expression )
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==SQL92_RESERVED_NOT) ) {
                alt199=1;
            }
            else if ( (LA199_0==APPROXIMATE_NUM_LIT||LA199_0==BINDVAR||(LA199_0 >= CHAR_STRING && LA199_0 <= COLON)||LA199_0==DELIMITED_ID||LA199_0==EXACT_NUM_LIT||LA199_0==INTRODUCER||LA199_0==LEFT_PAREN||(LA199_0 >= MINUS_SIGN && LA199_0 <= NATIONAL_CHAR_STRING_LIT)||LA199_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA199_0==PLUS_SIGN||LA199_0==REGULAR_ID||LA199_0==SQL92_RESERVED_ALL||LA199_0==SQL92_RESERVED_ANY||LA199_0==SQL92_RESERVED_CASE||LA199_0==SQL92_RESERVED_DATE||LA199_0==SQL92_RESERVED_DEFAULT||LA199_0==SQL92_RESERVED_DISTINCT||(LA199_0 >= SQL92_RESERVED_EXISTS && LA199_0 <= SQL92_RESERVED_FALSE)||LA199_0==SQL92_RESERVED_NULL||LA199_0==SQL92_RESERVED_PRIOR||LA199_0==SQL92_RESERVED_TRUE||LA199_0==UNSIGNED_INTEGER) ) {
                alt199=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;

            }
            switch (alt199) {
                case 1 :
                    // PLSQL_DMLParser.g:848:10: not_key ^ negated_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_not_key_in_negated_expression7694);
                    not_key596=gPLSQLParser.not_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(not_key596.getTree(), root_0);

                    pushFollow(FOLLOW_negated_expression_in_negated_expression7697);
                    negated_expression597=negated_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, negated_expression597.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:849:10: equality_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_equality_expression_in_negated_expression7708);
                    equality_expression598=equality_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equality_expression598.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "negated_expression"


    public static class equality_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "equality_expression"
    // PLSQL_DMLParser.g:852:1: equality_expression : ( multiset_expression -> multiset_expression ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )* ;
    public final equality_expression_return equality_expression() throws RecognitionException {
        equality_expression_return retval = new equality_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN611=null;
        Token COMMA614=null;
        Token RIGHT_PAREN616=null;
        multiset_expression_return multiset_expression599 =null;

        PLSQLParser_PLSQLKeys.is_key_return is_key600 =null;

        PLSQLParser_PLSQLKeys.not_key_return not_key601 =null;

        PLSQLParser_PLSQLKeys.null_key_return null_key602 =null;

        PLSQLParser_PLSQLKeys.nan_key_return nan_key603 =null;

        PLSQLParser_PLSQLKeys.present_key_return present_key604 =null;

        PLSQLParser_PLSQLKeys.infinite_key_return infinite_key605 =null;

        PLSQLParser_PLSQLKeys.a_key_return a_key606 =null;

        PLSQLParser_PLSQLKeys.set_key_return set_key607 =null;

        PLSQLParser_PLSQLKeys.empty_key_return empty_key608 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key609 =null;

        PLSQLParser_PLSQLKeys.type_key_return type_key610 =null;

        PLSQLParser_PLSQLKeys.only_key_return only_key612 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec613 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec615 =null;


        Object LEFT_PAREN611_tree=null;
        Object COMMA614_tree=null;
        Object RIGHT_PAREN616_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
        RewriteRuleSubtreeStream stream_a_key=new RewriteRuleSubtreeStream(adaptor,"rule a_key");
        RewriteRuleSubtreeStream stream_infinite_key=new RewriteRuleSubtreeStream(adaptor,"rule infinite_key");
        RewriteRuleSubtreeStream stream_multiset_expression=new RewriteRuleSubtreeStream(adaptor,"rule multiset_expression");
        RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
        RewriteRuleSubtreeStream stream_present_key=new RewriteRuleSubtreeStream(adaptor,"rule present_key");
        RewriteRuleSubtreeStream stream_nan_key=new RewriteRuleSubtreeStream(adaptor,"rule nan_key");
        RewriteRuleSubtreeStream stream_empty_key=new RewriteRuleSubtreeStream(adaptor,"rule empty_key");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        RewriteRuleSubtreeStream stream_only_key=new RewriteRuleSubtreeStream(adaptor,"rule only_key");
        RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");
            boolean isNegated = false;    
        try {
            // PLSQL_DMLParser.g:854:5: ( ( multiset_expression -> multiset_expression ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )* )
            // PLSQL_DMLParser.g:854:10: ( multiset_expression -> multiset_expression ) ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )*
            {
            // PLSQL_DMLParser.g:854:10: ( multiset_expression -> multiset_expression )
            // PLSQL_DMLParser.g:854:11: multiset_expression
            {
            pushFollow(FOLLOW_multiset_expression_in_equality_expression7737);
            multiset_expression599=multiset_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiset_expression.add(multiset_expression599.getTree());

            // AST REWRITE
            // elements: multiset_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 854:31: -> multiset_expression
            {
                adaptor.addChild(root_0, stream_multiset_expression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // PLSQL_DMLParser.g:855:5: ( is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) ) )*
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==SQL92_RESERVED_IS) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // PLSQL_DMLParser.g:855:10: is_key ( not_key )? ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) )
            	    {
            	    pushFollow(FOLLOW_is_key_in_equality_expression7753);
            	    is_key600=gPLSQLParser.is_key();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_is_key.add(is_key600.getTree());

            	    // PLSQL_DMLParser.g:855:17: ( not_key )?
            	    int alt200=2;
            	    int LA200_0 = input.LA(1);

            	    if ( (LA200_0==SQL92_RESERVED_NOT) ) {
            	        alt200=1;
            	    }
            	    switch (alt200) {
            	        case 1 :
            	            // PLSQL_DMLParser.g:855:18: not_key
            	            {
            	            pushFollow(FOLLOW_not_key_in_equality_expression7756);
            	            not_key601=gPLSQLParser.not_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_not_key.add(not_key601.getTree());

            	            if ( state.backtracking==0 ) {isNegated = true;}

            	            }
            	            break;

            	    }


            	    // PLSQL_DMLParser.g:856:9: ( null_key -> {isNegated}? ^( IS_NOT_NULL $equality_expression) -> ^( IS_NULL $equality_expression) | nan_key -> {isNegated}? ^( IS_NOT_NAN $equality_expression) -> ^( IS_NAN $equality_expression) | present_key -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression) -> ^( IS_PRESENT $equality_expression) | infinite_key -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression) -> ^( IS_INFINITE $equality_expression) | a_key set_key -> {isNegated}? ^( IS_NOT_A_SET $equality_expression) -> ^( IS_A_SET $equality_expression) | empty_key -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression) -> ^( IS_EMPTY $equality_expression) | of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ ) -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ ) )
            	    int alt204=7;
            	    int LA204_0 = input.LA(1);

            	    if ( (LA204_0==SQL92_RESERVED_NULL) ) {
            	        alt204=1;
            	    }
            	    else if ( (LA204_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("empty"))||(input.LT(1).getText().equalsIgnoreCase("present"))||(input.LT(1).getText().equalsIgnoreCase("infinite"))||(input.LT(1).getText().equalsIgnoreCase("nan"))||(input.LT(1).getText().equalsIgnoreCase("a"))))) {
            	        int LA204_2 = input.LA(2);

            	        if ( (LA204_2==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("a")))) {
            	            alt204=5;
            	        }
            	        else if ( ((input.LT(1).getText().equalsIgnoreCase("nan"))) ) {
            	            alt204=2;
            	        }
            	        else if ( ((input.LT(1).getText().equalsIgnoreCase("present"))) ) {
            	            alt204=3;
            	        }
            	        else if ( ((input.LT(1).getText().equalsIgnoreCase("infinite"))) ) {
            	            alt204=4;
            	        }
            	        else if ( ((input.LT(1).getText().equalsIgnoreCase("empty"))) ) {
            	            alt204=6;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 204, 2, input);

            	            throw nvae;

            	        }
            	    }
            	    else if ( (LA204_0==SQL92_RESERVED_OF) ) {
            	        alt204=7;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 204, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt204) {
            	        case 1 :
            	            // PLSQL_DMLParser.g:856:14: null_key
            	            {
            	            pushFollow(FOLLOW_null_key_in_equality_expression7775);
            	            null_key602=gPLSQLParser.null_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_null_key.add(null_key602.getTree());

            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 857:17: -> {isNegated}? ^( IS_NOT_NULL $equality_expression)
            	            if (isNegated) {
            	                // PLSQL_DMLParser.g:857:33: ^( IS_NOT_NULL $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_NOT_NULL, "IS_NOT_NULL")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            else // 858:17: -> ^( IS_NULL $equality_expression)
            	            {
            	                // PLSQL_DMLParser.g:858:20: ^( IS_NULL $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_NULL, "IS_NULL")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // PLSQL_DMLParser.g:859:14: nan_key
            	            {
            	            pushFollow(FOLLOW_nan_key_in_equality_expression7842);
            	            nan_key603=gPLSQLParser.nan_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_nan_key.add(nan_key603.getTree());

            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 860:17: -> {isNegated}? ^( IS_NOT_NAN $equality_expression)
            	            if (isNegated) {
            	                // PLSQL_DMLParser.g:860:33: ^( IS_NOT_NAN $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_NOT_NAN, "IS_NOT_NAN")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            else // 861:17: -> ^( IS_NAN $equality_expression)
            	            {
            	                // PLSQL_DMLParser.g:861:20: ^( IS_NAN $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_NAN, "IS_NAN")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // PLSQL_DMLParser.g:862:14: present_key
            	            {
            	            pushFollow(FOLLOW_present_key_in_equality_expression7909);
            	            present_key604=gPLSQLParser.present_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_present_key.add(present_key604.getTree());

            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 863:17: -> {isNegated}? ^( IS_NOT_PRESENT $equality_expression)
            	            if (isNegated) {
            	                // PLSQL_DMLParser.g:863:33: ^( IS_NOT_PRESENT $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_NOT_PRESENT, "IS_NOT_PRESENT")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            else // 864:17: -> ^( IS_PRESENT $equality_expression)
            	            {
            	                // PLSQL_DMLParser.g:864:20: ^( IS_PRESENT $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_PRESENT, "IS_PRESENT")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // PLSQL_DMLParser.g:865:14: infinite_key
            	            {
            	            pushFollow(FOLLOW_infinite_key_in_equality_expression7976);
            	            infinite_key605=gPLSQLParser.infinite_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_infinite_key.add(infinite_key605.getTree());

            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 866:17: -> {isNegated}? ^( IS_NOT_INFINITE $equality_expression)
            	            if (isNegated) {
            	                // PLSQL_DMLParser.g:866:33: ^( IS_NOT_INFINITE $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_NOT_INFINITE, "IS_NOT_INFINITE")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            else // 867:17: -> ^( IS_INFINITE $equality_expression)
            	            {
            	                // PLSQL_DMLParser.g:867:20: ^( IS_INFINITE $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_INFINITE, "IS_INFINITE")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // PLSQL_DMLParser.g:868:14: a_key set_key
            	            {
            	            pushFollow(FOLLOW_a_key_in_equality_expression8043);
            	            a_key606=gPLSQLParser.a_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_a_key.add(a_key606.getTree());

            	            pushFollow(FOLLOW_set_key_in_equality_expression8045);
            	            set_key607=gPLSQLParser.set_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_set_key.add(set_key607.getTree());

            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 869:17: -> {isNegated}? ^( IS_NOT_A_SET $equality_expression)
            	            if (isNegated) {
            	                // PLSQL_DMLParser.g:869:33: ^( IS_NOT_A_SET $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_NOT_A_SET, "IS_NOT_A_SET")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            else // 870:17: -> ^( IS_A_SET $equality_expression)
            	            {
            	                // PLSQL_DMLParser.g:870:20: ^( IS_A_SET $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_A_SET, "IS_A_SET")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 6 :
            	            // PLSQL_DMLParser.g:871:14: empty_key
            	            {
            	            pushFollow(FOLLOW_empty_key_in_equality_expression8112);
            	            empty_key608=gPLSQLParser.empty_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_empty_key.add(empty_key608.getTree());

            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 872:17: -> {isNegated}? ^( IS_NOT_EMPTY $equality_expression)
            	            if (isNegated) {
            	                // PLSQL_DMLParser.g:872:33: ^( IS_NOT_EMPTY $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_NOT_EMPTY, "IS_NOT_EMPTY")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            else // 873:17: -> ^( IS_EMPTY $equality_expression)
            	            {
            	                // PLSQL_DMLParser.g:873:20: ^( IS_EMPTY $equality_expression)
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_EMPTY, "IS_EMPTY")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;
            	        case 7 :
            	            // PLSQL_DMLParser.g:874:14: of_key ( type_key )? LEFT_PAREN ( only_key )? type_spec ( COMMA type_spec )* RIGHT_PAREN
            	            {
            	            pushFollow(FOLLOW_of_key_in_equality_expression8179);
            	            of_key609=gPLSQLParser.of_key();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_of_key.add(of_key609.getTree());

            	            // PLSQL_DMLParser.g:874:21: ( type_key )?
            	            int alt201=2;
            	            int LA201_0 = input.LA(1);

            	            if ( (LA201_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {
            	                alt201=1;
            	            }
            	            switch (alt201) {
            	                case 1 :
            	                    // PLSQL_DMLParser.g:874:21: type_key
            	                    {
            	                    pushFollow(FOLLOW_type_key_in_equality_expression8181);
            	                    type_key610=gPLSQLParser.type_key();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_type_key.add(type_key610.getTree());

            	                    }
            	                    break;

            	            }


            	            LEFT_PAREN611=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_equality_expression8184); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN611);


            	            // PLSQL_DMLParser.g:874:42: ( only_key )?
            	            int alt202=2;
            	            int LA202_0 = input.LA(1);

            	            if ( (LA202_0==REGULAR_ID) ) {
            	                int LA202_1 = input.LA(2);

            	                if ( ((input.LT(1).getText().equalsIgnoreCase("only"))) ) {
            	                    alt202=1;
            	                }
            	            }
            	            switch (alt202) {
            	                case 1 :
            	                    // PLSQL_DMLParser.g:874:42: only_key
            	                    {
            	                    pushFollow(FOLLOW_only_key_in_equality_expression8186);
            	                    only_key612=gPLSQLParser.only_key();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_only_key.add(only_key612.getTree());

            	                    }
            	                    break;

            	            }


            	            pushFollow(FOLLOW_type_spec_in_equality_expression8189);
            	            type_spec613=gPLSQLParser.type_spec();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_type_spec.add(type_spec613.getTree());

            	            // PLSQL_DMLParser.g:874:62: ( COMMA type_spec )*
            	            loop203:
            	            do {
            	                int alt203=2;
            	                int LA203_0 = input.LA(1);

            	                if ( (LA203_0==COMMA) ) {
            	                    alt203=1;
            	                }


            	                switch (alt203) {
            	            	case 1 :
            	            	    // PLSQL_DMLParser.g:874:63: COMMA type_spec
            	            	    {
            	            	    COMMA614=(Token)match(input,COMMA,FOLLOW_COMMA_in_equality_expression8192); if (state.failed) return retval; 
            	            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA614);


            	            	    pushFollow(FOLLOW_type_spec_in_equality_expression8194);
            	            	    type_spec615=gPLSQLParser.type_spec();

            	            	    state._fsp--;
            	            	    if (state.failed) return retval;
            	            	    if ( state.backtracking==0 ) stream_type_spec.add(type_spec615.getTree());

            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop203;
            	                }
            	            } while (true);


            	            RIGHT_PAREN616=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_equality_expression8198); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN616);


            	            // AST REWRITE
            	            // elements: equality_expression, equality_expression, type_spec, type_spec
            	            // token labels: 
            	            // rule labels: retval
            	            // token list labels: 
            	            // rule list labels: 
            	            // wildcard labels: 
            	            if ( state.backtracking==0 ) {

            	            retval.tree = root_0;
            	            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            	            root_0 = (Object)adaptor.nil();
            	            // 875:17: -> {isNegated}? ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ )
            	            if (isNegated) {
            	                // PLSQL_DMLParser.g:875:33: ^( IS_NOT_OF_TYPE $equality_expression ( type_spec )+ )
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_NOT_OF_TYPE, "IS_NOT_OF_TYPE")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                if ( !(stream_type_spec.hasNext()) ) {
            	                    throw new RewriteEarlyExitException();
            	                }
            	                while ( stream_type_spec.hasNext() ) {
            	                    adaptor.addChild(root_1, stream_type_spec.nextTree());

            	                }
            	                stream_type_spec.reset();

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }

            	            else // 876:17: -> ^( IS_OF_TYPE $equality_expression ( type_spec )+ )
            	            {
            	                // PLSQL_DMLParser.g:876:20: ^( IS_OF_TYPE $equality_expression ( type_spec )+ )
            	                {
            	                Object root_1 = (Object)adaptor.nil();
            	                root_1 = (Object)adaptor.becomeRoot(
            	                (Object)adaptor.create(IS_OF_TYPE, "IS_OF_TYPE")
            	                , root_1);

            	                adaptor.addChild(root_1, stream_retval.nextTree());

            	                if ( !(stream_type_spec.hasNext()) ) {
            	                    throw new RewriteEarlyExitException();
            	                }
            	                while ( stream_type_spec.hasNext() ) {
            	                    adaptor.addChild(root_1, stream_type_spec.nextTree());

            	                }
            	                stream_type_spec.reset();

            	                adaptor.addChild(root_0, root_1);
            	                }

            	            }


            	            retval.tree = root_0;
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "equality_expression"


    public static class multiset_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multiset_expression"
    // PLSQL_DMLParser.g:882:1: multiset_expression : ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_expression ^( EXPR concatenation ) ) )? ;
    public final multiset_expression_return multiset_expression() throws RecognitionException {
        multiset_expression_return retval = new multiset_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        relational_expression_return relational_expression617 =null;

        multiset_type_return multiset_type618 =null;

        PLSQLParser_PLSQLKeys.of_key_return of_key619 =null;

        concatenation_return concatenation620 =null;


        RewriteRuleSubtreeStream stream_multiset_type=new RewriteRuleSubtreeStream(adaptor,"rule multiset_type");
        RewriteRuleSubtreeStream stream_relational_expression=new RewriteRuleSubtreeStream(adaptor,"rule relational_expression");
        RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        try {
            // PLSQL_DMLParser.g:883:5: ( ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_expression ^( EXPR concatenation ) ) )? )
            // PLSQL_DMLParser.g:883:10: ( relational_expression -> relational_expression ) ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_expression ^( EXPR concatenation ) ) )?
            {
            // PLSQL_DMLParser.g:883:10: ( relational_expression -> relational_expression )
            // PLSQL_DMLParser.g:883:11: relational_expression
            {
            pushFollow(FOLLOW_relational_expression_in_multiset_expression8295);
            relational_expression617=relational_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relational_expression.add(relational_expression617.getTree());

            // AST REWRITE
            // elements: relational_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 883:33: -> relational_expression
            {
                adaptor.addChild(root_0, stream_relational_expression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // PLSQL_DMLParser.g:884:5: ( multiset_type ( of_key )? concatenation -> ^( multiset_type $multiset_expression ^( EXPR concatenation ) ) )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==REGULAR_ID) ) {
                int LA207_1 = input.LA(2);

                if ( (((input.LT(1).getText().equalsIgnoreCase("submultiset"))||(input.LT(1).getText().equalsIgnoreCase("member")))) ) {
                    alt207=1;
                }
            }
            switch (alt207) {
                case 1 :
                    // PLSQL_DMLParser.g:884:10: multiset_type ( of_key )? concatenation
                    {
                    pushFollow(FOLLOW_multiset_type_in_multiset_expression8311);
                    multiset_type618=multiset_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_multiset_type.add(multiset_type618.getTree());

                    // PLSQL_DMLParser.g:884:24: ( of_key )?
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==SQL92_RESERVED_OF) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            // PLSQL_DMLParser.g:884:24: of_key
                            {
                            pushFollow(FOLLOW_of_key_in_multiset_expression8313);
                            of_key619=gPLSQLParser.of_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_of_key.add(of_key619.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_concatenation_in_multiset_expression8316);
                    concatenation620=concatenation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_concatenation.add(concatenation620.getTree());

                    // AST REWRITE
                    // elements: multiset_expression, multiset_type, concatenation
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 885:9: -> ^( multiset_type $multiset_expression ^( EXPR concatenation ) )
                    {
                        // PLSQL_DMLParser.g:885:12: ^( multiset_type $multiset_expression ^( EXPR concatenation ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_multiset_type.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        // PLSQL_DMLParser.g:885:49: ^( EXPR concatenation )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR, "EXPR")
                        , root_2);

                        adaptor.addChild(root_2, stream_concatenation.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multiset_expression"


    public static class multiset_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multiset_type"
    // PLSQL_DMLParser.g:888:1: multiset_type : ( member_key | submultiset_key );
    public final multiset_type_return multiset_type() throws RecognitionException {
        multiset_type_return retval = new multiset_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.member_key_return member_key621 =null;

        PLSQLParser_PLSQLKeys.submultiset_key_return submultiset_key622 =null;



        try {
            // PLSQL_DMLParser.g:889:5: ( member_key | submultiset_key )
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("submultiset"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
                int LA208_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("member"))) ) {
                    alt208=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("submultiset"))) ) {
                    alt208=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 208, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;

            }
            switch (alt208) {
                case 1 :
                    // PLSQL_DMLParser.g:889:10: member_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_member_key_in_multiset_type8361);
                    member_key621=gPLSQLParser.member_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, member_key621.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:890:10: submultiset_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_submultiset_key_in_multiset_type8372);
                    submultiset_key622=gPLSQLParser.submultiset_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, submultiset_key622.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multiset_type"


    public static class relational_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "relational_expression"
    // PLSQL_DMLParser.g:893:1: relational_expression : compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )* ;
    public final relational_expression_return relational_expression() throws RecognitionException {
        relational_expression_return retval = new relational_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUALS_OP624=null;
        Token LESS_THAN_OP626=null;
        Token GREATER_THAN_OP627=null;
        compound_expression_return compound_expression623 =null;

        PLSQLParser_PLSQLCommons.not_equal_op_return not_equal_op625 =null;

        PLSQLParser_PLSQLCommons.less_than_or_equals_op_return less_than_or_equals_op628 =null;

        PLSQLParser_PLSQLCommons.greater_than_or_equals_op_return greater_than_or_equals_op629 =null;

        compound_expression_return compound_expression630 =null;


        Object EQUALS_OP624_tree=null;
        Object LESS_THAN_OP626_tree=null;
        Object GREATER_THAN_OP627_tree=null;

        try {
            // PLSQL_DMLParser.g:894:5: ( compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )* )
            // PLSQL_DMLParser.g:894:10: compound_expression ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_compound_expression_in_relational_expression8392);
            compound_expression623=compound_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_expression623.getTree());

            // PLSQL_DMLParser.g:895:5: ( ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression )*
            loop210:
            do {
                int alt210=2;
                switch ( input.LA(1) ) {
                case EQUALS_OP:
                    {
                    alt210=1;
                    }
                    break;
                case NOT_EQUAL_OP:
                    {
                    alt210=1;
                    }
                    break;
                case LESS_THAN_OP:
                    {
                    alt210=1;
                    }
                    break;
                case EXCLAMATION_OPERATOR_PART:
                    {
                    alt210=1;
                    }
                    break;
                case CARRET_OPERATOR_PART:
                    {
                    alt210=1;
                    }
                    break;
                case GREATER_THAN_OP:
                    {
                    alt210=1;
                    }
                    break;
                case LESS_THAN_OR_EQUALS_OP:
                    {
                    alt210=1;
                    }
                    break;
                case GREATER_THAN_OR_EQUALS_OP:
                    {
                    alt210=1;
                    }
                    break;

                }

                switch (alt210) {
            	case 1 :
            	    // PLSQL_DMLParser.g:895:7: ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^) compound_expression
            	    {
            	    // PLSQL_DMLParser.g:895:7: ( EQUALS_OP ^| not_equal_op ^| LESS_THAN_OP ^| GREATER_THAN_OP ^| less_than_or_equals_op ^| greater_than_or_equals_op ^)
            	    int alt209=6;
            	    switch ( input.LA(1) ) {
            	    case EQUALS_OP:
            	        {
            	        alt209=1;
            	        }
            	        break;
            	    case CARRET_OPERATOR_PART:
            	    case EXCLAMATION_OPERATOR_PART:
            	    case NOT_EQUAL_OP:
            	        {
            	        alt209=2;
            	        }
            	        break;
            	    case LESS_THAN_OP:
            	        {
            	        switch ( input.LA(2) ) {
            	        case GREATER_THAN_OP:
            	            {
            	            alt209=2;
            	            }
            	            break;
            	        case EQUALS_OP:
            	            {
            	            alt209=5;
            	            }
            	            break;
            	        case APPROXIMATE_NUM_LIT:
            	        case BINDVAR:
            	        case CHAR_STRING:
            	        case CHAR_STRING_PERL:
            	        case COLON:
            	        case DELIMITED_ID:
            	        case EXACT_NUM_LIT:
            	        case INTRODUCER:
            	        case LEFT_PAREN:
            	        case MINUS_SIGN:
            	        case NATIONAL_CHAR_STRING_LIT:
            	        case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            	        case PLUS_SIGN:
            	        case REGULAR_ID:
            	        case SQL92_RESERVED_ALL:
            	        case SQL92_RESERVED_ANY:
            	        case SQL92_RESERVED_CASE:
            	        case SQL92_RESERVED_DATE:
            	        case SQL92_RESERVED_DEFAULT:
            	        case SQL92_RESERVED_DISTINCT:
            	        case SQL92_RESERVED_EXISTS:
            	        case SQL92_RESERVED_FALSE:
            	        case SQL92_RESERVED_NULL:
            	        case SQL92_RESERVED_PRIOR:
            	        case SQL92_RESERVED_TRUE:
            	        case UNSIGNED_INTEGER:
            	            {
            	            alt209=3;
            	            }
            	            break;
            	        default:
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 209, 3, input);

            	            throw nvae;

            	        }

            	        }
            	        break;
            	    case GREATER_THAN_OP:
            	        {
            	        int LA209_4 = input.LA(2);

            	        if ( (LA209_4==EQUALS_OP) ) {
            	            alt209=6;
            	        }
            	        else if ( (LA209_4==APPROXIMATE_NUM_LIT||LA209_4==BINDVAR||(LA209_4 >= CHAR_STRING && LA209_4 <= COLON)||LA209_4==DELIMITED_ID||LA209_4==EXACT_NUM_LIT||LA209_4==INTRODUCER||LA209_4==LEFT_PAREN||(LA209_4 >= MINUS_SIGN && LA209_4 <= NATIONAL_CHAR_STRING_LIT)||LA209_4==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA209_4==PLUS_SIGN||LA209_4==REGULAR_ID||LA209_4==SQL92_RESERVED_ALL||LA209_4==SQL92_RESERVED_ANY||LA209_4==SQL92_RESERVED_CASE||LA209_4==SQL92_RESERVED_DATE||LA209_4==SQL92_RESERVED_DEFAULT||LA209_4==SQL92_RESERVED_DISTINCT||(LA209_4 >= SQL92_RESERVED_EXISTS && LA209_4 <= SQL92_RESERVED_FALSE)||LA209_4==SQL92_RESERVED_NULL||LA209_4==SQL92_RESERVED_PRIOR||LA209_4==SQL92_RESERVED_TRUE||LA209_4==UNSIGNED_INTEGER) ) {
            	            alt209=4;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 209, 4, input);

            	            throw nvae;

            	        }
            	        }
            	        break;
            	    case LESS_THAN_OR_EQUALS_OP:
            	        {
            	        alt209=5;
            	        }
            	        break;
            	    case GREATER_THAN_OR_EQUALS_OP:
            	        {
            	        alt209=6;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 209, 0, input);

            	        throw nvae;

            	    }

            	    switch (alt209) {
            	        case 1 :
            	            // PLSQL_DMLParser.g:895:9: EQUALS_OP ^
            	            {
            	            EQUALS_OP624=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_relational_expression8402); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUALS_OP624_tree = 
            	            (Object)adaptor.create(EQUALS_OP624)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(EQUALS_OP624_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // PLSQL_DMLParser.g:895:22: not_equal_op ^
            	            {
            	            pushFollow(FOLLOW_not_equal_op_in_relational_expression8407);
            	            not_equal_op625=gPLSQLParser.not_equal_op();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(not_equal_op625.getTree(), root_0);

            	            }
            	            break;
            	        case 3 :
            	            // PLSQL_DMLParser.g:895:38: LESS_THAN_OP ^
            	            {
            	            LESS_THAN_OP626=(Token)match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_relational_expression8412); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            LESS_THAN_OP626_tree = 
            	            (Object)adaptor.create(LESS_THAN_OP626)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(LESS_THAN_OP626_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // PLSQL_DMLParser.g:895:54: GREATER_THAN_OP ^
            	            {
            	            GREATER_THAN_OP627=(Token)match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_relational_expression8417); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            GREATER_THAN_OP627_tree = 
            	            (Object)adaptor.create(GREATER_THAN_OP627)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(GREATER_THAN_OP627_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // PLSQL_DMLParser.g:895:73: less_than_or_equals_op ^
            	            {
            	            pushFollow(FOLLOW_less_than_or_equals_op_in_relational_expression8422);
            	            less_than_or_equals_op628=gPLSQLParser.less_than_or_equals_op();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(less_than_or_equals_op628.getTree(), root_0);

            	            }
            	            break;
            	        case 6 :
            	            // PLSQL_DMLParser.g:895:99: greater_than_or_equals_op ^
            	            {
            	            pushFollow(FOLLOW_greater_than_or_equals_op_in_relational_expression8427);
            	            greater_than_or_equals_op629=gPLSQLParser.greater_than_or_equals_op();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(greater_than_or_equals_op629.getTree(), root_0);

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_compound_expression_in_relational_expression8432);
            	    compound_expression630=compound_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_expression630.getTree());

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relational_expression"


    public static class compound_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compound_expression"
    // PLSQL_DMLParser.g:898:1: compound_expression : ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )? ;
    public final compound_expression_return compound_expression() throws RecognitionException {
        compound_expression_return retval = new compound_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        concatenation_return concatenation631 =null;

        PLSQLParser_PLSQLKeys.not_key_return not_key632 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key633 =null;

        in_elements_return in_elements634 =null;

        PLSQLParser_PLSQLKeys.between_key_return between_key635 =null;

        between_elements_return between_elements636 =null;

        like_type_return like_type637 =null;

        concatenation_return concatenation638 =null;

        like_escape_part_return like_escape_part639 =null;


        RewriteRuleSubtreeStream stream_between_elements=new RewriteRuleSubtreeStream(adaptor,"rule between_elements");
        RewriteRuleSubtreeStream stream_like_escape_part=new RewriteRuleSubtreeStream(adaptor,"rule like_escape_part");
        RewriteRuleSubtreeStream stream_between_key=new RewriteRuleSubtreeStream(adaptor,"rule between_key");
        RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
        RewriteRuleSubtreeStream stream_like_type=new RewriteRuleSubtreeStream(adaptor,"rule like_type");
        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_in_elements=new RewriteRuleSubtreeStream(adaptor,"rule in_elements");
            boolean isNegated = false;    
        try {
            // PLSQL_DMLParser.g:900:5: ( ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )? )
            // PLSQL_DMLParser.g:900:10: ( concatenation -> concatenation ) ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )?
            {
            // PLSQL_DMLParser.g:900:10: ( concatenation -> concatenation )
            // PLSQL_DMLParser.g:900:11: concatenation
            {
            pushFollow(FOLLOW_concatenation_in_compound_expression8463);
            concatenation631=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(concatenation631.getTree());

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 900:25: -> concatenation
            {
                adaptor.addChild(root_0, stream_concatenation.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // PLSQL_DMLParser.g:901:5: ( ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) ) )?
            int alt214=2;
            switch ( input.LA(1) ) {
                case SQL92_RESERVED_NOT:
                    {
                    alt214=1;
                    }
                    break;
                case SQL92_RESERVED_IN:
                    {
                    alt214=1;
                    }
                    break;
                case SQL92_RESERVED_BETWEEN:
                    {
                    alt214=1;
                    }
                    break;
                case SQL92_RESERVED_LIKE:
                    {
                    alt214=1;
                    }
                    break;
                case REGULAR_ID:
                    {
                    int LA214_5 = input.LA(2);

                    if ( (((input.LT(1).getText().equalsIgnoreCase("like4"))||(input.LT(1).getText().equalsIgnoreCase("like2"))||(input.LT(1).getText().equalsIgnoreCase("likec")))) ) {
                        alt214=1;
                    }
                    }
                    break;
            }

            switch (alt214) {
                case 1 :
                    // PLSQL_DMLParser.g:901:10: ( not_key )? ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) )
                    {
                    // PLSQL_DMLParser.g:901:10: ( not_key )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==SQL92_RESERVED_NOT) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // PLSQL_DMLParser.g:901:11: not_key
                            {
                            pushFollow(FOLLOW_not_key_in_compound_expression8480);
                            not_key632=gPLSQLParser.not_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_not_key.add(not_key632.getTree());

                            if ( state.backtracking==0 ) {isNegated = true;}

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:902:9: ( in_key in_elements -> {isNegated}? ^( NOT_IN $compound_expression in_elements ) -> ^( in_key $compound_expression in_elements ) | between_key between_elements -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements ) -> ^( between_key $compound_expression between_elements ) | like_type concatenation ( like_escape_part )? -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? ) )
                    int alt213=3;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==SQL92_RESERVED_IN) ) {
                        alt213=1;
                    }
                    else if ( (LA213_0==SQL92_RESERVED_BETWEEN) ) {
                        alt213=2;
                    }
                    else if ( (LA213_0==SQL92_RESERVED_LIKE) ) {
                        alt213=3;
                    }
                    else if ( (LA213_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("like4"))||(input.LT(1).getText().equalsIgnoreCase("like2"))||(input.LT(1).getText().equalsIgnoreCase("likec"))))) {
                        alt213=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 213, 0, input);

                        throw nvae;

                    }
                    switch (alt213) {
                        case 1 :
                            // PLSQL_DMLParser.g:902:14: in_key in_elements
                            {
                            pushFollow(FOLLOW_in_key_in_compound_expression8500);
                            in_key633=gPLSQLParser.in_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_in_key.add(in_key633.getTree());

                            pushFollow(FOLLOW_in_elements_in_compound_expression8502);
                            in_elements634=in_elements();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_in_elements.add(in_elements634.getTree());

                            // AST REWRITE
                            // elements: compound_expression, compound_expression, in_elements, in_elements, in_key
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 903:17: -> {isNegated}? ^( NOT_IN $compound_expression in_elements )
                            if (isNegated) {
                                // PLSQL_DMLParser.g:903:33: ^( NOT_IN $compound_expression in_elements )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(NOT_IN, "NOT_IN")
                                , root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());

                                adaptor.addChild(root_1, stream_in_elements.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            else // 904:17: -> ^( in_key $compound_expression in_elements )
                            {
                                // PLSQL_DMLParser.g:904:20: ^( in_key $compound_expression in_elements )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());

                                adaptor.addChild(root_1, stream_in_elements.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:905:14: between_key between_elements
                            {
                            pushFollow(FOLLOW_between_key_in_compound_expression8573);
                            between_key635=gPLSQLParser.between_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_between_key.add(between_key635.getTree());

                            pushFollow(FOLLOW_between_elements_in_compound_expression8575);
                            between_elements636=between_elements();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_between_elements.add(between_elements636.getTree());

                            // AST REWRITE
                            // elements: between_key, between_elements, compound_expression, compound_expression, between_elements
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 906:17: -> {isNegated}? ^( NOT_BETWEEN $compound_expression between_elements )
                            if (isNegated) {
                                // PLSQL_DMLParser.g:906:33: ^( NOT_BETWEEN $compound_expression between_elements )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN")
                                , root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());

                                adaptor.addChild(root_1, stream_between_elements.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            else // 907:17: -> ^( between_key $compound_expression between_elements )
                            {
                                // PLSQL_DMLParser.g:907:20: ^( between_key $compound_expression between_elements )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(stream_between_key.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());

                                adaptor.addChild(root_1, stream_between_elements.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;
                        case 3 :
                            // PLSQL_DMLParser.g:908:14: like_type concatenation ( like_escape_part )?
                            {
                            pushFollow(FOLLOW_like_type_in_compound_expression8646);
                            like_type637=like_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_like_type.add(like_type637.getTree());

                            pushFollow(FOLLOW_concatenation_in_compound_expression8648);
                            concatenation638=concatenation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation.add(concatenation638.getTree());

                            // PLSQL_DMLParser.g:908:38: ( like_escape_part )?
                            int alt212=2;
                            int LA212_0 = input.LA(1);

                            if ( (LA212_0==REGULAR_ID) ) {
                                int LA212_1 = input.LA(2);

                                if ( ((input.LT(1).getText().equalsIgnoreCase("escape"))) ) {
                                    alt212=1;
                                }
                            }
                            switch (alt212) {
                                case 1 :
                                    // PLSQL_DMLParser.g:908:38: like_escape_part
                                    {
                                    pushFollow(FOLLOW_like_escape_part_in_compound_expression8650);
                                    like_escape_part639=like_escape_part();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_like_escape_part.add(like_escape_part639.getTree());

                                    }
                                    break;

                            }


                            // AST REWRITE
                            // elements: compound_expression, like_type, compound_expression, concatenation, concatenation, like_escape_part, like_escape_part
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {

                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 909:17: -> {isNegated}? ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
                            if (isNegated) {
                                // PLSQL_DMLParser.g:909:33: ^( NOT_LIKE $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(NOT_LIKE, "NOT_LIKE")
                                , root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());

                                // PLSQL_DMLParser.g:909:65: ^( EXPR concatenation )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(EXPR, "EXPR")
                                , root_2);

                                adaptor.addChild(root_2, stream_concatenation.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                // PLSQL_DMLParser.g:909:87: ( like_escape_part )?
                                if ( stream_like_escape_part.hasNext() ) {
                                    adaptor.addChild(root_1, stream_like_escape_part.nextTree());

                                }
                                stream_like_escape_part.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            else // 910:17: -> ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
                            {
                                // PLSQL_DMLParser.g:910:20: ^( like_type $compound_expression ^( EXPR concatenation ) ( like_escape_part )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot(stream_like_type.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());

                                // PLSQL_DMLParser.g:910:54: ^( EXPR concatenation )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(
                                (Object)adaptor.create(EXPR, "EXPR")
                                , root_2);

                                adaptor.addChild(root_2, stream_concatenation.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                // PLSQL_DMLParser.g:910:76: ( like_escape_part )?
                                if ( stream_like_escape_part.hasNext() ) {
                                    adaptor.addChild(root_1, stream_like_escape_part.nextTree());

                                }
                                stream_like_escape_part.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }


                            retval.tree = root_0;
                            }

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "compound_expression"


    public static class like_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "like_type"
    // PLSQL_DMLParser.g:915:1: like_type : ( like_key | likec_key | like2_key | like4_key );
    public final like_type_return like_type() throws RecognitionException {
        like_type_return retval = new like_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.like_key_return like_key640 =null;

        PLSQLParser_PLSQLKeys.likec_key_return likec_key641 =null;

        PLSQLParser_PLSQLKeys.like2_key_return like2_key642 =null;

        PLSQLParser_PLSQLKeys.like4_key_return like4_key643 =null;



        try {
            // PLSQL_DMLParser.g:916:5: ( like_key | likec_key | like2_key | like4_key )
            int alt215=4;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==SQL92_RESERVED_LIKE) ) {
                alt215=1;
            }
            else if ( (LA215_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("like4"))||(input.LT(1).getText().equalsIgnoreCase("like2"))||(input.LT(1).getText().equalsIgnoreCase("likec"))))) {
                int LA215_2 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("likec"))) ) {
                    alt215=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("like2"))) ) {
                    alt215=3;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("like4"))) ) {
                    alt215=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;

            }
            switch (alt215) {
                case 1 :
                    // PLSQL_DMLParser.g:916:10: like_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_like_key_in_like_type8759);
                    like_key640=gPLSQLParser.like_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, like_key640.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:917:10: likec_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_likec_key_in_like_type8770);
                    likec_key641=gPLSQLParser.likec_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, likec_key641.getTree());

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:918:10: like2_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_like2_key_in_like_type8781);
                    like2_key642=gPLSQLParser.like2_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, like2_key642.getTree());

                    }
                    break;
                case 4 :
                    // PLSQL_DMLParser.g:919:10: like4_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_like4_key_in_like_type8792);
                    like4_key643=gPLSQLParser.like4_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, like4_key643.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "like_type"


    public static class like_escape_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "like_escape_part"
    // PLSQL_DMLParser.g:922:1: like_escape_part : escape_key concatenation -> ^( EXPR concatenation ) ;
    public final like_escape_part_return like_escape_part() throws RecognitionException {
        like_escape_part_return retval = new like_escape_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.escape_key_return escape_key644 =null;

        concatenation_return concatenation645 =null;


        RewriteRuleSubtreeStream stream_escape_key=new RewriteRuleSubtreeStream(adaptor,"rule escape_key");
        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        try {
            // PLSQL_DMLParser.g:923:5: ( escape_key concatenation -> ^( EXPR concatenation ) )
            // PLSQL_DMLParser.g:923:10: escape_key concatenation
            {
            pushFollow(FOLLOW_escape_key_in_like_escape_part8812);
            escape_key644=gPLSQLParser.escape_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escape_key.add(escape_key644.getTree());

            pushFollow(FOLLOW_concatenation_in_like_escape_part8814);
            concatenation645=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(concatenation645.getTree());

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 924:9: -> ^( EXPR concatenation )
            {
                // PLSQL_DMLParser.g:924:12: ^( EXPR concatenation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_concatenation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "like_escape_part"


    public static class in_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_elements"
    // PLSQL_DMLParser.g:927:1: in_elements : ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> subquery | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST ( concatenation_wrapper )+ ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) );
    public final in_elements_return in_elements() throws RecognitionException {
        in_elements_return retval = new in_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN646=null;
        Token RIGHT_PAREN648=null;
        Token LEFT_PAREN649=null;
        Token COMMA651=null;
        Token RIGHT_PAREN653=null;
        subquery_return subquery647 =null;

        concatenation_wrapper_return concatenation_wrapper650 =null;

        concatenation_wrapper_return concatenation_wrapper652 =null;

        PLSQLParser_PLSQLCommons.constant_return constant654 =null;

        PLSQLParser_PLSQLCommons.bind_variable_return bind_variable655 =null;

        PLSQLParser_PLSQLCommons.general_element_return general_element656 =null;


        Object LEFT_PAREN646_tree=null;
        Object RIGHT_PAREN648_tree=null;
        Object LEFT_PAREN649_tree=null;
        Object COMMA651_tree=null;
        Object RIGHT_PAREN653_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_concatenation_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule concatenation_wrapper");
        RewriteRuleSubtreeStream stream_bind_variable=new RewriteRuleSubtreeStream(adaptor,"rule bind_variable");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_general_element=new RewriteRuleSubtreeStream(adaptor,"rule general_element");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
            int mode = 0;    
        try {
            // PLSQL_DMLParser.g:929:5: ( ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN -> subquery | LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN -> ^( EXPR_LIST ( concatenation_wrapper )+ ) | constant -> ^( EXPR_LIST constant ) | bind_variable -> ^( EXPR_LIST bind_variable ) | general_element -> ^( EXPR_LIST general_element ) )
            int alt217=5;
            switch ( input.LA(1) ) {
            case LEFT_PAREN:
                {
                int LA217_1 = input.LA(2);

                if ( (synpred26_PLSQL_DMLParser()) ) {
                    alt217=1;
                }
                else if ( (true) ) {
                    alt217=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 217, 1, input);

                    throw nvae;

                }
                }
                break;
            case REGULAR_ID:
                {
                int LA217_2 = input.LA(2);

                if ( (((input.LT(1).getText().equalsIgnoreCase("maxvalue"))||(input.LT(1).getText().equalsIgnoreCase("timestamp"))||(input.LT(1).getText().equalsIgnoreCase("minvalue"))||(input.LT(1).getText().equalsIgnoreCase("sessiontimezone"))||(input.LT(1).getText().equalsIgnoreCase("interval"))||(input.LT(1).getText().equalsIgnoreCase("dbtimezone")))) ) {
                    alt217=3;
                }
                else if ( (true) ) {
                    alt217=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 217, 2, input);

                    throw nvae;

                }
                }
                break;
            case APPROXIMATE_NUM_LIT:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case EXACT_NUM_LIT:
            case NATIONAL_CHAR_STRING_LIT:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
                {
                alt217=3;
                }
                break;
            case BINDVAR:
            case COLON:
                {
                alt217=4;
                }
                break;
            case DELIMITED_ID:
            case INTRODUCER:
                {
                alt217=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;

            }

            switch (alt217) {
                case 1 :
                    // PLSQL_DMLParser.g:929:10: ( ( LEFT_PAREN )+ ( select_key | with_key ) )=> LEFT_PAREN subquery RIGHT_PAREN
                    {
                    LEFT_PAREN646=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_in_elements8872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN646);


                    pushFollow(FOLLOW_subquery_in_in_elements8874);
                    subquery647=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery647.getTree());

                    RIGHT_PAREN648=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_in_elements8876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN648);


                    // AST REWRITE
                    // elements: subquery
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 930:10: -> subquery
                    {
                        adaptor.addChild(root_0, stream_subquery.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:931:10: LEFT_PAREN concatenation_wrapper ( COMMA concatenation_wrapper )* RIGHT_PAREN
                    {
                    LEFT_PAREN649=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_in_elements8900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN649);


                    pushFollow(FOLLOW_concatenation_wrapper_in_in_elements8902);
                    concatenation_wrapper650=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_concatenation_wrapper.add(concatenation_wrapper650.getTree());

                    // PLSQL_DMLParser.g:931:43: ( COMMA concatenation_wrapper )*
                    loop216:
                    do {
                        int alt216=2;
                        int LA216_0 = input.LA(1);

                        if ( (LA216_0==COMMA) ) {
                            alt216=1;
                        }


                        switch (alt216) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:931:44: COMMA concatenation_wrapper
                    	    {
                    	    COMMA651=(Token)match(input,COMMA,FOLLOW_COMMA_in_in_elements8905); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA651);


                    	    pushFollow(FOLLOW_concatenation_wrapper_in_in_elements8907);
                    	    concatenation_wrapper652=concatenation_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_concatenation_wrapper.add(concatenation_wrapper652.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop216;
                        }
                    } while (true);


                    RIGHT_PAREN653=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_in_elements8911); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN653);


                    // AST REWRITE
                    // elements: concatenation_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 932:10: -> ^( EXPR_LIST ( concatenation_wrapper )+ )
                    {
                        // PLSQL_DMLParser.g:932:13: ^( EXPR_LIST ( concatenation_wrapper )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_LIST, "EXPR_LIST")
                        , root_1);

                        if ( !(stream_concatenation_wrapper.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenation_wrapper.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenation_wrapper.nextTree());

                        }
                        stream_concatenation_wrapper.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:933:10: constant
                    {
                    pushFollow(FOLLOW_constant_in_in_elements8940);
                    constant654=gPLSQLParser.constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant654.getTree());

                    // AST REWRITE
                    // elements: constant
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 934:10: -> ^( EXPR_LIST constant )
                    {
                        // PLSQL_DMLParser.g:934:13: ^( EXPR_LIST constant )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_LIST, "EXPR_LIST")
                        , root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // PLSQL_DMLParser.g:935:10: bind_variable
                    {
                    pushFollow(FOLLOW_bind_variable_in_in_elements8968);
                    bind_variable655=gPLSQLParser.bind_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bind_variable.add(bind_variable655.getTree());

                    // AST REWRITE
                    // elements: bind_variable
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 936:10: -> ^( EXPR_LIST bind_variable )
                    {
                        // PLSQL_DMLParser.g:936:13: ^( EXPR_LIST bind_variable )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_LIST, "EXPR_LIST")
                        , root_1);

                        adaptor.addChild(root_1, stream_bind_variable.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // PLSQL_DMLParser.g:937:10: general_element
                    {
                    pushFollow(FOLLOW_general_element_in_in_elements8996);
                    general_element656=gPLSQLParser.general_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_general_element.add(general_element656.getTree());

                    // AST REWRITE
                    // elements: general_element
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 938:10: -> ^( EXPR_LIST general_element )
                    {
                        // PLSQL_DMLParser.g:938:13: ^( EXPR_LIST general_element )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_LIST, "EXPR_LIST")
                        , root_1);

                        adaptor.addChild(root_1, stream_general_element.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_elements"


    public static class between_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "between_elements"
    // PLSQL_DMLParser.g:941:1: between_elements : cn1= concatenation and_key cn2= concatenation -> ^( EXPR $cn1) ^( EXPR $cn2) ;
    public final between_elements_return between_elements() throws RecognitionException {
        between_elements_return retval = new between_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        concatenation_return cn1 =null;

        concatenation_return cn2 =null;

        PLSQLParser_PLSQLKeys.and_key_return and_key657 =null;


        RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");
        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        try {
            // PLSQL_DMLParser.g:942:5: (cn1= concatenation and_key cn2= concatenation -> ^( EXPR $cn1) ^( EXPR $cn2) )
            // PLSQL_DMLParser.g:942:10: cn1= concatenation and_key cn2= concatenation
            {
            pushFollow(FOLLOW_concatenation_in_between_elements9035);
            cn1=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(cn1.getTree());

            pushFollow(FOLLOW_and_key_in_between_elements9037);
            and_key657=gPLSQLParser.and_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_and_key.add(and_key657.getTree());

            pushFollow(FOLLOW_concatenation_in_between_elements9041);
            cn2=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(cn2.getTree());

            // AST REWRITE
            // elements: cn1, cn2
            // token labels: 
            // rule labels: retval, cn2, cn1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_cn2=new RewriteRuleSubtreeStream(adaptor,"rule cn2",cn2!=null?cn2.tree:null);
            RewriteRuleSubtreeStream stream_cn1=new RewriteRuleSubtreeStream(adaptor,"rule cn1",cn1!=null?cn1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 943:9: -> ^( EXPR $cn1) ^( EXPR $cn2)
            {
                // PLSQL_DMLParser.g:943:12: ^( EXPR $cn1)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_cn1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

                // PLSQL_DMLParser.g:943:25: ^( EXPR $cn2)
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_cn2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "between_elements"


    public static class concatenation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "concatenation"
    // PLSQL_DMLParser.g:946:1: concatenation : additive_expression ( concatenation_op ^ additive_expression )* ;
    public final concatenation_return concatenation() throws RecognitionException {
        concatenation_return retval = new concatenation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        additive_expression_return additive_expression658 =null;

        PLSQLParser_PLSQLCommons.concatenation_op_return concatenation_op659 =null;

        additive_expression_return additive_expression660 =null;



        try {
            // PLSQL_DMLParser.g:947:5: ( additive_expression ( concatenation_op ^ additive_expression )* )
            // PLSQL_DMLParser.g:947:10: additive_expression ( concatenation_op ^ additive_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_additive_expression_in_concatenation9086);
            additive_expression658=additive_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression658.getTree());

            // PLSQL_DMLParser.g:947:30: ( concatenation_op ^ additive_expression )*
            loop218:
            do {
                int alt218=2;
                int LA218_0 = input.LA(1);

                if ( (LA218_0==CONCATENATION_OP) ) {
                    alt218=1;
                }
                else if ( (LA218_0==VERTICAL_BAR) ) {
                    alt218=1;
                }


                switch (alt218) {
            	case 1 :
            	    // PLSQL_DMLParser.g:947:31: concatenation_op ^ additive_expression
            	    {
            	    pushFollow(FOLLOW_concatenation_op_in_concatenation9089);
            	    concatenation_op659=gPLSQLParser.concatenation_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(concatenation_op659.getTree(), root_0);

            	    pushFollow(FOLLOW_additive_expression_in_concatenation9092);
            	    additive_expression660=additive_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, additive_expression660.getTree());

            	    }
            	    break;

            	default :
            	    break loop218;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "concatenation"


    public static class concatenation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "concatenation_wrapper"
    // PLSQL_DMLParser.g:950:1: concatenation_wrapper : concatenation -> ^( EXPR concatenation ) ;
    public final concatenation_wrapper_return concatenation_wrapper() throws RecognitionException {
        concatenation_wrapper_return retval = new concatenation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        concatenation_return concatenation661 =null;


        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
        try {
            // PLSQL_DMLParser.g:951:5: ( concatenation -> ^( EXPR concatenation ) )
            // PLSQL_DMLParser.g:951:10: concatenation
            {
            pushFollow(FOLLOW_concatenation_in_concatenation_wrapper9114);
            concatenation661=concatenation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenation.add(concatenation661.getTree());

            // AST REWRITE
            // elements: concatenation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 952:9: -> ^( EXPR concatenation )
            {
                // PLSQL_DMLParser.g:952:12: ^( EXPR concatenation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_concatenation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "concatenation_wrapper"


    public static class additive_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "additive_expression"
    // PLSQL_DMLParser.g:955:1: additive_expression : multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )* ;
    public final additive_expression_return additive_expression() throws RecognitionException {
        additive_expression_return retval = new additive_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token PLUS_SIGN663=null;
        Token MINUS_SIGN664=null;
        multiply_expression_return multiply_expression662 =null;

        multiply_expression_return multiply_expression665 =null;


        Object PLUS_SIGN663_tree=null;
        Object MINUS_SIGN664_tree=null;

        try {
            // PLSQL_DMLParser.g:956:5: ( multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )* )
            // PLSQL_DMLParser.g:956:10: multiply_expression ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_multiply_expression_in_additive_expression9150);
            multiply_expression662=multiply_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiply_expression662.getTree());

            // PLSQL_DMLParser.g:956:30: ( ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression )*
            loop220:
            do {
                int alt220=2;
                int LA220_0 = input.LA(1);

                if ( (LA220_0==PLUS_SIGN) ) {
                    alt220=1;
                }
                else if ( (LA220_0==MINUS_SIGN) ) {
                    alt220=1;
                }


                switch (alt220) {
            	case 1 :
            	    // PLSQL_DMLParser.g:956:32: ( PLUS_SIGN ^| MINUS_SIGN ^) multiply_expression
            	    {
            	    // PLSQL_DMLParser.g:956:32: ( PLUS_SIGN ^| MINUS_SIGN ^)
            	    int alt219=2;
            	    int LA219_0 = input.LA(1);

            	    if ( (LA219_0==PLUS_SIGN) ) {
            	        alt219=1;
            	    }
            	    else if ( (LA219_0==MINUS_SIGN) ) {
            	        alt219=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 219, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt219) {
            	        case 1 :
            	            // PLSQL_DMLParser.g:956:34: PLUS_SIGN ^
            	            {
            	            PLUS_SIGN663=(Token)match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_additive_expression9156); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS_SIGN663_tree = 
            	            (Object)adaptor.create(PLUS_SIGN663)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(PLUS_SIGN663_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // PLSQL_DMLParser.g:956:47: MINUS_SIGN ^
            	            {
            	            MINUS_SIGN664=(Token)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_additive_expression9161); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS_SIGN664_tree = 
            	            (Object)adaptor.create(MINUS_SIGN664)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(MINUS_SIGN664_tree, root_0);
            	            }

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_multiply_expression_in_additive_expression9166);
            	    multiply_expression665=multiply_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiply_expression665.getTree());

            	    }
            	    break;

            	default :
            	    break loop220;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "additive_expression"


    public static class multiply_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multiply_expression"
    // PLSQL_DMLParser.g:959:1: multiply_expression : datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )* ;
    public final multiply_expression_return multiply_expression() throws RecognitionException {
        multiply_expression_return retval = new multiply_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK667=null;
        Token SOLIDUS668=null;
        datetime_expression_return datetime_expression666 =null;

        datetime_expression_return datetime_expression669 =null;


        Object ASTERISK667_tree=null;
        Object SOLIDUS668_tree=null;

        try {
            // PLSQL_DMLParser.g:960:5: ( datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )* )
            // PLSQL_DMLParser.g:960:10: datetime_expression ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_datetime_expression_in_multiply_expression9188);
            datetime_expression666=datetime_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, datetime_expression666.getTree());

            // PLSQL_DMLParser.g:960:30: ( ( ASTERISK ^| SOLIDUS ^) datetime_expression )*
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( (LA222_0==ASTERISK) ) {
                    alt222=1;
                }
                else if ( (LA222_0==SOLIDUS) ) {
                    alt222=1;
                }


                switch (alt222) {
            	case 1 :
            	    // PLSQL_DMLParser.g:960:32: ( ASTERISK ^| SOLIDUS ^) datetime_expression
            	    {
            	    // PLSQL_DMLParser.g:960:32: ( ASTERISK ^| SOLIDUS ^)
            	    int alt221=2;
            	    int LA221_0 = input.LA(1);

            	    if ( (LA221_0==ASTERISK) ) {
            	        alt221=1;
            	    }
            	    else if ( (LA221_0==SOLIDUS) ) {
            	        alt221=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 221, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt221) {
            	        case 1 :
            	            // PLSQL_DMLParser.g:960:34: ASTERISK ^
            	            {
            	            ASTERISK667=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_multiply_expression9194); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ASTERISK667_tree = 
            	            (Object)adaptor.create(ASTERISK667)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(ASTERISK667_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // PLSQL_DMLParser.g:960:46: SOLIDUS ^
            	            {
            	            SOLIDUS668=(Token)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_multiply_expression9199); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SOLIDUS668_tree = 
            	            (Object)adaptor.create(SOLIDUS668)
            	            ;
            	            root_0 = (Object)adaptor.becomeRoot(SOLIDUS668_tree, root_0);
            	            }

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_datetime_expression_in_multiply_expression9204);
            	    datetime_expression669=datetime_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, datetime_expression669.getTree());

            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multiply_expression"


    public static class datetime_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "datetime_expression"
    // PLSQL_DMLParser.g:963:1: datetime_expression : ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )? ;
    public final datetime_expression_return datetime_expression() throws RecognitionException {
        datetime_expression_return retval = new datetime_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        model_expression_return model_expression670 =null;

        PLSQLParser_PLSQLKeys.at_key_return at_key671 =null;

        PLSQLParser_PLSQLKeys.local_key_return local_key672 =null;

        PLSQLParser_PLSQLKeys.time_key_return time_key673 =null;

        PLSQLParser_PLSQLKeys.zone_key_return zone_key674 =null;

        concatenation_wrapper_return concatenation_wrapper675 =null;

        interval_expression_return interval_expression676 =null;


        RewriteRuleSubtreeStream stream_at_key=new RewriteRuleSubtreeStream(adaptor,"rule at_key");
        RewriteRuleSubtreeStream stream_concatenation_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule concatenation_wrapper");
        RewriteRuleSubtreeStream stream_model_expression=new RewriteRuleSubtreeStream(adaptor,"rule model_expression");
        RewriteRuleSubtreeStream stream_local_key=new RewriteRuleSubtreeStream(adaptor,"rule local_key");
        RewriteRuleSubtreeStream stream_zone_key=new RewriteRuleSubtreeStream(adaptor,"rule zone_key");
        RewriteRuleSubtreeStream stream_interval_expression=new RewriteRuleSubtreeStream(adaptor,"rule interval_expression");
        RewriteRuleSubtreeStream stream_time_key=new RewriteRuleSubtreeStream(adaptor,"rule time_key");
        try {
            // PLSQL_DMLParser.g:964:5: ( ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )? )
            // PLSQL_DMLParser.g:964:10: ( model_expression -> model_expression ) ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )?
            {
            // PLSQL_DMLParser.g:964:10: ( model_expression -> model_expression )
            // PLSQL_DMLParser.g:964:11: model_expression
            {
            pushFollow(FOLLOW_model_expression_in_datetime_expression9227);
            model_expression670=model_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_model_expression.add(model_expression670.getTree());

            // AST REWRITE
            // elements: model_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 964:28: -> model_expression
            {
                adaptor.addChild(root_0, stream_model_expression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // PLSQL_DMLParser.g:965:5: ( at_key ( local_key | time_key zone_key concatenation_wrapper ) -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) ) | ( interval_expression )=> interval_expression -> ^( DATETIME_OP $datetime_expression interval_expression ) )?
            int alt224=3;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==REGULAR_ID) ) {
                int LA224_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("at"))) ) {
                    alt224=1;
                }
                else if ( (((synpred27_PLSQL_DMLParser()&&synpred27_PLSQL_DMLParser())&&((input.LT(1).getText().equalsIgnoreCase("day"))||(input.LT(1).getText().equalsIgnoreCase("year"))))) ) {
                    alt224=2;
                }
            }
            switch (alt224) {
                case 1 :
                    // PLSQL_DMLParser.g:965:10: at_key ( local_key | time_key zone_key concatenation_wrapper )
                    {
                    pushFollow(FOLLOW_at_key_in_datetime_expression9243);
                    at_key671=gPLSQLParser.at_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_at_key.add(at_key671.getTree());

                    // PLSQL_DMLParser.g:965:17: ( local_key | time_key zone_key concatenation_wrapper )
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==REGULAR_ID) ) {
                        int LA223_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("local"))) ) {
                            alt223=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("time"))) ) {
                            alt223=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 223, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 223, 0, input);

                        throw nvae;

                    }
                    switch (alt223) {
                        case 1 :
                            // PLSQL_DMLParser.g:965:18: local_key
                            {
                            pushFollow(FOLLOW_local_key_in_datetime_expression9246);
                            local_key672=gPLSQLParser.local_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_local_key.add(local_key672.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:965:28: time_key zone_key concatenation_wrapper
                            {
                            pushFollow(FOLLOW_time_key_in_datetime_expression9248);
                            time_key673=gPLSQLParser.time_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_time_key.add(time_key673.getTree());

                            pushFollow(FOLLOW_zone_key_in_datetime_expression9250);
                            zone_key674=gPLSQLParser.zone_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_zone_key.add(zone_key674.getTree());

                            pushFollow(FOLLOW_concatenation_wrapper_in_datetime_expression9252);
                            concatenation_wrapper675=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation_wrapper.add(concatenation_wrapper675.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: local_key, time_key, datetime_expression, at_key, concatenation_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 966:13: -> ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) )
                    {
                        // PLSQL_DMLParser.g:966:16: ^( DATETIME_OP $datetime_expression ^( at_key ( local_key )? ( time_key )? concatenation_wrapper ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DATETIME_OP, "DATETIME_OP")
                        , root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        // PLSQL_DMLParser.g:966:51: ^( at_key ( local_key )? ( time_key )? concatenation_wrapper )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot(stream_at_key.nextNode(), root_2);

                        // PLSQL_DMLParser.g:966:60: ( local_key )?
                        if ( stream_local_key.hasNext() ) {
                            adaptor.addChild(root_2, stream_local_key.nextTree());

                        }
                        stream_local_key.reset();

                        // PLSQL_DMLParser.g:966:71: ( time_key )?
                        if ( stream_time_key.hasNext() ) {
                            adaptor.addChild(root_2, stream_time_key.nextTree());

                        }
                        stream_time_key.reset();

                        adaptor.addChild(root_2, stream_concatenation_wrapper.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:967:10: ( interval_expression )=> interval_expression
                    {
                    pushFollow(FOLLOW_interval_expression_in_datetime_expression9302);
                    interval_expression676=interval_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interval_expression.add(interval_expression676.getTree());

                    // AST REWRITE
                    // elements: interval_expression, datetime_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 968:13: -> ^( DATETIME_OP $datetime_expression interval_expression )
                    {
                        // PLSQL_DMLParser.g:968:16: ^( DATETIME_OP $datetime_expression interval_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DATETIME_OP, "DATETIME_OP")
                        , root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_1, stream_interval_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "datetime_expression"


    public static class interval_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interval_expression"
    // PLSQL_DMLParser.g:972:1: interval_expression : ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? -> ^( day_key second_key ( $cn1)? ( $cn2)? ) | year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key -> ^( year_key month_key concatenation_wrapper ) );
    public final interval_expression_return interval_expression() throws RecognitionException {
        interval_expression_return retval = new interval_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN678=null;
        Token RIGHT_PAREN679=null;
        Token LEFT_PAREN682=null;
        Token RIGHT_PAREN683=null;
        Token LEFT_PAREN685=null;
        Token RIGHT_PAREN687=null;
        concatenation_wrapper_return cn1 =null;

        concatenation_wrapper_return cn2 =null;

        PLSQLParser_PLSQLKeys.day_key_return day_key677 =null;

        PLSQLParser_PLSQLKeys.to_key_return to_key680 =null;

        PLSQLParser_PLSQLKeys.second_key_return second_key681 =null;

        PLSQLParser_PLSQLKeys.year_key_return year_key684 =null;

        concatenation_wrapper_return concatenation_wrapper686 =null;

        PLSQLParser_PLSQLKeys.to_key_return to_key688 =null;

        PLSQLParser_PLSQLKeys.month_key_return month_key689 =null;


        Object LEFT_PAREN678_tree=null;
        Object RIGHT_PAREN679_tree=null;
        Object LEFT_PAREN682_tree=null;
        Object RIGHT_PAREN683_tree=null;
        Object LEFT_PAREN685_tree=null;
        Object RIGHT_PAREN687_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleSubtreeStream stream_year_key=new RewriteRuleSubtreeStream(adaptor,"rule year_key");
        RewriteRuleSubtreeStream stream_day_key=new RewriteRuleSubtreeStream(adaptor,"rule day_key");
        RewriteRuleSubtreeStream stream_second_key=new RewriteRuleSubtreeStream(adaptor,"rule second_key");
        RewriteRuleSubtreeStream stream_concatenation_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule concatenation_wrapper");
        RewriteRuleSubtreeStream stream_to_key=new RewriteRuleSubtreeStream(adaptor,"rule to_key");
        RewriteRuleSubtreeStream stream_month_key=new RewriteRuleSubtreeStream(adaptor,"rule month_key");
        try {
            // PLSQL_DMLParser.g:973:5: ( day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )? -> ^( day_key second_key ( $cn1)? ( $cn2)? ) | year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key -> ^( year_key month_key concatenation_wrapper ) )
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("day"))||(input.LT(1).getText().equalsIgnoreCase("year"))))) {
                int LA228_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("day"))) ) {
                    alt228=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("year"))) ) {
                    alt228=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;

            }
            switch (alt228) {
                case 1 :
                    // PLSQL_DMLParser.g:973:10: day_key ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )? to_key second_key ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
                    {
                    pushFollow(FOLLOW_day_key_in_interval_expression9352);
                    day_key677=gPLSQLParser.day_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_day_key.add(day_key677.getTree());

                    // PLSQL_DMLParser.g:973:21: ( LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN )?
                    int alt225=2;
                    int LA225_0 = input.LA(1);

                    if ( (LA225_0==LEFT_PAREN) ) {
                        alt225=1;
                    }
                    switch (alt225) {
                        case 1 :
                            // PLSQL_DMLParser.g:973:22: LEFT_PAREN cn1= concatenation_wrapper RIGHT_PAREN
                            {
                            LEFT_PAREN678=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_interval_expression9358); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN678);


                            pushFollow(FOLLOW_concatenation_wrapper_in_interval_expression9362);
                            cn1=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation_wrapper.add(cn1.getTree());

                            RIGHT_PAREN679=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_interval_expression9364); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN679);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_to_key_in_interval_expression9368);
                    to_key680=gPLSQLParser.to_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_to_key.add(to_key680.getTree());

                    pushFollow(FOLLOW_second_key_in_interval_expression9370);
                    second_key681=gPLSQLParser.second_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_second_key.add(second_key681.getTree());

                    // PLSQL_DMLParser.g:973:91: ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?
                    int alt226=2;
                    alt226 = dfa226.predict(input);
                    switch (alt226) {
                        case 1 :
                            // PLSQL_DMLParser.g:973:92: LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN
                            {
                            LEFT_PAREN682=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_interval_expression9373); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN682);


                            pushFollow(FOLLOW_concatenation_wrapper_in_interval_expression9377);
                            cn2=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation_wrapper.add(cn2.getTree());

                            RIGHT_PAREN683=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_interval_expression9379); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN683);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: cn2, second_key, day_key, cn1
                    // token labels: 
                    // rule labels: retval, cn2, cn1
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_cn2=new RewriteRuleSubtreeStream(adaptor,"rule cn2",cn2!=null?cn2.tree:null);
                    RewriteRuleSubtreeStream stream_cn1=new RewriteRuleSubtreeStream(adaptor,"rule cn1",cn1!=null?cn1.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 974:9: -> ^( day_key second_key ( $cn1)? ( $cn2)? )
                    {
                        // PLSQL_DMLParser.g:974:12: ^( day_key second_key ( $cn1)? ( $cn2)? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_day_key.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_second_key.nextTree());

                        // PLSQL_DMLParser.g:974:34: ( $cn1)?
                        if ( stream_cn1.hasNext() ) {
                            adaptor.addChild(root_1, stream_cn1.nextTree());

                        }
                        stream_cn1.reset();

                        // PLSQL_DMLParser.g:974:40: ( $cn2)?
                        if ( stream_cn2.hasNext() ) {
                            adaptor.addChild(root_1, stream_cn2.nextTree());

                        }
                        stream_cn2.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:975:10: year_key ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )? to_key month_key
                    {
                    pushFollow(FOLLOW_year_key_in_interval_expression9416);
                    year_key684=gPLSQLParser.year_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_year_key.add(year_key684.getTree());

                    // PLSQL_DMLParser.g:975:19: ( LEFT_PAREN concatenation_wrapper RIGHT_PAREN )?
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==LEFT_PAREN) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            // PLSQL_DMLParser.g:975:20: LEFT_PAREN concatenation_wrapper RIGHT_PAREN
                            {
                            LEFT_PAREN685=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_interval_expression9419); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN685);


                            pushFollow(FOLLOW_concatenation_wrapper_in_interval_expression9421);
                            concatenation_wrapper686=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation_wrapper.add(concatenation_wrapper686.getTree());

                            RIGHT_PAREN687=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_interval_expression9423); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN687);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_to_key_in_interval_expression9427);
                    to_key688=gPLSQLParser.to_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_to_key.add(to_key688.getTree());

                    pushFollow(FOLLOW_month_key_in_interval_expression9429);
                    month_key689=gPLSQLParser.month_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_month_key.add(month_key689.getTree());

                    // AST REWRITE
                    // elements: year_key, month_key, concatenation_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 976:9: -> ^( year_key month_key concatenation_wrapper )
                    {
                        // PLSQL_DMLParser.g:976:12: ^( year_key month_key concatenation_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_year_key.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_month_key.nextTree());

                        adaptor.addChild(root_1, stream_concatenation_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interval_expression"


    public static class model_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_expression"
    // PLSQL_DMLParser.g:979:1: model_expression : ( unary_expression -> unary_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )? ;
    public final model_expression_return model_expression() throws RecognitionException {
        model_expression_return retval = new model_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_BRACKET691=null;
        Token RIGHT_BRACKET693=null;
        unary_expression_return unary_expression690 =null;

        model_expression_element_return model_expression_element692 =null;


        Object LEFT_BRACKET691_tree=null;
        Object RIGHT_BRACKET693_tree=null;
        RewriteRuleTokenStream stream_LEFT_BRACKET=new RewriteRuleTokenStream(adaptor,"token LEFT_BRACKET");
        RewriteRuleTokenStream stream_RIGHT_BRACKET=new RewriteRuleTokenStream(adaptor,"token RIGHT_BRACKET");
        RewriteRuleSubtreeStream stream_unary_expression=new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
        RewriteRuleSubtreeStream stream_model_expression_element=new RewriteRuleSubtreeStream(adaptor,"rule model_expression_element");
        try {
            // PLSQL_DMLParser.g:980:5: ( ( unary_expression -> unary_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )? )
            // PLSQL_DMLParser.g:980:10: ( unary_expression -> unary_expression ) ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )?
            {
            // PLSQL_DMLParser.g:980:10: ( unary_expression -> unary_expression )
            // PLSQL_DMLParser.g:980:11: unary_expression
            {
            pushFollow(FOLLOW_unary_expression_in_model_expression9468);
            unary_expression690=unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unary_expression.add(unary_expression690.getTree());

            // AST REWRITE
            // elements: unary_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 980:28: -> unary_expression
            {
                adaptor.addChild(root_0, stream_unary_expression.nextTree());

            }


            retval.tree = root_0;
            }

            }


            // PLSQL_DMLParser.g:981:9: ( LEFT_BRACKET model_expression_element RIGHT_BRACKET -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element ) )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==LEFT_BRACKET) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // PLSQL_DMLParser.g:981:10: LEFT_BRACKET model_expression_element RIGHT_BRACKET
                    {
                    LEFT_BRACKET691=(Token)match(input,LEFT_BRACKET,FOLLOW_LEFT_BRACKET_in_model_expression9484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_BRACKET.add(LEFT_BRACKET691);


                    pushFollow(FOLLOW_model_expression_element_in_model_expression9486);
                    model_expression_element692=model_expression_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_model_expression_element.add(model_expression_element692.getTree());

                    RIGHT_BRACKET693=(Token)match(input,RIGHT_BRACKET,FOLLOW_RIGHT_BRACKET_in_model_expression9488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_BRACKET.add(RIGHT_BRACKET693);


                    // AST REWRITE
                    // elements: model_expression_element, model_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 982:13: -> ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element )
                    {
                        // PLSQL_DMLParser.g:982:16: ^( MODEL_EXPRESSION[$LEFT_BRACKET] $model_expression model_expression_element )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(MODEL_EXPRESSION, LEFT_BRACKET691)
                        , root_1);

                        adaptor.addChild(root_1, stream_retval.nextTree());

                        adaptor.addChild(root_1, stream_model_expression_element.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_expression"


    public static class model_expression_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "model_expression_element"
    // PLSQL_DMLParser.g:985:1: model_expression_element : ( ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )* | single_column_for_loop ( COMMA ! single_column_for_loop )* | multi_column_for_loop );
    public final model_expression_element_return model_expression_element() throws RecognitionException {
        model_expression_element_return retval = new model_expression_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA696=null;
        Token COMMA700=null;
        PLSQLParser_PLSQLKeys.any_key_return any_key694 =null;

        condition_wrapper_return condition_wrapper695 =null;

        PLSQLParser_PLSQLKeys.any_key_return any_key697 =null;

        condition_wrapper_return condition_wrapper698 =null;

        single_column_for_loop_return single_column_for_loop699 =null;

        single_column_for_loop_return single_column_for_loop701 =null;

        multi_column_for_loop_return multi_column_for_loop702 =null;


        Object COMMA696_tree=null;
        Object COMMA700_tree=null;

        try {
            // PLSQL_DMLParser.g:986:5: ( ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )* | single_column_for_loop ( COMMA ! single_column_for_loop )* | multi_column_for_loop )
            int alt234=3;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==APPROXIMATE_NUM_LIT||LA234_0==BINDVAR||(LA234_0 >= CHAR_STRING && LA234_0 <= COLON)||LA234_0==DELIMITED_ID||LA234_0==EXACT_NUM_LIT||LA234_0==INTRODUCER||LA234_0==LEFT_PAREN||(LA234_0 >= MINUS_SIGN && LA234_0 <= NATIONAL_CHAR_STRING_LIT)||LA234_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA234_0==PLUS_SIGN||LA234_0==REGULAR_ID||LA234_0==SQL92_RESERVED_ALL||LA234_0==SQL92_RESERVED_ANY||LA234_0==SQL92_RESERVED_CASE||(LA234_0 >= SQL92_RESERVED_CURSOR && LA234_0 <= SQL92_RESERVED_DATE)||LA234_0==SQL92_RESERVED_DEFAULT||LA234_0==SQL92_RESERVED_DISTINCT||(LA234_0 >= SQL92_RESERVED_EXISTS && LA234_0 <= SQL92_RESERVED_FALSE)||(LA234_0 >= SQL92_RESERVED_NOT && LA234_0 <= SQL92_RESERVED_NULL)||LA234_0==SQL92_RESERVED_PRIOR||LA234_0==SQL92_RESERVED_TRUE||LA234_0==UNSIGNED_INTEGER) ) {
                alt234=1;
            }
            else if ( (LA234_0==SQL92_RESERVED_FOR) ) {
                int LA234_2 = input.LA(2);

                if ( (LA234_2==DELIMITED_ID||LA234_2==INTRODUCER||LA234_2==REGULAR_ID) ) {
                    alt234=2;
                }
                else if ( (LA234_2==LEFT_PAREN) ) {
                    alt234=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 234, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;

            }
            switch (alt234) {
                case 1 :
                    // PLSQL_DMLParser.g:986:10: ( ( any_key )=> any_key | condition_wrapper ) ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )*
                    {
                    root_0 = (Object)adaptor.nil();


                    // PLSQL_DMLParser.g:986:10: ( ( any_key )=> any_key | condition_wrapper )
                    int alt230=2;
                    int LA230_0 = input.LA(1);

                    if ( (LA230_0==SQL92_RESERVED_ANY) ) {
                        int LA230_1 = input.LA(2);

                        if ( (LA230_1==COMMA) && (synpred28_PLSQL_DMLParser())) {
                            alt230=1;
                        }
                        else if ( (LA230_1==RIGHT_BRACKET) && (synpred28_PLSQL_DMLParser())) {
                            alt230=1;
                        }
                        else if ( (LA230_1==LEFT_PAREN) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA230_0==APPROXIMATE_NUM_LIT||LA230_0==BINDVAR||(LA230_0 >= CHAR_STRING && LA230_0 <= COLON)||LA230_0==DELIMITED_ID||LA230_0==EXACT_NUM_LIT||LA230_0==INTRODUCER||LA230_0==LEFT_PAREN||(LA230_0 >= MINUS_SIGN && LA230_0 <= NATIONAL_CHAR_STRING_LIT)||LA230_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA230_0==PLUS_SIGN||LA230_0==REGULAR_ID||LA230_0==SQL92_RESERVED_ALL||LA230_0==SQL92_RESERVED_CASE||(LA230_0 >= SQL92_RESERVED_CURSOR && LA230_0 <= SQL92_RESERVED_DATE)||LA230_0==SQL92_RESERVED_DEFAULT||LA230_0==SQL92_RESERVED_DISTINCT||(LA230_0 >= SQL92_RESERVED_EXISTS && LA230_0 <= SQL92_RESERVED_FALSE)||(LA230_0 >= SQL92_RESERVED_NOT && LA230_0 <= SQL92_RESERVED_NULL)||LA230_0==SQL92_RESERVED_PRIOR||LA230_0==SQL92_RESERVED_TRUE||LA230_0==UNSIGNED_INTEGER) ) {
                        alt230=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 230, 0, input);

                        throw nvae;

                    }
                    switch (alt230) {
                        case 1 :
                            // PLSQL_DMLParser.g:986:11: ( any_key )=> any_key
                            {
                            pushFollow(FOLLOW_any_key_in_model_expression_element9540);
                            any_key694=gPLSQLParser.any_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, any_key694.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:986:31: condition_wrapper
                            {
                            pushFollow(FOLLOW_condition_wrapper_in_model_expression_element9542);
                            condition_wrapper695=condition_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_wrapper695.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:986:50: ( COMMA ! ( ( any_key )=> any_key | condition_wrapper ) )*
                    loop232:
                    do {
                        int alt232=2;
                        int LA232_0 = input.LA(1);

                        if ( (LA232_0==COMMA) ) {
                            alt232=1;
                        }


                        switch (alt232) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:986:51: COMMA ! ( ( any_key )=> any_key | condition_wrapper )
                    	    {
                    	    COMMA696=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_expression_element9546); if (state.failed) return retval;

                    	    // PLSQL_DMLParser.g:986:58: ( ( any_key )=> any_key | condition_wrapper )
                    	    int alt231=2;
                    	    int LA231_0 = input.LA(1);

                    	    if ( (LA231_0==SQL92_RESERVED_ANY) ) {
                    	        int LA231_1 = input.LA(2);

                    	        if ( (LA231_1==RIGHT_BRACKET) && (synpred29_PLSQL_DMLParser())) {
                    	            alt231=1;
                    	        }
                    	        else if ( (LA231_1==COMMA) && (synpred29_PLSQL_DMLParser())) {
                    	            alt231=1;
                    	        }
                    	        else if ( (LA231_1==LEFT_PAREN) ) {
                    	            alt231=2;
                    	        }
                    	        else {
                    	            if (state.backtracking>0) {state.failed=true; return retval;}
                    	            NoViableAltException nvae =
                    	                new NoViableAltException("", 231, 1, input);

                    	            throw nvae;

                    	        }
                    	    }
                    	    else if ( (LA231_0==APPROXIMATE_NUM_LIT||LA231_0==BINDVAR||(LA231_0 >= CHAR_STRING && LA231_0 <= COLON)||LA231_0==DELIMITED_ID||LA231_0==EXACT_NUM_LIT||LA231_0==INTRODUCER||LA231_0==LEFT_PAREN||(LA231_0 >= MINUS_SIGN && LA231_0 <= NATIONAL_CHAR_STRING_LIT)||LA231_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA231_0==PLUS_SIGN||LA231_0==REGULAR_ID||LA231_0==SQL92_RESERVED_ALL||LA231_0==SQL92_RESERVED_CASE||(LA231_0 >= SQL92_RESERVED_CURSOR && LA231_0 <= SQL92_RESERVED_DATE)||LA231_0==SQL92_RESERVED_DEFAULT||LA231_0==SQL92_RESERVED_DISTINCT||(LA231_0 >= SQL92_RESERVED_EXISTS && LA231_0 <= SQL92_RESERVED_FALSE)||(LA231_0 >= SQL92_RESERVED_NOT && LA231_0 <= SQL92_RESERVED_NULL)||LA231_0==SQL92_RESERVED_PRIOR||LA231_0==SQL92_RESERVED_TRUE||LA231_0==UNSIGNED_INTEGER) ) {
                    	        alt231=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 231, 0, input);

                    	        throw nvae;

                    	    }
                    	    switch (alt231) {
                    	        case 1 :
                    	            // PLSQL_DMLParser.g:986:59: ( any_key )=> any_key
                    	            {
                    	            pushFollow(FOLLOW_any_key_in_model_expression_element9555);
                    	            any_key697=gPLSQLParser.any_key();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, any_key697.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // PLSQL_DMLParser.g:986:79: condition_wrapper
                    	            {
                    	            pushFollow(FOLLOW_condition_wrapper_in_model_expression_element9557);
                    	            condition_wrapper698=condition_wrapper();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_wrapper698.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop232;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:987:10: single_column_for_loop ( COMMA ! single_column_for_loop )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_column_for_loop_in_model_expression_element9571);
                    single_column_for_loop699=single_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_column_for_loop699.getTree());

                    // PLSQL_DMLParser.g:987:33: ( COMMA ! single_column_for_loop )*
                    loop233:
                    do {
                        int alt233=2;
                        int LA233_0 = input.LA(1);

                        if ( (LA233_0==COMMA) ) {
                            alt233=1;
                        }


                        switch (alt233) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:987:34: COMMA ! single_column_for_loop
                    	    {
                    	    COMMA700=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_expression_element9574); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_single_column_for_loop_in_model_expression_element9577);
                    	    single_column_for_loop701=single_column_for_loop();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_column_for_loop701.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop233;
                        }
                    } while (true);


                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:988:10: multi_column_for_loop
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_column_for_loop_in_model_expression_element9590);
                    multi_column_for_loop702=multi_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_column_for_loop702.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "model_expression_element"


    public static class single_column_for_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_column_for_loop"
    // PLSQL_DMLParser.g:991:1: single_column_for_loop : for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression ) -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) ) -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? ) ;
    public final single_column_for_loop_return single_column_for_loop() throws RecognitionException {
        single_column_for_loop_return retval = new single_column_for_loop_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        expression_return ex1 =null;

        expression_return ex2 =null;

        expression_return ex3 =null;

        PLSQLParser_PLSQLKeys.for_key_return for_key703 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name704 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key705 =null;

        expression_list_return expression_list706 =null;

        for_like_part_return for_like_part707 =null;

        PLSQLParser_PLSQLKeys.from_key_return from_key708 =null;

        PLSQLParser_PLSQLKeys.to_key_return to_key709 =null;

        for_increment_decrement_type_return for_increment_decrement_type710 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
        RewriteRuleSubtreeStream stream_for_like_part=new RewriteRuleSubtreeStream(adaptor,"rule for_like_part");
        RewriteRuleSubtreeStream stream_to_key=new RewriteRuleSubtreeStream(adaptor,"rule to_key");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_for_increment_decrement_type=new RewriteRuleSubtreeStream(adaptor,"rule for_increment_decrement_type");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        RewriteRuleSubtreeStream stream_from_key=new RewriteRuleSubtreeStream(adaptor,"rule from_key");
            int mode = 0;    
        try {
            // PLSQL_DMLParser.g:993:5: ( for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression ) -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) ) -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? ) )
            // PLSQL_DMLParser.g:993:10: for_key column_name ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression )
            {
            pushFollow(FOLLOW_for_key_in_single_column_for_loop9618);
            for_key703=gPLSQLParser.for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key703.getTree());

            pushFollow(FOLLOW_column_name_in_single_column_for_loop9620);
            column_name704=gPLSQLParser.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_column_name.add(column_name704.getTree());

            // PLSQL_DMLParser.g:994:5: ( in_key expression_list | ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression )
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==SQL92_RESERVED_IN) ) {
                alt236=1;
            }
            else if ( (LA236_0==SQL92_RESERVED_FROM||LA236_0==SQL92_RESERVED_LIKE) ) {
                alt236=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;

            }
            switch (alt236) {
                case 1 :
                    // PLSQL_DMLParser.g:994:10: in_key expression_list
                    {
                    pushFollow(FOLLOW_in_key_in_single_column_for_loop9632);
                    in_key705=gPLSQLParser.in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_in_key.add(in_key705.getTree());

                    pushFollow(FOLLOW_expression_list_in_single_column_for_loop9634);
                    expression_list706=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_list.add(expression_list706.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:995:10: ( for_like_part )? from_key ex1= expression to_key ex2= expression for_increment_decrement_type ex3= expression
                    {
                    // PLSQL_DMLParser.g:995:10: ( for_like_part )?
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==SQL92_RESERVED_LIKE) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            // PLSQL_DMLParser.g:995:10: for_like_part
                            {
                            pushFollow(FOLLOW_for_like_part_in_single_column_for_loop9647);
                            for_like_part707=for_like_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_for_like_part.add(for_like_part707.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_from_key_in_single_column_for_loop9650);
                    from_key708=gPLSQLParser.from_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_from_key.add(from_key708.getTree());

                    pushFollow(FOLLOW_expression_in_single_column_for_loop9654);
                    ex1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(ex1.getTree());

                    pushFollow(FOLLOW_to_key_in_single_column_for_loop9668);
                    to_key709=gPLSQLParser.to_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_to_key.add(to_key709.getTree());

                    pushFollow(FOLLOW_expression_in_single_column_for_loop9672);
                    ex2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(ex2.getTree());

                    pushFollow(FOLLOW_for_increment_decrement_type_in_single_column_for_loop9674);
                    for_increment_decrement_type710=for_increment_decrement_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_for_increment_decrement_type.add(for_increment_decrement_type710.getTree());

                    pushFollow(FOLLOW_expression_in_single_column_for_loop9678);
                    ex3=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(ex3.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: for_increment_decrement_type, ex1, in_key, column_name, for_like_part, from_key, expression_list, ex3, column_name, ex2, to_key
            // token labels: 
            // rule labels: retval, ex3, ex2, ex1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ex3=new RewriteRuleSubtreeStream(adaptor,"rule ex3",ex3!=null?ex3.tree:null);
            RewriteRuleSubtreeStream stream_ex2=new RewriteRuleSubtreeStream(adaptor,"rule ex2",ex2!=null?ex2.tree:null);
            RewriteRuleSubtreeStream stream_ex1=new RewriteRuleSubtreeStream(adaptor,"rule ex1",ex1!=null?ex1.tree:null);

            root_0 = (Object)adaptor.nil();
            // 998:9: -> {mode == 1}? ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) )
            if (mode == 1) {
                // PLSQL_DMLParser.g:998:24: ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( in_key expression_list ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_SINGLE_COLUMN, (for_key703!=null?((Token)for_key703.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_column_name.nextTree());

                // PLSQL_DMLParser.g:998:72: ^( in_key expression_list )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_2);

                adaptor.addChild(root_2, stream_expression_list.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 999:9: -> ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? )
            {
                // PLSQL_DMLParser.g:999:12: ^( FOR_SINGLE_COLUMN[$for_key.start] column_name ^( from_key ^( EXPR $ex1) ) ^( to_key ^( EXPR $ex2) ) ^( for_increment_decrement_type ^( EXPR $ex3) ) ( for_like_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_SINGLE_COLUMN, (for_key703!=null?((Token)for_key703.start):null))
                , root_1);

                adaptor.addChild(root_1, stream_column_name.nextTree());

                // PLSQL_DMLParser.g:999:60: ^( from_key ^( EXPR $ex1) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_from_key.nextNode(), root_2);

                // PLSQL_DMLParser.g:999:71: ^( EXPR $ex1)
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_ex1.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:999:85: ^( to_key ^( EXPR $ex2) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_to_key.nextNode(), root_2);

                // PLSQL_DMLParser.g:999:94: ^( EXPR $ex2)
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_ex2.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:999:108: ^( for_increment_decrement_type ^( EXPR $ex3) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_for_increment_decrement_type.nextNode(), root_2);

                // PLSQL_DMLParser.g:999:139: ^( EXPR $ex3)
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_3);

                adaptor.addChild(root_3, stream_ex3.nextTree());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:999:153: ( for_like_part )?
                if ( stream_for_like_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_for_like_part.nextTree());

                }
                stream_for_like_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_column_for_loop"


    public static class for_like_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_like_part"
    // PLSQL_DMLParser.g:1002:1: for_like_part : like_key expression -> ^( like_key ^( EXPR expression ) ) ;
    public final for_like_part_return for_like_part() throws RecognitionException {
        for_like_part_return retval = new for_like_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.like_key_return like_key711 =null;

        expression_return expression712 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_like_key=new RewriteRuleSubtreeStream(adaptor,"rule like_key");
        try {
            // PLSQL_DMLParser.g:1003:5: ( like_key expression -> ^( like_key ^( EXPR expression ) ) )
            // PLSQL_DMLParser.g:1003:10: like_key expression
            {
            pushFollow(FOLLOW_like_key_in_for_like_part9787);
            like_key711=gPLSQLParser.like_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_like_key.add(like_key711.getTree());

            pushFollow(FOLLOW_expression_in_for_like_part9789);
            expression712=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression712.getTree());

            // AST REWRITE
            // elements: expression, like_key
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1004:9: -> ^( like_key ^( EXPR expression ) )
            {
                // PLSQL_DMLParser.g:1004:12: ^( like_key ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_like_key.nextNode(), root_1);

                // PLSQL_DMLParser.g:1004:23: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_like_part"


    public static class for_increment_decrement_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_increment_decrement_type"
    // PLSQL_DMLParser.g:1007:1: for_increment_decrement_type : ( increment_key | decrement_key );
    public final for_increment_decrement_type_return for_increment_decrement_type() throws RecognitionException {
        for_increment_decrement_type_return retval = new for_increment_decrement_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.increment_key_return increment_key713 =null;

        PLSQLParser_PLSQLKeys.decrement_key_return decrement_key714 =null;



        try {
            // PLSQL_DMLParser.g:1008:5: ( increment_key | decrement_key )
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("decrement"))||(input.LT(1).getText().equalsIgnoreCase("increment"))))) {
                int LA237_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("increment"))) ) {
                    alt237=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("decrement"))) ) {
                    alt237=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;

            }
            switch (alt237) {
                case 1 :
                    // PLSQL_DMLParser.g:1008:10: increment_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_key_in_for_increment_decrement_type9829);
                    increment_key713=gPLSQLParser.increment_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_key713.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1009:10: decrement_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_decrement_key_in_for_increment_decrement_type9840);
                    decrement_key714=gPLSQLParser.decrement_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decrement_key714.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_increment_decrement_type"


    public static class multi_column_for_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_column_for_loop"
    // PLSQL_DMLParser.g:1012:1: multi_column_for_loop : for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) ) ;
    public final multi_column_for_loop_return multi_column_for_loop() throws RecognitionException {
        multi_column_for_loop_return retval = new multi_column_for_loop_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN716=null;
        Token COMMA718=null;
        Token RIGHT_PAREN720=null;
        Token LEFT_PAREN722=null;
        Token LEFT_PAREN724=null;
        Token COMMA726=null;
        Token RIGHT_PAREN728=null;
        Token RIGHT_PAREN729=null;
        PLSQLParser_PLSQLKeys.for_key_return for_key715 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name717 =null;

        PLSQLParser_PLSQLCommons.column_name_return column_name719 =null;

        PLSQLParser_PLSQLKeys.in_key_return in_key721 =null;

        subquery_return subquery723 =null;

        expression_list_return expression_list725 =null;

        expression_list_return expression_list727 =null;


        Object LEFT_PAREN716_tree=null;
        Object COMMA718_tree=null;
        Object RIGHT_PAREN720_tree=null;
        Object LEFT_PAREN722_tree=null;
        Object LEFT_PAREN724_tree=null;
        Object COMMA726_tree=null;
        Object RIGHT_PAREN728_tree=null;
        Object RIGHT_PAREN729_tree=null;
        RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
        RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
        RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
        try {
            // PLSQL_DMLParser.g:1013:5: ( for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) ) )
            // PLSQL_DMLParser.g:1013:10: for_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN in_key LEFT_PAREN ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN ) RIGHT_PAREN
            {
            pushFollow(FOLLOW_for_key_in_multi_column_for_loop9860);
            for_key715=gPLSQLParser.for_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_key.add(for_key715.getTree());

            LEFT_PAREN716=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_multi_column_for_loop9862); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN716);


            pushFollow(FOLLOW_column_name_in_multi_column_for_loop9864);
            column_name717=gPLSQLParser.column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_column_name.add(column_name717.getTree());

            // PLSQL_DMLParser.g:1013:41: ( COMMA column_name )*
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==COMMA) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    // PLSQL_DMLParser.g:1013:42: COMMA column_name
            	    {
            	    COMMA718=(Token)match(input,COMMA,FOLLOW_COMMA_in_multi_column_for_loop9867); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA718);


            	    pushFollow(FOLLOW_column_name_in_multi_column_for_loop9869);
            	    column_name719=gPLSQLParser.column_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_column_name.add(column_name719.getTree());

            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);


            RIGHT_PAREN720=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_multi_column_for_loop9873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN720);


            pushFollow(FOLLOW_in_key_in_multi_column_for_loop9875);
            in_key721=gPLSQLParser.in_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_in_key.add(in_key721.getTree());

            LEFT_PAREN722=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_multi_column_for_loop9885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN722);


            // PLSQL_DMLParser.g:1015:13: ( ( select_key )=> subquery | ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN )
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==SQL92_RESERVED_SELECT) && (synpred30_PLSQL_DMLParser())) {
                alt240=1;
            }
            else if ( (LA240_0==LEFT_PAREN) ) {
                int LA240_2 = input.LA(2);

                if ( (synpred30_PLSQL_DMLParser()) ) {
                    alt240=1;
                }
                else if ( (synpred31_PLSQL_DMLParser()) ) {
                    alt240=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 240, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);

                throw nvae;

            }
            switch (alt240) {
                case 1 :
                    // PLSQL_DMLParser.g:1015:18: ( select_key )=> subquery
                    {
                    pushFollow(FOLLOW_subquery_in_multi_column_for_loop9909);
                    subquery723=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subquery.add(subquery723.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1016:18: ( LEFT_PAREN )=> LEFT_PAREN expression_list ( COMMA expression_list )* RIGHT_PAREN
                    {
                    LEFT_PAREN724=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_multi_column_for_loop9933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN724);


                    pushFollow(FOLLOW_expression_list_in_multi_column_for_loop9935);
                    expression_list725=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression_list.add(expression_list725.getTree());

                    // PLSQL_DMLParser.g:1016:60: ( COMMA expression_list )*
                    loop239:
                    do {
                        int alt239=2;
                        int LA239_0 = input.LA(1);

                        if ( (LA239_0==COMMA) ) {
                            alt239=1;
                        }


                        switch (alt239) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:1016:61: COMMA expression_list
                    	    {
                    	    COMMA726=(Token)match(input,COMMA,FOLLOW_COMMA_in_multi_column_for_loop9938); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA726);


                    	    pushFollow(FOLLOW_expression_list_in_multi_column_for_loop9940);
                    	    expression_list727=expression_list();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression_list.add(expression_list727.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop239;
                        }
                    } while (true);


                    RIGHT_PAREN728=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_multi_column_for_loop9944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN728);


                    }
                    break;

            }


            RIGHT_PAREN729=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_multi_column_for_loop9968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN729);


            // AST REWRITE
            // elements: expression_list, in_key, column_name, subquery
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1019:9: -> ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) )
            {
                // PLSQL_DMLParser.g:1019:12: ^( FOR_MULTI_COLUMN[$for_key.start] ( column_name )+ ^( in_key ( subquery )? ( expression_list )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_MULTI_COLUMN, (for_key715!=null?((Token)for_key715.start):null))
                , root_1);

                if ( !(stream_column_name.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_column_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_name.nextTree());

                }
                stream_column_name.reset();

                // PLSQL_DMLParser.g:1019:60: ^( in_key ( subquery )? ( expression_list )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_in_key.nextNode(), root_2);

                // PLSQL_DMLParser.g:1019:69: ( subquery )?
                if ( stream_subquery.hasNext() ) {
                    adaptor.addChild(root_2, stream_subquery.nextTree());

                }
                stream_subquery.reset();

                // PLSQL_DMLParser.g:1019:79: ( expression_list )*
                while ( stream_expression_list.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression_list.nextTree());

                }
                stream_expression_list.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_column_for_loop"


    public static class unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "unary_expression"
    // PLSQL_DMLParser.g:1022:1: unary_expression options {backtrack=true; } : ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key ^ unary_expression | connect_by_root_key ^ unary_expression |{...}? => new_key ^ unary_expression | distinct_key ^ unary_expression | all_key ^ unary_expression |{...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom );
    public final unary_expression_return unary_expression() throws RecognitionException {
        unary_expression_return retval = new unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MINUS_SIGN730=null;
        Token PLUS_SIGN732=null;
        unary_expression_return unary_expression731 =null;

        unary_expression_return unary_expression733 =null;

        PLSQLParser_PLSQLKeys.prior_key_return prior_key734 =null;

        unary_expression_return unary_expression735 =null;

        PLSQLParser_PLSQLKeys.connect_by_root_key_return connect_by_root_key736 =null;

        unary_expression_return unary_expression737 =null;

        PLSQLParser_PLSQLKeys.new_key_return new_key738 =null;

        unary_expression_return unary_expression739 =null;

        PLSQLParser_PLSQLKeys.distinct_key_return distinct_key740 =null;

        unary_expression_return unary_expression741 =null;

        PLSQLParser_PLSQLKeys.all_key_return all_key742 =null;

        unary_expression_return unary_expression743 =null;

        case_statement_return case_statement744 =null;

        quantified_expression_return quantified_expression745 =null;

        standard_function_return standard_function746 =null;

        atom_return atom747 =null;


        Object MINUS_SIGN730_tree=null;
        Object PLUS_SIGN732_tree=null;
        RewriteRuleTokenStream stream_PLUS_SIGN=new RewriteRuleTokenStream(adaptor,"token PLUS_SIGN");
        RewriteRuleTokenStream stream_MINUS_SIGN=new RewriteRuleTokenStream(adaptor,"token MINUS_SIGN");
        RewriteRuleSubtreeStream stream_unary_expression=new RewriteRuleSubtreeStream(adaptor,"rule unary_expression");
        RewriteRuleSubtreeStream stream_standard_function=new RewriteRuleSubtreeStream(adaptor,"rule standard_function");
        try {
            // PLSQL_DMLParser.g:1027:5: ( MINUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression ) | PLUS_SIGN unary_expression -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression ) | prior_key ^ unary_expression | connect_by_root_key ^ unary_expression |{...}? => new_key ^ unary_expression | distinct_key ^ unary_expression | all_key ^ unary_expression |{...}? case_statement[false] | quantified_expression | standard_function -> ^( STANDARD_FUNCTION standard_function ) | atom )
            int alt241=11;
            switch ( input.LA(1) ) {
            case MINUS_SIGN:
                {
                alt241=1;
                }
                break;
            case PLUS_SIGN:
                {
                alt241=2;
                }
                break;
            case SQL92_RESERVED_PRIOR:
                {
                alt241=3;
                }
                break;
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
                {
                alt241=4;
                }
                break;
            case REGULAR_ID:
                {
                int LA241_5 = input.LA(2);

                if ( ((((synpred36_PLSQL_DMLParser()&&synpred36_PLSQL_DMLParser())&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new")))) ) {
                    alt241=5;
                }
                else if ( (((((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE))&&((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE)))&&synpred39_PLSQL_DMLParser())) ) {
                    alt241=8;
                }
                else if ( ((((input.LT(1).getText().equalsIgnoreCase("some"))&&(input.LT(1).getText().equalsIgnoreCase("some")))&&synpred40_PLSQL_DMLParser())) ) {
                    alt241=9;
                }
                else if ( (((((input.LT(1).getText().equalsIgnoreCase("xmlelement"))||(input.LT(1).getText().equalsIgnoreCase("xmlcolattval"))||(input.LT(1).getText().equalsIgnoreCase("last_value"))||(input.LT(1).getText().equalsIgnoreCase("xmlforest"))||(input.LT(1).getText().equalsIgnoreCase("cast"))||(input.LT(1).getText().equalsIgnoreCase("xmlparse"))||(input.LT(1).getText().equalsIgnoreCase("xmlroot"))||(input.LT(1).getText().equalsIgnoreCase("xmltable"))||(enablesUsingClause(input.LT(1).getText()))||(input.LT(1).getText().equalsIgnoreCase("trim"))||(input.LT(1).getText().equalsIgnoreCase("decompose"))||(input.LT(1).getText().equalsIgnoreCase("xmlcast"))||(input.LT(1).getText().equalsIgnoreCase("xmlquery"))||(input.LT(1).getText().equalsIgnoreCase("xmlpi"))||(input.LT(1).getText().equalsIgnoreCase("treat"))||(input.LT(1).getText().equalsIgnoreCase("extract"))||(input.LT(1).getText().equalsIgnoreCase("xmlexists"))||(enablesOverClause(input.LT(1).getText()))||(input.LT(1).getText().equalsIgnoreCase("xmlagg"))||(input.LT(1).getText().equalsIgnoreCase("chr"))||(isStandardPredictionFunction(input.LT(1).getText()))||(input.LT(1).getText().equalsIgnoreCase("count"))||(enablesWithinOrOverClause(input.LT(1).getText()))||(input.LT(1).getText().equalsIgnoreCase("translate"))||(input.LT(1).getText().equalsIgnoreCase("xmlserialize"))||(input.LT(1).getText().equalsIgnoreCase("first_value"))||(input.LT(1).getText().equalsIgnoreCase("collect")))&&((input.LT(1).getText().equalsIgnoreCase("xmlelement"))||(input.LT(1).getText().equalsIgnoreCase("xmlcolattval"))||(input.LT(1).getText().equalsIgnoreCase("last_value"))||(input.LT(1).getText().equalsIgnoreCase("xmlforest"))||(input.LT(1).getText().equalsIgnoreCase("cast"))||(input.LT(1).getText().equalsIgnoreCase("xmlparse"))||(input.LT(1).getText().equalsIgnoreCase("xmlroot"))||(input.LT(1).getText().equalsIgnoreCase("xmltable"))||(enablesUsingClause(input.LT(1).getText()))||(input.LT(1).getText().equalsIgnoreCase("trim"))||(input.LT(1).getText().equalsIgnoreCase("decompose"))||(input.LT(1).getText().equalsIgnoreCase("xmlcast"))||(input.LT(1).getText().equalsIgnoreCase("xmlquery"))||(input.LT(1).getText().equalsIgnoreCase("xmlpi"))||(input.LT(1).getText().equalsIgnoreCase("treat"))||(input.LT(1).getText().equalsIgnoreCase("extract"))||(input.LT(1).getText().equalsIgnoreCase("xmlexists"))||(enablesOverClause(input.LT(1).getText()))||(input.LT(1).getText().equalsIgnoreCase("xmlagg"))||(input.LT(1).getText().equalsIgnoreCase("chr"))||(isStandardPredictionFunction(input.LT(1).getText()))||(input.LT(1).getText().equalsIgnoreCase("count"))||(enablesWithinOrOverClause(input.LT(1).getText()))||(input.LT(1).getText().equalsIgnoreCase("translate"))||(input.LT(1).getText().equalsIgnoreCase("xmlserialize"))||(input.LT(1).getText().equalsIgnoreCase("first_value"))||(input.LT(1).getText().equalsIgnoreCase("collect"))))&&synpred41_PLSQL_DMLParser())) ) {
                    alt241=10;
                }
                else if ( (true) ) {
                    alt241=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 5, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_DISTINCT:
                {
                alt241=6;
                }
                break;
            case SQL92_RESERVED_ALL:
                {
                int LA241_7 = input.LA(2);

                if ( (synpred38_PLSQL_DMLParser()) ) {
                    alt241=7;
                }
                else if ( (synpred40_PLSQL_DMLParser()) ) {
                    alt241=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 7, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA241_8 = input.LA(2);

                if ( (((((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE))&&((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE)))&&synpred39_PLSQL_DMLParser())) ) {
                    alt241=8;
                }
                else if ( (true) ) {
                    alt241=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 241, 8, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CASE:
                {
                alt241=8;
                }
                break;
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_EXISTS:
                {
                alt241=9;
                }
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case NATIONAL_CHAR_STRING_LIT:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
                {
                alt241=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);

                throw nvae;

            }

            switch (alt241) {
                case 1 :
                    // PLSQL_DMLParser.g:1027:10: MINUS_SIGN unary_expression
                    {
                    MINUS_SIGN730=(Token)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_unary_expression10025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS_SIGN.add(MINUS_SIGN730);


                    pushFollow(FOLLOW_unary_expression_in_unary_expression10027);
                    unary_expression731=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary_expression.add(unary_expression731.getTree());

                    // AST REWRITE
                    // elements: unary_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1027:38: -> ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression )
                    {
                        // PLSQL_DMLParser.g:1027:41: ^( UNARY_OPERATOR[$MINUS_SIGN] unary_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNARY_OPERATOR, MINUS_SIGN730)
                        , root_1);

                        adaptor.addChild(root_1, stream_unary_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1028:10: PLUS_SIGN unary_expression
                    {
                    PLUS_SIGN732=(Token)match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_unary_expression10047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS_SIGN.add(PLUS_SIGN732);


                    pushFollow(FOLLOW_unary_expression_in_unary_expression10049);
                    unary_expression733=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unary_expression.add(unary_expression733.getTree());

                    // AST REWRITE
                    // elements: unary_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1028:37: -> ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression )
                    {
                        // PLSQL_DMLParser.g:1028:40: ^( UNARY_OPERATOR[$PLUS_SIGN] unary_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNARY_OPERATOR, PLUS_SIGN732)
                        , root_1);

                        adaptor.addChild(root_1, stream_unary_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:1029:10: prior_key ^ unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_prior_key_in_unary_expression10069);
                    prior_key734=gPLSQLParser.prior_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(prior_key734.getTree(), root_0);

                    pushFollow(FOLLOW_unary_expression_in_unary_expression10072);
                    unary_expression735=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression735.getTree());

                    }
                    break;
                case 4 :
                    // PLSQL_DMLParser.g:1030:10: connect_by_root_key ^ unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_connect_by_root_key_in_unary_expression10083);
                    connect_by_root_key736=gPLSQLParser.connect_by_root_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(connect_by_root_key736.getTree(), root_0);

                    pushFollow(FOLLOW_unary_expression_in_unary_expression10086);
                    unary_expression737=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression737.getTree());

                    }
                    break;
                case 5 :
                    // PLSQL_DMLParser.g:1031:10: {...}? => new_key ^ unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    if ( !((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "unary_expression", "input.LT(1).getText().equalsIgnoreCase(\"new\") && !input.LT(2).getText().equals(\".\")");
                    }

                    pushFollow(FOLLOW_new_key_in_unary_expression10100);
                    new_key738=gPLSQLParser.new_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(new_key738.getTree(), root_0);

                    pushFollow(FOLLOW_unary_expression_in_unary_expression10103);
                    unary_expression739=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression739.getTree());

                    }
                    break;
                case 6 :
                    // PLSQL_DMLParser.g:1032:10: distinct_key ^ unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_distinct_key_in_unary_expression10114);
                    distinct_key740=gPLSQLParser.distinct_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(distinct_key740.getTree(), root_0);

                    pushFollow(FOLLOW_unary_expression_in_unary_expression10117);
                    unary_expression741=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression741.getTree());

                    }
                    break;
                case 7 :
                    // PLSQL_DMLParser.g:1033:10: all_key ^ unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_all_key_in_unary_expression10128);
                    all_key742=gPLSQLParser.all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(all_key742.getTree(), root_0);

                    pushFollow(FOLLOW_unary_expression_in_unary_expression10131);
                    unary_expression743=unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary_expression743.getTree());

                    }
                    break;
                case 8 :
                    // PLSQL_DMLParser.g:1034:10: {...}? case_statement[false]
                    {
                    root_0 = (Object)adaptor.nil();


                    if ( !(((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "unary_expression", "(input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE)");
                    }

                    pushFollow(FOLLOW_case_statement_in_unary_expression10144);
                    case_statement744=case_statement(false);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement744.getTree());

                    }
                    break;
                case 9 :
                    // PLSQL_DMLParser.g:1035:10: quantified_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_quantified_expression_in_unary_expression10156);
                    quantified_expression745=quantified_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantified_expression745.getTree());

                    }
                    break;
                case 10 :
                    // PLSQL_DMLParser.g:1036:10: standard_function
                    {
                    pushFollow(FOLLOW_standard_function_in_unary_expression10167);
                    standard_function746=standard_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_standard_function.add(standard_function746.getTree());

                    // AST REWRITE
                    // elements: standard_function
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1036:28: -> ^( STANDARD_FUNCTION standard_function )
                    {
                        // PLSQL_DMLParser.g:1036:31: ^( STANDARD_FUNCTION standard_function )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STANDARD_FUNCTION, "STANDARD_FUNCTION")
                        , root_1);

                        adaptor.addChild(root_1, stream_standard_function.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 11 :
                    // PLSQL_DMLParser.g:1037:10: atom
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_atom_in_unary_expression10186);
                    atom747=atom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, atom747.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "unary_expression"


    protected static class case_statement_scope {
        boolean isStatement;
    }
    protected Stack case_statement_stack = new Stack();


    public static class case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_statement"
    // PLSQL_DMLParser.g:1040:1: case_statement[boolean isStatementParameter] : ( ( ( label_name )? case_key when_key )=> searched_case_statement | simple_case_statement );
    public final case_statement_return case_statement(boolean isStatementParameter) throws RecognitionException {
        case_statement_stack.push(new case_statement_scope());
        case_statement_return retval = new case_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        searched_case_statement_return searched_case_statement748 =null;

        simple_case_statement_return simple_case_statement749 =null;



        ((case_statement_scope)case_statement_stack.peek()).isStatement = isStatementParameter;
        try {
            // PLSQL_DMLParser.g:1045:5: ( ( ( label_name )? case_key when_key )=> searched_case_statement | simple_case_statement )
            int alt242=2;
            switch ( input.LA(1) ) {
            case REGULAR_ID:
                {
                int LA242_1 = input.LA(2);

                if ( (LA242_1==SQL92_RESERVED_CASE) ) {
                    int LA242_3 = input.LA(3);

                    if ( (LA242_3==SQL92_RESERVED_WHEN) && (synpred42_PLSQL_DMLParser())) {
                        alt242=1;
                    }
                    else if ( (LA242_3==APPROXIMATE_NUM_LIT||LA242_3==BINDVAR||(LA242_3 >= CHAR_STRING && LA242_3 <= COLON)||LA242_3==DELIMITED_ID||LA242_3==EXACT_NUM_LIT||LA242_3==INTRODUCER||LA242_3==LEFT_PAREN||LA242_3==NATIONAL_CHAR_STRING_LIT||LA242_3==REGULAR_ID||LA242_3==SQL92_RESERVED_DATE||LA242_3==SQL92_RESERVED_DEFAULT||LA242_3==SQL92_RESERVED_FALSE||LA242_3==SQL92_RESERVED_NULL||LA242_3==SQL92_RESERVED_TRUE||LA242_3==UNSIGNED_INTEGER) ) {
                        alt242=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 3, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 1, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA242_2 = input.LA(2);

                if ( (LA242_2==SQL92_RESERVED_CASE) ) {
                    int LA242_3 = input.LA(3);

                    if ( (LA242_3==SQL92_RESERVED_WHEN) && (synpred42_PLSQL_DMLParser())) {
                        alt242=1;
                    }
                    else if ( (LA242_3==APPROXIMATE_NUM_LIT||LA242_3==BINDVAR||(LA242_3 >= CHAR_STRING && LA242_3 <= COLON)||LA242_3==DELIMITED_ID||LA242_3==EXACT_NUM_LIT||LA242_3==INTRODUCER||LA242_3==LEFT_PAREN||LA242_3==NATIONAL_CHAR_STRING_LIT||LA242_3==REGULAR_ID||LA242_3==SQL92_RESERVED_DATE||LA242_3==SQL92_RESERVED_DEFAULT||LA242_3==SQL92_RESERVED_FALSE||LA242_3==SQL92_RESERVED_NULL||LA242_3==SQL92_RESERVED_TRUE||LA242_3==UNSIGNED_INTEGER) ) {
                        alt242=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 3, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 2, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CASE:
                {
                int LA242_3 = input.LA(2);

                if ( (LA242_3==SQL92_RESERVED_WHEN) && (synpred42_PLSQL_DMLParser())) {
                    alt242=1;
                }
                else if ( (LA242_3==APPROXIMATE_NUM_LIT||LA242_3==BINDVAR||(LA242_3 >= CHAR_STRING && LA242_3 <= COLON)||LA242_3==DELIMITED_ID||LA242_3==EXACT_NUM_LIT||LA242_3==INTRODUCER||LA242_3==LEFT_PAREN||LA242_3==NATIONAL_CHAR_STRING_LIT||LA242_3==REGULAR_ID||LA242_3==SQL92_RESERVED_DATE||LA242_3==SQL92_RESERVED_DEFAULT||LA242_3==SQL92_RESERVED_FALSE||LA242_3==SQL92_RESERVED_NULL||LA242_3==SQL92_RESERVED_TRUE||LA242_3==UNSIGNED_INTEGER) ) {
                    alt242=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;

            }

            switch (alt242) {
                case 1 :
                    // PLSQL_DMLParser.g:1045:10: ( ( label_name )? case_key when_key )=> searched_case_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_searched_case_statement_in_case_statement10233);
                    searched_case_statement748=searched_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_statement748.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1046:10: simple_case_statement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_case_statement_in_case_statement10244);
                    simple_case_statement749=simple_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_statement749.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            case_statement_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "case_statement"


    public static class simple_case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_case_statement"
    // PLSQL_DMLParser.g:1051:1: simple_case_statement : ( label_name )? ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )? -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? ) ;
    public final simple_case_statement_return simple_case_statement() throws RecognitionException {
        simple_case_statement_return retval = new simple_case_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.case_key_return ck1 =null;

        PLSQLParser_PLSQLCommons.label_name_return label_name750 =null;

        atom_return atom751 =null;

        simple_case_when_part_return simple_case_when_part752 =null;

        case_else_part_return case_else_part753 =null;

        PLSQLParser_PLSQLKeys.end_key_return end_key754 =null;

        PLSQLParser_PLSQLKeys.case_key_return case_key755 =null;

        PLSQLParser_PLSQLCommons.label_name_return label_name756 =null;


        RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
        RewriteRuleSubtreeStream stream_simple_case_when_part=new RewriteRuleSubtreeStream(adaptor,"rule simple_case_when_part");
        RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
        RewriteRuleSubtreeStream stream_case_else_part=new RewriteRuleSubtreeStream(adaptor,"rule case_else_part");
        RewriteRuleSubtreeStream stream_case_key=new RewriteRuleSubtreeStream(adaptor,"rule case_key");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        try {
            // PLSQL_DMLParser.g:1052:5: ( ( label_name )? ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )? -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? ) )
            // PLSQL_DMLParser.g:1052:10: ( label_name )? ck1= case_key atom ( simple_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )?
            {
            // PLSQL_DMLParser.g:1052:10: ( label_name )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==DELIMITED_ID||LA243_0==REGULAR_ID) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // PLSQL_DMLParser.g:1052:10: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_simple_case_statement10266);
                    label_name750=gPLSQLParser.label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name750.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_case_key_in_simple_case_statement10271);
            ck1=gPLSQLParser.case_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_case_key.add(ck1.getTree());

            pushFollow(FOLLOW_atom_in_simple_case_statement10273);
            atom751=atom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_atom.add(atom751.getTree());

            // PLSQL_DMLParser.g:1053:9: ( simple_case_when_part )+
            int cnt244=0;
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==SQL92_RESERVED_WHEN) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // PLSQL_DMLParser.g:1053:9: simple_case_when_part
            	    {
            	    pushFollow(FOLLOW_simple_case_when_part_in_simple_case_statement10283);
            	    simple_case_when_part752=simple_case_when_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_simple_case_when_part.add(simple_case_when_part752.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt244 >= 1 ) break loop244;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(244, input);
                        throw eee;
                }
                cnt244++;
            } while (true);


            // PLSQL_DMLParser.g:1054:9: ( case_else_part )?
            int alt245=2;
            int LA245_0 = input.LA(1);

            if ( (LA245_0==SQL92_RESERVED_ELSE) ) {
                alt245=1;
            }
            switch (alt245) {
                case 1 :
                    // PLSQL_DMLParser.g:1054:9: case_else_part
                    {
                    pushFollow(FOLLOW_case_else_part_in_simple_case_statement10295);
                    case_else_part753=case_else_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_case_else_part.add(case_else_part753.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_end_key_in_simple_case_statement10306);
            end_key754=gPLSQLParser.end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key754.getTree());

            // PLSQL_DMLParser.g:1055:17: ( case_key )?
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==SQL92_RESERVED_CASE) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    // PLSQL_DMLParser.g:1055:17: case_key
                    {
                    pushFollow(FOLLOW_case_key_in_simple_case_statement10308);
                    case_key755=gPLSQLParser.case_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_case_key.add(case_key755.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:1055:27: ( label_name )?
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==REGULAR_ID) ) {
                alt247=1;
            }
            else if ( (LA247_0==DELIMITED_ID) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    // PLSQL_DMLParser.g:1055:27: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_simple_case_statement10311);
                    label_name756=gPLSQLParser.label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name756.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: atom, label_name, case_else_part, simple_case_when_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1056:9: -> ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? )
            {
                // PLSQL_DMLParser.g:1056:12: ^( SIMPLE_CASE[$ck1.start] ( label_name )* ^( EXPR atom ) ( simple_case_when_part )+ ( case_else_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_CASE, (ck1!=null?((Token)ck1.start):null))
                , root_1);

                // PLSQL_DMLParser.g:1056:38: ( label_name )*
                while ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();

                // PLSQL_DMLParser.g:1056:50: ^( EXPR atom )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_atom.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                if ( !(stream_simple_case_when_part.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_simple_case_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_simple_case_when_part.nextTree());

                }
                stream_simple_case_when_part.reset();

                // PLSQL_DMLParser.g:1056:86: ( case_else_part )?
                if ( stream_case_else_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_else_part.nextTree());

                }
                stream_case_else_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_case_statement"


    public static class simple_case_when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_case_when_part"
    // PLSQL_DMLParser.g:1059:1: simple_case_when_part : when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper ) ;
    public final simple_case_when_part_return simple_case_when_part() throws RecognitionException {
        simple_case_when_part_return retval = new simple_case_when_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        expression_wrapper_return ew1 =null;

        expression_wrapper_return ew2 =null;

        PLSQLParser_PLSQLKeys.when_key_return when_key757 =null;

        PLSQLParser_PLSQLKeys.then_key_return then_key758 =null;

        PLSQLParser.seq_of_statements_return seq_of_statements759 =null;



        try {
            // PLSQL_DMLParser.g:1060:5: ( when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper ) )
            // PLSQL_DMLParser.g:1060:10: when_key ^ew1= expression_wrapper then_key ! ({...}? seq_of_statements |ew2= expression_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_when_key_in_simple_case_when_part10364);
            when_key757=gPLSQLParser.when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(when_key757.getTree(), root_0);

            pushFollow(FOLLOW_expression_wrapper_in_simple_case_when_part10369);
            ew1=expression_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ew1.getTree());

            pushFollow(FOLLOW_then_key_in_simple_case_when_part10371);
            then_key758=gPLSQLParser.then_key();

            state._fsp--;
            if (state.failed) return retval;

            // PLSQL_DMLParser.g:1060:53: ({...}? seq_of_statements |ew2= expression_wrapper )
            int alt248=2;
            switch ( input.LA(1) ) {
            case LESS_THAN_OP:
            case PLSQL_RESERVED_IF:
            case PLSQL_RESERVED_LOCK:
            case SQL92_RESERVED_ALTER:
            case SQL92_RESERVED_BEGIN:
            case SQL92_RESERVED_CREATE:
            case SQL92_RESERVED_DECLARE:
            case SQL92_RESERVED_DELETE:
            case SQL92_RESERVED_FETCH:
            case SQL92_RESERVED_FOR:
            case SQL92_RESERVED_GOTO:
            case SQL92_RESERVED_GRANT:
            case SQL92_RESERVED_INSERT:
            case SQL92_RESERVED_PROCEDURE:
            case SQL92_RESERVED_SELECT:
            case SQL92_RESERVED_UPDATE:
            case SQL92_RESERVED_WITH:
                {
                alt248=1;
                }
                break;
            case REGULAR_ID:
                {
                int LA248_4 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt248=1;
                }
                else if ( (true) ) {
                    alt248=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 4, input);

                    throw nvae;

                }
                }
                break;
            case INTRODUCER:
                {
                int LA248_7 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt248=1;
                }
                else if ( (true) ) {
                    alt248=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 7, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA248_8 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt248=1;
                }
                else if ( (true) ) {
                    alt248=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 8, input);

                    throw nvae;

                }
                }
                break;
            case BINDVAR:
                {
                int LA248_9 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt248=1;
                }
                else if ( (true) ) {
                    alt248=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 9, input);

                    throw nvae;

                }
                }
                break;
            case COLON:
                {
                int LA248_10 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt248=1;
                }
                else if ( (true) ) {
                    alt248=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 10, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CURSOR:
                {
                int LA248_11 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt248=1;
                }
                else if ( (true) ) {
                    alt248=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 11, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_NULL:
                {
                int LA248_16 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt248=1;
                }
                else if ( (true) ) {
                    alt248=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 16, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CASE:
                {
                int LA248_17 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt248=1;
                }
                else if ( (((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE))) ) {
                    alt248=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 17, input);

                    throw nvae;

                }
                }
                break;
            case LEFT_PAREN:
                {
                int LA248_21 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt248=1;
                }
                else if ( (true) ) {
                    alt248=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 248, 21, input);

                    throw nvae;

                }
                }
                break;
            case APPROXIMATE_NUM_LIT:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case EXACT_NUM_LIT:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
                {
                alt248=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;

            }

            switch (alt248) {
                case 1 :
                    // PLSQL_DMLParser.g:1060:54: {...}? seq_of_statements
                    {
                    if ( !((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "simple_case_when_part", "$case_statement::isStatement");
                    }

                    pushFollow(FOLLOW_seq_of_statements_in_simple_case_when_part10377);
                    seq_of_statements759=gPLSQLParser.seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements759.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1060:106: ew2= expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_simple_case_when_part10383);
                    ew2=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ew2.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_case_when_part"


    public static class searched_case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "searched_case_statement"
    // PLSQL_DMLParser.g:1063:1: searched_case_statement : ( label_name )? ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )? -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? ) ;
    public final searched_case_statement_return searched_case_statement() throws RecognitionException {
        searched_case_statement_return retval = new searched_case_statement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.case_key_return ck1 =null;

        PLSQLParser_PLSQLCommons.label_name_return label_name760 =null;

        searched_case_when_part_return searched_case_when_part761 =null;

        case_else_part_return case_else_part762 =null;

        PLSQLParser_PLSQLKeys.end_key_return end_key763 =null;

        PLSQLParser_PLSQLKeys.case_key_return case_key764 =null;

        PLSQLParser_PLSQLCommons.label_name_return label_name765 =null;


        RewriteRuleSubtreeStream stream_searched_case_when_part=new RewriteRuleSubtreeStream(adaptor,"rule searched_case_when_part");
        RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
        RewriteRuleSubtreeStream stream_case_else_part=new RewriteRuleSubtreeStream(adaptor,"rule case_else_part");
        RewriteRuleSubtreeStream stream_case_key=new RewriteRuleSubtreeStream(adaptor,"rule case_key");
        RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
        try {
            // PLSQL_DMLParser.g:1064:5: ( ( label_name )? ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )? -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? ) )
            // PLSQL_DMLParser.g:1064:10: ( label_name )? ck1= case_key ( searched_case_when_part )+ ( case_else_part )? end_key ( case_key )? ( label_name )?
            {
            // PLSQL_DMLParser.g:1064:10: ( label_name )?
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==DELIMITED_ID||LA249_0==REGULAR_ID) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    // PLSQL_DMLParser.g:1064:10: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_searched_case_statement10404);
                    label_name760=gPLSQLParser.label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name760.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_case_key_in_searched_case_statement10409);
            ck1=gPLSQLParser.case_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_case_key.add(ck1.getTree());

            // PLSQL_DMLParser.g:1065:9: ( searched_case_when_part )+
            int cnt250=0;
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( (LA250_0==SQL92_RESERVED_WHEN) ) {
                    alt250=1;
                }


                switch (alt250) {
            	case 1 :
            	    // PLSQL_DMLParser.g:1065:9: searched_case_when_part
            	    {
            	    pushFollow(FOLLOW_searched_case_when_part_in_searched_case_statement10419);
            	    searched_case_when_part761=searched_case_when_part();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_searched_case_when_part.add(searched_case_when_part761.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt250 >= 1 ) break loop250;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(250, input);
                        throw eee;
                }
                cnt250++;
            } while (true);


            // PLSQL_DMLParser.g:1066:9: ( case_else_part )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==SQL92_RESERVED_ELSE) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // PLSQL_DMLParser.g:1066:9: case_else_part
                    {
                    pushFollow(FOLLOW_case_else_part_in_searched_case_statement10430);
                    case_else_part762=case_else_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_case_else_part.add(case_else_part762.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_end_key_in_searched_case_statement10441);
            end_key763=gPLSQLParser.end_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_end_key.add(end_key763.getTree());

            // PLSQL_DMLParser.g:1067:17: ( case_key )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==SQL92_RESERVED_CASE) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // PLSQL_DMLParser.g:1067:17: case_key
                    {
                    pushFollow(FOLLOW_case_key_in_searched_case_statement10443);
                    case_key764=gPLSQLParser.case_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_case_key.add(case_key764.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:1067:27: ( label_name )?
            int alt253=2;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==REGULAR_ID) ) {
                alt253=1;
            }
            else if ( (LA253_0==DELIMITED_ID) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    // PLSQL_DMLParser.g:1067:27: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_searched_case_statement10446);
                    label_name765=gPLSQLParser.label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_label_name.add(label_name765.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: searched_case_when_part, label_name, case_else_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1068:9: -> ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? )
            {
                // PLSQL_DMLParser.g:1068:12: ^( SEARCHED_CASE[$ck1.start] ( label_name )* ( searched_case_when_part )+ ( case_else_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SEARCHED_CASE, (ck1!=null?((Token)ck1.start):null))
                , root_1);

                // PLSQL_DMLParser.g:1068:40: ( label_name )*
                while ( stream_label_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_label_name.nextTree());

                }
                stream_label_name.reset();

                if ( !(stream_searched_case_when_part.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_searched_case_when_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_searched_case_when_part.nextTree());

                }
                stream_searched_case_when_part.reset();

                // PLSQL_DMLParser.g:1068:77: ( case_else_part )?
                if ( stream_case_else_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_case_else_part.nextTree());

                }
                stream_case_else_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "searched_case_statement"


    public static class searched_case_when_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "searched_case_when_part"
    // PLSQL_DMLParser.g:1071:1: searched_case_when_part : when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper ) ;
    public final searched_case_when_part_return searched_case_when_part() throws RecognitionException {
        searched_case_when_part_return retval = new searched_case_when_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.when_key_return when_key766 =null;

        condition_wrapper_return condition_wrapper767 =null;

        PLSQLParser_PLSQLKeys.then_key_return then_key768 =null;

        PLSQLParser.seq_of_statements_return seq_of_statements769 =null;

        expression_wrapper_return expression_wrapper770 =null;



        try {
            // PLSQL_DMLParser.g:1072:5: ( when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper ) )
            // PLSQL_DMLParser.g:1072:10: when_key ^ condition_wrapper then_key ! ({...}? seq_of_statements | expression_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_when_key_in_searched_case_when_part10492);
            when_key766=gPLSQLParser.when_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(when_key766.getTree(), root_0);

            pushFollow(FOLLOW_condition_wrapper_in_searched_case_when_part10495);
            condition_wrapper767=condition_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_wrapper767.getTree());

            pushFollow(FOLLOW_then_key_in_searched_case_when_part10497);
            then_key768=gPLSQLParser.then_key();

            state._fsp--;
            if (state.failed) return retval;

            // PLSQL_DMLParser.g:1072:48: ({...}? seq_of_statements | expression_wrapper )
            int alt254=2;
            switch ( input.LA(1) ) {
            case LESS_THAN_OP:
            case PLSQL_RESERVED_IF:
            case PLSQL_RESERVED_LOCK:
            case SQL92_RESERVED_ALTER:
            case SQL92_RESERVED_BEGIN:
            case SQL92_RESERVED_CREATE:
            case SQL92_RESERVED_DECLARE:
            case SQL92_RESERVED_DELETE:
            case SQL92_RESERVED_FETCH:
            case SQL92_RESERVED_FOR:
            case SQL92_RESERVED_GOTO:
            case SQL92_RESERVED_GRANT:
            case SQL92_RESERVED_INSERT:
            case SQL92_RESERVED_PROCEDURE:
            case SQL92_RESERVED_SELECT:
            case SQL92_RESERVED_UPDATE:
            case SQL92_RESERVED_WITH:
                {
                alt254=1;
                }
                break;
            case REGULAR_ID:
                {
                int LA254_4 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt254=1;
                }
                else if ( (true) ) {
                    alt254=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 254, 4, input);

                    throw nvae;

                }
                }
                break;
            case INTRODUCER:
                {
                int LA254_7 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt254=1;
                }
                else if ( (true) ) {
                    alt254=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 254, 7, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA254_8 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt254=1;
                }
                else if ( (true) ) {
                    alt254=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 254, 8, input);

                    throw nvae;

                }
                }
                break;
            case BINDVAR:
                {
                int LA254_9 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt254=1;
                }
                else if ( (true) ) {
                    alt254=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 254, 9, input);

                    throw nvae;

                }
                }
                break;
            case COLON:
                {
                int LA254_10 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt254=1;
                }
                else if ( (true) ) {
                    alt254=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 254, 10, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CURSOR:
                {
                int LA254_11 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt254=1;
                }
                else if ( (true) ) {
                    alt254=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 254, 11, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_NULL:
                {
                int LA254_16 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt254=1;
                }
                else if ( (true) ) {
                    alt254=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 254, 16, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CASE:
                {
                int LA254_17 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt254=1;
                }
                else if ( (((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE))) ) {
                    alt254=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 254, 17, input);

                    throw nvae;

                }
                }
                break;
            case LEFT_PAREN:
                {
                int LA254_21 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt254=1;
                }
                else if ( (true) ) {
                    alt254=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 254, 21, input);

                    throw nvae;

                }
                }
                break;
            case APPROXIMATE_NUM_LIT:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case EXACT_NUM_LIT:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
                {
                alt254=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;

            }

            switch (alt254) {
                case 1 :
                    // PLSQL_DMLParser.g:1072:49: {...}? seq_of_statements
                    {
                    if ( !((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "searched_case_when_part", "$case_statement::isStatement");
                    }

                    pushFollow(FOLLOW_seq_of_statements_in_searched_case_when_part10503);
                    seq_of_statements769=gPLSQLParser.seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements769.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1072:101: expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_searched_case_when_part10507);
                    expression_wrapper770=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper770.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "searched_case_when_part"


    public static class case_else_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_else_part"
    // PLSQL_DMLParser.g:1075:1: case_else_part : else_key ^ ({...}? seq_of_statements | expression_wrapper ) ;
    public final case_else_part_return case_else_part() throws RecognitionException {
        case_else_part_return retval = new case_else_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.else_key_return else_key771 =null;

        PLSQLParser.seq_of_statements_return seq_of_statements772 =null;

        expression_wrapper_return expression_wrapper773 =null;



        try {
            // PLSQL_DMLParser.g:1076:5: ( else_key ^ ({...}? seq_of_statements | expression_wrapper ) )
            // PLSQL_DMLParser.g:1076:10: else_key ^ ({...}? seq_of_statements | expression_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_else_key_in_case_else_part10528);
            else_key771=gPLSQLParser.else_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(else_key771.getTree(), root_0);

            // PLSQL_DMLParser.g:1076:20: ({...}? seq_of_statements | expression_wrapper )
            int alt255=2;
            switch ( input.LA(1) ) {
            case LESS_THAN_OP:
            case PLSQL_RESERVED_IF:
            case PLSQL_RESERVED_LOCK:
            case SQL92_RESERVED_ALTER:
            case SQL92_RESERVED_BEGIN:
            case SQL92_RESERVED_CREATE:
            case SQL92_RESERVED_DECLARE:
            case SQL92_RESERVED_DELETE:
            case SQL92_RESERVED_FETCH:
            case SQL92_RESERVED_FOR:
            case SQL92_RESERVED_GOTO:
            case SQL92_RESERVED_GRANT:
            case SQL92_RESERVED_INSERT:
            case SQL92_RESERVED_PROCEDURE:
            case SQL92_RESERVED_SELECT:
            case SQL92_RESERVED_UPDATE:
            case SQL92_RESERVED_WITH:
                {
                alt255=1;
                }
                break;
            case REGULAR_ID:
                {
                int LA255_4 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 4, input);

                    throw nvae;

                }
                }
                break;
            case INTRODUCER:
                {
                int LA255_7 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 7, input);

                    throw nvae;

                }
                }
                break;
            case DELIMITED_ID:
                {
                int LA255_8 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 8, input);

                    throw nvae;

                }
                }
                break;
            case BINDVAR:
                {
                int LA255_9 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 9, input);

                    throw nvae;

                }
                }
                break;
            case COLON:
                {
                int LA255_10 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 10, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CURSOR:
                {
                int LA255_11 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 11, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_NULL:
                {
                int LA255_16 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 16, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CASE:
                {
                int LA255_17 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt255=1;
                }
                else if ( (((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE))) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 17, input);

                    throw nvae;

                }
                }
                break;
            case LEFT_PAREN:
                {
                int LA255_21 = input.LA(2);

                if ( ((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                    alt255=1;
                }
                else if ( (true) ) {
                    alt255=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 255, 21, input);

                    throw nvae;

                }
                }
                break;
            case APPROXIMATE_NUM_LIT:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case EXACT_NUM_LIT:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NOT:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
                {
                alt255=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;

            }

            switch (alt255) {
                case 1 :
                    // PLSQL_DMLParser.g:1076:21: {...}? seq_of_statements
                    {
                    if ( !((((case_statement_scope)case_statement_stack.peek()).isStatement)) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "case_else_part", "$case_statement::isStatement");
                    }

                    pushFollow(FOLLOW_seq_of_statements_in_case_else_part10534);
                    seq_of_statements772=gPLSQLParser.seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements772.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1076:73: expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_case_else_part10538);
                    expression_wrapper773=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper773.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_else_part"


    public static class atom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "atom"
    // PLSQL_DMLParser.g:1080:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ! ( ( select_key | with_key )=> subquery RIGHT_PAREN ! ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN !) );
    public final atom_return atom() throws RecognitionException {
        atom_return retval = new atom_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN779=null;
        Token RIGHT_PAREN781=null;
        Token RIGHT_PAREN784=null;
        PLSQLParser_PLSQLCommons.table_element_return table_element774 =null;

        PLSQLParser_PLSQLCommons.outer_join_sign_return outer_join_sign775 =null;

        PLSQLParser_PLSQLCommons.bind_variable_return bind_variable776 =null;

        PLSQLParser_PLSQLCommons.constant_return constant777 =null;

        PLSQLParser_PLSQLCommons.general_element_return general_element778 =null;

        subquery_return subquery780 =null;

        subquery_operation_part_return subquery_operation_part782 =null;

        expression_or_vector_return expression_or_vector783 =null;


        Object LEFT_PAREN779_tree=null;
        Object RIGHT_PAREN781_tree=null;
        Object RIGHT_PAREN784_tree=null;

        try {
            // PLSQL_DMLParser.g:1085:5: ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ! ( ( select_key | with_key )=> subquery RIGHT_PAREN ! ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN !) )
            int alt258=5;
            alt258 = dfa258.predict(input);
            switch (alt258) {
                case 1 :
                    // PLSQL_DMLParser.g:1085:10: ( table_element outer_join_sign )=> table_element outer_join_sign
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_table_element_in_atom10577);
                    table_element774=gPLSQLParser.table_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_element774.getTree());

                    pushFollow(FOLLOW_outer_join_sign_in_atom10579);
                    outer_join_sign775=gPLSQLParser.outer_join_sign();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign775.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1086:10: bind_variable
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_bind_variable_in_atom10590);
                    bind_variable776=gPLSQLParser.bind_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bind_variable776.getTree());

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:1087:10: constant
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_constant_in_atom10601);
                    constant777=gPLSQLParser.constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant777.getTree());

                    }
                    break;
                case 4 :
                    // PLSQL_DMLParser.g:1088:10: general_element
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_general_element_in_atom10612);
                    general_element778=gPLSQLParser.general_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element778.getTree());

                    }
                    break;
                case 5 :
                    // PLSQL_DMLParser.g:1089:10: LEFT_PAREN ! ( ( select_key | with_key )=> subquery RIGHT_PAREN ! ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN !)
                    {
                    root_0 = (Object)adaptor.nil();


                    LEFT_PAREN779=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_atom10623); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1090:10: ( ( select_key | with_key )=> subquery RIGHT_PAREN ! ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN !)
                    int alt257=2;
                    int LA257_0 = input.LA(1);

                    if ( (LA257_0==SQL92_RESERVED_SELECT) && (synpred47_PLSQL_DMLParser())) {
                        alt257=1;
                    }
                    else if ( (LA257_0==LEFT_PAREN) ) {
                        int LA257_2 = input.LA(2);

                        if ( (synpred47_PLSQL_DMLParser()) ) {
                            alt257=1;
                        }
                        else if ( (true) ) {
                            alt257=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 257, 2, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA257_0==APPROXIMATE_NUM_LIT||LA257_0==BINDVAR||(LA257_0 >= CHAR_STRING && LA257_0 <= COLON)||LA257_0==DELIMITED_ID||LA257_0==EXACT_NUM_LIT||LA257_0==INTRODUCER||(LA257_0 >= MINUS_SIGN && LA257_0 <= NATIONAL_CHAR_STRING_LIT)||LA257_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA257_0==PLUS_SIGN||LA257_0==REGULAR_ID||LA257_0==SQL92_RESERVED_ALL||LA257_0==SQL92_RESERVED_ANY||LA257_0==SQL92_RESERVED_CASE||(LA257_0 >= SQL92_RESERVED_CURSOR && LA257_0 <= SQL92_RESERVED_DATE)||LA257_0==SQL92_RESERVED_DEFAULT||LA257_0==SQL92_RESERVED_DISTINCT||(LA257_0 >= SQL92_RESERVED_EXISTS && LA257_0 <= SQL92_RESERVED_FALSE)||(LA257_0 >= SQL92_RESERVED_NOT && LA257_0 <= SQL92_RESERVED_NULL)||LA257_0==SQL92_RESERVED_PRIOR||LA257_0==SQL92_RESERVED_TRUE||LA257_0==UNSIGNED_INTEGER) ) {
                        alt257=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 257, 0, input);

                        throw nvae;

                    }
                    switch (alt257) {
                        case 1 :
                            // PLSQL_DMLParser.g:1091:15: ( select_key | with_key )=> subquery RIGHT_PAREN ! ( subquery_operation_part )*
                            {
                            pushFollow(FOLLOW_subquery_in_atom10661);
                            subquery780=subquery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery780.getTree());

                            RIGHT_PAREN781=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_atom10663); if (state.failed) return retval;

                            // PLSQL_DMLParser.g:1091:64: ( subquery_operation_part )*
                            loop256:
                            do {
                                int alt256=2;
                                switch ( input.LA(1) ) {
                                case SQL92_RESERVED_UNION:
                                    {
                                    alt256=1;
                                    }
                                    break;
                                case SQL92_RESERVED_INTERSECT:
                                    {
                                    alt256=1;
                                    }
                                    break;
                                case PLSQL_RESERVED_MINUS:
                                    {
                                    alt256=1;
                                    }
                                    break;

                                }

                                switch (alt256) {
                            	case 1 :
                            	    // PLSQL_DMLParser.g:1091:64: subquery_operation_part
                            	    {
                            	    pushFollow(FOLLOW_subquery_operation_part_in_atom10666);
                            	    subquery_operation_part782=subquery_operation_part();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery_operation_part782.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop256;
                                }
                            } while (true);


                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1092:17: expression_or_vector RIGHT_PAREN !
                            {
                            pushFollow(FOLLOW_expression_or_vector_in_atom10685);
                            expression_or_vector783=expression_or_vector();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_or_vector783.getTree());

                            RIGHT_PAREN784=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_atom10687); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "atom"


    public static class expression_or_vector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression_or_vector"
    // PLSQL_DMLParser.g:1096:1: expression_or_vector : expression ( vector_expr )? -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr ) -> expression ;
    public final expression_or_vector_return expression_or_vector() throws RecognitionException {
        expression_or_vector_return retval = new expression_or_vector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        expression_return expression785 =null;

        vector_expr_return vector_expr786 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_vector_expr=new RewriteRuleSubtreeStream(adaptor,"rule vector_expr");
            int mode = 0;    
        try {
            // PLSQL_DMLParser.g:1098:5: ( expression ( vector_expr )? -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr ) -> expression )
            // PLSQL_DMLParser.g:1098:10: expression ( vector_expr )?
            {
            pushFollow(FOLLOW_expression_in_expression_or_vector10727);
            expression785=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression785.getTree());

            // PLSQL_DMLParser.g:1098:21: ( vector_expr )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==COMMA) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // PLSQL_DMLParser.g:1098:22: vector_expr
                    {
                    pushFollow(FOLLOW_vector_expr_in_expression_or_vector10730);
                    vector_expr786=vector_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_vector_expr.add(vector_expr786.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, expression, vector_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1099:9: -> {mode == 1}? ^( VECTOR_EXPR ^( EXPR expression ) vector_expr )
            if (mode == 1) {
                // PLSQL_DMLParser.g:1099:25: ^( VECTOR_EXPR ^( EXPR expression ) vector_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VECTOR_EXPR, "VECTOR_EXPR")
                , root_1);

                // PLSQL_DMLParser.g:1099:39: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_vector_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1100:9: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression_or_vector"


    public static class vector_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "vector_expr"
    // PLSQL_DMLParser.g:1103:1: vector_expr : COMMA expression ( COMMA expression )* -> ( ^( EXPR expression ) )+ ;
    public final vector_expr_return vector_expr() throws RecognitionException {
        vector_expr_return retval = new vector_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA787=null;
        Token COMMA789=null;
        expression_return expression788 =null;

        expression_return expression790 =null;


        Object COMMA787_tree=null;
        Object COMMA789_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // PLSQL_DMLParser.g:1104:5: ( COMMA expression ( COMMA expression )* -> ( ^( EXPR expression ) )+ )
            // PLSQL_DMLParser.g:1104:10: COMMA expression ( COMMA expression )*
            {
            COMMA787=(Token)match(input,COMMA,FOLLOW_COMMA_in_vector_expr10790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA787);


            pushFollow(FOLLOW_expression_in_vector_expr10792);
            expression788=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression788.getTree());

            // PLSQL_DMLParser.g:1104:27: ( COMMA expression )*
            loop260:
            do {
                int alt260=2;
                int LA260_0 = input.LA(1);

                if ( (LA260_0==COMMA) ) {
                    alt260=1;
                }


                switch (alt260) {
            	case 1 :
            	    // PLSQL_DMLParser.g:1104:28: COMMA expression
            	    {
            	    COMMA789=(Token)match(input,COMMA,FOLLOW_COMMA_in_vector_expr10795); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA789);


            	    pushFollow(FOLLOW_expression_in_vector_expr10797);
            	    expression790=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression790.getTree());

            	    }
            	    break;

            	default :
            	    break loop260;
                }
            } while (true);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1105:9: -> ( ^( EXPR expression ) )+
            {
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    // PLSQL_DMLParser.g:1105:12: ^( EXPR expression )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(EXPR, "EXPR")
                    , root_1);

                    adaptor.addChild(root_1, stream_expression.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_expression.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "vector_expr"


    public static class quantified_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "quantified_expression"
    // PLSQL_DMLParser.g:1108:1: quantified_expression : ( some_key ^| exists_key ^| all_key ^| any_key ^) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN ! subquery RIGHT_PAREN !| LEFT_PAREN ! expression_wrapper RIGHT_PAREN !) ;
    public final quantified_expression_return quantified_expression() throws RecognitionException {
        quantified_expression_return retval = new quantified_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN795=null;
        Token RIGHT_PAREN797=null;
        Token LEFT_PAREN798=null;
        Token RIGHT_PAREN800=null;
        PLSQLParser_PLSQLKeys.some_key_return some_key791 =null;

        PLSQLParser_PLSQLKeys.exists_key_return exists_key792 =null;

        PLSQLParser_PLSQLKeys.all_key_return all_key793 =null;

        PLSQLParser_PLSQLKeys.any_key_return any_key794 =null;

        subquery_return subquery796 =null;

        expression_wrapper_return expression_wrapper799 =null;


        Object LEFT_PAREN795_tree=null;
        Object RIGHT_PAREN797_tree=null;
        Object LEFT_PAREN798_tree=null;
        Object RIGHT_PAREN800_tree=null;

        try {
            // PLSQL_DMLParser.g:1109:5: ( ( some_key ^| exists_key ^| all_key ^| any_key ^) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN ! subquery RIGHT_PAREN !| LEFT_PAREN ! expression_wrapper RIGHT_PAREN !) )
            // PLSQL_DMLParser.g:1109:10: ( some_key ^| exists_key ^| all_key ^| any_key ^) ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN ! subquery RIGHT_PAREN !| LEFT_PAREN ! expression_wrapper RIGHT_PAREN !)
            {
            root_0 = (Object)adaptor.nil();


            // PLSQL_DMLParser.g:1109:10: ( some_key ^| exists_key ^| all_key ^| any_key ^)
            int alt261=4;
            switch ( input.LA(1) ) {
            case REGULAR_ID:
                {
                alt261=1;
                }
                break;
            case SQL92_RESERVED_EXISTS:
                {
                alt261=2;
                }
                break;
            case SQL92_RESERVED_ALL:
                {
                alt261=3;
                }
                break;
            case SQL92_RESERVED_ANY:
                {
                alt261=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;

            }

            switch (alt261) {
                case 1 :
                    // PLSQL_DMLParser.g:1109:12: some_key ^
                    {
                    pushFollow(FOLLOW_some_key_in_quantified_expression10838);
                    some_key791=gPLSQLParser.some_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(some_key791.getTree(), root_0);

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1109:24: exists_key ^
                    {
                    pushFollow(FOLLOW_exists_key_in_quantified_expression10843);
                    exists_key792=gPLSQLParser.exists_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(exists_key792.getTree(), root_0);

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:1109:38: all_key ^
                    {
                    pushFollow(FOLLOW_all_key_in_quantified_expression10848);
                    all_key793=gPLSQLParser.all_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(all_key793.getTree(), root_0);

                    }
                    break;
                case 4 :
                    // PLSQL_DMLParser.g:1109:49: any_key ^
                    {
                    pushFollow(FOLLOW_any_key_in_quantified_expression10853);
                    any_key794=gPLSQLParser.any_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(any_key794.getTree(), root_0);

                    }
                    break;

            }


            // PLSQL_DMLParser.g:1110:10: ( ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN ! subquery RIGHT_PAREN !| LEFT_PAREN ! expression_wrapper RIGHT_PAREN !)
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==LEFT_PAREN) ) {
                int LA262_1 = input.LA(2);

                if ( (synpred48_PLSQL_DMLParser()) ) {
                    alt262=1;
                }
                else if ( (true) ) {
                    alt262=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 262, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;

            }
            switch (alt262) {
                case 1 :
                    // PLSQL_DMLParser.g:1110:12: ( LEFT_PAREN ( select_key | with_key ) )=> LEFT_PAREN ! subquery RIGHT_PAREN !
                    {
                    LEFT_PAREN795=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_quantified_expression10881); if (state.failed) return retval;

                    pushFollow(FOLLOW_subquery_in_quantified_expression10884);
                    subquery796=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery796.getTree());

                    RIGHT_PAREN797=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_quantified_expression10886); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1111:14: LEFT_PAREN ! expression_wrapper RIGHT_PAREN !
                    {
                    LEFT_PAREN798=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_quantified_expression10902); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_wrapper_in_quantified_expression10905);
                    expression_wrapper799=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper799.getTree());

                    RIGHT_PAREN800=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_quantified_expression10907); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "quantified_expression"


    public static class standard_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "standard_function"
    // PLSQL_DMLParser.g:1115:1: standard_function : ( stantard_function_enabling_over ^ function_argument ( over_clause )? | stantard_function_enabling_using ^ function_argument ( using_clause )? | count_key ^ LEFT_PAREN ! ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ! ( over_clause )? | ( cast_key ^| xmlcast_key ^) LEFT_PAREN ! ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN ! subquery RIGHT_PAREN !) | concatenation_wrapper ) as_key ! type_spec RIGHT_PAREN !| chr_key ^ LEFT_PAREN ! concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN !| collect_key ^ LEFT_PAREN ! ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN !| stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+ | decompose_key ^ LEFT_PAREN ! concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN !| extract_key ^ LEFT_PAREN ! REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN !| ( first_value_key ^| last_value_key ^) LEFT_PAREN ! concatenation_wrapper ( ignore_key ! nulls_key )? RIGHT_PAREN ! over_clause | ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions ^ LEFT_PAREN ! expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN !| translate_key ^ LEFT_PAREN ! expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN !| treat_key ^ LEFT_PAREN ! expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN !| trim_key ^ LEFT_PAREN ! ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN !| xmlagg_key ^ LEFT_PAREN ! expression_wrapper ( order_by_clause )? RIGHT_PAREN ! ( PERIOD general_element_part )? | ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN ! xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlelement_key ^ LEFT_PAREN ! ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlexists_key ^ LEFT_PAREN ! expression_wrapper ( xml_passing_clause )? RIGHT_PAREN !| xmlparse_key ^ LEFT_PAREN ! ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlpi_key ^ LEFT_PAREN ! ( name_key id | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlquery_key ^ LEFT_PAREN ! concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlroot_key ^ LEFT_PAREN ! concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlserialize_key ^ LEFT_PAREN ! ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ! ( PERIOD general_element_part )? | xmltable_key ^ LEFT_PAREN ! ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ! ( PERIOD general_element_part )? );
    public final standard_function_return standard_function() throws RecognitionException {
        standard_function_return retval = new standard_function_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN808=null;
        Token ASTERISK809=null;
        Token RIGHT_PAREN814=null;
        Token LEFT_PAREN818=null;
        Token LEFT_PAREN820=null;
        Token RIGHT_PAREN822=null;
        Token RIGHT_PAREN826=null;
        Token LEFT_PAREN828=null;
        Token RIGHT_PAREN832=null;
        Token LEFT_PAREN834=null;
        Token RIGHT_PAREN839=null;
        Token LEFT_PAREN844=null;
        Token RIGHT_PAREN848=null;
        Token LEFT_PAREN850=null;
        Token REGULAR_ID851=null;
        Token RIGHT_PAREN854=null;
        Token LEFT_PAREN857=null;
        Token RIGHT_PAREN861=null;
        Token LEFT_PAREN869=null;
        Token COMMA871=null;
        Token RIGHT_PAREN875=null;
        Token LEFT_PAREN877=null;
        Token COMMA882=null;
        Token RIGHT_PAREN884=null;
        Token LEFT_PAREN886=null;
        Token RIGHT_PAREN891=null;
        Token LEFT_PAREN893=null;
        Token RIGHT_PAREN900=null;
        Token LEFT_PAREN902=null;
        Token RIGHT_PAREN905=null;
        Token PERIOD906=null;
        Token LEFT_PAREN910=null;
        Token COMMA912=null;
        Token RIGHT_PAREN914=null;
        Token PERIOD915=null;
        Token LEFT_PAREN918=null;
        Token COMMA924=null;
        Token COMMA926=null;
        Token RIGHT_PAREN929=null;
        Token PERIOD930=null;
        Token LEFT_PAREN933=null;
        Token RIGHT_PAREN936=null;
        Token LEFT_PAREN938=null;
        Token RIGHT_PAREN943=null;
        Token PERIOD944=null;
        Token LEFT_PAREN947=null;
        Token COMMA952=null;
        Token RIGHT_PAREN954=null;
        Token PERIOD955=null;
        Token LEFT_PAREN958=null;
        Token RIGHT_PAREN966=null;
        Token PERIOD967=null;
        Token LEFT_PAREN970=null;
        Token COMMA973=null;
        Token RIGHT_PAREN975=null;
        Token PERIOD976=null;
        Token LEFT_PAREN979=null;
        Token RIGHT_PAREN991=null;
        Token PERIOD992=null;
        Token LEFT_PAREN995=null;
        Token COMMA1001=null;
        Token RIGHT_PAREN1003=null;
        Token PERIOD1004=null;
        stantard_function_enabling_over_return stantard_function_enabling_over801 =null;

        PLSQLParser_PLSQLCommons.function_argument_return function_argument802 =null;

        over_clause_return over_clause803 =null;

        stantard_function_enabling_using_return stantard_function_enabling_using804 =null;

        PLSQLParser_PLSQLCommons.function_argument_return function_argument805 =null;

        using_clause_return using_clause806 =null;

        PLSQLParser_PLSQLKeys.count_key_return count_key807 =null;

        PLSQLParser_PLSQLKeys.distinct_key_return distinct_key810 =null;

        PLSQLParser_PLSQLKeys.unique_key_return unique_key811 =null;

        PLSQLParser_PLSQLKeys.all_key_return all_key812 =null;

        concatenation_wrapper_return concatenation_wrapper813 =null;

        over_clause_return over_clause815 =null;

        PLSQLParser_PLSQLKeys.cast_key_return cast_key816 =null;

        PLSQLParser_PLSQLKeys.xmlcast_key_return xmlcast_key817 =null;

        PLSQLParser_PLSQLKeys.multiset_key_return multiset_key819 =null;

        subquery_return subquery821 =null;

        concatenation_wrapper_return concatenation_wrapper823 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key824 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec825 =null;

        PLSQLParser_PLSQLKeys.chr_key_return chr_key827 =null;

        concatenation_wrapper_return concatenation_wrapper829 =null;

        PLSQLParser_PLSQLKeys.using_key_return using_key830 =null;

        PLSQLParser_PLSQLKeys.nchar_cs_key_return nchar_cs_key831 =null;

        PLSQLParser_PLSQLKeys.collect_key_return collect_key833 =null;

        PLSQLParser_PLSQLKeys.distinct_key_return distinct_key835 =null;

        PLSQLParser_PLSQLKeys.unique_key_return unique_key836 =null;

        concatenation_wrapper_return concatenation_wrapper837 =null;

        collect_order_by_part_return collect_order_by_part838 =null;

        stantard_function_enabling_within_or_over_return stantard_function_enabling_within_or_over840 =null;

        PLSQLParser_PLSQLCommons.function_argument_return function_argument841 =null;

        within_or_over_part_return within_or_over_part842 =null;

        PLSQLParser_PLSQLKeys.decompose_key_return decompose_key843 =null;

        concatenation_wrapper_return concatenation_wrapper845 =null;

        PLSQLParser_PLSQLKeys.canonical_key_return canonical_key846 =null;

        PLSQLParser_PLSQLKeys.compatibility_key_return compatibility_key847 =null;

        PLSQLParser_PLSQLKeys.extract_key_return extract_key849 =null;

        PLSQLParser_PLSQLKeys.from_key_return from_key852 =null;

        concatenation_wrapper_return concatenation_wrapper853 =null;

        PLSQLParser_PLSQLKeys.first_value_key_return first_value_key855 =null;

        PLSQLParser_PLSQLKeys.last_value_key_return last_value_key856 =null;

        concatenation_wrapper_return concatenation_wrapper858 =null;

        PLSQLParser_PLSQLKeys.ignore_key_return ignore_key859 =null;

        PLSQLParser_PLSQLKeys.nulls_key_return nulls_key860 =null;

        over_clause_return over_clause862 =null;

        PLSQLParser_PLSQLKeys.first_value_key_return first_value_key863 =null;

        PLSQLParser_PLSQLKeys.last_value_key_return last_value_key864 =null;

        PLSQLParser_PLSQLCommons.function_argument_analytic_return function_argument_analytic865 =null;

        PLSQLParser_PLSQLCommons.respect_or_ignore_nulls_return respect_or_ignore_nulls866 =null;

        over_clause_return over_clause867 =null;

        stantard_function_pedictions_return stantard_function_pedictions868 =null;

        expression_wrapper_return expression_wrapper870 =null;

        expression_wrapper_return expression_wrapper872 =null;

        cost_matrix_clause_return cost_matrix_clause873 =null;

        using_clause_return using_clause874 =null;

        PLSQLParser_PLSQLKeys.translate_key_return translate_key876 =null;

        expression_wrapper_return expression_wrapper878 =null;

        PLSQLParser_PLSQLKeys.using_key_return using_key879 =null;

        PLSQLParser_PLSQLKeys.char_cs_key_return char_cs_key880 =null;

        PLSQLParser_PLSQLKeys.nchar_cs_key_return nchar_cs_key881 =null;

        expression_wrapper_return expression_wrapper883 =null;

        PLSQLParser_PLSQLKeys.treat_key_return treat_key885 =null;

        expression_wrapper_return expression_wrapper887 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key888 =null;

        PLSQLParser_PLSQLKeys.ref_key_return ref_key889 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec890 =null;

        PLSQLParser_PLSQLKeys.trim_key_return trim_key892 =null;

        PLSQLParser_PLSQLKeys.leading_key_return leading_key894 =null;

        PLSQLParser_PLSQLKeys.trailing_key_return trailing_key895 =null;

        PLSQLParser_PLSQLKeys.both_key_return both_key896 =null;

        PLSQLParser_PLSQLCommons.quoted_string_return quoted_string897 =null;

        PLSQLParser_PLSQLKeys.from_key_return from_key898 =null;

        concatenation_wrapper_return concatenation_wrapper899 =null;

        PLSQLParser_PLSQLKeys.xmlagg_key_return xmlagg_key901 =null;

        expression_wrapper_return expression_wrapper903 =null;

        order_by_clause_return order_by_clause904 =null;

        PLSQLParser_PLSQLCommons.general_element_part_return general_element_part907 =null;

        PLSQLParser_PLSQLKeys.xmlcolattval_key_return xmlcolattval_key908 =null;

        PLSQLParser_PLSQLKeys.xmlforest_key_return xmlforest_key909 =null;

        xml_multiuse_expression_element_return xml_multiuse_expression_element911 =null;

        xml_multiuse_expression_element_return xml_multiuse_expression_element913 =null;

        PLSQLParser_PLSQLCommons.general_element_part_return general_element_part916 =null;

        PLSQLParser_PLSQLKeys.xmlelement_key_return xmlelement_key917 =null;

        PLSQLParser_PLSQLKeys.entityescaping_key_return entityescaping_key919 =null;

        PLSQLParser_PLSQLKeys.noentityescaping_key_return noentityescaping_key920 =null;

        PLSQLParser_PLSQLKeys.name_key_return name_key921 =null;

        PLSQLParser_PLSQLKeys.evalname_key_return evalname_key922 =null;

        expression_wrapper_return expression_wrapper923 =null;

        xml_attributes_clause_return xml_attributes_clause925 =null;

        expression_wrapper_return expression_wrapper927 =null;

        PLSQLParser_PLSQLCommons.column_alias_return column_alias928 =null;

        PLSQLParser_PLSQLCommons.general_element_part_return general_element_part931 =null;

        PLSQLParser_PLSQLKeys.xmlexists_key_return xmlexists_key932 =null;

        expression_wrapper_return expression_wrapper934 =null;

        xml_passing_clause_return xml_passing_clause935 =null;

        PLSQLParser_PLSQLKeys.xmlparse_key_return xmlparse_key937 =null;

        PLSQLParser_PLSQLKeys.document_key_return document_key939 =null;

        PLSQLParser_PLSQLKeys.content_key_return content_key940 =null;

        concatenation_wrapper_return concatenation_wrapper941 =null;

        PLSQLParser_PLSQLKeys.wellformed_key_return wellformed_key942 =null;

        PLSQLParser_PLSQLCommons.general_element_part_return general_element_part945 =null;

        PLSQLParser_PLSQLKeys.xmlpi_key_return xmlpi_key946 =null;

        PLSQLParser_PLSQLKeys.name_key_return name_key948 =null;

        PLSQLParser_PLSQLCommons.id_return id949 =null;

        PLSQLParser_PLSQLKeys.evalname_key_return evalname_key950 =null;

        concatenation_wrapper_return concatenation_wrapper951 =null;

        concatenation_wrapper_return concatenation_wrapper953 =null;

        PLSQLParser_PLSQLCommons.general_element_part_return general_element_part956 =null;

        PLSQLParser_PLSQLKeys.xmlquery_key_return xmlquery_key957 =null;

        concatenation_wrapper_return concatenation_wrapper959 =null;

        xml_passing_clause_return xml_passing_clause960 =null;

        PLSQLParser_PLSQLKeys.returning_key_return returning_key961 =null;

        PLSQLParser_PLSQLKeys.content_key_return content_key962 =null;

        PLSQLParser_PLSQLKeys.null_key_return null_key963 =null;

        PLSQLParser_PLSQLKeys.on_key_return on_key964 =null;

        PLSQLParser_PLSQLKeys.empty_key_return empty_key965 =null;

        PLSQLParser_PLSQLCommons.general_element_part_return general_element_part968 =null;

        PLSQLParser_PLSQLKeys.xmlroot_key_return xmlroot_key969 =null;

        concatenation_wrapper_return concatenation_wrapper971 =null;

        xmlroot_param_version_part_return xmlroot_param_version_part972 =null;

        xmlroot_param_standalone_part_return xmlroot_param_standalone_part974 =null;

        PLSQLParser_PLSQLCommons.general_element_part_return general_element_part977 =null;

        PLSQLParser_PLSQLKeys.xmlserialize_key_return xmlserialize_key978 =null;

        PLSQLParser_PLSQLKeys.document_key_return document_key980 =null;

        PLSQLParser_PLSQLKeys.content_key_return content_key981 =null;

        concatenation_wrapper_return concatenation_wrapper982 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key983 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec984 =null;

        xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part985 =null;

        xmlserialize_param_version_part_return xmlserialize_param_version_part986 =null;

        xmlserialize_param_ident_part_return xmlserialize_param_ident_part987 =null;

        PLSQLParser_PLSQLKeys.hide_key_return hide_key988 =null;

        PLSQLParser_PLSQLKeys.show_key_return show_key989 =null;

        PLSQLParser_PLSQLKeys.defaults_key_return defaults_key990 =null;

        PLSQLParser_PLSQLCommons.general_element_part_return general_element_part993 =null;

        PLSQLParser_PLSQLKeys.xmltable_key_return xmltable_key994 =null;

        xml_namespaces_clause_return xml_namespaces_clause996 =null;

        concatenation_wrapper_return concatenation_wrapper997 =null;

        xml_passing_clause_return xml_passing_clause998 =null;

        PLSQLParser_PLSQLKeys.columns_key_return columns_key999 =null;

        xml_table_column_return xml_table_column1000 =null;

        xml_table_column_return xml_table_column1002 =null;

        PLSQLParser_PLSQLCommons.general_element_part_return general_element_part1005 =null;


        Object LEFT_PAREN808_tree=null;
        Object ASTERISK809_tree=null;
        Object RIGHT_PAREN814_tree=null;
        Object LEFT_PAREN818_tree=null;
        Object LEFT_PAREN820_tree=null;
        Object RIGHT_PAREN822_tree=null;
        Object RIGHT_PAREN826_tree=null;
        Object LEFT_PAREN828_tree=null;
        Object RIGHT_PAREN832_tree=null;
        Object LEFT_PAREN834_tree=null;
        Object RIGHT_PAREN839_tree=null;
        Object LEFT_PAREN844_tree=null;
        Object RIGHT_PAREN848_tree=null;
        Object LEFT_PAREN850_tree=null;
        Object REGULAR_ID851_tree=null;
        Object RIGHT_PAREN854_tree=null;
        Object LEFT_PAREN857_tree=null;
        Object RIGHT_PAREN861_tree=null;
        Object LEFT_PAREN869_tree=null;
        Object COMMA871_tree=null;
        Object RIGHT_PAREN875_tree=null;
        Object LEFT_PAREN877_tree=null;
        Object COMMA882_tree=null;
        Object RIGHT_PAREN884_tree=null;
        Object LEFT_PAREN886_tree=null;
        Object RIGHT_PAREN891_tree=null;
        Object LEFT_PAREN893_tree=null;
        Object RIGHT_PAREN900_tree=null;
        Object LEFT_PAREN902_tree=null;
        Object RIGHT_PAREN905_tree=null;
        Object PERIOD906_tree=null;
        Object LEFT_PAREN910_tree=null;
        Object COMMA912_tree=null;
        Object RIGHT_PAREN914_tree=null;
        Object PERIOD915_tree=null;
        Object LEFT_PAREN918_tree=null;
        Object COMMA924_tree=null;
        Object COMMA926_tree=null;
        Object RIGHT_PAREN929_tree=null;
        Object PERIOD930_tree=null;
        Object LEFT_PAREN933_tree=null;
        Object RIGHT_PAREN936_tree=null;
        Object LEFT_PAREN938_tree=null;
        Object RIGHT_PAREN943_tree=null;
        Object PERIOD944_tree=null;
        Object LEFT_PAREN947_tree=null;
        Object COMMA952_tree=null;
        Object RIGHT_PAREN954_tree=null;
        Object PERIOD955_tree=null;
        Object LEFT_PAREN958_tree=null;
        Object RIGHT_PAREN966_tree=null;
        Object PERIOD967_tree=null;
        Object LEFT_PAREN970_tree=null;
        Object COMMA973_tree=null;
        Object RIGHT_PAREN975_tree=null;
        Object PERIOD976_tree=null;
        Object LEFT_PAREN979_tree=null;
        Object RIGHT_PAREN991_tree=null;
        Object PERIOD992_tree=null;
        Object LEFT_PAREN995_tree=null;
        Object COMMA1001_tree=null;
        Object RIGHT_PAREN1003_tree=null;
        Object PERIOD1004_tree=null;

        try {
            // PLSQL_DMLParser.g:1116:5: ( stantard_function_enabling_over ^ function_argument ( over_clause )? | stantard_function_enabling_using ^ function_argument ( using_clause )? | count_key ^ LEFT_PAREN ! ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ! ( over_clause )? | ( cast_key ^| xmlcast_key ^) LEFT_PAREN ! ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN ! subquery RIGHT_PAREN !) | concatenation_wrapper ) as_key ! type_spec RIGHT_PAREN !| chr_key ^ LEFT_PAREN ! concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN !| collect_key ^ LEFT_PAREN ! ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN !| stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+ | decompose_key ^ LEFT_PAREN ! concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN !| extract_key ^ LEFT_PAREN ! REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN !| ( first_value_key ^| last_value_key ^) LEFT_PAREN ! concatenation_wrapper ( ignore_key ! nulls_key )? RIGHT_PAREN ! over_clause | ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause | stantard_function_pedictions ^ LEFT_PAREN ! expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN !| translate_key ^ LEFT_PAREN ! expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN !| treat_key ^ LEFT_PAREN ! expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN !| trim_key ^ LEFT_PAREN ! ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN !| xmlagg_key ^ LEFT_PAREN ! expression_wrapper ( order_by_clause )? RIGHT_PAREN ! ( PERIOD general_element_part )? | ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN ! xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlelement_key ^ LEFT_PAREN ! ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlexists_key ^ LEFT_PAREN ! expression_wrapper ( xml_passing_clause )? RIGHT_PAREN !| xmlparse_key ^ LEFT_PAREN ! ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlpi_key ^ LEFT_PAREN ! ( name_key id | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlquery_key ^ LEFT_PAREN ! concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlroot_key ^ LEFT_PAREN ! concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ! ( PERIOD general_element_part )? | xmlserialize_key ^ LEFT_PAREN ! ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ! ( PERIOD general_element_part )? | xmltable_key ^ LEFT_PAREN ! ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ! ( PERIOD general_element_part )? )
            int alt323=25;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==REGULAR_ID) ) {
                int LA323_1 = input.LA(2);

                if ( ((enablesOverClause(input.LT(1).getText()))) ) {
                    alt323=1;
                }
                else if ( ((enablesUsingClause(input.LT(1).getText()))) ) {
                    alt323=2;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("count"))) ) {
                    alt323=3;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("cast"))||(input.LT(1).getText().equalsIgnoreCase("xmlcast")))) ) {
                    alt323=4;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("chr"))) ) {
                    alt323=5;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("collect"))) ) {
                    alt323=6;
                }
                else if ( ((enablesWithinOrOverClause(input.LT(1).getText()))) ) {
                    alt323=7;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("decompose"))) ) {
                    alt323=8;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("extract"))) ) {
                    alt323=9;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("first_value"))||(input.LT(1).getText().equalsIgnoreCase("last_value")))) ) {
                    alt323=10;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("first_value"))||(input.LT(1).getText().equalsIgnoreCase("last_value")))) ) {
                    alt323=11;
                }
                else if ( ((isStandardPredictionFunction(input.LT(1).getText()))) ) {
                    alt323=12;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("translate"))) ) {
                    alt323=13;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("treat"))) ) {
                    alt323=14;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("trim"))) ) {
                    alt323=15;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlagg"))) ) {
                    alt323=16;
                }
                else if ( (((input.LT(1).getText().equalsIgnoreCase("xmlcolattval"))||(input.LT(1).getText().equalsIgnoreCase("xmlforest")))) ) {
                    alt323=17;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlelement"))) ) {
                    alt323=18;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlexists"))) ) {
                    alt323=19;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlparse"))) ) {
                    alt323=20;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlpi"))) ) {
                    alt323=21;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlquery"))) ) {
                    alt323=22;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlroot"))) ) {
                    alt323=23;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlserialize"))) ) {
                    alt323=24;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("xmltable"))) ) {
                    alt323=25;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 323, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 323, 0, input);

                throw nvae;

            }
            switch (alt323) {
                case 1 :
                    // PLSQL_DMLParser.g:1116:10: stantard_function_enabling_over ^ function_argument ( over_clause )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stantard_function_enabling_over_in_standard_function10939);
                    stantard_function_enabling_over801=stantard_function_enabling_over();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(stantard_function_enabling_over801.getTree(), root_0);

                    pushFollow(FOLLOW_function_argument_in_standard_function10942);
                    function_argument802=gPLSQLParser.function_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_argument802.getTree());

                    // PLSQL_DMLParser.g:1116:61: ( over_clause )?
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==REGULAR_ID) ) {
                        int LA263_1 = input.LA(2);

                        if ( (LA263_1==LEFT_PAREN) ) {
                            int LA263_3 = input.LA(3);

                            if ( (LA263_3==REGULAR_ID) ) {
                                int LA263_10 = input.LA(4);

                                if ( (LA263_10==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
                                    alt263=1;
                                }
                            }
                            else if ( (LA263_3==RIGHT_PAREN||LA263_3==SQL92_RESERVED_ORDER) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
                                alt263=1;
                            }
                        }
                    }
                    switch (alt263) {
                        case 1 :
                            // PLSQL_DMLParser.g:1116:61: over_clause
                            {
                            pushFollow(FOLLOW_over_clause_in_standard_function10944);
                            over_clause803=over_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause803.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1117:10: stantard_function_enabling_using ^ function_argument ( using_clause )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stantard_function_enabling_using_in_standard_function10956);
                    stantard_function_enabling_using804=stantard_function_enabling_using();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(stantard_function_enabling_using804.getTree(), root_0);

                    pushFollow(FOLLOW_function_argument_in_standard_function10959);
                    function_argument805=gPLSQLParser.function_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_argument805.getTree());

                    // PLSQL_DMLParser.g:1117:62: ( using_clause )?
                    int alt264=2;
                    alt264 = dfa264.predict(input);
                    switch (alt264) {
                        case 1 :
                            // PLSQL_DMLParser.g:1117:62: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_standard_function10961);
                            using_clause806=using_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause806.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:1118:10: count_key ^ LEFT_PAREN ! ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper ) RIGHT_PAREN ! ( over_clause )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_count_key_in_standard_function10973);
                    count_key807=gPLSQLParser.count_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(count_key807.getTree(), root_0);

                    LEFT_PAREN808=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function10988); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1120:17: ( ASTERISK | ( distinct_key | unique_key | all_key )? concatenation_wrapper )
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==ASTERISK) ) {
                        alt266=1;
                    }
                    else if ( (LA266_0==APPROXIMATE_NUM_LIT||LA266_0==BINDVAR||(LA266_0 >= CHAR_STRING && LA266_0 <= COLON)||LA266_0==DELIMITED_ID||LA266_0==EXACT_NUM_LIT||LA266_0==INTRODUCER||LA266_0==LEFT_PAREN||(LA266_0 >= MINUS_SIGN && LA266_0 <= NATIONAL_CHAR_STRING_LIT)||LA266_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA266_0==PLUS_SIGN||LA266_0==REGULAR_ID||LA266_0==SQL92_RESERVED_ALL||LA266_0==SQL92_RESERVED_ANY||LA266_0==SQL92_RESERVED_CASE||LA266_0==SQL92_RESERVED_DATE||LA266_0==SQL92_RESERVED_DEFAULT||LA266_0==SQL92_RESERVED_DISTINCT||(LA266_0 >= SQL92_RESERVED_EXISTS && LA266_0 <= SQL92_RESERVED_FALSE)||LA266_0==SQL92_RESERVED_NULL||LA266_0==SQL92_RESERVED_PRIOR||LA266_0==SQL92_RESERVED_TRUE||LA266_0==SQL92_RESERVED_UNIQUE||LA266_0==UNSIGNED_INTEGER) ) {
                        alt266=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 266, 0, input);

                        throw nvae;

                    }
                    switch (alt266) {
                        case 1 :
                            // PLSQL_DMLParser.g:1120:19: ASTERISK
                            {
                            ASTERISK809=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_standard_function11009); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASTERISK809_tree = 
                            (Object)adaptor.create(ASTERISK809)
                            ;
                            adaptor.addChild(root_0, ASTERISK809_tree);
                            }

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1120:30: ( distinct_key | unique_key | all_key )? concatenation_wrapper
                            {
                            // PLSQL_DMLParser.g:1120:30: ( distinct_key | unique_key | all_key )?
                            int alt265=4;
                            switch ( input.LA(1) ) {
                                case SQL92_RESERVED_DISTINCT:
                                    {
                                    alt265=1;
                                    }
                                    break;
                                case SQL92_RESERVED_UNIQUE:
                                    {
                                    alt265=2;
                                    }
                                    break;
                                case SQL92_RESERVED_ALL:
                                    {
                                    alt265=3;
                                    }
                                    break;
                            }

                            switch (alt265) {
                                case 1 :
                                    // PLSQL_DMLParser.g:1120:31: distinct_key
                                    {
                                    pushFollow(FOLLOW_distinct_key_in_standard_function11014);
                                    distinct_key810=gPLSQLParser.distinct_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, distinct_key810.getTree());

                                    }
                                    break;
                                case 2 :
                                    // PLSQL_DMLParser.g:1120:44: unique_key
                                    {
                                    pushFollow(FOLLOW_unique_key_in_standard_function11016);
                                    unique_key811=gPLSQLParser.unique_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unique_key811.getTree());

                                    }
                                    break;
                                case 3 :
                                    // PLSQL_DMLParser.g:1120:55: all_key
                                    {
                                    pushFollow(FOLLOW_all_key_in_standard_function11018);
                                    all_key812=gPLSQLParser.all_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, all_key812.getTree());

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11022);
                            concatenation_wrapper813=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper813.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN814=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11038); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1121:26: ( over_clause )?
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==REGULAR_ID) ) {
                        int LA267_1 = input.LA(2);

                        if ( (LA267_1==LEFT_PAREN) ) {
                            int LA267_3 = input.LA(3);

                            if ( (LA267_3==REGULAR_ID) ) {
                                int LA267_10 = input.LA(4);

                                if ( (LA267_10==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
                                    alt267=1;
                                }
                            }
                            else if ( (LA267_3==RIGHT_PAREN||LA267_3==SQL92_RESERVED_ORDER) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
                                alt267=1;
                            }
                        }
                    }
                    switch (alt267) {
                        case 1 :
                            // PLSQL_DMLParser.g:1121:26: over_clause
                            {
                            pushFollow(FOLLOW_over_clause_in_standard_function11041);
                            over_clause815=over_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause815.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // PLSQL_DMLParser.g:1122:10: ( cast_key ^| xmlcast_key ^) LEFT_PAREN ! ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN ! subquery RIGHT_PAREN !) | concatenation_wrapper ) as_key ! type_spec RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    // PLSQL_DMLParser.g:1122:10: ( cast_key ^| xmlcast_key ^)
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==REGULAR_ID) ) {
                        int LA268_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("cast"))) ) {
                            alt268=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlcast"))) ) {
                            alt268=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 268, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 268, 0, input);

                        throw nvae;

                    }
                    switch (alt268) {
                        case 1 :
                            // PLSQL_DMLParser.g:1122:11: cast_key ^
                            {
                            pushFollow(FOLLOW_cast_key_in_standard_function11054);
                            cast_key816=gPLSQLParser.cast_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(cast_key816.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1122:21: xmlcast_key ^
                            {
                            pushFollow(FOLLOW_xmlcast_key_in_standard_function11057);
                            xmlcast_key817=gPLSQLParser.xmlcast_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlcast_key817.getTree(), root_0);

                            }
                            break;

                    }


                    LEFT_PAREN818=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11074); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1124:17: ( ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN ! subquery RIGHT_PAREN !) | concatenation_wrapper )
                    int alt269=2;
                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==REGULAR_ID) ) {
                        int LA269_1 = input.LA(2);

                        if ( ((((input.LT(1).getText().equalsIgnoreCase("multiset"))&&(input.LT(1).getText().equalsIgnoreCase("multiset")))&&synpred49_PLSQL_DMLParser())) ) {
                            alt269=1;
                        }
                        else if ( (true) ) {
                            alt269=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 269, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA269_0==APPROXIMATE_NUM_LIT||LA269_0==BINDVAR||(LA269_0 >= CHAR_STRING && LA269_0 <= COLON)||LA269_0==DELIMITED_ID||LA269_0==EXACT_NUM_LIT||LA269_0==INTRODUCER||LA269_0==LEFT_PAREN||(LA269_0 >= MINUS_SIGN && LA269_0 <= NATIONAL_CHAR_STRING_LIT)||LA269_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA269_0==PLUS_SIGN||LA269_0==SQL92_RESERVED_ALL||LA269_0==SQL92_RESERVED_ANY||LA269_0==SQL92_RESERVED_CASE||LA269_0==SQL92_RESERVED_DATE||LA269_0==SQL92_RESERVED_DEFAULT||LA269_0==SQL92_RESERVED_DISTINCT||(LA269_0 >= SQL92_RESERVED_EXISTS && LA269_0 <= SQL92_RESERVED_FALSE)||LA269_0==SQL92_RESERVED_NULL||LA269_0==SQL92_RESERVED_PRIOR||LA269_0==SQL92_RESERVED_TRUE||LA269_0==UNSIGNED_INTEGER) ) {
                        alt269=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 269, 0, input);

                        throw nvae;

                    }
                    switch (alt269) {
                        case 1 :
                            // PLSQL_DMLParser.g:1124:19: ( multiset_key LEFT_PAREN ( select_key | with_key ) )=> ( multiset_key ! LEFT_PAREN ! subquery RIGHT_PAREN !)
                            {
                            // PLSQL_DMLParser.g:1124:70: ( multiset_key ! LEFT_PAREN ! subquery RIGHT_PAREN !)
                            // PLSQL_DMLParser.g:1124:71: multiset_key ! LEFT_PAREN ! subquery RIGHT_PAREN !
                            {
                            pushFollow(FOLLOW_multiset_key_in_standard_function11110);
                            multiset_key819=gPLSQLParser.multiset_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            LEFT_PAREN820=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11113); if (state.failed) return retval;

                            pushFollow(FOLLOW_subquery_in_standard_function11116);
                            subquery821=subquery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery821.getTree());

                            RIGHT_PAREN822=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11118); if (state.failed) return retval;

                            }


                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1125:19: concatenation_wrapper
                            {
                            pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11140);
                            concatenation_wrapper823=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper823.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_as_key_in_standard_function11176);
                    as_key824=gPLSQLParser.as_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_type_spec_in_standard_function11179);
                    type_spec825=gPLSQLParser.type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec825.getTree());

                    RIGHT_PAREN826=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11193); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // PLSQL_DMLParser.g:1129:10: chr_key ^ LEFT_PAREN ! concatenation_wrapper using_key ! nchar_cs_key RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_chr_key_in_standard_function11205);
                    chr_key827=gPLSQLParser.chr_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(chr_key827.getTree(), root_0);

                    LEFT_PAREN828=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11220); if (state.failed) return retval;

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11240);
                    concatenation_wrapper829=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper829.getTree());

                    pushFollow(FOLLOW_using_key_in_standard_function11242);
                    using_key830=gPLSQLParser.using_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_nchar_cs_key_in_standard_function11245);
                    nchar_cs_key831=gPLSQLParser.nchar_cs_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nchar_cs_key831.getTree());

                    RIGHT_PAREN832=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11260); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // PLSQL_DMLParser.g:1133:10: collect_key ^ LEFT_PAREN ! ( distinct_key | unique_key )? concatenation_wrapper ( collect_order_by_part )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_collect_key_in_standard_function11272);
                    collect_key833=gPLSQLParser.collect_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(collect_key833.getTree(), root_0);

                    LEFT_PAREN834=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11287); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1135:17: ( distinct_key | unique_key )?
                    int alt270=3;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==SQL92_RESERVED_DISTINCT) ) {
                        alt270=1;
                    }
                    else if ( (LA270_0==SQL92_RESERVED_UNIQUE) ) {
                        alt270=2;
                    }
                    switch (alt270) {
                        case 1 :
                            // PLSQL_DMLParser.g:1135:18: distinct_key
                            {
                            pushFollow(FOLLOW_distinct_key_in_standard_function11308);
                            distinct_key835=gPLSQLParser.distinct_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, distinct_key835.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1135:31: unique_key
                            {
                            pushFollow(FOLLOW_unique_key_in_standard_function11310);
                            unique_key836=gPLSQLParser.unique_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unique_key836.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11314);
                    concatenation_wrapper837=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper837.getTree());

                    // PLSQL_DMLParser.g:1135:66: ( collect_order_by_part )?
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==SQL92_RESERVED_ORDER) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            // PLSQL_DMLParser.g:1135:66: collect_order_by_part
                            {
                            pushFollow(FOLLOW_collect_order_by_part_in_standard_function11316);
                            collect_order_by_part838=collect_order_by_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, collect_order_by_part838.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN839=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11331); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // PLSQL_DMLParser.g:1137:10: stantard_function_enabling_within_or_over ^ function_argument ( within_or_over_part )+
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stantard_function_enabling_within_or_over_in_standard_function11343);
                    stantard_function_enabling_within_or_over840=stantard_function_enabling_within_or_over();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(stantard_function_enabling_within_or_over840.getTree(), root_0);

                    pushFollow(FOLLOW_function_argument_in_standard_function11359);
                    function_argument841=gPLSQLParser.function_argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_argument841.getTree());

                    // PLSQL_DMLParser.g:1138:31: ( within_or_over_part )+
                    int cnt272=0;
                    loop272:
                    do {
                        int alt272=2;
                        int LA272_0 = input.LA(1);

                        if ( (LA272_0==REGULAR_ID) ) {
                            int LA272_2 = input.LA(2);

                            if ( (LA272_2==LEFT_PAREN) ) {
                                int LA272_3 = input.LA(3);

                                if ( (LA272_3==REGULAR_ID) ) {
                                    int LA272_12 = input.LA(4);

                                    if ( (LA272_12==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
                                        alt272=1;
                                    }


                                }
                                else if ( (LA272_3==RIGHT_PAREN||LA272_3==SQL92_RESERVED_ORDER) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
                                    alt272=1;
                                }


                            }
                            else if ( (LA272_2==SQL92_RESERVED_GROUP) ) {
                                int LA272_4 = input.LA(3);

                                if ( (LA272_4==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("within")))) {
                                    alt272=1;
                                }


                            }


                        }


                        switch (alt272) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:1138:31: within_or_over_part
                    	    {
                    	    pushFollow(FOLLOW_within_or_over_part_in_standard_function11361);
                    	    within_or_over_part842=within_or_over_part();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, within_or_over_part842.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt272 >= 1 ) break loop272;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(272, input);
                                throw eee;
                        }
                        cnt272++;
                    } while (true);


                    }
                    break;
                case 8 :
                    // PLSQL_DMLParser.g:1139:10: decompose_key ^ LEFT_PAREN ! concatenation_wrapper ( canonical_key | compatibility_key )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_decompose_key_in_standard_function11373);
                    decompose_key843=gPLSQLParser.decompose_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(decompose_key843.getTree(), root_0);

                    LEFT_PAREN844=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11388); if (state.failed) return retval;

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11408);
                    concatenation_wrapper845=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper845.getTree());

                    // PLSQL_DMLParser.g:1141:39: ( canonical_key | compatibility_key )?
                    int alt273=3;
                    int LA273_0 = input.LA(1);

                    if ( (LA273_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("canonical"))||(input.LT(1).getText().equalsIgnoreCase("compatibility"))))) {
                        int LA273_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("canonical"))) ) {
                            alt273=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("compatibility"))) ) {
                            alt273=2;
                        }
                    }
                    switch (alt273) {
                        case 1 :
                            // PLSQL_DMLParser.g:1141:40: canonical_key
                            {
                            pushFollow(FOLLOW_canonical_key_in_standard_function11411);
                            canonical_key846=gPLSQLParser.canonical_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, canonical_key846.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1141:54: compatibility_key
                            {
                            pushFollow(FOLLOW_compatibility_key_in_standard_function11413);
                            compatibility_key847=gPLSQLParser.compatibility_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, compatibility_key847.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN848=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11430); if (state.failed) return retval;

                    }
                    break;
                case 9 :
                    // PLSQL_DMLParser.g:1143:10: extract_key ^ LEFT_PAREN ! REGULAR_ID from_key ! concatenation_wrapper RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extract_key_in_standard_function11442);
                    extract_key849=gPLSQLParser.extract_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(extract_key849.getTree(), root_0);

                    LEFT_PAREN850=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11457); if (state.failed) return retval;

                    REGULAR_ID851=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_standard_function11476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REGULAR_ID851_tree = 
                    (Object)adaptor.create(REGULAR_ID851)
                    ;
                    adaptor.addChild(root_0, REGULAR_ID851_tree);
                    }

                    pushFollow(FOLLOW_from_key_in_standard_function11478);
                    from_key852=gPLSQLParser.from_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11481);
                    concatenation_wrapper853=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper853.getTree());

                    RIGHT_PAREN854=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11496); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // PLSQL_DMLParser.g:1147:10: ( first_value_key ^| last_value_key ^) LEFT_PAREN ! concatenation_wrapper ( ignore_key ! nulls_key )? RIGHT_PAREN ! over_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    // PLSQL_DMLParser.g:1147:10: ( first_value_key ^| last_value_key ^)
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("first_value"))||(input.LT(1).getText().equalsIgnoreCase("last_value"))))) {
                        int LA274_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("first_value"))) ) {
                            alt274=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("last_value"))) ) {
                            alt274=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 274, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 274, 0, input);

                        throw nvae;

                    }
                    switch (alt274) {
                        case 1 :
                            // PLSQL_DMLParser.g:1147:11: first_value_key ^
                            {
                            pushFollow(FOLLOW_first_value_key_in_standard_function11509);
                            first_value_key855=gPLSQLParser.first_value_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(first_value_key855.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1147:28: last_value_key ^
                            {
                            pushFollow(FOLLOW_last_value_key_in_standard_function11512);
                            last_value_key856=gPLSQLParser.last_value_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(last_value_key856.getTree(), root_0);

                            }
                            break;

                    }


                    LEFT_PAREN857=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11529); if (state.failed) return retval;

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11548);
                    concatenation_wrapper858=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper858.getTree());

                    // PLSQL_DMLParser.g:1149:39: ( ignore_key ! nulls_key )?
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("ignore")))) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            // PLSQL_DMLParser.g:1149:40: ignore_key ! nulls_key
                            {
                            pushFollow(FOLLOW_ignore_key_in_standard_function11551);
                            ignore_key859=gPLSQLParser.ignore_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            pushFollow(FOLLOW_nulls_key_in_standard_function11554);
                            nulls_key860=gPLSQLParser.nulls_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nulls_key860.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN861=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11571); if (state.failed) return retval;

                    pushFollow(FOLLOW_over_clause_in_standard_function11574);
                    over_clause862=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause862.getTree());

                    }
                    break;
                case 11 :
                    // PLSQL_DMLParser.g:1151:10: ( first_value_key ^| last_value_key ^) function_argument_analytic ( respect_or_ignore_nulls )? over_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    // PLSQL_DMLParser.g:1151:10: ( first_value_key ^| last_value_key ^)
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("first_value"))||(input.LT(1).getText().equalsIgnoreCase("last_value"))))) {
                        int LA276_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("first_value"))) ) {
                            alt276=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("last_value"))) ) {
                            alt276=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 276, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 276, 0, input);

                        throw nvae;

                    }
                    switch (alt276) {
                        case 1 :
                            // PLSQL_DMLParser.g:1151:11: first_value_key ^
                            {
                            pushFollow(FOLLOW_first_value_key_in_standard_function11586);
                            first_value_key863=gPLSQLParser.first_value_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(first_value_key863.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1151:28: last_value_key ^
                            {
                            pushFollow(FOLLOW_last_value_key_in_standard_function11589);
                            last_value_key864=gPLSQLParser.last_value_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(last_value_key864.getTree(), root_0);

                            }
                            break;

                    }


                    pushFollow(FOLLOW_function_argument_analytic_in_standard_function11606);
                    function_argument_analytic865=gPLSQLParser.function_argument_analytic();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_argument_analytic865.getTree());

                    // PLSQL_DMLParser.g:1153:14: ( respect_or_ignore_nulls )?
                    int alt277=2;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("over"))||(input.LT(1).getText().equalsIgnoreCase("respect"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                        int LA277_1 = input.LA(2);

                        if ( (LA277_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("respect"))||(input.LT(1).getText().equalsIgnoreCase("ignore"))))) {
                            alt277=1;
                        }
                    }
                    switch (alt277) {
                        case 1 :
                            // PLSQL_DMLParser.g:1153:14: respect_or_ignore_nulls
                            {
                            pushFollow(FOLLOW_respect_or_ignore_nulls_in_standard_function11621);
                            respect_or_ignore_nulls866=gPLSQLParser.respect_or_ignore_nulls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, respect_or_ignore_nulls866.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_over_clause_in_standard_function11624);
                    over_clause867=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause867.getTree());

                    }
                    break;
                case 12 :
                    // PLSQL_DMLParser.g:1154:10: stantard_function_pedictions ^ LEFT_PAREN ! expression_wrapper ( COMMA expression_wrapper )* ( cost_matrix_clause )? ( using_clause )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_stantard_function_pedictions_in_standard_function11635);
                    stantard_function_pedictions868=stantard_function_pedictions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(stantard_function_pedictions868.getTree(), root_0);

                    LEFT_PAREN869=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11650); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_wrapper_in_standard_function11669);
                    expression_wrapper870=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper870.getTree());

                    // PLSQL_DMLParser.g:1156:36: ( COMMA expression_wrapper )*
                    loop278:
                    do {
                        int alt278=2;
                        int LA278_0 = input.LA(1);

                        if ( (LA278_0==COMMA) ) {
                            alt278=1;
                        }


                        switch (alt278) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:1156:37: COMMA expression_wrapper
                    	    {
                    	    COMMA871=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function11672); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA871_tree = 
                    	    (Object)adaptor.create(COMMA871)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA871_tree);
                    	    }

                    	    pushFollow(FOLLOW_expression_wrapper_in_standard_function11674);
                    	    expression_wrapper872=expression_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper872.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop278;
                        }
                    } while (true);


                    // PLSQL_DMLParser.g:1156:64: ( cost_matrix_clause )?
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("cost")))) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            // PLSQL_DMLParser.g:1156:64: cost_matrix_clause
                            {
                            pushFollow(FOLLOW_cost_matrix_clause_in_standard_function11678);
                            cost_matrix_clause873=cost_matrix_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cost_matrix_clause873.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1156:84: ( using_clause )?
                    int alt280=2;
                    int LA280_0 = input.LA(1);

                    if ( (LA280_0==PLSQL_NON_RESERVED_USING) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            // PLSQL_DMLParser.g:1156:84: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_standard_function11681);
                            using_clause874=using_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, using_clause874.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN875=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11697); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // PLSQL_DMLParser.g:1158:10: translate_key ^ LEFT_PAREN ! expression_wrapper ( using_key ! ( char_cs_key | nchar_cs_key ) )? ( COMMA expression_wrapper )* RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_translate_key_in_standard_function11709);
                    translate_key876=gPLSQLParser.translate_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(translate_key876.getTree(), root_0);

                    LEFT_PAREN877=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11724); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_wrapper_in_standard_function11744);
                    expression_wrapper878=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper878.getTree());

                    // PLSQL_DMLParser.g:1160:36: ( using_key ! ( char_cs_key | nchar_cs_key ) )?
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==PLSQL_NON_RESERVED_USING) ) {
                        alt282=1;
                    }
                    switch (alt282) {
                        case 1 :
                            // PLSQL_DMLParser.g:1160:37: using_key ! ( char_cs_key | nchar_cs_key )
                            {
                            pushFollow(FOLLOW_using_key_in_standard_function11747);
                            using_key879=gPLSQLParser.using_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            // PLSQL_DMLParser.g:1160:48: ( char_cs_key | nchar_cs_key )
                            int alt281=2;
                            int LA281_0 = input.LA(1);

                            if ( (LA281_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("char_cs"))||(input.LT(1).getText().equalsIgnoreCase("nchar_cs"))))) {
                                int LA281_1 = input.LA(2);

                                if ( ((input.LT(1).getText().equalsIgnoreCase("char_cs"))) ) {
                                    alt281=1;
                                }
                                else if ( ((input.LT(1).getText().equalsIgnoreCase("nchar_cs"))) ) {
                                    alt281=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 281, 1, input);

                                    throw nvae;

                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 281, 0, input);

                                throw nvae;

                            }
                            switch (alt281) {
                                case 1 :
                                    // PLSQL_DMLParser.g:1160:49: char_cs_key
                                    {
                                    pushFollow(FOLLOW_char_cs_key_in_standard_function11751);
                                    char_cs_key880=gPLSQLParser.char_cs_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, char_cs_key880.getTree());

                                    }
                                    break;
                                case 2 :
                                    // PLSQL_DMLParser.g:1160:61: nchar_cs_key
                                    {
                                    pushFollow(FOLLOW_nchar_cs_key_in_standard_function11753);
                                    nchar_cs_key881=gPLSQLParser.nchar_cs_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nchar_cs_key881.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1161:21: ( COMMA expression_wrapper )*
                    loop283:
                    do {
                        int alt283=2;
                        int LA283_0 = input.LA(1);

                        if ( (LA283_0==COMMA) ) {
                            alt283=1;
                        }


                        switch (alt283) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:1161:22: COMMA expression_wrapper
                    	    {
                    	    COMMA882=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function11780); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA882_tree = 
                    	    (Object)adaptor.create(COMMA882)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA882_tree);
                    	    }

                    	    pushFollow(FOLLOW_expression_wrapper_in_standard_function11782);
                    	    expression_wrapper883=expression_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper883.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop283;
                        }
                    } while (true);


                    RIGHT_PAREN884=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11799); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // PLSQL_DMLParser.g:1163:10: treat_key ^ LEFT_PAREN ! expression_wrapper as_key ! ( ref_key )? type_spec RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_treat_key_in_standard_function11811);
                    treat_key885=gPLSQLParser.treat_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(treat_key885.getTree(), root_0);

                    LEFT_PAREN886=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11826); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_wrapper_in_standard_function11845);
                    expression_wrapper887=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper887.getTree());

                    pushFollow(FOLLOW_as_key_in_standard_function11847);
                    as_key888=gPLSQLParser.as_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1165:44: ( ref_key )?
                    int alt284=2;
                    int LA284_0 = input.LA(1);

                    if ( (LA284_0==REGULAR_ID) ) {
                        int LA284_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("ref"))) ) {
                            alt284=1;
                        }
                    }
                    switch (alt284) {
                        case 1 :
                            // PLSQL_DMLParser.g:1165:44: ref_key
                            {
                            pushFollow(FOLLOW_ref_key_in_standard_function11850);
                            ref_key889=gPLSQLParser.ref_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref_key889.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_spec_in_standard_function11853);
                    type_spec890=gPLSQLParser.type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec890.getTree());

                    RIGHT_PAREN891=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11868); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // PLSQL_DMLParser.g:1167:10: trim_key ^ LEFT_PAREN ! ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )? concatenation_wrapper RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_trim_key_in_standard_function11880);
                    trim_key892=gPLSQLParser.trim_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(trim_key892.getTree(), root_0);

                    LEFT_PAREN893=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11895); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1169:17: ( ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key )?
                    int alt287=2;
                    switch ( input.LA(1) ) {
                        case REGULAR_ID:
                            {
                            int LA287_1 = input.LA(2);

                            if ( ((LA287_1 >= CHAR_STRING && LA287_1 <= CHAR_STRING_PERL)||LA287_1==NATIONAL_CHAR_STRING_LIT) ) {
                                int LA287_5 = input.LA(3);

                                if ( (LA287_5==SQL92_RESERVED_FROM) ) {
                                    alt287=1;
                                }
                            }
                            else if ( (LA287_1==SQL92_RESERVED_FROM) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case CHAR_STRING:
                        case CHAR_STRING_PERL:
                        case NATIONAL_CHAR_STRING_LIT:
                            {
                            int LA287_2 = input.LA(2);

                            if ( (LA287_2==SQL92_RESERVED_FROM) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case SQL92_RESERVED_FROM:
                            {
                            alt287=1;
                            }
                            break;
                    }

                    switch (alt287) {
                        case 1 :
                            // PLSQL_DMLParser.g:1169:18: ( leading_key | trailing_key | both_key )? ( quoted_string )? from_key
                            {
                            // PLSQL_DMLParser.g:1169:18: ( leading_key | trailing_key | both_key )?
                            int alt285=4;
                            int LA285_0 = input.LA(1);

                            if ( (LA285_0==REGULAR_ID) ) {
                                int LA285_1 = input.LA(2);

                                if ( ((input.LT(1).getText().equalsIgnoreCase("leading"))) ) {
                                    alt285=1;
                                }
                                else if ( ((input.LT(1).getText().equalsIgnoreCase("trailing"))) ) {
                                    alt285=2;
                                }
                                else if ( ((input.LT(1).getText().equalsIgnoreCase("both"))) ) {
                                    alt285=3;
                                }
                            }
                            switch (alt285) {
                                case 1 :
                                    // PLSQL_DMLParser.g:1169:19: leading_key
                                    {
                                    pushFollow(FOLLOW_leading_key_in_standard_function11916);
                                    leading_key894=gPLSQLParser.leading_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, leading_key894.getTree());

                                    }
                                    break;
                                case 2 :
                                    // PLSQL_DMLParser.g:1169:31: trailing_key
                                    {
                                    pushFollow(FOLLOW_trailing_key_in_standard_function11918);
                                    trailing_key895=gPLSQLParser.trailing_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trailing_key895.getTree());

                                    }
                                    break;
                                case 3 :
                                    // PLSQL_DMLParser.g:1169:44: both_key
                                    {
                                    pushFollow(FOLLOW_both_key_in_standard_function11920);
                                    both_key896=gPLSQLParser.both_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, both_key896.getTree());

                                    }
                                    break;

                            }


                            // PLSQL_DMLParser.g:1169:55: ( quoted_string )?
                            int alt286=2;
                            int LA286_0 = input.LA(1);

                            if ( ((LA286_0 >= CHAR_STRING && LA286_0 <= CHAR_STRING_PERL)||LA286_0==NATIONAL_CHAR_STRING_LIT) ) {
                                alt286=1;
                            }
                            switch (alt286) {
                                case 1 :
                                    // PLSQL_DMLParser.g:1169:55: quoted_string
                                    {
                                    pushFollow(FOLLOW_quoted_string_in_standard_function11924);
                                    quoted_string897=gPLSQLParser.quoted_string();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quoted_string897.getTree());

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_from_key_in_standard_function11927);
                            from_key898=gPLSQLParser.from_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, from_key898.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function11947);
                    concatenation_wrapper899=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper899.getTree());

                    RIGHT_PAREN900=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function11961); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // PLSQL_DMLParser.g:1172:10: xmlagg_key ^ LEFT_PAREN ! expression_wrapper ( order_by_clause )? RIGHT_PAREN ! ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_xmlagg_key_in_standard_function11973);
                    xmlagg_key901=gPLSQLParser.xmlagg_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlagg_key901.getTree(), root_0);

                    LEFT_PAREN902=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function11988); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_wrapper_in_standard_function12008);
                    expression_wrapper903=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper903.getTree());

                    // PLSQL_DMLParser.g:1174:36: ( order_by_clause )?
                    int alt288=2;
                    int LA288_0 = input.LA(1);

                    if ( (LA288_0==SQL92_RESERVED_ORDER) ) {
                        alt288=1;
                    }
                    switch (alt288) {
                        case 1 :
                            // PLSQL_DMLParser.g:1174:36: order_by_clause
                            {
                            pushFollow(FOLLOW_order_by_clause_in_standard_function12010);
                            order_by_clause904=order_by_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause904.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN905=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12026); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1176:13: ( PERIOD general_element_part )?
                    int alt289=2;
                    int LA289_0 = input.LA(1);

                    if ( (LA289_0==PERIOD) ) {
                        alt289=1;
                    }
                    switch (alt289) {
                        case 1 :
                            // PLSQL_DMLParser.g:1176:14: PERIOD general_element_part
                            {
                            PERIOD906=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12042); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD906_tree = 
                            (Object)adaptor.create(PERIOD906)
                            ;
                            adaptor.addChild(root_0, PERIOD906_tree);
                            }

                            pushFollow(FOLLOW_general_element_part_in_standard_function12044);
                            general_element_part907=gPLSQLParser.general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part907.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 17 :
                    // PLSQL_DMLParser.g:1177:10: ( xmlcolattval_key ^| xmlforest_key ^) LEFT_PAREN ! xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN ! ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // PLSQL_DMLParser.g:1177:10: ( xmlcolattval_key ^| xmlforest_key ^)
                    int alt290=2;
                    int LA290_0 = input.LA(1);

                    if ( (LA290_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("xmlcolattval"))||(input.LT(1).getText().equalsIgnoreCase("xmlforest"))))) {
                        int LA290_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("xmlcolattval"))) ) {
                            alt290=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("xmlforest"))) ) {
                            alt290=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 290, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 290, 0, input);

                        throw nvae;

                    }
                    switch (alt290) {
                        case 1 :
                            // PLSQL_DMLParser.g:1177:11: xmlcolattval_key ^
                            {
                            pushFollow(FOLLOW_xmlcolattval_key_in_standard_function12058);
                            xmlcolattval_key908=gPLSQLParser.xmlcolattval_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlcolattval_key908.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1177:29: xmlforest_key ^
                            {
                            pushFollow(FOLLOW_xmlforest_key_in_standard_function12061);
                            xmlforest_key909=gPLSQLParser.xmlforest_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlforest_key909.getTree(), root_0);

                            }
                            break;

                    }


                    LEFT_PAREN910=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12078); if (state.failed) return retval;

                    pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function12097);
                    xml_multiuse_expression_element911=xml_multiuse_expression_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_multiuse_expression_element911.getTree());

                    // PLSQL_DMLParser.g:1179:49: ( COMMA ! xml_multiuse_expression_element )*
                    loop291:
                    do {
                        int alt291=2;
                        int LA291_0 = input.LA(1);

                        if ( (LA291_0==COMMA) ) {
                            alt291=1;
                        }


                        switch (alt291) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:1179:50: COMMA ! xml_multiuse_expression_element
                    	    {
                    	    COMMA912=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function12100); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function12103);
                    	    xml_multiuse_expression_element913=xml_multiuse_expression_element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_multiuse_expression_element913.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop291;
                        }
                    } while (true);


                    RIGHT_PAREN914=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12119); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1181:13: ( PERIOD general_element_part )?
                    int alt292=2;
                    int LA292_0 = input.LA(1);

                    if ( (LA292_0==PERIOD) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            // PLSQL_DMLParser.g:1181:14: PERIOD general_element_part
                            {
                            PERIOD915=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12135); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD915_tree = 
                            (Object)adaptor.create(PERIOD915)
                            ;
                            adaptor.addChild(root_0, PERIOD915_tree);
                            }

                            pushFollow(FOLLOW_general_element_part_in_standard_function12137);
                            general_element_part916=gPLSQLParser.general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part916.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 18 :
                    // PLSQL_DMLParser.g:1182:10: xmlelement_key ^ LEFT_PAREN ! ( entityescaping_key | noentityescaping_key )? ( name_key | evalname_key )? expression_wrapper ({...}? COMMA ! xml_attributes_clause )? ( COMMA ! expression_wrapper ( column_alias )? )* RIGHT_PAREN ! ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_xmlelement_key_in_standard_function12150);
                    xmlelement_key917=gPLSQLParser.xmlelement_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlelement_key917.getTree(), root_0);

                    LEFT_PAREN918=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12165); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1184:17: ( entityescaping_key | noentityescaping_key )?
                    int alt293=3;
                    int LA293_0 = input.LA(1);

                    if ( (LA293_0==REGULAR_ID) ) {
                        int LA293_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("entityescaping"))) ) {
                            alt293=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("noentityescaping"))) ) {
                            alt293=2;
                        }
                    }
                    switch (alt293) {
                        case 1 :
                            // PLSQL_DMLParser.g:1184:18: entityescaping_key
                            {
                            pushFollow(FOLLOW_entityescaping_key_in_standard_function12185);
                            entityescaping_key919=gPLSQLParser.entityescaping_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, entityescaping_key919.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1184:37: noentityescaping_key
                            {
                            pushFollow(FOLLOW_noentityescaping_key_in_standard_function12187);
                            noentityescaping_key920=gPLSQLParser.noentityescaping_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, noentityescaping_key920.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1185:17: ( name_key | evalname_key )?
                    int alt294=3;
                    int LA294_0 = input.LA(1);

                    if ( (LA294_0==REGULAR_ID) ) {
                        int LA294_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("name"))) ) {
                            alt294=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {
                            alt294=2;
                        }
                    }
                    switch (alt294) {
                        case 1 :
                            // PLSQL_DMLParser.g:1185:18: name_key
                            {
                            pushFollow(FOLLOW_name_key_in_standard_function12208);
                            name_key921=gPLSQLParser.name_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, name_key921.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1185:27: evalname_key
                            {
                            pushFollow(FOLLOW_evalname_key_in_standard_function12210);
                            evalname_key922=gPLSQLParser.evalname_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, evalname_key922.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_wrapper_in_standard_function12214);
                    expression_wrapper923=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper923.getTree());

                    // PLSQL_DMLParser.g:1186:17: ({...}? COMMA ! xml_attributes_clause )?
                    int alt295=2;
                    int LA295_0 = input.LA(1);

                    if ( (LA295_0==COMMA) ) {
                        int LA295_1 = input.LA(2);

                        if ( ((input.LT(2).getText().equalsIgnoreCase("xmlattributes"))) ) {
                            alt295=1;
                        }
                    }
                    switch (alt295) {
                        case 1 :
                            // PLSQL_DMLParser.g:1186:18: {...}? COMMA ! xml_attributes_clause
                            {
                            if ( !((input.LT(2).getText().equalsIgnoreCase("xmlattributes"))) ) {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                throw new FailedPredicateException(input, "standard_function", "input.LT(2).getText().equalsIgnoreCase(\"xmlattributes\")");
                            }

                            COMMA924=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function12235); if (state.failed) return retval;

                            pushFollow(FOLLOW_xml_attributes_clause_in_standard_function12238);
                            xml_attributes_clause925=xml_attributes_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_attributes_clause925.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1187:17: ( COMMA ! expression_wrapper ( column_alias )? )*
                    loop297:
                    do {
                        int alt297=2;
                        int LA297_0 = input.LA(1);

                        if ( (LA297_0==COMMA) ) {
                            alt297=1;
                        }


                        switch (alt297) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:1187:18: COMMA ! expression_wrapper ( column_alias )?
                    	    {
                    	    COMMA926=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function12259); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_expression_wrapper_in_standard_function12262);
                    	    expression_wrapper927=expression_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper927.getTree());

                    	    // PLSQL_DMLParser.g:1187:44: ( column_alias )?
                    	    int alt296=2;
                    	    int LA296_0 = input.LA(1);

                    	    if ( ((LA296_0 >= CHAR_STRING && LA296_0 <= CHAR_STRING_PERL)||LA296_0==DELIMITED_ID||LA296_0==INTRODUCER||LA296_0==NATIONAL_CHAR_STRING_LIT||LA296_0==REGULAR_ID||LA296_0==SQL92_RESERVED_AS) ) {
                    	        alt296=1;
                    	    }
                    	    switch (alt296) {
                    	        case 1 :
                    	            // PLSQL_DMLParser.g:1187:44: column_alias
                    	            {
                    	            pushFollow(FOLLOW_column_alias_in_standard_function12264);
                    	            column_alias928=gPLSQLParser.column_alias();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias928.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop297;
                        }
                    } while (true);


                    RIGHT_PAREN929=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12281); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1189:13: ( PERIOD general_element_part )?
                    int alt298=2;
                    int LA298_0 = input.LA(1);

                    if ( (LA298_0==PERIOD) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            // PLSQL_DMLParser.g:1189:14: PERIOD general_element_part
                            {
                            PERIOD930=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12297); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD930_tree = 
                            (Object)adaptor.create(PERIOD930)
                            ;
                            adaptor.addChild(root_0, PERIOD930_tree);
                            }

                            pushFollow(FOLLOW_general_element_part_in_standard_function12299);
                            general_element_part931=gPLSQLParser.general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part931.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 19 :
                    // PLSQL_DMLParser.g:1190:10: xmlexists_key ^ LEFT_PAREN ! expression_wrapper ( xml_passing_clause )? RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_xmlexists_key_in_standard_function12312);
                    xmlexists_key932=gPLSQLParser.xmlexists_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlexists_key932.getTree(), root_0);

                    LEFT_PAREN933=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12327); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_wrapper_in_standard_function12346);
                    expression_wrapper934=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper934.getTree());

                    // PLSQL_DMLParser.g:1193:17: ( xml_passing_clause )?
                    int alt299=2;
                    int LA299_0 = input.LA(1);

                    if ( (LA299_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {
                        alt299=1;
                    }
                    switch (alt299) {
                        case 1 :
                            // PLSQL_DMLParser.g:1193:17: xml_passing_clause
                            {
                            pushFollow(FOLLOW_xml_passing_clause_in_standard_function12364);
                            xml_passing_clause935=xml_passing_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_passing_clause935.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN936=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12379); if (state.failed) return retval;

                    }
                    break;
                case 20 :
                    // PLSQL_DMLParser.g:1195:10: xmlparse_key ^ LEFT_PAREN ! ( document_key | content_key ) concatenation_wrapper ( wellformed_key )? RIGHT_PAREN ! ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_xmlparse_key_in_standard_function12391);
                    xmlparse_key937=gPLSQLParser.xmlparse_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlparse_key937.getTree(), root_0);

                    LEFT_PAREN938=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12406); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1197:17: ( document_key | content_key )
                    int alt300=2;
                    int LA300_0 = input.LA(1);

                    if ( (LA300_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("document"))||(input.LT(1).getText().equalsIgnoreCase("content"))))) {
                        int LA300_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("document"))) ) {
                            alt300=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("content"))) ) {
                            alt300=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 300, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 300, 0, input);

                        throw nvae;

                    }
                    switch (alt300) {
                        case 1 :
                            // PLSQL_DMLParser.g:1197:18: document_key
                            {
                            pushFollow(FOLLOW_document_key_in_standard_function12427);
                            document_key939=gPLSQLParser.document_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, document_key939.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1197:31: content_key
                            {
                            pushFollow(FOLLOW_content_key_in_standard_function12429);
                            content_key940=gPLSQLParser.content_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, content_key940.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12432);
                    concatenation_wrapper941=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper941.getTree());

                    // PLSQL_DMLParser.g:1197:66: ( wellformed_key )?
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("wellformed")))) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            // PLSQL_DMLParser.g:1197:66: wellformed_key
                            {
                            pushFollow(FOLLOW_wellformed_key_in_standard_function12434);
                            wellformed_key942=gPLSQLParser.wellformed_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, wellformed_key942.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN943=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12449); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1199:13: ( PERIOD general_element_part )?
                    int alt302=2;
                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==PERIOD) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            // PLSQL_DMLParser.g:1199:14: PERIOD general_element_part
                            {
                            PERIOD944=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12465); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD944_tree = 
                            (Object)adaptor.create(PERIOD944)
                            ;
                            adaptor.addChild(root_0, PERIOD944_tree);
                            }

                            pushFollow(FOLLOW_general_element_part_in_standard_function12467);
                            general_element_part945=gPLSQLParser.general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part945.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 21 :
                    // PLSQL_DMLParser.g:1200:10: xmlpi_key ^ LEFT_PAREN ! ( name_key id | evalname_key concatenation_wrapper ) ( COMMA ! concatenation_wrapper )? RIGHT_PAREN ! ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_xmlpi_key_in_standard_function12480);
                    xmlpi_key946=gPLSQLParser.xmlpi_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlpi_key946.getTree(), root_0);

                    LEFT_PAREN947=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12495); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1202:17: ( name_key id | evalname_key concatenation_wrapper )
                    int alt303=2;
                    alt303 = dfa303.predict(input);
                    switch (alt303) {
                        case 1 :
                            // PLSQL_DMLParser.g:1202:22: name_key id
                            {
                            pushFollow(FOLLOW_name_key_in_standard_function12520);
                            name_key948=gPLSQLParser.name_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, name_key948.getTree());

                            pushFollow(FOLLOW_id_in_standard_function12522);
                            id949=gPLSQLParser.id();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, id949.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1203:22: evalname_key concatenation_wrapper
                            {
                            pushFollow(FOLLOW_evalname_key_in_standard_function12545);
                            evalname_key950=gPLSQLParser.evalname_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, evalname_key950.getTree());

                            pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12547);
                            concatenation_wrapper951=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper951.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1205:17: ( COMMA ! concatenation_wrapper )?
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==COMMA) ) {
                        alt304=1;
                    }
                    switch (alt304) {
                        case 1 :
                            // PLSQL_DMLParser.g:1205:18: COMMA ! concatenation_wrapper
                            {
                            COMMA952=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function12584); if (state.failed) return retval;

                            pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12587);
                            concatenation_wrapper953=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper953.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN954=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12603); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1207:13: ( PERIOD general_element_part )?
                    int alt305=2;
                    int LA305_0 = input.LA(1);

                    if ( (LA305_0==PERIOD) ) {
                        alt305=1;
                    }
                    switch (alt305) {
                        case 1 :
                            // PLSQL_DMLParser.g:1207:14: PERIOD general_element_part
                            {
                            PERIOD955=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12619); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD955_tree = 
                            (Object)adaptor.create(PERIOD955)
                            ;
                            adaptor.addChild(root_0, PERIOD955_tree);
                            }

                            pushFollow(FOLLOW_general_element_part_in_standard_function12621);
                            general_element_part956=gPLSQLParser.general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part956.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 22 :
                    // PLSQL_DMLParser.g:1208:10: xmlquery_key ^ LEFT_PAREN ! concatenation_wrapper ( xml_passing_clause )? returning_key ! content_key ! ( null_key on_key ! empty_key !)? RIGHT_PAREN ! ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_xmlquery_key_in_standard_function12634);
                    xmlquery_key957=gPLSQLParser.xmlquery_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlquery_key957.getTree(), root_0);

                    LEFT_PAREN958=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12649); if (state.failed) return retval;

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12669);
                    concatenation_wrapper959=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper959.getTree());

                    // PLSQL_DMLParser.g:1210:39: ( xml_passing_clause )?
                    int alt306=2;
                    int LA306_0 = input.LA(1);

                    if ( (LA306_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("returning"))||(input.LT(1).getText().equalsIgnoreCase("passing"))))) {
                        int LA306_1 = input.LA(2);

                        if ( (LA306_1==APPROXIMATE_NUM_LIT||LA306_1==BINDVAR||(LA306_1 >= CHAR_STRING && LA306_1 <= COLON)||LA306_1==DELIMITED_ID||LA306_1==EXACT_NUM_LIT||LA306_1==INTRODUCER||LA306_1==LEFT_PAREN||(LA306_1 >= MINUS_SIGN && LA306_1 <= NATIONAL_CHAR_STRING_LIT)||LA306_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA306_1==PLUS_SIGN||LA306_1==SQL92_RESERVED_ALL||LA306_1==SQL92_RESERVED_ANY||(LA306_1 >= SQL92_RESERVED_BY && LA306_1 <= SQL92_RESERVED_CASE)||(LA306_1 >= SQL92_RESERVED_CURSOR && LA306_1 <= SQL92_RESERVED_DATE)||LA306_1==SQL92_RESERVED_DEFAULT||LA306_1==SQL92_RESERVED_DISTINCT||(LA306_1 >= SQL92_RESERVED_EXISTS && LA306_1 <= SQL92_RESERVED_FALSE)||(LA306_1 >= SQL92_RESERVED_NOT && LA306_1 <= SQL92_RESERVED_NULL)||LA306_1==SQL92_RESERVED_PRIOR||LA306_1==SQL92_RESERVED_TRUE||LA306_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {
                            alt306=1;
                        }
                        else if ( (LA306_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("returning"))||(input.LT(1).getText().equalsIgnoreCase("passing"))))) {
                            int LA306_3 = input.LA(3);

                            if ( (LA306_3==APPROXIMATE_NUM_LIT||LA306_3==ASTERISK||LA306_3==BINDVAR||(LA306_3 >= CARRET_OPERATOR_PART && LA306_3 <= COMMA)||(LA306_3 >= CONCATENATION_OP && LA306_3 <= DELIMITED_ID)||(LA306_3 >= EQUALS_OP && LA306_3 <= EXCLAMATION_OPERATOR_PART)||(LA306_3 >= GREATER_THAN_OP && LA306_3 <= GREATER_THAN_OR_EQUALS_OP)||(LA306_3 >= INTRODUCER && LA306_3 <= NATIONAL_CHAR_STRING_LIT)||LA306_3==NOT_EQUAL_OP||(LA306_3 >= PERIOD && LA306_3 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA306_3==PLUS_SIGN||LA306_3==REGULAR_ID||LA306_3==SOLIDUS||LA306_3==SQL92_RESERVED_ALL||(LA306_3 >= SQL92_RESERVED_AND && LA306_3 <= SQL92_RESERVED_AS)||LA306_3==SQL92_RESERVED_BETWEEN||LA306_3==SQL92_RESERVED_CASE||LA306_3==SQL92_RESERVED_DATE||LA306_3==SQL92_RESERVED_DEFAULT||LA306_3==SQL92_RESERVED_DISTINCT||(LA306_3 >= SQL92_RESERVED_EXISTS && LA306_3 <= SQL92_RESERVED_FALSE)||LA306_3==SQL92_RESERVED_IN||(LA306_3 >= SQL92_RESERVED_IS && LA306_3 <= SQL92_RESERVED_NOT)||LA306_3==SQL92_RESERVED_OR||LA306_3==SQL92_RESERVED_PRIOR||LA306_3==SQL92_RESERVED_TRUE||(LA306_3 >= UNSIGNED_INTEGER && LA306_3 <= VERTICAL_BAR)) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {
                                alt306=1;
                            }
                            else if ( (LA306_3==SQL92_RESERVED_NULL) && (((input.LT(1).getText().equalsIgnoreCase("returning"))||(input.LT(1).getText().equalsIgnoreCase("passing"))))) {
                                int LA306_4 = input.LA(4);

                                if ( (LA306_4==ASTERISK||(LA306_4 >= CARRET_OPERATOR_PART && LA306_4 <= CHAR_STRING_PERL)||LA306_4==COMMA||(LA306_4 >= CONCATENATION_OP && LA306_4 <= DELIMITED_ID)||LA306_4==EQUALS_OP||LA306_4==EXCLAMATION_OPERATOR_PART||(LA306_4 >= GREATER_THAN_OP && LA306_4 <= GREATER_THAN_OR_EQUALS_OP)||(LA306_4 >= INTRODUCER && LA306_4 <= LEFT_BRACKET)||(LA306_4 >= LESS_THAN_OP && LA306_4 <= NATIONAL_CHAR_STRING_LIT)||LA306_4==NOT_EQUAL_OP||LA306_4==PLUS_SIGN||LA306_4==REGULAR_ID||LA306_4==SOLIDUS||LA306_4==SQL92_RESERVED_AND||LA306_4==SQL92_RESERVED_AS||LA306_4==SQL92_RESERVED_BETWEEN||LA306_4==SQL92_RESERVED_IN||(LA306_4 >= SQL92_RESERVED_IS && LA306_4 <= SQL92_RESERVED_NOT)||LA306_4==SQL92_RESERVED_OR||LA306_4==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("passing")))) {
                                    alt306=1;
                                }
                            }
                        }
                    }
                    switch (alt306) {
                        case 1 :
                            // PLSQL_DMLParser.g:1210:39: xml_passing_clause
                            {
                            pushFollow(FOLLOW_xml_passing_clause_in_standard_function12671);
                            xml_passing_clause960=xml_passing_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_passing_clause960.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_returning_key_in_standard_function12690);
                    returning_key961=gPLSQLParser.returning_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_content_key_in_standard_function12693);
                    content_key962=gPLSQLParser.content_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1211:45: ( null_key on_key ! empty_key !)?
                    int alt307=2;
                    int LA307_0 = input.LA(1);

                    if ( (LA307_0==SQL92_RESERVED_NULL) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                        case 1 :
                            // PLSQL_DMLParser.g:1211:46: null_key on_key ! empty_key !
                            {
                            pushFollow(FOLLOW_null_key_in_standard_function12697);
                            null_key963=gPLSQLParser.null_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, null_key963.getTree());

                            pushFollow(FOLLOW_on_key_in_standard_function12699);
                            on_key964=gPLSQLParser.on_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            pushFollow(FOLLOW_empty_key_in_standard_function12702);
                            empty_key965=gPLSQLParser.empty_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    RIGHT_PAREN966=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12719); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1213:13: ( PERIOD general_element_part )?
                    int alt308=2;
                    int LA308_0 = input.LA(1);

                    if ( (LA308_0==PERIOD) ) {
                        alt308=1;
                    }
                    switch (alt308) {
                        case 1 :
                            // PLSQL_DMLParser.g:1213:14: PERIOD general_element_part
                            {
                            PERIOD967=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12735); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD967_tree = 
                            (Object)adaptor.create(PERIOD967)
                            ;
                            adaptor.addChild(root_0, PERIOD967_tree);
                            }

                            pushFollow(FOLLOW_general_element_part_in_standard_function12737);
                            general_element_part968=gPLSQLParser.general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part968.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 23 :
                    // PLSQL_DMLParser.g:1214:10: xmlroot_key ^ LEFT_PAREN ! concatenation_wrapper xmlroot_param_version_part ( COMMA ! xmlroot_param_standalone_part )? RIGHT_PAREN ! ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_xmlroot_key_in_standard_function12750);
                    xmlroot_key969=gPLSQLParser.xmlroot_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlroot_key969.getTree(), root_0);

                    LEFT_PAREN970=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12765); if (state.failed) return retval;

                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12784);
                    concatenation_wrapper971=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper971.getTree());

                    pushFollow(FOLLOW_xmlroot_param_version_part_in_standard_function12806);
                    xmlroot_param_version_part972=xmlroot_param_version_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlroot_param_version_part972.getTree());

                    // PLSQL_DMLParser.g:1218:21: ( COMMA ! xmlroot_param_standalone_part )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==COMMA) ) {
                        alt309=1;
                    }
                    switch (alt309) {
                        case 1 :
                            // PLSQL_DMLParser.g:1218:22: COMMA ! xmlroot_param_standalone_part
                            {
                            COMMA973=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function12829); if (state.failed) return retval;

                            pushFollow(FOLLOW_xmlroot_param_standalone_part_in_standard_function12832);
                            xmlroot_param_standalone_part974=xmlroot_param_standalone_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlroot_param_standalone_part974.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN975=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function12848); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1220:13: ( PERIOD general_element_part )?
                    int alt310=2;
                    int LA310_0 = input.LA(1);

                    if ( (LA310_0==PERIOD) ) {
                        alt310=1;
                    }
                    switch (alt310) {
                        case 1 :
                            // PLSQL_DMLParser.g:1220:14: PERIOD general_element_part
                            {
                            PERIOD976=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function12864); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD976_tree = 
                            (Object)adaptor.create(PERIOD976)
                            ;
                            adaptor.addChild(root_0, PERIOD976_tree);
                            }

                            pushFollow(FOLLOW_general_element_part_in_standard_function12866);
                            general_element_part977=gPLSQLParser.general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part977.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 24 :
                    // PLSQL_DMLParser.g:1221:10: xmlserialize_key ^ LEFT_PAREN ! ( document_key | content_key ) concatenation_wrapper ( as_key ! type_spec )? ( xmlserialize_param_enconding_part )? ( xmlserialize_param_version_part )? ( xmlserialize_param_ident_part )? ( ( hide_key | show_key ) defaults_key )? RIGHT_PAREN ! ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_xmlserialize_key_in_standard_function12879);
                    xmlserialize_key978=gPLSQLParser.xmlserialize_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlserialize_key978.getTree(), root_0);

                    LEFT_PAREN979=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function12894); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1223:17: ( document_key | content_key )
                    int alt311=2;
                    int LA311_0 = input.LA(1);

                    if ( (LA311_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("document"))||(input.LT(1).getText().equalsIgnoreCase("content"))))) {
                        int LA311_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("document"))) ) {
                            alt311=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("content"))) ) {
                            alt311=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 311, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 311, 0, input);

                        throw nvae;

                    }
                    switch (alt311) {
                        case 1 :
                            // PLSQL_DMLParser.g:1223:18: document_key
                            {
                            pushFollow(FOLLOW_document_key_in_standard_function12914);
                            document_key980=gPLSQLParser.document_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, document_key980.getTree());

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1223:31: content_key
                            {
                            pushFollow(FOLLOW_content_key_in_standard_function12916);
                            content_key981=gPLSQLParser.content_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, content_key981.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function12935);
                    concatenation_wrapper982=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper982.getTree());

                    // PLSQL_DMLParser.g:1224:39: ( as_key ! type_spec )?
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==SQL92_RESERVED_AS) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            // PLSQL_DMLParser.g:1224:40: as_key ! type_spec
                            {
                            pushFollow(FOLLOW_as_key_in_standard_function12938);
                            as_key983=gPLSQLParser.as_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            pushFollow(FOLLOW_type_spec_in_standard_function12941);
                            type_spec984=gPLSQLParser.type_spec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec984.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1225:17: ( xmlserialize_param_enconding_part )?
                    int alt313=2;
                    int LA313_0 = input.LA(1);

                    if ( (LA313_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("encoding"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("version"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                        int LA313_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("encoding"))) ) {
                            alt313=1;
                        }
                    }
                    switch (alt313) {
                        case 1 :
                            // PLSQL_DMLParser.g:1225:17: xmlserialize_param_enconding_part
                            {
                            pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_standard_function12961);
                            xmlserialize_param_enconding_part985=xmlserialize_param_enconding_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlserialize_param_enconding_part985.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1226:17: ( xmlserialize_param_version_part )?
                    int alt314=2;
                    int LA314_0 = input.LA(1);

                    if ( (LA314_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("version"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                        int LA314_1 = input.LA(2);

                        if ( (LA314_1==APPROXIMATE_NUM_LIT||LA314_1==BINDVAR||(LA314_1 >= CHAR_STRING && LA314_1 <= COLON)||LA314_1==DELIMITED_ID||LA314_1==EXACT_NUM_LIT||LA314_1==INTRODUCER||LA314_1==LEFT_PAREN||(LA314_1 >= MINUS_SIGN && LA314_1 <= NATIONAL_CHAR_STRING_LIT)||LA314_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA314_1==PLUS_SIGN||LA314_1==SQL92_RESERVED_ALL||LA314_1==SQL92_RESERVED_ANY||LA314_1==SQL92_RESERVED_CASE||LA314_1==SQL92_RESERVED_DATE||LA314_1==SQL92_RESERVED_DEFAULT||LA314_1==SQL92_RESERVED_DISTINCT||(LA314_1 >= SQL92_RESERVED_EXISTS && LA314_1 <= SQL92_RESERVED_FALSE)||LA314_1==SQL92_RESERVED_NULL||LA314_1==SQL92_RESERVED_PRIOR||LA314_1==SQL92_RESERVED_TRUE||LA314_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("version")))) {
                            alt314=1;
                        }
                        else if ( (LA314_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("version"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                            int LA314_4 = input.LA(3);

                            if ( ((input.LT(1).getText().equalsIgnoreCase("version"))) ) {
                                alt314=1;
                            }
                        }
                    }
                    switch (alt314) {
                        case 1 :
                            // PLSQL_DMLParser.g:1226:17: xmlserialize_param_version_part
                            {
                            pushFollow(FOLLOW_xmlserialize_param_version_part_in_standard_function12980);
                            xmlserialize_param_version_part986=xmlserialize_param_version_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlserialize_param_version_part986.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1227:17: ( xmlserialize_param_ident_part )?
                    int alt315=2;
                    int LA315_0 = input.LA(1);

                    if ( (LA315_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                        int LA315_1 = input.LA(2);

                        if ( (LA315_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))||(input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                            int LA315_3 = input.LA(3);

                            if ( (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent")))) ) {
                                alt315=1;
                            }
                        }
                        else if ( (LA315_1==RIGHT_PAREN||LA315_1==SQL92_RESERVED_SIZE) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                            alt315=1;
                        }
                    }
                    switch (alt315) {
                        case 1 :
                            // PLSQL_DMLParser.g:1227:17: xmlserialize_param_ident_part
                            {
                            pushFollow(FOLLOW_xmlserialize_param_ident_part_in_standard_function12999);
                            xmlserialize_param_ident_part987=xmlserialize_param_ident_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xmlserialize_param_ident_part987.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1228:17: ( ( hide_key | show_key ) defaults_key )?
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                        alt317=1;
                    }
                    switch (alt317) {
                        case 1 :
                            // PLSQL_DMLParser.g:1228:18: ( hide_key | show_key ) defaults_key
                            {
                            // PLSQL_DMLParser.g:1228:18: ( hide_key | show_key )
                            int alt316=2;
                            int LA316_0 = input.LA(1);

                            if ( (LA316_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hide"))||(input.LT(1).getText().equalsIgnoreCase("show"))))) {
                                int LA316_1 = input.LA(2);

                                if ( ((input.LT(1).getText().equalsIgnoreCase("hide"))) ) {
                                    alt316=1;
                                }
                                else if ( ((input.LT(1).getText().equalsIgnoreCase("show"))) ) {
                                    alt316=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 316, 1, input);

                                    throw nvae;

                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 316, 0, input);

                                throw nvae;

                            }
                            switch (alt316) {
                                case 1 :
                                    // PLSQL_DMLParser.g:1228:19: hide_key
                                    {
                                    pushFollow(FOLLOW_hide_key_in_standard_function13020);
                                    hide_key988=gPLSQLParser.hide_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hide_key988.getTree());

                                    }
                                    break;
                                case 2 :
                                    // PLSQL_DMLParser.g:1228:28: show_key
                                    {
                                    pushFollow(FOLLOW_show_key_in_standard_function13022);
                                    show_key989=gPLSQLParser.show_key();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, show_key989.getTree());

                                    }
                                    break;

                            }


                            pushFollow(FOLLOW_defaults_key_in_standard_function13025);
                            defaults_key990=gPLSQLParser.defaults_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, defaults_key990.getTree());

                            }
                            break;

                    }


                    RIGHT_PAREN991=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function13041); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1230:13: ( PERIOD general_element_part )?
                    int alt318=2;
                    int LA318_0 = input.LA(1);

                    if ( (LA318_0==PERIOD) ) {
                        alt318=1;
                    }
                    switch (alt318) {
                        case 1 :
                            // PLSQL_DMLParser.g:1230:14: PERIOD general_element_part
                            {
                            PERIOD992=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function13057); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD992_tree = 
                            (Object)adaptor.create(PERIOD992)
                            ;
                            adaptor.addChild(root_0, PERIOD992_tree);
                            }

                            pushFollow(FOLLOW_general_element_part_in_standard_function13059);
                            general_element_part993=gPLSQLParser.general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part993.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 25 :
                    // PLSQL_DMLParser.g:1231:10: xmltable_key ^ LEFT_PAREN ! ( xml_namespaces_clause )? concatenation_wrapper ( xml_passing_clause )? ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )? RIGHT_PAREN ! ( PERIOD general_element_part )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_xmltable_key_in_standard_function13072);
                    xmltable_key994=gPLSQLParser.xmltable_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmltable_key994.getTree(), root_0);

                    LEFT_PAREN995=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_standard_function13087); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1233:17: ( xml_namespaces_clause )?
                    int alt319=2;
                    int LA319_0 = input.LA(1);

                    if ( (LA319_0==REGULAR_ID) ) {
                        int LA319_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("xmlnamespaces"))) ) {
                            alt319=1;
                        }
                    }
                    switch (alt319) {
                        case 1 :
                            // PLSQL_DMLParser.g:1233:17: xml_namespaces_clause
                            {
                            pushFollow(FOLLOW_xml_namespaces_clause_in_standard_function13106);
                            xml_namespaces_clause996=xml_namespaces_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_namespaces_clause996.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_concatenation_wrapper_in_standard_function13125);
                    concatenation_wrapper997=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper997.getTree());

                    // PLSQL_DMLParser.g:1235:17: ( xml_passing_clause )?
                    int alt320=2;
                    int LA320_0 = input.LA(1);

                    if ( (LA320_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("columns"))||(input.LT(1).getText().equalsIgnoreCase("passing"))))) {
                        int LA320_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("passing"))) ) {
                            alt320=1;
                        }
                    }
                    switch (alt320) {
                        case 1 :
                            // PLSQL_DMLParser.g:1235:17: xml_passing_clause
                            {
                            pushFollow(FOLLOW_xml_passing_clause_in_standard_function13143);
                            xml_passing_clause998=xml_passing_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_passing_clause998.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1236:17: ( columns_key ! xml_table_column ( COMMA ! xml_table_column ) )?
                    int alt321=2;
                    int LA321_0 = input.LA(1);

                    if ( (LA321_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("columns")))) {
                        alt321=1;
                    }
                    switch (alt321) {
                        case 1 :
                            // PLSQL_DMLParser.g:1236:18: columns_key ! xml_table_column ( COMMA ! xml_table_column )
                            {
                            pushFollow(FOLLOW_columns_key_in_standard_function13163);
                            columns_key999=gPLSQLParser.columns_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            pushFollow(FOLLOW_xml_table_column_in_standard_function13166);
                            xml_table_column1000=xml_table_column();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_table_column1000.getTree());

                            // PLSQL_DMLParser.g:1236:48: ( COMMA ! xml_table_column )
                            // PLSQL_DMLParser.g:1236:49: COMMA ! xml_table_column
                            {
                            COMMA1001=(Token)match(input,COMMA,FOLLOW_COMMA_in_standard_function13169); if (state.failed) return retval;

                            pushFollow(FOLLOW_xml_table_column_in_standard_function13172);
                            xml_table_column1002=xml_table_column();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_table_column1002.getTree());

                            }


                            }
                            break;

                    }


                    RIGHT_PAREN1003=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_standard_function13189); if (state.failed) return retval;

                    // PLSQL_DMLParser.g:1238:13: ( PERIOD general_element_part )?
                    int alt322=2;
                    int LA322_0 = input.LA(1);

                    if ( (LA322_0==PERIOD) ) {
                        alt322=1;
                    }
                    switch (alt322) {
                        case 1 :
                            // PLSQL_DMLParser.g:1238:14: PERIOD general_element_part
                            {
                            PERIOD1004=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_standard_function13205); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PERIOD1004_tree = 
                            (Object)adaptor.create(PERIOD1004)
                            ;
                            adaptor.addChild(root_0, PERIOD1004_tree);
                            }

                            pushFollow(FOLLOW_general_element_part_in_standard_function13207);
                            general_element_part1005=gPLSQLParser.general_element_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, general_element_part1005.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "standard_function"


    public static class stantard_function_enabling_over_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stantard_function_enabling_over"
    // PLSQL_DMLParser.g:1241:1: stantard_function_enabling_over :{...}? => REGULAR_ID -> FUNCTION_ENABLING_OVER[$REGULAR_ID] ;
    public final stantard_function_enabling_over_return stantard_function_enabling_over() throws RecognitionException {
        stantard_function_enabling_over_return retval = new stantard_function_enabling_over_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID1006=null;

        Object REGULAR_ID1006_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // PLSQL_DMLParser.g:1242:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_OVER[$REGULAR_ID] )
            // PLSQL_DMLParser.g:1242:10: {...}? => REGULAR_ID
            {
            if ( !((enablesOverClause(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "stantard_function_enabling_over", "enablesOverClause(input.LT(1).getText())");
            }

            REGULAR_ID1006=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_stantard_function_enabling_over13232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID1006);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1242:67: -> FUNCTION_ENABLING_OVER[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FUNCTION_ENABLING_OVER, REGULAR_ID1006)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stantard_function_enabling_over"


    public static class stantard_function_enabling_using_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stantard_function_enabling_using"
    // PLSQL_DMLParser.g:1245:1: stantard_function_enabling_using :{...}? => REGULAR_ID -> FUNCTION_ENABLING_USING[$REGULAR_ID] ;
    public final stantard_function_enabling_using_return stantard_function_enabling_using() throws RecognitionException {
        stantard_function_enabling_using_return retval = new stantard_function_enabling_using_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID1007=null;

        Object REGULAR_ID1007_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // PLSQL_DMLParser.g:1246:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_USING[$REGULAR_ID] )
            // PLSQL_DMLParser.g:1246:10: {...}? => REGULAR_ID
            {
            if ( !((enablesUsingClause(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "stantard_function_enabling_using", "enablesUsingClause(input.LT(1).getText())");
            }

            REGULAR_ID1007=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_stantard_function_enabling_using13260); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID1007);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1246:68: -> FUNCTION_ENABLING_USING[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FUNCTION_ENABLING_USING, REGULAR_ID1007)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stantard_function_enabling_using"


    public static class stantard_function_enabling_within_or_over_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stantard_function_enabling_within_or_over"
    // PLSQL_DMLParser.g:1249:1: stantard_function_enabling_within_or_over :{...}? => REGULAR_ID -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID] ;
    public final stantard_function_enabling_within_or_over_return stantard_function_enabling_within_or_over() throws RecognitionException {
        stantard_function_enabling_within_or_over_return retval = new stantard_function_enabling_within_or_over_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID1008=null;

        Object REGULAR_ID1008_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // PLSQL_DMLParser.g:1250:5: ({...}? => REGULAR_ID -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID] )
            // PLSQL_DMLParser.g:1250:10: {...}? => REGULAR_ID
            {
            if ( !((enablesWithinOrOverClause(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "stantard_function_enabling_within_or_over", "enablesWithinOrOverClause(input.LT(1).getText())");
            }

            REGULAR_ID1008=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over13288); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID1008);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1250:75: -> FUNCTION_ENABLING_WITHIN_OR_OVER[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(FUNCTION_ENABLING_WITHIN_OR_OVER, REGULAR_ID1008)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stantard_function_enabling_within_or_over"


    public static class stantard_function_pedictions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "stantard_function_pedictions"
    // PLSQL_DMLParser.g:1253:1: stantard_function_pedictions :{...}? => REGULAR_ID -> PREDICTION_FUNCTION[$REGULAR_ID] ;
    public final stantard_function_pedictions_return stantard_function_pedictions() throws RecognitionException {
        stantard_function_pedictions_return retval = new stantard_function_pedictions_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token REGULAR_ID1009=null;

        Object REGULAR_ID1009_tree=null;
        RewriteRuleTokenStream stream_REGULAR_ID=new RewriteRuleTokenStream(adaptor,"token REGULAR_ID");

        try {
            // PLSQL_DMLParser.g:1254:5: ({...}? => REGULAR_ID -> PREDICTION_FUNCTION[$REGULAR_ID] )
            // PLSQL_DMLParser.g:1254:10: {...}? => REGULAR_ID
            {
            if ( !((isStandardPredictionFunction(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "stantard_function_pedictions", "isStandardPredictionFunction(input.LT(1).getText())");
            }

            REGULAR_ID1009=(Token)match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_stantard_function_pedictions13316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_REGULAR_ID.add(REGULAR_ID1009);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1254:78: -> PREDICTION_FUNCTION[$REGULAR_ID]
            {
                adaptor.addChild(root_0, 
                (Object)adaptor.create(PREDICTION_FUNCTION, REGULAR_ID1009)
                );

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stantard_function_pedictions"


    public static class over_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "over_clause"
    // PLSQL_DMLParser.g:1257:1: over_clause : over_key ^ LEFT_PAREN ! ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN !;
    public final over_clause_return over_clause() throws RecognitionException {
        over_clause_return retval = new over_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN1011=null;
        Token RIGHT_PAREN1015=null;
        PLSQLParser_PLSQLKeys.over_key_return over_key1010 =null;

        query_partition_clause_return query_partition_clause1012 =null;

        order_by_clause_return order_by_clause1013 =null;

        windowing_clause_return windowing_clause1014 =null;


        Object LEFT_PAREN1011_tree=null;
        Object RIGHT_PAREN1015_tree=null;

        try {
            // PLSQL_DMLParser.g:1258:5: ( over_key ^ LEFT_PAREN ! ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN !)
            // PLSQL_DMLParser.g:1258:10: over_key ^ LEFT_PAREN ! ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_over_key_in_over_clause13341);
            over_key1010=gPLSQLParser.over_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(over_key1010.getTree(), root_0);

            LEFT_PAREN1011=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_over_clause13352); if (state.failed) return retval;

            // PLSQL_DMLParser.g:1260:13: ( query_partition_clause )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("partition")))) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    // PLSQL_DMLParser.g:1260:13: query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_over_clause13367);
                    query_partition_clause1012=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause1012.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:1261:13: ( order_by_clause ( windowing_clause )? )?
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==SQL92_RESERVED_ORDER) ) {
                alt326=1;
            }
            switch (alt326) {
                case 1 :
                    // PLSQL_DMLParser.g:1261:14: order_by_clause ( windowing_clause )?
                    {
                    pushFollow(FOLLOW_order_by_clause_in_over_clause13383);
                    order_by_clause1013=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause1013.getTree());

                    // PLSQL_DMLParser.g:1261:30: ( windowing_clause )?
                    int alt325=2;
                    int LA325_0 = input.LA(1);

                    if ( (LA325_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {
                        alt325=1;
                    }
                    switch (alt325) {
                        case 1 :
                            // PLSQL_DMLParser.g:1261:30: windowing_clause
                            {
                            pushFollow(FOLLOW_windowing_clause_in_over_clause13385);
                            windowing_clause1014=windowing_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, windowing_clause1014.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            RIGHT_PAREN1015=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_over_clause13398); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "over_clause"


    public static class windowing_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "windowing_clause"
    // PLSQL_DMLParser.g:1265:1: windowing_clause : windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements ) -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) ) -> ^( windowing_type ( windowing_elements )+ ) ;
    public final windowing_clause_return windowing_clause() throws RecognitionException {
        windowing_clause_return retval = new windowing_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        windowing_type_return windowing_type1016 =null;

        PLSQLParser_PLSQLKeys.between_key_return between_key1017 =null;

        windowing_elements_return windowing_elements1018 =null;

        PLSQLParser_PLSQLKeys.and_key_return and_key1019 =null;

        windowing_elements_return windowing_elements1020 =null;

        windowing_elements_return windowing_elements1021 =null;


        RewriteRuleSubtreeStream stream_windowing_type=new RewriteRuleSubtreeStream(adaptor,"rule windowing_type");
        RewriteRuleSubtreeStream stream_between_key=new RewriteRuleSubtreeStream(adaptor,"rule between_key");
        RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");
        RewriteRuleSubtreeStream stream_windowing_elements=new RewriteRuleSubtreeStream(adaptor,"rule windowing_elements");
            int mode = 0;    
        try {
            // PLSQL_DMLParser.g:1267:5: ( windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements ) -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) ) -> ^( windowing_type ( windowing_elements )+ ) )
            // PLSQL_DMLParser.g:1267:10: windowing_type ( between_key windowing_elements and_key windowing_elements | windowing_elements )
            {
            pushFollow(FOLLOW_windowing_type_in_windowing_clause13427);
            windowing_type1016=windowing_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_windowing_type.add(windowing_type1016.getTree());

            // PLSQL_DMLParser.g:1268:5: ( between_key windowing_elements and_key windowing_elements | windowing_elements )
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==SQL92_RESERVED_BETWEEN) ) {
                alt327=1;
            }
            else if ( (LA327_0==APPROXIMATE_NUM_LIT||LA327_0==BINDVAR||(LA327_0 >= CHAR_STRING && LA327_0 <= COLON)||LA327_0==DELIMITED_ID||LA327_0==EXACT_NUM_LIT||LA327_0==INTRODUCER||LA327_0==LEFT_PAREN||(LA327_0 >= MINUS_SIGN && LA327_0 <= NATIONAL_CHAR_STRING_LIT)||LA327_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA327_0==PLUS_SIGN||LA327_0==REGULAR_ID||LA327_0==SQL92_RESERVED_ALL||LA327_0==SQL92_RESERVED_ANY||LA327_0==SQL92_RESERVED_CASE||LA327_0==SQL92_RESERVED_CURRENT||LA327_0==SQL92_RESERVED_DATE||LA327_0==SQL92_RESERVED_DEFAULT||LA327_0==SQL92_RESERVED_DISTINCT||(LA327_0 >= SQL92_RESERVED_EXISTS && LA327_0 <= SQL92_RESERVED_FALSE)||LA327_0==SQL92_RESERVED_NULL||LA327_0==SQL92_RESERVED_PRIOR||LA327_0==SQL92_RESERVED_TRUE||LA327_0==UNSIGNED_INTEGER) ) {
                alt327=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 327, 0, input);

                throw nvae;

            }
            switch (alt327) {
                case 1 :
                    // PLSQL_DMLParser.g:1268:10: between_key windowing_elements and_key windowing_elements
                    {
                    pushFollow(FOLLOW_between_key_in_windowing_clause13438);
                    between_key1017=gPLSQLParser.between_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_between_key.add(between_key1017.getTree());

                    pushFollow(FOLLOW_windowing_elements_in_windowing_clause13440);
                    windowing_elements1018=windowing_elements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_windowing_elements.add(windowing_elements1018.getTree());

                    pushFollow(FOLLOW_and_key_in_windowing_clause13442);
                    and_key1019=gPLSQLParser.and_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_and_key.add(and_key1019.getTree());

                    pushFollow(FOLLOW_windowing_elements_in_windowing_clause13444);
                    windowing_elements1020=windowing_elements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_windowing_elements.add(windowing_elements1020.getTree());

                    if ( state.backtracking==0 ) {mode = 1;}

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1269:10: windowing_elements
                    {
                    pushFollow(FOLLOW_windowing_elements_in_windowing_clause13457);
                    windowing_elements1021=windowing_elements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_windowing_elements.add(windowing_elements1021.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: windowing_elements, between_key, windowing_type, windowing_elements, windowing_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1270:5: -> {mode == 1}? ^( windowing_type ^( between_key ( windowing_elements )+ ) )
            if (mode == 1) {
                // PLSQL_DMLParser.g:1270:20: ^( windowing_type ^( between_key ( windowing_elements )+ ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_windowing_type.nextNode(), root_1);

                // PLSQL_DMLParser.g:1270:37: ^( between_key ( windowing_elements )+ )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_between_key.nextNode(), root_2);

                if ( !(stream_windowing_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_windowing_elements.hasNext() ) {
                    adaptor.addChild(root_2, stream_windowing_elements.nextTree());

                }
                stream_windowing_elements.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1271:5: -> ^( windowing_type ( windowing_elements )+ )
            {
                // PLSQL_DMLParser.g:1271:8: ^( windowing_type ( windowing_elements )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_windowing_type.nextNode(), root_1);

                if ( !(stream_windowing_elements.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_windowing_elements.hasNext() ) {
                    adaptor.addChild(root_1, stream_windowing_elements.nextTree());

                }
                stream_windowing_elements.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "windowing_clause"


    public static class windowing_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "windowing_type"
    // PLSQL_DMLParser.g:1274:1: windowing_type : ( rows_key | range_key );
    public final windowing_type_return windowing_type() throws RecognitionException {
        windowing_type_return retval = new windowing_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.rows_key_return rows_key1022 =null;

        PLSQLParser_PLSQLKeys.range_key_return range_key1023 =null;



        try {
            // PLSQL_DMLParser.g:1275:5: ( rows_key | range_key )
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("rows"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {
                int LA328_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("rows"))) ) {
                    alt328=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("range"))) ) {
                    alt328=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 328, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);

                throw nvae;

            }
            switch (alt328) {
                case 1 :
                    // PLSQL_DMLParser.g:1275:10: rows_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_rows_key_in_windowing_type13516);
                    rows_key1022=gPLSQLParser.rows_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rows_key1022.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1276:10: range_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_range_key_in_windowing_type13527);
                    range_key1023=gPLSQLParser.range_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range_key1023.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "windowing_type"


    public static class windowing_elements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "windowing_elements"
    // PLSQL_DMLParser.g:1279:1: windowing_elements : ( unbounded_key ^ preceding_key | current_key ^ row_key | concatenation_wrapper ( preceding_key ^| following_key ^) );
    public final windowing_elements_return windowing_elements() throws RecognitionException {
        windowing_elements_return retval = new windowing_elements_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.unbounded_key_return unbounded_key1024 =null;

        PLSQLParser_PLSQLKeys.preceding_key_return preceding_key1025 =null;

        PLSQLParser_PLSQLKeys.current_key_return current_key1026 =null;

        PLSQLParser_PLSQLKeys.row_key_return row_key1027 =null;

        concatenation_wrapper_return concatenation_wrapper1028 =null;

        PLSQLParser_PLSQLKeys.preceding_key_return preceding_key1029 =null;

        PLSQLParser_PLSQLKeys.following_key_return following_key1030 =null;



        try {
            // PLSQL_DMLParser.g:1280:5: ( unbounded_key ^ preceding_key | current_key ^ row_key | concatenation_wrapper ( preceding_key ^| following_key ^) )
            int alt330=3;
            switch ( input.LA(1) ) {
            case REGULAR_ID:
                {
                int LA330_1 = input.LA(2);

                if ( (LA330_1==REGULAR_ID) ) {
                    int LA330_4 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("unbounded"))) ) {
                        alt330=1;
                    }
                    else if ( (true) ) {
                        alt330=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 330, 4, input);

                        throw nvae;

                    }
                }
                else if ( (LA330_1==MINUS_SIGN||LA330_1==PLUS_SIGN) ) {
                    alt330=3;
                }
                else if ( (LA330_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA330_1==SQL92_RESERVED_ALL||LA330_1==SQL92_RESERVED_DISTINCT||LA330_1==SQL92_RESERVED_PRIOR) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt330=3;
                }
                else if ( (LA330_1==DELIMITED_ID) && (((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {
                    alt330=3;
                }
                else if ( (LA330_1==SQL92_RESERVED_CASE) ) {
                    alt330=3;
                }
                else if ( (LA330_1==SQL92_RESERVED_ANY||LA330_1==SQL92_RESERVED_EXISTS) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt330=3;
                }
                else if ( (LA330_1==INTRODUCER) && (((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {
                    alt330=3;
                }
                else if ( (LA330_1==BINDVAR||LA330_1==COLON) ) {
                    alt330=3;
                }
                else if ( (LA330_1==APPROXIMATE_NUM_LIT||LA330_1==EXACT_NUM_LIT||LA330_1==SQL92_RESERVED_DATE||LA330_1==UNSIGNED_INTEGER) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt330=3;
                }
                else if ( ((LA330_1 >= CHAR_STRING && LA330_1 <= CHAR_STRING_PERL)||LA330_1==NATIONAL_CHAR_STRING_LIT) ) {
                    alt330=3;
                }
                else if ( (LA330_1==SQL92_RESERVED_DEFAULT||LA330_1==SQL92_RESERVED_FALSE||LA330_1==SQL92_RESERVED_NULL||LA330_1==SQL92_RESERVED_TRUE) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt330=3;
                }
                else if ( (LA330_1==ASTERISK||LA330_1==CONCATENATION_OP||(LA330_1 >= LEFT_BRACKET && LA330_1 <= LEFT_PAREN)||LA330_1==PERIOD||LA330_1==SOLIDUS||LA330_1==VERTICAL_BAR) ) {
                    alt330=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 330, 1, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_CURRENT:
                {
                alt330=2;
                }
                break;
            case APPROXIMATE_NUM_LIT:
            case BINDVAR:
            case CHAR_STRING:
            case CHAR_STRING_PERL:
            case COLON:
            case DELIMITED_ID:
            case EXACT_NUM_LIT:
            case INTRODUCER:
            case LEFT_PAREN:
            case MINUS_SIGN:
            case NATIONAL_CHAR_STRING_LIT:
            case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
            case PLUS_SIGN:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_CASE:
            case SQL92_RESERVED_DATE:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_DISTINCT:
            case SQL92_RESERVED_EXISTS:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_PRIOR:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
                {
                alt330=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 330, 0, input);

                throw nvae;

            }

            switch (alt330) {
                case 1 :
                    // PLSQL_DMLParser.g:1280:10: unbounded_key ^ preceding_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_unbounded_key_in_windowing_elements13547);
                    unbounded_key1024=gPLSQLParser.unbounded_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(unbounded_key1024.getTree(), root_0);

                    pushFollow(FOLLOW_preceding_key_in_windowing_elements13550);
                    preceding_key1025=gPLSQLParser.preceding_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preceding_key1025.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1281:10: current_key ^ row_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_current_key_in_windowing_elements13561);
                    current_key1026=gPLSQLParser.current_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(current_key1026.getTree(), root_0);

                    pushFollow(FOLLOW_row_key_in_windowing_elements13564);
                    row_key1027=gPLSQLParser.row_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, row_key1027.getTree());

                    }
                    break;
                case 3 :
                    // PLSQL_DMLParser.g:1282:10: concatenation_wrapper ( preceding_key ^| following_key ^)
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_concatenation_wrapper_in_windowing_elements13575);
                    concatenation_wrapper1028=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1028.getTree());

                    // PLSQL_DMLParser.g:1282:32: ( preceding_key ^| following_key ^)
                    int alt329=2;
                    int LA329_0 = input.LA(1);

                    if ( (LA329_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("preceding"))||(input.LT(1).getText().equalsIgnoreCase("following"))))) {
                        int LA329_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("preceding"))) ) {
                            alt329=1;
                        }
                        else if ( ((input.LT(1).getText().equalsIgnoreCase("following"))) ) {
                            alt329=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 329, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 329, 0, input);

                        throw nvae;

                    }
                    switch (alt329) {
                        case 1 :
                            // PLSQL_DMLParser.g:1282:33: preceding_key ^
                            {
                            pushFollow(FOLLOW_preceding_key_in_windowing_elements13578);
                            preceding_key1029=gPLSQLParser.preceding_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(preceding_key1029.getTree(), root_0);

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1282:48: following_key ^
                            {
                            pushFollow(FOLLOW_following_key_in_windowing_elements13581);
                            following_key1030=gPLSQLParser.following_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(following_key1030.getTree(), root_0);

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "windowing_elements"


    public static class using_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "using_clause"
    // PLSQL_DMLParser.g:1285:1: using_clause : using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* ) ;
    public final using_clause_return using_clause() throws RecognitionException {
        using_clause_return retval = new using_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK1032=null;
        Token COMMA1034=null;
        PLSQLParser_PLSQLKeys.using_key_return using_key1031 =null;

        using_element_return using_element1033 =null;

        using_element_return using_element1035 =null;


        Object ASTERISK1032_tree=null;
        Object COMMA1034_tree=null;

        try {
            // PLSQL_DMLParser.g:1286:5: ( using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* ) )
            // PLSQL_DMLParser.g:1286:10: using_key ^ ( ASTERISK | using_element ( COMMA ! using_element )* )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_using_key_in_using_clause13603);
            using_key1031=gPLSQLParser.using_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(using_key1031.getTree(), root_0);

            // PLSQL_DMLParser.g:1287:5: ( ASTERISK | using_element ( COMMA ! using_element )* )
            int alt332=2;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==ASTERISK) ) {
                alt332=1;
            }
            else if ( (LA332_0==APPROXIMATE_NUM_LIT||LA332_0==BINDVAR||(LA332_0 >= CHAR_STRING && LA332_0 <= COLON)||LA332_0==DELIMITED_ID||LA332_0==EXACT_NUM_LIT||LA332_0==INTRODUCER||LA332_0==LEFT_PAREN||(LA332_0 >= MINUS_SIGN && LA332_0 <= NATIONAL_CHAR_STRING_LIT)||LA332_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA332_0==PLUS_SIGN||LA332_0==REGULAR_ID||LA332_0==SQL92_RESERVED_ALL||LA332_0==SQL92_RESERVED_ANY||LA332_0==SQL92_RESERVED_CASE||(LA332_0 >= SQL92_RESERVED_CURSOR && LA332_0 <= SQL92_RESERVED_DATE)||LA332_0==SQL92_RESERVED_DEFAULT||LA332_0==SQL92_RESERVED_DISTINCT||(LA332_0 >= SQL92_RESERVED_EXISTS && LA332_0 <= SQL92_RESERVED_FALSE)||LA332_0==SQL92_RESERVED_IN||(LA332_0 >= SQL92_RESERVED_NOT && LA332_0 <= SQL92_RESERVED_NULL)||LA332_0==SQL92_RESERVED_PRIOR||LA332_0==SQL92_RESERVED_TRUE||LA332_0==UNSIGNED_INTEGER) ) {
                alt332=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 332, 0, input);

                throw nvae;

            }
            switch (alt332) {
                case 1 :
                    // PLSQL_DMLParser.g:1287:10: ASTERISK
                    {
                    ASTERISK1032=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_using_clause13615); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK1032_tree = 
                    (Object)adaptor.create(ASTERISK1032)
                    ;
                    adaptor.addChild(root_0, ASTERISK1032_tree);
                    }

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1288:10: using_element ( COMMA ! using_element )*
                    {
                    pushFollow(FOLLOW_using_element_in_using_clause13626);
                    using_element1033=using_element();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_element1033.getTree());

                    // PLSQL_DMLParser.g:1288:24: ( COMMA ! using_element )*
                    loop331:
                    do {
                        int alt331=2;
                        int LA331_0 = input.LA(1);

                        if ( (LA331_0==COMMA) ) {
                            alt331=1;
                        }


                        switch (alt331) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:1288:25: COMMA ! using_element
                    	    {
                    	    COMMA1034=(Token)match(input,COMMA,FOLLOW_COMMA_in_using_clause13629); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_using_element_in_using_clause13632);
                    	    using_element1035=using_element();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, using_element1035.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop331;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_clause"


    public static class using_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "using_element"
    // PLSQL_DMLParser.g:1292:1: using_element : ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )? -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? ) ;
    public final using_element_return using_element() throws RecognitionException {
        using_element_return retval = new using_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.in_key_return in_key1036 =null;

        PLSQLParser_PLSQLKeys.out_key_return out_key1037 =null;

        PLSQLParser_PLSQLKeys.out_key_return out_key1038 =null;

        select_list_elements_return select_list_elements1039 =null;

        PLSQLParser_PLSQLCommons.column_alias_return column_alias1040 =null;


        RewriteRuleSubtreeStream stream_column_alias=new RewriteRuleSubtreeStream(adaptor,"rule column_alias");
        RewriteRuleSubtreeStream stream_out_key=new RewriteRuleSubtreeStream(adaptor,"rule out_key");
        RewriteRuleSubtreeStream stream_select_list_elements=new RewriteRuleSubtreeStream(adaptor,"rule select_list_elements");
        RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
        try {
            // PLSQL_DMLParser.g:1293:5: ( ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )? -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? ) )
            // PLSQL_DMLParser.g:1293:10: ( in_key ( out_key )? | out_key )? select_list_elements ( column_alias )?
            {
            // PLSQL_DMLParser.g:1293:10: ( in_key ( out_key )? | out_key )?
            int alt334=3;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==SQL92_RESERVED_IN) ) {
                alt334=1;
            }
            else if ( (LA334_0==REGULAR_ID) ) {
                int LA334_2 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("out"))) ) {
                    alt334=2;
                }
            }
            switch (alt334) {
                case 1 :
                    // PLSQL_DMLParser.g:1293:11: in_key ( out_key )?
                    {
                    pushFollow(FOLLOW_in_key_in_using_element13661);
                    in_key1036=gPLSQLParser.in_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_in_key.add(in_key1036.getTree());

                    // PLSQL_DMLParser.g:1293:18: ( out_key )?
                    int alt333=2;
                    int LA333_0 = input.LA(1);

                    if ( (LA333_0==REGULAR_ID) ) {
                        int LA333_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equalsIgnoreCase("out"))) ) {
                            alt333=1;
                        }
                    }
                    switch (alt333) {
                        case 1 :
                            // PLSQL_DMLParser.g:1293:18: out_key
                            {
                            pushFollow(FOLLOW_out_key_in_using_element13663);
                            out_key1037=gPLSQLParser.out_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_out_key.add(out_key1037.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1293:27: out_key
                    {
                    pushFollow(FOLLOW_out_key_in_using_element13666);
                    out_key1038=gPLSQLParser.out_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_out_key.add(out_key1038.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_select_list_elements_in_using_element13670);
            select_list_elements1039=select_list_elements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_select_list_elements.add(select_list_elements1039.getTree());

            // PLSQL_DMLParser.g:1293:58: ( column_alias )?
            int alt335=2;
            switch ( input.LA(1) ) {
                case SQL92_RESERVED_AS:
                    {
                    alt335=1;
                    }
                    break;
                case INTRODUCER:
                    {
                    alt335=1;
                    }
                    break;
                case REGULAR_ID:
                    {
                    alt335=1;
                    }
                    break;
                case DELIMITED_ID:
                    {
                    alt335=1;
                    }
                    break;
                case CHAR_STRING:
                case CHAR_STRING_PERL:
                case NATIONAL_CHAR_STRING_LIT:
                    {
                    alt335=1;
                    }
                    break;
            }

            switch (alt335) {
                case 1 :
                    // PLSQL_DMLParser.g:1293:58: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_using_element13672);
                    column_alias1040=gPLSQLParser.column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_column_alias.add(column_alias1040.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: in_key, out_key, select_list_elements, column_alias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1294:9: -> ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? )
            {
                // PLSQL_DMLParser.g:1294:12: ^( ELEMENT ( in_key )? ( out_key )? select_list_elements ( column_alias )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELEMENT, "ELEMENT")
                , root_1);

                // PLSQL_DMLParser.g:1294:22: ( in_key )?
                if ( stream_in_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_in_key.nextTree());

                }
                stream_in_key.reset();

                // PLSQL_DMLParser.g:1294:30: ( out_key )?
                if ( stream_out_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_out_key.nextTree());

                }
                stream_out_key.reset();

                adaptor.addChild(root_1, stream_select_list_elements.nextTree());

                // PLSQL_DMLParser.g:1294:60: ( column_alias )?
                if ( stream_column_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_column_alias.nextTree());

                }
                stream_column_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "using_element"


    public static class collect_order_by_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "collect_order_by_part"
    // PLSQL_DMLParser.g:1297:1: collect_order_by_part : order_key ^ by_key ! concatenation_wrapper ;
    public final collect_order_by_part_return collect_order_by_part() throws RecognitionException {
        collect_order_by_part_return retval = new collect_order_by_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.order_key_return order_key1041 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key1042 =null;

        concatenation_wrapper_return concatenation_wrapper1043 =null;



        try {
            // PLSQL_DMLParser.g:1298:5: ( order_key ^ by_key ! concatenation_wrapper )
            // PLSQL_DMLParser.g:1298:10: order_key ^ by_key ! concatenation_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_order_key_in_collect_order_by_part13718);
            order_key1041=gPLSQLParser.order_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(order_key1041.getTree(), root_0);

            pushFollow(FOLLOW_by_key_in_collect_order_by_part13721);
            by_key1042=gPLSQLParser.by_key();

            state._fsp--;
            if (state.failed) return retval;

            pushFollow(FOLLOW_concatenation_wrapper_in_collect_order_by_part13724);
            concatenation_wrapper1043=concatenation_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1043.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "collect_order_by_part"


    public static class within_or_over_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "within_or_over_part"
    // PLSQL_DMLParser.g:1301:1: within_or_over_part : ( within_key ^ group_key ! LEFT_PAREN ! order_by_clause RIGHT_PAREN !| over_clause );
    public final within_or_over_part_return within_or_over_part() throws RecognitionException {
        within_or_over_part_return retval = new within_or_over_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN1046=null;
        Token RIGHT_PAREN1048=null;
        PLSQLParser_PLSQLKeys.within_key_return within_key1044 =null;

        PLSQLParser_PLSQLKeys.group_key_return group_key1045 =null;

        order_by_clause_return order_by_clause1047 =null;

        over_clause_return over_clause1049 =null;


        Object LEFT_PAREN1046_tree=null;
        Object RIGHT_PAREN1048_tree=null;

        try {
            // PLSQL_DMLParser.g:1302:5: ( within_key ^ group_key ! LEFT_PAREN ! order_by_clause RIGHT_PAREN !| over_clause )
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("over"))||(input.LT(1).getText().equalsIgnoreCase("within"))))) {
                int LA336_1 = input.LA(2);

                if ( (LA336_1==SQL92_RESERVED_GROUP) && ((input.LT(1).getText().equalsIgnoreCase("within")))) {
                    alt336=1;
                }
                else if ( (LA336_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("over")))) {
                    alt336=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 336, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);

                throw nvae;

            }
            switch (alt336) {
                case 1 :
                    // PLSQL_DMLParser.g:1302:10: within_key ^ group_key ! LEFT_PAREN ! order_by_clause RIGHT_PAREN !
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_within_key_in_within_or_over_part13744);
                    within_key1044=gPLSQLParser.within_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(within_key1044.getTree(), root_0);

                    pushFollow(FOLLOW_group_key_in_within_or_over_part13747);
                    group_key1045=gPLSQLParser.group_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    LEFT_PAREN1046=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_within_or_over_part13750); if (state.failed) return retval;

                    pushFollow(FOLLOW_order_by_clause_in_within_or_over_part13753);
                    order_by_clause1047=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause1047.getTree());

                    RIGHT_PAREN1048=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_within_or_over_part13755); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1303:10: over_clause
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_over_clause_in_within_or_over_part13767);
                    over_clause1049=over_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, over_clause1049.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "within_or_over_part"


    public static class cost_matrix_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cost_matrix_clause"
    // PLSQL_DMLParser.g:1306:1: cost_matrix_clause : cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN ! cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN ! values_key ! expression_list ) ;
    public final cost_matrix_clause_return cost_matrix_clause() throws RecognitionException {
        cost_matrix_clause_return retval = new cost_matrix_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN1053=null;
        Token COMMA1055=null;
        Token RIGHT_PAREN1057=null;
        PLSQLParser_PLSQLKeys.cost_key_return cost_key1050 =null;

        PLSQLParser_PLSQLKeys.model_key_return model_key1051 =null;

        PLSQLParser_PLSQLKeys.auto_key_return auto_key1052 =null;

        PLSQLParser_PLSQLCommons.cost_class_name_return cost_class_name1054 =null;

        PLSQLParser_PLSQLCommons.cost_class_name_return cost_class_name1056 =null;

        PLSQLParser_PLSQLKeys.values_key_return values_key1058 =null;

        expression_list_return expression_list1059 =null;


        Object LEFT_PAREN1053_tree=null;
        Object COMMA1055_tree=null;
        Object RIGHT_PAREN1057_tree=null;

        try {
            // PLSQL_DMLParser.g:1307:5: ( cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN ! cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN ! values_key ! expression_list ) )
            // PLSQL_DMLParser.g:1307:10: cost_key ^ ( model_key ( auto_key )? | LEFT_PAREN ! cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN ! values_key ! expression_list )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cost_key_in_cost_matrix_clause13787);
            cost_key1050=gPLSQLParser.cost_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(cost_key1050.getTree(), root_0);

            // PLSQL_DMLParser.g:1308:5: ( model_key ( auto_key )? | LEFT_PAREN ! cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN ! values_key ! expression_list )
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( (LA339_0==PLSQL_NON_RESERVED_MODEL) ) {
                alt339=1;
            }
            else if ( (LA339_0==LEFT_PAREN) ) {
                alt339=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);

                throw nvae;

            }
            switch (alt339) {
                case 1 :
                    // PLSQL_DMLParser.g:1308:10: model_key ( auto_key )?
                    {
                    pushFollow(FOLLOW_model_key_in_cost_matrix_clause13799);
                    model_key1051=gPLSQLParser.model_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, model_key1051.getTree());

                    // PLSQL_DMLParser.g:1308:20: ( auto_key )?
                    int alt337=2;
                    int LA337_0 = input.LA(1);

                    if ( (LA337_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("auto")))) {
                        alt337=1;
                    }
                    switch (alt337) {
                        case 1 :
                            // PLSQL_DMLParser.g:1308:20: auto_key
                            {
                            pushFollow(FOLLOW_auto_key_in_cost_matrix_clause13801);
                            auto_key1052=gPLSQLParser.auto_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, auto_key1052.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1309:10: LEFT_PAREN ! cost_class_name ( COMMA ! cost_class_name )* RIGHT_PAREN ! values_key ! expression_list
                    {
                    LEFT_PAREN1053=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cost_matrix_clause13813); if (state.failed) return retval;

                    pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause13816);
                    cost_class_name1054=gPLSQLParser.cost_class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cost_class_name1054.getTree());

                    // PLSQL_DMLParser.g:1309:38: ( COMMA ! cost_class_name )*
                    loop338:
                    do {
                        int alt338=2;
                        int LA338_0 = input.LA(1);

                        if ( (LA338_0==COMMA) ) {
                            alt338=1;
                        }


                        switch (alt338) {
                    	case 1 :
                    	    // PLSQL_DMLParser.g:1309:39: COMMA ! cost_class_name
                    	    {
                    	    COMMA1055=(Token)match(input,COMMA,FOLLOW_COMMA_in_cost_matrix_clause13819); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause13822);
                    	    cost_class_name1056=gPLSQLParser.cost_class_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cost_class_name1056.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop338;
                        }
                    } while (true);


                    RIGHT_PAREN1057=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cost_matrix_clause13826); if (state.failed) return retval;

                    pushFollow(FOLLOW_values_key_in_cost_matrix_clause13829);
                    values_key1058=gPLSQLParser.values_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_list_in_cost_matrix_clause13845);
                    expression_list1059=expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1059.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cost_matrix_clause"


    public static class xml_passing_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xml_passing_clause"
    // PLSQL_DMLParser.g:1314:1: xml_passing_clause : passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? ) ;
    public final xml_passing_clause_return xml_passing_clause() throws RecognitionException {
        xml_passing_clause_return retval = new xml_passing_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA1065=null;
        PLSQLParser_PLSQLKeys.passing_key_return passing_key1060 =null;

        PLSQLParser_PLSQLKeys.by_key_return by_key1061 =null;

        PLSQLParser_PLSQLKeys.value_key_return value_key1062 =null;

        expression_wrapper_return expression_wrapper1063 =null;

        PLSQLParser_PLSQLCommons.column_alias_return column_alias1064 =null;

        expression_wrapper_return expression_wrapper1066 =null;

        PLSQLParser_PLSQLCommons.column_alias_return column_alias1067 =null;


        Object COMMA1065_tree=null;

        try {
            // PLSQL_DMLParser.g:1315:5: ( passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? ) )
            // PLSQL_DMLParser.g:1315:10: passing_key ^ ( by_key ! value_key )? expression_wrapper ( column_alias )? ( COMMA ! expression_wrapper ( column_alias )? )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_passing_key_in_xml_passing_clause13871);
            passing_key1060=gPLSQLParser.passing_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(passing_key1060.getTree(), root_0);

            // PLSQL_DMLParser.g:1315:23: ( by_key ! value_key )?
            int alt340=2;
            int LA340_0 = input.LA(1);

            if ( (LA340_0==SQL92_RESERVED_BY) ) {
                alt340=1;
            }
            switch (alt340) {
                case 1 :
                    // PLSQL_DMLParser.g:1315:24: by_key ! value_key
                    {
                    pushFollow(FOLLOW_by_key_in_xml_passing_clause13875);
                    by_key1061=gPLSQLParser.by_key();

                    state._fsp--;
                    if (state.failed) return retval;

                    pushFollow(FOLLOW_value_key_in_xml_passing_clause13878);
                    value_key1062=gPLSQLParser.value_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, value_key1062.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_expression_wrapper_in_xml_passing_clause13894);
            expression_wrapper1063=expression_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper1063.getTree());

            // PLSQL_DMLParser.g:1316:32: ( column_alias )?
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( ((LA341_0 >= CHAR_STRING && LA341_0 <= CHAR_STRING_PERL)||LA341_0==DELIMITED_ID||LA341_0==INTRODUCER||LA341_0==NATIONAL_CHAR_STRING_LIT||LA341_0==REGULAR_ID||LA341_0==SQL92_RESERVED_AS) ) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    // PLSQL_DMLParser.g:1316:32: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_xml_passing_clause13896);
                    column_alias1064=gPLSQLParser.column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias1064.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:1316:46: ( COMMA ! expression_wrapper ( column_alias )? )
            // PLSQL_DMLParser.g:1316:47: COMMA ! expression_wrapper ( column_alias )?
            {
            COMMA1065=(Token)match(input,COMMA,FOLLOW_COMMA_in_xml_passing_clause13900); if (state.failed) return retval;

            pushFollow(FOLLOW_expression_wrapper_in_xml_passing_clause13903);
            expression_wrapper1066=expression_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper1066.getTree());

            // PLSQL_DMLParser.g:1316:73: ( column_alias )?
            int alt342=2;
            int LA342_0 = input.LA(1);

            if ( ((LA342_0 >= CHAR_STRING && LA342_0 <= CHAR_STRING_PERL)||LA342_0==DELIMITED_ID||LA342_0==INTRODUCER||LA342_0==NATIONAL_CHAR_STRING_LIT||LA342_0==SQL92_RESERVED_AS) ) {
                alt342=1;
            }
            else if ( (LA342_0==REGULAR_ID) ) {
                int LA342_3 = input.LA(2);

                if ( (!((((input.LT(1).getText().equalsIgnoreCase("columns"))||(input.LT(1).getText().equalsIgnoreCase("returning")))))) ) {
                    alt342=1;
                }
            }
            switch (alt342) {
                case 1 :
                    // PLSQL_DMLParser.g:1316:73: column_alias
                    {
                    pushFollow(FOLLOW_column_alias_in_xml_passing_clause13905);
                    column_alias1067=gPLSQLParser.column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias1067.getTree());

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xml_passing_clause"


    public static class xml_attributes_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xml_attributes_clause"
    // PLSQL_DMLParser.g:1319:1: xml_attributes_clause : xmlattributes_key ^ LEFT_PAREN ! ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN !;
    public final xml_attributes_clause_return xml_attributes_clause() throws RecognitionException {
        xml_attributes_clause_return retval = new xml_attributes_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN1069=null;
        Token COMMA1075=null;
        Token RIGHT_PAREN1077=null;
        PLSQLParser_PLSQLKeys.xmlattributes_key_return xmlattributes_key1068 =null;

        PLSQLParser_PLSQLKeys.entityescaping_key_return entityescaping_key1070 =null;

        PLSQLParser_PLSQLKeys.noentityescaping_key_return noentityescaping_key1071 =null;

        PLSQLParser_PLSQLKeys.schemacheck_key_return schemacheck_key1072 =null;

        PLSQLParser_PLSQLKeys.noschemacheck_key_return noschemacheck_key1073 =null;

        xml_multiuse_expression_element_return xml_multiuse_expression_element1074 =null;

        xml_multiuse_expression_element_return xml_multiuse_expression_element1076 =null;


        Object LEFT_PAREN1069_tree=null;
        Object COMMA1075_tree=null;
        Object RIGHT_PAREN1077_tree=null;

        try {
            // PLSQL_DMLParser.g:1320:5: ( xmlattributes_key ^ LEFT_PAREN ! ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN !)
            // PLSQL_DMLParser.g:1320:10: xmlattributes_key ^ LEFT_PAREN ! ( entityescaping_key | noentityescaping_key )? ( schemacheck_key | noschemacheck_key )? xml_multiuse_expression_element ( COMMA ! xml_multiuse_expression_element )* RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_xmlattributes_key_in_xml_attributes_clause13927);
            xmlattributes_key1068=gPLSQLParser.xmlattributes_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlattributes_key1068.getTree(), root_0);

            LEFT_PAREN1069=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_xml_attributes_clause13938); if (state.failed) return retval;

            // PLSQL_DMLParser.g:1322:13: ( entityescaping_key | noentityescaping_key )?
            int alt343=3;
            int LA343_0 = input.LA(1);

            if ( (LA343_0==REGULAR_ID) ) {
                int LA343_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("entityescaping"))) ) {
                    alt343=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("noentityescaping"))) ) {
                    alt343=2;
                }
            }
            switch (alt343) {
                case 1 :
                    // PLSQL_DMLParser.g:1322:14: entityescaping_key
                    {
                    pushFollow(FOLLOW_entityescaping_key_in_xml_attributes_clause13954);
                    entityescaping_key1070=gPLSQLParser.entityescaping_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, entityescaping_key1070.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1322:33: noentityescaping_key
                    {
                    pushFollow(FOLLOW_noentityescaping_key_in_xml_attributes_clause13956);
                    noentityescaping_key1071=gPLSQLParser.noentityescaping_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noentityescaping_key1071.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:1323:13: ( schemacheck_key | noschemacheck_key )?
            int alt344=3;
            int LA344_0 = input.LA(1);

            if ( (LA344_0==REGULAR_ID) ) {
                int LA344_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("schemacheck"))) ) {
                    alt344=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("noschemacheck"))) ) {
                    alt344=2;
                }
            }
            switch (alt344) {
                case 1 :
                    // PLSQL_DMLParser.g:1323:14: schemacheck_key
                    {
                    pushFollow(FOLLOW_schemacheck_key_in_xml_attributes_clause13973);
                    schemacheck_key1072=gPLSQLParser.schemacheck_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schemacheck_key1072.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1323:30: noschemacheck_key
                    {
                    pushFollow(FOLLOW_noschemacheck_key_in_xml_attributes_clause13975);
                    noschemacheck_key1073=gPLSQLParser.noschemacheck_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noschemacheck_key1073.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause13991);
            xml_multiuse_expression_element1074=xml_multiuse_expression_element();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_multiuse_expression_element1074.getTree());

            // PLSQL_DMLParser.g:1324:45: ( COMMA ! xml_multiuse_expression_element )*
            loop345:
            do {
                int alt345=2;
                int LA345_0 = input.LA(1);

                if ( (LA345_0==COMMA) ) {
                    alt345=1;
                }


                switch (alt345) {
            	case 1 :
            	    // PLSQL_DMLParser.g:1324:46: COMMA ! xml_multiuse_expression_element
            	    {
            	    COMMA1075=(Token)match(input,COMMA,FOLLOW_COMMA_in_xml_attributes_clause13994); if (state.failed) return retval;

            	    pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause13997);
            	    xml_multiuse_expression_element1076=xml_multiuse_expression_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_multiuse_expression_element1076.getTree());

            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            RIGHT_PAREN1077=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14009); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xml_attributes_clause"


    public static class xml_namespaces_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xml_namespaces_clause"
    // PLSQL_DMLParser.g:1328:1: xml_namespaces_clause : xmlnamespaces_key ^ LEFT_PAREN ! ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN !;
    public final xml_namespaces_clause_return xml_namespaces_clause() throws RecognitionException {
        xml_namespaces_clause_return retval = new xml_namespaces_clause_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token LEFT_PAREN1079=null;
        Token COMMA1082=null;
        Token RIGHT_PAREN1086=null;
        PLSQLParser_PLSQLKeys.xmlnamespaces_key_return xmlnamespaces_key1078 =null;

        concatenation_wrapper_return concatenation_wrapper1080 =null;

        PLSQLParser_PLSQLCommons.column_alias_return column_alias1081 =null;

        concatenation_wrapper_return concatenation_wrapper1083 =null;

        PLSQLParser_PLSQLCommons.column_alias_return column_alias1084 =null;

        xml_general_default_part_return xml_general_default_part1085 =null;


        Object LEFT_PAREN1079_tree=null;
        Object COMMA1082_tree=null;
        Object RIGHT_PAREN1086_tree=null;

        try {
            // PLSQL_DMLParser.g:1329:5: ( xmlnamespaces_key ^ LEFT_PAREN ! ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN !)
            // PLSQL_DMLParser.g:1329:10: xmlnamespaces_key ^ LEFT_PAREN ! ( concatenation_wrapper column_alias )? ( COMMA ! concatenation_wrapper column_alias )* ( ( default_key )=> xml_general_default_part )? RIGHT_PAREN !
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14030);
            xmlnamespaces_key1078=gPLSQLParser.xmlnamespaces_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(xmlnamespaces_key1078.getTree(), root_0);

            LEFT_PAREN1079=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14041); if (state.failed) return retval;

            // PLSQL_DMLParser.g:1331:13: ( concatenation_wrapper column_alias )?
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==APPROXIMATE_NUM_LIT||LA346_0==BINDVAR||(LA346_0 >= CHAR_STRING && LA346_0 <= COLON)||LA346_0==DELIMITED_ID||LA346_0==EXACT_NUM_LIT||LA346_0==INTRODUCER||LA346_0==LEFT_PAREN||(LA346_0 >= MINUS_SIGN && LA346_0 <= NATIONAL_CHAR_STRING_LIT)||LA346_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA346_0==PLUS_SIGN||LA346_0==REGULAR_ID||LA346_0==SQL92_RESERVED_ALL||LA346_0==SQL92_RESERVED_ANY||LA346_0==SQL92_RESERVED_CASE||LA346_0==SQL92_RESERVED_DATE||LA346_0==SQL92_RESERVED_DISTINCT||(LA346_0 >= SQL92_RESERVED_EXISTS && LA346_0 <= SQL92_RESERVED_FALSE)||LA346_0==SQL92_RESERVED_NULL||LA346_0==SQL92_RESERVED_PRIOR||LA346_0==SQL92_RESERVED_TRUE||LA346_0==UNSIGNED_INTEGER) ) {
                alt346=1;
            }
            else if ( (LA346_0==SQL92_RESERVED_DEFAULT) ) {
                alt346=1;
            }
            switch (alt346) {
                case 1 :
                    // PLSQL_DMLParser.g:1331:14: concatenation_wrapper column_alias
                    {
                    pushFollow(FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14057);
                    concatenation_wrapper1080=concatenation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1080.getTree());

                    pushFollow(FOLLOW_column_alias_in_xml_namespaces_clause14059);
                    column_alias1081=gPLSQLParser.column_alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias1081.getTree());

                    }
                    break;

            }


            // PLSQL_DMLParser.g:1332:17: ( COMMA ! concatenation_wrapper column_alias )*
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==COMMA) ) {
                    alt347=1;
                }


                switch (alt347) {
            	case 1 :
            	    // PLSQL_DMLParser.g:1332:18: COMMA ! concatenation_wrapper column_alias
            	    {
            	    COMMA1082=(Token)match(input,COMMA,FOLLOW_COMMA_in_xml_namespaces_clause14080); if (state.failed) return retval;

            	    pushFollow(FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14083);
            	    concatenation_wrapper1083=concatenation_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1083.getTree());

            	    pushFollow(FOLLOW_column_alias_in_xml_namespaces_clause14085);
            	    column_alias1084=gPLSQLParser.column_alias();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias1084.getTree());

            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);


            // PLSQL_DMLParser.g:1333:13: ( ( default_key )=> xml_general_default_part )?
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==SQL92_RESERVED_DEFAULT) && (synpred50_PLSQL_DMLParser())) {
                alt348=1;
            }
            switch (alt348) {
                case 1 :
                    // PLSQL_DMLParser.g:1333:14: ( default_key )=> xml_general_default_part
                    {
                    pushFollow(FOLLOW_xml_general_default_part_in_xml_namespaces_clause14107);
                    xml_general_default_part1085=xml_general_default_part();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, xml_general_default_part1085.getTree());

                    }
                    break;

            }


            RIGHT_PAREN1086=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14119); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xml_namespaces_clause"


    public static class xml_table_column_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xml_table_column"
    // PLSQL_DMLParser.g:1337:1: xml_table_column : xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? ) -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? ) ;
    public final xml_table_column_return xml_table_column() throws RecognitionException {
        xml_table_column_return retval = new xml_table_column_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLCommons.xml_column_name_return xml_column_name1087 =null;

        PLSQLParser_PLSQLKeys.for_key_return for_key1088 =null;

        PLSQLParser_PLSQLKeys.ordinality_key_return ordinality_key1089 =null;

        PLSQLParser_PLSQLCommons.type_spec_return type_spec1090 =null;

        PLSQLParser_PLSQLKeys.path_key_return path_key1091 =null;

        concatenation_wrapper_return concatenation_wrapper1092 =null;

        xml_general_default_part_return xml_general_default_part1093 =null;


        RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
        RewriteRuleSubtreeStream stream_concatenation_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule concatenation_wrapper");
        RewriteRuleSubtreeStream stream_xml_column_name=new RewriteRuleSubtreeStream(adaptor,"rule xml_column_name");
        RewriteRuleSubtreeStream stream_path_key=new RewriteRuleSubtreeStream(adaptor,"rule path_key");
        RewriteRuleSubtreeStream stream_ordinality_key=new RewriteRuleSubtreeStream(adaptor,"rule ordinality_key");
        RewriteRuleSubtreeStream stream_xml_general_default_part=new RewriteRuleSubtreeStream(adaptor,"rule xml_general_default_part");
        RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
        try {
            // PLSQL_DMLParser.g:1338:5: ( xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? ) -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? ) )
            // PLSQL_DMLParser.g:1338:10: xml_column_name ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? )
            {
            pushFollow(FOLLOW_xml_column_name_in_xml_table_column14140);
            xml_column_name1087=gPLSQLParser.xml_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_xml_column_name.add(xml_column_name1087.getTree());

            // PLSQL_DMLParser.g:1339:5: ( for_key ordinality_key | type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )? )
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( (LA351_0==SQL92_RESERVED_FOR) ) {
                alt351=1;
            }
            else if ( (LA351_0==DELIMITED_ID||LA351_0==REGULAR_ID||LA351_0==SQL92_RESERVED_DATE) ) {
                alt351=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 351, 0, input);

                throw nvae;

            }
            switch (alt351) {
                case 1 :
                    // PLSQL_DMLParser.g:1339:10: for_key ordinality_key
                    {
                    pushFollow(FOLLOW_for_key_in_xml_table_column14151);
                    for_key1088=gPLSQLParser.for_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_for_key.add(for_key1088.getTree());

                    pushFollow(FOLLOW_ordinality_key_in_xml_table_column14153);
                    ordinality_key1089=gPLSQLParser.ordinality_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_ordinality_key.add(ordinality_key1089.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1340:10: type_spec ( path_key concatenation_wrapper )? ( ( default_key )=> xml_general_default_part )?
                    {
                    pushFollow(FOLLOW_type_spec_in_xml_table_column14164);
                    type_spec1090=gPLSQLParser.type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_spec.add(type_spec1090.getTree());

                    // PLSQL_DMLParser.g:1340:20: ( path_key concatenation_wrapper )?
                    int alt349=2;
                    int LA349_0 = input.LA(1);

                    if ( (LA349_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("path")))) {
                        alt349=1;
                    }
                    switch (alt349) {
                        case 1 :
                            // PLSQL_DMLParser.g:1340:21: path_key concatenation_wrapper
                            {
                            pushFollow(FOLLOW_path_key_in_xml_table_column14167);
                            path_key1091=gPLSQLParser.path_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_path_key.add(path_key1091.getTree());

                            pushFollow(FOLLOW_concatenation_wrapper_in_xml_table_column14169);
                            concatenation_wrapper1092=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation_wrapper.add(concatenation_wrapper1092.getTree());

                            }
                            break;

                    }


                    // PLSQL_DMLParser.g:1340:54: ( ( default_key )=> xml_general_default_part )?
                    int alt350=2;
                    int LA350_0 = input.LA(1);

                    if ( (LA350_0==SQL92_RESERVED_DEFAULT) && (synpred51_PLSQL_DMLParser())) {
                        alt350=1;
                    }
                    switch (alt350) {
                        case 1 :
                            // PLSQL_DMLParser.g:1340:55: ( default_key )=> xml_general_default_part
                            {
                            pushFollow(FOLLOW_xml_general_default_part_in_xml_table_column14179);
                            xml_general_default_part1093=xml_general_default_part();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_xml_general_default_part.add(xml_general_default_part1093.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: concatenation_wrapper, xml_column_name, ordinality_key, xml_general_default_part, type_spec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1342:9: -> ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? )
            {
                // PLSQL_DMLParser.g:1342:12: ^( XML_COLUMN xml_column_name ( ordinality_key )? ( type_spec )? ( concatenation_wrapper )? ( xml_general_default_part )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(XML_COLUMN, "XML_COLUMN")
                , root_1);

                adaptor.addChild(root_1, stream_xml_column_name.nextTree());

                // PLSQL_DMLParser.g:1342:41: ( ordinality_key )?
                if ( stream_ordinality_key.hasNext() ) {
                    adaptor.addChild(root_1, stream_ordinality_key.nextTree());

                }
                stream_ordinality_key.reset();

                // PLSQL_DMLParser.g:1342:57: ( type_spec )?
                if ( stream_type_spec.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_spec.nextTree());

                }
                stream_type_spec.reset();

                // PLSQL_DMLParser.g:1342:68: ( concatenation_wrapper )?
                if ( stream_concatenation_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_concatenation_wrapper.nextTree());

                }
                stream_concatenation_wrapper.reset();

                // PLSQL_DMLParser.g:1342:91: ( xml_general_default_part )?
                if ( stream_xml_general_default_part.hasNext() ) {
                    adaptor.addChild(root_1, stream_xml_general_default_part.nextTree());

                }
                stream_xml_general_default_part.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xml_table_column"


    public static class xml_general_default_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xml_general_default_part"
    // PLSQL_DMLParser.g:1345:1: xml_general_default_part : default_key ^ concatenation_wrapper ;
    public final xml_general_default_part_return xml_general_default_part() throws RecognitionException {
        xml_general_default_part_return retval = new xml_general_default_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.default_key_return default_key1094 =null;

        concatenation_wrapper_return concatenation_wrapper1095 =null;



        try {
            // PLSQL_DMLParser.g:1346:5: ( default_key ^ concatenation_wrapper )
            // PLSQL_DMLParser.g:1346:10: default_key ^ concatenation_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_default_key_in_xml_general_default_part14235);
            default_key1094=gPLSQLParser.default_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(default_key1094.getTree(), root_0);

            pushFollow(FOLLOW_concatenation_wrapper_in_xml_general_default_part14238);
            concatenation_wrapper1095=concatenation_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1095.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xml_general_default_part"


    public static class xml_multiuse_expression_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xml_multiuse_expression_element"
    // PLSQL_DMLParser.g:1349:1: xml_multiuse_expression_element : expression ( as_key ( id_expression | evalname_key concatenation ) )? -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) ) -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) ) -> ^( XML_ELEMENT ^( EXPR expression ) ) ;
    public final xml_multiuse_expression_element_return xml_multiuse_expression_element() throws RecognitionException {
        xml_multiuse_expression_element_return retval = new xml_multiuse_expression_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        expression_return expression1096 =null;

        PLSQLParser_PLSQLKeys.as_key_return as_key1097 =null;

        PLSQLParser_PLSQLCommons.id_expression_return id_expression1098 =null;

        PLSQLParser_PLSQLKeys.evalname_key_return evalname_key1099 =null;

        concatenation_return concatenation1100 =null;


        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_evalname_key=new RewriteRuleSubtreeStream(adaptor,"rule evalname_key");
        RewriteRuleSubtreeStream stream_id_expression=new RewriteRuleSubtreeStream(adaptor,"rule id_expression");
        RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
        RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");
            int mode = 0;    
        try {
            // PLSQL_DMLParser.g:1351:5: ( expression ( as_key ( id_expression | evalname_key concatenation ) )? -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) ) -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) ) -> ^( XML_ELEMENT ^( EXPR expression ) ) )
            // PLSQL_DMLParser.g:1351:10: expression ( as_key ( id_expression | evalname_key concatenation ) )?
            {
            pushFollow(FOLLOW_expression_in_xml_multiuse_expression_element14266);
            expression1096=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression1096.getTree());

            // PLSQL_DMLParser.g:1351:21: ( as_key ( id_expression | evalname_key concatenation ) )?
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( (LA353_0==SQL92_RESERVED_AS) ) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    // PLSQL_DMLParser.g:1351:22: as_key ( id_expression | evalname_key concatenation )
                    {
                    pushFollow(FOLLOW_as_key_in_xml_multiuse_expression_element14269);
                    as_key1097=gPLSQLParser.as_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_as_key.add(as_key1097.getTree());

                    // PLSQL_DMLParser.g:1351:29: ( id_expression | evalname_key concatenation )
                    int alt352=2;
                    int LA352_0 = input.LA(1);

                    if ( (LA352_0==REGULAR_ID) ) {
                        int LA352_1 = input.LA(2);

                        if ( (LA352_1==COMMA||LA352_1==RIGHT_PAREN) ) {
                            alt352=1;
                        }
                        else if ( (LA352_1==APPROXIMATE_NUM_LIT||LA352_1==BINDVAR||(LA352_1 >= CHAR_STRING && LA352_1 <= COLON)||LA352_1==DELIMITED_ID||LA352_1==EXACT_NUM_LIT||LA352_1==INTRODUCER||LA352_1==LEFT_PAREN||(LA352_1 >= MINUS_SIGN && LA352_1 <= NATIONAL_CHAR_STRING_LIT)||LA352_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA352_1==PLUS_SIGN||LA352_1==REGULAR_ID||LA352_1==SQL92_RESERVED_ALL||LA352_1==SQL92_RESERVED_ANY||LA352_1==SQL92_RESERVED_CASE||LA352_1==SQL92_RESERVED_DATE||LA352_1==SQL92_RESERVED_DEFAULT||LA352_1==SQL92_RESERVED_DISTINCT||(LA352_1 >= SQL92_RESERVED_EXISTS && LA352_1 <= SQL92_RESERVED_FALSE)||LA352_1==SQL92_RESERVED_NULL||LA352_1==SQL92_RESERVED_PRIOR||LA352_1==SQL92_RESERVED_TRUE||LA352_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {
                            alt352=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 352, 1, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA352_0==DELIMITED_ID) ) {
                        alt352=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 352, 0, input);

                        throw nvae;

                    }
                    switch (alt352) {
                        case 1 :
                            // PLSQL_DMLParser.g:1351:30: id_expression
                            {
                            pushFollow(FOLLOW_id_expression_in_xml_multiuse_expression_element14272);
                            id_expression1098=gPLSQLParser.id_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_id_expression.add(id_expression1098.getTree());

                            if ( state.backtracking==0 ) {mode = 1;}

                            }
                            break;
                        case 2 :
                            // PLSQL_DMLParser.g:1351:56: evalname_key concatenation
                            {
                            pushFollow(FOLLOW_evalname_key_in_xml_multiuse_expression_element14276);
                            evalname_key1099=gPLSQLParser.evalname_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_evalname_key.add(evalname_key1099.getTree());

                            pushFollow(FOLLOW_concatenation_in_xml_multiuse_expression_element14278);
                            concatenation1100=concatenation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenation.add(concatenation1100.getTree());

                            if ( state.backtracking==0 ) {mode = 2;}

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: concatenation, id_expression, expression, evalname_key, expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1352:9: -> {mode == 1}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) )
            if (mode == 1) {
                // PLSQL_DMLParser.g:1352:25: ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] id_expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(XML_ELEMENT, "XML_ELEMENT")
                , root_1);

                // PLSQL_DMLParser.g:1352:39: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:1352:58: ^( XML_ALIAS[$as_key.start] id_expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(XML_ALIAS, (as_key1097!=null?((Token)as_key1097.start):null))
                , root_2);

                adaptor.addChild(root_2, stream_id_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1353:9: -> {mode == 2}? ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) )
            if (mode == 2) {
                // PLSQL_DMLParser.g:1353:25: ^( XML_ELEMENT ^( EXPR expression ) ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(XML_ELEMENT, "XML_ELEMENT")
                , root_1);

                // PLSQL_DMLParser.g:1353:39: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                // PLSQL_DMLParser.g:1353:58: ^( XML_ALIAS[$as_key.start] ^( evalname_key ^( EXPR concatenation ) ) )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(XML_ALIAS, (as_key1097!=null?((Token)as_key1097.start):null))
                , root_2);

                // PLSQL_DMLParser.g:1353:85: ^( evalname_key ^( EXPR concatenation ) )
                {
                Object root_3 = (Object)adaptor.nil();
                root_3 = (Object)adaptor.becomeRoot(stream_evalname_key.nextNode(), root_3);

                // PLSQL_DMLParser.g:1353:100: ^( EXPR concatenation )
                {
                Object root_4 = (Object)adaptor.nil();
                root_4 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_4);

                adaptor.addChild(root_4, stream_concatenation.nextTree());

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            else // 1354:9: -> ^( XML_ELEMENT ^( EXPR expression ) )
            {
                // PLSQL_DMLParser.g:1354:12: ^( XML_ELEMENT ^( EXPR expression ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(XML_ELEMENT, "XML_ELEMENT")
                , root_1);

                // PLSQL_DMLParser.g:1354:26: ^( EXPR expression )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR, "EXPR")
                , root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xml_multiuse_expression_element"


    public static class xmlroot_param_version_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlroot_param_version_part"
    // PLSQL_DMLParser.g:1357:1: xmlroot_param_version_part : version_key ^ ( no_key value_key | expression_wrapper ) ;
    public final xmlroot_param_version_part_return xmlroot_param_version_part() throws RecognitionException {
        xmlroot_param_version_part_return retval = new xmlroot_param_version_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.version_key_return version_key1101 =null;

        PLSQLParser_PLSQLKeys.no_key_return no_key1102 =null;

        PLSQLParser_PLSQLKeys.value_key_return value_key1103 =null;

        expression_wrapper_return expression_wrapper1104 =null;



        try {
            // PLSQL_DMLParser.g:1358:5: ( version_key ^ ( no_key value_key | expression_wrapper ) )
            // PLSQL_DMLParser.g:1358:10: version_key ^ ( no_key value_key | expression_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_version_key_in_xmlroot_param_version_part14389);
            version_key1101=gPLSQLParser.version_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(version_key1101.getTree(), root_0);

            // PLSQL_DMLParser.g:1358:23: ( no_key value_key | expression_wrapper )
            int alt354=2;
            int LA354_0 = input.LA(1);

            if ( (LA354_0==REGULAR_ID) ) {
                int LA354_1 = input.LA(2);

                if ( (LA354_1==REGULAR_ID) ) {
                    int LA354_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equalsIgnoreCase("no"))) ) {
                        alt354=1;
                    }
                    else if ( (true) ) {
                        alt354=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 354, 3, input);

                        throw nvae;

                    }
                }
                else if ( (LA354_1==MINUS_SIGN||LA354_1==PLUS_SIGN) ) {
                    alt354=2;
                }
                else if ( (LA354_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA354_1==SQL92_RESERVED_ALL||LA354_1==SQL92_RESERVED_DISTINCT||LA354_1==SQL92_RESERVED_PRIOR) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt354=2;
                }
                else if ( (LA354_1==DELIMITED_ID) && (((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {
                    alt354=2;
                }
                else if ( (LA354_1==SQL92_RESERVED_CASE) ) {
                    alt354=2;
                }
                else if ( (LA354_1==SQL92_RESERVED_ANY||LA354_1==SQL92_RESERVED_EXISTS) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt354=2;
                }
                else if ( (LA354_1==INTRODUCER) && (((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new")))||(input.LT(1).getText().equalsIgnoreCase("interval"))))) {
                    alt354=2;
                }
                else if ( (LA354_1==BINDVAR||LA354_1==COLON) ) {
                    alt354=2;
                }
                else if ( (LA354_1==APPROXIMATE_NUM_LIT||LA354_1==EXACT_NUM_LIT||LA354_1==SQL92_RESERVED_DATE||LA354_1==UNSIGNED_INTEGER) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt354=2;
                }
                else if ( ((LA354_1 >= CHAR_STRING && LA354_1 <= CHAR_STRING_PERL)||LA354_1==NATIONAL_CHAR_STRING_LIT) ) {
                    alt354=2;
                }
                else if ( (LA354_1==SQL92_RESERVED_DEFAULT||LA354_1==SQL92_RESERVED_FALSE||LA354_1==SQL92_RESERVED_NULL||LA354_1==SQL92_RESERVED_TRUE) && ((((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))&&(input.LT(1).getText().equalsIgnoreCase("new"))))) {
                    alt354=2;
                }
                else if ( (LA354_1==ASTERISK||LA354_1==CARRET_OPERATOR_PART||LA354_1==COMMA||LA354_1==CONCATENATION_OP||LA354_1==EQUALS_OP||LA354_1==EXCLAMATION_OPERATOR_PART||(LA354_1 >= GREATER_THAN_OP && LA354_1 <= GREATER_THAN_OR_EQUALS_OP)||(LA354_1 >= LEFT_BRACKET && LA354_1 <= LESS_THAN_OR_EQUALS_OP)||LA354_1==NOT_EQUAL_OP||LA354_1==PERIOD||LA354_1==RIGHT_PAREN||LA354_1==SOLIDUS||LA354_1==SQL92_RESERVED_AND||LA354_1==SQL92_RESERVED_BETWEEN||LA354_1==SQL92_RESERVED_IN||(LA354_1 >= SQL92_RESERVED_IS && LA354_1 <= SQL92_RESERVED_NOT)||LA354_1==SQL92_RESERVED_OR||LA354_1==VERTICAL_BAR) ) {
                    alt354=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 354, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA354_0==APPROXIMATE_NUM_LIT||LA354_0==BINDVAR||(LA354_0 >= CHAR_STRING && LA354_0 <= COLON)||LA354_0==DELIMITED_ID||LA354_0==EXACT_NUM_LIT||LA354_0==INTRODUCER||LA354_0==LEFT_PAREN||(LA354_0 >= MINUS_SIGN && LA354_0 <= NATIONAL_CHAR_STRING_LIT)||LA354_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA354_0==PLUS_SIGN||LA354_0==SQL92_RESERVED_ALL||LA354_0==SQL92_RESERVED_ANY||LA354_0==SQL92_RESERVED_CASE||(LA354_0 >= SQL92_RESERVED_CURSOR && LA354_0 <= SQL92_RESERVED_DATE)||LA354_0==SQL92_RESERVED_DEFAULT||LA354_0==SQL92_RESERVED_DISTINCT||(LA354_0 >= SQL92_RESERVED_EXISTS && LA354_0 <= SQL92_RESERVED_FALSE)||(LA354_0 >= SQL92_RESERVED_NOT && LA354_0 <= SQL92_RESERVED_NULL)||LA354_0==SQL92_RESERVED_PRIOR||LA354_0==SQL92_RESERVED_TRUE||LA354_0==UNSIGNED_INTEGER) ) {
                alt354=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);

                throw nvae;

            }
            switch (alt354) {
                case 1 :
                    // PLSQL_DMLParser.g:1358:24: no_key value_key
                    {
                    pushFollow(FOLLOW_no_key_in_xmlroot_param_version_part14393);
                    no_key1102=gPLSQLParser.no_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_key1102.getTree());

                    pushFollow(FOLLOW_value_key_in_xmlroot_param_version_part14395);
                    value_key1103=gPLSQLParser.value_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, value_key1103.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1358:41: expression_wrapper
                    {
                    pushFollow(FOLLOW_expression_wrapper_in_xmlroot_param_version_part14397);
                    expression_wrapper1104=expression_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_wrapper1104.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlroot_param_version_part"


    public static class xmlroot_param_standalone_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlroot_param_standalone_part"
    // PLSQL_DMLParser.g:1361:1: xmlroot_param_standalone_part : standalone_key ^ ( yes_key | no_key ( value_key )? ) ;
    public final xmlroot_param_standalone_part_return xmlroot_param_standalone_part() throws RecognitionException {
        xmlroot_param_standalone_part_return retval = new xmlroot_param_standalone_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.standalone_key_return standalone_key1105 =null;

        PLSQLParser_PLSQLKeys.yes_key_return yes_key1106 =null;

        PLSQLParser_PLSQLKeys.no_key_return no_key1107 =null;

        PLSQLParser_PLSQLKeys.value_key_return value_key1108 =null;



        try {
            // PLSQL_DMLParser.g:1362:5: ( standalone_key ^ ( yes_key | no_key ( value_key )? ) )
            // PLSQL_DMLParser.g:1362:10: standalone_key ^ ( yes_key | no_key ( value_key )? )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_standalone_key_in_xmlroot_param_standalone_part14418);
            standalone_key1105=gPLSQLParser.standalone_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(standalone_key1105.getTree(), root_0);

            // PLSQL_DMLParser.g:1362:26: ( yes_key | no_key ( value_key )? )
            int alt356=2;
            int LA356_0 = input.LA(1);

            if ( (LA356_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("yes"))))) {
                int LA356_1 = input.LA(2);

                if ( ((input.LT(1).getText().equalsIgnoreCase("yes"))) ) {
                    alt356=1;
                }
                else if ( ((input.LT(1).getText().equalsIgnoreCase("no"))) ) {
                    alt356=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 356, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 356, 0, input);

                throw nvae;

            }
            switch (alt356) {
                case 1 :
                    // PLSQL_DMLParser.g:1362:27: yes_key
                    {
                    pushFollow(FOLLOW_yes_key_in_xmlroot_param_standalone_part14422);
                    yes_key1106=gPLSQLParser.yes_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yes_key1106.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1362:35: no_key ( value_key )?
                    {
                    pushFollow(FOLLOW_no_key_in_xmlroot_param_standalone_part14424);
                    no_key1107=gPLSQLParser.no_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_key1107.getTree());

                    // PLSQL_DMLParser.g:1362:42: ( value_key )?
                    int alt355=2;
                    int LA355_0 = input.LA(1);

                    if ( (LA355_0==REGULAR_ID) ) {
                        alt355=1;
                    }
                    switch (alt355) {
                        case 1 :
                            // PLSQL_DMLParser.g:1362:42: value_key
                            {
                            pushFollow(FOLLOW_value_key_in_xmlroot_param_standalone_part14426);
                            value_key1108=gPLSQLParser.value_key();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, value_key1108.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlroot_param_standalone_part"


    public static class xmlserialize_param_enconding_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlserialize_param_enconding_part"
    // PLSQL_DMLParser.g:1365:1: xmlserialize_param_enconding_part : encoding_key ^ concatenation_wrapper ;
    public final xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part() throws RecognitionException {
        xmlserialize_param_enconding_part_return retval = new xmlserialize_param_enconding_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.encoding_key_return encoding_key1109 =null;

        concatenation_wrapper_return concatenation_wrapper1110 =null;



        try {
            // PLSQL_DMLParser.g:1366:5: ( encoding_key ^ concatenation_wrapper )
            // PLSQL_DMLParser.g:1366:10: encoding_key ^ concatenation_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_encoding_key_in_xmlserialize_param_enconding_part14448);
            encoding_key1109=gPLSQLParser.encoding_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(encoding_key1109.getTree(), root_0);

            pushFollow(FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part14451);
            concatenation_wrapper1110=concatenation_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1110.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlserialize_param_enconding_part"


    public static class xmlserialize_param_version_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlserialize_param_version_part"
    // PLSQL_DMLParser.g:1369:1: xmlserialize_param_version_part : version_key ^ concatenation_wrapper ;
    public final xmlserialize_param_version_part_return xmlserialize_param_version_part() throws RecognitionException {
        xmlserialize_param_version_part_return retval = new xmlserialize_param_version_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        PLSQLParser_PLSQLKeys.version_key_return version_key1111 =null;

        concatenation_wrapper_return concatenation_wrapper1112 =null;



        try {
            // PLSQL_DMLParser.g:1370:5: ( version_key ^ concatenation_wrapper )
            // PLSQL_DMLParser.g:1370:10: version_key ^ concatenation_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_version_key_in_xmlserialize_param_version_part14471);
            version_key1111=gPLSQLParser.version_key();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(version_key1111.getTree(), root_0);

            pushFollow(FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part14474);
            concatenation_wrapper1112=concatenation_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1112.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlserialize_param_version_part"


    public static class xmlserialize_param_ident_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "xmlserialize_param_ident_part"
    // PLSQL_DMLParser.g:1373:1: xmlserialize_param_ident_part : ( no_key indent_key | indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )? );
    public final xmlserialize_param_ident_part_return xmlserialize_param_ident_part() throws RecognitionException {
        xmlserialize_param_ident_part_return retval = new xmlserialize_param_ident_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token EQUALS_OP1117=null;
        PLSQLParser_PLSQLKeys.no_key_return no_key1113 =null;

        PLSQLParser_PLSQLKeys.indent_key_return indent_key1114 =null;

        PLSQLParser_PLSQLKeys.indent_key_return indent_key1115 =null;

        PLSQLParser_PLSQLKeys.size_key_return size_key1116 =null;

        concatenation_wrapper_return concatenation_wrapper1118 =null;


        Object EQUALS_OP1117_tree=null;

        try {
            // PLSQL_DMLParser.g:1374:5: ( no_key indent_key | indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )? )
            int alt358=2;
            int LA358_0 = input.LA(1);

            if ( (LA358_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))))) {
                int LA358_1 = input.LA(2);

                if ( (LA358_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))))) {
                    int LA358_2 = input.LA(3);

                    if ( (LA358_2==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("no"))||(input.LT(1).getText().equalsIgnoreCase("indent"))))) {
                        int LA358_4 = input.LA(4);

                        if ( (LA358_4==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("no")))) {
                            alt358=1;
                        }
                        else if ( (LA358_4==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                            alt358=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 358, 4, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA358_2==RIGHT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("no")))) {
                        alt358=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 358, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA358_1==RIGHT_PAREN||LA358_1==SQL92_RESERVED_SIZE) && ((input.LT(1).getText().equalsIgnoreCase("indent")))) {
                    alt358=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 358, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 358, 0, input);

                throw nvae;

            }
            switch (alt358) {
                case 1 :
                    // PLSQL_DMLParser.g:1374:10: no_key indent_key
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_no_key_in_xmlserialize_param_ident_part14494);
                    no_key1113=gPLSQLParser.no_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, no_key1113.getTree());

                    pushFollow(FOLLOW_indent_key_in_xmlserialize_param_ident_part14496);
                    indent_key1114=gPLSQLParser.indent_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, indent_key1114.getTree());

                    }
                    break;
                case 2 :
                    // PLSQL_DMLParser.g:1375:10: indent_key ^ ( size_key ! EQUALS_OP ! concatenation_wrapper )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_indent_key_in_xmlserialize_param_ident_part14507);
                    indent_key1115=gPLSQLParser.indent_key();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(indent_key1115.getTree(), root_0);

                    // PLSQL_DMLParser.g:1375:22: ( size_key ! EQUALS_OP ! concatenation_wrapper )?
                    int alt357=2;
                    int LA357_0 = input.LA(1);

                    if ( (LA357_0==SQL92_RESERVED_SIZE) ) {
                        alt357=1;
                    }
                    switch (alt357) {
                        case 1 :
                            // PLSQL_DMLParser.g:1375:23: size_key ! EQUALS_OP ! concatenation_wrapper
                            {
                            pushFollow(FOLLOW_size_key_in_xmlserialize_param_ident_part14511);
                            size_key1116=gPLSQLParser.size_key();

                            state._fsp--;
                            if (state.failed) return retval;

                            EQUALS_OP1117=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part14514); if (state.failed) return retval;

                            pushFollow(FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part14517);
                            concatenation_wrapper1118=concatenation_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenation_wrapper1118.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "xmlserialize_param_ident_part"

    // $ANTLR start synpred1_PLSQL_DMLParser
    public final void synpred1_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:216:28: ( order_key ( siblings_key )? by_key )
        // PLSQL_DMLParser.g:216:29: order_key ( siblings_key )? by_key
        {
        pushFollow(FOLLOW_order_key_in_synpred1_PLSQL_DMLParser898);
        gPLSQLParser.order_key();

        state._fsp--;
        if (state.failed) return ;

        // PLSQL_DMLParser.g:216:39: ( siblings_key )?
        int alt359=2;
        int LA359_0 = input.LA(1);

        if ( (LA359_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("siblings")))) {
            alt359=1;
        }
        switch (alt359) {
            case 1 :
                // PLSQL_DMLParser.g:216:39: siblings_key
                {
                pushFollow(FOLLOW_siblings_key_in_synpred1_PLSQL_DMLParser900);
                gPLSQLParser.siblings_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_by_key_in_synpred1_PLSQL_DMLParser903);
        gPLSQLParser.by_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_PLSQL_DMLParser

    // $ANTLR start synpred2_PLSQL_DMLParser
    public final void synpred2_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:260:10: ( distinct_key | unique_key | all_key )
        int alt360=3;
        switch ( input.LA(1) ) {
        case SQL92_RESERVED_DISTINCT:
            {
            alt360=1;
            }
            break;
        case SQL92_RESERVED_UNIQUE:
            {
            alt360=2;
            }
            break;
        case SQL92_RESERVED_ALL:
            {
            alt360=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 360, 0, input);

            throw nvae;

        }

        switch (alt360) {
            case 1 :
                // PLSQL_DMLParser.g:260:11: distinct_key
                {
                pushFollow(FOLLOW_distinct_key_in_synpred2_PLSQL_DMLParser1389);
                gPLSQLParser.distinct_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQL_DMLParser.g:260:24: unique_key
                {
                pushFollow(FOLLOW_unique_key_in_synpred2_PLSQL_DMLParser1391);
                gPLSQLParser.unique_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // PLSQL_DMLParser.g:260:35: all_key
                {
                pushFollow(FOLLOW_all_key_in_synpred2_PLSQL_DMLParser1393);
                gPLSQLParser.all_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred2_PLSQL_DMLParser

    // $ANTLR start synpred3_PLSQL_DMLParser
    public final void synpred3_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:284:10: ( tableview_name PERIOD ASTERISK )
        // PLSQL_DMLParser.g:284:11: tableview_name PERIOD ASTERISK
        {
        pushFollow(FOLLOW_tableview_name_in_synpred3_PLSQL_DMLParser1706);
        gPLSQLParser.tableview_name();

        state._fsp--;
        if (state.failed) return ;

        match(input,PERIOD,FOLLOW_PERIOD_in_synpred3_PLSQL_DMLParser1708); if (state.failed) return ;

        match(input,ASTERISK,FOLLOW_ASTERISK_in_synpred3_PLSQL_DMLParser1710); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_PLSQL_DMLParser

    // $ANTLR start synpred4_PLSQL_DMLParser
    public final void synpred4_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:303:10: ( LEFT_PAREN ( select_key | with_key ) )
        // PLSQL_DMLParser.g:303:11: LEFT_PAREN ( select_key | with_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred4_PLSQL_DMLParser1866); if (state.failed) return ;

        // PLSQL_DMLParser.g:303:22: ( select_key | with_key )
        int alt361=2;
        int LA361_0 = input.LA(1);

        if ( (LA361_0==SQL92_RESERVED_SELECT) ) {
            alt361=1;
        }
        else if ( (LA361_0==SQL92_RESERVED_WITH) ) {
            alt361=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 361, 0, input);

            throw nvae;

        }
        switch (alt361) {
            case 1 :
                // PLSQL_DMLParser.g:303:23: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred4_PLSQL_DMLParser1869);
                gPLSQLParser.select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQL_DMLParser.g:303:34: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred4_PLSQL_DMLParser1871);
                gPLSQLParser.with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred4_PLSQL_DMLParser

    // $ANTLR start synpred5_PLSQL_DMLParser
    public final void synpred5_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:304:10: ( LEFT_PAREN )
        // PLSQL_DMLParser.g:304:11: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred5_PLSQL_DMLParser1896); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_PLSQL_DMLParser

    // $ANTLR start synpred6_PLSQL_DMLParser
    public final void synpred6_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:305:10: ( only_key LEFT_PAREN )
        // PLSQL_DMLParser.g:305:11: only_key LEFT_PAREN
        {
        pushFollow(FOLLOW_only_key_in_synpred6_PLSQL_DMLParser1927);
        gPLSQLParser.only_key();

        state._fsp--;
        if (state.failed) return ;

        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred6_PLSQL_DMLParser1929); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_PLSQL_DMLParser

    // $ANTLR start synpred7_PLSQL_DMLParser
    public final void synpred7_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:344:10: ( LEFT_PAREN ( select_key | with_key ) )
        // PLSQL_DMLParser.g:344:11: LEFT_PAREN ( select_key | with_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred7_PLSQL_DMLParser2345); if (state.failed) return ;

        // PLSQL_DMLParser.g:344:22: ( select_key | with_key )
        int alt362=2;
        int LA362_0 = input.LA(1);

        if ( (LA362_0==SQL92_RESERVED_SELECT) ) {
            alt362=1;
        }
        else if ( (LA362_0==SQL92_RESERVED_WITH) ) {
            alt362=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 362, 0, input);

            throw nvae;

        }
        switch (alt362) {
            case 1 :
                // PLSQL_DMLParser.g:344:23: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred7_PLSQL_DMLParser2348);
                gPLSQLParser.select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQL_DMLParser.g:344:34: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred7_PLSQL_DMLParser2350);
                gPLSQLParser.with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred7_PLSQL_DMLParser

    // $ANTLR start synpred8_PLSQL_DMLParser
    public final void synpred8_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:345:10: ( LEFT_PAREN )
        // PLSQL_DMLParser.g:345:11: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred8_PLSQL_DMLParser2372); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_PLSQL_DMLParser

    // $ANTLR start synpred9_PLSQL_DMLParser
    public final void synpred9_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:383:18: ( select_key )
        // PLSQL_DMLParser.g:383:19: select_key
        {
        pushFollow(FOLLOW_select_key_in_synpred9_PLSQL_DMLParser2840);
        gPLSQLParser.select_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_PLSQL_DMLParser

    // $ANTLR start synpred10_PLSQL_DMLParser
    public final void synpred10_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:384:18: ( any_key )
        // PLSQL_DMLParser.g:384:19: any_key
        {
        pushFollow(FOLLOW_any_key_in_synpred10_PLSQL_DMLParser2866);
        gPLSQLParser.any_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_PLSQL_DMLParser

    // $ANTLR start synpred11_PLSQL_DMLParser
    public final void synpred11_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:400:10: ( LEFT_PAREN )
        // PLSQL_DMLParser.g:400:11: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred11_PLSQL_DMLParser3071); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_PLSQL_DMLParser

    // $ANTLR start synpred12_PLSQL_DMLParser
    public final void synpred12_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:430:14: ( LEFT_PAREN )
        // PLSQL_DMLParser.g:430:15: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred12_PLSQL_DMLParser3445); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_PLSQL_DMLParser

    // $ANTLR start synpred13_PLSQL_DMLParser
    public final void synpred13_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:449:10: ( group_key )
        // PLSQL_DMLParser.g:449:11: group_key
        {
        pushFollow(FOLLOW_group_key_in_synpred13_PLSQL_DMLParser3675);
        gPLSQLParser.group_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_PLSQL_DMLParser

    // $ANTLR start synpred14_PLSQL_DMLParser
    public final void synpred14_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:449:61: ( COMMA group_by_elements )
        // PLSQL_DMLParser.g:449:62: COMMA group_by_elements
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred14_PLSQL_DMLParser3688); if (state.failed) return ;

        pushFollow(FOLLOW_group_by_elements_in_synpred14_PLSQL_DMLParser3690);
        group_by_elements();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_PLSQL_DMLParser

    // $ANTLR start synpred15_PLSQL_DMLParser
    public final void synpred15_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:451:10: ( having_key )
        // PLSQL_DMLParser.g:451:11: having_key
        {
        pushFollow(FOLLOW_having_key_in_synpred15_PLSQL_DMLParser3738);
        gPLSQLParser.having_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_PLSQL_DMLParser

    // $ANTLR start synpred16_PLSQL_DMLParser
    public final void synpred16_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:451:77: ( COMMA group_by_elements )
        // PLSQL_DMLParser.g:451:78: COMMA group_by_elements
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred16_PLSQL_DMLParser3754); if (state.failed) return ;

        pushFollow(FOLLOW_group_by_elements_in_synpred16_PLSQL_DMLParser3756);
        group_by_elements();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_PLSQL_DMLParser

    // $ANTLR start synpred17_PLSQL_DMLParser
    public final void synpred17_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:472:10: ( rollup_key | cube_key )
        int alt363=2;
        int LA363_0 = input.LA(1);

        if ( (LA363_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("cube"))||(input.LT(1).getText().equalsIgnoreCase("rollup"))))) {
            int LA363_1 = input.LA(2);

            if ( ((input.LT(1).getText().equalsIgnoreCase("rollup"))) ) {
                alt363=1;
            }
            else if ( ((input.LT(1).getText().equalsIgnoreCase("cube"))) ) {
                alt363=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 363, 1, input);

                throw nvae;

            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 363, 0, input);

            throw nvae;

        }
        switch (alt363) {
            case 1 :
                // PLSQL_DMLParser.g:472:11: rollup_key
                {
                pushFollow(FOLLOW_rollup_key_in_synpred17_PLSQL_DMLParser3970);
                gPLSQLParser.rollup_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQL_DMLParser.g:472:22: cube_key
                {
                pushFollow(FOLLOW_cube_key_in_synpred17_PLSQL_DMLParser3972);
                gPLSQLParser.cube_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred17_PLSQL_DMLParser

    // $ANTLR start synpred18_PLSQL_DMLParser
    public final void synpred18_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:473:10: ( LEFT_PAREN )
        // PLSQL_DMLParser.g:473:11: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred18_PLSQL_DMLParser3988); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_PLSQL_DMLParser

    // $ANTLR start synpred19_PLSQL_DMLParser
    public final void synpred19_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:538:34: ( all_key )
        // PLSQL_DMLParser.g:538:35: all_key
        {
        pushFollow(FOLLOW_all_key_in_synpred19_PLSQL_DMLParser4656);
        gPLSQLParser.all_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_PLSQL_DMLParser

    // $ANTLR start synpred20_PLSQL_DMLParser
    public final void synpred20_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:678:13: ( when_key matched_key )
        // PLSQL_DMLParser.g:678:14: when_key matched_key
        {
        pushFollow(FOLLOW_when_key_in_synpred20_PLSQL_DMLParser6014);
        gPLSQLParser.when_key();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_matched_key_in_synpred20_PLSQL_DMLParser6016);
        gPLSQLParser.matched_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_PLSQL_DMLParser

    // $ANTLR start synpred21_PLSQL_DMLParser
    public final void synpred21_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:680:13: ( when_key not_key matched_key )
        // PLSQL_DMLParser.g:680:14: when_key not_key matched_key
        {
        pushFollow(FOLLOW_when_key_in_synpred21_PLSQL_DMLParser6049);
        gPLSQLParser.when_key();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_not_key_in_synpred21_PLSQL_DMLParser6051);
        gPLSQLParser.not_key();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_matched_key_in_synpred21_PLSQL_DMLParser6053);
        gPLSQLParser.matched_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_PLSQL_DMLParser

    // $ANTLR start synpred22_PLSQL_DMLParser
    public final void synpred22_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:765:10: ( LEFT_PAREN )
        // PLSQL_DMLParser.g:765:11: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred22_PLSQL_DMLParser6892); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_PLSQL_DMLParser

    // $ANTLR start synpred23_PLSQL_DMLParser
    public final void synpred23_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:775:34: ( unlimited_key )
        // PLSQL_DMLParser.g:775:35: unlimited_key
        {
        pushFollow(FOLLOW_unlimited_key_in_synpred23_PLSQL_DMLParser6983);
        gPLSQLParser.unlimited_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_PLSQL_DMLParser

    // $ANTLR start synpred24_PLSQL_DMLParser
    public final void synpred24_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:786:12: ( LEFT_PAREN ( select_key | with_key ) )
        // PLSQL_DMLParser.g:786:13: LEFT_PAREN ( select_key | with_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred24_PLSQL_DMLParser7124); if (state.failed) return ;

        // PLSQL_DMLParser.g:786:24: ( select_key | with_key )
        int alt364=2;
        int LA364_0 = input.LA(1);

        if ( (LA364_0==SQL92_RESERVED_SELECT) ) {
            alt364=1;
        }
        else if ( (LA364_0==SQL92_RESERVED_WITH) ) {
            alt364=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 364, 0, input);

            throw nvae;

        }
        switch (alt364) {
            case 1 :
                // PLSQL_DMLParser.g:786:25: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred24_PLSQL_DMLParser7127);
                gPLSQLParser.select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQL_DMLParser.g:786:38: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred24_PLSQL_DMLParser7131);
                gPLSQLParser.with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred24_PLSQL_DMLParser

    // $ANTLR start synpred25_PLSQL_DMLParser
    public final void synpred25_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:834:10: ( cursor_key LEFT_PAREN ( select_key | with_key ) )
        // PLSQL_DMLParser.g:834:11: cursor_key LEFT_PAREN ( select_key | with_key )
        {
        pushFollow(FOLLOW_cursor_key_in_synpred25_PLSQL_DMLParser7574);
        gPLSQLParser.cursor_key();

        state._fsp--;
        if (state.failed) return ;

        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred25_PLSQL_DMLParser7576); if (state.failed) return ;

        // PLSQL_DMLParser.g:834:33: ( select_key | with_key )
        int alt365=2;
        int LA365_0 = input.LA(1);

        if ( (LA365_0==SQL92_RESERVED_SELECT) ) {
            alt365=1;
        }
        else if ( (LA365_0==SQL92_RESERVED_WITH) ) {
            alt365=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 365, 0, input);

            throw nvae;

        }
        switch (alt365) {
            case 1 :
                // PLSQL_DMLParser.g:834:34: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred25_PLSQL_DMLParser7579);
                gPLSQLParser.select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQL_DMLParser.g:834:45: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred25_PLSQL_DMLParser7581);
                gPLSQLParser.with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred25_PLSQL_DMLParser

    // $ANTLR start synpred26_PLSQL_DMLParser
    public final void synpred26_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:929:10: ( ( LEFT_PAREN )+ ( select_key | with_key ) )
        // PLSQL_DMLParser.g:929:11: ( LEFT_PAREN )+ ( select_key | with_key )
        {
        // PLSQL_DMLParser.g:929:11: ( LEFT_PAREN )+
        int cnt366=0;
        loop366:
        do {
            int alt366=2;
            int LA366_0 = input.LA(1);

            if ( (LA366_0==LEFT_PAREN) ) {
                alt366=1;
            }


            switch (alt366) {
        	case 1 :
        	    // PLSQL_DMLParser.g:929:11: LEFT_PAREN
        	    {
        	    match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred26_PLSQL_DMLParser8859); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt366 >= 1 ) break loop366;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(366, input);
                    throw eee;
            }
            cnt366++;
        } while (true);


        // PLSQL_DMLParser.g:929:23: ( select_key | with_key )
        int alt367=2;
        int LA367_0 = input.LA(1);

        if ( (LA367_0==SQL92_RESERVED_SELECT) ) {
            alt367=1;
        }
        else if ( (LA367_0==SQL92_RESERVED_WITH) ) {
            alt367=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 367, 0, input);

            throw nvae;

        }
        switch (alt367) {
            case 1 :
                // PLSQL_DMLParser.g:929:24: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred26_PLSQL_DMLParser8863);
                gPLSQLParser.select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQL_DMLParser.g:929:35: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred26_PLSQL_DMLParser8865);
                gPLSQLParser.with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred26_PLSQL_DMLParser

    // $ANTLR start synpred27_PLSQL_DMLParser
    public final void synpred27_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:967:10: ( interval_expression )
        // PLSQL_DMLParser.g:967:11: interval_expression
        {
        pushFollow(FOLLOW_interval_expression_in_synpred27_PLSQL_DMLParser9298);
        interval_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_PLSQL_DMLParser

    // $ANTLR start synpred28_PLSQL_DMLParser
    public final void synpred28_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:986:11: ( any_key )
        // PLSQL_DMLParser.g:986:12: any_key
        {
        pushFollow(FOLLOW_any_key_in_synpred28_PLSQL_DMLParser9536);
        gPLSQLParser.any_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_PLSQL_DMLParser

    // $ANTLR start synpred29_PLSQL_DMLParser
    public final void synpred29_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:986:59: ( any_key )
        // PLSQL_DMLParser.g:986:60: any_key
        {
        pushFollow(FOLLOW_any_key_in_synpred29_PLSQL_DMLParser9551);
        gPLSQLParser.any_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_PLSQL_DMLParser

    // $ANTLR start synpred30_PLSQL_DMLParser
    public final void synpred30_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1015:18: ( select_key )
        // PLSQL_DMLParser.g:1015:19: select_key
        {
        pushFollow(FOLLOW_select_key_in_synpred30_PLSQL_DMLParser9905);
        gPLSQLParser.select_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_PLSQL_DMLParser

    // $ANTLR start synpred31_PLSQL_DMLParser
    public final void synpred31_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1016:18: ( LEFT_PAREN )
        // PLSQL_DMLParser.g:1016:19: LEFT_PAREN
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred31_PLSQL_DMLParser9929); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_PLSQL_DMLParser

    // $ANTLR start synpred36_PLSQL_DMLParser
    public final void synpred36_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1031:10: ({...}? => new_key unary_expression )
        // PLSQL_DMLParser.g:1031:10: {...}? => new_key unary_expression
        {
        if ( !((input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred36_PLSQL_DMLParser", "input.LT(1).getText().equalsIgnoreCase(\"new\") && !input.LT(2).getText().equals(\".\")");
        }

        pushFollow(FOLLOW_new_key_in_synpred36_PLSQL_DMLParser10100);
        gPLSQLParser.new_key();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_unary_expression_in_synpred36_PLSQL_DMLParser10103);
        unary_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred36_PLSQL_DMLParser

    // $ANTLR start synpred38_PLSQL_DMLParser
    public final void synpred38_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1033:10: ( all_key unary_expression )
        // PLSQL_DMLParser.g:1033:10: all_key unary_expression
        {
        pushFollow(FOLLOW_all_key_in_synpred38_PLSQL_DMLParser10128);
        gPLSQLParser.all_key();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_unary_expression_in_synpred38_PLSQL_DMLParser10131);
        unary_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred38_PLSQL_DMLParser

    // $ANTLR start synpred39_PLSQL_DMLParser
    public final void synpred39_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1034:10: ({...}? case_statement[false] )
        // PLSQL_DMLParser.g:1034:10: {...}? case_statement[false]
        {
        if ( !(((input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred39_PLSQL_DMLParser", "(input.LA(1) == SQL92_RESERVED_CASE || input.LA(2) == SQL92_RESERVED_CASE)");
        }

        pushFollow(FOLLOW_case_statement_in_synpred39_PLSQL_DMLParser10144);
        case_statement(false);

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred39_PLSQL_DMLParser

    // $ANTLR start synpred40_PLSQL_DMLParser
    public final void synpred40_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1035:10: ( quantified_expression )
        // PLSQL_DMLParser.g:1035:10: quantified_expression
        {
        pushFollow(FOLLOW_quantified_expression_in_synpred40_PLSQL_DMLParser10156);
        quantified_expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred40_PLSQL_DMLParser

    // $ANTLR start synpred41_PLSQL_DMLParser
    public final void synpred41_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1036:10: ( standard_function )
        // PLSQL_DMLParser.g:1036:10: standard_function
        {
        pushFollow(FOLLOW_standard_function_in_synpred41_PLSQL_DMLParser10167);
        standard_function();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred41_PLSQL_DMLParser

    // $ANTLR start synpred42_PLSQL_DMLParser
    public final void synpred42_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1045:10: ( ( label_name )? case_key when_key )
        // PLSQL_DMLParser.g:1045:11: ( label_name )? case_key when_key
        {
        // PLSQL_DMLParser.g:1045:11: ( label_name )?
        int alt368=2;
        int LA368_0 = input.LA(1);

        if ( (LA368_0==DELIMITED_ID||LA368_0==REGULAR_ID) ) {
            alt368=1;
        }
        switch (alt368) {
            case 1 :
                // PLSQL_DMLParser.g:1045:11: label_name
                {
                pushFollow(FOLLOW_label_name_in_synpred42_PLSQL_DMLParser10224);
                gPLSQLParser.label_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_case_key_in_synpred42_PLSQL_DMLParser10227);
        gPLSQLParser.case_key();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_when_key_in_synpred42_PLSQL_DMLParser10229);
        gPLSQLParser.when_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred42_PLSQL_DMLParser

    // $ANTLR start synpred43_PLSQL_DMLParser
    public final void synpred43_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1085:10: ( table_element outer_join_sign )
        // PLSQL_DMLParser.g:1085:11: table_element outer_join_sign
        {
        pushFollow(FOLLOW_table_element_in_synpred43_PLSQL_DMLParser10570);
        gPLSQLParser.table_element();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_outer_join_sign_in_synpred43_PLSQL_DMLParser10572);
        gPLSQLParser.outer_join_sign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred43_PLSQL_DMLParser

    // $ANTLR start synpred45_PLSQL_DMLParser
    public final void synpred45_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1087:10: ( constant )
        // PLSQL_DMLParser.g:1087:10: constant
        {
        pushFollow(FOLLOW_constant_in_synpred45_PLSQL_DMLParser10601);
        gPLSQLParser.constant();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred45_PLSQL_DMLParser

    // $ANTLR start synpred46_PLSQL_DMLParser
    public final void synpred46_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1088:10: ( general_element )
        // PLSQL_DMLParser.g:1088:10: general_element
        {
        pushFollow(FOLLOW_general_element_in_synpred46_PLSQL_DMLParser10612);
        gPLSQLParser.general_element();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred46_PLSQL_DMLParser

    // $ANTLR start synpred47_PLSQL_DMLParser
    public final void synpred47_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1091:15: ( select_key | with_key )
        int alt369=2;
        int LA369_0 = input.LA(1);

        if ( (LA369_0==SQL92_RESERVED_SELECT) ) {
            alt369=1;
        }
        else if ( (LA369_0==SQL92_RESERVED_WITH) ) {
            alt369=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 369, 0, input);

            throw nvae;

        }
        switch (alt369) {
            case 1 :
                // PLSQL_DMLParser.g:1091:17: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred47_PLSQL_DMLParser10653);
                gPLSQLParser.select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQL_DMLParser.g:1091:30: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred47_PLSQL_DMLParser10657);
                gPLSQLParser.with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
    }
    // $ANTLR end synpred47_PLSQL_DMLParser

    // $ANTLR start synpred48_PLSQL_DMLParser
    public final void synpred48_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1110:12: ( LEFT_PAREN ( select_key | with_key ) )
        // PLSQL_DMLParser.g:1110:13: LEFT_PAREN ( select_key | with_key )
        {
        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred48_PLSQL_DMLParser10870); if (state.failed) return ;

        // PLSQL_DMLParser.g:1110:24: ( select_key | with_key )
        int alt370=2;
        int LA370_0 = input.LA(1);

        if ( (LA370_0==SQL92_RESERVED_SELECT) ) {
            alt370=1;
        }
        else if ( (LA370_0==SQL92_RESERVED_WITH) ) {
            alt370=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 370, 0, input);

            throw nvae;

        }
        switch (alt370) {
            case 1 :
                // PLSQL_DMLParser.g:1110:25: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred48_PLSQL_DMLParser10873);
                gPLSQLParser.select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQL_DMLParser.g:1110:36: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred48_PLSQL_DMLParser10875);
                gPLSQLParser.with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred48_PLSQL_DMLParser

    // $ANTLR start synpred49_PLSQL_DMLParser
    public final void synpred49_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1124:19: ( multiset_key LEFT_PAREN ( select_key | with_key ) )
        // PLSQL_DMLParser.g:1124:20: multiset_key LEFT_PAREN ( select_key | with_key )
        {
        pushFollow(FOLLOW_multiset_key_in_synpred49_PLSQL_DMLParser11096);
        gPLSQLParser.multiset_key();

        state._fsp--;
        if (state.failed) return ;

        match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_synpred49_PLSQL_DMLParser11098); if (state.failed) return ;

        // PLSQL_DMLParser.g:1124:44: ( select_key | with_key )
        int alt371=2;
        int LA371_0 = input.LA(1);

        if ( (LA371_0==SQL92_RESERVED_SELECT) ) {
            alt371=1;
        }
        else if ( (LA371_0==SQL92_RESERVED_WITH) ) {
            alt371=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 371, 0, input);

            throw nvae;

        }
        switch (alt371) {
            case 1 :
                // PLSQL_DMLParser.g:1124:45: select_key
                {
                pushFollow(FOLLOW_select_key_in_synpred49_PLSQL_DMLParser11101);
                gPLSQLParser.select_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // PLSQL_DMLParser.g:1124:56: with_key
                {
                pushFollow(FOLLOW_with_key_in_synpred49_PLSQL_DMLParser11103);
                gPLSQLParser.with_key();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred49_PLSQL_DMLParser

    // $ANTLR start synpred50_PLSQL_DMLParser
    public final void synpred50_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1333:14: ( default_key )
        // PLSQL_DMLParser.g:1333:15: default_key
        {
        pushFollow(FOLLOW_default_key_in_synpred50_PLSQL_DMLParser14103);
        gPLSQLParser.default_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred50_PLSQL_DMLParser

    // $ANTLR start synpred51_PLSQL_DMLParser
    public final void synpred51_PLSQL_DMLParser_fragment() throws RecognitionException {
        // PLSQL_DMLParser.g:1340:55: ( default_key )
        // PLSQL_DMLParser.g:1340:56: default_key
        {
        pushFollow(FOLLOW_default_key_in_synpred51_PLSQL_DMLParser14175);
        gPLSQLParser.default_key();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred51_PLSQL_DMLParser

    // Delegated rules

    public final boolean synpred11_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_PLSQL_DMLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_PLSQL_DMLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA18 dfa18 = new DFA18(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA185 dfa185 = new DFA185(this);
    protected DFA193 dfa193 = new DFA193(this);
    protected DFA226 dfa226 = new DFA226(this);
    protected DFA258 dfa258 = new DFA258(this);
    protected DFA264 dfa264 = new DFA264(this);
    protected DFA303 dfa303 = new DFA303(this);
    static final String DFA18_eotS =
        "\60\uffff";
    static final String DFA18_eofS =
        "\60\uffff";
    static final String DFA18_minS =
        "\1\17\1\22\1\uffff\1\17\1\uffff\3\22\2\17\1\22\2\17\2\22\1\uffff"+
        "\7\22\2\17\1\22\2\17\1\22\2\17\12\22\2\17\5\22";
    static final String DFA18_maxS =
        "\2\112\1\uffff\1\u0086\1\uffff\3\112\2\145\1\112\2\u0086\2\112\1"+
        "\uffff\7\112\2\u0086\1\112\2\u008b\1\112\2\126\12\112\2\u008b\5"+
        "\112";
    static final String DFA18_acceptS =
        "\2\uffff\1\2\1\uffff\1\2\12\uffff\1\1\40\uffff";
    static final String DFA18_specialS =
        "\1\30\1\23\1\uffff\1\31\1\uffff\1\24\1\15\1\10\1\27\1\12\1\7\1\54"+
        "\1\46\1\40\1\51\1\uffff\1\41\1\52\1\2\1\53\1\13\1\44\1\45\1\26\1"+
        "\25\1\6\1\14\1\16\1\5\1\3\1\11\1\22\1\35\1\21\1\34\1\37\1\50\1\1"+
        "\1\36\1\47\1\43\1\4\1\0\1\42\1\20\1\33\1\17\1\32}>";
    static final String[] DFA18_transitionS = {
            "\1\2\72\uffff\1\1",
            "\1\4\11\uffff\1\4\55\uffff\1\3",
            "",
            "\1\5\16\uffff\1\4\7\uffff\1\4\43\uffff\1\6\73\uffff\1\4",
            "",
            "\1\11\11\uffff\1\7\55\uffff\1\10",
            "\1\14\11\uffff\1\12\55\uffff\1\13",
            "\1\16\67\uffff\1\15",
            "\1\17\16\uffff\1\4\7\uffff\1\17\43\uffff\1\17\13\uffff\1\4"+
            "\1\17\15\uffff\1\17",
            "\1\17\16\uffff\1\4\7\uffff\1\17\43\uffff\1\17\13\uffff\1\4"+
            "\1\17\15\uffff\1\17",
            "\1\21\67\uffff\1\20",
            "\1\24\16\uffff\1\17\7\uffff\1\22\43\uffff\1\23\73\uffff\1\17",
            "\1\24\16\uffff\1\17\7\uffff\1\22\43\uffff\1\23\73\uffff\1\17",
            "\1\11\23\uffff\1\25\43\uffff\1\10",
            "\1\11\23\uffff\1\25\43\uffff\1\10",
            "",
            "\1\14\23\uffff\1\26\43\uffff\1\13",
            "\1\14\23\uffff\1\26\43\uffff\1\13",
            "\1\30\67\uffff\1\27",
            "\1\33\11\uffff\1\31\55\uffff\1\32",
            "\1\36\11\uffff\1\34\55\uffff\1\35",
            "\1\40\67\uffff\1\37",
            "\1\42\67\uffff\1\41",
            "\1\24\16\uffff\1\17\7\uffff\1\22\43\uffff\1\23\73\uffff\1\17",
            "\1\24\16\uffff\1\17\7\uffff\1\22\43\uffff\1\23\73\uffff\1\17",
            "\1\44\67\uffff\1\43",
            "\1\17\26\uffff\1\45\43\uffff\1\17\100\uffff\1\4",
            "\1\17\26\uffff\1\45\43\uffff\1\17\100\uffff\1\4",
            "\1\47\67\uffff\1\46",
            "\1\4\16\uffff\1\17\7\uffff\1\4\43\uffff\1\4\13\uffff\1\17",
            "\1\4\16\uffff\1\17\7\uffff\1\4\43\uffff\1\4\13\uffff\1\17",
            "\1\11\23\uffff\1\25\43\uffff\1\10",
            "\1\11\23\uffff\1\25\43\uffff\1\10",
            "\1\14\23\uffff\1\26\43\uffff\1\13",
            "\1\14\23\uffff\1\26\43\uffff\1\13",
            "\1\33\23\uffff\1\50\43\uffff\1\32",
            "\1\33\23\uffff\1\50\43\uffff\1\32",
            "\1\52\67\uffff\1\51",
            "\1\36\23\uffff\1\53\43\uffff\1\35",
            "\1\36\23\uffff\1\53\43\uffff\1\35",
            "\1\55\67\uffff\1\54",
            "\1\17\26\uffff\1\45\43\uffff\1\17\100\uffff\1\4",
            "\1\17\26\uffff\1\45\43\uffff\1\17\100\uffff\1\4",
            "\1\57\67\uffff\1\56",
            "\1\33\23\uffff\1\50\43\uffff\1\32",
            "\1\33\23\uffff\1\50\43\uffff\1\32",
            "\1\36\23\uffff\1\53\43\uffff\1\35",
            "\1\36\23\uffff\1\53\43\uffff\1\35"
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "234:70: ( nulls_key last_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_42 = input.LA(1);

                         
                        int index18_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_42==COMMA||LA18_42==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA18_42==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 37;}

                        else if ( (LA18_42==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index18_42);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_37==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 41;}

                        else if ( (LA18_37==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 42;}

                         
                        input.seek(index18_37);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_18 = input.LA(1);

                         
                        int index18_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_18==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 23;}

                        else if ( (LA18_18==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 24;}

                         
                        input.seek(index18_18);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_29 = input.LA(1);

                         
                        int index18_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_29==LEFT_PAREN||LA18_29==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA18_29==COMMA||LA18_29==PERIOD||LA18_29==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index18_29);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_41 = input.LA(1);

                         
                        int index18_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_41==COMMA||LA18_41==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA18_41==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 37;}

                        else if ( (LA18_41==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index18_41);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_28 = input.LA(1);

                         
                        int index18_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_28==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 38;}

                        else if ( (LA18_28==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 39;}

                         
                        input.seek(index18_28);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_25 = input.LA(1);

                         
                        int index18_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_25==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 35;}

                        else if ( (LA18_25==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 36;}

                         
                        input.seek(index18_25);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_10==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 16;}

                        else if ( (LA18_10==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 17;}

                         
                        input.seek(index18_10);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_7==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 13;}

                        else if ( (LA18_7==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 14;}

                         
                        input.seek(index18_7);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_30 = input.LA(1);

                         
                        int index18_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_30==LEFT_PAREN||LA18_30==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA18_30==COMMA||LA18_30==PERIOD||LA18_30==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index18_30);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_9==COMMA||LA18_9==PERIOD||LA18_9==REGULAR_ID||LA18_9==SQL92_RESERVED_ASC||LA18_9==SQL92_RESERVED_DESC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA18_9==LEFT_PAREN||LA18_9==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index18_9);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_20 = input.LA(1);

                         
                        int index18_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_20==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 28;}

                        else if ( (LA18_20==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 29;}

                        else if ( (LA18_20==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 30;}

                         
                        input.seek(index18_20);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_26 = input.LA(1);

                         
                        int index18_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_26==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 37;}

                        else if ( (LA18_26==COMMA||LA18_26==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA18_26==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index18_26);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_6==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 10;}

                        else if ( (LA18_6==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 11;}

                        else if ( (LA18_6==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 12;}

                         
                        input.seek(index18_6);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_27 = input.LA(1);

                         
                        int index18_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_27==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 37;}

                        else if ( (LA18_27==COMMA||LA18_27==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA18_27==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index18_27);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_46 = input.LA(1);

                         
                        int index18_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_46==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 29;}

                        else if ( (LA18_46==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 30;}

                        else if ( (LA18_46==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 43;}

                         
                        input.seek(index18_46);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA18_44 = input.LA(1);

                         
                        int index18_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_44==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 26;}

                        else if ( (LA18_44==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 27;}

                        else if ( (LA18_44==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 40;}

                         
                        input.seek(index18_44);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA18_33 = input.LA(1);

                         
                        int index18_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_33==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 11;}

                        else if ( (LA18_33==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 12;}

                        else if ( (LA18_33==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 22;}

                         
                        input.seek(index18_33);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA18_31 = input.LA(1);

                         
                        int index18_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_31==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 8;}

                        else if ( (LA18_31==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 9;}

                        else if ( (LA18_31==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 21;}

                         
                        input.seek(index18_31);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 3;}

                        else if ( (LA18_1==DELIMITED_ID||LA18_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index18_1);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_5==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 7;}

                        else if ( (LA18_5==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 8;}

                        else if ( (LA18_5==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 9;}

                         
                        input.seek(index18_5);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA18_24 = input.LA(1);

                         
                        int index18_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_24==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 19;}

                        else if ( (LA18_24==COMMA) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 20;}

                        else if ( (LA18_24==LEFT_PAREN||LA18_24==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA18_24==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 18;}

                         
                        input.seek(index18_24);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA18_23 = input.LA(1);

                         
                        int index18_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_23==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 19;}

                        else if ( (LA18_23==COMMA) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 20;}

                        else if ( (LA18_23==LEFT_PAREN||LA18_23==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA18_23==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 18;}

                         
                        input.seek(index18_23);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_8==COMMA||LA18_8==PERIOD||LA18_8==REGULAR_ID||LA18_8==SQL92_RESERVED_ASC||LA18_8==SQL92_RESERVED_DESC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                        else if ( (LA18_8==LEFT_PAREN||LA18_8==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index18_8);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA18_0 = input.LA(1);

                         
                        int index18_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 1;}

                        else if ( (LA18_0==COMMA) ) {s = 2;}

                         
                        input.seek(index18_0);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_3==COMMA) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 5;}

                        else if ( (LA18_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 6;}

                        else if ( (LA18_3==LEFT_PAREN||LA18_3==PERIOD||LA18_3==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index18_3);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA18_47 = input.LA(1);

                         
                        int index18_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_47==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 29;}

                        else if ( (LA18_47==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 30;}

                        else if ( (LA18_47==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 43;}

                         
                        input.seek(index18_47);

                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA18_45 = input.LA(1);

                         
                        int index18_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_45==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 26;}

                        else if ( (LA18_45==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 27;}

                        else if ( (LA18_45==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 40;}

                         
                        input.seek(index18_45);

                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA18_34 = input.LA(1);

                         
                        int index18_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_34==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 11;}

                        else if ( (LA18_34==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 12;}

                        else if ( (LA18_34==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 22;}

                         
                        input.seek(index18_34);

                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA18_32 = input.LA(1);

                         
                        int index18_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_32==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 8;}

                        else if ( (LA18_32==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 9;}

                        else if ( (LA18_32==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 21;}

                         
                        input.seek(index18_32);

                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA18_38 = input.LA(1);

                         
                        int index18_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_38==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 43;}

                        else if ( (LA18_38==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 29;}

                        else if ( (LA18_38==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 30;}

                         
                        input.seek(index18_38);

                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA18_35 = input.LA(1);

                         
                        int index18_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_35==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 40;}

                        else if ( (LA18_35==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 26;}

                        else if ( (LA18_35==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 27;}

                         
                        input.seek(index18_35);

                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_13==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 21;}

                        else if ( (LA18_13==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 8;}

                        else if ( (LA18_13==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 9;}

                         
                        input.seek(index18_13);

                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_16==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 22;}

                        else if ( (LA18_16==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 11;}

                        else if ( (LA18_16==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 12;}

                         
                        input.seek(index18_16);

                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA18_43 = input.LA(1);

                         
                        int index18_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_43==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 46;}

                        else if ( (LA18_43==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 47;}

                         
                        input.seek(index18_43);

                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA18_40 = input.LA(1);

                         
                        int index18_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_40==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 44;}

                        else if ( (LA18_40==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 45;}

                         
                        input.seek(index18_40);

                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA18_21 = input.LA(1);

                         
                        int index18_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_21==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 31;}

                        else if ( (LA18_21==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 32;}

                         
                        input.seek(index18_21);

                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA18_22 = input.LA(1);

                         
                        int index18_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_22==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 33;}

                        else if ( (LA18_22==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 34;}

                         
                        input.seek(index18_22);

                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_12==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 18;}

                        else if ( (LA18_12==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 19;}

                        else if ( (LA18_12==COMMA) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 20;}

                        else if ( (LA18_12==LEFT_PAREN||LA18_12==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                         
                        input.seek(index18_12);

                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA18_39 = input.LA(1);

                         
                        int index18_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_39==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 43;}

                        else if ( (LA18_39==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 29;}

                        else if ( (LA18_39==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 30;}

                         
                        input.seek(index18_39);

                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA18_36 = input.LA(1);

                         
                        int index18_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_36==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 40;}

                        else if ( (LA18_36==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 26;}

                        else if ( (LA18_36==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 27;}

                         
                        input.seek(index18_36);

                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_14==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 21;}

                        else if ( (LA18_14==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 8;}

                        else if ( (LA18_14==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 9;}

                         
                        input.seek(index18_14);

                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_17==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 22;}

                        else if ( (LA18_17==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 11;}

                        else if ( (LA18_17==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 12;}

                         
                        input.seek(index18_17);

                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA18_19 = input.LA(1);

                         
                        int index18_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_19==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 25;}

                        else if ( (LA18_19==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 26;}

                        else if ( (LA18_19==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 27;}

                         
                        input.seek(index18_19);

                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_11==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 18;}

                        else if ( (LA18_11==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 19;}

                        else if ( (LA18_11==COMMA) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 20;}

                        else if ( (LA18_11==LEFT_PAREN||LA18_11==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 15;}

                         
                        input.seek(index18_11);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA22_eotS =
        "\60\uffff";
    static final String DFA22_eofS =
        "\60\uffff";
    static final String DFA22_minS =
        "\1\17\1\22\1\uffff\1\17\1\uffff\3\22\2\17\1\22\2\17\5\22\1\uffff"+
        "\3\22\2\17\1\22\2\17\1\22\2\17\13\22\2\17\5\22";
    static final String DFA22_maxS =
        "\2\112\1\uffff\1\u0086\1\uffff\3\112\2\u0086\1\112\2\145\5\112\1"+
        "\uffff\3\112\2\u0086\1\112\2\u008b\1\112\2\126\13\112\2\u008b\5"+
        "\112";
    static final String DFA22_acceptS =
        "\2\uffff\1\2\1\uffff\1\2\15\uffff\1\1\35\uffff";
    static final String DFA22_specialS =
        "\1\1\1\21\1\uffff\1\17\1\uffff\1\16\1\26\1\10\1\54\1\46\1\7\1\31"+
        "\1\13\1\40\1\51\1\3\1\53\1\14\1\uffff\1\41\1\52\1\45\1\30\1\27\1"+
        "\11\1\15\1\20\1\6\1\4\1\12\1\44\1\25\1\35\1\37\1\50\1\2\1\36\1\47"+
        "\1\24\1\34\1\43\1\5\1\0\1\42\1\23\1\33\1\22\1\32}>";
    static final String[] DFA22_transitionS = {
            "\1\2\72\uffff\1\1",
            "\1\4\11\uffff\1\4\55\uffff\1\3",
            "",
            "\1\6\16\uffff\1\4\7\uffff\1\4\43\uffff\1\5\73\uffff\1\4",
            "",
            "\1\11\11\uffff\1\7\55\uffff\1\10",
            "\1\14\11\uffff\1\12\55\uffff\1\13",
            "\1\16\67\uffff\1\15",
            "\1\21\16\uffff\1\22\7\uffff\1\17\43\uffff\1\20\73\uffff\1\22",
            "\1\21\16\uffff\1\22\7\uffff\1\17\43\uffff\1\20\73\uffff\1\22",
            "\1\24\67\uffff\1\23",
            "\1\22\16\uffff\1\4\7\uffff\1\22\43\uffff\1\22\13\uffff\1\4"+
            "\1\22\15\uffff\1\22",
            "\1\22\16\uffff\1\4\7\uffff\1\22\43\uffff\1\22\13\uffff\1\4"+
            "\1\22\15\uffff\1\22",
            "\1\11\23\uffff\1\25\43\uffff\1\10",
            "\1\11\23\uffff\1\25\43\uffff\1\10",
            "\1\27\67\uffff\1\26",
            "\1\32\11\uffff\1\30\55\uffff\1\31",
            "\1\35\11\uffff\1\33\55\uffff\1\34",
            "",
            "\1\14\23\uffff\1\36\43\uffff\1\13",
            "\1\14\23\uffff\1\36\43\uffff\1\13",
            "\1\40\67\uffff\1\37",
            "\1\21\16\uffff\1\22\7\uffff\1\17\43\uffff\1\20\73\uffff\1\22",
            "\1\21\16\uffff\1\22\7\uffff\1\17\43\uffff\1\20\73\uffff\1\22",
            "\1\42\67\uffff\1\41",
            "\1\22\26\uffff\1\43\43\uffff\1\22\100\uffff\1\4",
            "\1\22\26\uffff\1\43\43\uffff\1\22\100\uffff\1\4",
            "\1\45\67\uffff\1\44",
            "\1\4\16\uffff\1\22\7\uffff\1\4\43\uffff\1\4\13\uffff\1\22",
            "\1\4\16\uffff\1\22\7\uffff\1\4\43\uffff\1\4\13\uffff\1\22",
            "\1\47\67\uffff\1\46",
            "\1\11\23\uffff\1\25\43\uffff\1\10",
            "\1\11\23\uffff\1\25\43\uffff\1\10",
            "\1\32\23\uffff\1\50\43\uffff\1\31",
            "\1\32\23\uffff\1\50\43\uffff\1\31",
            "\1\52\67\uffff\1\51",
            "\1\35\23\uffff\1\53\43\uffff\1\34",
            "\1\35\23\uffff\1\53\43\uffff\1\34",
            "\1\14\23\uffff\1\36\43\uffff\1\13",
            "\1\14\23\uffff\1\36\43\uffff\1\13",
            "\1\55\67\uffff\1\54",
            "\1\22\26\uffff\1\43\43\uffff\1\22\100\uffff\1\4",
            "\1\22\26\uffff\1\43\43\uffff\1\22\100\uffff\1\4",
            "\1\57\67\uffff\1\56",
            "\1\32\23\uffff\1\50\43\uffff\1\31",
            "\1\32\23\uffff\1\50\43\uffff\1\31",
            "\1\35\23\uffff\1\53\43\uffff\1\34",
            "\1\35\23\uffff\1\53\43\uffff\1\34"
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "235:77: ( nulls_key last_key )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_42 = input.LA(1);

                         
                        int index22_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_42==COMMA||LA22_42==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA22_42==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 35;}

                        else if ( (LA22_42==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index22_42);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA22_0 = input.LA(1);

                         
                        int index22_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 1;}

                        else if ( (LA22_0==COMMA) ) {s = 2;}

                         
                        input.seek(index22_0);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA22_35 = input.LA(1);

                         
                        int index22_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_35==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 41;}

                        else if ( (LA22_35==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 42;}

                         
                        input.seek(index22_35);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA22_15 = input.LA(1);

                         
                        int index22_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_15==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 22;}

                        else if ( (LA22_15==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 23;}

                         
                        input.seek(index22_15);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA22_28 = input.LA(1);

                         
                        int index22_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_28==LEFT_PAREN||LA22_28==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA22_28==COMMA||LA22_28==PERIOD||LA22_28==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index22_28);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA22_41 = input.LA(1);

                         
                        int index22_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_41==COMMA||LA22_41==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA22_41==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 35;}

                        else if ( (LA22_41==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index22_41);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA22_27 = input.LA(1);

                         
                        int index22_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_27==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 36;}

                        else if ( (LA22_27==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 37;}

                         
                        input.seek(index22_27);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA22_10 = input.LA(1);

                         
                        int index22_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_10==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 19;}

                        else if ( (LA22_10==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 20;}

                         
                        input.seek(index22_10);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA22_7 = input.LA(1);

                         
                        int index22_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_7==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 13;}

                        else if ( (LA22_7==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 14;}

                         
                        input.seek(index22_7);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA22_24 = input.LA(1);

                         
                        int index22_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_24==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 33;}

                        else if ( (LA22_24==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 34;}

                         
                        input.seek(index22_24);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA22_29 = input.LA(1);

                         
                        int index22_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_29==LEFT_PAREN||LA22_29==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA22_29==COMMA||LA22_29==PERIOD||LA22_29==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index22_29);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA22_12 = input.LA(1);

                         
                        int index22_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_12==COMMA||LA22_12==PERIOD||LA22_12==REGULAR_ID||LA22_12==SQL92_RESERVED_ASC||LA22_12==SQL92_RESERVED_DESC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA22_12==LEFT_PAREN||LA22_12==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index22_12);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA22_17 = input.LA(1);

                         
                        int index22_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_17==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 27;}

                        else if ( (LA22_17==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 28;}

                        else if ( (LA22_17==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 29;}

                         
                        input.seek(index22_17);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA22_25 = input.LA(1);

                         
                        int index22_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_25==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 35;}

                        else if ( (LA22_25==COMMA||LA22_25==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA22_25==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index22_25);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA22_5 = input.LA(1);

                         
                        int index22_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_5==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 7;}

                        else if ( (LA22_5==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 8;}

                        else if ( (LA22_5==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 9;}

                         
                        input.seek(index22_5);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA22_3 = input.LA(1);

                         
                        int index22_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 5;}

                        else if ( (LA22_3==COMMA) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 6;}

                        else if ( (LA22_3==LEFT_PAREN||LA22_3==PERIOD||LA22_3==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index22_3);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA22_26 = input.LA(1);

                         
                        int index22_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_26==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 35;}

                        else if ( (LA22_26==COMMA||LA22_26==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA22_26==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index22_26);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 3;}

                        else if ( (LA22_1==DELIMITED_ID||LA22_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index22_1);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA22_46 = input.LA(1);

                         
                        int index22_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_46==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 28;}

                        else if ( (LA22_46==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 29;}

                        else if ( (LA22_46==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 43;}

                         
                        input.seek(index22_46);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA22_44 = input.LA(1);

                         
                        int index22_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_44==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 25;}

                        else if ( (LA22_44==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 26;}

                        else if ( (LA22_44==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 40;}

                         
                        input.seek(index22_44);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA22_38 = input.LA(1);

                         
                        int index22_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_38==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 11;}

                        else if ( (LA22_38==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 12;}

                        else if ( (LA22_38==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 30;}

                         
                        input.seek(index22_38);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA22_31 = input.LA(1);

                         
                        int index22_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_31==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 8;}

                        else if ( (LA22_31==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 9;}

                        else if ( (LA22_31==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 21;}

                         
                        input.seek(index22_31);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA22_6 = input.LA(1);

                         
                        int index22_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_6==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 10;}

                        else if ( (LA22_6==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 11;}

                        else if ( (LA22_6==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 12;}

                         
                        input.seek(index22_6);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA22_23 = input.LA(1);

                         
                        int index22_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_23==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 16;}

                        else if ( (LA22_23==COMMA) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 17;}

                        else if ( (LA22_23==LEFT_PAREN||LA22_23==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA22_23==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 15;}

                         
                        input.seek(index22_23);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA22_22 = input.LA(1);

                         
                        int index22_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_22==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 16;}

                        else if ( (LA22_22==COMMA) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 17;}

                        else if ( (LA22_22==LEFT_PAREN||LA22_22==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA22_22==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 15;}

                         
                        input.seek(index22_22);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA22_11 = input.LA(1);

                         
                        int index22_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_11==COMMA||LA22_11==PERIOD||LA22_11==REGULAR_ID||LA22_11==SQL92_RESERVED_ASC||LA22_11==SQL92_RESERVED_DESC) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                        else if ( (LA22_11==LEFT_PAREN||LA22_11==SQL92_RESERVED_AS) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {s = 4;}

                         
                        input.seek(index22_11);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA22_47 = input.LA(1);

                         
                        int index22_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_47==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 28;}

                        else if ( (LA22_47==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 29;}

                        else if ( (LA22_47==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 43;}

                         
                        input.seek(index22_47);

                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA22_45 = input.LA(1);

                         
                        int index22_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_45==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 25;}

                        else if ( (LA22_45==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 26;}

                        else if ( (LA22_45==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 40;}

                         
                        input.seek(index22_45);

                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA22_39 = input.LA(1);

                         
                        int index22_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_39==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 11;}

                        else if ( (LA22_39==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 12;}

                        else if ( (LA22_39==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 30;}

                         
                        input.seek(index22_39);

                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA22_32 = input.LA(1);

                         
                        int index22_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_32==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 8;}

                        else if ( (LA22_32==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 9;}

                        else if ( (LA22_32==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 21;}

                         
                        input.seek(index22_32);

                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA22_36 = input.LA(1);

                         
                        int index22_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_36==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 43;}

                        else if ( (LA22_36==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 28;}

                        else if ( (LA22_36==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 29;}

                         
                        input.seek(index22_36);

                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA22_33 = input.LA(1);

                         
                        int index22_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_33==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 40;}

                        else if ( (LA22_33==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 25;}

                        else if ( (LA22_33==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 26;}

                         
                        input.seek(index22_33);

                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA22_13 = input.LA(1);

                         
                        int index22_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_13==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 21;}

                        else if ( (LA22_13==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 8;}

                        else if ( (LA22_13==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 9;}

                         
                        input.seek(index22_13);

                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA22_19 = input.LA(1);

                         
                        int index22_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_19==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 30;}

                        else if ( (LA22_19==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 11;}

                        else if ( (LA22_19==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 12;}

                         
                        input.seek(index22_19);

                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA22_43 = input.LA(1);

                         
                        int index22_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_43==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 46;}

                        else if ( (LA22_43==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 47;}

                         
                        input.seek(index22_43);

                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA22_40 = input.LA(1);

                         
                        int index22_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_40==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 44;}

                        else if ( (LA22_40==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 45;}

                         
                        input.seek(index22_40);

                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA22_30 = input.LA(1);

                         
                        int index22_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_30==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 38;}

                        else if ( (LA22_30==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 39;}

                         
                        input.seek(index22_30);

                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA22_21 = input.LA(1);

                         
                        int index22_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_21==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 31;}

                        else if ( (LA22_21==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 32;}

                         
                        input.seek(index22_21);

                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA22_9 = input.LA(1);

                         
                        int index22_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_9==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 15;}

                        else if ( (LA22_9==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 16;}

                        else if ( (LA22_9==COMMA) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 17;}

                        else if ( (LA22_9==LEFT_PAREN||LA22_9==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                         
                        input.seek(index22_9);

                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA22_37 = input.LA(1);

                         
                        int index22_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_37==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 43;}

                        else if ( (LA22_37==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 28;}

                        else if ( (LA22_37==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 29;}

                         
                        input.seek(index22_37);

                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA22_34 = input.LA(1);

                         
                        int index22_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_34==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 40;}

                        else if ( (LA22_34==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 25;}

                        else if ( (LA22_34==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 26;}

                         
                        input.seek(index22_34);

                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA22_14 = input.LA(1);

                         
                        int index22_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_14==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 21;}

                        else if ( (LA22_14==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 8;}

                        else if ( (LA22_14==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 9;}

                         
                        input.seek(index22_14);

                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA22_20 = input.LA(1);

                         
                        int index22_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_20==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 30;}

                        else if ( (LA22_20==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 11;}

                        else if ( (LA22_20==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 12;}

                         
                        input.seek(index22_20);

                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA22_16 = input.LA(1);

                         
                        int index22_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_16==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 24;}

                        else if ( (LA22_16==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 25;}

                        else if ( (LA22_16==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 26;}

                         
                        input.seek(index22_16);

                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA22_8 = input.LA(1);

                         
                        int index22_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_8==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 15;}

                        else if ( (LA22_8==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 16;}

                        else if ( (LA22_8==COMMA) && (((input.LT(1).getText().equalsIgnoreCase("nulls"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {s = 17;}

                        else if ( (LA22_8==LEFT_PAREN||LA22_8==SQL92_RESERVED_SELECT) && ((input.LT(1).getText().equalsIgnoreCase("nulls")))) {s = 18;}

                         
                        input.seek(index22_8);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA43_eotS =
        "\104\uffff";
    static final String DFA43_eofS =
        "\1\2\103\uffff";
    static final String DFA43_minS =
        "\1\7\1\0\102\uffff";
    static final String DFA43_maxS =
        "\1\u0098\1\0\102\uffff";
    static final String DFA43_acceptS =
        "\2\uffff\1\3\77\uffff\1\1\1\2";
    static final String DFA43_specialS =
        "\1\uffff\1\0\102\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\2\3\uffff\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\7\2\1\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\11\uffff\2\2\5\uffff\1\2\2\uffff\1\2\11\uffff\1\1\3\2\2"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\1\2\5"+
            "\uffff\3\2\2\uffff\2\2\3\uffff\3\2\2\uffff\11\2\2\uffff\1\2"+
            "\1\uffff\2\2\5\uffff\1\2\3\uffff\2\2\1\uffff\1\2\1\uffff\1\2"+
            "\2\uffff\3\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "303:76: ( pivot_clause | unpivot_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_1 = input.LA(1);

                         
                        int index43_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("pivot")))) ) {s = 66;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("unpivot")))) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index43_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA45_eotS =
        "\104\uffff";
    static final String DFA45_eofS =
        "\1\2\103\uffff";
    static final String DFA45_minS =
        "\1\7\1\0\102\uffff";
    static final String DFA45_maxS =
        "\1\u0098\1\0\102\uffff";
    static final String DFA45_acceptS =
        "\2\uffff\1\3\77\uffff\1\1\1\2";
    static final String DFA45_specialS =
        "\1\uffff\1\0\102\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\2\3\uffff\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\7\2\1\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\11\uffff\2\2\5\uffff\1\2\2\uffff\1\2\11\uffff\1\1\3\2\2"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\1\2\5"+
            "\uffff\3\2\2\uffff\2\2\3\uffff\3\2\2\uffff\11\2\2\uffff\1\2"+
            "\1\uffff\2\2\5\uffff\1\2\3\uffff\2\2\1\uffff\1\2\1\uffff\1\2"+
            "\2\uffff\3\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "304:84: ( pivot_clause | unpivot_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA45_1 = input.LA(1);

                         
                        int index45_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("pivot")))) ) {s = 66;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("unpivot")))) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index45_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA46_eotS =
        "\104\uffff";
    static final String DFA46_eofS =
        "\1\2\103\uffff";
    static final String DFA46_minS =
        "\1\7\1\0\102\uffff";
    static final String DFA46_maxS =
        "\1\u0098\1\0\102\uffff";
    static final String DFA46_acceptS =
        "\2\uffff\1\3\77\uffff\1\1\1\2";
    static final String DFA46_specialS =
        "\1\uffff\1\0\102\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\2\3\uffff\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\7\2\1\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\11\uffff\2\2\5\uffff\1\2\2\uffff\1\2\11\uffff\1\1\3\2\2"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\1\2\5"+
            "\uffff\3\2\2\uffff\2\2\3\uffff\3\2\2\uffff\11\2\2\uffff\1\2"+
            "\1\uffff\2\2\5\uffff\1\2\3\uffff\2\2\1\uffff\1\2\1\uffff\1\2"+
            "\2\uffff\3\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "306:38: ( pivot_clause | unpivot_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_1 = input.LA(1);

                         
                        int index46_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (((input.LT(1).getText().equalsIgnoreCase("pivot")))) ) {s = 66;}

                        else if ( (((input.LT(1).getText().equalsIgnoreCase("unpivot")))) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index46_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA100_eotS =
        "\15\uffff";
    static final String DFA100_eofS =
        "\15\uffff";
    static final String DFA100_minS =
        "\1\112\2\22\2\112\1\uffff\2\22\2\uffff\3\22";
    static final String DFA100_maxS =
        "\1\112\1\132\1\112\2\175\1\uffff\2\112\2\uffff\3\112";
    static final String DFA100_acceptS =
        "\5\uffff\1\2\2\uffff\1\2\1\1\3\uffff";
    static final String DFA100_specialS =
        "\1\7\1\10\1\2\1\0\1\3\1\uffff\1\5\1\11\2\uffff\1\6\1\1\1\4}>";
    static final String[] DFA100_transitionS = {
            "\1\1",
            "\1\4\11\uffff\1\2\55\uffff\1\3\17\uffff\1\5",
            "\1\7\67\uffff\1\6",
            "\1\10\62\uffff\1\11",
            "\1\10\62\uffff\1\11",
            "",
            "\1\4\23\uffff\1\12\43\uffff\1\3",
            "\1\4\23\uffff\1\12\43\uffff\1\3",
            "",
            "",
            "\1\14\67\uffff\1\13",
            "\1\4\23\uffff\1\12\43\uffff\1\3",
            "\1\4\23\uffff\1\12\43\uffff\1\3"
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "()* loopback of 483:64: ( reference_model )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_3 = input.LA(1);

                         
                        int index100_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA100_3==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 8;}

                        else if ( (LA100_3==SQL92_RESERVED_ON) && ((input.LT(1).getText().equalsIgnoreCase("reference")))) {s = 9;}

                         
                        input.seek(index100_3);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA100_11 = input.LA(1);

                         
                        int index100_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA100_11==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 3;}

                        else if ( (LA100_11==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 4;}

                        else if ( (LA100_11==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 10;}

                         
                        input.seek(index100_11);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA100_2 = input.LA(1);

                         
                        int index100_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA100_2==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 6;}

                        else if ( (LA100_2==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 7;}

                         
                        input.seek(index100_2);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA100_4 = input.LA(1);

                         
                        int index100_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA100_4==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("main")))) {s = 8;}

                        else if ( (LA100_4==SQL92_RESERVED_ON) && ((input.LT(1).getText().equalsIgnoreCase("reference")))) {s = 9;}

                         
                        input.seek(index100_4);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA100_12 = input.LA(1);

                         
                        int index100_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA100_12==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 3;}

                        else if ( (LA100_12==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 4;}

                        else if ( (LA100_12==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 10;}

                         
                        input.seek(index100_12);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA100_6 = input.LA(1);

                         
                        int index100_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA100_6==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 10;}

                        else if ( (LA100_6==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 3;}

                        else if ( (LA100_6==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 4;}

                         
                        input.seek(index100_6);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA100_10 = input.LA(1);

                         
                        int index100_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA100_10==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 11;}

                        else if ( (LA100_10==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 12;}

                         
                        input.seek(index100_10);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA100_0 = input.LA(1);

                         
                        int index100_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA100_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("dimension"))||(input.LT(1).getText().equalsIgnoreCase("main"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {s = 1;}

                         
                        input.seek(index100_0);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA100_1 = input.LA(1);

                         
                        int index100_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA100_1==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 2;}

                        else if ( (LA100_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 3;}

                        else if ( (LA100_1==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 4;}

                        else if ( (LA100_1==SQL92_RESERVED_BY) && (((input.LT(1).getText().equalsIgnoreCase("dimension"))||(input.LT(1).getText().equalsIgnoreCase("partition"))))) {s = 5;}

                         
                        input.seek(index100_1);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA100_7 = input.LA(1);

                         
                        int index100_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA100_7==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 10;}

                        else if ( (LA100_7==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 3;}

                        else if ( (LA100_7==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("reference"))||(input.LT(1).getText().equalsIgnoreCase("main"))))) {s = 4;}

                         
                        input.seek(index100_7);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA180_eotS =
        "\14\uffff";
    static final String DFA180_eofS =
        "\1\2\13\uffff";
    static final String DFA180_minS =
        "\1\5\1\22\1\uffff\1\22\2\uffff\3\22\1\uffff\2\22";
    static final String DFA180_maxS =
        "\1\u0097\1\u0089\1\uffff\1\112\2\uffff\3\112\1\uffff\2\112";
    static final String DFA180_acceptS =
        "\2\uffff\1\2\1\uffff\2\1\3\uffff\1\1\2\uffff";
    static final String DFA180_specialS =
        "\14\uffff}>";
    static final String[] DFA180_transitionS = {
            "\1\2\3\uffff\1\2\2\uffff\3\2\3\uffff\1\2\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\2\2\4\uffff\1\2\30\uffff\1\2\11\uffff"+
            "\1\2\2\uffff\1\2\4\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\2\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\2\2\12\uffff"+
            "\1\1\2\uffff\2\2\6\uffff\1\2\3\uffff\1\2\5\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\1\2",
            "\1\5\11\uffff\1\3\1\uffff\1\2\53\uffff\1\4\75\uffff\2\2",
            "",
            "\1\7\67\uffff\1\6",
            "",
            "",
            "\1\5\23\uffff\1\10\43\uffff\1\11",
            "\1\5\23\uffff\1\10\43\uffff\1\11",
            "\1\13\67\uffff\1\12",
            "",
            "\1\5\23\uffff\1\10\43\uffff\1\11",
            "\1\5\23\uffff\1\10\43\uffff\1\11"
    };

    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
    static final short[][] DFA180_transition;

    static {
        int numStates = DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "764:9: ( error_logging_into_part )?";
        }
    }
    static final String DFA185_eotS =
        "\104\uffff";
    static final String DFA185_eofS =
        "\1\2\103\uffff";
    static final String DFA185_minS =
        "\1\7\1\0\102\uffff";
    static final String DFA185_maxS =
        "\1\u0098\1\0\102\uffff";
    static final String DFA185_acceptS =
        "\2\uffff\1\2\100\uffff\1\1";
    static final String DFA185_specialS =
        "\1\uffff\1\0\102\uffff}>";
    static final String[] DFA185_transitionS = {
            "\1\2\3\uffff\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\7\2\1\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\11\uffff\2\2\5\uffff\1\2\2\uffff\1\2\11\uffff\1\1\3\2\2"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\1\2\5"+
            "\uffff\3\2\2\uffff\2\2\3\uffff\3\2\2\uffff\11\2\2\uffff\1\2"+
            "\1\uffff\2\2\5\uffff\1\2\3\uffff\2\2\1\uffff\1\2\1\uffff\2\2"+
            "\1\uffff\3\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA185_eot = DFA.unpackEncodedString(DFA185_eotS);
    static final short[] DFA185_eof = DFA.unpackEncodedString(DFA185_eofS);
    static final char[] DFA185_min = DFA.unpackEncodedStringToUnsignedChars(DFA185_minS);
    static final char[] DFA185_max = DFA.unpackEncodedStringToUnsignedChars(DFA185_maxS);
    static final short[] DFA185_accept = DFA.unpackEncodedString(DFA185_acceptS);
    static final short[] DFA185_special = DFA.unpackEncodedString(DFA185_specialS);
    static final short[][] DFA185_transition;

    static {
        int numStates = DFA185_transitionS.length;
        DFA185_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA185_transition[i] = DFA.unpackEncodedString(DFA185_transitionS[i]);
        }
    }

    class DFA185 extends DFA {

        public DFA185(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 185;
            this.eot = DFA185_eot;
            this.eof = DFA185_eof;
            this.min = DFA185_min;
            this.max = DFA185_max;
            this.accept = DFA185_accept;
            this.special = DFA185_special;
            this.transition = DFA185_transition;
        }
        public String getDescription() {
            return "781:25: ( sample_clause )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA185_1 = input.LA(1);

                         
                        int index185_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("sample"))) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index185_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 185, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA193_eotS =
        "\104\uffff";
    static final String DFA193_eofS =
        "\1\2\103\uffff";
    static final String DFA193_minS =
        "\1\7\1\0\102\uffff";
    static final String DFA193_maxS =
        "\1\u0098\1\0\102\uffff";
    static final String DFA193_acceptS =
        "\2\uffff\1\2\100\uffff\1\1";
    static final String DFA193_specialS =
        "\1\uffff\1\0\102\uffff}>";
    static final String[] DFA193_transitionS = {
            "\1\2\3\uffff\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\7\2\1\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\11\uffff\2\2\5\uffff\1\2\2\uffff\1\2\11\uffff\1\1\3\2\2"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\1\2\5"+
            "\uffff\3\2\2\uffff\2\2\3\uffff\3\2\2\uffff\11\2\2\uffff\1\2"+
            "\1\uffff\2\2\5\uffff\1\2\3\uffff\2\2\1\uffff\1\2\1\uffff\2\2"+
            "\1\uffff\3\2\3\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA193_eot = DFA.unpackEncodedString(DFA193_eotS);
    static final short[] DFA193_eof = DFA.unpackEncodedString(DFA193_eofS);
    static final char[] DFA193_min = DFA.unpackEncodedStringToUnsignedChars(DFA193_minS);
    static final char[] DFA193_max = DFA.unpackEncodedStringToUnsignedChars(DFA193_maxS);
    static final short[] DFA193_accept = DFA.unpackEncodedString(DFA193_acceptS);
    static final short[] DFA193_special = DFA.unpackEncodedString(DFA193_specialS);
    static final short[][] DFA193_transition;

    static {
        int numStates = DFA193_transitionS.length;
        DFA193_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA193_transition[i] = DFA.unpackEncodedString(DFA193_transitionS[i]);
        }
    }

    class DFA193 extends DFA {

        public DFA193(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 193;
            this.eot = DFA193_eot;
            this.eof = DFA193_eof;
            this.min = DFA193_min;
            this.max = DFA193_max;
            this.accept = DFA193_accept;
            this.special = DFA193_special;
            this.transition = DFA193_transition;
        }
        public String getDescription() {
            return "803:9: ( seed_part )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA193_1 = input.LA(1);

                         
                        int index193_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("seed"))) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index193_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 193, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA226_eotS =
        "\102\uffff";
    static final String DFA226_eofS =
        "\1\2\101\uffff";
    static final String DFA226_minS =
        "\1\7\101\uffff";
    static final String DFA226_maxS =
        "\1\u0098\101\uffff";
    static final String DFA226_acceptS =
        "\1\uffff\1\1\1\2\77\uffff";
    static final String DFA226_specialS =
        "\102\uffff}>";
    static final String[] DFA226_transitionS = {
            "\1\2\3\uffff\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\2\2\1\1\4\2\1\uffff\1\2\4\uffff\1\2"+
            "\2\uffff\1\2\11\uffff\2\2\5\uffff\1\2\2\uffff\1\2\11\uffff\4"+
            "\2\2\uffff\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\1"+
            "\2\5\uffff\3\2\2\uffff\2\2\3\uffff\3\2\2\uffff\11\2\2\uffff"+
            "\1\2\1\uffff\2\2\5\uffff\1\2\3\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\3\2\3\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA226_eot = DFA.unpackEncodedString(DFA226_eotS);
    static final short[] DFA226_eof = DFA.unpackEncodedString(DFA226_eofS);
    static final char[] DFA226_min = DFA.unpackEncodedStringToUnsignedChars(DFA226_minS);
    static final char[] DFA226_max = DFA.unpackEncodedStringToUnsignedChars(DFA226_maxS);
    static final short[] DFA226_accept = DFA.unpackEncodedString(DFA226_acceptS);
    static final short[] DFA226_special = DFA.unpackEncodedString(DFA226_specialS);
    static final short[][] DFA226_transition;

    static {
        int numStates = DFA226_transitionS.length;
        DFA226_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA226_transition[i] = DFA.unpackEncodedString(DFA226_transitionS[i]);
        }
    }

    class DFA226 extends DFA {

        public DFA226(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 226;
            this.eot = DFA226_eot;
            this.eof = DFA226_eof;
            this.min = DFA226_min;
            this.max = DFA226_max;
            this.accept = DFA226_accept;
            this.special = DFA226_special;
            this.transition = DFA226_transition;
        }
        public String getDescription() {
            return "973:91: ( LEFT_PAREN cn2= concatenation_wrapper RIGHT_PAREN )?";
        }
    }
    static final String DFA258_eotS =
        "\33\uffff";
    static final String DFA258_eofS =
        "\3\uffff\1\13\13\uffff\3\13\7\uffff\2\13";
    static final String DFA258_minS =
        "\1\5\1\22\1\36\1\7\3\uffff\2\22\3\uffff\1\22\1\5\1\22\3\7\1\5\2"+
        "\22\1\5\1\22\1\uffff\1\5\2\7";
    static final String DFA258_maxS =
        "\1\u0097\1\112\1\46\1\u0098\3\uffff\2\112\3\uffff\1\112\1\u0097"+
        "\1\112\3\u0098\1\u0097\2\112\1\u0097\1\112\1\uffff\1\u0097\2\u0098";
    static final String DFA258_acceptS =
        "\4\uffff\1\2\1\3\1\5\2\uffff\2\1\1\4\13\uffff\1\1\3\uffff";
    static final String DFA258_specialS =
        "\2\uffff\1\0\17\uffff\1\2\5\uffff\1\1\2\uffff}>";
    static final String[] DFA258_transitionS = {
            "\1\5\3\uffff\1\4\2\uffff\2\5\1\4\3\uffff\1\3\3\uffff\1\5\5\uffff"+
            "\1\1\1\uffff\1\6\3\uffff\1\5\47\uffff\1\2\26\uffff\1\5\1\uffff"+
            "\1\5\10\uffff\1\5\16\uffff\1\5\20\uffff\1\5\12\uffff\1\5",
            "\1\10\67\uffff\1\7",
            "\1\12\7\uffff\1\11",
            "\1\13\3\uffff\3\13\1\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1"+
            "\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1\15\4\13\1\uffff\1\13"+
            "\1\uffff\1\14\2\uffff\1\13\2\uffff\1\13\11\uffff\2\13\5\uffff"+
            "\1\13\2\uffff\1\13\11\uffff\4\13\2\uffff\1\13\3\uffff\1\13\1"+
            "\uffff\2\13\1\uffff\2\13\2\uffff\1\13\5\uffff\3\13\2\uffff\2"+
            "\13\3\uffff\3\13\2\uffff\11\13\2\uffff\1\13\1\uffff\2\13\5\uffff"+
            "\1\13\3\uffff\2\13\1\uffff\1\13\1\uffff\1\13\2\uffff\3\13\3"+
            "\uffff\1\13",
            "",
            "",
            "",
            "\1\3\23\uffff\1\16\43\uffff\1\17",
            "\1\3\23\uffff\1\16\43\uffff\1\17",
            "",
            "",
            "",
            "\1\21\11\uffff\1\13\55\uffff\1\20",
            "\1\13\3\uffff\1\13\2\uffff\4\13\2\uffff\1\13\3\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\2\uffff\2\13\4\uffff\1\13\30\uffff"+
            "\1\22\11\uffff\1\13\1\uffff\1\13\5\uffff\1\13\2\uffff\1\13\5"+
            "\uffff\1\13\4\uffff\2\13\1\uffff\1\13\2\uffff\1\13\4\uffff\2"+
            "\13\15\uffff\2\13\6\uffff\1\13\3\uffff\1\13\5\uffff\1\13\12"+
            "\uffff\1\13",
            "\1\24\67\uffff\1\23",
            "\1\13\3\uffff\3\13\1\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1"+
            "\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1\15\4\13\1\uffff\1\13"+
            "\1\uffff\1\14\2\uffff\1\13\2\uffff\1\13\11\uffff\2\13\5\uffff"+
            "\1\13\2\uffff\1\13\11\uffff\4\13\2\uffff\1\13\3\uffff\1\13\1"+
            "\uffff\2\13\1\uffff\2\13\2\uffff\1\13\5\uffff\3\13\2\uffff\2"+
            "\13\3\uffff\3\13\2\uffff\11\13\2\uffff\1\13\1\uffff\2\13\5\uffff"+
            "\1\13\3\uffff\2\13\1\uffff\1\13\1\uffff\1\13\2\uffff\3\13\3"+
            "\uffff\1\13",
            "\1\13\3\uffff\3\13\1\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1"+
            "\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1\25\4\13\1\uffff\1\13"+
            "\1\uffff\1\26\2\uffff\1\13\2\uffff\1\13\11\uffff\2\13\5\uffff"+
            "\1\13\2\uffff\1\13\11\uffff\4\13\2\uffff\1\13\3\uffff\1\13\1"+
            "\uffff\2\13\1\uffff\2\13\2\uffff\1\13\5\uffff\3\13\2\uffff\2"+
            "\13\3\uffff\3\13\2\uffff\11\13\2\uffff\1\13\1\uffff\2\13\5\uffff"+
            "\1\13\3\uffff\2\13\1\uffff\1\13\1\uffff\1\13\2\uffff\3\13\3"+
            "\uffff\1\13",
            "\1\13\3\uffff\3\13\1\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1"+
            "\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1\25\4\13\1\uffff\1\13"+
            "\1\uffff\1\26\2\uffff\1\13\2\uffff\1\13\11\uffff\2\13\5\uffff"+
            "\1\13\2\uffff\1\13\11\uffff\4\13\2\uffff\1\13\3\uffff\1\13\1"+
            "\uffff\2\13\1\uffff\2\13\2\uffff\1\13\5\uffff\3\13\2\uffff\2"+
            "\13\3\uffff\3\13\2\uffff\11\13\2\uffff\1\13\1\uffff\2\13\5\uffff"+
            "\1\13\3\uffff\2\13\1\uffff\1\13\1\uffff\1\13\2\uffff\3\13\3"+
            "\uffff\1\13",
            "\1\13\3\uffff\1\13\2\uffff\3\13\3\uffff\1\13\3\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\2\uffff\2\13\4\uffff\1\13\30\uffff"+
            "\1\13\11\uffff\1\13\1\uffff\1\27\5\uffff\1\13\2\uffff\1\13\5"+
            "\uffff\1\13\5\uffff\1\13\1\uffff\1\13\2\uffff\1\13\4\uffff\2"+
            "\13\16\uffff\1\13\6\uffff\1\13\11\uffff\1\13\12\uffff\1\13",
            "\1\3\23\uffff\1\16\43\uffff\1\17",
            "\1\3\23\uffff\1\16\43\uffff\1\17",
            "\1\13\3\uffff\1\13\2\uffff\4\13\2\uffff\1\13\3\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\2\uffff\2\13\4\uffff\1\13\30\uffff"+
            "\1\30\11\uffff\1\13\1\uffff\1\13\5\uffff\1\13\2\uffff\1\13\5"+
            "\uffff\1\13\4\uffff\2\13\1\uffff\1\13\2\uffff\1\13\4\uffff\2"+
            "\13\15\uffff\2\13\6\uffff\1\13\3\uffff\1\13\5\uffff\1\13\12"+
            "\uffff\1\13",
            "\1\32\11\uffff\1\13\55\uffff\1\31",
            "",
            "\1\13\3\uffff\1\13\2\uffff\3\13\3\uffff\1\13\3\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\2\uffff\2\13\4\uffff\1\13\30\uffff"+
            "\1\13\11\uffff\1\13\1\uffff\1\27\5\uffff\1\13\2\uffff\1\13\5"+
            "\uffff\1\13\5\uffff\1\13\1\uffff\1\13\2\uffff\1\13\4\uffff\2"+
            "\13\16\uffff\1\13\6\uffff\1\13\11\uffff\1\13\12\uffff\1\13",
            "\1\13\3\uffff\3\13\1\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1"+
            "\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1\25\4\13\1\uffff\1\13"+
            "\1\uffff\1\26\2\uffff\1\13\2\uffff\1\13\11\uffff\2\13\5\uffff"+
            "\1\13\2\uffff\1\13\11\uffff\4\13\2\uffff\1\13\3\uffff\1\13\1"+
            "\uffff\2\13\1\uffff\2\13\2\uffff\1\13\5\uffff\3\13\2\uffff\2"+
            "\13\3\uffff\3\13\2\uffff\11\13\2\uffff\1\13\1\uffff\2\13\5\uffff"+
            "\1\13\3\uffff\2\13\1\uffff\1\13\1\uffff\1\13\2\uffff\3\13\3"+
            "\uffff\1\13",
            "\1\13\3\uffff\3\13\1\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1"+
            "\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1\25\4\13\1\uffff\1\13"+
            "\1\uffff\1\26\2\uffff\1\13\2\uffff\1\13\11\uffff\2\13\5\uffff"+
            "\1\13\2\uffff\1\13\11\uffff\4\13\2\uffff\1\13\3\uffff\1\13\1"+
            "\uffff\2\13\1\uffff\2\13\2\uffff\1\13\5\uffff\3\13\2\uffff\2"+
            "\13\3\uffff\3\13\2\uffff\11\13\2\uffff\1\13\1\uffff\2\13\5\uffff"+
            "\1\13\3\uffff\2\13\1\uffff\1\13\1\uffff\1\13\2\uffff\3\13\3"+
            "\uffff\1\13"
    };

    static final short[] DFA258_eot = DFA.unpackEncodedString(DFA258_eotS);
    static final short[] DFA258_eof = DFA.unpackEncodedString(DFA258_eofS);
    static final char[] DFA258_min = DFA.unpackEncodedStringToUnsignedChars(DFA258_minS);
    static final char[] DFA258_max = DFA.unpackEncodedStringToUnsignedChars(DFA258_maxS);
    static final short[] DFA258_accept = DFA.unpackEncodedString(DFA258_acceptS);
    static final short[] DFA258_special = DFA.unpackEncodedString(DFA258_specialS);
    static final short[][] DFA258_transition;

    static {
        int numStates = DFA258_transitionS.length;
        DFA258_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA258_transition[i] = DFA.unpackEncodedString(DFA258_transitionS[i]);
        }
    }

    class DFA258 extends DFA {

        public DFA258(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 258;
            this.eot = DFA258_eot;
            this.eof = DFA258_eof;
            this.min = DFA258_min;
            this.max = DFA258_max;
            this.accept = DFA258_accept;
            this.special = DFA258_special;
            this.transition = DFA258_transition;
        }
        public String getDescription() {
            return "1080:1: atom options {backtrack=true; } : ( ( table_element outer_join_sign )=> table_element outer_join_sign | bind_variable | constant | general_element | LEFT_PAREN ! ( ( select_key | with_key )=> subquery RIGHT_PAREN ! ( subquery_operation_part )* | expression_or_vector RIGHT_PAREN !) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA258_2 = input.LA(1);

                         
                        int index258_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA258_2==PERIOD) && (synpred43_PLSQL_DMLParser())) {s = 9;}

                        else if ( (LA258_2==LEFT_PAREN) && (synpred43_PLSQL_DMLParser())) {s = 10;}

                        else if ( (((synpred45_PLSQL_DMLParser()&&synpred45_PLSQL_DMLParser())&&((input.LT(1).getText().equalsIgnoreCase("maxvalue"))||(input.LT(1).getText().equalsIgnoreCase("timestamp"))||(input.LT(1).getText().equalsIgnoreCase("minvalue"))||(input.LT(1).getText().equalsIgnoreCase("sessiontimezone"))||(input.LT(1).getText().equalsIgnoreCase("interval"))||(input.LT(1).getText().equalsIgnoreCase("dbtimezone"))))) ) {s = 5;}

                        else if ( (synpred46_PLSQL_DMLParser()) ) {s = 11;}

                         
                        input.seek(index258_2);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA258_24 = input.LA(1);

                         
                        int index258_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA258_24==RIGHT_PAREN) && (synpred43_PLSQL_DMLParser())) {s = 23;}

                        else if ( (LA258_24==APPROXIMATE_NUM_LIT||LA258_24==BINDVAR||(LA258_24 >= CHAR_STRING && LA258_24 <= COLON)||LA258_24==DELIMITED_ID||LA258_24==EXACT_NUM_LIT||LA258_24==INTRODUCER||LA258_24==LEFT_PAREN||(LA258_24 >= MINUS_SIGN && LA258_24 <= NATIONAL_CHAR_STRING_LIT)||LA258_24==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA258_24==PLUS_SIGN||LA258_24==REGULAR_ID||LA258_24==SQL92_RESERVED_ALL||LA258_24==SQL92_RESERVED_ANY||LA258_24==SQL92_RESERVED_CASE||LA258_24==SQL92_RESERVED_DATE||LA258_24==SQL92_RESERVED_DEFAULT||LA258_24==SQL92_RESERVED_DISTINCT||(LA258_24 >= SQL92_RESERVED_EXISTS && LA258_24 <= SQL92_RESERVED_FALSE)||LA258_24==SQL92_RESERVED_NULL||LA258_24==SQL92_RESERVED_PRIOR||LA258_24==SQL92_RESERVED_TRUE||LA258_24==UNSIGNED_INTEGER) ) {s = 11;}

                         
                        input.seek(index258_24);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA258_18 = input.LA(1);

                         
                        int index258_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA258_18==RIGHT_PAREN) && (synpred43_PLSQL_DMLParser())) {s = 23;}

                        else if ( (LA258_18==APPROXIMATE_NUM_LIT||LA258_18==BINDVAR||(LA258_18 >= CHAR_STRING && LA258_18 <= COLON)||LA258_18==DELIMITED_ID||LA258_18==EXACT_NUM_LIT||LA258_18==INTRODUCER||LA258_18==LEFT_PAREN||(LA258_18 >= MINUS_SIGN && LA258_18 <= NATIONAL_CHAR_STRING_LIT)||LA258_18==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA258_18==PLUS_SIGN||LA258_18==REGULAR_ID||LA258_18==SQL92_RESERVED_ALL||LA258_18==SQL92_RESERVED_ANY||LA258_18==SQL92_RESERVED_CASE||LA258_18==SQL92_RESERVED_DATE||LA258_18==SQL92_RESERVED_DEFAULT||LA258_18==SQL92_RESERVED_DISTINCT||(LA258_18 >= SQL92_RESERVED_EXISTS && LA258_18 <= SQL92_RESERVED_FALSE)||LA258_18==SQL92_RESERVED_NULL||LA258_18==SQL92_RESERVED_PRIOR||LA258_18==SQL92_RESERVED_TRUE||LA258_18==UNSIGNED_INTEGER) ) {s = 11;}

                         
                        input.seek(index258_18);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 258, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA264_eotS =
        "\102\uffff";
    static final String DFA264_eofS =
        "\1\2\101\uffff";
    static final String DFA264_minS =
        "\1\7\101\uffff";
    static final String DFA264_maxS =
        "\1\u0098\101\uffff";
    static final String DFA264_acceptS =
        "\1\uffff\1\1\1\2\77\uffff";
    static final String DFA264_specialS =
        "\102\uffff}>";
    static final String[] DFA264_transitionS = {
            "\1\2\3\uffff\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\7\2\1\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\1\11\uffff\2\2\5\uffff\1\2\2\uffff\1\2\11\uffff\4\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\1\2\5\uffff"+
            "\3\2\2\uffff\2\2\3\uffff\3\2\2\uffff\11\2\2\uffff\1\2\1\uffff"+
            "\2\2\5\uffff\1\2\3\uffff\2\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\3\2\3\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA264_eot = DFA.unpackEncodedString(DFA264_eotS);
    static final short[] DFA264_eof = DFA.unpackEncodedString(DFA264_eofS);
    static final char[] DFA264_min = DFA.unpackEncodedStringToUnsignedChars(DFA264_minS);
    static final char[] DFA264_max = DFA.unpackEncodedStringToUnsignedChars(DFA264_maxS);
    static final short[] DFA264_accept = DFA.unpackEncodedString(DFA264_acceptS);
    static final short[] DFA264_special = DFA.unpackEncodedString(DFA264_specialS);
    static final short[][] DFA264_transition;

    static {
        int numStates = DFA264_transitionS.length;
        DFA264_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA264_transition[i] = DFA.unpackEncodedString(DFA264_transitionS[i]);
        }
    }

    class DFA264 extends DFA {

        public DFA264(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = DFA264_eot;
            this.eof = DFA264_eof;
            this.min = DFA264_min;
            this.max = DFA264_max;
            this.accept = DFA264_accept;
            this.special = DFA264_special;
            this.transition = DFA264_transition;
        }
        public String getDescription() {
            return "1117:62: ( using_clause )?";
        }
    }
    static final String DFA303_eotS =
        "\16\uffff";
    static final String DFA303_eofS =
        "\16\uffff";
    static final String DFA303_minS =
        "\1\112\1\5\1\22\2\0\1\uffff\2\22\1\uffff\1\22\2\0\2\22";
    static final String DFA303_maxS =
        "\1\112\1\u0097\1\112\2\0\1\uffff\2\112\1\uffff\1\112\2\0\2\112";
    static final String DFA303_acceptS =
        "\5\uffff\1\2\2\uffff\1\1\5\uffff";
    static final String DFA303_specialS =
        "\1\10\1\11\1\5\1\6\1\12\1\uffff\1\4\1\3\1\uffff\1\0\1\7\1\2\1\1"+
        "\1\13}>";
    static final String[] DFA303_transitionS = {
            "\1\1",
            "\1\5\3\uffff\1\5\2\uffff\3\5\3\uffff\1\4\3\uffff\1\5\5\uffff"+
            "\1\2\1\uffff\1\5\2\uffff\2\5\4\uffff\1\5\30\uffff\1\5\11\uffff"+
            "\1\3\7\uffff\1\5\2\uffff\1\5\5\uffff\1\5\5\uffff\1\5\1\uffff"+
            "\1\5\2\uffff\1\5\4\uffff\2\5\16\uffff\1\5\6\uffff\1\5\11\uffff"+
            "\1\5\12\uffff\1\5",
            "\1\7\67\uffff\1\6",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\13\23\uffff\1\11\43\uffff\1\12",
            "\1\13\23\uffff\1\11\43\uffff\1\12",
            "",
            "\1\15\67\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\13\23\uffff\1\11\43\uffff\1\12",
            "\1\13\23\uffff\1\11\43\uffff\1\12"
    };

    static final short[] DFA303_eot = DFA.unpackEncodedString(DFA303_eotS);
    static final short[] DFA303_eof = DFA.unpackEncodedString(DFA303_eofS);
    static final char[] DFA303_min = DFA.unpackEncodedStringToUnsignedChars(DFA303_minS);
    static final char[] DFA303_max = DFA.unpackEncodedStringToUnsignedChars(DFA303_maxS);
    static final short[] DFA303_accept = DFA.unpackEncodedString(DFA303_acceptS);
    static final short[] DFA303_special = DFA.unpackEncodedString(DFA303_specialS);
    static final short[][] DFA303_transition;

    static {
        int numStates = DFA303_transitionS.length;
        DFA303_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA303_transition[i] = DFA.unpackEncodedString(DFA303_transitionS[i]);
        }
    }

    class DFA303 extends DFA {

        public DFA303(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 303;
            this.eot = DFA303_eot;
            this.eof = DFA303_eof;
            this.min = DFA303_min;
            this.max = DFA303_max;
            this.accept = DFA303_accept;
            this.special = DFA303_special;
            this.transition = DFA303_transition;
        }
        public String getDescription() {
            return "1202:17: ( name_key id | evalname_key concatenation_wrapper )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA303_9 = input.LA(1);

                         
                        int index303_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA303_9==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 12;}

                        else if ( (LA303_9==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 13;}

                         
                        input.seek(index303_9);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA303_12 = input.LA(1);

                         
                        int index303_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA303_12==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 10;}

                        else if ( (LA303_12==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 11;}

                        else if ( (LA303_12==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 9;}

                         
                        input.seek(index303_12);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA303_11 = input.LA(1);

                         
                        int index303_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("name"))) ) {s = 8;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 5;}

                         
                        input.seek(index303_11);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA303_7 = input.LA(1);

                         
                        int index303_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA303_7==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 9;}

                        else if ( (LA303_7==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 10;}

                        else if ( (LA303_7==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 11;}

                         
                        input.seek(index303_7);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA303_6 = input.LA(1);

                         
                        int index303_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA303_6==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 9;}

                        else if ( (LA303_6==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 10;}

                        else if ( (LA303_6==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 11;}

                         
                        input.seek(index303_6);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA303_2 = input.LA(1);

                         
                        int index303_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA303_2==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 6;}

                        else if ( (LA303_2==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 7;}

                         
                        input.seek(index303_2);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA303_3 = input.LA(1);

                         
                        int index303_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("name"))) ) {s = 8;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 5;}

                         
                        input.seek(index303_3);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA303_10 = input.LA(1);

                         
                        int index303_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("name"))) ) {s = 8;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 5;}

                         
                        input.seek(index303_10);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA303_0 = input.LA(1);

                         
                        int index303_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA303_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 1;}

                         
                        input.seek(index303_0);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA303_1 = input.LA(1);

                         
                        int index303_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA303_1==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 2;}

                        else if ( (LA303_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 3;}

                        else if ( (LA303_1==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 4;}

                        else if ( (LA303_1==APPROXIMATE_NUM_LIT||LA303_1==BINDVAR||(LA303_1 >= CHAR_STRING && LA303_1 <= COLON)||LA303_1==EXACT_NUM_LIT||LA303_1==LEFT_PAREN||(LA303_1 >= MINUS_SIGN && LA303_1 <= NATIONAL_CHAR_STRING_LIT)||LA303_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA303_1==PLUS_SIGN||LA303_1==SQL92_RESERVED_ALL||LA303_1==SQL92_RESERVED_ANY||LA303_1==SQL92_RESERVED_CASE||LA303_1==SQL92_RESERVED_DATE||LA303_1==SQL92_RESERVED_DEFAULT||LA303_1==SQL92_RESERVED_DISTINCT||(LA303_1 >= SQL92_RESERVED_EXISTS && LA303_1 <= SQL92_RESERVED_FALSE)||LA303_1==SQL92_RESERVED_NULL||LA303_1==SQL92_RESERVED_PRIOR||LA303_1==SQL92_RESERVED_TRUE||LA303_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("evalname")))) {s = 5;}

                         
                        input.seek(index303_1);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA303_4 = input.LA(1);

                         
                        int index303_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((input.LT(1).getText().equalsIgnoreCase("name"))) ) {s = 8;}

                        else if ( ((input.LT(1).getText().equalsIgnoreCase("evalname"))) ) {s = 5;}

                         
                        input.seek(index303_4);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA303_13 = input.LA(1);

                         
                        int index303_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA303_13==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 10;}

                        else if ( (LA303_13==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 11;}

                        else if ( (LA303_13==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("evalname"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {s = 9;}

                         
                        input.seek(index303_13);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 303, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_explain_key_in_explain_statement698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_plan_key_in_explain_statement700 = new BitSet(new long[]{0x0000000000000000L,0x0080400000000400L});
    public static final BitSet FOLLOW_set_key_in_explain_statement712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_statement_id_key_in_explain_statement714 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_explain_statement716 = new BitSet(new long[]{0x0000000400003000L});
    public static final BitSet FOLLOW_quoted_string_in_explain_statement718 = new BitSet(new long[]{0x0000000000000000L,0x0080400000000000L});
    public static final BitSet FOLLOW_into_key_in_explain_statement732 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableview_name_in_explain_statement734 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_for_key_in_explain_statement747 = new BitSet(new long[]{0x0000000040000000L,0x0020001000000400L,0x0000000000108040L});
    public static final BitSet FOLLOW_select_statement_in_explain_statement760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_statement_in_explain_statement773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_statement_in_explain_statement786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_statement_in_explain_statement799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_statement_in_explain_statement812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_factoring_clause_in_select_statement873 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_select_statement884 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_for_update_clause_in_select_statement895 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_order_by_clause_in_select_statement907 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_with_key_in_subquery_factoring_clause957 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause960 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_subquery_factoring_clause963 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause966 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_query_name_in_factoring_element988 = new BitSet(new long[]{0x0000000040000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_factoring_element991 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_factoring_element993 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_factoring_element996 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_factoring_element998 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_factoring_element1002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_as_key_in_factoring_element1006 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_factoring_element1008 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_factoring_element1010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000001L});
    public static final BitSet FOLLOW_order_by_clause_in_factoring_element1012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_factoring_element1015 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_search_clause_in_factoring_element1026 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_cycle_clause_in_factoring_element1038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_search_key_in_search_clause1083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_depth_key_in_search_clause1087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_breadth_key_in_search_clause1091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_first_key_in_search_clause1095 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_search_clause1097 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_search_clause1112 = new BitSet(new long[]{0x0000000000008000L,0x0000002000800400L});
    public static final BitSet FOLLOW_asc_key_in_search_clause1114 = new BitSet(new long[]{0x0000000000008000L,0x0000002000000400L});
    public static final BitSet FOLLOW_desc_key_in_search_clause1118 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_nulls_key_in_search_clause1123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_first_key_in_search_clause1125 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_nulls_key_in_search_clause1130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_last_key_in_search_clause1132 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_search_clause1150 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_search_clause1152 = new BitSet(new long[]{0x0000000000008000L,0x0000002000800400L});
    public static final BitSet FOLLOW_asc_key_in_search_clause1154 = new BitSet(new long[]{0x0000000000008000L,0x0000002000000400L});
    public static final BitSet FOLLOW_desc_key_in_search_clause1158 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_nulls_key_in_search_clause1163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_first_key_in_search_clause1165 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_nulls_key_in_search_clause1170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_last_key_in_search_clause1172 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_key_in_search_clause1192 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_search_clause1194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycle_key_in_cycle_clause1214 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_cycle_clause1216 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMMA_in_cycle_clause1220 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_cycle_clause1222 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_key_in_cycle_clause1226 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_cycle_clause1228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_to_key_in_cycle_clause1230 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_cycle_clause1232 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_default_key_in_cycle_clause1234 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_cycle_clause1236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_basic_elements_in_subquery1256 = new BitSet(new long[]{0x0080000000000002L,0x0040000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_subquery_operation_part_in_subquery1258 = new BitSet(new long[]{0x0080000000000002L,0x0040000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_union_key_in_subquery_operation_part1299 = new BitSet(new long[]{0x0000000040000000L,0x0000000000040000L,0x0000000000000040L});
    public static final BitSet FOLLOW_all_key_in_subquery_operation_part1302 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_intersect_key_in_subquery_operation_part1305 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_minus_key_in_subquery_operation_part1308 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_basic_elements_in_subquery_operation_part1312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_block_in_subquery_basic_elements1332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_subquery_basic_elements1343 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_subquery_basic_elements1346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_subquery_basic_elements1348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_key_in_query_block1377 = new BitSet(new long[]{0x00000086504472A0L,0x0C00184B08240401L,0x0000000000805004L});
    public static final BitSet FOLLOW_distinct_key_in_query_block1398 = new BitSet(new long[]{0x00000086504472A0L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unique_key_in_query_block1400 = new BitSet(new long[]{0x00000086504472A0L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_all_key_in_query_block1402 = new BitSet(new long[]{0x00000086504472A0L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_ASTERISK_in_query_block1416 = new BitSet(new long[]{0x0000000000000000L,0x0080800000000400L});
    public static final BitSet FOLLOW_selected_element_in_query_block1421 = new BitSet(new long[]{0x0000000000008000L,0x0080800000000400L});
    public static final BitSet FOLLOW_COMMA_in_query_block1424 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_selected_element_in_query_block1426 = new BitSet(new long[]{0x0000000000008000L,0x0080800000000400L});
    public static final BitSet FOLLOW_into_clause_in_query_block1439 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_from_clause_in_query_block1450 = new BitSet(new long[]{0x2000020000000002L,0x000C000020000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_where_clause_in_query_block1461 = new BitSet(new long[]{0x2000020000000002L,0x000C000020000000L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_query_block1473 = new BitSet(new long[]{0x0000020000000002L,0x000C000000000000L});
    public static final BitSet FOLLOW_group_by_clause_in_query_block1485 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_model_clause_in_query_block1496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_list_elements_in_selected_element1640 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_column_alias_in_selected_element1642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_from_key_in_from_clause1682 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L,0x0000000000000300L});
    public static final BitSet FOLLOW_table_ref_list_in_from_clause1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableview_name_in_select_list_elements1714 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_PERIOD_in_select_list_elements1716 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASTERISK_in_select_list_elements1718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_select_list_elements1744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_ref_in_table_ref_list1772 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_table_ref_list1775 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L,0x0000000000000300L});
    public static final BitSet FOLLOW_table_ref_in_table_ref_list1778 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_table_ref_aux_in_table_ref1804 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_join_clause_in_table_ref1806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_pivot_clause_in_table_ref1810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unpivot_clause_in_table_ref1812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux1877 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux1880 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux1882 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_table_ref_aux1901 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L,0x0000000000000300L});
    public static final BitSet FOLLOW_table_ref_in_table_ref_aux1903 = new BitSet(new long[]{0x0080000000000000L,0x0040000000001000L,0x0000000000002000L});
    public static final BitSet FOLLOW_subquery_operation_part_in_table_ref_aux1905 = new BitSet(new long[]{0x0080000000000000L,0x0040000000001000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_table_ref_aux1908 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux1911 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux1913 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_only_key_in_table_ref_aux1934 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_table_ref_aux1936 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L,0x0000000000000300L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux1938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_table_ref_aux1940 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux1951 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux1954 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux1956 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_flashback_query_clause_in_table_ref_aux1974 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_table_alias_in_table_ref_aux1988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_join_clause2048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_cross_key_in_join_clause2060 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_natural_key_in_join_clause2062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_inner_key_in_join_clause2067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_outer_join_type_in_join_clause2069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_join_key_in_join_clause2073 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L,0x0000000000000300L});
    public static final BitSet FOLLOW_table_ref_aux_in_join_clause2083 = new BitSet(new long[]{0x0000100000000002L,0x2000000000000400L});
    public static final BitSet FOLLOW_query_partition_clause_in_join_clause2093 = new BitSet(new long[]{0x0000100000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_join_on_part_in_join_clause2105 = new BitSet(new long[]{0x0000100000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_join_using_part_in_join_clause2116 = new BitSet(new long[]{0x0000100000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_on_key_in_join_on_part2181 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_join_on_part2183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_key_in_join_using_part2224 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_join_using_part2227 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_join_using_part2230 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_join_using_part2233 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_join_using_part2236 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_join_using_part2240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_key_in_outer_join_type2271 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_left_key_in_outer_join_type2282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_right_key_in_outer_join_type2293 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_outer_key_in_outer_join_type2309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partition_key_in_query_partition_clause2331 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_query_partition_clause2333 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_query_partition_clause2356 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_query_partition_clause2358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_query_partition_clause2360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_query_partition_clause2376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_query_partition_clause2387 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_query_partition_clause2390 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_query_partition_clause2392 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_versions_key_in_flashback_query_clause2444 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_between_key_in_flashback_query_clause2446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_scn_key_in_flashback_query_clause2449 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_timestamp_key_in_flashback_query_clause2451 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_flashback_query_clause2454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_as_key_in_flashback_query_clause2484 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_of_key_in_flashback_query_clause2486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_scn_key_in_flashback_query_clause2489 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_timestamp_key_in_flashback_query_clause2491 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_snapshot_key_in_flashback_query_clause2493 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_flashback_query_clause2496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pivot_key_in_pivot_clause2537 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_xml_key_in_pivot_clause2539 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pivot_clause2550 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_pivot_element_in_pivot_clause2564 = new BitSet(new long[]{0x0000000000008000L,0x0000400000000000L});
    public static final BitSet FOLLOW_COMMA_in_pivot_clause2567 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_pivot_element_in_pivot_clause2569 = new BitSet(new long[]{0x0000000000008000L,0x0000400000000000L});
    public static final BitSet FOLLOW_pivot_for_clause_in_pivot_clause2585 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_pivot_in_clause_in_pivot_clause2599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pivot_clause2611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aggregate_function_name_in_pivot_element2655 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pivot_element2657 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_pivot_element2659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pivot_element2661 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_column_alias_in_pivot_element2663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_pivot_for_clause2725 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_pivot_for_clause2737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pivot_for_clause2748 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_pivot_for_clause2750 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_pivot_for_clause2753 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_pivot_for_clause2755 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pivot_for_clause2759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_key_in_pivot_in_clause2810 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_pivot_in_clause2820 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801044L});
    public static final BitSet FOLLOW_subquery_in_pivot_in_clause2844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_any_key_in_pivot_in_clause2870 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_pivot_in_clause2873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_any_key_in_pivot_in_clause2875 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause2898 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_pivot_in_clause2901 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause2903 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_pivot_in_clause2929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pivot_in_clause_elements_in_pivot_in_clause_element3009 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_column_alias_in_pivot_in_clause_element3011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_pivot_in_clause_elements3051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_pivot_in_clause_elements3075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unpivot_key_in_unpivot_clause3095 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_include_key_in_unpivot_clause3108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_exclude_key_in_unpivot_clause3110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_nulls_key_in_unpivot_clause3113 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unpivot_clause3125 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_unpivot_clause3144 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unpivot_clause3163 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_unpivot_clause3165 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_unpivot_clause3168 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_unpivot_clause3170 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unpivot_clause3174 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_pivot_for_clause_in_unpivot_clause3202 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_unpivot_in_clause_in_unpivot_clause3216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unpivot_clause3226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_key_in_unpivot_in_clause3276 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unpivot_in_clause3286 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_unpivot_in_elements_in_unpivot_in_clause3300 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_unpivot_in_clause3303 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_unpivot_in_elements_in_unpivot_in_clause3305 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unpivot_in_clause3317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_unpivot_in_elements3362 = new BitSet(new long[]{0x0000000440403022L,0x0800100A00400400L,0x0000000000801000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unpivot_in_elements3377 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_unpivot_in_elements3379 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_unpivot_in_elements3382 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_unpivot_in_elements3384 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3388 = new BitSet(new long[]{0x0000000440403022L,0x0800100A00400400L,0x0000000000801000L});
    public static final BitSet FOLLOW_as_key_in_unpivot_in_elements3413 = new BitSet(new long[]{0x0000000440403020L,0x0800100A00000400L,0x0000000000801000L});
    public static final BitSet FOLLOW_constant_in_unpivot_in_elements3429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_unpivot_in_elements3449 = new BitSet(new long[]{0x0000000400403020L,0x0800100A00000400L,0x0000000000801000L});
    public static final BitSet FOLLOW_constant_in_unpivot_in_elements3451 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_unpivot_in_elements3454 = new BitSet(new long[]{0x0000000400403020L,0x0800100A00000400L,0x0000000000801000L});
    public static final BitSet FOLLOW_constant_in_unpivot_in_elements3456 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_unpivot_in_elements3460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_connect_key_in_hierarchical_query_clause3521 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_hierarchical_query_clause3523 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_nocycle_key_in_hierarchical_query_clause3525 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_hierarchical_query_clause3528 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause3530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause3572 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_connect_key_in_hierarchical_query_clause3574 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_hierarchical_query_clause3576 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_nocycle_key_in_hierarchical_query_clause3578 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_hierarchical_query_clause3581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_start_key_in_start_part3630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_with_key_in_start_part3632 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_start_part3634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_key_in_group_by_clause3680 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_group_by_clause3682 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_group_by_elements_in_group_by_clause3684 = new BitSet(new long[]{0x0000000000008002L,0x0008000000000000L});
    public static final BitSet FOLLOW_COMMA_in_group_by_clause3694 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_group_by_elements_in_group_by_clause3696 = new BitSet(new long[]{0x0000000000008002L,0x0008000000000000L});
    public static final BitSet FOLLOW_having_clause_in_group_by_clause3700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_having_clause_in_group_by_clause3743 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_group_key_in_group_by_clause3746 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_group_by_clause3748 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_group_by_elements_in_group_by_clause3750 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_group_by_clause3760 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_group_by_elements_in_group_by_clause3762 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_grouping_sets_clause_in_group_by_elements3810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_group_by_elements3821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_group_by_elements3833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_key_in_rollup_cube_clause3862 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_cube_key_in_rollup_cube_clause3865 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_rollup_cube_clause3869 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_grouping_sets_elements_in_rollup_cube_clause3872 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_rollup_cube_clause3875 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_grouping_sets_elements_in_rollup_cube_clause3878 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_rollup_cube_clause3882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_key_in_grouping_sets_clause3904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_sets_key_in_grouping_sets_clause3906 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_grouping_sets_clause3917 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_grouping_sets_elements_in_grouping_sets_clause3919 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_grouping_sets_clause3922 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_grouping_sets_elements_in_grouping_sets_clause3924 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_grouping_sets_clause3928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_grouping_sets_elements3976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_grouping_sets_elements3992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_grouping_sets_elements4003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_having_key_in_having_clause4031 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_having_clause4033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_key_in_model_clause4073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_cell_reference_options_in_model_clause4075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_return_rows_clause_in_model_clause4078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_reference_model_in_model_clause4081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_main_model_in_model_clause4084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignore_key_in_cell_reference_options4130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_keep_key_in_cell_reference_options4133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_nav_key_in_cell_reference_options4137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unique_key_in_cell_reference_options4148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_dimension_key_in_cell_reference_options4152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_key_in_cell_reference_options4154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_reference_key_in_cell_reference_options4156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_key_in_return_rows_clause4179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040400L});
    public static final BitSet FOLLOW_updated_key_in_return_rows_clause4183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_all_key_in_return_rows_clause4185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_rows_key_in_return_rows_clause4188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_key_in_reference_model4209 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_reference_model_name_in_reference_model4212 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_on_key_in_reference_model4214 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_reference_model4230 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_reference_model4233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_reference_model4235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_model_column_clauses_in_reference_model4238 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_cell_reference_options_in_reference_model4253 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_main_key_in_main_model4275 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_main_model_name_in_main_model4277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_model_column_clauses_in_main_model4281 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_cell_reference_options_in_main_model4283 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L,0x0000000000004000L});
    public static final BitSet FOLLOW_model_rules_clause_in_main_model4286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_column_partition_part_in_model_column_clauses4330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_dimension_key_in_model_column_clauses4341 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_model_column_clauses4343 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_model_column_list_in_model_column_clauses4345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_measures_key_in_model_column_clauses4347 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_model_column_list_in_model_column_clauses4349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_partition_key_in_model_column_partition_part4398 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_model_column_partition_part4401 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_model_column_list_in_model_column_partition_part4404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_model_column_list4424 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_model_column_in_model_column_list4426 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_model_column_list4429 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_model_column_in_model_column_list4431 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_model_column_list4436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_model_column4473 = new BitSet(new long[]{0x0000000410043002L,0x0000000000000400L});
    public static final BitSet FOLLOW_table_alias_in_model_column4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_rules_part_in_model_rules_clause4519 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_model_rules_clause4522 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000809004L});
    public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause4524 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_model_rules_clause4527 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000809004L});
    public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause4529 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_model_rules_clause4533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rules_key_in_model_rules_part4573 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000008000L});
    public static final BitSet FOLLOW_update_key_in_model_rules_part4576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_upsert_key_in_model_rules_part4578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040400L});
    public static final BitSet FOLLOW_all_key_in_model_rules_part4580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_automatic_key_in_model_rules_part4587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_sequential_key_in_model_rules_part4589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_order_key_in_model_rules_part4592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_model_iterate_clause_in_model_rules_part4596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_key_in_model_rules_element4650 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_upsert_key_in_model_rules_element4652 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_all_key_in_model_rules_element4660 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_cell_assignment_in_model_rules_element4674 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_order_by_clause_in_model_rules_element4692 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_model_rules_element4707 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_model_rules_element4709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_expression_in_cell_assignment4768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterate_key_in_model_iterate_clause4788 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_model_iterate_clause4790 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_model_iterate_clause4792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_model_iterate_clause4794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_until_part_in_model_iterate_clause4796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_until_key_in_until_part4839 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_until_part4841 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_until_part4843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_until_part4845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_key_in_order_by_clause4885 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000400L});
    public static final BitSet FOLLOW_siblings_key_in_order_by_clause4887 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_order_by_clause4890 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_order_by_elements_in_order_by_clause4892 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_order_by_clause4895 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_order_by_elements_in_order_by_clause4897 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_expression_in_order_by_elements4943 = new BitSet(new long[]{0x0000000000000002L,0x0000002000800400L});
    public static final BitSet FOLLOW_asc_key_in_order_by_elements4946 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_desc_key_in_order_by_elements4948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_nulls_key_in_order_by_elements4953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_first_key_in_order_by_elements4956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_last_key_in_order_by_elements4958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_for_update_clause5016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_update_key_in_for_update_clause5018 = new BitSet(new long[]{0x0400000000000002L,0x1000000000000400L});
    public static final BitSet FOLLOW_for_update_of_part_in_for_update_clause5020 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_for_update_options_in_for_update_clause5023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_of_key_in_for_update_of_part5064 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_for_update_of_part5067 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_for_update_of_part5070 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_for_update_of_part5073 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_skip_key_in_for_update_options5095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_locked_key_in_for_update_options5097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nowait_key_in_for_update_options5109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wait_key_in_for_update_options5120 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_for_update_options5122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_key_in_update_statement5156 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L,0x0000000000000300L});
    public static final BitSet FOLLOW_general_table_ref_in_update_statement5159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_update_set_clause_in_update_statement5169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000080000L});
    public static final BitSet FOLLOW_where_clause_in_update_statement5179 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_static_returning_clause_in_update_statement5182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_error_logging_clause_in_update_statement5185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_key_in_update_set_clause5215 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_based_update_set_clause_in_update_set_clause5226 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_update_set_clause5229 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_based_update_set_clause_in_update_set_clause5231 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_value_key_in_update_set_clause5246 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_update_set_clause5248 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_id_in_update_set_clause5250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_update_set_clause5252 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_update_set_clause5254 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_update_set_clause5256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_column_based_update_set_clause5326 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_column_based_update_set_clause5328 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_column_based_update_set_clause5330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_column_based_update_set_clause5356 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_column_based_update_set_clause5358 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_column_based_update_set_clause5361 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_column_based_update_set_clause5363 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_column_based_update_set_clause5367 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_column_based_update_set_clause5369 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_column_based_update_set_clause5371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_key_in_delete_statement5405 = new BitSet(new long[]{0x0000000050040000L,0x0000800000000400L,0x0000000000000300L});
    public static final BitSet FOLLOW_from_key_in_delete_statement5408 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L,0x0000000000000300L});
    public static final BitSet FOLLOW_general_table_ref_in_delete_statement5420 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000080000L});
    public static final BitSet FOLLOW_where_clause_in_delete_statement5430 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_static_returning_clause_in_delete_statement5433 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_error_logging_clause_in_delete_statement5436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_key_in_insert_statement5457 = new BitSet(new long[]{0x0000000000000000L,0x0080000000040400L,0x0000000000040000L});
    public static final BitSet FOLLOW_single_table_insert_in_insert_statement5469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_table_insert_in_insert_statement5480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_into_clause_in_single_table_insert5508 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000110040L});
    public static final BitSet FOLLOW_values_clause_in_single_table_insert5519 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_static_returning_clause_in_single_table_insert5521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_select_statement_in_single_table_insert5533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_error_logging_clause_in_single_table_insert5549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_multi_table_insert5608 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_multi_table_element_in_multi_table_insert5610 = new BitSet(new long[]{0x0000000040000000L,0x0080000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_conditional_insert_clause_in_multi_table_insert5622 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_statement_in_multi_table_insert5638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_into_clause_in_multi_table_element5680 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000010000L});
    public static final BitSet FOLLOW_values_clause_in_multi_table_element5682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_error_logging_clause_in_multi_table_element5685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_conditional_insert_clause5729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_first_key_in_conditional_insert_clause5731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_conditional_insert_when_part_in_conditional_insert_clause5743 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_conditional_insert_else_part_in_conditional_insert_clause5746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_conditional_insert_when_part5794 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_conditional_insert_when_part5796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_then_key_in_conditional_insert_when_part5798 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_when_part5800 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_else_key_in_conditional_insert_else_part5844 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_else_part5847 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_into_key_in_insert_into_clause5868 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L,0x0000000000000300L});
    public static final BitSet FOLLOW_general_table_ref_in_insert_into_clause5870 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_insert_into_clause5882 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_insert_into_clause5884 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_insert_into_clause5887 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_insert_into_clause5889 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_insert_into_clause5893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_values_key_in_values_clause5938 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_expression_list_in_values_clause5941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_merge_key_in_merge_statement5962 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_into_key_in_merge_statement5964 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableview_name_in_merge_statement5966 = new BitSet(new long[]{0x0000100410043000L,0x0000000000000400L});
    public static final BitSet FOLLOW_table_alias_in_merge_statement5968 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_using_key_in_merge_statement5979 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_selected_tableview_in_merge_statement5981 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_on_key_in_merge_statement5983 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_merge_statement5985 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_in_merge_statement5987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_merge_statement5989 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_merge_update_clause_in_merge_statement6021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement6023 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement6058 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0000000000040000L});
    public static final BitSet FOLLOW_merge_update_clause_in_merge_statement6060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_error_logging_clause_in_merge_statement6082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_merge_update_clause6162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_matched_key_in_merge_update_clause6164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_then_key_in_merge_update_clause6166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_update_key_in_merge_update_clause6168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_key_in_merge_update_clause6170 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_merge_element_in_merge_update_clause6181 = new BitSet(new long[]{0x0000000000008002L,0x0000001000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_COMMA_in_merge_update_clause6184 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_merge_element_in_merge_update_clause6186 = new BitSet(new long[]{0x0000000000008002L,0x0000001000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_where_clause_in_merge_update_clause6198 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_merge_update_delete_part_in_merge_update_clause6201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_merge_element6244 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_merge_element6246 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_merge_element6248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_key_in_merge_update_delete_part6291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_where_clause_in_merge_update_delete_part6294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_merge_insert_clause6314 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_not_key_in_merge_insert_clause6316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_matched_key_in_merge_insert_clause6318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_then_key_in_merge_insert_clause6320 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_insert_key_in_merge_insert_clause6322 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_merge_insert_clause6334 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_merge_insert_clause6336 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_merge_insert_clause6339 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_merge_insert_clause6341 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_merge_insert_clause6345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_values_key_in_merge_insert_clause6357 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_expression_list_in_merge_insert_clause6359 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_where_clause_in_merge_insert_clause6361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableview_name_in_selected_tableview6411 = new BitSet(new long[]{0x0000000410043002L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_selected_tableview6415 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_statement_in_selected_tableview6417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_selected_tableview6419 = new BitSet(new long[]{0x0000000410043002L,0x0000000000000400L});
    public static final BitSet FOLLOW_table_alias_in_selected_tableview6422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_key_in_lock_table_statement6468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_table_key_in_lock_table_statement6470 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement6481 = new BitSet(new long[]{0x0000000000008000L,0x0010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_lock_table_statement6484 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement6486 = new BitSet(new long[]{0x0000000000008000L,0x0010000000000000L});
    public static final BitSet FOLLOW_in_key_in_lock_table_statement6499 = new BitSet(new long[]{0x1002000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_lock_mode_in_lock_table_statement6501 = new BitSet(new long[]{0x0100000000000000L});
    public static final BitSet FOLLOW_mode_key_in_lock_table_statement6503 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_wait_nowait_part_in_lock_table_statement6505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wait_key_in_wait_nowait_part6548 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_wait_nowait_part6550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nowait_key_in_wait_nowait_part6573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableview_name_in_lock_table_element6595 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_partition_extension_clause_in_lock_table_element6597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_row_key_in_lock_mode6637 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_share_key_in_lock_mode6639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_row_key_in_lock_mode6650 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_exclusive_key_in_lock_mode6652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_share_key_in_lock_mode6663 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_update_key_in_lock_mode6665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_share_key_in_lock_mode6677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_row_key_in_lock_mode6679 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_exclusive_key_in_lock_mode6681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exclusive_key_in_lock_mode6692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref6720 = new BitSet(new long[]{0x0000000410043002L,0x0000000000000400L});
    public static final BitSet FOLLOW_only_key_in_general_table_ref6735 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_general_table_ref6737 = new BitSet(new long[]{0x0000000050040000L,0x0000000000000400L,0x0000000000000300L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref6739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_general_table_ref6741 = new BitSet(new long[]{0x0000000410043002L,0x0000000000000400L});
    public static final BitSet FOLLOW_table_alias_in_general_table_ref6756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_returning_key_in_static_returning_clause6800 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_return_key_in_static_returning_clause6802 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_static_returning_clause6805 = new BitSet(new long[]{0x0000000000008000L,0x0080000000000400L});
    public static final BitSet FOLLOW_COMMA_in_static_returning_clause6808 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_static_returning_clause6810 = new BitSet(new long[]{0x0000000000008000L,0x0080000000000400L});
    public static final BitSet FOLLOW_into_clause_in_static_returning_clause6823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_log_key_in_error_logging_clause6866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_errors_key_in_error_logging_clause6868 = new BitSet(new long[]{0x0000008650447222L,0x0C80184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_error_logging_into_part_in_error_logging_clause6879 = new BitSet(new long[]{0x0000008650447222L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_error_logging_clause6896 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_error_logging_reject_part_in_error_logging_clause6908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_into_key_in_error_logging_into_part6952 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_tableview_name_in_error_logging_into_part6955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reject_key_in_error_logging_reject_part6975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_limit_key_in_error_logging_reject_part6978 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unlimited_key_in_error_logging_reject_part6986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_wrapper_in_error_logging_reject_part6988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_collection_expression_in_dml_table_expression_clause7009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_dml_table_expression_clause7032 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_statement_in_dml_table_expression_clause7034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000100000L});
    public static final BitSet FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause7036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_dml_table_expression_clause7039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableview_name_in_dml_table_expression_clause7065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_sample_clause_in_dml_table_expression_clause7067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_key_in_table_collection_expression7105 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_the_key_in_table_collection_expression7109 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_table_collection_expression7137 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_table_collection_expression7139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_table_collection_expression7141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_table_collection_expression7154 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_table_collection_expression7156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_table_collection_expression7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_subquery_restriction_clause7211 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_read_key_in_subquery_restriction_clause7222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_only_key_in_subquery_restriction_clause7224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_check_key_in_subquery_restriction_clause7235 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_option_key_in_subquery_restriction_clause7237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_constraint_key_in_subquery_restriction_clause7240 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_constraint_name_in_subquery_restriction_clause7242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sample_key_in_sample_clause7293 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_key_in_sample_clause7295 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_sample_clause7307 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_sample_clause7311 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_sample_clause7314 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_sample_clause7318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_sample_clause7322 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_seed_part_in_sample_clause7332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_seed_key_in_seed_part7388 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_seed_part7390 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_seed_part7392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_seed_part7394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_key_in_cursor_expression7437 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cursor_expression7439 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_cursor_expression7441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cursor_expression7443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_expression_list7463 = new BitSet(new long[]{0x000000865044F220L,0x0C00184B08241401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_expression_list7465 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_expression_list7469 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_expression_list7471 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_expression_list7475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_condition7517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_condition_wrapper7537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_expression_in_expression7587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logical_and_expression_in_expression7598 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_or_key_in_expression7602 = new BitSet(new long[]{0x0000008650447220L,0x0C00184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_logical_and_expression_in_expression7605 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_expression_in_expression_wrapper7628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_negated_expression_in_logical_and_expression7664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_and_key_in_logical_and_expression7668 = new BitSet(new long[]{0x0000008650447220L,0x0C00184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_negated_expression_in_logical_and_expression7671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_not_key_in_negated_expression7694 = new BitSet(new long[]{0x0000008650447220L,0x0C00184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_negated_expression_in_negated_expression7697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equality_expression_in_negated_expression7708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiset_expression_in_equality_expression7737 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_is_key_in_equality_expression7753 = new BitSet(new long[]{0x0000000000000000L,0x1C00000000000400L});
    public static final BitSet FOLLOW_not_key_in_equality_expression7756 = new BitSet(new long[]{0x0000000000000000L,0x1800000000000400L});
    public static final BitSet FOLLOW_null_key_in_equality_expression7775 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_nan_key_in_equality_expression7842 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_present_key_in_equality_expression7909 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_infinite_key_in_equality_expression7976 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_a_key_in_equality_expression8043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_key_in_equality_expression8045 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_empty_key_in_equality_expression8112 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_of_key_in_equality_expression8179 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_type_key_in_equality_expression8181 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_equality_expression8184 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_only_key_in_equality_expression8186 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_equality_expression8189 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_equality_expression8192 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_equality_expression8194 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_equality_expression8198 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_relational_expression_in_multiset_expression8295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_multiset_type_in_multiset_expression8311 = new BitSet(new long[]{0x0000008650447220L,0x1800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_of_key_in_multiset_expression8313 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_in_multiset_expression8316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_member_key_in_multiset_type8361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_submultiset_key_in_multiset_type8372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_expression_in_relational_expression8392 = new BitSet(new long[]{0x0000001186A00802L});
    public static final BitSet FOLLOW_EQUALS_OP_in_relational_expression8402 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_not_equal_op_in_relational_expression8407 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_LESS_THAN_OP_in_relational_expression8412 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_GREATER_THAN_OP_in_relational_expression8417 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_less_than_or_equals_op_in_relational_expression8422 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_greater_than_or_equals_op_in_relational_expression8427 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_compound_expression_in_relational_expression8432 = new BitSet(new long[]{0x0000001186A00802L});
    public static final BitSet FOLLOW_concatenation_in_compound_expression8463 = new BitSet(new long[]{0x0000000000000002L,0x0610000002000400L});
    public static final BitSet FOLLOW_not_key_in_compound_expression8480 = new BitSet(new long[]{0x0000000000000000L,0x0210000002000400L});
    public static final BitSet FOLLOW_in_key_in_compound_expression8500 = new BitSet(new long[]{0x0000000450447220L,0x0800100A00000400L,0x0000000000801000L});
    public static final BitSet FOLLOW_in_elements_in_compound_expression8502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_between_key_in_compound_expression8573 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_between_elements_in_compound_expression8575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like_type_in_compound_expression8646 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_in_compound_expression8648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_like_escape_part_in_compound_expression8650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like_key_in_like_type8759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_likec_key_in_like_type8770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like2_key_in_like_type8781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like4_key_in_like_type8792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escape_key_in_like_escape_part8812 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_in_like_escape_part8814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_in_elements8872 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_in_elements8874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_in_elements8876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_in_elements8900 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_in_elements8902 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_in_elements8905 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_in_elements8907 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_in_elements8911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_in_elements8940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind_variable_in_in_elements8968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_element_in_in_elements8996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenation_in_between_elements9035 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_and_key_in_between_elements9037 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_in_between_elements9041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additive_expression_in_concatenation9086 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_concatenation_op_in_concatenation9089 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_additive_expression_in_concatenation9092 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_concatenation_in_concatenation_wrapper9114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiply_expression_in_additive_expression9150 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_PLUS_SIGN_in_additive_expression9156 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_additive_expression9161 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_multiply_expression_in_additive_expression9166 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_datetime_expression_in_multiply_expression9188 = new BitSet(new long[]{0x0000000000000082L,0x0000000000010000L});
    public static final BitSet FOLLOW_ASTERISK_in_multiply_expression9194 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_SOLIDUS_in_multiply_expression9199 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_datetime_expression_in_multiply_expression9204 = new BitSet(new long[]{0x0000000000000082L,0x0000000000010000L});
    public static final BitSet FOLLOW_model_expression_in_datetime_expression9227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_at_key_in_datetime_expression9243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_local_key_in_datetime_expression9246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_time_key_in_datetime_expression9248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_zone_key_in_datetime_expression9250 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_datetime_expression9252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_expression_in_datetime_expression9302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_day_key_in_interval_expression9352 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_interval_expression9358 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_interval_expression9362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_interval_expression9364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_to_key_in_interval_expression9368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_second_key_in_interval_expression9370 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_interval_expression9373 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_interval_expression9377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_interval_expression9379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_year_key_in_interval_expression9416 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_interval_expression9419 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_interval_expression9421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_interval_expression9423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_to_key_in_interval_expression9427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_month_key_in_interval_expression9429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unary_expression_in_model_expression9468 = new BitSet(new long[]{0x0000000020000002L});
    public static final BitSet FOLLOW_LEFT_BRACKET_in_model_expression9484 = new BitSet(new long[]{0x0000008650447220L,0x0C00584B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_model_expression_element_in_model_expression9486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RIGHT_BRACKET_in_model_expression9488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_any_key_in_model_expression_element9540 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_condition_wrapper_in_model_expression_element9542 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_model_expression_element9546 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_any_key_in_model_expression_element9555 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_condition_wrapper_in_model_expression_element9557 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_single_column_for_loop_in_model_expression_element9571 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_model_expression_element9574 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_single_column_for_loop_in_model_expression_element9577 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_multi_column_for_loop_in_model_expression_element9590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_single_column_for_loop9618 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_single_column_for_loop9620 = new BitSet(new long[]{0x0000000000000000L,0x0210800000000000L});
    public static final BitSet FOLLOW_in_key_in_single_column_for_loop9632 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_expression_list_in_single_column_for_loop9634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_like_part_in_single_column_for_loop9647 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_from_key_in_single_column_for_loop9650 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_single_column_for_loop9654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_to_key_in_single_column_for_loop9668 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_single_column_for_loop9672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_for_increment_decrement_type_in_single_column_for_loop9674 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_single_column_for_loop9678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_like_key_in_for_like_part9787 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_for_like_part9789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_key_in_for_increment_decrement_type9829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decrement_key_in_for_increment_decrement_type9840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_key_in_multi_column_for_loop9860 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_multi_column_for_loop9862 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_multi_column_for_loop9864 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_multi_column_for_loop9867 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_column_name_in_multi_column_for_loop9869 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_multi_column_for_loop9873 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_in_key_in_multi_column_for_loop9875 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_multi_column_for_loop9885 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_multi_column_for_loop9909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_multi_column_for_loop9933 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_expression_list_in_multi_column_for_loop9935 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_multi_column_for_loop9938 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_expression_list_in_multi_column_for_loop9940 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_multi_column_for_loop9944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_multi_column_for_loop9968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_unary_expression10025 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_SIGN_in_unary_expression10047 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prior_key_in_unary_expression10069 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_connect_by_root_key_in_unary_expression10083 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_unary_expression10100 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_key_in_unary_expression10114 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_unary_expression10128 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unary_expression_in_unary_expression10131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_unary_expression10144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantified_expression_in_unary_expression10156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standard_function_in_unary_expression10167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_unary_expression10186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_searched_case_statement_in_case_statement10233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_case_statement_in_case_statement10244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_simple_case_statement10266 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_case_key_in_simple_case_statement10271 = new BitSet(new long[]{0x0000000450447220L,0x0800100A00000400L,0x0000000000801000L});
    public static final BitSet FOLLOW_atom_in_simple_case_statement10273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_simple_case_when_part_in_simple_case_statement10283 = new BitSet(new long[]{0x0000000000000000L,0x0000030000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_case_else_part_in_simple_case_statement10295 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_end_key_in_simple_case_statement10306 = new BitSet(new long[]{0x0000000000040002L,0x0000000008000400L});
    public static final BitSet FOLLOW_case_key_in_simple_case_statement10308 = new BitSet(new long[]{0x0000000000040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_label_name_in_simple_case_statement10311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_simple_case_when_part10364 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_simple_case_when_part10369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_then_key_in_simple_case_when_part10371 = new BitSet(new long[]{0x00480086D0447220L,0x0C23785F492C0401L,0x000000000090904CL});
    public static final BitSet FOLLOW_seq_of_statements_in_simple_case_when_part10377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_wrapper_in_simple_case_when_part10383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_searched_case_statement10404 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_case_key_in_searched_case_statement10409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_searched_case_when_part_in_searched_case_statement10419 = new BitSet(new long[]{0x0000000000000000L,0x0000030000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_case_else_part_in_searched_case_statement10430 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_end_key_in_searched_case_statement10441 = new BitSet(new long[]{0x0000000000040002L,0x0000000008000400L});
    public static final BitSet FOLLOW_case_key_in_searched_case_statement10443 = new BitSet(new long[]{0x0000000000040002L,0x0000000000000400L});
    public static final BitSet FOLLOW_label_name_in_searched_case_statement10446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_searched_case_when_part10492 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_condition_wrapper_in_searched_case_when_part10495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_then_key_in_searched_case_when_part10497 = new BitSet(new long[]{0x00480086D0447220L,0x0C23785F492C0401L,0x000000000090904CL});
    public static final BitSet FOLLOW_seq_of_statements_in_searched_case_when_part10503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_wrapper_in_searched_case_when_part10507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_key_in_case_else_part10528 = new BitSet(new long[]{0x00480086D0447220L,0x0C23785F492C0401L,0x000000000090904CL});
    public static final BitSet FOLLOW_seq_of_statements_in_case_else_part10534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_wrapper_in_case_else_part10538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_element_in_atom10577 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_outer_join_sign_in_atom10579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bind_variable_in_atom10590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_atom10601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_element_in_atom10612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_atom10623 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801044L});
    public static final BitSet FOLLOW_subquery_in_atom10661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_atom10663 = new BitSet(new long[]{0x0080000000000002L,0x0040000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_subquery_operation_part_in_atom10666 = new BitSet(new long[]{0x0080000000000002L,0x0040000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_expression_or_vector_in_atom10685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_atom10687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expression_or_vector10727 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_vector_expr_in_expression_or_vector10730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_vector_expr10790 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_vector_expr10792 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_vector_expr10795 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_in_vector_expr10797 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_some_key_in_quantified_expression10838 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_exists_key_in_quantified_expression10843 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_all_key_in_quantified_expression10848 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_any_key_in_quantified_expression10853 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_quantified_expression10881 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_quantified_expression10884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_quantified_expression10886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_quantified_expression10902 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_quantified_expression10905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_quantified_expression10907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_enabling_over_in_standard_function10939 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_function_argument_in_standard_function10942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_over_clause_in_standard_function10944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_enabling_using_in_standard_function10956 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_function_argument_in_standard_function10959 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_using_clause_in_standard_function10961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_count_key_in_standard_function10973 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function10988 = new BitSet(new long[]{0x00000086504472A0L,0x0800184A08240401L,0x0000000000805004L});
    public static final BitSet FOLLOW_ASTERISK_in_standard_function11009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_distinct_key_in_standard_function11014 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unique_key_in_standard_function11016 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_all_key_in_standard_function11018 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11038 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_key_in_standard_function11054 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_xmlcast_key_in_standard_function11057 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11074 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_multiset_key_in_standard_function11110 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11113 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_standard_function11116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_as_key_in_standard_function11176 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_standard_function11179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_chr_key_in_standard_function11205 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11220 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11240 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_using_key_in_standard_function11242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_nchar_cs_key_in_standard_function11245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collect_key_in_standard_function11272 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11287 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000805004L});
    public static final BitSet FOLLOW_distinct_key_in_standard_function11308 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unique_key_in_standard_function11310 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000001L});
    public static final BitSet FOLLOW_collect_order_by_part_in_standard_function11316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_enabling_within_or_over_in_standard_function11343 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_function_argument_in_standard_function11359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_within_or_over_part_in_standard_function11361 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_decompose_key_in_standard_function11373 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11388 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_canonical_key_in_standard_function11411 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_compatibility_key_in_standard_function11413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extract_key_in_standard_function11442 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_REGULAR_ID_in_standard_function11476 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_from_key_in_standard_function11478 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_first_value_key_in_standard_function11509 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_last_value_key_in_standard_function11512 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11529 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_ignore_key_in_standard_function11551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_nulls_key_in_standard_function11554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_first_value_key_in_standard_function11586 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_last_value_key_in_standard_function11589 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_function_argument_analytic_in_standard_function11606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_respect_or_ignore_nulls_in_standard_function11621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stantard_function_pedictions_in_standard_function11635 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11650 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function11669 = new BitSet(new long[]{0x0000100000008000L,0x0000000000001400L});
    public static final BitSet FOLLOW_COMMA_in_standard_function11672 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function11674 = new BitSet(new long[]{0x0000100000008000L,0x0000000000001400L});
    public static final BitSet FOLLOW_cost_matrix_clause_in_standard_function11678 = new BitSet(new long[]{0x0000100000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_using_clause_in_standard_function11681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_translate_key_in_standard_function11709 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11724 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function11744 = new BitSet(new long[]{0x0000100000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_using_key_in_standard_function11747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_char_cs_key_in_standard_function11751 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_nchar_cs_key_in_standard_function11753 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function11780 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function11782 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_treat_key_in_standard_function11811 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11826 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function11845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_as_key_in_standard_function11847 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_ref_key_in_standard_function11850 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_standard_function11853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trim_key_in_standard_function11880 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11895 = new BitSet(new long[]{0x0000008650447220L,0x0800984A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_leading_key_in_standard_function11916 = new BitSet(new long[]{0x0000000400003000L,0x0000800000000000L});
    public static final BitSet FOLLOW_trailing_key_in_standard_function11918 = new BitSet(new long[]{0x0000000400003000L,0x0000800000000000L});
    public static final BitSet FOLLOW_both_key_in_standard_function11920 = new BitSet(new long[]{0x0000000400003000L,0x0000800000000000L});
    public static final BitSet FOLLOW_quoted_string_in_standard_function11924 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_from_key_in_standard_function11927 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function11947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function11961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlagg_key_in_standard_function11973 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function11988 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function12008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000001L});
    public static final BitSet FOLLOW_order_by_clause_in_standard_function12010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12026 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12042 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlcolattval_key_in_standard_function12058 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_xmlforest_key_in_standard_function12061 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12078 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function12097 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function12100 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function12103 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12119 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12135 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlelement_key_in_standard_function12150 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12165 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_entityescaping_key_in_standard_function12185 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_noentityescaping_key_in_standard_function12187 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_name_key_in_standard_function12208 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_evalname_key_in_standard_function12210 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function12214 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function12235 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_xml_attributes_clause_in_standard_function12238 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function12259 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function12262 = new BitSet(new long[]{0x000000041004B000L,0x0000000000401400L});
    public static final BitSet FOLLOW_column_alias_in_standard_function12264 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12281 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12297 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlexists_key_in_standard_function12312 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12327 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_standard_function12346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlparse_key_in_standard_function12391 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_document_key_in_standard_function12427 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_content_key_in_standard_function12429 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_wellformed_key_in_standard_function12434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12449 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12465 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlpi_key_in_standard_function12480 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_name_key_in_standard_function12520 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_id_in_standard_function12522 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_evalname_key_in_standard_function12545 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12547 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function12584 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12603 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12619 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlquery_key_in_standard_function12634 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12649 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_returning_key_in_standard_function12690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_content_key_in_standard_function12693 = new BitSet(new long[]{0x0000000000000000L,0x0800000000001000L});
    public static final BitSet FOLLOW_null_key_in_standard_function12697 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_on_key_in_standard_function12699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_empty_key_in_standard_function12702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12719 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12735 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlroot_key_in_standard_function12750 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12765 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_xmlroot_param_version_part_in_standard_function12806 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function12829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_standard_function12832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function12848 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function12864 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function12866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlserialize_key_in_standard_function12879 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function12894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_document_key_in_standard_function12914 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_content_key_in_standard_function12916 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function12935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000401400L});
    public static final BitSet FOLLOW_as_key_in_standard_function12938 = new BitSet(new long[]{0x0000000000040000L,0x0000000200000400L});
    public static final BitSet FOLLOW_type_spec_in_standard_function12941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_standard_function12961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_xmlserialize_param_version_part_in_standard_function12980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_standard_function12999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_hide_key_in_standard_function13020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_show_key_in_standard_function13022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_defaults_key_in_standard_function13025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function13041 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function13057 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function13059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmltable_key_in_standard_function13072 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_standard_function13087 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_xml_namespaces_clause_in_standard_function13106 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_standard_function13125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_xml_passing_clause_in_standard_function13143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_columns_key_in_standard_function13163 = new BitSet(new long[]{0x0000000410043000L,0x0000000000000400L});
    public static final BitSet FOLLOW_xml_table_column_in_standard_function13166 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_standard_function13169 = new BitSet(new long[]{0x0000000410043000L,0x0000000000000400L});
    public static final BitSet FOLLOW_xml_table_column_in_standard_function13172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_standard_function13189 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_PERIOD_in_standard_function13205 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_general_element_part_in_standard_function13207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_stantard_function_enabling_over13232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_stantard_function_enabling_using13260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_stantard_function_enabling_within_or_over13288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGULAR_ID_in_stantard_function_pedictions13316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_over_key_in_over_clause13341 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_over_clause13352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L,0x0000000000000001L});
    public static final BitSet FOLLOW_query_partition_clause_in_over_clause13367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L,0x0000000000000001L});
    public static final BitSet FOLLOW_order_by_clause_in_over_clause13383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_windowing_clause_in_over_clause13385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_over_clause13398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowing_type_in_windowing_clause13427 = new BitSet(new long[]{0x0000008650447220L,0x0800184A8A240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_between_key_in_windowing_clause13438 = new BitSet(new long[]{0x0000008650447220L,0x0800184A88240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_windowing_elements_in_windowing_clause13440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_and_key_in_windowing_clause13442 = new BitSet(new long[]{0x0000008650447220L,0x0800184A88240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_windowing_elements_in_windowing_clause13444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowing_elements_in_windowing_clause13457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rows_key_in_windowing_type13516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_key_in_windowing_type13527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unbounded_key_in_windowing_elements13547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_preceding_key_in_windowing_elements13550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_current_key_in_windowing_elements13561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_row_key_in_windowing_elements13564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_windowing_elements13575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_preceding_key_in_windowing_elements13578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_following_key_in_windowing_elements13581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_key_in_using_clause13603 = new BitSet(new long[]{0x00000086504472A0L,0x0C10184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_ASTERISK_in_using_clause13615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_using_element_in_using_clause13626 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COMMA_in_using_clause13629 = new BitSet(new long[]{0x0000008650447220L,0x0C10184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_using_element_in_using_clause13632 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_in_key_in_using_element13661 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_out_key_in_using_element13663 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_out_key_in_using_element13666 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_select_list_elements_in_using_element13670 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_column_alias_in_using_element13672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_key_in_collect_order_by_part13718 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_collect_order_by_part13721 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_collect_order_by_part13724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_within_key_in_within_or_over_part13744 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_group_key_in_within_or_over_part13747 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_within_or_over_part13750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_order_by_clause_in_within_or_over_part13753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_within_or_over_part13755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_over_clause_in_within_or_over_part13767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cost_key_in_cost_matrix_clause13787 = new BitSet(new long[]{0x0000020040000000L});
    public static final BitSet FOLLOW_model_key_in_cost_matrix_clause13799 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_auto_key_in_cost_matrix_clause13801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_cost_matrix_clause13813 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause13816 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_cost_matrix_clause13819 = new BitSet(new long[]{0x0000000010040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause13822 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_cost_matrix_clause13826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_values_key_in_cost_matrix_clause13829 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_expression_list_in_cost_matrix_clause13845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_passing_key_in_xml_passing_clause13871 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B0C240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_by_key_in_xml_passing_clause13875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_value_key_in_xml_passing_clause13878 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_xml_passing_clause13894 = new BitSet(new long[]{0x000000041004B000L,0x0000000000400400L});
    public static final BitSet FOLLOW_column_alias_in_xml_passing_clause13896 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_xml_passing_clause13900 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_expression_wrapper_in_xml_passing_clause13903 = new BitSet(new long[]{0x0000000410043002L,0x0000000000400400L});
    public static final BitSet FOLLOW_column_alias_in_xml_passing_clause13905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlattributes_key_in_xml_attributes_clause13927 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_xml_attributes_clause13938 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_entityescaping_key_in_xml_attributes_clause13954 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_noentityescaping_key_in_xml_attributes_clause13956 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_schemacheck_key_in_xml_attributes_clause13973 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_noschemacheck_key_in_xml_attributes_clause13975 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause13991 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMA_in_xml_attributes_clause13994 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause13997 = new BitSet(new long[]{0x0000000000008000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_xml_attributes_clause14009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xmlnamespaces_key_in_xml_namespaces_clause14030 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_xml_namespaces_clause14041 = new BitSet(new long[]{0x000000865044F220L,0x0800184A08241401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14057 = new BitSet(new long[]{0x0000000410043000L,0x0000000000400400L});
    public static final BitSet FOLLOW_column_alias_in_xml_namespaces_clause14059 = new BitSet(new long[]{0x0000000000008000L,0x0000000800001000L});
    public static final BitSet FOLLOW_COMMA_in_xml_namespaces_clause14080 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xml_namespaces_clause14083 = new BitSet(new long[]{0x0000000410043000L,0x0000000000400400L});
    public static final BitSet FOLLOW_column_alias_in_xml_namespaces_clause14085 = new BitSet(new long[]{0x0000000000008000L,0x0000000800001000L});
    public static final BitSet FOLLOW_xml_general_default_part_in_xml_namespaces_clause14107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_RIGHT_PAREN_in_xml_namespaces_clause14119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xml_column_name_in_xml_table_column14140 = new BitSet(new long[]{0x0000000000040000L,0x0000400200000400L});
    public static final BitSet FOLLOW_for_key_in_xml_table_column14151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ordinality_key_in_xml_table_column14153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_in_xml_table_column14164 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000400L});
    public static final BitSet FOLLOW_path_key_in_xml_table_column14167 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xml_table_column14169 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_xml_general_default_part_in_xml_table_column14179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_xml_general_default_part14235 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xml_general_default_part14238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_xml_multiuse_expression_element14266 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_as_key_in_xml_multiuse_expression_element14269 = new BitSet(new long[]{0x0000000000040000L,0x0000000000000400L});
    public static final BitSet FOLLOW_id_expression_in_xml_multiuse_expression_element14272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalname_key_in_xml_multiuse_expression_element14276 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_in_xml_multiuse_expression_element14278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_version_key_in_xmlroot_param_version_part14389 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_no_key_in_xmlroot_param_version_part14393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_value_key_in_xmlroot_param_version_part14395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_wrapper_in_xmlroot_param_version_part14397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standalone_key_in_xmlroot_param_standalone_part14418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_yes_key_in_xmlroot_param_standalone_part14422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_key_in_xmlroot_param_standalone_part14424 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_value_key_in_xmlroot_param_standalone_part14426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_encoding_key_in_xmlserialize_param_enconding_part14448 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xmlserialize_param_enconding_part14451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_version_key_in_xmlserialize_param_version_part14471 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xmlserialize_param_version_part14474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_no_key_in_xmlserialize_param_ident_part14494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_indent_key_in_xmlserialize_param_ident_part14496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_indent_key_in_xmlserialize_param_ident_part14507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_size_key_in_xmlserialize_param_ident_part14511 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_EQUALS_OP_in_xmlserialize_param_ident_part14514 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_concatenation_wrapper_in_xmlserialize_param_ident_part14517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_key_in_synpred1_PLSQL_DMLParser898 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000400L});
    public static final BitSet FOLLOW_siblings_key_in_synpred1_PLSQL_DMLParser900 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_by_key_in_synpred1_PLSQL_DMLParser903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_distinct_key_in_synpred2_PLSQL_DMLParser1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unique_key_in_synpred2_PLSQL_DMLParser1391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_synpred2_PLSQL_DMLParser1393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableview_name_in_synpred3_PLSQL_DMLParser1706 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_PERIOD_in_synpred3_PLSQL_DMLParser1708 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_ASTERISK_in_synpred3_PLSQL_DMLParser1710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred4_PLSQL_DMLParser1866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_key_in_synpred4_PLSQL_DMLParser1869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred4_PLSQL_DMLParser1871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred5_PLSQL_DMLParser1896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_only_key_in_synpred6_PLSQL_DMLParser1927 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred6_PLSQL_DMLParser1929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred7_PLSQL_DMLParser2345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_key_in_synpred7_PLSQL_DMLParser2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred7_PLSQL_DMLParser2350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred8_PLSQL_DMLParser2372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_key_in_synpred9_PLSQL_DMLParser2840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_any_key_in_synpred10_PLSQL_DMLParser2866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred11_PLSQL_DMLParser3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred12_PLSQL_DMLParser3445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_key_in_synpred13_PLSQL_DMLParser3675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred14_PLSQL_DMLParser3688 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_group_by_elements_in_synpred14_PLSQL_DMLParser3690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_having_key_in_synpred15_PLSQL_DMLParser3738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred16_PLSQL_DMLParser3754 = new BitSet(new long[]{0x0000008650447220L,0x0C00184B08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_group_by_elements_in_synpred16_PLSQL_DMLParser3756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_key_in_synpred17_PLSQL_DMLParser3970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cube_key_in_synpred17_PLSQL_DMLParser3972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred18_PLSQL_DMLParser3988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_synpred19_PLSQL_DMLParser4656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_synpred20_PLSQL_DMLParser6014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_matched_key_in_synpred20_PLSQL_DMLParser6016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_when_key_in_synpred21_PLSQL_DMLParser6049 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_not_key_in_synpred21_PLSQL_DMLParser6051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_matched_key_in_synpred21_PLSQL_DMLParser6053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred22_PLSQL_DMLParser6892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unlimited_key_in_synpred23_PLSQL_DMLParser6983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred24_PLSQL_DMLParser7124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_key_in_synpred24_PLSQL_DMLParser7127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred24_PLSQL_DMLParser7131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_key_in_synpred25_PLSQL_DMLParser7574 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred25_PLSQL_DMLParser7576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_key_in_synpred25_PLSQL_DMLParser7579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred25_PLSQL_DMLParser7581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred26_PLSQL_DMLParser8859 = new BitSet(new long[]{0x0000000040000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_key_in_synpred26_PLSQL_DMLParser8863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred26_PLSQL_DMLParser8865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interval_expression_in_synpred27_PLSQL_DMLParser9298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_any_key_in_synpred28_PLSQL_DMLParser9536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_any_key_in_synpred29_PLSQL_DMLParser9551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_key_in_synpred30_PLSQL_DMLParser9905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred31_PLSQL_DMLParser9929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_new_key_in_synpred36_PLSQL_DMLParser10100 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unary_expression_in_synpred36_PLSQL_DMLParser10103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_all_key_in_synpred38_PLSQL_DMLParser10128 = new BitSet(new long[]{0x0000008650447220L,0x0800184A08240401L,0x0000000000801004L});
    public static final BitSet FOLLOW_unary_expression_in_synpred38_PLSQL_DMLParser10131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_synpred39_PLSQL_DMLParser10144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantified_expression_in_synpred40_PLSQL_DMLParser10156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_standard_function_in_synpred41_PLSQL_DMLParser10167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_synpred42_PLSQL_DMLParser10224 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_case_key_in_synpred42_PLSQL_DMLParser10227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_when_key_in_synpred42_PLSQL_DMLParser10229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_element_in_synpred43_PLSQL_DMLParser10570 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred43_PLSQL_DMLParser10572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_synpred45_PLSQL_DMLParser10601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_element_in_synpred46_PLSQL_DMLParser10612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_key_in_synpred47_PLSQL_DMLParser10653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred47_PLSQL_DMLParser10657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred48_PLSQL_DMLParser10870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_key_in_synpred48_PLSQL_DMLParser10873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred48_PLSQL_DMLParser10875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiset_key_in_synpred49_PLSQL_DMLParser11096 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_LEFT_PAREN_in_synpred49_PLSQL_DMLParser11098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100040L});
    public static final BitSet FOLLOW_select_key_in_synpred49_PLSQL_DMLParser11101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_key_in_synpred49_PLSQL_DMLParser11103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_synpred50_PLSQL_DMLParser14103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_key_in_synpred51_PLSQL_DMLParser14175 = new BitSet(new long[]{0x0000000000000002L});

}