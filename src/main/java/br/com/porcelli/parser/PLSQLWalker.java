package br.com.porcelli.parser;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@SuppressWarnings({"all", "warnings", "unchecked"})
public class PLSQLWalker extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ADD_VK", "AFTER_EACH_ROW", "AFTER_STATEMENT", "AFTER_VK", "AGENT_VK", "AGGREGATE_VK", "ALIAS", "ALTER_ATTRIBUTE", "ALTER_COLLECTION", "ALTER_FUNCTION", "ALTER_METHOD", "ALTER_METHOD_ELEMENT", "ALTER_PACKAGE", "ALTER_PROCEDURE", "ALTER_SEQUENCE", "ALTER_TRIGGER", "ALTER_TYPE", "ANALYZE_VK", "ANY_ELEMENT", "ANY_MODE", "APPROXIMATE_NUM_LIT", "ARGUMENT", "ARGUMENTS", "ASSIGN", "ASSOCIATE_VK", "ASTERISK", "ATTRIBUTE", "ATTRIBUTES", "ATTRIBUTE_NAME", "AT_VK", "AUDIT_VK", "AUTHID_VK", "AUTOMATIC_VK", "AUTONOMOUS_TRANSACTION_VK", "AUTO_VK", "BATCH_VK", "BEFORE_EACH_ROW", "BEFORE_STATEMENT", "BEFORE_VK", "BFILE_VK", "BINARY_DOUBLE_VK", "BINARY_FLOAT_VK", "BINARY_INTEGER_VK", "BLOB_VK", "BLOCK", "BLOCK_VK", "BODY", "BODY_MODE", "BODY_VK", "BOOLEAN_VK", "BOTH_VK", "BULK_VK", "BYTE_VK", "CACHE_VK", "CALL_MODE", "CALL_VK", "CANONICAL_VK", "CASCADE_VK", "CASCATED_ELEMENT", "CAST_VK", "CHARACTER_VK", "CHAR_CS_VK", "CHAR_SET_NAME", "CHAR_STRING", "CHAR_VK", "CHR_VK", "CLOB_VK", "CLOSE_VK", "CLUSTER_VK", "COLLECTION_MODE", "COLLECTION_NAME", "COLLECT_VK", "COLUMNS", "COLUMN_NAME", "COMMENT_VK", "COMMITTED_VK", "COMMIT_VK", "COMPATIBILITY_VK", "COMPILATION_UNIT", "COMPILER_PARAMETER", "COMPILE_VK", "COMPOUND_DML", "COMPOUND_VK", "CONCATENATION_OP", "CONDITIONAL_INSERT", "CONSTANT_VK", "CONSTRAINT_NAME", "CONSTRUCTOR_SPEC", "CONSTRUCTOR_VK", "CONTENT_VK", "CONTEXT_VK", "CONTINUE_VK", "CONVERT_VK", "CORRUPT_XID_ALL_VK", "CORRUPT_XID_VK", "COST_CLASS_NAME", "COST_VK", "COUNT_VK", "CREATE_FUNCTION", "CREATE_PACKAGE_BODY", "CREATE_PACKAGE_SPEC", "CREATE_PROCEDURE", "CREATE_SEQUENCE", "CREATE_TRIGGER", "CREATE_TYPE_BODY", "CREATE_TYPE_SPEC", "CROSS_VK", "CUBE_VK", "CURRENT_USER_VK", "CURRENT_VK", "CURSOR_BASED_FOR", "CURSOR_DECLARE", "CURSOR_NAME", "CUSTOMDATUM_VK", "CUSTOM_TYPE", "CYCLE_VK", "C_VK", "DATABASE_VK", "DATETIME_OP", "DATE_VK", "DAY_VK", "DBTIMEZONE_VK", "DB_ROLE_CHANGE_VK", "DDL_VK", "DEBUG_VK", "DECIMAL_VK", "DECOMPOSE_VK", "DECREMENT_VK", "DEC_VK", "DEFAULTS_VK", "DEFAULT_VALUE", "DEFERRED_VK", "DEFINER_VK", "DENSE_RANK_VK", "DEPENDENT_HANDLING", "DETERMINISTIC_VK", "DIMENSION_VK", "DIRECT_MODE", "DISABLE_VK", "DISASSOCIATE_VK", "DML_EVENT", "DML_EVENT_ELEMENT", "DOCUMENT_VK", "DOT_ASTERISK", "DOUBLE_VK", "DROP_FUNCTION", "DROP_PACKAGE", "DROP_PROCEDURE", "DROP_SEQUENCE", "DROP_TRIGGER", "DROP_TYPE", "DSINTERVAL_UNCONSTRAINED_VK", "DYNAMIC_RETURN", "ELEMENT", "ELEMENTS_MODE", "ELEMENT_SPEC", "ENABLE_VK", "ENCODING_VK", "ENTITYESCAPING_VK", "EQUALS_OP", "EVALNAME_VK", "EXACT_NUM_LIT", "EXCEPTIONS_VK", "EXCEPTION_DECLARE", "EXCEPTION_INIT_VK", "EXCEPTION_NAME", "EXCLUDE_VK", "EXECUTE_VK", "EXIT_VK", "EXPR", "EXPR_LIST", "EXTERNAL_VK", "EXTRACT_VK", "FACTORING", "FIELDS", "FIELD_SPEC", "FINAL_VK", "FIRST_VALUE_VK", "FIRST_VK", "FLOAT_VK", "FOLLOWING_VK", "FOLLOWS_VK", "FORALL_VK", "FORCE_VK", "FOR_EACH_ROW", "FOR_LOOP", "FOR_MULTI_COLUMN", "FOR_SINGLE_COLUMN", "FULL_VK", "FUNCTION_ENABLING_OVER", "FUNCTION_ENABLING_USING", "FUNCTION_ENABLING_WITHIN_OR_OVER", "FUNCTION_NAME", "FUNCTION_SPEC", "GREATER_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "GROUPING_VK", "GROUPIN_SET", "GROUP_BY_ELEMENT", "HASH_VK", "HIDE_VK", "HIERARCHICAL", "HOSTED_VARIABLE", "HOSTED_VARIABLE_NAME", "HOSTED_VARIABLE_ROUTINE_CALL", "HOUR_VK", "ID", "IGNORE_VK", "IMMEDIATE_VK", "IMPLEMENTATION_TYPE_NAME", "INCLUDE_VK", "INCLUDING_VK", "INCREMENT_VK", "INDENT_VK", "INDEXED_BY", "INDEXED_FOR", "INDEX_NAME", "INDICES_BOUND", "INLINE_VK", "INNER_VK", "INOUT_VK", "INSTANTIABLE_VK", "INSTEAD_VK", "INTEGER_VK", "INTERVAL_DATATYPE", "INT_VK", "INVALIDATE_VK", "ISOLATION_VK", "IS_A_SET", "IS_EMPTY", "IS_INFINITE", "IS_NAN", "IS_NOT_A_SET", "IS_NOT_EMPTY", "IS_NOT_INFINITE", "IS_NOT_NAN", "IS_NOT_NULL", "IS_NOT_OF_TYPE", "IS_NOT_PRESENT", "IS_NULL", "IS_OF_TYPE", "IS_PRESENT", "ITERATE_VK", "JAVA_VK", "JOIN_DEF", "KEEP_VK", "LABEL_DECLARE", "LABEL_NAME", "LANGUAGE_VK", "LAST_VALUE_VK", "LAST_VK", "LEADING_VK", "LEFT_VK", "LESS_THAN_OP", "LESS_THAN_OR_EQUALS_OP", "LIBRARY_VK", "LIKE2_VK", "LIKE4_VK", "LIKEC_VK", "LIMIT_VK", "LINK_NAME", "LOCAL_VK", "LOCK_TABLE_ELEMENT", "LOGIC_EXPR", "LOGOFF_VK", "LOGON_VK", "LOG_VK", "LONG_VK", "LOOP_VK", "MAIN_MODEL", "MAIN_MODEL_NAME", "MAP_VK", "MAXVALUE_VK", "MEASURES_VK", "MEMBER_VK", "MERGE_INSERT", "MERGE_UPDATE", "MERGE_VK", "MINUS_SIGN", "MINUTE_VK", "MINVALUE_VK", "MLSLABEL_VK", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_EXPRESSION", "MODEL_RULE", "MODEL_RULES", "MODIFIER", "MODIFY_VK", "MONTH_VK", "MULTI_TABLE_MODE", "NAME_VK", "NATIVE_DATATYPE", "NATURALN_VK", "NATURAL_VK", "NAV_VK", "NCHAR_CS_VK", "NCHAR_VK", "NCLOB_VK", "NESTED_TABLE_TYPE_DEF", "NESTED_VK", "NEW_VK", "NOAUDIT_VK", "NOCACHE_VK", "NOCYCLE_VK", "NOENTITYESCAPING_VK", "NOMAXVALUE_VK", "NOMINVALUE_VK", "NON_DML", "NOORDER_VK", "NOSCHEMACHECK_VK", "NOT_BETWEEN", "NOT_EQUAL_OP", "NOT_IN", "NOT_LIKE", "NO_VK", "NULLS_VK", "NUMBER_VK", "NUMERIC_VK", "NVARCHAR2_VK", "OBJECT_AS", "OBJECT_MEMBERS", "OBJECT_TYPE_DEF", "OBJECT_VK", "OFF_VK", "OLD_VK", "ONLY_VK", "OPEN_VK", "ORADATA_VK", "ORDER_BY_ELEMENT", "ORDER_BY_ELEMENTS", "ORDER_VK", "ORDINALITY_VK", "OUT_VK", "OVERRIDING_VK", "OVER_VK", "PACKAGE_NAME", "PACKAGE_VK", "PARALLEL_ENABLE_VK", "PARAMETER", "PARAMETERS", "PARAMETERS_VK", "PARAMETER_NAME", "PARENT_VK", "PARTITION_VK", "PASSING_VK", "PERCENT_ROWTYPE_VK", "PERCENT_TYPE_VK", "PIPELINED_VK", "PIVOT_ALIAS", "PIVOT_ELEMENT", "PIVOT_IN_ELEMENT", "PIVOT_VK", "PLSQL_NON_RESERVED_ELSIF", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_USING", "PLSQL_RESERVED_EXCLUSIVE", "PLSQL_RESERVED_IF", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", "PLSQL_RESERVED_NOWAIT", "PLSQL_RESERVED_SHARE", "PLSQL_RESERVED_START", "PLS_INTEGER_VK", "PLUS_SIGN", "POSITIVEN_VK", "POSITIVE_VK", "PRAGMA_DECLARE", "PRAGMA_VK", "PRECEDING_VK", "PRECISION", "PRECISION_VK", "PREDICTION_FUNCTION", "PROCEDURE_NAME", "PROCEDURE_SPEC", "QUERY_NAME", "RAISE_VK", "RANGE_VK", "RAW_VK", "READ_VK", "REAL_VK", "RECORD_NAME", "RECORD_TYPE_DECLARE", "RECORD_VAR_DECLARE", "REFERENCE_MODEL_NAME", "REFERENCE_VK", "REFERENCING_VK", "REF_VK", "REGULAR_ID", "REJECT_VK", "RELIES_ON_VK", "RENAME_VK", "REPLACE_VK", "RESTRICT_REFERENCES_VK", "RESULT_CACHE_VK", "RETURN_VK", "REUSE_VK", "REVERSE_VK", "RIGHT_VK", "ROLLBACK_SEGMENT_NAME", "ROLLBACK_VK", "ROLLUP_VK", "ROUTINE_CALL", "ROUTINE_NAME", "ROWID_VK", "ROWS_VK", "ROW_VK", "RULES_VK", "SAMPLE_VK", "SAVEPOINT_NAME", "SAVEPOINT_VK", "SCHEMACHECK_VK", "SCHEMA_NAME", "SCHEMA_VK", "SCN_VK", "SEARCHED_CASE", "SECOND_VK", "SEED_VK", "SELECTED_TABLEVIEW", "SELECT_BASED_FOR", "SELECT_ITEM", "SELECT_LIST", "SELECT_MODE", "SELECT_STATEMENT", "SELF_VK", "SEQUENCE_NAME", "SEQUENTIAL_VK", "SERIALIZABLE_VK", "SERIALLY_REUSABLE_VK", "SERVERERROR_VK", "SESSIONTIMEZONE_VK", "SET_CONSTRAINT", "SET_SERVEROUTPUT", "SET_TRANSACTION", "SET_VK", "SHOW_VK", "SHUTDOWN_VK", "SIBLINGS_VK", "SIGNTYPE_VK", "SIMPLE_BOUND", "SIMPLE_CASE", "SIMPLE_DML", "SIMPLE_INTEGER_VK", "SINGLE_TABLE_MODE", "SINGLE_VK", "SKIP_VK", "SMALLINT_VK", "SOLIDUS", "SOME_VK", "SPECIFICATION_VK", "SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BETWEEN", "SQL92_RESERVED_CHECK", "SQL92_RESERVED_CONNECT", "SQL92_RESERVED_CREATE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", "SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", "SQL92_RESERVED_ELSE", "SQL92_RESERVED_EXCEPTION", "SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", "SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", "SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "SQL92_RESERVED_IN", "SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", "SQL92_RESERVED_LIKE", "SQL92_RESERVED_NOT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OR", "SQL92_RESERVED_ORDER", "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_REVOKE", "SQL92_RESERVED_SELECT", "SQL92_RESERVED_TABLE", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", "SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", "SQL92_RESERVED_VALUES", "SQL92_RESERVED_WHEN", "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "SQLDATA_VK", "SQL_SCRIPT", "STANDALONE_VK", "STANDARD_FUNCTION", "STARTUP_VK", "START_VK", "STATEMENTS", "STATIC_RETURNING", "STATIC_VK", "STATISTICS_VK", "STREAMING_CLAUSE", "STRING_VK", "SUBMULTISET_VK", "SUBPARTITION_VK", "SUBQUERY", "SUBTYPE_DECLARE", "SUSPEND_VK", "TABLEVIEW_NAME", "TABLE_ELEMENT", "TABLE_EXPRESSION", "TABLE_REF", "TABLE_REF_ELEMENT", "TABLE_TYPE_DECLARE", "TABLE_VAR_DECLARE", "TABLE_VAR_NAME", "THREE_DOTS", "TIMESTAMP_LTZ_UNCONSTRAINED_VK", "TIMESTAMP_TZ_UNCONSTRAINED_VK", "TIMESTAMP_UNCONSTRAINED_VK", "TIMESTAMP_VK", "TIMEZONE_ABBR_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", "TIMEZONE_REGION_VK", "TIME_VK", "TRAILING_VK", "TRANSLATE_VK", "TREAT_VK", "TRIGGER_NAME", "TRIM_VK", "TRUNCATE_VK", "TYPE_BODY_ELEMENTS", "TYPE_NAME", "TYPE_VK", "UNARY_OPERATOR", "UNBOUNDED_VK", "UNDER_VK", "UNLIMITED_VK", "UNPIVOT_IN_ELEMENT", "UNPIVOT_VK", "UNSIGNED_INTEGER", "UNTIL_VK", "UPDATED_VK", "UPSERT_VK", "UROWID_VK", "USING_MODE", "VALIDATE_VK", "VALUES_BOUND", "VALUE_VK", "VARCHAR2_VK", "VARCHAR_VK", "VARIABLE_DECLARE", "VARIABLE_NAME", "VARR_ARRAY_DEF", "VECTOR_EXPR", "VERSIONS_VK", "VERSION_VK", "WAIT_VK", "WELLFORMED_VK", "WHILE_LOOP", "WITHIN_VK", "WORK_VK", "WRITE_VK", "XMLAGG_VK", "XMLATTRIBUTES_VK", "XMLCAST_VK", "XMLCOLATTVAL_VK", "XMLELEMENT_VK", "XMLEXISTS_VK", "XMLFOREST_VK", "XMLNAMESPACES_VK", "XMLPARSE_VK", "XMLPI_VK", "XMLQUERY_VK", "XMLROOT_VK", "XMLSERIALIZE_VK", "XMLTABLE_VK", "XML_ALIAS", "XML_COLUMN", "XML_COLUMN_NAME", "XML_ELEMENT", "XML_VK", "YEAR_VK", "YES_VK", "YMINTERVAL_UNCONSTRAINED_VK"
    };

    public static final int EOF=-1;
    public static final int ADD_VK=4;
    public static final int AFTER_EACH_ROW=5;
    public static final int AFTER_STATEMENT=6;
    public static final int AFTER_VK=7;
    public static final int AGENT_VK=8;
    public static final int AGGREGATE_VK=9;
    public static final int ALIAS=10;
    public static final int ALTER_ATTRIBUTE=11;
    public static final int ALTER_COLLECTION=12;
    public static final int ALTER_FUNCTION=13;
    public static final int ALTER_METHOD=14;
    public static final int ALTER_METHOD_ELEMENT=15;
    public static final int ALTER_PACKAGE=16;
    public static final int ALTER_PROCEDURE=17;
    public static final int ALTER_SEQUENCE=18;
    public static final int ALTER_TRIGGER=19;
    public static final int ALTER_TYPE=20;
    public static final int ANALYZE_VK=21;
    public static final int ANY_ELEMENT=22;
    public static final int ANY_MODE=23;
    public static final int APPROXIMATE_NUM_LIT=24;
    public static final int ARGUMENT=25;
    public static final int ARGUMENTS=26;
    public static final int ASSIGN=27;
    public static final int ASSOCIATE_VK=28;
    public static final int ASTERISK=29;
    public static final int ATTRIBUTE=30;
    public static final int ATTRIBUTES=31;
    public static final int ATTRIBUTE_NAME=32;
    public static final int AT_VK=33;
    public static final int AUDIT_VK=34;
    public static final int AUTHID_VK=35;
    public static final int AUTOMATIC_VK=36;
    public static final int AUTONOMOUS_TRANSACTION_VK=37;
    public static final int AUTO_VK=38;
    public static final int BATCH_VK=39;
    public static final int BEFORE_EACH_ROW=40;
    public static final int BEFORE_STATEMENT=41;
    public static final int BEFORE_VK=42;
    public static final int BFILE_VK=43;
    public static final int BINARY_DOUBLE_VK=44;
    public static final int BINARY_FLOAT_VK=45;
    public static final int BINARY_INTEGER_VK=46;
    public static final int BLOB_VK=47;
    public static final int BLOCK=48;
    public static final int BLOCK_VK=49;
    public static final int BODY=50;
    public static final int BODY_MODE=51;
    public static final int BODY_VK=52;
    public static final int BOOLEAN_VK=53;
    public static final int BOTH_VK=54;
    public static final int BULK_VK=55;
    public static final int BYTE_VK=56;
    public static final int CACHE_VK=57;
    public static final int CALL_MODE=58;
    public static final int CALL_VK=59;
    public static final int CANONICAL_VK=60;
    public static final int CASCADE_VK=61;
    public static final int CASCATED_ELEMENT=62;
    public static final int CAST_VK=63;
    public static final int CHARACTER_VK=64;
    public static final int CHAR_CS_VK=65;
    public static final int CHAR_SET_NAME=66;
    public static final int CHAR_STRING=67;
    public static final int CHAR_VK=68;
    public static final int CHR_VK=69;
    public static final int CLOB_VK=70;
    public static final int CLOSE_VK=71;
    public static final int CLUSTER_VK=72;
    public static final int COLLECTION_MODE=73;
    public static final int COLLECTION_NAME=74;
    public static final int COLLECT_VK=75;
    public static final int COLUMNS=76;
    public static final int COLUMN_NAME=77;
    public static final int COMMENT_VK=78;
    public static final int COMMITTED_VK=79;
    public static final int COMMIT_VK=80;
    public static final int COMPATIBILITY_VK=81;
    public static final int COMPILATION_UNIT=82;
    public static final int COMPILER_PARAMETER=83;
    public static final int COMPILE_VK=84;
    public static final int COMPOUND_DML=85;
    public static final int COMPOUND_VK=86;
    public static final int CONCATENATION_OP=87;
    public static final int CONDITIONAL_INSERT=88;
    public static final int CONSTANT_VK=89;
    public static final int CONSTRAINT_NAME=90;
    public static final int CONSTRUCTOR_SPEC=91;
    public static final int CONSTRUCTOR_VK=92;
    public static final int CONTENT_VK=93;
    public static final int CONTEXT_VK=94;
    public static final int CONTINUE_VK=95;
    public static final int CONVERT_VK=96;
    public static final int CORRUPT_XID_ALL_VK=97;
    public static final int CORRUPT_XID_VK=98;
    public static final int COST_CLASS_NAME=99;
    public static final int COST_VK=100;
    public static final int COUNT_VK=101;
    public static final int CREATE_FUNCTION=102;
    public static final int CREATE_PACKAGE_BODY=103;
    public static final int CREATE_PACKAGE_SPEC=104;
    public static final int CREATE_PROCEDURE=105;
    public static final int CREATE_SEQUENCE=106;
    public static final int CREATE_TRIGGER=107;
    public static final int CREATE_TYPE_BODY=108;
    public static final int CREATE_TYPE_SPEC=109;
    public static final int CROSS_VK=110;
    public static final int CUBE_VK=111;
    public static final int CURRENT_USER_VK=112;
    public static final int CURRENT_VK=113;
    public static final int CURSOR_BASED_FOR=114;
    public static final int CURSOR_DECLARE=115;
    public static final int CURSOR_NAME=116;
    public static final int CUSTOMDATUM_VK=117;
    public static final int CUSTOM_TYPE=118;
    public static final int CYCLE_VK=119;
    public static final int C_VK=120;
    public static final int DATABASE_VK=121;
    public static final int DATETIME_OP=122;
    public static final int DATE_VK=123;
    public static final int DAY_VK=124;
    public static final int DBTIMEZONE_VK=125;
    public static final int DB_ROLE_CHANGE_VK=126;
    public static final int DDL_VK=127;
    public static final int DEBUG_VK=128;
    public static final int DECIMAL_VK=129;
    public static final int DECOMPOSE_VK=130;
    public static final int DECREMENT_VK=131;
    public static final int DEC_VK=132;
    public static final int DEFAULTS_VK=133;
    public static final int DEFAULT_VALUE=134;
    public static final int DEFERRED_VK=135;
    public static final int DEFINER_VK=136;
    public static final int DENSE_RANK_VK=137;
    public static final int DEPENDENT_HANDLING=138;
    public static final int DETERMINISTIC_VK=139;
    public static final int DIMENSION_VK=140;
    public static final int DIRECT_MODE=141;
    public static final int DISABLE_VK=142;
    public static final int DISASSOCIATE_VK=143;
    public static final int DML_EVENT=144;
    public static final int DML_EVENT_ELEMENT=145;
    public static final int DOCUMENT_VK=146;
    public static final int DOT_ASTERISK=147;
    public static final int DOUBLE_VK=148;
    public static final int DROP_FUNCTION=149;
    public static final int DROP_PACKAGE=150;
    public static final int DROP_PROCEDURE=151;
    public static final int DROP_SEQUENCE=152;
    public static final int DROP_TRIGGER=153;
    public static final int DROP_TYPE=154;
    public static final int DSINTERVAL_UNCONSTRAINED_VK=155;
    public static final int DYNAMIC_RETURN=156;
    public static final int ELEMENT=157;
    public static final int ELEMENTS_MODE=158;
    public static final int ELEMENT_SPEC=159;
    public static final int ENABLE_VK=160;
    public static final int ENCODING_VK=161;
    public static final int ENTITYESCAPING_VK=162;
    public static final int EQUALS_OP=163;
    public static final int EVALNAME_VK=164;
    public static final int EXACT_NUM_LIT=165;
    public static final int EXCEPTIONS_VK=166;
    public static final int EXCEPTION_DECLARE=167;
    public static final int EXCEPTION_INIT_VK=168;
    public static final int EXCEPTION_NAME=169;
    public static final int EXCLUDE_VK=170;
    public static final int EXECUTE_VK=171;
    public static final int EXIT_VK=172;
    public static final int EXPR=173;
    public static final int EXPR_LIST=174;
    public static final int EXTERNAL_VK=175;
    public static final int EXTRACT_VK=176;
    public static final int FACTORING=177;
    public static final int FIELDS=178;
    public static final int FIELD_SPEC=179;
    public static final int FINAL_VK=180;
    public static final int FIRST_VALUE_VK=181;
    public static final int FIRST_VK=182;
    public static final int FLOAT_VK=183;
    public static final int FOLLOWING_VK=184;
    public static final int FOLLOWS_VK=185;
    public static final int FORALL_VK=186;
    public static final int FORCE_VK=187;
    public static final int FOR_EACH_ROW=188;
    public static final int FOR_LOOP=189;
    public static final int FOR_MULTI_COLUMN=190;
    public static final int FOR_SINGLE_COLUMN=191;
    public static final int FULL_VK=192;
    public static final int FUNCTION_ENABLING_OVER=193;
    public static final int FUNCTION_ENABLING_USING=194;
    public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=195;
    public static final int FUNCTION_NAME=196;
    public static final int FUNCTION_SPEC=197;
    public static final int GREATER_THAN_OP=198;
    public static final int GREATER_THAN_OR_EQUALS_OP=199;
    public static final int GROUPING_VK=200;
    public static final int GROUPIN_SET=201;
    public static final int GROUP_BY_ELEMENT=202;
    public static final int HASH_VK=203;
    public static final int HIDE_VK=204;
    public static final int HIERARCHICAL=205;
    public static final int HOSTED_VARIABLE=206;
    public static final int HOSTED_VARIABLE_NAME=207;
    public static final int HOSTED_VARIABLE_ROUTINE_CALL=208;
    public static final int HOUR_VK=209;
    public static final int ID=210;
    public static final int IGNORE_VK=211;
    public static final int IMMEDIATE_VK=212;
    public static final int IMPLEMENTATION_TYPE_NAME=213;
    public static final int INCLUDE_VK=214;
    public static final int INCLUDING_VK=215;
    public static final int INCREMENT_VK=216;
    public static final int INDENT_VK=217;
    public static final int INDEXED_BY=218;
    public static final int INDEXED_FOR=219;
    public static final int INDEX_NAME=220;
    public static final int INDICES_BOUND=221;
    public static final int INLINE_VK=222;
    public static final int INNER_VK=223;
    public static final int INOUT_VK=224;
    public static final int INSTANTIABLE_VK=225;
    public static final int INSTEAD_VK=226;
    public static final int INTEGER_VK=227;
    public static final int INTERVAL_DATATYPE=228;
    public static final int INT_VK=229;
    public static final int INVALIDATE_VK=230;
    public static final int ISOLATION_VK=231;
    public static final int IS_A_SET=232;
    public static final int IS_EMPTY=233;
    public static final int IS_INFINITE=234;
    public static final int IS_NAN=235;
    public static final int IS_NOT_A_SET=236;
    public static final int IS_NOT_EMPTY=237;
    public static final int IS_NOT_INFINITE=238;
    public static final int IS_NOT_NAN=239;
    public static final int IS_NOT_NULL=240;
    public static final int IS_NOT_OF_TYPE=241;
    public static final int IS_NOT_PRESENT=242;
    public static final int IS_NULL=243;
    public static final int IS_OF_TYPE=244;
    public static final int IS_PRESENT=245;
    public static final int ITERATE_VK=246;
    public static final int JAVA_VK=247;
    public static final int JOIN_DEF=248;
    public static final int KEEP_VK=249;
    public static final int LABEL_DECLARE=250;
    public static final int LABEL_NAME=251;
    public static final int LANGUAGE_VK=252;
    public static final int LAST_VALUE_VK=253;
    public static final int LAST_VK=254;
    public static final int LEADING_VK=255;
    public static final int LEFT_VK=256;
    public static final int LESS_THAN_OP=257;
    public static final int LESS_THAN_OR_EQUALS_OP=258;
    public static final int LIBRARY_VK=259;
    public static final int LIKE2_VK=260;
    public static final int LIKE4_VK=261;
    public static final int LIKEC_VK=262;
    public static final int LIMIT_VK=263;
    public static final int LINK_NAME=264;
    public static final int LOCAL_VK=265;
    public static final int LOCK_TABLE_ELEMENT=266;
    public static final int LOGIC_EXPR=267;
    public static final int LOGOFF_VK=268;
    public static final int LOGON_VK=269;
    public static final int LOG_VK=270;
    public static final int LONG_VK=271;
    public static final int LOOP_VK=272;
    public static final int MAIN_MODEL=273;
    public static final int MAIN_MODEL_NAME=274;
    public static final int MAP_VK=275;
    public static final int MAXVALUE_VK=276;
    public static final int MEASURES_VK=277;
    public static final int MEMBER_VK=278;
    public static final int MERGE_INSERT=279;
    public static final int MERGE_UPDATE=280;
    public static final int MERGE_VK=281;
    public static final int MINUS_SIGN=282;
    public static final int MINUTE_VK=283;
    public static final int MINVALUE_VK=284;
    public static final int MLSLABEL_VK=285;
    public static final int MODEL_COLUMN=286;
    public static final int MODEL_COLUMNS=287;
    public static final int MODEL_EXPRESSION=288;
    public static final int MODEL_RULE=289;
    public static final int MODEL_RULES=290;
    public static final int MODIFIER=291;
    public static final int MODIFY_VK=292;
    public static final int MONTH_VK=293;
    public static final int MULTI_TABLE_MODE=294;
    public static final int NAME_VK=295;
    public static final int NATIVE_DATATYPE=296;
    public static final int NATURALN_VK=297;
    public static final int NATURAL_VK=298;
    public static final int NAV_VK=299;
    public static final int NCHAR_CS_VK=300;
    public static final int NCHAR_VK=301;
    public static final int NCLOB_VK=302;
    public static final int NESTED_TABLE_TYPE_DEF=303;
    public static final int NESTED_VK=304;
    public static final int NEW_VK=305;
    public static final int NOAUDIT_VK=306;
    public static final int NOCACHE_VK=307;
    public static final int NOCYCLE_VK=308;
    public static final int NOENTITYESCAPING_VK=309;
    public static final int NOMAXVALUE_VK=310;
    public static final int NOMINVALUE_VK=311;
    public static final int NON_DML=312;
    public static final int NOORDER_VK=313;
    public static final int NOSCHEMACHECK_VK=314;
    public static final int NOT_BETWEEN=315;
    public static final int NOT_EQUAL_OP=316;
    public static final int NOT_IN=317;
    public static final int NOT_LIKE=318;
    public static final int NO_VK=319;
    public static final int NULLS_VK=320;
    public static final int NUMBER_VK=321;
    public static final int NUMERIC_VK=322;
    public static final int NVARCHAR2_VK=323;
    public static final int OBJECT_AS=324;
    public static final int OBJECT_MEMBERS=325;
    public static final int OBJECT_TYPE_DEF=326;
    public static final int OBJECT_VK=327;
    public static final int OFF_VK=328;
    public static final int OLD_VK=329;
    public static final int ONLY_VK=330;
    public static final int OPEN_VK=331;
    public static final int ORADATA_VK=332;
    public static final int ORDER_BY_ELEMENT=333;
    public static final int ORDER_BY_ELEMENTS=334;
    public static final int ORDER_VK=335;
    public static final int ORDINALITY_VK=336;
    public static final int OUT_VK=337;
    public static final int OVERRIDING_VK=338;
    public static final int OVER_VK=339;
    public static final int PACKAGE_NAME=340;
    public static final int PACKAGE_VK=341;
    public static final int PARALLEL_ENABLE_VK=342;
    public static final int PARAMETER=343;
    public static final int PARAMETERS=344;
    public static final int PARAMETERS_VK=345;
    public static final int PARAMETER_NAME=346;
    public static final int PARENT_VK=347;
    public static final int PARTITION_VK=348;
    public static final int PASSING_VK=349;
    public static final int PERCENT_ROWTYPE_VK=350;
    public static final int PERCENT_TYPE_VK=351;
    public static final int PIPELINED_VK=352;
    public static final int PIVOT_ALIAS=353;
    public static final int PIVOT_ELEMENT=354;
    public static final int PIVOT_IN_ELEMENT=355;
    public static final int PIVOT_VK=356;
    public static final int PLSQL_NON_RESERVED_ELSIF=357;
    public static final int PLSQL_NON_RESERVED_MODEL=358;
    public static final int PLSQL_NON_RESERVED_USING=359;
    public static final int PLSQL_RESERVED_EXCLUSIVE=360;
    public static final int PLSQL_RESERVED_IF=361;
    public static final int PLSQL_RESERVED_LOCK=362;
    public static final int PLSQL_RESERVED_MINUS=363;
    public static final int PLSQL_RESERVED_NOWAIT=364;
    public static final int PLSQL_RESERVED_SHARE=365;
    public static final int PLSQL_RESERVED_START=366;
    public static final int PLS_INTEGER_VK=367;
    public static final int PLUS_SIGN=368;
    public static final int POSITIVEN_VK=369;
    public static final int POSITIVE_VK=370;
    public static final int PRAGMA_DECLARE=371;
    public static final int PRAGMA_VK=372;
    public static final int PRECEDING_VK=373;
    public static final int PRECISION=374;
    public static final int PRECISION_VK=375;
    public static final int PREDICTION_FUNCTION=376;
    public static final int PROCEDURE_NAME=377;
    public static final int PROCEDURE_SPEC=378;
    public static final int QUERY_NAME=379;
    public static final int RAISE_VK=380;
    public static final int RANGE_VK=381;
    public static final int RAW_VK=382;
    public static final int READ_VK=383;
    public static final int REAL_VK=384;
    public static final int RECORD_NAME=385;
    public static final int RECORD_TYPE_DECLARE=386;
    public static final int RECORD_VAR_DECLARE=387;
    public static final int REFERENCE_MODEL_NAME=388;
    public static final int REFERENCE_VK=389;
    public static final int REFERENCING_VK=390;
    public static final int REF_VK=391;
    public static final int REGULAR_ID=392;
    public static final int REJECT_VK=393;
    public static final int RELIES_ON_VK=394;
    public static final int RENAME_VK=395;
    public static final int REPLACE_VK=396;
    public static final int RESTRICT_REFERENCES_VK=397;
    public static final int RESULT_CACHE_VK=398;
    public static final int RETURN_VK=399;
    public static final int REUSE_VK=400;
    public static final int REVERSE_VK=401;
    public static final int RIGHT_VK=402;
    public static final int ROLLBACK_SEGMENT_NAME=403;
    public static final int ROLLBACK_VK=404;
    public static final int ROLLUP_VK=405;
    public static final int ROUTINE_CALL=406;
    public static final int ROUTINE_NAME=407;
    public static final int ROWID_VK=408;
    public static final int ROWS_VK=409;
    public static final int ROW_VK=410;
    public static final int RULES_VK=411;
    public static final int SAMPLE_VK=412;
    public static final int SAVEPOINT_NAME=413;
    public static final int SAVEPOINT_VK=414;
    public static final int SCHEMACHECK_VK=415;
    public static final int SCHEMA_NAME=416;
    public static final int SCHEMA_VK=417;
    public static final int SCN_VK=418;
    public static final int SEARCHED_CASE=419;
    public static final int SECOND_VK=420;
    public static final int SEED_VK=421;
    public static final int SELECTED_TABLEVIEW=422;
    public static final int SELECT_BASED_FOR=423;
    public static final int SELECT_ITEM=424;
    public static final int SELECT_LIST=425;
    public static final int SELECT_MODE=426;
    public static final int SELECT_STATEMENT=427;
    public static final int SELF_VK=428;
    public static final int SEQUENCE_NAME=429;
    public static final int SEQUENTIAL_VK=430;
    public static final int SERIALIZABLE_VK=431;
    public static final int SERIALLY_REUSABLE_VK=432;
    public static final int SERVERERROR_VK=433;
    public static final int SESSIONTIMEZONE_VK=434;
    public static final int SET_CONSTRAINT=435;
    public static final int SET_SERVEROUTPUT=436;
    public static final int SET_TRANSACTION=437;
    public static final int SET_VK=438;
    public static final int SHOW_VK=439;
    public static final int SHUTDOWN_VK=440;
    public static final int SIBLINGS_VK=441;
    public static final int SIGNTYPE_VK=442;
    public static final int SIMPLE_BOUND=443;
    public static final int SIMPLE_CASE=444;
    public static final int SIMPLE_DML=445;
    public static final int SIMPLE_INTEGER_VK=446;
    public static final int SINGLE_TABLE_MODE=447;
    public static final int SINGLE_VK=448;
    public static final int SKIP_VK=449;
    public static final int SMALLINT_VK=450;
    public static final int SOLIDUS=451;
    public static final int SOME_VK=452;
    public static final int SPECIFICATION_VK=453;
    public static final int SQL92_RESERVED_ALL=454;
    public static final int SQL92_RESERVED_ALTER=455;
    public static final int SQL92_RESERVED_AND=456;
    public static final int SQL92_RESERVED_ANY=457;
    public static final int SQL92_RESERVED_AS=458;
    public static final int SQL92_RESERVED_ASC=459;
    public static final int SQL92_RESERVED_BETWEEN=460;
    public static final int SQL92_RESERVED_CHECK=461;
    public static final int SQL92_RESERVED_CONNECT=462;
    public static final int SQL92_RESERVED_CREATE=463;
    public static final int SQL92_RESERVED_DEFAULT=464;
    public static final int SQL92_RESERVED_DELETE=465;
    public static final int SQL92_RESERVED_DESC=466;
    public static final int SQL92_RESERVED_DISTINCT=467;
    public static final int SQL92_RESERVED_DROP=468;
    public static final int SQL92_RESERVED_ELSE=469;
    public static final int SQL92_RESERVED_EXCEPTION=470;
    public static final int SQL92_RESERVED_EXISTS=471;
    public static final int SQL92_RESERVED_FALSE=472;
    public static final int SQL92_RESERVED_FETCH=473;
    public static final int SQL92_RESERVED_FOR=474;
    public static final int SQL92_RESERVED_FROM=475;
    public static final int SQL92_RESERVED_GOTO=476;
    public static final int SQL92_RESERVED_GRANT=477;
    public static final int SQL92_RESERVED_GROUP=478;
    public static final int SQL92_RESERVED_HAVING=479;
    public static final int SQL92_RESERVED_IN=480;
    public static final int SQL92_RESERVED_INSERT=481;
    public static final int SQL92_RESERVED_INTERSECT=482;
    public static final int SQL92_RESERVED_INTO=483;
    public static final int SQL92_RESERVED_LIKE=484;
    public static final int SQL92_RESERVED_NOT=485;
    public static final int SQL92_RESERVED_NULL=486;
    public static final int SQL92_RESERVED_OF=487;
    public static final int SQL92_RESERVED_ON=488;
    public static final int SQL92_RESERVED_OR=489;
    public static final int SQL92_RESERVED_ORDER=490;
    public static final int SQL92_RESERVED_PRIOR=491;
    public static final int SQL92_RESERVED_REVOKE=492;
    public static final int SQL92_RESERVED_SELECT=493;
    public static final int SQL92_RESERVED_TABLE=494;
    public static final int SQL92_RESERVED_TO=495;
    public static final int SQL92_RESERVED_TRUE=496;
    public static final int SQL92_RESERVED_UNION=497;
    public static final int SQL92_RESERVED_UNIQUE=498;
    public static final int SQL92_RESERVED_UPDATE=499;
    public static final int SQL92_RESERVED_VALUES=500;
    public static final int SQL92_RESERVED_WHEN=501;
    public static final int SQL92_RESERVED_WHERE=502;
    public static final int SQL92_RESERVED_WITH=503;
    public static final int SQLDATA_VK=504;
    public static final int SQL_SCRIPT=505;
    public static final int STANDALONE_VK=506;
    public static final int STANDARD_FUNCTION=507;
    public static final int STARTUP_VK=508;
    public static final int START_VK=509;
    public static final int STATEMENTS=510;
    public static final int STATIC_RETURNING=511;
    public static final int STATIC_VK=512;
    public static final int STATISTICS_VK=513;
    public static final int STREAMING_CLAUSE=514;
    public static final int STRING_VK=515;
    public static final int SUBMULTISET_VK=516;
    public static final int SUBPARTITION_VK=517;
    public static final int SUBQUERY=518;
    public static final int SUBTYPE_DECLARE=519;
    public static final int SUSPEND_VK=520;
    public static final int TABLEVIEW_NAME=521;
    public static final int TABLE_ELEMENT=522;
    public static final int TABLE_EXPRESSION=523;
    public static final int TABLE_REF=524;
    public static final int TABLE_REF_ELEMENT=525;
    public static final int TABLE_TYPE_DECLARE=526;
    public static final int TABLE_VAR_DECLARE=527;
    public static final int TABLE_VAR_NAME=528;
    public static final int THREE_DOTS=529;
    public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=530;
    public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=531;
    public static final int TIMESTAMP_UNCONSTRAINED_VK=532;
    public static final int TIMESTAMP_VK=533;
    public static final int TIMEZONE_ABBR_VK=534;
    public static final int TIMEZONE_HOUR_VK=535;
    public static final int TIMEZONE_MINUTE_VK=536;
    public static final int TIMEZONE_REGION_VK=537;
    public static final int TIME_VK=538;
    public static final int TRAILING_VK=539;
    public static final int TRANSLATE_VK=540;
    public static final int TREAT_VK=541;
    public static final int TRIGGER_NAME=542;
    public static final int TRIM_VK=543;
    public static final int TRUNCATE_VK=544;
    public static final int TYPE_BODY_ELEMENTS=545;
    public static final int TYPE_NAME=546;
    public static final int TYPE_VK=547;
    public static final int UNARY_OPERATOR=548;
    public static final int UNBOUNDED_VK=549;
    public static final int UNDER_VK=550;
    public static final int UNLIMITED_VK=551;
    public static final int UNPIVOT_IN_ELEMENT=552;
    public static final int UNPIVOT_VK=553;
    public static final int UNSIGNED_INTEGER=554;
    public static final int UNTIL_VK=555;
    public static final int UPDATED_VK=556;
    public static final int UPSERT_VK=557;
    public static final int UROWID_VK=558;
    public static final int USING_MODE=559;
    public static final int VALIDATE_VK=560;
    public static final int VALUES_BOUND=561;
    public static final int VALUE_VK=562;
    public static final int VARCHAR2_VK=563;
    public static final int VARCHAR_VK=564;
    public static final int VARIABLE_DECLARE=565;
    public static final int VARIABLE_NAME=566;
    public static final int VARR_ARRAY_DEF=567;
    public static final int VECTOR_EXPR=568;
    public static final int VERSIONS_VK=569;
    public static final int VERSION_VK=570;
    public static final int WAIT_VK=571;
    public static final int WELLFORMED_VK=572;
    public static final int WHILE_LOOP=573;
    public static final int WITHIN_VK=574;
    public static final int WORK_VK=575;
    public static final int WRITE_VK=576;
    public static final int XMLAGG_VK=577;
    public static final int XMLATTRIBUTES_VK=578;
    public static final int XMLCAST_VK=579;
    public static final int XMLCOLATTVAL_VK=580;
    public static final int XMLELEMENT_VK=581;
    public static final int XMLEXISTS_VK=582;
    public static final int XMLFOREST_VK=583;
    public static final int XMLNAMESPACES_VK=584;
    public static final int XMLPARSE_VK=585;
    public static final int XMLPI_VK=586;
    public static final int XMLQUERY_VK=587;
    public static final int XMLROOT_VK=588;
    public static final int XMLSERIALIZE_VK=589;
    public static final int XMLTABLE_VK=590;
    public static final int XML_ALIAS=591;
    public static final int XML_COLUMN=592;
    public static final int XML_COLUMN_NAME=593;
    public static final int XML_ELEMENT=594;
    public static final int XML_VK=595;
    public static final int YEAR_VK=596;
    public static final int YES_VK=597;
    public static final int YMINTERVAL_UNCONSTRAINED_VK=598;

    // delegates
    public TreeParser[] getDelegates() {
        return new TreeParser[] {};
    }

    // delegators


    public PLSQLWalker(TreeNodeStream input) {
        this(input, new RecognizerSharedState());
    }
    public PLSQLWalker(TreeNodeStream input, RecognizerSharedState state) {
        super(input, state);
    }

    public String[] getTokenNames() { return PLSQLWalker.tokenNames; }
    public String getGrammarFileName() { return "PLSQLWalker.g"; }



    // $ANTLR start "compilation_unit"
    // PLSQLWalker.g:46:1: compilation_unit : ^( COMPILATION_UNIT ( unit_statement )* ) ;
    public final void compilation_unit() throws RecognitionException {
        try {
            // PLSQLWalker.g:47:5: ( ^( COMPILATION_UNIT ( unit_statement )* ) )
            // PLSQLWalker.g:47:10: ^( COMPILATION_UNIT ( unit_statement )* )
            {
            match(input,COMPILATION_UNIT,FOLLOW_COMPILATION_UNIT_in_compilation_unit51); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:47:29: ( unit_statement )*
                loop1:
                do {
                    int alt1=2;
                    int LA1_0 = input.LA(1);

                    if ( (LA1_0==ALTER_FUNCTION||(LA1_0 >= ALTER_PACKAGE && LA1_0 <= ALTER_TYPE)||(LA1_0 >= CREATE_FUNCTION && LA1_0 <= CREATE_TYPE_SPEC)||(LA1_0 >= DROP_FUNCTION && LA1_0 <= DROP_TYPE)) ) {
                        alt1=1;
                    }


                    switch (alt1) {
                	case 1 :
                	    // PLSQLWalker.g:47:29: unit_statement
                	    {
                	    pushFollow(FOLLOW_unit_statement_in_compilation_unit53);
                	    unit_statement();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop1;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "compilation_unit"



    // $ANTLR start "sql_script"
    // PLSQLWalker.g:50:1: sql_script : ^( SQL_SCRIPT ( serveroutput_declaration )? seq_of_statements ) ;
    public final void sql_script() throws RecognitionException {
        try {
            // PLSQLWalker.g:51:5: ( ^( SQL_SCRIPT ( serveroutput_declaration )? seq_of_statements ) )
            // PLSQLWalker.g:51:10: ^( SQL_SCRIPT ( serveroutput_declaration )? seq_of_statements )
            {
            match(input,SQL_SCRIPT,FOLLOW_SQL_SCRIPT_in_sql_script76); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:51:23: ( serveroutput_declaration )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==SET_SERVEROUTPUT) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // PLSQLWalker.g:51:23: serveroutput_declaration
                    {
                    pushFollow(FOLLOW_serveroutput_declaration_in_sql_script78);
                    serveroutput_declaration();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_seq_of_statements_in_sql_script81);
            seq_of_statements();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "sql_script"



    // $ANTLR start "serveroutput_declaration"
    // PLSQLWalker.g:54:1: serveroutput_declaration : ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) ;
    public final void serveroutput_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:55:5: ( ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) )
            // PLSQLWalker.g:55:10: ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) )
            {
            match(input,SET_SERVEROUTPUT,FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration103); 

            match(input, Token.DOWN, null); 
            if ( input.LA(1)==OFF_VK||input.LA(1)==SQL92_RESERVED_ON ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "serveroutput_declaration"



    // $ANTLR start "unit_statement"
    // PLSQLWalker.g:58:1: unit_statement : ( alter_function | alter_package | alter_procedure | alter_sequence | alter_trigger | alter_type | create_function_body | create_procedure_body | create_package | create_sequence | create_trigger | create_type | drop_function | drop_package | drop_procedure | drop_sequence | drop_trigger | drop_type );
    public final void unit_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:59:5: ( alter_function | alter_package | alter_procedure | alter_sequence | alter_trigger | alter_type | create_function_body | create_procedure_body | create_package | create_sequence | create_trigger | create_type | drop_function | drop_package | drop_procedure | drop_sequence | drop_trigger | drop_type )
            int alt3=18;
            switch ( input.LA(1) ) {
            case ALTER_FUNCTION:
                {
                alt3=1;
                }
                break;
            case ALTER_PACKAGE:
                {
                alt3=2;
                }
                break;
            case ALTER_PROCEDURE:
                {
                alt3=3;
                }
                break;
            case ALTER_SEQUENCE:
                {
                alt3=4;
                }
                break;
            case ALTER_TRIGGER:
                {
                alt3=5;
                }
                break;
            case ALTER_TYPE:
                {
                alt3=6;
                }
                break;
            case CREATE_FUNCTION:
                {
                alt3=7;
                }
                break;
            case CREATE_PROCEDURE:
                {
                alt3=8;
                }
                break;
            case CREATE_PACKAGE_BODY:
            case CREATE_PACKAGE_SPEC:
                {
                alt3=9;
                }
                break;
            case CREATE_SEQUENCE:
                {
                alt3=10;
                }
                break;
            case CREATE_TRIGGER:
                {
                alt3=11;
                }
                break;
            case CREATE_TYPE_BODY:
            case CREATE_TYPE_SPEC:
                {
                alt3=12;
                }
                break;
            case DROP_FUNCTION:
                {
                alt3=13;
                }
                break;
            case DROP_PACKAGE:
                {
                alt3=14;
                }
                break;
            case DROP_PROCEDURE:
                {
                alt3=15;
                }
                break;
            case DROP_SEQUENCE:
                {
                alt3=16;
                }
                break;
            case DROP_TRIGGER:
                {
                alt3=17;
                }
                break;
            case DROP_TYPE:
                {
                alt3=18;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // PLSQLWalker.g:59:10: alter_function
                    {
                    pushFollow(FOLLOW_alter_function_in_unit_statement130);
                    alter_function();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:60:10: alter_package
                    {
                    pushFollow(FOLLOW_alter_package_in_unit_statement141);
                    alter_package();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:61:10: alter_procedure
                    {
                    pushFollow(FOLLOW_alter_procedure_in_unit_statement152);
                    alter_procedure();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:62:10: alter_sequence
                    {
                    pushFollow(FOLLOW_alter_sequence_in_unit_statement163);
                    alter_sequence();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:63:10: alter_trigger
                    {
                    pushFollow(FOLLOW_alter_trigger_in_unit_statement174);
                    alter_trigger();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:64:10: alter_type
                    {
                    pushFollow(FOLLOW_alter_type_in_unit_statement185);
                    alter_type();

                    state._fsp--;


                    }
                    break;
                case 7 :
                    // PLSQLWalker.g:65:10: create_function_body
                    {
                    pushFollow(FOLLOW_create_function_body_in_unit_statement196);
                    create_function_body();

                    state._fsp--;


                    }
                    break;
                case 8 :
                    // PLSQLWalker.g:66:10: create_procedure_body
                    {
                    pushFollow(FOLLOW_create_procedure_body_in_unit_statement207);
                    create_procedure_body();

                    state._fsp--;


                    }
                    break;
                case 9 :
                    // PLSQLWalker.g:67:10: create_package
                    {
                    pushFollow(FOLLOW_create_package_in_unit_statement218);
                    create_package();

                    state._fsp--;


                    }
                    break;
                case 10 :
                    // PLSQLWalker.g:68:10: create_sequence
                    {
                    pushFollow(FOLLOW_create_sequence_in_unit_statement229);
                    create_sequence();

                    state._fsp--;


                    }
                    break;
                case 11 :
                    // PLSQLWalker.g:69:10: create_trigger
                    {
                    pushFollow(FOLLOW_create_trigger_in_unit_statement240);
                    create_trigger();

                    state._fsp--;


                    }
                    break;
                case 12 :
                    // PLSQLWalker.g:70:10: create_type
                    {
                    pushFollow(FOLLOW_create_type_in_unit_statement251);
                    create_type();

                    state._fsp--;


                    }
                    break;
                case 13 :
                    // PLSQLWalker.g:71:10: drop_function
                    {
                    pushFollow(FOLLOW_drop_function_in_unit_statement262);
                    drop_function();

                    state._fsp--;


                    }
                    break;
                case 14 :
                    // PLSQLWalker.g:72:10: drop_package
                    {
                    pushFollow(FOLLOW_drop_package_in_unit_statement273);
                    drop_package();

                    state._fsp--;


                    }
                    break;
                case 15 :
                    // PLSQLWalker.g:73:10: drop_procedure
                    {
                    pushFollow(FOLLOW_drop_procedure_in_unit_statement284);
                    drop_procedure();

                    state._fsp--;


                    }
                    break;
                case 16 :
                    // PLSQLWalker.g:74:10: drop_sequence
                    {
                    pushFollow(FOLLOW_drop_sequence_in_unit_statement295);
                    drop_sequence();

                    state._fsp--;


                    }
                    break;
                case 17 :
                    // PLSQLWalker.g:75:10: drop_trigger
                    {
                    pushFollow(FOLLOW_drop_trigger_in_unit_statement306);
                    drop_trigger();

                    state._fsp--;


                    }
                    break;
                case 18 :
                    // PLSQLWalker.g:76:10: drop_type
                    {
                    pushFollow(FOLLOW_drop_type_in_unit_statement317);
                    drop_type();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "unit_statement"



    // $ANTLR start "drop_function"
    // PLSQLWalker.g:83:1: drop_function : ^( DROP_FUNCTION function_name ) ;
    public final void drop_function() throws RecognitionException {
        try {
            // PLSQLWalker.g:84:5: ( ^( DROP_FUNCTION function_name ) )
            // PLSQLWalker.g:84:10: ^( DROP_FUNCTION function_name )
            {
            match(input,DROP_FUNCTION,FOLLOW_DROP_FUNCTION_in_drop_function342); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_function_name_in_drop_function344);
            function_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "drop_function"



    // $ANTLR start "alter_function"
    // PLSQLWalker.g:87:1: alter_function : ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ;
    public final void alter_function() throws RecognitionException {
        try {
            // PLSQLWalker.g:88:5: ( ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
            // PLSQLWalker.g:88:10: ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
            {
            match(input,ALTER_FUNCTION,FOLLOW_ALTER_FUNCTION_in_alter_function366); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_function_name_in_alter_function368);
            function_name();

            state._fsp--;


            // PLSQLWalker.g:88:41: ( DEBUG_VK )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==DEBUG_VK) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // PLSQLWalker.g:88:41: DEBUG_VK
                    {
                    match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_function370); 

                    }
                    break;

            }


            // PLSQLWalker.g:88:51: ( REUSE_VK )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==REUSE_VK) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // PLSQLWalker.g:88:51: REUSE_VK
                    {
                    match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_function373); 

                    }
                    break;

            }


            // PLSQLWalker.g:88:61: ( compiler_parameters_clause )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==COMPILER_PARAMETER) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // PLSQLWalker.g:88:61: compiler_parameters_clause
            	    {
            	    pushFollow(FOLLOW_compiler_parameters_clause_in_alter_function376);
            	    compiler_parameters_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "alter_function"



    // $ANTLR start "create_function_body"
    // PLSQLWalker.g:91:1: create_function_body : ^( CREATE_FUNCTION ( REPLACE_VK )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) ) ) ;
    public final void create_function_body() throws RecognitionException {
        try {
            // PLSQLWalker.g:92:5: ( ^( CREATE_FUNCTION ( REPLACE_VK )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) ) ) )
            // PLSQLWalker.g:92:10: ^( CREATE_FUNCTION ( REPLACE_VK )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) ) )
            {
            match(input,CREATE_FUNCTION,FOLLOW_CREATE_FUNCTION_in_create_function_body399); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:92:28: ( REPLACE_VK )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==REPLACE_VK) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // PLSQLWalker.g:92:28: REPLACE_VK
                    {
                    match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_function_body401); 

                    }
                    break;

            }


            pushFollow(FOLLOW_function_name_in_create_function_body404);
            function_name();

            state._fsp--;


            pushFollow(FOLLOW_type_spec_in_create_function_body406);
            type_spec();

            state._fsp--;


            match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_function_body409); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:92:77: ( parameter )*
                loop8:
                do {
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==PARAMETER) ) {
                        alt8=1;
                    }


                    switch (alt8) {
                	case 1 :
                	    // PLSQLWalker.g:92:77: parameter
                	    {
                	    pushFollow(FOLLOW_parameter_in_create_function_body411);
                	    parameter();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop8;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            // PLSQLWalker.g:93:13: ( invoker_rights_clause )*
            loop9:
            do {
                int alt9=2;
                int LA9_0 = input.LA(1);

                if ( (LA9_0==AUTHID_VK) ) {
                    alt9=1;
                }


                switch (alt9) {
            	case 1 :
            	    // PLSQLWalker.g:93:13: invoker_rights_clause
            	    {
            	    pushFollow(FOLLOW_invoker_rights_clause_in_create_function_body427);
            	    invoker_rights_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);


            // PLSQLWalker.g:93:36: ( parallel_enable_clause )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==PARALLEL_ENABLE_VK) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // PLSQLWalker.g:93:36: parallel_enable_clause
            	    {
            	    pushFollow(FOLLOW_parallel_enable_clause_in_create_function_body430);
            	    parallel_enable_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);


            // PLSQLWalker.g:93:60: ( result_cache_clause )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==RESULT_CACHE_VK) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // PLSQLWalker.g:93:60: result_cache_clause
            	    {
            	    pushFollow(FOLLOW_result_cache_clause_in_create_function_body433);
            	    result_cache_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            // PLSQLWalker.g:93:81: ( DETERMINISTIC_VK )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==DETERMINISTIC_VK) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // PLSQLWalker.g:93:81: DETERMINISTIC_VK
            	    {
            	    match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_create_function_body436); 

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            // PLSQLWalker.g:94:13: ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) )
            int alt18=3;
            switch ( input.LA(1) ) {
            case USING_MODE:
                {
                alt18=1;
                }
                break;
            case CALL_MODE:
                {
                alt18=2;
                }
                break;
            case BODY_MODE:
                {
                alt18=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }

            switch (alt18) {
                case 1 :
                    // PLSQLWalker.g:94:18: ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name )
                    {
                    match(input,USING_MODE,FOLLOW_USING_MODE_in_create_function_body457); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:94:31: ( PIPELINED_VK )?
                    int alt13=2;
                    int LA13_0 = input.LA(1);

                    if ( (LA13_0==PIPELINED_VK) ) {
                        alt13=1;
                    }
                    switch (alt13) {
                        case 1 :
                            // PLSQLWalker.g:94:31: PIPELINED_VK
                            {
                            match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body459); 

                            }
                            break;

                    }


                    // PLSQLWalker.g:94:45: ( AGGREGATE_VK )?
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==AGGREGATE_VK) ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // PLSQLWalker.g:94:45: AGGREGATE_VK
                            {
                            match(input,AGGREGATE_VK,FOLLOW_AGGREGATE_VK_in_create_function_body462); 

                            }
                            break;

                    }


                    pushFollow(FOLLOW_implementation_type_name_in_create_function_body465);
                    implementation_type_name();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:95:18: ^( CALL_MODE ( PIPELINED_VK )? call_spec )
                    {
                    match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_function_body486); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:95:30: ( PIPELINED_VK )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==PIPELINED_VK) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // PLSQLWalker.g:95:30: PIPELINED_VK
                            {
                            match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body488); 

                            }
                            break;

                    }


                    pushFollow(FOLLOW_call_spec_in_create_function_body491);
                    call_spec();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:96:18: ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body )
                    {
                    match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_function_body512); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:96:30: ( PIPELINED_VK )?
                    int alt16=2;
                    int LA16_0 = input.LA(1);

                    if ( (LA16_0==PIPELINED_VK) ) {
                        alt16=1;
                    }
                    switch (alt16) {
                        case 1 :
                            // PLSQLWalker.g:96:30: PIPELINED_VK
                            {
                            match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body514); 

                            }
                            break;

                    }


                    // PLSQLWalker.g:96:44: ( declare_spec )*
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==CREATE_FUNCTION||LA17_0==CREATE_PROCEDURE||LA17_0==CURSOR_DECLARE||LA17_0==EXCEPTION_DECLARE||LA17_0==PRAGMA_DECLARE||(LA17_0 >= RECORD_TYPE_DECLARE && LA17_0 <= RECORD_VAR_DECLARE)||LA17_0==SUBTYPE_DECLARE||(LA17_0 >= TABLE_TYPE_DECLARE && LA17_0 <= TABLE_VAR_DECLARE)||LA17_0==VARIABLE_DECLARE) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    // PLSQLWalker.g:96:44: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_create_function_body517);
                    	    declare_spec();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);


                    pushFollow(FOLLOW_body_in_create_function_body520);
                    body();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "create_function_body"



    // $ANTLR start "parallel_enable_clause"
    // PLSQLWalker.g:103:1: parallel_enable_clause : ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) ;
    public final void parallel_enable_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:104:5: ( ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) )
            // PLSQLWalker.g:104:10: ^( PARALLEL_ENABLE_VK ( partition_by_clause )? )
            {
            match(input,PARALLEL_ENABLE_VK,FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause568); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:104:31: ( partition_by_clause )?
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==PARTITION_VK) ) {
                    alt19=1;
                }
                switch (alt19) {
                    case 1 :
                        // PLSQLWalker.g:104:31: partition_by_clause
                        {
                        pushFollow(FOLLOW_partition_by_clause_in_parallel_enable_clause570);
                        partition_by_clause();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "parallel_enable_clause"



    // $ANTLR start "partition_by_clause"
    // PLSQLWalker.g:107:1: partition_by_clause : ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) ;
    public final void partition_by_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:108:5: ( ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) )
            // PLSQLWalker.g:108:10: ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? )
            {
            match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_by_clause593); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_partition_by_clause595);
            expression();

            state._fsp--;


            // PLSQLWalker.g:109:13: ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) )
            int alt22=3;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_ANY:
                {
                alt22=1;
                }
                break;
            case HASH_VK:
                {
                alt22=2;
                }
                break;
            case RANGE_VK:
                {
                alt22=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }

            switch (alt22) {
                case 1 :
                    // PLSQLWalker.g:109:18: SQL92_RESERVED_ANY
                    {
                    match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause615); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:110:18: ^( HASH_VK ^( COLUMNS ( column_name )+ ) )
                    {
                    match(input,HASH_VK,FOLLOW_HASH_VK_in_partition_by_clause635); 

                    match(input, Token.DOWN, null); 
                    match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause638); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:110:38: ( column_name )+
                    int cnt20=0;
                    loop20:
                    do {
                        int alt20=2;
                        int LA20_0 = input.LA(1);

                        if ( (LA20_0==COLUMN_NAME) ) {
                            alt20=1;
                        }


                        switch (alt20) {
                    	case 1 :
                    	    // PLSQLWalker.g:110:38: column_name
                    	    {
                    	    pushFollow(FOLLOW_column_name_in_partition_by_clause640);
                    	    column_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt20 >= 1 ) break loop20;
                                EarlyExitException eee =
                                    new EarlyExitException(20, input);
                                throw eee;
                        }
                        cnt20++;
                    } while (true);


                    match(input, Token.UP, null); 


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:111:18: ^( RANGE_VK ^( COLUMNS ( column_name )+ ) )
                    {
                    match(input,RANGE_VK,FOLLOW_RANGE_VK_in_partition_by_clause663); 

                    match(input, Token.DOWN, null); 
                    match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause666); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:111:39: ( column_name )+
                    int cnt21=0;
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==COLUMN_NAME) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // PLSQLWalker.g:111:39: column_name
                    	    {
                    	    pushFollow(FOLLOW_column_name_in_partition_by_clause668);
                    	    column_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt21 >= 1 ) break loop21;
                                EarlyExitException eee =
                                    new EarlyExitException(21, input);
                                throw eee;
                        }
                        cnt21++;
                    } while (true);


                    match(input, Token.UP, null); 


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            // PLSQLWalker.g:113:13: ( streaming_clause )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==STREAMING_CLAUSE) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // PLSQLWalker.g:113:13: streaming_clause
                    {
                    pushFollow(FOLLOW_streaming_clause_in_partition_by_clause700);
                    streaming_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "partition_by_clause"



    // $ANTLR start "result_cache_clause"
    // PLSQLWalker.g:117:1: result_cache_clause : ^( RESULT_CACHE_VK ( relies_on_part )? ) ;
    public final void result_cache_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:118:5: ( ^( RESULT_CACHE_VK ( relies_on_part )? ) )
            // PLSQLWalker.g:118:10: ^( RESULT_CACHE_VK ( relies_on_part )? )
            {
            match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_result_cache_clause732); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:118:28: ( relies_on_part )?
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==RELIES_ON_VK) ) {
                    alt24=1;
                }
                switch (alt24) {
                    case 1 :
                        // PLSQLWalker.g:118:28: relies_on_part
                        {
                        pushFollow(FOLLOW_relies_on_part_in_result_cache_clause734);
                        relies_on_part();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "result_cache_clause"



    // $ANTLR start "relies_on_part"
    // PLSQLWalker.g:121:1: relies_on_part : ^( RELIES_ON_VK ( tableview_name )+ ) ;
    public final void relies_on_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:122:5: ( ^( RELIES_ON_VK ( tableview_name )+ ) )
            // PLSQLWalker.g:122:10: ^( RELIES_ON_VK ( tableview_name )+ )
            {
            match(input,RELIES_ON_VK,FOLLOW_RELIES_ON_VK_in_relies_on_part757); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:122:25: ( tableview_name )+
            int cnt25=0;
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==TABLEVIEW_NAME) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // PLSQLWalker.g:122:25: tableview_name
            	    {
            	    pushFollow(FOLLOW_tableview_name_in_relies_on_part759);
            	    tableview_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt25 >= 1 ) break loop25;
                        EarlyExitException eee =
                            new EarlyExitException(25, input);
                        throw eee;
                }
                cnt25++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "relies_on_part"



    // $ANTLR start "streaming_clause"
    // PLSQLWalker.g:125:1: streaming_clause : ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) ;
    public final void streaming_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:126:5: ( ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) )
            // PLSQLWalker.g:126:10: ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) )
            {
            match(input,STREAMING_CLAUSE,FOLLOW_STREAMING_CLAUSE_in_streaming_clause782); 

            match(input, Token.DOWN, null); 
            if ( input.LA(1)==CLUSTER_VK||input.LA(1)==SQL92_RESERVED_ORDER ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            pushFollow(FOLLOW_expression_in_streaming_clause790);
            expression();

            state._fsp--;


            match(input,COLUMNS,FOLLOW_COLUMNS_in_streaming_clause793); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:126:84: ( column_name )+
            int cnt26=0;
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==COLUMN_NAME) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // PLSQLWalker.g:126:84: column_name
            	    {
            	    pushFollow(FOLLOW_column_name_in_streaming_clause795);
            	    column_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt26 >= 1 ) break loop26;
                        EarlyExitException eee =
                            new EarlyExitException(26, input);
                        throw eee;
                }
                cnt26++;
            } while (true);


            match(input, Token.UP, null); 


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "streaming_clause"



    // $ANTLR start "drop_package"
    // PLSQLWalker.g:133:1: drop_package : ^( DROP_PACKAGE package_name ( BODY_VK )? ) ;
    public final void drop_package() throws RecognitionException {
        try {
            // PLSQLWalker.g:134:5: ( ^( DROP_PACKAGE package_name ( BODY_VK )? ) )
            // PLSQLWalker.g:134:10: ^( DROP_PACKAGE package_name ( BODY_VK )? )
            {
            match(input,DROP_PACKAGE,FOLLOW_DROP_PACKAGE_in_drop_package824); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_package_name_in_drop_package826);
            package_name();

            state._fsp--;


            // PLSQLWalker.g:134:38: ( BODY_VK )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==BODY_VK) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // PLSQLWalker.g:134:38: BODY_VK
                    {
                    match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_package828); 

                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "drop_package"



    // $ANTLR start "alter_package"
    // PLSQLWalker.g:137:1: alter_package : ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) ;
    public final void alter_package() throws RecognitionException {
        try {
            // PLSQLWalker.g:138:5: ( ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) )
            // PLSQLWalker.g:138:10: ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* )
            {
            match(input,ALTER_PACKAGE,FOLLOW_ALTER_PACKAGE_in_alter_package851); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_package_name_in_alter_package853);
            package_name();

            state._fsp--;


            // PLSQLWalker.g:138:39: ( DEBUG_VK )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==DEBUG_VK) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // PLSQLWalker.g:138:39: DEBUG_VK
                    {
                    match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_package855); 

                    }
                    break;

            }


            // PLSQLWalker.g:138:49: ( REUSE_VK )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==REUSE_VK) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // PLSQLWalker.g:138:49: REUSE_VK
                    {
                    match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_package858); 

                    }
                    break;

            }


            // PLSQLWalker.g:139:17: ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==BODY_VK||LA30_0==PACKAGE_VK||LA30_0==SPECIFICATION_VK) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==BODY_VK||input.LA(1)==PACKAGE_VK||input.LA(1)==SPECIFICATION_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            // PLSQLWalker.g:139:56: ( compiler_parameters_clause )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==COMPILER_PARAMETER) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // PLSQLWalker.g:139:56: compiler_parameters_clause
            	    {
            	    pushFollow(FOLLOW_compiler_parameters_clause_in_alter_package887);
            	    compiler_parameters_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "alter_package"



    // $ANTLR start "create_package"
    // PLSQLWalker.g:142:1: create_package : ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? ( package_name )+ ( invoker_rights_clause )? ( package_obj_spec )* ) | ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? ( package_name )+ ( package_obj_body )* ( seq_of_statements )? ) );
    public final void create_package() throws RecognitionException {
        try {
            // PLSQLWalker.g:143:5: ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? ( package_name )+ ( invoker_rights_clause )? ( package_obj_spec )* ) | ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? ( package_name )+ ( package_obj_body )* ( seq_of_statements )? ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==CREATE_PACKAGE_SPEC) ) {
                alt40=1;
            }
            else if ( (LA40_0==CREATE_PACKAGE_BODY) ) {
                alt40=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // PLSQLWalker.g:143:10: ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? ( package_name )+ ( invoker_rights_clause )? ( package_obj_spec )* )
                    {
                    match(input,CREATE_PACKAGE_SPEC,FOLLOW_CREATE_PACKAGE_SPEC_in_create_package910); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:143:32: ( REPLACE_VK )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==REPLACE_VK) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // PLSQLWalker.g:143:32: REPLACE_VK
                            {
                            match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package912); 

                            }
                            break;

                    }


                    // PLSQLWalker.g:143:44: ( package_name )+
                    int cnt33=0;
                    loop33:
                    do {
                        int alt33=2;
                        int LA33_0 = input.LA(1);

                        if ( (LA33_0==PACKAGE_NAME) ) {
                            alt33=1;
                        }


                        switch (alt33) {
                    	case 1 :
                    	    // PLSQLWalker.g:143:44: package_name
                    	    {
                    	    pushFollow(FOLLOW_package_name_in_create_package915);
                    	    package_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt33 >= 1 ) break loop33;
                                EarlyExitException eee =
                                    new EarlyExitException(33, input);
                                throw eee;
                        }
                        cnt33++;
                    } while (true);


                    // PLSQLWalker.g:143:58: ( invoker_rights_clause )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==AUTHID_VK) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // PLSQLWalker.g:143:58: invoker_rights_clause
                            {
                            pushFollow(FOLLOW_invoker_rights_clause_in_create_package918);
                            invoker_rights_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:143:81: ( package_obj_spec )*
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);

                        if ( (LA35_0==CURSOR_DECLARE||LA35_0==EXCEPTION_DECLARE||LA35_0==FUNCTION_SPEC||LA35_0==PROCEDURE_SPEC||(LA35_0 >= RECORD_TYPE_DECLARE && LA35_0 <= RECORD_VAR_DECLARE)||LA35_0==SUBTYPE_DECLARE||(LA35_0 >= TABLE_TYPE_DECLARE && LA35_0 <= TABLE_VAR_DECLARE)||LA35_0==VARIABLE_DECLARE) ) {
                            alt35=1;
                        }


                        switch (alt35) {
                    	case 1 :
                    	    // PLSQLWalker.g:143:81: package_obj_spec
                    	    {
                    	    pushFollow(FOLLOW_package_obj_spec_in_create_package921);
                    	    package_obj_spec();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop35;
                        }
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:144:10: ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? ( package_name )+ ( package_obj_body )* ( seq_of_statements )? )
                    {
                    match(input,CREATE_PACKAGE_BODY,FOLLOW_CREATE_PACKAGE_BODY_in_create_package936); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:144:32: ( REPLACE_VK )?
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==REPLACE_VK) ) {
                        alt36=1;
                    }
                    switch (alt36) {
                        case 1 :
                            // PLSQLWalker.g:144:32: REPLACE_VK
                            {
                            match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package938); 

                            }
                            break;

                    }


                    // PLSQLWalker.g:144:44: ( package_name )+
                    int cnt37=0;
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);

                        if ( (LA37_0==PACKAGE_NAME) ) {
                            alt37=1;
                        }


                        switch (alt37) {
                    	case 1 :
                    	    // PLSQLWalker.g:144:44: package_name
                    	    {
                    	    pushFollow(FOLLOW_package_name_in_create_package941);
                    	    package_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt37 >= 1 ) break loop37;
                                EarlyExitException eee =
                                    new EarlyExitException(37, input);
                                throw eee;
                        }
                        cnt37++;
                    } while (true);


                    // PLSQLWalker.g:144:58: ( package_obj_body )*
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==CREATE_FUNCTION||LA38_0==CREATE_PROCEDURE||LA38_0==CURSOR_DECLARE||LA38_0==EXCEPTION_DECLARE||(LA38_0 >= RECORD_TYPE_DECLARE && LA38_0 <= RECORD_VAR_DECLARE)||LA38_0==SUBTYPE_DECLARE||(LA38_0 >= TABLE_TYPE_DECLARE && LA38_0 <= TABLE_VAR_DECLARE)||LA38_0==VARIABLE_DECLARE) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    // PLSQLWalker.g:144:58: package_obj_body
                    	    {
                    	    pushFollow(FOLLOW_package_obj_body_in_create_package944);
                    	    package_obj_body();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);


                    // PLSQLWalker.g:144:76: ( seq_of_statements )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==STATEMENTS) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // PLSQLWalker.g:144:76: seq_of_statements
                            {
                            pushFollow(FOLLOW_seq_of_statements_in_create_package947);
                            seq_of_statements();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "create_package"



    // $ANTLR start "package_obj_spec"
    // PLSQLWalker.g:149:1: package_obj_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | procedure_spec | function_spec );
    public final void package_obj_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:150:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | procedure_spec | function_spec )
            int alt41=8;
            switch ( input.LA(1) ) {
            case VARIABLE_DECLARE:
                {
                alt41=1;
                }
                break;
            case SUBTYPE_DECLARE:
                {
                alt41=2;
                }
                break;
            case CURSOR_DECLARE:
                {
                alt41=3;
                }
                break;
            case EXCEPTION_DECLARE:
                {
                alt41=4;
                }
                break;
            case RECORD_TYPE_DECLARE:
            case RECORD_VAR_DECLARE:
                {
                alt41=5;
                }
                break;
            case TABLE_TYPE_DECLARE:
            case TABLE_VAR_DECLARE:
                {
                alt41=6;
                }
                break;
            case PROCEDURE_SPEC:
                {
                alt41=7;
                }
                break;
            case FUNCTION_SPEC:
                {
                alt41=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }

            switch (alt41) {
                case 1 :
                    // PLSQLWalker.g:150:10: variable_declaration
                    {
                    pushFollow(FOLLOW_variable_declaration_in_package_obj_spec971);
                    variable_declaration();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:151:11: subtype_declaration
                    {
                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec983);
                    subtype_declaration();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:152:11: cursor_declaration
                    {
                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec995);
                    cursor_declaration();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:153:11: exception_declaration
                    {
                    pushFollow(FOLLOW_exception_declaration_in_package_obj_spec1007);
                    exception_declaration();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:154:11: record_declaration
                    {
                    pushFollow(FOLLOW_record_declaration_in_package_obj_spec1019);
                    record_declaration();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:155:11: table_declaration
                    {
                    pushFollow(FOLLOW_table_declaration_in_package_obj_spec1031);
                    table_declaration();

                    state._fsp--;


                    }
                    break;
                case 7 :
                    // PLSQLWalker.g:156:11: procedure_spec
                    {
                    pushFollow(FOLLOW_procedure_spec_in_package_obj_spec1043);
                    procedure_spec();

                    state._fsp--;


                    }
                    break;
                case 8 :
                    // PLSQLWalker.g:157:11: function_spec
                    {
                    pushFollow(FOLLOW_function_spec_in_package_obj_spec1055);
                    function_spec();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "package_obj_spec"



    // $ANTLR start "procedure_spec"
    // PLSQLWalker.g:160:1: procedure_spec : ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) )? ) ;
    public final void procedure_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:161:5: ( ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) )? ) )
            // PLSQLWalker.g:161:11: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) )? )
            {
            match(input,PROCEDURE_SPEC,FOLLOW_PROCEDURE_SPEC_in_procedure_spec1077); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_procedure_name_in_procedure_spec1079);
            procedure_name();

            state._fsp--;


            match(input,PARAMETERS,FOLLOW_PARAMETERS_in_procedure_spec1082); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:161:56: ( parameter )*
                loop42:
                do {
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==PARAMETER) ) {
                        alt42=1;
                    }


                    switch (alt42) {
                	case 1 :
                	    // PLSQLWalker.g:161:56: parameter
                	    {
                	    pushFollow(FOLLOW_parameter_in_procedure_spec1084);
                	    parameter();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop42;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            // PLSQLWalker.g:162:13: ( ^( CALL_MODE call_spec ) )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==CALL_MODE) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // PLSQLWalker.g:162:14: ^( CALL_MODE call_spec )
                    {
                    match(input,CALL_MODE,FOLLOW_CALL_MODE_in_procedure_spec1102); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_call_spec_in_procedure_spec1104);
                    call_spec();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "procedure_spec"



    // $ANTLR start "function_spec"
    // PLSQLWalker.g:166:1: function_spec : ^( FUNCTION_SPEC function_name ( type_spec | SELF_VK ) ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )? ) ;
    public final void function_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:167:5: ( ^( FUNCTION_SPEC function_name ( type_spec | SELF_VK ) ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )? ) )
            // PLSQLWalker.g:167:10: ^( FUNCTION_SPEC function_name ( type_spec | SELF_VK ) ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )? )
            {
            match(input,FUNCTION_SPEC,FOLLOW_FUNCTION_SPEC_in_function_spec1135); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_function_name_in_function_spec1137);
            function_name();

            state._fsp--;


            // PLSQLWalker.g:167:40: ( type_spec | SELF_VK )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==CUSTOM_TYPE||LA44_0==INTERVAL_DATATYPE||LA44_0==NATIVE_DATATYPE) ) {
                alt44=1;
            }
            else if ( (LA44_0==SELF_VK) ) {
                alt44=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }
            switch (alt44) {
                case 1 :
                    // PLSQLWalker.g:167:41: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_function_spec1140);
                    type_spec();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:167:51: SELF_VK
                    {
                    match(input,SELF_VK,FOLLOW_SELF_VK_in_function_spec1142); 

                    }
                    break;

            }


            match(input,PARAMETERS,FOLLOW_PARAMETERS_in_function_spec1146); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:167:73: ( parameter )*
                loop45:
                do {
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( (LA45_0==PARAMETER) ) {
                        alt45=1;
                    }


                    switch (alt45) {
                	case 1 :
                	    // PLSQLWalker.g:167:73: parameter
                	    {
                	    pushFollow(FOLLOW_parameter_in_function_spec1148);
                	    parameter();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop45;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            // PLSQLWalker.g:168:13: ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )?
            int alt46=3;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==CALL_MODE) ) {
                alt46=1;
            }
            else if ( (LA46_0==EXTERNAL_VK) ) {
                alt46=2;
            }
            switch (alt46) {
                case 1 :
                    // PLSQLWalker.g:168:18: ^( CALL_MODE call_spec )
                    {
                    match(input,CALL_MODE,FOLLOW_CALL_MODE_in_function_spec1170); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_call_spec_in_function_spec1172);
                    call_spec();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:169:18: ^( EXTERNAL_VK expression )
                    {
                    match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_function_spec1193); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_function_spec1195);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "function_spec"



    // $ANTLR start "package_obj_body"
    // PLSQLWalker.g:174:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body );
    public final void package_obj_body() throws RecognitionException {
        try {
            // PLSQLWalker.g:175:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body )
            int alt47=8;
            switch ( input.LA(1) ) {
            case VARIABLE_DECLARE:
                {
                alt47=1;
                }
                break;
            case SUBTYPE_DECLARE:
                {
                alt47=2;
                }
                break;
            case CURSOR_DECLARE:
                {
                alt47=3;
                }
                break;
            case EXCEPTION_DECLARE:
                {
                alt47=4;
                }
                break;
            case RECORD_TYPE_DECLARE:
            case RECORD_VAR_DECLARE:
                {
                alt47=5;
                }
                break;
            case TABLE_TYPE_DECLARE:
            case TABLE_VAR_DECLARE:
                {
                alt47=6;
                }
                break;
            case CREATE_PROCEDURE:
                {
                alt47=7;
                }
                break;
            case CREATE_FUNCTION:
                {
                alt47=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }

            switch (alt47) {
                case 1 :
                    // PLSQLWalker.g:175:11: variable_declaration
                    {
                    pushFollow(FOLLOW_variable_declaration_in_package_obj_body1242);
                    variable_declaration();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:176:11: subtype_declaration
                    {
                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_body1255);
                    subtype_declaration();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:177:11: cursor_declaration
                    {
                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_body1268);
                    cursor_declaration();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:178:11: exception_declaration
                    {
                    pushFollow(FOLLOW_exception_declaration_in_package_obj_body1281);
                    exception_declaration();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:179:11: record_declaration
                    {
                    pushFollow(FOLLOW_record_declaration_in_package_obj_body1294);
                    record_declaration();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:180:11: table_declaration
                    {
                    pushFollow(FOLLOW_table_declaration_in_package_obj_body1306);
                    table_declaration();

                    state._fsp--;


                    }
                    break;
                case 7 :
                    // PLSQLWalker.g:181:11: create_procedure_body
                    {
                    pushFollow(FOLLOW_create_procedure_body_in_package_obj_body1318);
                    create_procedure_body();

                    state._fsp--;


                    }
                    break;
                case 8 :
                    // PLSQLWalker.g:182:11: create_function_body
                    {
                    pushFollow(FOLLOW_create_function_body_in_package_obj_body1330);
                    create_function_body();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "package_obj_body"



    // $ANTLR start "drop_procedure"
    // PLSQLWalker.g:191:1: drop_procedure : ^( DROP_PROCEDURE procedure_name ) ;
    public final void drop_procedure() throws RecognitionException {
        try {
            // PLSQLWalker.g:192:5: ( ^( DROP_PROCEDURE procedure_name ) )
            // PLSQLWalker.g:192:10: ^( DROP_PROCEDURE procedure_name )
            {
            match(input,DROP_PROCEDURE,FOLLOW_DROP_PROCEDURE_in_drop_procedure1358); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_procedure_name_in_drop_procedure1360);
            procedure_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "drop_procedure"



    // $ANTLR start "alter_procedure"
    // PLSQLWalker.g:195:1: alter_procedure : ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ;
    public final void alter_procedure() throws RecognitionException {
        try {
            // PLSQLWalker.g:196:5: ( ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
            // PLSQLWalker.g:196:10: ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
            {
            match(input,ALTER_PROCEDURE,FOLLOW_ALTER_PROCEDURE_in_alter_procedure1382); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_procedure_name_in_alter_procedure1384);
            procedure_name();

            state._fsp--;


            // PLSQLWalker.g:196:43: ( DEBUG_VK )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==DEBUG_VK) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // PLSQLWalker.g:196:43: DEBUG_VK
                    {
                    match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_procedure1386); 

                    }
                    break;

            }


            // PLSQLWalker.g:196:53: ( REUSE_VK )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==REUSE_VK) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // PLSQLWalker.g:196:53: REUSE_VK
                    {
                    match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_procedure1389); 

                    }
                    break;

            }


            // PLSQLWalker.g:196:63: ( compiler_parameters_clause )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMPILER_PARAMETER) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // PLSQLWalker.g:196:63: compiler_parameters_clause
            	    {
            	    pushFollow(FOLLOW_compiler_parameters_clause_in_alter_procedure1392);
            	    compiler_parameters_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "alter_procedure"



    // $ANTLR start "create_procedure_body"
    // PLSQLWalker.g:199:1: create_procedure_body : ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) ;
    public final void create_procedure_body() throws RecognitionException {
        try {
            // PLSQLWalker.g:200:5: ( ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) )
            // PLSQLWalker.g:200:10: ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) )
            {
            match(input,CREATE_PROCEDURE,FOLLOW_CREATE_PROCEDURE_in_create_procedure_body1415); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:200:29: ( REPLACE_VK )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==REPLACE_VK) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // PLSQLWalker.g:200:29: REPLACE_VK
                    {
                    match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_procedure_body1417); 

                    }
                    break;

            }


            pushFollow(FOLLOW_procedure_name_in_create_procedure_body1420);
            procedure_name();

            state._fsp--;


            match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_procedure_body1423); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:200:69: ( parameter )*
                loop52:
                do {
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==PARAMETER) ) {
                        alt52=1;
                    }


                    switch (alt52) {
                	case 1 :
                	    // PLSQLWalker.g:200:69: parameter
                	    {
                	    pushFollow(FOLLOW_parameter_in_create_procedure_body1425);
                	    parameter();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop52;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            // PLSQLWalker.g:200:81: ( invoker_rights_clause )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==AUTHID_VK) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // PLSQLWalker.g:200:81: invoker_rights_clause
                    {
                    pushFollow(FOLLOW_invoker_rights_clause_in_create_procedure_body1429);
                    invoker_rights_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:201:13: ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) )
            int alt55=3;
            switch ( input.LA(1) ) {
            case EXTERNAL_VK:
                {
                alt55=1;
                }
                break;
            case CALL_MODE:
                {
                alt55=2;
                }
                break;
            case BODY_MODE:
                {
                alt55=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }

            switch (alt55) {
                case 1 :
                    // PLSQLWalker.g:201:18: EXTERNAL_VK
                    {
                    match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_create_procedure_body1449); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:202:18: ^( CALL_MODE call_spec )
                    {
                    match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_procedure_body1469); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_call_spec_in_create_procedure_body1471);
                    call_spec();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:203:18: ^( BODY_MODE ( declare_spec )* body )
                    {
                    match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_procedure_body1492); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:203:30: ( declare_spec )*
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==CREATE_FUNCTION||LA54_0==CREATE_PROCEDURE||LA54_0==CURSOR_DECLARE||LA54_0==EXCEPTION_DECLARE||LA54_0==PRAGMA_DECLARE||(LA54_0 >= RECORD_TYPE_DECLARE && LA54_0 <= RECORD_VAR_DECLARE)||LA54_0==SUBTYPE_DECLARE||(LA54_0 >= TABLE_TYPE_DECLARE && LA54_0 <= TABLE_VAR_DECLARE)||LA54_0==VARIABLE_DECLARE) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                    	case 1 :
                    	    // PLSQLWalker.g:203:30: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_create_procedure_body1494);
                    	    declare_spec();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop54;
                        }
                    } while (true);


                    pushFollow(FOLLOW_body_in_create_procedure_body1497);
                    body();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "create_procedure_body"



    // $ANTLR start "drop_trigger"
    // PLSQLWalker.g:212:1: drop_trigger : ^( DROP_TRIGGER trigger_name ) ;
    public final void drop_trigger() throws RecognitionException {
        try {
            // PLSQLWalker.g:213:5: ( ^( DROP_TRIGGER trigger_name ) )
            // PLSQLWalker.g:213:10: ^( DROP_TRIGGER trigger_name )
            {
            match(input,DROP_TRIGGER,FOLLOW_DROP_TRIGGER_in_drop_trigger1547); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_trigger_name_in_drop_trigger1549);
            trigger_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "drop_trigger"



    // $ANTLR start "alter_trigger"
    // PLSQLWalker.g:216:1: alter_trigger : ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ;
    public final void alter_trigger() throws RecognitionException {
        try {
            // PLSQLWalker.g:217:5: ( ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) )
            // PLSQLWalker.g:217:10: ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
            {
            match(input,ALTER_TRIGGER,FOLLOW_ALTER_TRIGGER_in_alter_trigger1571); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_trigger_name_in_alter_trigger1573);
            trigger_name();

            state._fsp--;


            // PLSQLWalker.g:218:13: ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
            int alt59=3;
            switch ( input.LA(1) ) {
            case DISABLE_VK:
            case ENABLE_VK:
                {
                alt59=1;
                }
                break;
            case RENAME_VK:
                {
                alt59=2;
                }
                break;
            case UP:
            case COMPILER_PARAMETER:
            case DEBUG_VK:
            case REUSE_VK:
                {
                alt59=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }

            switch (alt59) {
                case 1 :
                    // PLSQLWalker.g:218:18: ( ENABLE_VK | DISABLE_VK )
                    {
                    if ( input.LA(1)==DISABLE_VK||input.LA(1)==ENABLE_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:219:18: ^( RENAME_VK trigger_name )
                    {
                    match(input,RENAME_VK,FOLLOW_RENAME_VK_in_alter_trigger1617); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_trigger_name_in_alter_trigger1619);
                    trigger_name();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:220:18: ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )*
                    {
                    // PLSQLWalker.g:220:18: ( DEBUG_VK )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==DEBUG_VK) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // PLSQLWalker.g:220:18: DEBUG_VK
                            {
                            match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_trigger1639); 

                            }
                            break;

                    }


                    // PLSQLWalker.g:220:28: ( REUSE_VK )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==REUSE_VK) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // PLSQLWalker.g:220:28: REUSE_VK
                            {
                            match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_trigger1642); 

                            }
                            break;

                    }


                    // PLSQLWalker.g:220:38: ( compiler_parameters_clause )*
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==COMPILER_PARAMETER) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // PLSQLWalker.g:220:38: compiler_parameters_clause
                    	    {
                    	    pushFollow(FOLLOW_compiler_parameters_clause_in_alter_trigger1645);
                    	    compiler_parameters_clause();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "alter_trigger"



    // $ANTLR start "create_trigger"
    // PLSQLWalker.g:225:1: create_trigger : ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) ;
    public final void create_trigger() throws RecognitionException {
        try {
            // PLSQLWalker.g:226:5: ( ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) )
            // PLSQLWalker.g:226:10: ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body )
            {
            match(input,CREATE_TRIGGER,FOLLOW_CREATE_TRIGGER_in_create_trigger1691); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:226:27: ( REPLACE_VK )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==REPLACE_VK) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // PLSQLWalker.g:226:27: REPLACE_VK
                    {
                    match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_trigger1693); 

                    }
                    break;

            }


            pushFollow(FOLLOW_trigger_name_in_create_trigger1696);
            trigger_name();

            state._fsp--;


            // PLSQLWalker.g:227:13: ( simple_dml_trigger )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==SIMPLE_DML) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // PLSQLWalker.g:227:13: simple_dml_trigger
                    {
                    pushFollow(FOLLOW_simple_dml_trigger_in_create_trigger1712);
                    simple_dml_trigger();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:227:33: ( compound_dml_trigger )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==COMPOUND_DML) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // PLSQLWalker.g:227:33: compound_dml_trigger
                    {
                    pushFollow(FOLLOW_compound_dml_trigger_in_create_trigger1715);
                    compound_dml_trigger();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:227:55: ( non_dml_trigger )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==NON_DML) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // PLSQLWalker.g:227:55: non_dml_trigger
                    {
                    pushFollow(FOLLOW_non_dml_trigger_in_create_trigger1718);
                    non_dml_trigger();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:228:13: ( trigger_follows_clause )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==FOLLOWS_VK) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // PLSQLWalker.g:228:13: trigger_follows_clause
                    {
                    pushFollow(FOLLOW_trigger_follows_clause_in_create_trigger1733);
                    trigger_follows_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:228:37: ( ENABLE_VK | DISABLE_VK )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==DISABLE_VK||LA65_0==ENABLE_VK) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==DISABLE_VK||input.LA(1)==ENABLE_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            // PLSQLWalker.g:228:61: ( trigger_when_clause )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==SQL92_RESERVED_WHEN) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // PLSQLWalker.g:228:61: trigger_when_clause
                    {
                    pushFollow(FOLLOW_trigger_when_clause_in_create_trigger1743);
                    trigger_when_clause();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_trigger_body_in_create_trigger1746);
            trigger_body();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "create_trigger"



    // $ANTLR start "trigger_follows_clause"
    // PLSQLWalker.g:231:1: trigger_follows_clause : ^( FOLLOWS_VK ( trigger_name )+ ) ;
    public final void trigger_follows_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:232:5: ( ^( FOLLOWS_VK ( trigger_name )+ ) )
            // PLSQLWalker.g:232:10: ^( FOLLOWS_VK ( trigger_name )+ )
            {
            match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_trigger_follows_clause1768); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:232:23: ( trigger_name )+
            int cnt67=0;
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==TRIGGER_NAME) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // PLSQLWalker.g:232:23: trigger_name
            	    {
            	    pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause1770);
            	    trigger_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt67 >= 1 ) break loop67;
                        EarlyExitException eee =
                            new EarlyExitException(67, input);
                        throw eee;
                }
                cnt67++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "trigger_follows_clause"



    // $ANTLR start "trigger_when_clause"
    // PLSQLWalker.g:235:1: trigger_when_clause : ^( SQL92_RESERVED_WHEN expression ) ;
    public final void trigger_when_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:236:5: ( ^( SQL92_RESERVED_WHEN expression ) )
            // PLSQLWalker.g:236:10: ^( SQL92_RESERVED_WHEN expression )
            {
            match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause1793); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_trigger_when_clause1795);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "trigger_when_clause"



    // $ANTLR start "simple_dml_trigger"
    // PLSQLWalker.g:240:1: simple_dml_trigger : ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) ;
    public final void simple_dml_trigger() throws RecognitionException {
        try {
            // PLSQLWalker.g:241:5: ( ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) )
            // PLSQLWalker.g:241:10: ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause )
            {
            match(input,SIMPLE_DML,FOLLOW_SIMPLE_DML_in_simple_dml_trigger1818); 

            match(input, Token.DOWN, null); 
            if ( input.LA(1)==AFTER_VK||input.LA(1)==BEFORE_VK||input.LA(1)==INSTEAD_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // PLSQLWalker.g:241:55: ( FOR_EACH_ROW )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==FOR_EACH_ROW) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // PLSQLWalker.g:241:55: FOR_EACH_ROW
                    {
                    match(input,FOR_EACH_ROW,FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger1828); 

                    }
                    break;

            }


            // PLSQLWalker.g:241:69: ( referencing_clause )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==REFERENCING_VK) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // PLSQLWalker.g:241:69: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_simple_dml_trigger1831);
                    referencing_clause();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_dml_event_clause_in_simple_dml_trigger1834);
            dml_event_clause();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "simple_dml_trigger"



    // $ANTLR start "compound_dml_trigger"
    // PLSQLWalker.g:244:1: compound_dml_trigger : ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) ;
    public final void compound_dml_trigger() throws RecognitionException {
        try {
            // PLSQLWalker.g:245:5: ( ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) )
            // PLSQLWalker.g:245:10: ^( COMPOUND_DML ( referencing_clause )? dml_event_clause )
            {
            match(input,COMPOUND_DML,FOLLOW_COMPOUND_DML_in_compound_dml_trigger1856); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:245:25: ( referencing_clause )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==REFERENCING_VK) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // PLSQLWalker.g:245:25: referencing_clause
                    {
                    pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger1858);
                    referencing_clause();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger1861);
            dml_event_clause();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "compound_dml_trigger"



    // $ANTLR start "non_dml_trigger"
    // PLSQLWalker.g:248:1: non_dml_trigger : ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) ;
    public final void non_dml_trigger() throws RecognitionException {
        try {
            // PLSQLWalker.g:249:5: ( ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) )
            // PLSQLWalker.g:249:10: ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) )
            {
            match(input,NON_DML,FOLLOW_NON_DML_in_non_dml_trigger1883); 

            match(input, Token.DOWN, null); 
            if ( input.LA(1)==AFTER_VK||input.LA(1)==BEFORE_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // PLSQLWalker.g:249:41: ( non_dml_event )+
            int cnt71=0;
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case DATABASE_VK:
                    {
                    int LA71_1 = input.LA(2);

                    if ( (LA71_1==ANALYZE_VK||LA71_1==ASSOCIATE_VK||LA71_1==AUDIT_VK||LA71_1==COMMENT_VK||LA71_1==DATABASE_VK||(LA71_1 >= DB_ROLE_CHANGE_VK && LA71_1 <= DDL_VK)||LA71_1==DISASSOCIATE_VK||LA71_1==FOLLOWS_VK||(LA71_1 >= LOGOFF_VK && LA71_1 <= LOGON_VK)||LA71_1==NOAUDIT_VK||LA71_1==RENAME_VK||(LA71_1 >= SCHEMA_NAME && LA71_1 <= SCHEMA_VK)||LA71_1==SERVERERROR_VK||LA71_1==SHUTDOWN_VK||LA71_1==SQL92_RESERVED_ALTER||LA71_1==SQL92_RESERVED_CREATE||LA71_1==SQL92_RESERVED_DROP||LA71_1==SQL92_RESERVED_GRANT||LA71_1==SQL92_RESERVED_REVOKE||LA71_1==STARTUP_VK||LA71_1==SUSPEND_VK||LA71_1==TRUNCATE_VK) ) {
                        alt71=1;
                    }


                    }
                    break;
                case SCHEMA_VK:
                    {
                    int LA71_3 = input.LA(2);

                    if ( (LA71_3==ANALYZE_VK||LA71_3==ASSOCIATE_VK||LA71_3==AUDIT_VK||LA71_3==COMMENT_VK||LA71_3==DATABASE_VK||(LA71_3 >= DB_ROLE_CHANGE_VK && LA71_3 <= DDL_VK)||LA71_3==DISASSOCIATE_VK||LA71_3==FOLLOWS_VK||(LA71_3 >= LOGOFF_VK && LA71_3 <= LOGON_VK)||LA71_3==NOAUDIT_VK||LA71_3==RENAME_VK||(LA71_3 >= SCHEMA_NAME && LA71_3 <= SCHEMA_VK)||LA71_3==SERVERERROR_VK||LA71_3==SHUTDOWN_VK||LA71_3==SQL92_RESERVED_ALTER||LA71_3==SQL92_RESERVED_CREATE||LA71_3==SQL92_RESERVED_DROP||LA71_3==SQL92_RESERVED_GRANT||LA71_3==SQL92_RESERVED_REVOKE||LA71_3==STARTUP_VK||LA71_3==SUSPEND_VK||LA71_3==TRUNCATE_VK) ) {
                        alt71=1;
                    }


                    }
                    break;
                case ANALYZE_VK:
                case ASSOCIATE_VK:
                case AUDIT_VK:
                case COMMENT_VK:
                case DB_ROLE_CHANGE_VK:
                case DDL_VK:
                case DISASSOCIATE_VK:
                case FOLLOWS_VK:
                case LOGOFF_VK:
                case LOGON_VK:
                case NOAUDIT_VK:
                case RENAME_VK:
                case SERVERERROR_VK:
                case SHUTDOWN_VK:
                case SQL92_RESERVED_ALTER:
                case SQL92_RESERVED_CREATE:
                case SQL92_RESERVED_DROP:
                case SQL92_RESERVED_GRANT:
                case SQL92_RESERVED_REVOKE:
                case STARTUP_VK:
                case SUSPEND_VK:
                case TRUNCATE_VK:
                    {
                    alt71=1;
                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // PLSQLWalker.g:249:41: non_dml_event
            	    {
            	    pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger1891);
            	    non_dml_event();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt71 >= 1 ) break loop71;
                        EarlyExitException eee =
                            new EarlyExitException(71, input);
                        throw eee;
                }
                cnt71++;
            } while (true);


            // PLSQLWalker.g:249:56: ( DATABASE_VK | ( schema_name )? SCHEMA_VK )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==DATABASE_VK) ) {
                alt73=1;
            }
            else if ( ((LA73_0 >= SCHEMA_NAME && LA73_0 <= SCHEMA_VK)) ) {
                alt73=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }
            switch (alt73) {
                case 1 :
                    // PLSQLWalker.g:249:57: DATABASE_VK
                    {
                    match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_trigger1895); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:249:69: ( schema_name )? SCHEMA_VK
                    {
                    // PLSQLWalker.g:249:69: ( schema_name )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==SCHEMA_NAME) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // PLSQLWalker.g:249:69: schema_name
                            {
                            pushFollow(FOLLOW_schema_name_in_non_dml_trigger1897);
                            schema_name();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_trigger1900); 

                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "non_dml_trigger"



    // $ANTLR start "trigger_body"
    // PLSQLWalker.g:252:1: trigger_body : ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) | ^( CALL_VK routine_name ( function_argument )? ) | ^( BODY_MODE block ) );
    public final void trigger_body() throws RecognitionException {
        try {
            // PLSQLWalker.g:253:5: ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) | ^( CALL_VK routine_name ( function_argument )? ) | ^( BODY_MODE block ) )
            int alt77=3;
            switch ( input.LA(1) ) {
            case COMPOUND_VK:
                {
                alt77=1;
                }
                break;
            case CALL_VK:
                {
                alt77=2;
                }
                break;
            case BODY_MODE:
                {
                alt77=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;

            }

            switch (alt77) {
                case 1 :
                    // PLSQLWalker.g:253:10: ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ )
                    {
                    match(input,COMPOUND_VK,FOLLOW_COMPOUND_VK_in_trigger_body1923); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_trigger_name_in_trigger_body1925);
                    trigger_name();

                    state._fsp--;


                    // PLSQLWalker.g:253:37: ( declare_spec )*
                    loop74:
                    do {
                        int alt74=2;
                        int LA74_0 = input.LA(1);

                        if ( (LA74_0==CREATE_FUNCTION||LA74_0==CREATE_PROCEDURE||LA74_0==CURSOR_DECLARE||LA74_0==EXCEPTION_DECLARE||LA74_0==PRAGMA_DECLARE||(LA74_0 >= RECORD_TYPE_DECLARE && LA74_0 <= RECORD_VAR_DECLARE)||LA74_0==SUBTYPE_DECLARE||(LA74_0 >= TABLE_TYPE_DECLARE && LA74_0 <= TABLE_VAR_DECLARE)||LA74_0==VARIABLE_DECLARE) ) {
                            alt74=1;
                        }


                        switch (alt74) {
                    	case 1 :
                    	    // PLSQLWalker.g:253:37: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_trigger_body1927);
                    	    declare_spec();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop74;
                        }
                    } while (true);


                    // PLSQLWalker.g:253:51: ( timing_point_section )+
                    int cnt75=0;
                    loop75:
                    do {
                        int alt75=2;
                        int LA75_0 = input.LA(1);

                        if ( ((LA75_0 >= AFTER_EACH_ROW && LA75_0 <= AFTER_STATEMENT)||(LA75_0 >= BEFORE_EACH_ROW && LA75_0 <= BEFORE_STATEMENT)) ) {
                            alt75=1;
                        }


                        switch (alt75) {
                    	case 1 :
                    	    // PLSQLWalker.g:253:51: timing_point_section
                    	    {
                    	    pushFollow(FOLLOW_timing_point_section_in_trigger_body1930);
                    	    timing_point_section();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt75 >= 1 ) break loop75;
                                EarlyExitException eee =
                                    new EarlyExitException(75, input);
                                throw eee;
                        }
                        cnt75++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:254:10: ^( CALL_VK routine_name ( function_argument )? )
                    {
                    match(input,CALL_VK,FOLLOW_CALL_VK_in_trigger_body1944); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_routine_name_in_trigger_body1946);
                    routine_name();

                    state._fsp--;


                    // PLSQLWalker.g:254:33: ( function_argument )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==ARGUMENTS) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // PLSQLWalker.g:254:33: function_argument
                            {
                            pushFollow(FOLLOW_function_argument_in_trigger_body1948);
                            function_argument();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:255:10: ^( BODY_MODE block )
                    {
                    match(input,BODY_MODE,FOLLOW_BODY_MODE_in_trigger_body1963); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_block_in_trigger_body1965);
                    block();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "trigger_body"



    // $ANTLR start "timing_point_section"
    // PLSQLWalker.g:258:1: timing_point_section : ( ^( BEFORE_STATEMENT block ) | ^( BEFORE_EACH_ROW block ) | ^( AFTER_STATEMENT block ) | ^( AFTER_EACH_ROW block ) );
    public final void timing_point_section() throws RecognitionException {
        try {
            // PLSQLWalker.g:259:5: ( ^( BEFORE_STATEMENT block ) | ^( BEFORE_EACH_ROW block ) | ^( AFTER_STATEMENT block ) | ^( AFTER_EACH_ROW block ) )
            int alt78=4;
            switch ( input.LA(1) ) {
            case BEFORE_STATEMENT:
                {
                alt78=1;
                }
                break;
            case BEFORE_EACH_ROW:
                {
                alt78=2;
                }
                break;
            case AFTER_STATEMENT:
                {
                alt78=3;
                }
                break;
            case AFTER_EACH_ROW:
                {
                alt78=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;

            }

            switch (alt78) {
                case 1 :
                    // PLSQLWalker.g:259:10: ^( BEFORE_STATEMENT block )
                    {
                    match(input,BEFORE_STATEMENT,FOLLOW_BEFORE_STATEMENT_in_timing_point_section1987); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_block_in_timing_point_section1989);
                    block();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:260:10: ^( BEFORE_EACH_ROW block )
                    {
                    match(input,BEFORE_EACH_ROW,FOLLOW_BEFORE_EACH_ROW_in_timing_point_section2002); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_block_in_timing_point_section2004);
                    block();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:261:10: ^( AFTER_STATEMENT block )
                    {
                    match(input,AFTER_STATEMENT,FOLLOW_AFTER_STATEMENT_in_timing_point_section2017); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_block_in_timing_point_section2019);
                    block();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:262:10: ^( AFTER_EACH_ROW block )
                    {
                    match(input,AFTER_EACH_ROW,FOLLOW_AFTER_EACH_ROW_in_timing_point_section2032); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_block_in_timing_point_section2034);
                    block();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "timing_point_section"



    // $ANTLR start "non_dml_event"
    // PLSQLWalker.g:265:1: non_dml_event : ( SQL92_RESERVED_ALTER | ANALYZE_VK | ASSOCIATE_VK STATISTICS_VK | AUDIT_VK | COMMENT_VK | SQL92_RESERVED_CREATE | DISASSOCIATE_VK STATISTICS_VK | SQL92_RESERVED_DROP | SQL92_RESERVED_GRANT | NOAUDIT_VK | RENAME_VK | SQL92_RESERVED_REVOKE | TRUNCATE_VK | DDL_VK | STARTUP_VK | SHUTDOWN_VK | DB_ROLE_CHANGE_VK | LOGON_VK | LOGOFF_VK | SERVERERROR_VK | SUSPEND_VK | DATABASE_VK | SCHEMA_VK | FOLLOWS_VK );
    public final void non_dml_event() throws RecognitionException {
        try {
            // PLSQLWalker.g:266:5: ( SQL92_RESERVED_ALTER | ANALYZE_VK | ASSOCIATE_VK STATISTICS_VK | AUDIT_VK | COMMENT_VK | SQL92_RESERVED_CREATE | DISASSOCIATE_VK STATISTICS_VK | SQL92_RESERVED_DROP | SQL92_RESERVED_GRANT | NOAUDIT_VK | RENAME_VK | SQL92_RESERVED_REVOKE | TRUNCATE_VK | DDL_VK | STARTUP_VK | SHUTDOWN_VK | DB_ROLE_CHANGE_VK | LOGON_VK | LOGOFF_VK | SERVERERROR_VK | SUSPEND_VK | DATABASE_VK | SCHEMA_VK | FOLLOWS_VK )
            int alt79=24;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_ALTER:
                {
                alt79=1;
                }
                break;
            case ANALYZE_VK:
                {
                alt79=2;
                }
                break;
            case ASSOCIATE_VK:
                {
                alt79=3;
                }
                break;
            case AUDIT_VK:
                {
                alt79=4;
                }
                break;
            case COMMENT_VK:
                {
                alt79=5;
                }
                break;
            case SQL92_RESERVED_CREATE:
                {
                alt79=6;
                }
                break;
            case DISASSOCIATE_VK:
                {
                alt79=7;
                }
                break;
            case SQL92_RESERVED_DROP:
                {
                alt79=8;
                }
                break;
            case SQL92_RESERVED_GRANT:
                {
                alt79=9;
                }
                break;
            case NOAUDIT_VK:
                {
                alt79=10;
                }
                break;
            case RENAME_VK:
                {
                alt79=11;
                }
                break;
            case SQL92_RESERVED_REVOKE:
                {
                alt79=12;
                }
                break;
            case TRUNCATE_VK:
                {
                alt79=13;
                }
                break;
            case DDL_VK:
                {
                alt79=14;
                }
                break;
            case STARTUP_VK:
                {
                alt79=15;
                }
                break;
            case SHUTDOWN_VK:
                {
                alt79=16;
                }
                break;
            case DB_ROLE_CHANGE_VK:
                {
                alt79=17;
                }
                break;
            case LOGON_VK:
                {
                alt79=18;
                }
                break;
            case LOGOFF_VK:
                {
                alt79=19;
                }
                break;
            case SERVERERROR_VK:
                {
                alt79=20;
                }
                break;
            case SUSPEND_VK:
                {
                alt79=21;
                }
                break;
            case DATABASE_VK:
                {
                alt79=22;
                }
                break;
            case SCHEMA_VK:
                {
                alt79=23;
                }
                break;
            case FOLLOWS_VK:
                {
                alt79=24;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }

            switch (alt79) {
                case 1 :
                    // PLSQLWalker.g:266:10: SQL92_RESERVED_ALTER
                    {
                    match(input,SQL92_RESERVED_ALTER,FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event2055); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:267:10: ANALYZE_VK
                    {
                    match(input,ANALYZE_VK,FOLLOW_ANALYZE_VK_in_non_dml_event2066); 

                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:268:10: ASSOCIATE_VK STATISTICS_VK
                    {
                    match(input,ASSOCIATE_VK,FOLLOW_ASSOCIATE_VK_in_non_dml_event2077); 

                    match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event2079); 

                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:269:10: AUDIT_VK
                    {
                    match(input,AUDIT_VK,FOLLOW_AUDIT_VK_in_non_dml_event2090); 

                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:270:10: COMMENT_VK
                    {
                    match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_non_dml_event2101); 

                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:271:10: SQL92_RESERVED_CREATE
                    {
                    match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event2112); 

                    }
                    break;
                case 7 :
                    // PLSQLWalker.g:272:10: DISASSOCIATE_VK STATISTICS_VK
                    {
                    match(input,DISASSOCIATE_VK,FOLLOW_DISASSOCIATE_VK_in_non_dml_event2123); 

                    match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event2125); 

                    }
                    break;
                case 8 :
                    // PLSQLWalker.g:273:10: SQL92_RESERVED_DROP
                    {
                    match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event2136); 

                    }
                    break;
                case 9 :
                    // PLSQLWalker.g:274:10: SQL92_RESERVED_GRANT
                    {
                    match(input,SQL92_RESERVED_GRANT,FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event2147); 

                    }
                    break;
                case 10 :
                    // PLSQLWalker.g:275:10: NOAUDIT_VK
                    {
                    match(input,NOAUDIT_VK,FOLLOW_NOAUDIT_VK_in_non_dml_event2158); 

                    }
                    break;
                case 11 :
                    // PLSQLWalker.g:276:10: RENAME_VK
                    {
                    match(input,RENAME_VK,FOLLOW_RENAME_VK_in_non_dml_event2169); 

                    }
                    break;
                case 12 :
                    // PLSQLWalker.g:277:10: SQL92_RESERVED_REVOKE
                    {
                    match(input,SQL92_RESERVED_REVOKE,FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event2180); 

                    }
                    break;
                case 13 :
                    // PLSQLWalker.g:278:10: TRUNCATE_VK
                    {
                    match(input,TRUNCATE_VK,FOLLOW_TRUNCATE_VK_in_non_dml_event2191); 

                    }
                    break;
                case 14 :
                    // PLSQLWalker.g:279:10: DDL_VK
                    {
                    match(input,DDL_VK,FOLLOW_DDL_VK_in_non_dml_event2202); 

                    }
                    break;
                case 15 :
                    // PLSQLWalker.g:280:10: STARTUP_VK
                    {
                    match(input,STARTUP_VK,FOLLOW_STARTUP_VK_in_non_dml_event2213); 

                    }
                    break;
                case 16 :
                    // PLSQLWalker.g:281:10: SHUTDOWN_VK
                    {
                    match(input,SHUTDOWN_VK,FOLLOW_SHUTDOWN_VK_in_non_dml_event2224); 

                    }
                    break;
                case 17 :
                    // PLSQLWalker.g:282:10: DB_ROLE_CHANGE_VK
                    {
                    match(input,DB_ROLE_CHANGE_VK,FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event2235); 

                    }
                    break;
                case 18 :
                    // PLSQLWalker.g:283:10: LOGON_VK
                    {
                    match(input,LOGON_VK,FOLLOW_LOGON_VK_in_non_dml_event2246); 

                    }
                    break;
                case 19 :
                    // PLSQLWalker.g:284:10: LOGOFF_VK
                    {
                    match(input,LOGOFF_VK,FOLLOW_LOGOFF_VK_in_non_dml_event2257); 

                    }
                    break;
                case 20 :
                    // PLSQLWalker.g:285:10: SERVERERROR_VK
                    {
                    match(input,SERVERERROR_VK,FOLLOW_SERVERERROR_VK_in_non_dml_event2268); 

                    }
                    break;
                case 21 :
                    // PLSQLWalker.g:286:10: SUSPEND_VK
                    {
                    match(input,SUSPEND_VK,FOLLOW_SUSPEND_VK_in_non_dml_event2279); 

                    }
                    break;
                case 22 :
                    // PLSQLWalker.g:287:10: DATABASE_VK
                    {
                    match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_event2290); 

                    }
                    break;
                case 23 :
                    // PLSQLWalker.g:288:10: SCHEMA_VK
                    {
                    match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_event2301); 

                    }
                    break;
                case 24 :
                    // PLSQLWalker.g:289:10: FOLLOWS_VK
                    {
                    match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_non_dml_event2312); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "non_dml_event"



    // $ANTLR start "dml_event_clause"
    // PLSQLWalker.g:292:1: dml_event_clause : ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) ;
    public final void dml_event_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:293:5: ( ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) )
            // PLSQLWalker.g:293:10: ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) )
            {
            match(input,DML_EVENT,FOLLOW_DML_EVENT_in_dml_event_clause2333); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:293:22: ( dml_event_element )+
            int cnt80=0;
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==DML_EVENT_ELEMENT) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // PLSQLWalker.g:293:22: dml_event_element
            	    {
            	    pushFollow(FOLLOW_dml_event_element_in_dml_event_clause2335);
            	    dml_event_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);


            match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause2339); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_tableview_name_in_dml_event_clause2341);
            tableview_name();

            state._fsp--;


            // PLSQLWalker.g:293:76: ( dml_event_nested_clause )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==NESTED_VK) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // PLSQLWalker.g:293:76: dml_event_nested_clause
                    {
                    pushFollow(FOLLOW_dml_event_nested_clause_in_dml_event_clause2343);
                    dml_event_nested_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "dml_event_clause"



    // $ANTLR start "dml_event_element"
    // PLSQLWalker.g:296:1: dml_event_element : ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) ;
    public final void dml_event_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:297:5: ( ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) )
            // PLSQLWalker.g:297:10: ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) )
            {
            match(input,DML_EVENT_ELEMENT,FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element2369); 

            match(input, Token.DOWN, null); 
            if ( input.LA(1)==SQL92_RESERVED_DELETE||input.LA(1)==SQL92_RESERVED_INSERT||input.LA(1)==SQL92_RESERVED_UPDATE ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input,COLUMNS,FOLLOW_COLUMNS_in_dml_event_element2380); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:297:108: ( column_name )*
                loop82:
                do {
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==COLUMN_NAME) ) {
                        alt82=1;
                    }


                    switch (alt82) {
                	case 1 :
                	    // PLSQLWalker.g:297:108: column_name
                	    {
                	    pushFollow(FOLLOW_column_name_in_dml_event_element2382);
                	    column_name();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop82;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "dml_event_element"



    // $ANTLR start "dml_event_nested_clause"
    // PLSQLWalker.g:300:1: dml_event_nested_clause : ^( NESTED_VK tableview_name ) ;
    public final void dml_event_nested_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:301:5: ( ^( NESTED_VK tableview_name ) )
            // PLSQLWalker.g:301:10: ^( NESTED_VK tableview_name )
            {
            match(input,NESTED_VK,FOLLOW_NESTED_VK_in_dml_event_nested_clause2406); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_tableview_name_in_dml_event_nested_clause2408);
            tableview_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "dml_event_nested_clause"



    // $ANTLR start "referencing_clause"
    // PLSQLWalker.g:304:1: referencing_clause : ^( REFERENCING_VK ( referencing_element )+ ) ;
    public final void referencing_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:305:5: ( ^( REFERENCING_VK ( referencing_element )+ ) )
            // PLSQLWalker.g:305:10: ^( REFERENCING_VK ( referencing_element )+ )
            {
            match(input,REFERENCING_VK,FOLLOW_REFERENCING_VK_in_referencing_clause2430); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:305:27: ( referencing_element )+
            int cnt83=0;
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==NEW_VK||LA83_0==OLD_VK||LA83_0==PARENT_VK) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // PLSQLWalker.g:305:27: referencing_element
            	    {
            	    pushFollow(FOLLOW_referencing_element_in_referencing_clause2432);
            	    referencing_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt83 >= 1 ) break loop83;
                        EarlyExitException eee =
                            new EarlyExitException(83, input);
                        throw eee;
                }
                cnt83++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "referencing_clause"



    // $ANTLR start "referencing_element"
    // PLSQLWalker.g:308:1: referencing_element : ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) ;
    public final void referencing_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:309:5: ( ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) )
            // PLSQLWalker.g:309:10: ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias )
            {
            if ( input.LA(1)==NEW_VK||input.LA(1)==OLD_VK||input.LA(1)==PARENT_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_alias_in_referencing_element2463);
            alias();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "referencing_element"



    // $ANTLR start "drop_type"
    // PLSQLWalker.g:317:1: drop_type : ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) ;
    public final void drop_type() throws RecognitionException {
        try {
            // PLSQLWalker.g:318:5: ( ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) )
            // PLSQLWalker.g:318:10: ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? )
            {
            match(input,DROP_TYPE,FOLLOW_DROP_TYPE_in_drop_type2490); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_type_name_in_drop_type2492);
            type_name();

            state._fsp--;


            // PLSQLWalker.g:318:32: ( BODY_VK )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==BODY_VK) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // PLSQLWalker.g:318:32: BODY_VK
                    {
                    match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_type2494); 

                    }
                    break;

            }


            // PLSQLWalker.g:318:41: ( FORCE_VK )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==FORCE_VK) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // PLSQLWalker.g:318:41: FORCE_VK
                    {
                    match(input,FORCE_VK,FOLLOW_FORCE_VK_in_drop_type2497); 

                    }
                    break;

            }


            // PLSQLWalker.g:318:51: ( VALIDATE_VK )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==VALIDATE_VK) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // PLSQLWalker.g:318:51: VALIDATE_VK
                    {
                    match(input,VALIDATE_VK,FOLLOW_VALIDATE_VK_in_drop_type2500); 

                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "drop_type"



    // $ANTLR start "alter_type"
    // PLSQLWalker.g:321:1: alter_type : ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) ;
    public final void alter_type() throws RecognitionException {
        try {
            // PLSQLWalker.g:322:5: ( ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) )
            // PLSQLWalker.g:322:10: ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? )
            {
            match(input,ALTER_TYPE,FOLLOW_ALTER_TYPE_in_alter_type2523); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_type_name_in_alter_type2525);
            type_name();

            state._fsp--;


            // PLSQLWalker.g:323:13: ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
            int alt95=6;
            switch ( input.LA(1) ) {
            case REPLACE_VK:
                {
                alt95=1;
                }
                break;
            case ALTER_ATTRIBUTE:
                {
                alt95=2;
                }
                break;
            case ALTER_METHOD:
                {
                alt95=3;
                }
                break;
            case ALTER_COLLECTION:
                {
                alt95=4;
                }
                break;
            case MODIFIER:
                {
                alt95=5;
                }
                break;
            case COMPILE_VK:
                {
                alt95=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }

            switch (alt95) {
                case 1 :
                    // PLSQLWalker.g:323:18: ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? )
                    {
                    match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_alter_type2546); 

                    match(input, Token.DOWN, null); 
                    match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_alter_type2549); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:323:48: ( element_spec )+
                    int cnt87=0;
                    loop87:
                    do {
                        int alt87=2;
                        int LA87_0 = input.LA(1);

                        if ( (LA87_0==ELEMENT_SPEC) ) {
                            alt87=1;
                        }


                        switch (alt87) {
                    	case 1 :
                    	    // PLSQLWalker.g:323:48: element_spec
                    	    {
                    	    pushFollow(FOLLOW_element_spec_in_alter_type2551);
                    	    element_spec();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt87 >= 1 ) break loop87;
                                EarlyExitException eee =
                                    new EarlyExitException(87, input);
                                throw eee;
                        }
                        cnt87++;
                    } while (true);


                    match(input, Token.UP, null); 


                    // PLSQLWalker.g:323:63: ( invoker_rights_clause )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==AUTHID_VK) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // PLSQLWalker.g:323:63: invoker_rights_clause
                            {
                            pushFollow(FOLLOW_invoker_rights_clause_in_alter_type2555);
                            invoker_rights_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:324:18: ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) )
                    {
                    match(input,ALTER_ATTRIBUTE,FOLLOW_ALTER_ATTRIBUTE_in_alter_type2577); 

                    match(input, Token.DOWN, null); 
                    if ( input.LA(1)==ADD_VK||input.LA(1)==MODIFY_VK||input.LA(1)==SQL92_RESERVED_DROP ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_alter_type2588); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:324:88: ( attribute_definition )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( (LA89_0==ATTRIBUTE) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // PLSQLWalker.g:324:88: attribute_definition
                    	    {
                    	    pushFollow(FOLLOW_attribute_definition_in_alter_type2590);
                    	    attribute_definition();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);


                    match(input, Token.UP, null); 


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:325:18: ^( ALTER_METHOD ( alter_method_element )+ )
                    {
                    match(input,ALTER_METHOD,FOLLOW_ALTER_METHOD_in_alter_type2613); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:325:33: ( alter_method_element )+
                    int cnt90=0;
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==ALTER_METHOD_ELEMENT) ) {
                            alt90=1;
                        }


                        switch (alt90) {
                    	case 1 :
                    	    // PLSQLWalker.g:325:33: alter_method_element
                    	    {
                    	    pushFollow(FOLLOW_alter_method_element_in_alter_type2615);
                    	    alter_method_element();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt90 >= 1 ) break loop90;
                                EarlyExitException eee =
                                    new EarlyExitException(90, input);
                                throw eee;
                        }
                        cnt90++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:326:18: alter_collection_clauses
                    {
                    pushFollow(FOLLOW_alter_collection_clauses_in_alter_type2636);
                    alter_collection_clauses();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:327:18: modifier_clause
                    {
                    pushFollow(FOLLOW_modifier_clause_in_alter_type2655);
                    modifier_clause();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:328:18: ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
                    {
                    match(input,COMPILE_VK,FOLLOW_COMPILE_VK_in_alter_type2675); 

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); 
                        // PLSQLWalker.g:328:31: ( SPECIFICATION_VK | BODY_VK )?
                        int alt91=2;
                        int LA91_0 = input.LA(1);

                        if ( (LA91_0==BODY_VK||LA91_0==SPECIFICATION_VK) ) {
                            alt91=1;
                        }
                        switch (alt91) {
                            case 1 :
                                // PLSQLWalker.g:
                                {
                                if ( input.LA(1)==BODY_VK||input.LA(1)==SPECIFICATION_VK ) {
                                    input.consume();
                                    state.errorRecovery=false;
                                }
                                else {
                                    MismatchedSetException mse = new MismatchedSetException(null,input);
                                    throw mse;
                                }


                                }
                                break;

                        }


                        // PLSQLWalker.g:328:59: ( DEBUG_VK )?
                        int alt92=2;
                        int LA92_0 = input.LA(1);

                        if ( (LA92_0==DEBUG_VK) ) {
                            alt92=1;
                        }
                        switch (alt92) {
                            case 1 :
                                // PLSQLWalker.g:328:59: DEBUG_VK
                                {
                                match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_type2684); 

                                }
                                break;

                        }


                        // PLSQLWalker.g:328:69: ( REUSE_VK )?
                        int alt93=2;
                        int LA93_0 = input.LA(1);

                        if ( (LA93_0==REUSE_VK) ) {
                            alt93=1;
                        }
                        switch (alt93) {
                            case 1 :
                                // PLSQLWalker.g:328:69: REUSE_VK
                                {
                                match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_type2687); 

                                }
                                break;

                        }


                        // PLSQLWalker.g:328:79: ( compiler_parameters_clause )*
                        loop94:
                        do {
                            int alt94=2;
                            int LA94_0 = input.LA(1);

                            if ( (LA94_0==COMPILER_PARAMETER) ) {
                                alt94=1;
                            }


                            switch (alt94) {
                        	case 1 :
                        	    // PLSQLWalker.g:328:79: compiler_parameters_clause
                        	    {
                        	    pushFollow(FOLLOW_compiler_parameters_clause_in_alter_type2690);
                        	    compiler_parameters_clause();

                        	    state._fsp--;


                        	    }
                        	    break;

                        	default :
                        	    break loop94;
                            }
                        } while (true);


                        match(input, Token.UP, null); 
                    }


                    }
                    break;

            }


            // PLSQLWalker.g:330:13: ( dependent_handling_clause )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==DEPENDENT_HANDLING) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // PLSQLWalker.g:330:13: dependent_handling_clause
                    {
                    pushFollow(FOLLOW_dependent_handling_clause_in_alter_type2721);
                    dependent_handling_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "alter_type"



    // $ANTLR start "alter_method_element"
    // PLSQLWalker.g:336:1: alter_method_element : ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) ;
    public final void alter_method_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:337:5: ( ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) )
            // PLSQLWalker.g:337:10: ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? )
            {
            match(input,ALTER_METHOD_ELEMENT,FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element2755); 

            match(input, Token.DOWN, null); 
            if ( input.LA(1)==ADD_VK||input.LA(1)==SQL92_RESERVED_DROP ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // PLSQLWalker.g:337:62: ( map_order_function_spec )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==MAP_VK||LA97_0==SQL92_RESERVED_ORDER) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // PLSQLWalker.g:337:62: map_order_function_spec
                    {
                    pushFollow(FOLLOW_map_order_function_spec_in_alter_method_element2763);
                    map_order_function_spec();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:337:87: ( subprogram_spec )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==MEMBER_VK||LA98_0==STATIC_VK) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // PLSQLWalker.g:337:87: subprogram_spec
                    {
                    pushFollow(FOLLOW_subprogram_spec_in_alter_method_element2766);
                    subprogram_spec();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "alter_method_element"



    // $ANTLR start "attribute_definition"
    // PLSQLWalker.g:340:1: attribute_definition : ^( ATTRIBUTE attribute_name ( type_spec )? ) ;
    public final void attribute_definition() throws RecognitionException {
        try {
            // PLSQLWalker.g:341:5: ( ^( ATTRIBUTE attribute_name ( type_spec )? ) )
            // PLSQLWalker.g:341:10: ^( ATTRIBUTE attribute_name ( type_spec )? )
            {
            match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_definition2789); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_attribute_name_in_attribute_definition2791);
            attribute_name();

            state._fsp--;


            // PLSQLWalker.g:341:37: ( type_spec )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==CUSTOM_TYPE||LA99_0==INTERVAL_DATATYPE||LA99_0==NATIVE_DATATYPE) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // PLSQLWalker.g:341:37: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_attribute_definition2793);
                    type_spec();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "attribute_definition"



    // $ANTLR start "alter_collection_clauses"
    // PLSQLWalker.g:344:1: alter_collection_clauses : ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) ;
    public final void alter_collection_clauses() throws RecognitionException {
        try {
            // PLSQLWalker.g:345:5: ( ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) )
            // PLSQLWalker.g:345:10: ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) )
            {
            match(input,ALTER_COLLECTION,FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses2816); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:346:13: ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==TYPE_VK) ) {
                alt100=1;
            }
            else if ( (LA100_0==LIMIT_VK) ) {
                alt100=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // PLSQLWalker.g:346:18: ^( TYPE_VK type_spec )
                    {
                    match(input,TYPE_VK,FOLLOW_TYPE_VK_in_alter_collection_clauses2837); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_type_spec_in_alter_collection_clauses2839);
                    type_spec();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:347:18: ^( LIMIT_VK expression )
                    {
                    match(input,LIMIT_VK,FOLLOW_LIMIT_VK_in_alter_collection_clauses2860); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_alter_collection_clauses2862);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "alter_collection_clauses"



    // $ANTLR start "dependent_handling_clause"
    // PLSQLWalker.g:352:1: dependent_handling_clause : ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) ;
    public final void dependent_handling_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:353:5: ( ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) )
            // PLSQLWalker.g:353:10: ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) )
            {
            match(input,DEPENDENT_HANDLING,FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause2909); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:354:13: ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==INVALIDATE_VK) ) {
                alt103=1;
            }
            else if ( (LA103_0==CASCADE_VK) ) {
                alt103=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }
            switch (alt103) {
                case 1 :
                    // PLSQLWalker.g:354:18: INVALIDATE_VK
                    {
                    match(input,INVALIDATE_VK,FOLLOW_INVALIDATE_VK_in_dependent_handling_clause2929); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:355:18: ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? )
                    {
                    match(input,CASCADE_VK,FOLLOW_CASCADE_VK_in_dependent_handling_clause2949); 

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); 
                        // PLSQLWalker.g:356:21: ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )?
                        int alt102=3;
                        int LA102_0 = input.LA(1);

                        if ( (LA102_0==CONVERT_VK) ) {
                            alt102=1;
                        }
                        else if ( (LA102_0==INCLUDING_VK||LA102_0==SQL92_RESERVED_NOT) ) {
                            alt102=2;
                        }
                        switch (alt102) {
                            case 1 :
                                // PLSQLWalker.g:356:26: CONVERT_VK
                                {
                                match(input,CONVERT_VK,FOLLOW_CONVERT_VK_in_dependent_handling_clause2977); 

                                }
                                break;
                            case 2 :
                                // PLSQLWalker.g:357:26: ( SQL92_RESERVED_NOT )? INCLUDING_VK
                                {
                                // PLSQLWalker.g:357:26: ( SQL92_RESERVED_NOT )?
                                int alt101=2;
                                int LA101_0 = input.LA(1);

                                if ( (LA101_0==SQL92_RESERVED_NOT) ) {
                                    alt101=1;
                                }
                                switch (alt101) {
                                    case 1 :
                                        // PLSQLWalker.g:357:26: SQL92_RESERVED_NOT
                                        {
                                        match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause3004); 

                                        }
                                        break;

                                }


                                match(input,INCLUDING_VK,FOLLOW_INCLUDING_VK_in_dependent_handling_clause3007); 

                                }
                                break;

                        }


                        match(input, Token.UP, null); 
                    }


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "dependent_handling_clause"



    // $ANTLR start "dependent_exceptions_part"
    // PLSQLWalker.g:364:1: dependent_exceptions_part : ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) ;
    public final void dependent_exceptions_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:365:5: ( ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) )
            // PLSQLWalker.g:365:10: ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name )
            {
            match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part3093); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:365:26: ( FORCE_VK )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==FORCE_VK) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // PLSQLWalker.g:365:26: FORCE_VK
                    {
                    match(input,FORCE_VK,FOLLOW_FORCE_VK_in_dependent_exceptions_part3095); 

                    }
                    break;

            }


            pushFollow(FOLLOW_tableview_name_in_dependent_exceptions_part3098);
            tableview_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "dependent_exceptions_part"



    // $ANTLR start "create_type"
    // PLSQLWalker.g:370:1: create_type : ( ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) | ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) );
    public final void create_type() throws RecognitionException {
        try {
            // PLSQLWalker.g:371:5: ( ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) | ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==CREATE_TYPE_BODY) ) {
                alt110=1;
            }
            else if ( (LA110_0==CREATE_TYPE_SPEC) ) {
                alt110=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // PLSQLWalker.g:371:10: ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) )
                    {
                    match(input,CREATE_TYPE_BODY,FOLLOW_CREATE_TYPE_BODY_in_create_type3122); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:371:29: ( REPLACE_VK )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==REPLACE_VK) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // PLSQLWalker.g:371:29: REPLACE_VK
                            {
                            match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type3124); 

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_name_in_create_type3127);
                    type_name();

                    state._fsp--;


                    match(input,TYPE_BODY_ELEMENTS,FOLLOW_TYPE_BODY_ELEMENTS_in_create_type3130); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:371:72: ( type_body_elements )+
                    int cnt106=0;
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==MAP_VK||LA106_0==MEMBER_VK||LA106_0==SQL92_RESERVED_ORDER||LA106_0==STATIC_VK) ) {
                            alt106=1;
                        }


                        switch (alt106) {
                    	case 1 :
                    	    // PLSQLWalker.g:371:72: type_body_elements
                    	    {
                    	    pushFollow(FOLLOW_type_body_elements_in_create_type3132);
                    	    type_body_elements();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt106 >= 1 ) break loop106;
                                EarlyExitException eee =
                                    new EarlyExitException(106, input);
                                throw eee;
                        }
                        cnt106++;
                    } while (true);


                    match(input, Token.UP, null); 


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:372:10: ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? )
                    {
                    match(input,CREATE_TYPE_SPEC,FOLLOW_CREATE_TYPE_SPEC_in_create_type3147); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:372:29: ( REPLACE_VK )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==REPLACE_VK) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // PLSQLWalker.g:372:29: REPLACE_VK
                            {
                            match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type3149); 

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_name_in_create_type3152);
                    type_name();

                    state._fsp--;


                    // PLSQLWalker.g:372:51: ( CHAR_STRING )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==CHAR_STRING) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // PLSQLWalker.g:372:51: CHAR_STRING
                            {
                            match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_create_type3154); 

                            }
                            break;

                    }


                    // PLSQLWalker.g:372:64: ( object_type_def )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==OBJECT_TYPE_DEF) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // PLSQLWalker.g:372:64: object_type_def
                            {
                            pushFollow(FOLLOW_object_type_def_in_create_type3157);
                            object_type_def();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "create_type"



    // $ANTLR start "object_type_def"
    // PLSQLWalker.g:375:1: object_type_def : ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) ;
    public final void object_type_def() throws RecognitionException {
        try {
            // PLSQLWalker.g:376:5: ( ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) )
            // PLSQLWalker.g:376:10: ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) )
            {
            match(input,OBJECT_TYPE_DEF,FOLLOW_OBJECT_TYPE_DEF_in_object_type_def3180); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:376:28: ( object_as_part | object_under_part )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==OBJECT_AS) ) {
                alt111=1;
            }
            else if ( (LA111_0==UNDER_VK) ) {
                alt111=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // PLSQLWalker.g:376:29: object_as_part
                    {
                    pushFollow(FOLLOW_object_as_part_in_object_type_def3183);
                    object_as_part();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:376:44: object_under_part
                    {
                    pushFollow(FOLLOW_object_under_part_in_object_type_def3185);
                    object_under_part();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:376:63: ( invoker_rights_clause )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==AUTHID_VK) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // PLSQLWalker.g:376:63: invoker_rights_clause
                    {
                    pushFollow(FOLLOW_invoker_rights_clause_in_object_type_def3188);
                    invoker_rights_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:377:14: ( sqlj_object_type )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==JAVA_VK) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // PLSQLWalker.g:377:14: sqlj_object_type
                    {
                    pushFollow(FOLLOW_sqlj_object_type_in_object_type_def3204);
                    sqlj_object_type();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:377:32: ( modifier_clause )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==MODIFIER) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // PLSQLWalker.g:377:32: modifier_clause
            	    {
            	    pushFollow(FOLLOW_modifier_clause_in_object_type_def3207);
            	    modifier_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_object_type_def3211); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:377:66: ( element_spec )*
                loop115:
                do {
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==ELEMENT_SPEC) ) {
                        alt115=1;
                    }


                    switch (alt115) {
                	case 1 :
                	    // PLSQLWalker.g:377:66: element_spec
                	    {
                	    pushFollow(FOLLOW_element_spec_in_object_type_def3213);
                	    element_spec();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop115;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "object_type_def"



    // $ANTLR start "object_as_part"
    // PLSQLWalker.g:380:1: object_as_part : ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) ;
    public final void object_as_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:381:5: ( ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) )
            // PLSQLWalker.g:381:10: ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) )
            {
            match(input,OBJECT_AS,FOLLOW_OBJECT_AS_in_object_as_part3239); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:381:22: ( OBJECT_VK | varray_type_def | nested_table_type_def )
            int alt116=3;
            switch ( input.LA(1) ) {
            case OBJECT_VK:
                {
                alt116=1;
                }
                break;
            case SQL92_RESERVED_NULL:
            case VARR_ARRAY_DEF:
                {
                alt116=2;
                }
                break;
            case NESTED_TABLE_TYPE_DEF:
                {
                alt116=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }

            switch (alt116) {
                case 1 :
                    // PLSQLWalker.g:381:23: OBJECT_VK
                    {
                    match(input,OBJECT_VK,FOLLOW_OBJECT_VK_in_object_as_part3242); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:381:33: varray_type_def
                    {
                    pushFollow(FOLLOW_varray_type_def_in_object_as_part3244);
                    varray_type_def();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:381:49: nested_table_type_def
                    {
                    pushFollow(FOLLOW_nested_table_type_def_in_object_as_part3246);
                    nested_table_type_def();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "object_as_part"



    // $ANTLR start "object_under_part"
    // PLSQLWalker.g:384:1: object_under_part : ^( UNDER_VK type_spec ) ;
    public final void object_under_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:385:5: ( ^( UNDER_VK type_spec ) )
            // PLSQLWalker.g:385:10: ^( UNDER_VK type_spec )
            {
            match(input,UNDER_VK,FOLLOW_UNDER_VK_in_object_under_part3269); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_type_spec_in_object_under_part3271);
            type_spec();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "object_under_part"



    // $ANTLR start "nested_table_type_def"
    // PLSQLWalker.g:388:1: nested_table_type_def : ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ) ;
    public final void nested_table_type_def() throws RecognitionException {
        try {
            // PLSQLWalker.g:389:5: ( ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ) )
            // PLSQLWalker.g:389:10: ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? )
            {
            match(input,NESTED_TABLE_TYPE_DEF,FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def3293); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_type_spec_in_nested_table_type_def3295);
            type_spec();

            state._fsp--;


            // PLSQLWalker.g:389:44: ( SQL92_RESERVED_NULL )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==SQL92_RESERVED_NULL) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // PLSQLWalker.g:389:44: SQL92_RESERVED_NULL
                    {
                    match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def3297); 

                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "nested_table_type_def"



    // $ANTLR start "sqlj_object_type"
    // PLSQLWalker.g:392:1: sqlj_object_type : ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) ;
    public final void sqlj_object_type() throws RecognitionException {
        try {
            // PLSQLWalker.g:393:5: ( ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) )
            // PLSQLWalker.g:393:10: ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) )
            {
            match(input,JAVA_VK,FOLLOW_JAVA_VK_in_sqlj_object_type3321); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_sqlj_object_type3323);
            expression();

            state._fsp--;


            if ( input.LA(1)==CUSTOMDATUM_VK||input.LA(1)==ORADATA_VK||input.LA(1)==SQLDATA_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "sqlj_object_type"



    // $ANTLR start "type_body_elements"
    // PLSQLWalker.g:396:1: type_body_elements : ( map_order_func_declaration | subprog_decl_in_type );
    public final void type_body_elements() throws RecognitionException {
        try {
            // PLSQLWalker.g:397:5: ( map_order_func_declaration | subprog_decl_in_type )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==MAP_VK||LA118_0==SQL92_RESERVED_ORDER) ) {
                alt118=1;
            }
            else if ( (LA118_0==MEMBER_VK||LA118_0==STATIC_VK) ) {
                alt118=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }
            switch (alt118) {
                case 1 :
                    // PLSQLWalker.g:397:10: map_order_func_declaration
                    {
                    pushFollow(FOLLOW_map_order_func_declaration_in_type_body_elements3352);
                    map_order_func_declaration();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:398:10: subprog_decl_in_type
                    {
                    pushFollow(FOLLOW_subprog_decl_in_type_in_type_body_elements3363);
                    subprog_decl_in_type();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "type_body_elements"



    // $ANTLR start "map_order_func_declaration"
    // PLSQLWalker.g:401:1: map_order_func_declaration : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) ;
    public final void map_order_func_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:402:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) )
            // PLSQLWalker.g:402:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body )
            {
            if ( input.LA(1)==MAP_VK||input.LA(1)==SQL92_RESERVED_ORDER ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_create_function_body_in_map_order_func_declaration3390);
            create_function_body();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "map_order_func_declaration"



    // $ANTLR start "subprog_decl_in_type"
    // PLSQLWalker.g:405:1: subprog_decl_in_type : ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) ;
    public final void subprog_decl_in_type() throws RecognitionException {
        try {
            // PLSQLWalker.g:406:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) )
            // PLSQLWalker.g:406:10: ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) )
            {
            if ( input.LA(1)==MEMBER_VK||input.LA(1)==STATIC_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:407:13: ( create_procedure_body | create_function_body | constructor_declaration )
            int alt119=3;
            switch ( input.LA(1) ) {
            case CREATE_PROCEDURE:
                {
                alt119=1;
                }
                break;
            case CREATE_FUNCTION:
                {
                alt119=2;
                }
                break;
            case CONSTRUCTOR_VK:
                {
                alt119=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;

            }

            switch (alt119) {
                case 1 :
                    // PLSQLWalker.g:407:18: create_procedure_body
                    {
                    pushFollow(FOLLOW_create_procedure_body_in_subprog_decl_in_type3435);
                    create_procedure_body();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:408:18: create_function_body
                    {
                    pushFollow(FOLLOW_create_function_body_in_subprog_decl_in_type3454);
                    create_function_body();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:409:18: constructor_declaration
                    {
                    pushFollow(FOLLOW_constructor_declaration_in_subprog_decl_in_type3473);
                    constructor_declaration();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "subprog_decl_in_type"



    // $ANTLR start "constructor_declaration"
    // PLSQLWalker.g:414:1: constructor_declaration : ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) ;
    public final void constructor_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:415:5: ( ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) )
            // PLSQLWalker.g:415:10: ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) )
            {
            match(input,CONSTRUCTOR_VK,FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration3518); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_type_spec_in_constructor_declaration3520);
            type_spec();

            state._fsp--;


            // PLSQLWalker.g:415:37: ( FINAL_VK )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==FINAL_VK) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // PLSQLWalker.g:415:37: FINAL_VK
                    {
                    match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_declaration3522); 

                    }
                    break;

            }


            // PLSQLWalker.g:415:47: ( INSTANTIABLE_VK )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==INSTANTIABLE_VK) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // PLSQLWalker.g:415:47: INSTANTIABLE_VK
                    {
                    match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_declaration3525); 

                    }
                    break;

            }


            match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_declaration3529); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:415:77: ( type_elements_parameter )*
                loop122:
                do {
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==PARAMETER) ) {
                        alt122=1;
                    }


                    switch (alt122) {
                	case 1 :
                	    // PLSQLWalker.g:415:77: type_elements_parameter
                	    {
                	    pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration3531);
                	    type_elements_parameter();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop122;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            // PLSQLWalker.g:416:13: ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==CALL_MODE) ) {
                alt124=1;
            }
            else if ( (LA124_0==BODY_MODE) ) {
                alt124=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // PLSQLWalker.g:416:18: ^( CALL_MODE call_spec )
                    {
                    match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_declaration3554); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_call_spec_in_constructor_declaration3556);
                    call_spec();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:417:18: ^( BODY_MODE ( declare_spec )* body )
                    {
                    match(input,BODY_MODE,FOLLOW_BODY_MODE_in_constructor_declaration3577); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:417:30: ( declare_spec )*
                    loop123:
                    do {
                        int alt123=2;
                        int LA123_0 = input.LA(1);

                        if ( (LA123_0==CREATE_FUNCTION||LA123_0==CREATE_PROCEDURE||LA123_0==CURSOR_DECLARE||LA123_0==EXCEPTION_DECLARE||LA123_0==PRAGMA_DECLARE||(LA123_0 >= RECORD_TYPE_DECLARE && LA123_0 <= RECORD_VAR_DECLARE)||LA123_0==SUBTYPE_DECLARE||(LA123_0 >= TABLE_TYPE_DECLARE && LA123_0 <= TABLE_VAR_DECLARE)||LA123_0==VARIABLE_DECLARE) ) {
                            alt123=1;
                        }


                        switch (alt123) {
                    	case 1 :
                    	    // PLSQLWalker.g:417:30: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_constructor_declaration3579);
                    	    declare_spec();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop123;
                        }
                    } while (true);


                    pushFollow(FOLLOW_body_in_constructor_declaration3582);
                    body();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "constructor_declaration"



    // $ANTLR start "modifier_clause"
    // PLSQLWalker.g:426:1: modifier_clause : ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) ;
    public final void modifier_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:427:5: ( ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) )
            // PLSQLWalker.g:427:10: ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) )
            {
            match(input,MODIFIER,FOLLOW_MODIFIER_in_modifier_clause3632); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:427:21: ( SQL92_RESERVED_NOT )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==SQL92_RESERVED_NOT) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // PLSQLWalker.g:427:21: SQL92_RESERVED_NOT
                    {
                    match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause3634); 

                    }
                    break;

            }


            if ( input.LA(1)==FINAL_VK||input.LA(1)==INSTANTIABLE_VK||input.LA(1)==OVERRIDING_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "modifier_clause"



    // $ANTLR start "sqlj_object_type_attr"
    // PLSQLWalker.g:430:1: sqlj_object_type_attr : ^( EXTERNAL_VK expression ) ;
    public final void sqlj_object_type_attr() throws RecognitionException {
        try {
            // PLSQLWalker.g:431:5: ( ^( EXTERNAL_VK expression ) )
            // PLSQLWalker.g:431:10: ^( EXTERNAL_VK expression )
            {
            match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr3665); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_sqlj_object_type_attr3667);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "sqlj_object_type_attr"



    // $ANTLR start "element_spec"
    // PLSQLWalker.g:434:1: element_spec : ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) ;
    public final void element_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:435:5: ( ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) )
            // PLSQLWalker.g:435:10: ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
            {
            match(input,ELEMENT_SPEC,FOLLOW_ELEMENT_SPEC_in_element_spec3689); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:435:25: ( element_spec_options )+
            int cnt126=0;
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==CONSTRUCTOR_SPEC||LA126_0==FIELD_SPEC||LA126_0==MAP_VK||LA126_0==MEMBER_VK||LA126_0==SQL92_RESERVED_ORDER||LA126_0==STATIC_VK) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // PLSQLWalker.g:435:25: element_spec_options
            	    {
            	    pushFollow(FOLLOW_element_spec_options_in_element_spec3691);
            	    element_spec_options();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);


            // PLSQLWalker.g:435:47: ( modifier_clause )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==MODIFIER) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // PLSQLWalker.g:435:47: modifier_clause
                    {
                    pushFollow(FOLLOW_modifier_clause_in_element_spec3694);
                    modifier_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:435:64: ( pragma_clause )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==PRAGMA_VK) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // PLSQLWalker.g:435:64: pragma_clause
                    {
                    pushFollow(FOLLOW_pragma_clause_in_element_spec3697);
                    pragma_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "element_spec"



    // $ANTLR start "element_spec_options"
    // PLSQLWalker.g:438:1: element_spec_options : ( subprogram_spec | constructor_spec | map_order_function_spec | ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) );
    public final void element_spec_options() throws RecognitionException {
        try {
            // PLSQLWalker.g:439:5: ( subprogram_spec | constructor_spec | map_order_function_spec | ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) )
            int alt130=4;
            switch ( input.LA(1) ) {
            case MEMBER_VK:
            case STATIC_VK:
                {
                alt130=1;
                }
                break;
            case CONSTRUCTOR_SPEC:
                {
                alt130=2;
                }
                break;
            case MAP_VK:
            case SQL92_RESERVED_ORDER:
                {
                alt130=3;
                }
                break;
            case FIELD_SPEC:
                {
                alt130=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;

            }

            switch (alt130) {
                case 1 :
                    // PLSQLWalker.g:439:10: subprogram_spec
                    {
                    pushFollow(FOLLOW_subprogram_spec_in_element_spec_options3719);
                    subprogram_spec();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:440:10: constructor_spec
                    {
                    pushFollow(FOLLOW_constructor_spec_in_element_spec_options3730);
                    constructor_spec();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:441:10: map_order_function_spec
                    {
                    pushFollow(FOLLOW_map_order_function_spec_in_element_spec_options3741);
                    map_order_function_spec();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:442:10: ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? )
                    {
                    match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_element_spec_options3753); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_id_in_element_spec_options3755);
                    id();

                    state._fsp--;


                    pushFollow(FOLLOW_type_spec_in_element_spec_options3757);
                    type_spec();

                    state._fsp--;


                    // PLSQLWalker.g:442:36: ( sqlj_object_type_attr )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==EXTERNAL_VK) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // PLSQLWalker.g:442:36: sqlj_object_type_attr
                            {
                            pushFollow(FOLLOW_sqlj_object_type_attr_in_element_spec_options3759);
                            sqlj_object_type_attr();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "element_spec_options"



    // $ANTLR start "subprogram_spec"
    // PLSQLWalker.g:445:1: subprogram_spec : ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) ;
    public final void subprogram_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:446:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) )
            // PLSQLWalker.g:446:10: ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) )
            {
            if ( input.LA(1)==MEMBER_VK||input.LA(1)==STATIC_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:447:13: ( procedure_spec | function_spec )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==PROCEDURE_SPEC) ) {
                alt131=1;
            }
            else if ( (LA131_0==FUNCTION_SPEC) ) {
                alt131=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
                case 1 :
                    // PLSQLWalker.g:447:18: procedure_spec
                    {
                    pushFollow(FOLLOW_procedure_spec_in_subprogram_spec3805);
                    procedure_spec();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:448:18: function_spec
                    {
                    pushFollow(FOLLOW_function_spec_in_subprogram_spec3824);
                    function_spec();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "subprogram_spec"



    // $ANTLR start "constructor_spec"
    // PLSQLWalker.g:453:1: constructor_spec : ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) ;
    public final void constructor_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:454:5: ( ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) )
            // PLSQLWalker.g:454:10: ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? )
            {
            match(input,CONSTRUCTOR_SPEC,FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec3869); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_type_spec_in_constructor_spec3871);
            type_spec();

            state._fsp--;


            // PLSQLWalker.g:454:39: ( FINAL_VK )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==FINAL_VK) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // PLSQLWalker.g:454:39: FINAL_VK
                    {
                    match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_spec3873); 

                    }
                    break;

            }


            // PLSQLWalker.g:454:49: ( INSTANTIABLE_VK )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==INSTANTIABLE_VK) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // PLSQLWalker.g:454:49: INSTANTIABLE_VK
                    {
                    match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_spec3876); 

                    }
                    break;

            }


            match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_spec3880); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:454:79: ( type_elements_parameter )*
                loop134:
                do {
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==PARAMETER) ) {
                        alt134=1;
                    }


                    switch (alt134) {
                	case 1 :
                	    // PLSQLWalker.g:454:79: type_elements_parameter
                	    {
                	    pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec3882);
                	    type_elements_parameter();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop134;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            // PLSQLWalker.g:454:105: ( constructor_call_mode )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==CALL_MODE) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // PLSQLWalker.g:454:105: constructor_call_mode
                    {
                    pushFollow(FOLLOW_constructor_call_mode_in_constructor_spec3886);
                    constructor_call_mode();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "constructor_spec"



    // $ANTLR start "constructor_call_mode"
    // PLSQLWalker.g:457:1: constructor_call_mode : ^( CALL_MODE call_spec ) ;
    public final void constructor_call_mode() throws RecognitionException {
        try {
            // PLSQLWalker.g:458:5: ( ^( CALL_MODE call_spec ) )
            // PLSQLWalker.g:458:10: ^( CALL_MODE call_spec )
            {
            match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_call_mode3909); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_call_spec_in_constructor_call_mode3911);
            call_spec();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "constructor_call_mode"



    // $ANTLR start "map_order_function_spec"
    // PLSQLWalker.g:461:1: map_order_function_spec : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) ;
    public final void map_order_function_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:462:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) )
            // PLSQLWalker.g:462:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec )
            {
            if ( input.LA(1)==MAP_VK||input.LA(1)==SQL92_RESERVED_ORDER ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_function_spec_in_map_order_function_spec3939);
            function_spec();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "map_order_function_spec"



    // $ANTLR start "pragma_clause"
    // PLSQLWalker.g:465:1: pragma_clause : ^( PRAGMA_VK ( pragma_elements )+ ) ;
    public final void pragma_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:466:5: ( ^( PRAGMA_VK ( pragma_elements )+ ) )
            // PLSQLWalker.g:466:10: ^( PRAGMA_VK ( pragma_elements )+ )
            {
            match(input,PRAGMA_VK,FOLLOW_PRAGMA_VK_in_pragma_clause3961); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:466:22: ( pragma_elements )+
            int cnt136=0;
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==CHAR_SET_NAME||LA136_0==ID||LA136_0==SQL92_RESERVED_DEFAULT) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // PLSQLWalker.g:466:22: pragma_elements
            	    {
            	    pushFollow(FOLLOW_pragma_elements_in_pragma_clause3963);
            	    pragma_elements();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt136 >= 1 ) break loop136;
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "pragma_clause"



    // $ANTLR start "pragma_elements"
    // PLSQLWalker.g:469:1: pragma_elements : ( id | SQL92_RESERVED_DEFAULT );
    public final void pragma_elements() throws RecognitionException {
        try {
            // PLSQLWalker.g:470:5: ( id | SQL92_RESERVED_DEFAULT )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==CHAR_SET_NAME||LA137_0==ID) ) {
                alt137=1;
            }
            else if ( (LA137_0==SQL92_RESERVED_DEFAULT) ) {
                alt137=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // PLSQLWalker.g:470:10: id
                    {
                    pushFollow(FOLLOW_id_in_pragma_elements3985);
                    id();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:471:10: SQL92_RESERVED_DEFAULT
                    {
                    match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements3996); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "pragma_elements"



    // $ANTLR start "type_elements_parameter"
    // PLSQLWalker.g:474:1: type_elements_parameter : ^( PARAMETER parameter_name type_spec ) ;
    public final void type_elements_parameter() throws RecognitionException {
        try {
            // PLSQLWalker.g:475:5: ( ^( PARAMETER parameter_name type_spec ) )
            // PLSQLWalker.g:475:10: ^( PARAMETER parameter_name type_spec )
            {
            match(input,PARAMETER,FOLLOW_PARAMETER_in_type_elements_parameter4017); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_parameter_name_in_type_elements_parameter4019);
            parameter_name();

            state._fsp--;


            pushFollow(FOLLOW_type_spec_in_type_elements_parameter4021);
            type_spec();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "type_elements_parameter"



    // $ANTLR start "drop_sequence"
    // PLSQLWalker.g:484:1: drop_sequence : ^( DROP_SEQUENCE sequence_name ) ;
    public final void drop_sequence() throws RecognitionException {
        try {
            // PLSQLWalker.g:485:5: ( ^( DROP_SEQUENCE sequence_name ) )
            // PLSQLWalker.g:485:9: ^( DROP_SEQUENCE sequence_name )
            {
            match(input,DROP_SEQUENCE,FOLLOW_DROP_SEQUENCE_in_drop_sequence4048); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_sequence_name_in_drop_sequence4050);
            sequence_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "drop_sequence"



    // $ANTLR start "alter_sequence"
    // PLSQLWalker.g:488:1: alter_sequence : ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) ;
    public final void alter_sequence() throws RecognitionException {
        try {
            // PLSQLWalker.g:489:5: ( ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) )
            // PLSQLWalker.g:489:10: ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ )
            {
            match(input,ALTER_SEQUENCE,FOLLOW_ALTER_SEQUENCE_in_alter_sequence4072); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_sequence_name_in_alter_sequence4074);
            sequence_name();

            state._fsp--;


            // PLSQLWalker.g:489:41: ( sequence_spec )+
            int cnt138=0;
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==CACHE_VK||LA138_0==CYCLE_VK||LA138_0==INCREMENT_VK||LA138_0==MAXVALUE_VK||LA138_0==MINVALUE_VK||(LA138_0 >= NOCACHE_VK && LA138_0 <= NOCYCLE_VK)||(LA138_0 >= NOMAXVALUE_VK && LA138_0 <= NOMINVALUE_VK)||LA138_0==NOORDER_VK||LA138_0==ORDER_VK||LA138_0==START_VK) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // PLSQLWalker.g:489:41: sequence_spec
            	    {
            	    pushFollow(FOLLOW_sequence_spec_in_alter_sequence4076);
            	    sequence_spec();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt138 >= 1 ) break loop138;
                        EarlyExitException eee =
                            new EarlyExitException(138, input);
                        throw eee;
                }
                cnt138++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "alter_sequence"



    // $ANTLR start "create_sequence"
    // PLSQLWalker.g:492:1: create_sequence : ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) ;
    public final void create_sequence() throws RecognitionException {
        try {
            // PLSQLWalker.g:493:5: ( ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) )
            // PLSQLWalker.g:493:10: ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* )
            {
            match(input,CREATE_SEQUENCE,FOLLOW_CREATE_SEQUENCE_in_create_sequence4099); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_sequence_name_in_create_sequence4101);
            sequence_name();

            state._fsp--;


            // PLSQLWalker.g:493:42: ( sequence_spec )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==CACHE_VK||LA139_0==CYCLE_VK||LA139_0==INCREMENT_VK||LA139_0==MAXVALUE_VK||LA139_0==MINVALUE_VK||(LA139_0 >= NOCACHE_VK && LA139_0 <= NOCYCLE_VK)||(LA139_0 >= NOMAXVALUE_VK && LA139_0 <= NOMINVALUE_VK)||LA139_0==NOORDER_VK||LA139_0==ORDER_VK||LA139_0==START_VK) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // PLSQLWalker.g:493:42: sequence_spec
            	    {
            	    pushFollow(FOLLOW_sequence_spec_in_create_sequence4103);
            	    sequence_spec();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "create_sequence"



    // $ANTLR start "sequence_spec"
    // PLSQLWalker.g:498:1: sequence_spec : ( ^( START_VK UNSIGNED_INTEGER ) | ^( INCREMENT_VK UNSIGNED_INTEGER ) | ^( MAXVALUE_VK UNSIGNED_INTEGER ) | ^( MINVALUE_VK UNSIGNED_INTEGER ) | ^( CACHE_VK UNSIGNED_INTEGER ) | NOMAXVALUE_VK | NOMINVALUE_VK | CYCLE_VK | NOCYCLE_VK | NOCACHE_VK | ORDER_VK | NOORDER_VK );
    public final void sequence_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:499:5: ( ^( START_VK UNSIGNED_INTEGER ) | ^( INCREMENT_VK UNSIGNED_INTEGER ) | ^( MAXVALUE_VK UNSIGNED_INTEGER ) | ^( MINVALUE_VK UNSIGNED_INTEGER ) | ^( CACHE_VK UNSIGNED_INTEGER ) | NOMAXVALUE_VK | NOMINVALUE_VK | CYCLE_VK | NOCYCLE_VK | NOCACHE_VK | ORDER_VK | NOORDER_VK )
            int alt140=12;
            switch ( input.LA(1) ) {
            case START_VK:
                {
                alt140=1;
                }
                break;
            case INCREMENT_VK:
                {
                alt140=2;
                }
                break;
            case MAXVALUE_VK:
                {
                alt140=3;
                }
                break;
            case MINVALUE_VK:
                {
                alt140=4;
                }
                break;
            case CACHE_VK:
                {
                alt140=5;
                }
                break;
            case NOMAXVALUE_VK:
                {
                alt140=6;
                }
                break;
            case NOMINVALUE_VK:
                {
                alt140=7;
                }
                break;
            case CYCLE_VK:
                {
                alt140=8;
                }
                break;
            case NOCYCLE_VK:
                {
                alt140=9;
                }
                break;
            case NOCACHE_VK:
                {
                alt140=10;
                }
                break;
            case ORDER_VK:
                {
                alt140=11;
                }
                break;
            case NOORDER_VK:
                {
                alt140=12;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }

            switch (alt140) {
                case 1 :
                    // PLSQLWalker.g:499:10: ^( START_VK UNSIGNED_INTEGER )
                    {
                    match(input,START_VK,FOLLOW_START_VK_in_sequence_spec4128); 

                    match(input, Token.DOWN, null); 
                    match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4130); 

                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:500:10: ^( INCREMENT_VK UNSIGNED_INTEGER )
                    {
                    match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_sequence_spec4143); 

                    match(input, Token.DOWN, null); 
                    match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4145); 

                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:501:10: ^( MAXVALUE_VK UNSIGNED_INTEGER )
                    {
                    match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_sequence_spec4158); 

                    match(input, Token.DOWN, null); 
                    match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4160); 

                    match(input, Token.UP, null); 


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:502:10: ^( MINVALUE_VK UNSIGNED_INTEGER )
                    {
                    match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_sequence_spec4173); 

                    match(input, Token.DOWN, null); 
                    match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4175); 

                    match(input, Token.UP, null); 


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:503:10: ^( CACHE_VK UNSIGNED_INTEGER )
                    {
                    match(input,CACHE_VK,FOLLOW_CACHE_VK_in_sequence_spec4188); 

                    match(input, Token.DOWN, null); 
                    match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4190); 

                    match(input, Token.UP, null); 


                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:504:10: NOMAXVALUE_VK
                    {
                    match(input,NOMAXVALUE_VK,FOLLOW_NOMAXVALUE_VK_in_sequence_spec4202); 

                    }
                    break;
                case 7 :
                    // PLSQLWalker.g:505:10: NOMINVALUE_VK
                    {
                    match(input,NOMINVALUE_VK,FOLLOW_NOMINVALUE_VK_in_sequence_spec4213); 

                    }
                    break;
                case 8 :
                    // PLSQLWalker.g:506:10: CYCLE_VK
                    {
                    match(input,CYCLE_VK,FOLLOW_CYCLE_VK_in_sequence_spec4224); 

                    }
                    break;
                case 9 :
                    // PLSQLWalker.g:507:10: NOCYCLE_VK
                    {
                    match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_sequence_spec4235); 

                    }
                    break;
                case 10 :
                    // PLSQLWalker.g:508:10: NOCACHE_VK
                    {
                    match(input,NOCACHE_VK,FOLLOW_NOCACHE_VK_in_sequence_spec4246); 

                    }
                    break;
                case 11 :
                    // PLSQLWalker.g:509:10: ORDER_VK
                    {
                    match(input,ORDER_VK,FOLLOW_ORDER_VK_in_sequence_spec4257); 

                    }
                    break;
                case 12 :
                    // PLSQLWalker.g:510:10: NOORDER_VK
                    {
                    match(input,NOORDER_VK,FOLLOW_NOORDER_VK_in_sequence_spec4268); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "sequence_spec"



    // $ANTLR start "invoker_rights_clause"
    // PLSQLWalker.g:519:1: invoker_rights_clause : ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) ;
    public final void invoker_rights_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:520:5: ( ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) )
            // PLSQLWalker.g:520:10: ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) )
            {
            match(input,AUTHID_VK,FOLLOW_AUTHID_VK_in_invoker_rights_clause4295); 

            match(input, Token.DOWN, null); 
            if ( input.LA(1)==CURRENT_USER_VK||input.LA(1)==DEFINER_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "invoker_rights_clause"



    // $ANTLR start "compiler_parameters_clause"
    // PLSQLWalker.g:523:1: compiler_parameters_clause : ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) ;
    public final void compiler_parameters_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:524:5: ( ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) )
            // PLSQLWalker.g:524:10: ^( COMPILER_PARAMETER ^( ASSIGN id expression ) )
            {
            match(input,COMPILER_PARAMETER,FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause4323); 

            match(input, Token.DOWN, null); 
            match(input,ASSIGN,FOLLOW_ASSIGN_in_compiler_parameters_clause4326); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_id_in_compiler_parameters_clause4328);
            id();

            state._fsp--;


            pushFollow(FOLLOW_expression_in_compiler_parameters_clause4330);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "compiler_parameters_clause"



    // $ANTLR start "call_spec"
    // PLSQLWalker.g:527:1: call_spec : ^( LANGUAGE_VK ( java_spec | c_spec ) ) ;
    public final void call_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:528:5: ( ^( LANGUAGE_VK ( java_spec | c_spec ) ) )
            // PLSQLWalker.g:528:10: ^( LANGUAGE_VK ( java_spec | c_spec ) )
            {
            match(input,LANGUAGE_VK,FOLLOW_LANGUAGE_VK_in_call_spec4353); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:528:24: ( java_spec | c_spec )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==JAVA_VK) ) {
                alt141=1;
            }
            else if ( (LA141_0==C_VK) ) {
                alt141=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }
            switch (alt141) {
                case 1 :
                    // PLSQLWalker.g:528:26: java_spec
                    {
                    pushFollow(FOLLOW_java_spec_in_call_spec4357);
                    java_spec();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:528:38: c_spec
                    {
                    pushFollow(FOLLOW_c_spec_in_call_spec4361);
                    c_spec();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "call_spec"



    // $ANTLR start "java_spec"
    // PLSQLWalker.g:533:1: java_spec : ^( JAVA_VK CHAR_STRING ) ;
    public final void java_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:534:5: ( ^( JAVA_VK CHAR_STRING ) )
            // PLSQLWalker.g:534:10: ^( JAVA_VK CHAR_STRING )
            {
            match(input,JAVA_VK,FOLLOW_JAVA_VK_in_java_spec4387); 

            match(input, Token.DOWN, null); 
            match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_java_spec4389); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "java_spec"



    // $ANTLR start "c_spec"
    // PLSQLWalker.g:537:1: c_spec : ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) ;
    public final void c_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:538:5: ( ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) )
            // PLSQLWalker.g:538:10: ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
            {
            match(input,C_VK,FOLLOW_C_VK_in_c_spec4411); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:538:17: ( CHAR_STRING )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==CHAR_STRING) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // PLSQLWalker.g:538:17: CHAR_STRING
                    {
                    match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_c_spec4413); 

                    }
                    break;

            }


            // PLSQLWalker.g:538:30: ( CONTEXT_VK )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==CONTEXT_VK) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // PLSQLWalker.g:538:30: CONTEXT_VK
                    {
                    match(input,CONTEXT_VK,FOLLOW_CONTEXT_VK_in_c_spec4416); 

                    }
                    break;

            }


            match(input,LIBRARY_VK,FOLLOW_LIBRARY_VK_in_c_spec4420); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_id_in_c_spec4422);
            id();

            state._fsp--;


            match(input, Token.UP, null); 


            // PLSQLWalker.g:538:59: ( c_agent_in_clause )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==AGENT_VK) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // PLSQLWalker.g:538:59: c_agent_in_clause
                    {
                    pushFollow(FOLLOW_c_agent_in_clause_in_c_spec4425);
                    c_agent_in_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:538:78: ( c_parameters_clause )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==PARAMETERS_VK) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // PLSQLWalker.g:538:78: c_parameters_clause
                    {
                    pushFollow(FOLLOW_c_parameters_clause_in_c_spec4428);
                    c_parameters_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "c_spec"



    // $ANTLR start "c_agent_in_clause"
    // PLSQLWalker.g:541:1: c_agent_in_clause : ^( AGENT_VK ( expression )+ ) ;
    public final void c_agent_in_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:542:5: ( ^( AGENT_VK ( expression )+ ) )
            // PLSQLWalker.g:542:10: ^( AGENT_VK ( expression )+ )
            {
            match(input,AGENT_VK,FOLLOW_AGENT_VK_in_c_agent_in_clause4451); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:542:21: ( expression )+
            int cnt146=0;
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==EXPR||LA146_0==LOGIC_EXPR) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // PLSQLWalker.g:542:21: expression
            	    {
            	    pushFollow(FOLLOW_expression_in_c_agent_in_clause4453);
            	    expression();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt146 >= 1 ) break loop146;
                        EarlyExitException eee =
                            new EarlyExitException(146, input);
                        throw eee;
                }
                cnt146++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "c_agent_in_clause"



    // $ANTLR start "c_parameters_clause"
    // PLSQLWalker.g:545:1: c_parameters_clause : ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) ;
    public final void c_parameters_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:546:5: ( ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) )
            // PLSQLWalker.g:546:10: ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) )
            {
            match(input,PARAMETERS_VK,FOLLOW_PARAMETERS_VK_in_c_parameters_clause4476); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:546:26: ( THREE_DOTS | ( expression )+ )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==THREE_DOTS) ) {
                alt148=1;
            }
            else if ( (LA148_0==EXPR||LA148_0==LOGIC_EXPR) ) {
                alt148=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;

            }
            switch (alt148) {
                case 1 :
                    // PLSQLWalker.g:546:27: THREE_DOTS
                    {
                    match(input,THREE_DOTS,FOLLOW_THREE_DOTS_in_c_parameters_clause4479); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:546:38: ( expression )+
                    {
                    // PLSQLWalker.g:546:38: ( expression )+
                    int cnt147=0;
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);

                        if ( (LA147_0==EXPR||LA147_0==LOGIC_EXPR) ) {
                            alt147=1;
                        }


                        switch (alt147) {
                    	case 1 :
                    	    // PLSQLWalker.g:546:38: expression
                    	    {
                    	    pushFollow(FOLLOW_expression_in_c_parameters_clause4481);
                    	    expression();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt147 >= 1 ) break loop147;
                                EarlyExitException eee =
                                    new EarlyExitException(147, input);
                                throw eee;
                        }
                        cnt147++;
                    } while (true);


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "c_parameters_clause"



    // $ANTLR start "parameter"
    // PLSQLWalker.g:551:1: parameter : ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) ;
    public final void parameter() throws RecognitionException {
        try {
            // PLSQLWalker.g:552:5: ( ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) )
            // PLSQLWalker.g:552:10: ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? )
            {
            match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter4507); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_parameter_name_in_parameter4509);
            parameter_name();

            state._fsp--;


            // PLSQLWalker.g:552:37: ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==INOUT_VK||LA149_0==OUT_VK||LA149_0==SQL92_RESERVED_IN) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // PLSQLWalker.g:
            	    {
            	    if ( input.LA(1)==INOUT_VK||input.LA(1)==OUT_VK||input.LA(1)==SQL92_RESERVED_IN ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);


            // PLSQLWalker.g:552:74: ( type_spec )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==CUSTOM_TYPE||LA150_0==INTERVAL_DATATYPE||LA150_0==NATIVE_DATATYPE) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // PLSQLWalker.g:552:74: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_parameter4520);
                    type_spec();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:552:85: ( default_value_part )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==DEFAULT_VALUE) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // PLSQLWalker.g:552:85: default_value_part
                    {
                    pushFollow(FOLLOW_default_value_part_in_parameter4523);
                    default_value_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "parameter"



    // $ANTLR start "default_value_part"
    // PLSQLWalker.g:555:1: default_value_part : ^( DEFAULT_VALUE expression ) ;
    public final void default_value_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:556:5: ( ^( DEFAULT_VALUE expression ) )
            // PLSQLWalker.g:556:10: ^( DEFAULT_VALUE expression )
            {
            match(input,DEFAULT_VALUE,FOLLOW_DEFAULT_VALUE_in_default_value_part4546); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_default_value_part4548);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "default_value_part"



    // $ANTLR start "declare_spec"
    // PLSQLWalker.g:565:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | pragma_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body );
    public final void declare_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:566:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | pragma_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body )
            int alt152=9;
            switch ( input.LA(1) ) {
            case VARIABLE_DECLARE:
                {
                alt152=1;
                }
                break;
            case SUBTYPE_DECLARE:
                {
                alt152=2;
                }
                break;
            case CURSOR_DECLARE:
                {
                alt152=3;
                }
                break;
            case EXCEPTION_DECLARE:
                {
                alt152=4;
                }
                break;
            case PRAGMA_DECLARE:
                {
                alt152=5;
                }
                break;
            case RECORD_TYPE_DECLARE:
            case RECORD_VAR_DECLARE:
                {
                alt152=6;
                }
                break;
            case TABLE_TYPE_DECLARE:
            case TABLE_VAR_DECLARE:
                {
                alt152=7;
                }
                break;
            case CREATE_PROCEDURE:
                {
                alt152=8;
                }
                break;
            case CREATE_FUNCTION:
                {
                alt152=9;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;

            }

            switch (alt152) {
                case 1 :
                    // PLSQLWalker.g:566:10: variable_declaration
                    {
                    pushFollow(FOLLOW_variable_declaration_in_declare_spec4575);
                    variable_declaration();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:567:11: subtype_declaration
                    {
                    pushFollow(FOLLOW_subtype_declaration_in_declare_spec4587);
                    subtype_declaration();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:568:11: cursor_declaration
                    {
                    pushFollow(FOLLOW_cursor_declaration_in_declare_spec4599);
                    cursor_declaration();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:569:11: exception_declaration
                    {
                    pushFollow(FOLLOW_exception_declaration_in_declare_spec4611);
                    exception_declaration();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:570:11: pragma_declaration
                    {
                    pushFollow(FOLLOW_pragma_declaration_in_declare_spec4623);
                    pragma_declaration();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:571:11: record_declaration
                    {
                    pushFollow(FOLLOW_record_declaration_in_declare_spec4635);
                    record_declaration();

                    state._fsp--;


                    }
                    break;
                case 7 :
                    // PLSQLWalker.g:572:11: table_declaration
                    {
                    pushFollow(FOLLOW_table_declaration_in_declare_spec4647);
                    table_declaration();

                    state._fsp--;


                    }
                    break;
                case 8 :
                    // PLSQLWalker.g:573:11: create_procedure_body
                    {
                    pushFollow(FOLLOW_create_procedure_body_in_declare_spec4659);
                    create_procedure_body();

                    state._fsp--;


                    }
                    break;
                case 9 :
                    // PLSQLWalker.g:574:11: create_function_body
                    {
                    pushFollow(FOLLOW_create_function_body_in_declare_spec4671);
                    create_function_body();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "declare_spec"



    // $ANTLR start "variable_declaration"
    // PLSQLWalker.g:578:1: variable_declaration : ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) ;
    public final void variable_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:579:5: ( ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) )
            // PLSQLWalker.g:579:10: ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
            {
            match(input,VARIABLE_DECLARE,FOLLOW_VARIABLE_DECLARE_in_variable_declaration4693); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_variable_name_in_variable_declaration4695);
            variable_name();

            state._fsp--;


            pushFollow(FOLLOW_type_spec_in_variable_declaration4697);
            type_spec();

            state._fsp--;


            // PLSQLWalker.g:579:53: ( CONSTANT_VK )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==CONSTANT_VK) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // PLSQLWalker.g:579:53: CONSTANT_VK
                    {
                    match(input,CONSTANT_VK,FOLLOW_CONSTANT_VK_in_variable_declaration4699); 

                    }
                    break;

            }


            // PLSQLWalker.g:579:66: ( SQL92_RESERVED_NULL )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==SQL92_RESERVED_NULL) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // PLSQLWalker.g:579:66: SQL92_RESERVED_NULL
                    {
                    match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration4702); 

                    }
                    break;

            }


            // PLSQLWalker.g:579:87: ( default_value_part )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==DEFAULT_VALUE) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // PLSQLWalker.g:579:87: default_value_part
                    {
                    pushFollow(FOLLOW_default_value_part_in_variable_declaration4705);
                    default_value_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "variable_declaration"



    // $ANTLR start "subtype_declaration"
    // PLSQLWalker.g:582:1: subtype_declaration : ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) ;
    public final void subtype_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:583:7: ( ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) )
            // PLSQLWalker.g:583:12: ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? )
            {
            match(input,SUBTYPE_DECLARE,FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration4734); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_type_name_in_subtype_declaration4736);
            type_name();

            state._fsp--;


            pushFollow(FOLLOW_type_spec_in_subtype_declaration4738);
            type_spec();

            state._fsp--;


            // PLSQLWalker.g:583:50: ( SQL92_RESERVED_NULL )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==SQL92_RESERVED_NULL) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // PLSQLWalker.g:583:50: SQL92_RESERVED_NULL
                    {
                    match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration4740); 

                    }
                    break;

            }


            // PLSQLWalker.g:583:71: ( subtype_range )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==RANGE_VK) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // PLSQLWalker.g:583:71: subtype_range
                    {
                    pushFollow(FOLLOW_subtype_range_in_subtype_declaration4743);
                    subtype_range();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "subtype_declaration"



    // $ANTLR start "subtype_range"
    // PLSQLWalker.g:586:1: subtype_range : ^( RANGE_VK ( expression )+ ) ;
    public final void subtype_range() throws RecognitionException {
        try {
            // PLSQLWalker.g:587:5: ( ^( RANGE_VK ( expression )+ ) )
            // PLSQLWalker.g:587:10: ^( RANGE_VK ( expression )+ )
            {
            match(input,RANGE_VK,FOLLOW_RANGE_VK_in_subtype_range4768); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:587:21: ( expression )+
            int cnt158=0;
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);

                if ( (LA158_0==EXPR||LA158_0==LOGIC_EXPR) ) {
                    alt158=1;
                }


                switch (alt158) {
            	case 1 :
            	    // PLSQLWalker.g:587:21: expression
            	    {
            	    pushFollow(FOLLOW_expression_in_subtype_range4770);
            	    expression();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt158 >= 1 ) break loop158;
                        EarlyExitException eee =
                            new EarlyExitException(158, input);
                        throw eee;
                }
                cnt158++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "subtype_range"



    // $ANTLR start "cursor_declaration"
    // PLSQLWalker.g:591:1: cursor_declaration : ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) ;
    public final void cursor_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:592:5: ( ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) )
            // PLSQLWalker.g:592:10: ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) )
            {
            match(input,CURSOR_DECLARE,FOLLOW_CURSOR_DECLARE_in_cursor_declaration4794); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_cursor_name_in_cursor_declaration4796);
            cursor_name();

            state._fsp--;


            // PLSQLWalker.g:592:39: ( type_spec )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==CUSTOM_TYPE||LA159_0==INTERVAL_DATATYPE||LA159_0==NATIVE_DATATYPE) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // PLSQLWalker.g:592:39: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_cursor_declaration4798);
                    type_spec();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:592:50: ( select_statement )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==SELECT_STATEMENT) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // PLSQLWalker.g:592:50: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_cursor_declaration4801);
                    select_statement();

                    state._fsp--;


                    }
                    break;

            }


            match(input,PARAMETERS,FOLLOW_PARAMETERS_in_cursor_declaration4805); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:592:81: ( parameter_spec )*
                loop161:
                do {
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==PARAMETER) ) {
                        alt161=1;
                    }


                    switch (alt161) {
                	case 1 :
                	    // PLSQLWalker.g:592:81: parameter_spec
                	    {
                	    pushFollow(FOLLOW_parameter_spec_in_cursor_declaration4807);
                	    parameter_spec();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop161;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "cursor_declaration"



    // $ANTLR start "parameter_spec"
    // PLSQLWalker.g:595:1: parameter_spec : ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) ;
    public final void parameter_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:596:5: ( ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) )
            // PLSQLWalker.g:596:10: ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
            {
            match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter_spec4832); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_parameter_name_in_parameter_spec4834);
            parameter_name();

            state._fsp--;


            // PLSQLWalker.g:596:37: ( type_spec )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==CUSTOM_TYPE||LA162_0==INTERVAL_DATATYPE||LA162_0==NATIVE_DATATYPE) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // PLSQLWalker.g:596:37: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_parameter_spec4836);
                    type_spec();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:596:48: ( default_value_part )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==DEFAULT_VALUE) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    // PLSQLWalker.g:596:48: default_value_part
                    {
                    pushFollow(FOLLOW_default_value_part_in_parameter_spec4839);
                    default_value_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "parameter_spec"



    // $ANTLR start "exception_declaration"
    // PLSQLWalker.g:599:1: exception_declaration : ^( EXCEPTION_DECLARE exception_name ) ;
    public final void exception_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:600:5: ( ^( EXCEPTION_DECLARE exception_name ) )
            // PLSQLWalker.g:600:10: ^( EXCEPTION_DECLARE exception_name )
            {
            match(input,EXCEPTION_DECLARE,FOLLOW_EXCEPTION_DECLARE_in_exception_declaration4863); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_exception_name_in_exception_declaration4865);
            exception_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "exception_declaration"



    // $ANTLR start "pragma_declaration"
    // PLSQLWalker.g:603:1: pragma_declaration : ^( PRAGMA_DECLARE ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) ) ) ;
    public final void pragma_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:604:5: ( ^( PRAGMA_DECLARE ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) ) ) )
            // PLSQLWalker.g:604:10: ^( PRAGMA_DECLARE ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) ) )
            {
            match(input,PRAGMA_DECLARE,FOLLOW_PRAGMA_DECLARE_in_pragma_declaration4900); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:605:13: ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) )
            int alt166=5;
            switch ( input.LA(1) ) {
            case SERIALLY_REUSABLE_VK:
                {
                alt166=1;
                }
                break;
            case AUTONOMOUS_TRANSACTION_VK:
                {
                alt166=2;
                }
                break;
            case EXCEPTION_INIT_VK:
                {
                alt166=3;
                }
                break;
            case INLINE_VK:
                {
                alt166=4;
                }
                break;
            case RESTRICT_REFERENCES_VK:
                {
                alt166=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;

            }

            switch (alt166) {
                case 1 :
                    // PLSQLWalker.g:605:18: SERIALLY_REUSABLE_VK
                    {
                    match(input,SERIALLY_REUSABLE_VK,FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration4920); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:606:19: AUTONOMOUS_TRANSACTION_VK
                    {
                    match(input,AUTONOMOUS_TRANSACTION_VK,FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration4940); 

                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:607:18: ^( EXCEPTION_INIT_VK exception_name constant )
                    {
                    match(input,EXCEPTION_INIT_VK,FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration4960); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_exception_name_in_pragma_declaration4962);
                    exception_name();

                    state._fsp--;


                    pushFollow(FOLLOW_constant_in_pragma_declaration4964);
                    constant();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:608:18: ^( INLINE_VK id expression )
                    {
                    match(input,INLINE_VK,FOLLOW_INLINE_VK_in_pragma_declaration4985); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_id_in_pragma_declaration4987);
                    id();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_in_pragma_declaration4989);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:609:18: ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* )
                    {
                    match(input,RESTRICT_REFERENCES_VK,FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration5010); 

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); 
                        // PLSQLWalker.g:609:43: ( SQL92_RESERVED_DEFAULT )?
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==SQL92_RESERVED_DEFAULT) ) {
                            alt164=1;
                        }
                        switch (alt164) {
                            case 1 :
                                // PLSQLWalker.g:609:43: SQL92_RESERVED_DEFAULT
                                {
                                match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration5012); 

                                }
                                break;

                        }


                        // PLSQLWalker.g:609:67: ( id )*
                        loop165:
                        do {
                            int alt165=2;
                            int LA165_0 = input.LA(1);

                            if ( (LA165_0==CHAR_SET_NAME||LA165_0==ID) ) {
                                alt165=1;
                            }


                            switch (alt165) {
                        	case 1 :
                        	    // PLSQLWalker.g:609:67: id
                        	    {
                        	    pushFollow(FOLLOW_id_in_pragma_declaration5015);
                        	    id();

                        	    state._fsp--;


                        	    }
                        	    break;

                        	default :
                        	    break loop165;
                            }
                        } while (true);


                        match(input, Token.UP, null); 
                    }


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "pragma_declaration"



    // $ANTLR start "record_declaration"
    // PLSQLWalker.g:614:1: record_declaration : ( record_type_dec | record_var_dec );
    public final void record_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:615:5: ( record_type_dec | record_var_dec )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==RECORD_TYPE_DECLARE) ) {
                alt167=1;
            }
            else if ( (LA167_0==RECORD_VAR_DECLARE) ) {
                alt167=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;

            }
            switch (alt167) {
                case 1 :
                    // PLSQLWalker.g:615:10: record_type_dec
                    {
                    pushFollow(FOLLOW_record_type_dec_in_record_declaration5061);
                    record_type_dec();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:616:10: record_var_dec
                    {
                    pushFollow(FOLLOW_record_var_dec_in_record_declaration5072);
                    record_var_dec();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "record_declaration"



    // $ANTLR start "record_type_dec"
    // PLSQLWalker.g:622:1: record_type_dec : ^( RECORD_TYPE_DECLARE type_name ( REF_VK )? ( type_spec )? ^( FIELDS ( field_spec )* ) ) ;
    public final void record_type_dec() throws RecognitionException {
        try {
            // PLSQLWalker.g:623:5: ( ^( RECORD_TYPE_DECLARE type_name ( REF_VK )? ( type_spec )? ^( FIELDS ( field_spec )* ) ) )
            // PLSQLWalker.g:623:10: ^( RECORD_TYPE_DECLARE type_name ( REF_VK )? ( type_spec )? ^( FIELDS ( field_spec )* ) )
            {
            match(input,RECORD_TYPE_DECLARE,FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec5096); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_type_name_in_record_type_dec5098);
            type_name();

            state._fsp--;


            // PLSQLWalker.g:623:42: ( REF_VK )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==REF_VK) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // PLSQLWalker.g:623:42: REF_VK
                    {
                    match(input,REF_VK,FOLLOW_REF_VK_in_record_type_dec5100); 

                    }
                    break;

            }


            // PLSQLWalker.g:623:50: ( type_spec )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==CUSTOM_TYPE||LA169_0==INTERVAL_DATATYPE||LA169_0==NATIVE_DATATYPE) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // PLSQLWalker.g:623:50: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_record_type_dec5103);
                    type_spec();

                    state._fsp--;


                    }
                    break;

            }


            match(input,FIELDS,FOLLOW_FIELDS_in_record_type_dec5107); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:623:70: ( field_spec )*
                loop170:
                do {
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==FIELD_SPEC) ) {
                        alt170=1;
                    }


                    switch (alt170) {
                	case 1 :
                	    // PLSQLWalker.g:623:70: field_spec
                	    {
                	    pushFollow(FOLLOW_field_spec_in_record_type_dec5109);
                	    field_spec();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop170;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "record_type_dec"



    // $ANTLR start "field_spec"
    // PLSQLWalker.g:626:1: field_spec : ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) ;
    public final void field_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:627:5: ( ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) )
            // PLSQLWalker.g:627:10: ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
            {
            match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_field_spec5133); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_column_name_in_field_spec5135);
            column_name();

            state._fsp--;


            // PLSQLWalker.g:627:35: ( type_spec )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==CUSTOM_TYPE||LA171_0==INTERVAL_DATATYPE||LA171_0==NATIVE_DATATYPE) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // PLSQLWalker.g:627:35: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_field_spec5137);
                    type_spec();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:627:46: ( SQL92_RESERVED_NULL )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==SQL92_RESERVED_NULL) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // PLSQLWalker.g:627:46: SQL92_RESERVED_NULL
                    {
                    match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_field_spec5140); 

                    }
                    break;

            }


            // PLSQLWalker.g:627:67: ( default_value_part )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==DEFAULT_VALUE) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // PLSQLWalker.g:627:67: default_value_part
                    {
                    pushFollow(FOLLOW_default_value_part_in_field_spec5143);
                    default_value_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "field_spec"



    // $ANTLR start "record_var_dec"
    // PLSQLWalker.g:630:1: record_var_dec : ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) ;
    public final void record_var_dec() throws RecognitionException {
        try {
            // PLSQLWalker.g:631:5: ( ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) )
            // PLSQLWalker.g:631:10: ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) )
            {
            match(input,RECORD_VAR_DECLARE,FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec5166); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_record_name_in_record_var_dec5168);
            record_name();

            state._fsp--;


            pushFollow(FOLLOW_type_name_in_record_var_dec5170);
            type_name();

            state._fsp--;


            if ( (input.LA(1) >= PERCENT_ROWTYPE_VK && input.LA(1) <= PERCENT_TYPE_VK) ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "record_var_dec"



    // $ANTLR start "table_declaration"
    // PLSQLWalker.g:636:1: table_declaration : ( table_type_dec | table_var_dec );
    public final void table_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:637:5: ( table_type_dec | table_var_dec )
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==TABLE_TYPE_DECLARE) ) {
                alt174=1;
            }
            else if ( (LA174_0==TABLE_VAR_DECLARE) ) {
                alt174=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;

            }
            switch (alt174) {
                case 1 :
                    // PLSQLWalker.g:637:10: table_type_dec
                    {
                    pushFollow(FOLLOW_table_type_dec_in_table_declaration5199);
                    table_type_dec();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:638:10: table_var_dec
                    {
                    pushFollow(FOLLOW_table_var_dec_in_table_declaration5210);
                    table_var_dec();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "table_declaration"



    // $ANTLR start "table_type_dec"
    // PLSQLWalker.g:641:1: table_type_dec : ^( TABLE_TYPE_DECLARE type_name ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) ) ) ;
    public final void table_type_dec() throws RecognitionException {
        try {
            // PLSQLWalker.g:642:5: ( ^( TABLE_TYPE_DECLARE type_name ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) ) ) )
            // PLSQLWalker.g:642:10: ^( TABLE_TYPE_DECLARE type_name ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) ) )
            {
            match(input,TABLE_TYPE_DECLARE,FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec5231); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_type_name_in_table_type_dec5233);
            type_name();

            state._fsp--;


            // PLSQLWalker.g:643:13: ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) )
            int alt177=2;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_NULL:
                {
                int LA177_1 = input.LA(2);

                if ( (LA177_1==VARR_ARRAY_DEF) ) {
                    alt177=1;
                }
                else if ( (LA177_1==SQL92_RESERVED_TABLE) ) {
                    alt177=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 177, 1, input);

                    throw nvae;

                }
                }
                break;
            case VARR_ARRAY_DEF:
                {
                alt177=1;
                }
                break;
            case SQL92_RESERVED_TABLE:
                {
                alt177=2;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;

            }

            switch (alt177) {
                case 1 :
                    // PLSQLWalker.g:643:18: varray_type_def
                    {
                    pushFollow(FOLLOW_varray_type_def_in_table_type_dec5253);
                    varray_type_def();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:644:18: ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? )
                    {
                    // PLSQLWalker.g:644:18: ( SQL92_RESERVED_NULL )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==SQL92_RESERVED_NULL) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            // PLSQLWalker.g:644:18: SQL92_RESERVED_NULL
                            {
                            match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec5272); 

                            }
                            break;

                    }


                    match(input,SQL92_RESERVED_TABLE,FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec5276); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_type_spec_in_table_type_dec5278);
                    type_spec();

                    state._fsp--;


                    // PLSQLWalker.g:644:72: ( table_indexed_by_part )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==INDEXED_BY) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // PLSQLWalker.g:644:72: table_indexed_by_part
                            {
                            pushFollow(FOLLOW_table_indexed_by_part_in_table_type_dec5280);
                            table_indexed_by_part();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "table_type_dec"



    // $ANTLR start "table_indexed_by_part"
    // PLSQLWalker.g:649:1: table_indexed_by_part : ^( INDEXED_BY type_spec ) ;
    public final void table_indexed_by_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:650:5: ( ^( INDEXED_BY type_spec ) )
            // PLSQLWalker.g:650:10: ^( INDEXED_BY type_spec )
            {
            match(input,INDEXED_BY,FOLLOW_INDEXED_BY_in_table_indexed_by_part5327); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_type_spec_in_table_indexed_by_part5329);
            type_spec();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "table_indexed_by_part"



    // $ANTLR start "varray_type_def"
    // PLSQLWalker.g:653:1: varray_type_def : ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) ;
    public final void varray_type_def() throws RecognitionException {
        try {
            // PLSQLWalker.g:654:5: ( ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) )
            // PLSQLWalker.g:654:10: ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec )
            {
            // PLSQLWalker.g:654:10: ( SQL92_RESERVED_NULL )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==SQL92_RESERVED_NULL) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // PLSQLWalker.g:654:10: SQL92_RESERVED_NULL
                    {
                    match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def5350); 

                    }
                    break;

            }


            match(input,VARR_ARRAY_DEF,FOLLOW_VARR_ARRAY_DEF_in_varray_type_def5354); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_varray_type_def5356);
            expression();

            state._fsp--;


            pushFollow(FOLLOW_type_spec_in_varray_type_def5358);
            type_spec();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "varray_type_def"



    // $ANTLR start "table_var_dec"
    // PLSQLWalker.g:657:1: table_var_dec : ^( TABLE_VAR_DECLARE table_var_name type_spec ) ;
    public final void table_var_dec() throws RecognitionException {
        try {
            // PLSQLWalker.g:658:5: ( ^( TABLE_VAR_DECLARE table_var_name type_spec ) )
            // PLSQLWalker.g:658:10: ^( TABLE_VAR_DECLARE table_var_name type_spec )
            {
            match(input,TABLE_VAR_DECLARE,FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec5380); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_table_var_name_in_table_var_dec5382);
            table_var_name();

            state._fsp--;


            pushFollow(FOLLOW_type_spec_in_table_var_dec5384);
            type_spec();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "table_var_dec"



    // $ANTLR start "seq_of_statements"
    // PLSQLWalker.g:665:1: seq_of_statements : ^( STATEMENTS ( statement )+ ) ;
    public final void seq_of_statements() throws RecognitionException {
        try {
            // PLSQLWalker.g:666:5: ( ^( STATEMENTS ( statement )+ ) )
            // PLSQLWalker.g:666:11: ^( STATEMENTS ( statement )+ )
            {
            match(input,STATEMENTS,FOLLOW_STATEMENTS_in_seq_of_statements5411); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:666:24: ( statement )+
            int cnt179=0;
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==ASSIGN||LA179_0==BLOCK||LA179_0==BODY||LA179_0==CLOSE_VK||LA179_0==COMMIT_VK||LA179_0==CONTINUE_VK||(LA179_0 >= EXECUTE_VK && LA179_0 <= EXIT_VK)||LA179_0==FORALL_VK||LA179_0==FOR_LOOP||LA179_0==LABEL_DECLARE||LA179_0==LOOP_VK||LA179_0==MERGE_VK||LA179_0==OPEN_VK||(LA179_0 >= PLSQL_RESERVED_IF && LA179_0 <= PLSQL_RESERVED_LOCK)||LA179_0==RAISE_VK||LA179_0==RETURN_VK||LA179_0==ROLLBACK_VK||LA179_0==ROUTINE_CALL||LA179_0==SAVEPOINT_VK||LA179_0==SEARCHED_CASE||LA179_0==SELECT_STATEMENT||LA179_0==SET_CONSTRAINT||LA179_0==SET_TRANSACTION||LA179_0==SIMPLE_CASE||LA179_0==SQL92_RESERVED_DELETE||LA179_0==SQL92_RESERVED_FETCH||LA179_0==SQL92_RESERVED_GOTO||LA179_0==SQL92_RESERVED_INSERT||LA179_0==SQL92_RESERVED_NULL||LA179_0==SQL92_RESERVED_UPDATE||LA179_0==WHILE_LOOP) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // PLSQLWalker.g:666:24: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_seq_of_statements5413);
            	    statement();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt179 >= 1 ) break loop179;
                        EarlyExitException eee =
                            new EarlyExitException(179, input);
                        throw eee;
                }
                cnt179++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "seq_of_statements"



    // $ANTLR start "statement"
    // PLSQLWalker.g:669:1: statement : ( label_declaration | assignment_statement | continue_statement | exit_statement | goto_statement | if_statement | loop_statement | forall_statement | null_statement | raise_statement | return_statement | case_statement | sql_statement | function_call | body | block );
    public final void statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:670:5: ( label_declaration | assignment_statement | continue_statement | exit_statement | goto_statement | if_statement | loop_statement | forall_statement | null_statement | raise_statement | return_statement | case_statement | sql_statement | function_call | body | block )
            int alt180=16;
            switch ( input.LA(1) ) {
            case LABEL_DECLARE:
                {
                alt180=1;
                }
                break;
            case ASSIGN:
                {
                alt180=2;
                }
                break;
            case CONTINUE_VK:
                {
                alt180=3;
                }
                break;
            case EXIT_VK:
                {
                alt180=4;
                }
                break;
            case SQL92_RESERVED_GOTO:
                {
                alt180=5;
                }
                break;
            case PLSQL_RESERVED_IF:
                {
                alt180=6;
                }
                break;
            case FOR_LOOP:
            case LOOP_VK:
            case WHILE_LOOP:
                {
                alt180=7;
                }
                break;
            case FORALL_VK:
                {
                alt180=8;
                }
                break;
            case SQL92_RESERVED_NULL:
                {
                alt180=9;
                }
                break;
            case RAISE_VK:
                {
                alt180=10;
                }
                break;
            case RETURN_VK:
                {
                alt180=11;
                }
                break;
            case SEARCHED_CASE:
            case SIMPLE_CASE:
                {
                alt180=12;
                }
                break;
            case CLOSE_VK:
            case COMMIT_VK:
            case EXECUTE_VK:
            case MERGE_VK:
            case OPEN_VK:
            case PLSQL_RESERVED_LOCK:
            case ROLLBACK_VK:
            case SAVEPOINT_VK:
            case SELECT_STATEMENT:
            case SET_CONSTRAINT:
            case SET_TRANSACTION:
            case SQL92_RESERVED_DELETE:
            case SQL92_RESERVED_FETCH:
            case SQL92_RESERVED_INSERT:
            case SQL92_RESERVED_UPDATE:
                {
                alt180=13;
                }
                break;
            case ROUTINE_CALL:
                {
                alt180=14;
                }
                break;
            case BODY:
                {
                alt180=15;
                }
                break;
            case BLOCK:
                {
                alt180=16;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;

            }

            switch (alt180) {
                case 1 :
                    // PLSQLWalker.g:670:10: label_declaration
                    {
                    pushFollow(FOLLOW_label_declaration_in_statement5435);
                    label_declaration();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:671:10: assignment_statement
                    {
                    pushFollow(FOLLOW_assignment_statement_in_statement5446);
                    assignment_statement();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:672:10: continue_statement
                    {
                    pushFollow(FOLLOW_continue_statement_in_statement5457);
                    continue_statement();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:673:10: exit_statement
                    {
                    pushFollow(FOLLOW_exit_statement_in_statement5468);
                    exit_statement();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:674:10: goto_statement
                    {
                    pushFollow(FOLLOW_goto_statement_in_statement5479);
                    goto_statement();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:675:10: if_statement
                    {
                    pushFollow(FOLLOW_if_statement_in_statement5490);
                    if_statement();

                    state._fsp--;


                    }
                    break;
                case 7 :
                    // PLSQLWalker.g:676:10: loop_statement
                    {
                    pushFollow(FOLLOW_loop_statement_in_statement5501);
                    loop_statement();

                    state._fsp--;


                    }
                    break;
                case 8 :
                    // PLSQLWalker.g:677:10: forall_statement
                    {
                    pushFollow(FOLLOW_forall_statement_in_statement5512);
                    forall_statement();

                    state._fsp--;


                    }
                    break;
                case 9 :
                    // PLSQLWalker.g:678:10: null_statement
                    {
                    pushFollow(FOLLOW_null_statement_in_statement5523);
                    null_statement();

                    state._fsp--;


                    }
                    break;
                case 10 :
                    // PLSQLWalker.g:679:10: raise_statement
                    {
                    pushFollow(FOLLOW_raise_statement_in_statement5534);
                    raise_statement();

                    state._fsp--;


                    }
                    break;
                case 11 :
                    // PLSQLWalker.g:680:10: return_statement
                    {
                    pushFollow(FOLLOW_return_statement_in_statement5545);
                    return_statement();

                    state._fsp--;


                    }
                    break;
                case 12 :
                    // PLSQLWalker.g:681:10: case_statement
                    {
                    pushFollow(FOLLOW_case_statement_in_statement5556);
                    case_statement();

                    state._fsp--;


                    }
                    break;
                case 13 :
                    // PLSQLWalker.g:682:10: sql_statement
                    {
                    pushFollow(FOLLOW_sql_statement_in_statement5567);
                    sql_statement();

                    state._fsp--;


                    }
                    break;
                case 14 :
                    // PLSQLWalker.g:683:10: function_call
                    {
                    pushFollow(FOLLOW_function_call_in_statement5578);
                    function_call();

                    state._fsp--;


                    }
                    break;
                case 15 :
                    // PLSQLWalker.g:684:10: body
                    {
                    pushFollow(FOLLOW_body_in_statement5589);
                    body();

                    state._fsp--;


                    }
                    break;
                case 16 :
                    // PLSQLWalker.g:685:10: block
                    {
                    pushFollow(FOLLOW_block_in_statement5600);
                    block();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "statement"



    // $ANTLR start "label_declaration"
    // PLSQLWalker.g:688:1: label_declaration : ^( LABEL_DECLARE label_name ) ;
    public final void label_declaration() throws RecognitionException {
        try {
            // PLSQLWalker.g:689:5: ( ^( LABEL_DECLARE label_name ) )
            // PLSQLWalker.g:689:10: ^( LABEL_DECLARE label_name )
            {
            match(input,LABEL_DECLARE,FOLLOW_LABEL_DECLARE_in_label_declaration5621); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_label_name_in_label_declaration5623);
            label_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "label_declaration"



    // $ANTLR start "assignment_statement"
    // PLSQLWalker.g:692:1: assignment_statement : ^( ASSIGN general_element expression ) ;
    public final void assignment_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:693:5: ( ^( ASSIGN general_element expression ) )
            // PLSQLWalker.g:693:11: ^( ASSIGN general_element expression )
            {
            match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement5646); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_general_element_in_assignment_statement5648);
            general_element();

            state._fsp--;


            pushFollow(FOLLOW_expression_in_assignment_statement5650);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "assignment_statement"



    // $ANTLR start "continue_statement"
    // PLSQLWalker.g:696:1: continue_statement : ^( CONTINUE_VK ( label_name )? ( general_when )? ) ;
    public final void continue_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:697:5: ( ^( CONTINUE_VK ( label_name )? ( general_when )? ) )
            // PLSQLWalker.g:697:10: ^( CONTINUE_VK ( label_name )? ( general_when )? )
            {
            match(input,CONTINUE_VK,FOLLOW_CONTINUE_VK_in_continue_statement5672); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:697:24: ( label_name )?
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==LABEL_NAME) ) {
                    alt181=1;
                }
                switch (alt181) {
                    case 1 :
                        // PLSQLWalker.g:697:24: label_name
                        {
                        pushFollow(FOLLOW_label_name_in_continue_statement5674);
                        label_name();

                        state._fsp--;


                        }
                        break;

                }


                // PLSQLWalker.g:697:36: ( general_when )?
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==SQL92_RESERVED_WHEN) ) {
                    alt182=1;
                }
                switch (alt182) {
                    case 1 :
                        // PLSQLWalker.g:697:36: general_when
                        {
                        pushFollow(FOLLOW_general_when_in_continue_statement5677);
                        general_when();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "continue_statement"



    // $ANTLR start "general_when"
    // PLSQLWalker.g:700:1: general_when : ^( SQL92_RESERVED_WHEN expression ) ;
    public final void general_when() throws RecognitionException {
        try {
            // PLSQLWalker.g:701:5: ( ^( SQL92_RESERVED_WHEN expression ) )
            // PLSQLWalker.g:701:10: ^( SQL92_RESERVED_WHEN expression )
            {
            match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_general_when5700); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_general_when5702);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "general_when"



    // $ANTLR start "exit_statement"
    // PLSQLWalker.g:704:1: exit_statement : ^( EXIT_VK ( label_name )? ( general_when )? ) ;
    public final void exit_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:705:5: ( ^( EXIT_VK ( label_name )? ( general_when )? ) )
            // PLSQLWalker.g:705:10: ^( EXIT_VK ( label_name )? ( general_when )? )
            {
            match(input,EXIT_VK,FOLLOW_EXIT_VK_in_exit_statement5724); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:705:20: ( label_name )?
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==LABEL_NAME) ) {
                    alt183=1;
                }
                switch (alt183) {
                    case 1 :
                        // PLSQLWalker.g:705:20: label_name
                        {
                        pushFollow(FOLLOW_label_name_in_exit_statement5726);
                        label_name();

                        state._fsp--;


                        }
                        break;

                }


                // PLSQLWalker.g:705:32: ( general_when )?
                int alt184=2;
                int LA184_0 = input.LA(1);

                if ( (LA184_0==SQL92_RESERVED_WHEN) ) {
                    alt184=1;
                }
                switch (alt184) {
                    case 1 :
                        // PLSQLWalker.g:705:32: general_when
                        {
                        pushFollow(FOLLOW_general_when_in_exit_statement5729);
                        general_when();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "exit_statement"



    // $ANTLR start "goto_statement"
    // PLSQLWalker.g:708:1: goto_statement : ^( SQL92_RESERVED_GOTO label_name ) ;
    public final void goto_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:709:5: ( ^( SQL92_RESERVED_GOTO label_name ) )
            // PLSQLWalker.g:709:10: ^( SQL92_RESERVED_GOTO label_name )
            {
            match(input,SQL92_RESERVED_GOTO,FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement5752); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_label_name_in_goto_statement5754);
            label_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "goto_statement"



    // $ANTLR start "if_statement"
    // PLSQLWalker.g:712:1: if_statement : ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? ) ;
    public final void if_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:713:5: ( ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? ) )
            // PLSQLWalker.g:713:10: ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? )
            {
            match(input,PLSQL_RESERVED_IF,FOLLOW_PLSQL_RESERVED_IF_in_if_statement5776); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_if_statement5778);
            expression();

            state._fsp--;


            pushFollow(FOLLOW_seq_of_statements_in_if_statement5780);
            seq_of_statements();

            state._fsp--;


            // PLSQLWalker.g:713:59: ( elsif_part )*
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==PLSQL_NON_RESERVED_ELSIF) ) {
                    alt185=1;
                }


                switch (alt185) {
            	case 1 :
            	    // PLSQLWalker.g:713:59: elsif_part
            	    {
            	    pushFollow(FOLLOW_elsif_part_in_if_statement5782);
            	    elsif_part();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);


            // PLSQLWalker.g:713:71: ( else_part )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==SQL92_RESERVED_ELSE) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // PLSQLWalker.g:713:71: else_part
                    {
                    pushFollow(FOLLOW_else_part_in_if_statement5785);
                    else_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "if_statement"



    // $ANTLR start "elsif_part"
    // PLSQLWalker.g:716:1: elsif_part : ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) ;
    public final void elsif_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:717:5: ( ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) )
            // PLSQLWalker.g:717:10: ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements )
            {
            match(input,PLSQL_NON_RESERVED_ELSIF,FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part5808); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_elsif_part5810);
            expression();

            state._fsp--;


            pushFollow(FOLLOW_seq_of_statements_in_elsif_part5812);
            seq_of_statements();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "elsif_part"



    // $ANTLR start "else_part"
    // PLSQLWalker.g:720:1: else_part : ^( SQL92_RESERVED_ELSE seq_of_statements ) ;
    public final void else_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:721:5: ( ^( SQL92_RESERVED_ELSE seq_of_statements ) )
            // PLSQLWalker.g:721:10: ^( SQL92_RESERVED_ELSE seq_of_statements )
            {
            match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_else_part5834); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_seq_of_statements_in_else_part5836);
            seq_of_statements();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "else_part"



    // $ANTLR start "loop_statement"
    // PLSQLWalker.g:724:1: loop_statement : ( ^( WHILE_LOOP ( label_name )* expression seq_of_statements ) | ^( FOR_LOOP ( label_name )* cursor_loop_param seq_of_statements ) | ^( LOOP_VK ( label_name )* seq_of_statements ) );
    public final void loop_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:725:5: ( ^( WHILE_LOOP ( label_name )* expression seq_of_statements ) | ^( FOR_LOOP ( label_name )* cursor_loop_param seq_of_statements ) | ^( LOOP_VK ( label_name )* seq_of_statements ) )
            int alt190=3;
            switch ( input.LA(1) ) {
            case WHILE_LOOP:
                {
                alt190=1;
                }
                break;
            case FOR_LOOP:
                {
                alt190=2;
                }
                break;
            case LOOP_VK:
                {
                alt190=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;

            }

            switch (alt190) {
                case 1 :
                    // PLSQLWalker.g:725:10: ^( WHILE_LOOP ( label_name )* expression seq_of_statements )
                    {
                    match(input,WHILE_LOOP,FOLLOW_WHILE_LOOP_in_loop_statement5858); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:725:23: ( label_name )*
                    loop187:
                    do {
                        int alt187=2;
                        int LA187_0 = input.LA(1);

                        if ( (LA187_0==LABEL_NAME) ) {
                            alt187=1;
                        }


                        switch (alt187) {
                    	case 1 :
                    	    // PLSQLWalker.g:725:23: label_name
                    	    {
                    	    pushFollow(FOLLOW_label_name_in_loop_statement5860);
                    	    label_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop187;
                        }
                    } while (true);


                    pushFollow(FOLLOW_expression_in_loop_statement5863);
                    expression();

                    state._fsp--;


                    pushFollow(FOLLOW_seq_of_statements_in_loop_statement5865);
                    seq_of_statements();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:726:10: ^( FOR_LOOP ( label_name )* cursor_loop_param seq_of_statements )
                    {
                    match(input,FOR_LOOP,FOLLOW_FOR_LOOP_in_loop_statement5878); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:726:21: ( label_name )*
                    loop188:
                    do {
                        int alt188=2;
                        int LA188_0 = input.LA(1);

                        if ( (LA188_0==LABEL_NAME) ) {
                            alt188=1;
                        }


                        switch (alt188) {
                    	case 1 :
                    	    // PLSQLWalker.g:726:21: label_name
                    	    {
                    	    pushFollow(FOLLOW_label_name_in_loop_statement5880);
                    	    label_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop188;
                        }
                    } while (true);


                    pushFollow(FOLLOW_cursor_loop_param_in_loop_statement5883);
                    cursor_loop_param();

                    state._fsp--;


                    pushFollow(FOLLOW_seq_of_statements_in_loop_statement5885);
                    seq_of_statements();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:727:10: ^( LOOP_VK ( label_name )* seq_of_statements )
                    {
                    match(input,LOOP_VK,FOLLOW_LOOP_VK_in_loop_statement5898); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:727:20: ( label_name )*
                    loop189:
                    do {
                        int alt189=2;
                        int LA189_0 = input.LA(1);

                        if ( (LA189_0==LABEL_NAME) ) {
                            alt189=1;
                        }


                        switch (alt189) {
                    	case 1 :
                    	    // PLSQLWalker.g:727:20: label_name
                    	    {
                    	    pushFollow(FOLLOW_label_name_in_loop_statement5900);
                    	    label_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop189;
                        }
                    } while (true);


                    pushFollow(FOLLOW_seq_of_statements_in_loop_statement5903);
                    seq_of_statements();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "loop_statement"



    // $ANTLR start "cursor_loop_param"
    // PLSQLWalker.g:732:1: cursor_loop_param : ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND expression expression ) ) | ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? ) | ^( SELECT_BASED_FOR record_name select_statement ) );
    public final void cursor_loop_param() throws RecognitionException {
        try {
            // PLSQLWalker.g:733:5: ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND expression expression ) ) | ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? ) | ^( SELECT_BASED_FOR record_name select_statement ) )
            int alt193=3;
            switch ( input.LA(1) ) {
            case INDEXED_FOR:
                {
                alt193=1;
                }
                break;
            case CURSOR_BASED_FOR:
                {
                alt193=2;
                }
                break;
            case SELECT_BASED_FOR:
                {
                alt193=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;

            }

            switch (alt193) {
                case 1 :
                    // PLSQLWalker.g:733:10: ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND expression expression ) )
                    {
                    match(input,INDEXED_FOR,FOLLOW_INDEXED_FOR_in_cursor_loop_param5927); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_index_name_in_cursor_loop_param5929);
                    index_name();

                    state._fsp--;


                    // PLSQLWalker.g:733:35: ( REVERSE_VK )?
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==REVERSE_VK) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            // PLSQLWalker.g:733:35: REVERSE_VK
                            {
                            match(input,REVERSE_VK,FOLLOW_REVERSE_VK_in_cursor_loop_param5931); 

                            }
                            break;

                    }


                    match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_cursor_loop_param5935); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_cursor_loop_param5937);
                    expression();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_in_cursor_loop_param5939);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:734:10: ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? )
                    {
                    match(input,CURSOR_BASED_FOR,FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param5953); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_record_name_in_cursor_loop_param5955);
                    record_name();

                    state._fsp--;


                    pushFollow(FOLLOW_cursor_name_in_cursor_loop_param5957);
                    cursor_name();

                    state._fsp--;


                    // PLSQLWalker.g:734:53: ( expression_list )?
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==EXPR_LIST) ) {
                        alt192=1;
                    }
                    switch (alt192) {
                        case 1 :
                            // PLSQLWalker.g:734:53: expression_list
                            {
                            pushFollow(FOLLOW_expression_list_in_cursor_loop_param5959);
                            expression_list();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:735:10: ^( SELECT_BASED_FOR record_name select_statement )
                    {
                    match(input,SELECT_BASED_FOR,FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param5973); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_record_name_in_cursor_loop_param5975);
                    record_name();

                    state._fsp--;


                    pushFollow(FOLLOW_select_statement_in_cursor_loop_param5977);
                    select_statement();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "cursor_loop_param"



    // $ANTLR start "forall_statement"
    // PLSQLWalker.g:740:1: forall_statement : ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) ;
    public final void forall_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:741:5: ( ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) )
            // PLSQLWalker.g:741:10: ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? )
            {
            match(input,FORALL_VK,FOLLOW_FORALL_VK_in_forall_statement6001); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_index_name_in_forall_statement6003);
            index_name();

            state._fsp--;


            pushFollow(FOLLOW_bounds_clause_in_forall_statement6005);
            bounds_clause();

            state._fsp--;


            pushFollow(FOLLOW_sql_statement_in_forall_statement6007);
            sql_statement();

            state._fsp--;


            // PLSQLWalker.g:741:61: ( EXCEPTIONS_VK )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==EXCEPTIONS_VK) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // PLSQLWalker.g:741:61: EXCEPTIONS_VK
                    {
                    match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_forall_statement6009); 

                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "forall_statement"



    // $ANTLR start "bounds_clause"
    // PLSQLWalker.g:744:1: bounds_clause : ( ^( SIMPLE_BOUND expression expression ) | ^( INDICES_BOUND collection_name ( between_bound )? ) | ^( VALUES_BOUND index_name ) );
    public final void bounds_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:745:5: ( ^( SIMPLE_BOUND expression expression ) | ^( INDICES_BOUND collection_name ( between_bound )? ) | ^( VALUES_BOUND index_name ) )
            int alt196=3;
            switch ( input.LA(1) ) {
            case SIMPLE_BOUND:
                {
                alt196=1;
                }
                break;
            case INDICES_BOUND:
                {
                alt196=2;
                }
                break;
            case VALUES_BOUND:
                {
                alt196=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;

            }

            switch (alt196) {
                case 1 :
                    // PLSQLWalker.g:745:10: ^( SIMPLE_BOUND expression expression )
                    {
                    match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_bounds_clause6032); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_bounds_clause6034);
                    expression();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_in_bounds_clause6036);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:746:10: ^( INDICES_BOUND collection_name ( between_bound )? )
                    {
                    match(input,INDICES_BOUND,FOLLOW_INDICES_BOUND_in_bounds_clause6049); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_collection_name_in_bounds_clause6051);
                    collection_name();

                    state._fsp--;


                    // PLSQLWalker.g:746:42: ( between_bound )?
                    int alt195=2;
                    int LA195_0 = input.LA(1);

                    if ( (LA195_0==SQL92_RESERVED_BETWEEN) ) {
                        alt195=1;
                    }
                    switch (alt195) {
                        case 1 :
                            // PLSQLWalker.g:746:42: between_bound
                            {
                            pushFollow(FOLLOW_between_bound_in_bounds_clause6053);
                            between_bound();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:747:10: ^( VALUES_BOUND index_name )
                    {
                    match(input,VALUES_BOUND,FOLLOW_VALUES_BOUND_in_bounds_clause6067); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_index_name_in_bounds_clause6069);
                    index_name();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "bounds_clause"



    // $ANTLR start "between_bound"
    // PLSQLWalker.g:750:1: between_bound : ^( SQL92_RESERVED_BETWEEN expression expression ) ;
    public final void between_bound() throws RecognitionException {
        try {
            // PLSQLWalker.g:751:5: ( ^( SQL92_RESERVED_BETWEEN expression expression ) )
            // PLSQLWalker.g:751:10: ^( SQL92_RESERVED_BETWEEN expression expression )
            {
            match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound6092); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_between_bound6094);
            expression();

            state._fsp--;


            pushFollow(FOLLOW_expression_in_between_bound6096);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "between_bound"



    // $ANTLR start "null_statement"
    // PLSQLWalker.g:754:1: null_statement : SQL92_RESERVED_NULL ;
    public final void null_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:755:5: ( SQL92_RESERVED_NULL )
            // PLSQLWalker.g:755:10: SQL92_RESERVED_NULL
            {
            match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_null_statement6117); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "null_statement"



    // $ANTLR start "raise_statement"
    // PLSQLWalker.g:758:1: raise_statement : ^( RAISE_VK ( exception_name )? ) ;
    public final void raise_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:759:5: ( ^( RAISE_VK ( exception_name )? ) )
            // PLSQLWalker.g:759:10: ^( RAISE_VK ( exception_name )? )
            {
            match(input,RAISE_VK,FOLLOW_RAISE_VK_in_raise_statement6138); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:759:21: ( exception_name )?
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==EXCEPTION_NAME) ) {
                    alt197=1;
                }
                switch (alt197) {
                    case 1 :
                        // PLSQLWalker.g:759:21: exception_name
                        {
                        pushFollow(FOLLOW_exception_name_in_raise_statement6140);
                        exception_name();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "raise_statement"



    // $ANTLR start "return_statement"
    // PLSQLWalker.g:762:1: return_statement : ^( RETURN_VK ( expression )? ) ;
    public final void return_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:763:5: ( ^( RETURN_VK ( expression )? ) )
            // PLSQLWalker.g:763:10: ^( RETURN_VK ( expression )? )
            {
            match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_statement6163); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:763:22: ( expression )?
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==EXPR||LA198_0==LOGIC_EXPR) ) {
                    alt198=1;
                }
                switch (alt198) {
                    case 1 :
                        // PLSQLWalker.g:763:22: expression
                        {
                        pushFollow(FOLLOW_expression_in_return_statement6165);
                        expression();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "return_statement"



    // $ANTLR start "function_call"
    // PLSQLWalker.g:766:1: function_call : ^( ROUTINE_CALL routine_name ( function_argument )? ) ;
    public final void function_call() throws RecognitionException {
        try {
            // PLSQLWalker.g:767:5: ( ^( ROUTINE_CALL routine_name ( function_argument )? ) )
            // PLSQLWalker.g:767:10: ^( ROUTINE_CALL routine_name ( function_argument )? )
            {
            match(input,ROUTINE_CALL,FOLLOW_ROUTINE_CALL_in_function_call6188); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_routine_name_in_function_call6190);
            routine_name();

            state._fsp--;


            // PLSQLWalker.g:767:38: ( function_argument )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==ARGUMENTS) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // PLSQLWalker.g:767:38: function_argument
                    {
                    pushFollow(FOLLOW_function_argument_in_function_call6192);
                    function_argument();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "function_call"



    // $ANTLR start "body"
    // PLSQLWalker.g:770:1: body : ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) ;
    public final void body() throws RecognitionException {
        try {
            // PLSQLWalker.g:771:5: ( ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) )
            // PLSQLWalker.g:771:10: ^( BODY ( label_name )? seq_of_statements ( exception_clause )? )
            {
            match(input,BODY,FOLLOW_BODY_in_body6215); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:771:17: ( label_name )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==LABEL_NAME) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // PLSQLWalker.g:771:17: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_body6217);
                    label_name();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_seq_of_statements_in_body6220);
            seq_of_statements();

            state._fsp--;


            // PLSQLWalker.g:771:47: ( exception_clause )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==SQL92_RESERVED_EXCEPTION) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // PLSQLWalker.g:771:47: exception_clause
                    {
                    pushFollow(FOLLOW_exception_clause_in_body6222);
                    exception_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "body"



    // $ANTLR start "exception_clause"
    // PLSQLWalker.g:776:1: exception_clause : ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ ) ;
    public final void exception_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:777:5: ( ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ ) )
            // PLSQLWalker.g:777:10: ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ )
            {
            match(input,SQL92_RESERVED_EXCEPTION,FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause6248); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:777:37: ( exception_handler )+
            int cnt202=0;
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==SQL92_RESERVED_WHEN) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // PLSQLWalker.g:777:37: exception_handler
            	    {
            	    pushFollow(FOLLOW_exception_handler_in_exception_clause6250);
            	    exception_handler();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt202 >= 1 ) break loop202;
                        EarlyExitException eee =
                            new EarlyExitException(202, input);
                        throw eee;
                }
                cnt202++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "exception_clause"



    // $ANTLR start "exception_handler"
    // PLSQLWalker.g:780:1: exception_handler : ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements ) ;
    public final void exception_handler() throws RecognitionException {
        try {
            // PLSQLWalker.g:781:5: ( ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements ) )
            // PLSQLWalker.g:781:10: ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements )
            {
            match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler6273); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:781:32: ( exception_name )+
            int cnt203=0;
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==EXCEPTION_NAME) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // PLSQLWalker.g:781:32: exception_name
            	    {
            	    pushFollow(FOLLOW_exception_name_in_exception_handler6275);
            	    exception_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt203 >= 1 ) break loop203;
                        EarlyExitException eee =
                            new EarlyExitException(203, input);
                        throw eee;
                }
                cnt203++;
            } while (true);


            pushFollow(FOLLOW_seq_of_statements_in_exception_handler6278);
            seq_of_statements();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "exception_handler"



    // $ANTLR start "block"
    // PLSQLWalker.g:786:1: block : ^( BLOCK ( declare_spec )* body ) ;
    public final void block() throws RecognitionException {
        try {
            // PLSQLWalker.g:787:5: ( ^( BLOCK ( declare_spec )* body ) )
            // PLSQLWalker.g:787:10: ^( BLOCK ( declare_spec )* body )
            {
            match(input,BLOCK,FOLLOW_BLOCK_in_block6302); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:787:18: ( declare_spec )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==CREATE_FUNCTION||LA204_0==CREATE_PROCEDURE||LA204_0==CURSOR_DECLARE||LA204_0==EXCEPTION_DECLARE||LA204_0==PRAGMA_DECLARE||(LA204_0 >= RECORD_TYPE_DECLARE && LA204_0 <= RECORD_VAR_DECLARE)||LA204_0==SUBTYPE_DECLARE||(LA204_0 >= TABLE_TYPE_DECLARE && LA204_0 <= TABLE_VAR_DECLARE)||LA204_0==VARIABLE_DECLARE) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // PLSQLWalker.g:787:18: declare_spec
            	    {
            	    pushFollow(FOLLOW_declare_spec_in_block6304);
            	    declare_spec();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);


            pushFollow(FOLLOW_body_in_block6307);
            body();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "block"



    // $ANTLR start "sql_statement"
    // PLSQLWalker.g:794:1: sql_statement : ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements );
    public final void sql_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:795:5: ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements )
            int alt205=4;
            switch ( input.LA(1) ) {
            case EXECUTE_VK:
                {
                alt205=1;
                }
                break;
            case MERGE_VK:
            case PLSQL_RESERVED_LOCK:
            case SELECT_STATEMENT:
            case SQL92_RESERVED_DELETE:
            case SQL92_RESERVED_INSERT:
            case SQL92_RESERVED_UPDATE:
                {
                alt205=2;
                }
                break;
            case CLOSE_VK:
            case OPEN_VK:
            case SQL92_RESERVED_FETCH:
                {
                alt205=3;
                }
                break;
            case COMMIT_VK:
            case ROLLBACK_VK:
            case SAVEPOINT_VK:
            case SET_CONSTRAINT:
            case SET_TRANSACTION:
                {
                alt205=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                throw nvae;

            }

            switch (alt205) {
                case 1 :
                    // PLSQLWalker.g:795:10: execute_immediate
                    {
                    pushFollow(FOLLOW_execute_immediate_in_sql_statement6332);
                    execute_immediate();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:796:10: data_manipulation_language_statements
                    {
                    pushFollow(FOLLOW_data_manipulation_language_statements_in_sql_statement6343);
                    data_manipulation_language_statements();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:797:10: cursor_manipulation_statements
                    {
                    pushFollow(FOLLOW_cursor_manipulation_statements_in_sql_statement6354);
                    cursor_manipulation_statements();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:798:10: transaction_control_statements
                    {
                    pushFollow(FOLLOW_transaction_control_statements_in_sql_statement6365);
                    transaction_control_statements();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "sql_statement"



    // $ANTLR start "execute_immediate"
    // PLSQLWalker.g:801:1: execute_immediate : ^( EXECUTE_VK expression ( into_clause | using_clause | dynamic_returning_clause )? ) ;
    public final void execute_immediate() throws RecognitionException {
        try {
            // PLSQLWalker.g:802:5: ( ^( EXECUTE_VK expression ( into_clause | using_clause | dynamic_returning_clause )? ) )
            // PLSQLWalker.g:802:10: ^( EXECUTE_VK expression ( into_clause | using_clause | dynamic_returning_clause )? )
            {
            match(input,EXECUTE_VK,FOLLOW_EXECUTE_VK_in_execute_immediate6386); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_execute_immediate6388);
            expression();

            state._fsp--;


            // PLSQLWalker.g:802:34: ( into_clause | using_clause | dynamic_returning_clause )?
            int alt206=4;
            switch ( input.LA(1) ) {
                case BULK_VK:
                case SQL92_RESERVED_INTO:
                    {
                    alt206=1;
                    }
                    break;
                case PLSQL_NON_RESERVED_USING:
                    {
                    alt206=2;
                    }
                    break;
                case DYNAMIC_RETURN:
                    {
                    alt206=3;
                    }
                    break;
            }

            switch (alt206) {
                case 1 :
                    // PLSQLWalker.g:802:35: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_execute_immediate6391);
                    into_clause();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:802:47: using_clause
                    {
                    pushFollow(FOLLOW_using_clause_in_execute_immediate6393);
                    using_clause();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:802:60: dynamic_returning_clause
                    {
                    pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate6395);
                    dynamic_returning_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "execute_immediate"



    // $ANTLR start "dynamic_returning_clause"
    // PLSQLWalker.g:806:1: dynamic_returning_clause : ^( DYNAMIC_RETURN into_clause ) ;
    public final void dynamic_returning_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:807:5: ( ^( DYNAMIC_RETURN into_clause ) )
            // PLSQLWalker.g:807:10: ^( DYNAMIC_RETURN into_clause )
            {
            match(input,DYNAMIC_RETURN,FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause6421); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_into_clause_in_dynamic_returning_clause6423);
            into_clause();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "dynamic_returning_clause"



    // $ANTLR start "data_manipulation_language_statements"
    // PLSQLWalker.g:814:1: data_manipulation_language_statements : ( merge_statement | lock_table_statement | select_statement | update_statement | delete_statement | insert_statement );
    public final void data_manipulation_language_statements() throws RecognitionException {
        try {
            // PLSQLWalker.g:815:5: ( merge_statement | lock_table_statement | select_statement | update_statement | delete_statement | insert_statement )
            int alt207=6;
            switch ( input.LA(1) ) {
            case MERGE_VK:
                {
                alt207=1;
                }
                break;
            case PLSQL_RESERVED_LOCK:
                {
                alt207=2;
                }
                break;
            case SELECT_STATEMENT:
                {
                alt207=3;
                }
                break;
            case SQL92_RESERVED_UPDATE:
                {
                alt207=4;
                }
                break;
            case SQL92_RESERVED_DELETE:
                {
                alt207=5;
                }
                break;
            case SQL92_RESERVED_INSERT:
                {
                alt207=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;

            }

            switch (alt207) {
                case 1 :
                    // PLSQLWalker.g:815:10: merge_statement
                    {
                    pushFollow(FOLLOW_merge_statement_in_data_manipulation_language_statements6448);
                    merge_statement();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:816:10: lock_table_statement
                    {
                    pushFollow(FOLLOW_lock_table_statement_in_data_manipulation_language_statements6459);
                    lock_table_statement();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:817:10: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_data_manipulation_language_statements6470);
                    select_statement();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:818:11: update_statement
                    {
                    pushFollow(FOLLOW_update_statement_in_data_manipulation_language_statements6482);
                    update_statement();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:819:11: delete_statement
                    {
                    pushFollow(FOLLOW_delete_statement_in_data_manipulation_language_statements6494);
                    delete_statement();

                    state._fsp--;


                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:820:10: insert_statement
                    {
                    pushFollow(FOLLOW_insert_statement_in_data_manipulation_language_statements6505);
                    insert_statement();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "data_manipulation_language_statements"



    // $ANTLR start "select_statement"
    // PLSQLWalker.g:823:1: select_statement : ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) ;
    public final void select_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:824:5: ( ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) )
            // PLSQLWalker.g:824:10: ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
            {
            match(input,SELECT_STATEMENT,FOLLOW_SELECT_STATEMENT_in_select_statement6526); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:824:29: ( subquery_factoring_clause )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==SQL92_RESERVED_WITH) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // PLSQLWalker.g:824:29: subquery_factoring_clause
                    {
                    pushFollow(FOLLOW_subquery_factoring_clause_in_select_statement6528);
                    subquery_factoring_clause();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_subquery_in_select_statement6531);
            subquery();

            state._fsp--;


            // PLSQLWalker.g:824:65: ( for_update_clause )*
            loop209:
            do {
                int alt209=2;
                int LA209_0 = input.LA(1);

                if ( (LA209_0==SQL92_RESERVED_FOR) ) {
                    alt209=1;
                }


                switch (alt209) {
            	case 1 :
            	    // PLSQLWalker.g:824:65: for_update_clause
            	    {
            	    pushFollow(FOLLOW_for_update_clause_in_select_statement6533);
            	    for_update_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);


            // PLSQLWalker.g:824:84: ( order_by_clause )*
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==SQL92_RESERVED_ORDER) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    // PLSQLWalker.g:824:84: order_by_clause
            	    {
            	    pushFollow(FOLLOW_order_by_clause_in_select_statement6536);
            	    order_by_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "select_statement"



    // $ANTLR start "subquery_factoring_clause"
    // PLSQLWalker.g:828:1: subquery_factoring_clause : ^( SQL92_RESERVED_WITH ( factoring_element )+ ) ;
    public final void subquery_factoring_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:829:5: ( ^( SQL92_RESERVED_WITH ( factoring_element )+ ) )
            // PLSQLWalker.g:829:10: ^( SQL92_RESERVED_WITH ( factoring_element )+ )
            {
            match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause6562); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:829:32: ( factoring_element )+
            int cnt211=0;
            loop211:
            do {
                int alt211=2;
                int LA211_0 = input.LA(1);

                if ( (LA211_0==FACTORING) ) {
                    alt211=1;
                }


                switch (alt211) {
            	case 1 :
            	    // PLSQLWalker.g:829:32: factoring_element
            	    {
            	    pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause6564);
            	    factoring_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt211 >= 1 ) break loop211;
                        EarlyExitException eee =
                            new EarlyExitException(211, input);
                        throw eee;
                }
                cnt211++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "subquery_factoring_clause"



    // $ANTLR start "factoring_element"
    // PLSQLWalker.g:832:1: factoring_element : ^( FACTORING query_name subquery ) ;
    public final void factoring_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:833:5: ( ^( FACTORING query_name subquery ) )
            // PLSQLWalker.g:833:10: ^( FACTORING query_name subquery )
            {
            match(input,FACTORING,FOLLOW_FACTORING_in_factoring_element6587); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_query_name_in_factoring_element6589);
            query_name();

            state._fsp--;


            pushFollow(FOLLOW_subquery_in_factoring_element6591);
            subquery();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "factoring_element"



    // $ANTLR start "subquery"
    // PLSQLWalker.g:836:1: subquery : ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) ;
    public final void subquery() throws RecognitionException {
        try {
            // PLSQLWalker.g:837:5: ( ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) )
            // PLSQLWalker.g:837:10: ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
            {
            match(input,SUBQUERY,FOLLOW_SUBQUERY_in_subquery6613); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_subquery_basic_elements_in_subquery6615);
            subquery_basic_elements();

            state._fsp--;


            // PLSQLWalker.g:837:45: ( subquery_operation_part )*
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);

                if ( (LA212_0==PLSQL_RESERVED_MINUS||LA212_0==SQL92_RESERVED_INTERSECT||LA212_0==SQL92_RESERVED_UNION) ) {
                    alt212=1;
                }


                switch (alt212) {
            	case 1 :
            	    // PLSQLWalker.g:837:45: subquery_operation_part
            	    {
            	    pushFollow(FOLLOW_subquery_operation_part_in_subquery6617);
            	    subquery_operation_part();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "subquery"



    // $ANTLR start "subquery_operation_part"
    // PLSQLWalker.g:840:1: subquery_operation_part : ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) ;
    public final void subquery_operation_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:841:5: ( ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) )
            // PLSQLWalker.g:841:10: ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements )
            {
            if ( input.LA(1)==PLSQL_RESERVED_MINUS||input.LA(1)==SQL92_RESERVED_INTERSECT||input.LA(1)==SQL92_RESERVED_UNION ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:841:81: ( SQL92_RESERVED_ALL )?
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==SQL92_RESERVED_ALL) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    // PLSQLWalker.g:841:81: SQL92_RESERVED_ALL
                    {
                    match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part6648); 

                    }
                    break;

            }


            pushFollow(FOLLOW_subquery_basic_elements_in_subquery_operation_part6651);
            subquery_basic_elements();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "subquery_operation_part"



    // $ANTLR start "subquery_basic_elements"
    // PLSQLWalker.g:844:1: subquery_basic_elements : ( query_block | subquery );
    public final void subquery_basic_elements() throws RecognitionException {
        try {
            // PLSQLWalker.g:845:5: ( query_block | subquery )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==SQL92_RESERVED_SELECT) ) {
                alt214=1;
            }
            else if ( (LA214_0==SUBQUERY) ) {
                alt214=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;

            }
            switch (alt214) {
                case 1 :
                    // PLSQLWalker.g:845:10: query_block
                    {
                    pushFollow(FOLLOW_query_block_in_subquery_basic_elements6672);
                    query_block();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:846:10: subquery
                    {
                    pushFollow(FOLLOW_subquery_in_subquery_basic_elements6683);
                    subquery();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "subquery_basic_elements"



    // $ANTLR start "query_block"
    // PLSQLWalker.g:849:1: query_block : ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? ( SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( having_clause )? ( model_clause )? ) ;
    public final void query_block() throws RecognitionException {
        try {
            // PLSQLWalker.g:850:5: ( ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? ( SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( having_clause )? ( model_clause )? ) )
            // PLSQLWalker.g:850:10: ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? ( SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( having_clause )? ( model_clause )? )
            {
            match(input,SQL92_RESERVED_SELECT,FOLLOW_SQL92_RESERVED_SELECT_in_query_block6704); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_from_clause_in_query_block6719);
            from_clause();

            state._fsp--;


            // PLSQLWalker.g:852:13: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==SQL92_RESERVED_DISTINCT||LA215_0==SQL92_RESERVED_UNIQUE) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==SQL92_RESERVED_DISTINCT||input.LA(1)==SQL92_RESERVED_UNIQUE ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            // PLSQLWalker.g:852:62: ( SQL92_RESERVED_ALL )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==SQL92_RESERVED_ALL) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // PLSQLWalker.g:852:62: SQL92_RESERVED_ALL
                    {
                    match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_query_block6741); 

                    }
                    break;

            }


            // PLSQLWalker.g:853:13: ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==ASTERISK) ) {
                alt218=1;
            }
            else if ( (LA218_0==SELECT_LIST) ) {
                alt218=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;

            }
            switch (alt218) {
                case 1 :
                    // PLSQLWalker.g:853:18: ASTERISK
                    {
                    match(input,ASTERISK,FOLLOW_ASTERISK_in_query_block6762); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:854:18: ^( SELECT_LIST ( selected_element )+ )
                    {
                    match(input,SELECT_LIST,FOLLOW_SELECT_LIST_in_query_block6782); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:854:32: ( selected_element )+
                    int cnt217=0;
                    loop217:
                    do {
                        int alt217=2;
                        int LA217_0 = input.LA(1);

                        if ( (LA217_0==SELECT_ITEM) ) {
                            alt217=1;
                        }


                        switch (alt217) {
                    	case 1 :
                    	    // PLSQLWalker.g:854:32: selected_element
                    	    {
                    	    pushFollow(FOLLOW_selected_element_in_query_block6784);
                    	    selected_element();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt217 >= 1 ) break loop217;
                                EarlyExitException eee =
                                    new EarlyExitException(217, input);
                                throw eee;
                        }
                        cnt217++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            // PLSQLWalker.g:856:13: ( into_clause )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==BULK_VK||LA219_0==SQL92_RESERVED_INTO) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    // PLSQLWalker.g:856:13: into_clause
                    {
                    pushFollow(FOLLOW_into_clause_in_query_block6814);
                    into_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:856:26: ( where_clause )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==SQL92_RESERVED_WHERE) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // PLSQLWalker.g:856:26: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_query_block6817);
                    where_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:856:40: ( hierarchical_query_clause )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==HIERARCHICAL) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    // PLSQLWalker.g:856:40: hierarchical_query_clause
                    {
                    pushFollow(FOLLOW_hierarchical_query_clause_in_query_block6820);
                    hierarchical_query_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:857:13: ( group_by_clause )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==SQL92_RESERVED_GROUP) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // PLSQLWalker.g:857:13: group_by_clause
                    {
                    pushFollow(FOLLOW_group_by_clause_in_query_block6836);
                    group_by_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:857:30: ( having_clause )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==SQL92_RESERVED_HAVING) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // PLSQLWalker.g:857:30: having_clause
                    {
                    pushFollow(FOLLOW_having_clause_in_query_block6839);
                    having_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:857:45: ( model_clause )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==PLSQL_NON_RESERVED_MODEL) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    // PLSQLWalker.g:857:45: model_clause
                    {
                    pushFollow(FOLLOW_model_clause_in_query_block6842);
                    model_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "query_block"



    // $ANTLR start "selected_element"
    // PLSQLWalker.g:861:1: selected_element : ^( SELECT_ITEM expression ( alias )? ) ;
    public final void selected_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:862:5: ( ^( SELECT_ITEM expression ( alias )? ) )
            // PLSQLWalker.g:862:10: ^( SELECT_ITEM expression ( alias )? )
            {
            match(input,SELECT_ITEM,FOLLOW_SELECT_ITEM_in_selected_element6874); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_selected_element6876);
            expression();

            state._fsp--;


            // PLSQLWalker.g:862:35: ( alias )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==ALIAS) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // PLSQLWalker.g:862:35: alias
                    {
                    pushFollow(FOLLOW_alias_in_selected_element6878);
                    alias();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "selected_element"



    // $ANTLR start "from_clause"
    // PLSQLWalker.g:865:1: from_clause : ^( SQL92_RESERVED_FROM ( table_ref )+ ) ;
    public final void from_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:866:5: ( ^( SQL92_RESERVED_FROM ( table_ref )+ ) )
            // PLSQLWalker.g:866:10: ^( SQL92_RESERVED_FROM ( table_ref )+ )
            {
            match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_from_clause6901); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:866:32: ( table_ref )+
            int cnt226=0;
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==TABLE_REF) ) {
                    alt226=1;
                }


                switch (alt226) {
            	case 1 :
            	    // PLSQLWalker.g:866:32: table_ref
            	    {
            	    pushFollow(FOLLOW_table_ref_in_from_clause6903);
            	    table_ref();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt226 >= 1 ) break loop226;
                        EarlyExitException eee =
                            new EarlyExitException(226, input);
                        throw eee;
                }
                cnt226++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "from_clause"



    // $ANTLR start "table_ref"
    // PLSQLWalker.g:869:1: table_ref : ^( TABLE_REF table_ref_aux ( join_clause )* ) ;
    public final void table_ref() throws RecognitionException {
        try {
            // PLSQLWalker.g:870:5: ( ^( TABLE_REF table_ref_aux ( join_clause )* ) )
            // PLSQLWalker.g:870:10: ^( TABLE_REF table_ref_aux ( join_clause )* )
            {
            match(input,TABLE_REF,FOLLOW_TABLE_REF_in_table_ref6926); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_table_ref_aux_in_table_ref6928);
            table_ref_aux();

            state._fsp--;


            // PLSQLWalker.g:870:36: ( join_clause )*
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==JOIN_DEF) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // PLSQLWalker.g:870:36: join_clause
            	    {
            	    pushFollow(FOLLOW_join_clause_in_table_ref6930);
            	    join_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "table_ref"



    // $ANTLR start "table_ref_aux"
    // PLSQLWalker.g:873:1: table_ref_aux : ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ) ;
    public final void table_ref_aux() throws RecognitionException {
        try {
            // PLSQLWalker.g:874:5: ( ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ) )
            // PLSQLWalker.g:874:10: ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* )
            {
            match(input,TABLE_REF_ELEMENT,FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux6953); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:874:30: ( alias )?
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==ALIAS) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    // PLSQLWalker.g:874:30: alias
                    {
                    pushFollow(FOLLOW_alias_in_table_ref_aux6955);
                    alias();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux6958);
            dml_table_expression_clause();

            state._fsp--;


            // PLSQLWalker.g:874:65: ( ONLY_VK )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==ONLY_VK) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // PLSQLWalker.g:874:65: ONLY_VK
                    {
                    match(input,ONLY_VK,FOLLOW_ONLY_VK_in_table_ref_aux6960); 

                    }
                    break;

            }


            // PLSQLWalker.g:874:74: ( pivot_clause )?
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==PIVOT_VK) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    // PLSQLWalker.g:874:74: pivot_clause
                    {
                    pushFollow(FOLLOW_pivot_clause_in_table_ref_aux6963);
                    pivot_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:874:88: ( unpivot_clause )?
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==UNPIVOT_VK) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    // PLSQLWalker.g:874:88: unpivot_clause
                    {
                    pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux6966);
                    unpivot_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:874:104: ( flashback_query_clause )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==SQL92_RESERVED_AS||LA232_0==VERSIONS_VK) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // PLSQLWalker.g:874:104: flashback_query_clause
            	    {
            	    pushFollow(FOLLOW_flashback_query_clause_in_table_ref_aux6969);
            	    flashback_query_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "table_ref_aux"



    // $ANTLR start "join_clause"
    // PLSQLWalker.g:877:1: join_clause : ^( JOIN_DEF ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux ( query_partition_clause )* ( join_on_part | join_using_part )? ) ;
    public final void join_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:878:5: ( ^( JOIN_DEF ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux ( query_partition_clause )* ( join_on_part | join_using_part )? ) )
            // PLSQLWalker.g:878:10: ^( JOIN_DEF ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux ( query_partition_clause )* ( join_on_part | join_using_part )? )
            {
            match(input,JOIN_DEF,FOLLOW_JOIN_DEF_in_join_clause6992); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:878:21: ( CROSS_VK | NATURAL_VK )?
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==CROSS_VK||LA233_0==NATURAL_VK) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==CROSS_VK||input.LA(1)==NATURAL_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            // PLSQLWalker.g:878:44: ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==FULL_VK||LA234_0==INNER_VK||LA234_0==LEFT_VK||LA234_0==RIGHT_VK) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==FULL_VK||input.LA(1)==INNER_VK||input.LA(1)==LEFT_VK||input.LA(1)==RIGHT_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_table_ref_aux_in_join_clause7012);
            table_ref_aux();

            state._fsp--;


            // PLSQLWalker.g:878:95: ( query_partition_clause )*
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( (LA235_0==PARTITION_VK) ) {
                    alt235=1;
                }


                switch (alt235) {
            	case 1 :
            	    // PLSQLWalker.g:878:95: query_partition_clause
            	    {
            	    pushFollow(FOLLOW_query_partition_clause_in_join_clause7014);
            	    query_partition_clause();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop235;
                }
            } while (true);


            // PLSQLWalker.g:878:119: ( join_on_part | join_using_part )?
            int alt236=3;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==SQL92_RESERVED_ON) ) {
                alt236=1;
            }
            else if ( (LA236_0==PLSQL_NON_RESERVED_USING) ) {
                alt236=2;
            }
            switch (alt236) {
                case 1 :
                    // PLSQLWalker.g:878:120: join_on_part
                    {
                    pushFollow(FOLLOW_join_on_part_in_join_clause7018);
                    join_on_part();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:878:133: join_using_part
                    {
                    pushFollow(FOLLOW_join_using_part_in_join_clause7020);
                    join_using_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "join_clause"



    // $ANTLR start "join_on_part"
    // PLSQLWalker.g:881:1: join_on_part : ^( SQL92_RESERVED_ON expression ) ;
    public final void join_on_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:882:5: ( ^( SQL92_RESERVED_ON expression ) )
            // PLSQLWalker.g:882:10: ^( SQL92_RESERVED_ON expression )
            {
            match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_join_on_part7045); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_join_on_part7047);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "join_on_part"



    // $ANTLR start "join_using_part"
    // PLSQLWalker.g:885:1: join_using_part : ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) ;
    public final void join_using_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:886:5: ( ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) )
            // PLSQLWalker.g:886:10: ^( PLSQL_NON_RESERVED_USING ( column_name )+ )
            {
            match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part7070); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:886:37: ( column_name )+
            int cnt237=0;
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==COLUMN_NAME) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    // PLSQLWalker.g:886:37: column_name
            	    {
            	    pushFollow(FOLLOW_column_name_in_join_using_part7072);
            	    column_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt237 >= 1 ) break loop237;
                        EarlyExitException eee =
                            new EarlyExitException(237, input);
                        throw eee;
                }
                cnt237++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "join_using_part"



    // $ANTLR start "query_partition_clause"
    // PLSQLWalker.g:889:1: query_partition_clause : ^( PARTITION_VK ( expression_list | ( expression )+ ) ) ;
    public final void query_partition_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:890:5: ( ^( PARTITION_VK ( expression_list | ( expression )+ ) ) )
            // PLSQLWalker.g:890:10: ^( PARTITION_VK ( expression_list | ( expression )+ ) )
            {
            match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_query_partition_clause7095); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:890:25: ( expression_list | ( expression )+ )
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==EXPR_LIST) ) {
                alt239=1;
            }
            else if ( (LA239_0==EXPR||LA239_0==LOGIC_EXPR) ) {
                alt239=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;

            }
            switch (alt239) {
                case 1 :
                    // PLSQLWalker.g:890:26: expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_query_partition_clause7098);
                    expression_list();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:890:42: ( expression )+
                    {
                    // PLSQLWalker.g:890:42: ( expression )+
                    int cnt238=0;
                    loop238:
                    do {
                        int alt238=2;
                        int LA238_0 = input.LA(1);

                        if ( (LA238_0==EXPR||LA238_0==LOGIC_EXPR) ) {
                            alt238=1;
                        }


                        switch (alt238) {
                    	case 1 :
                    	    // PLSQLWalker.g:890:42: expression
                    	    {
                    	    pushFollow(FOLLOW_expression_in_query_partition_clause7100);
                    	    expression();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt238 >= 1 ) break loop238;
                                EarlyExitException eee =
                                    new EarlyExitException(238, input);
                                throw eee;
                        }
                        cnt238++;
                    } while (true);


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "query_partition_clause"



    // $ANTLR start "flashback_query_clause"
    // PLSQLWalker.g:893:1: flashback_query_clause : ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) ;
    public final void flashback_query_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:894:5: ( ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) )
            // PLSQLWalker.g:894:10: ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression )
            {
            if ( input.LA(1)==SQL92_RESERVED_AS||input.LA(1)==VERSIONS_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:894:44: ( SCN_VK | TIMESTAMP_VK )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==SCN_VK||LA240_0==TIMESTAMP_VK) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==SCN_VK||input.LA(1)==TIMESTAMP_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expression_in_flashback_query_clause7137);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "flashback_query_clause"



    // $ANTLR start "pivot_clause"
    // PLSQLWalker.g:897:1: pivot_clause : ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) ;
    public final void pivot_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:898:5: ( ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) )
            // PLSQLWalker.g:898:10: ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
            {
            match(input,PIVOT_VK,FOLLOW_PIVOT_VK_in_pivot_clause7160); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:898:21: ( XML_VK )?
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==XML_VK) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    // PLSQLWalker.g:898:21: XML_VK
                    {
                    match(input,XML_VK,FOLLOW_XML_VK_in_pivot_clause7162); 

                    }
                    break;

            }


            // PLSQLWalker.g:898:29: ( pivot_element )+
            int cnt242=0;
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==PIVOT_ELEMENT) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    // PLSQLWalker.g:898:29: pivot_element
            	    {
            	    pushFollow(FOLLOW_pivot_element_in_pivot_clause7165);
            	    pivot_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt242 >= 1 ) break loop242;
                        EarlyExitException eee =
                            new EarlyExitException(242, input);
                        throw eee;
                }
                cnt242++;
            } while (true);


            pushFollow(FOLLOW_pivot_for_clause_in_pivot_clause7168);
            pivot_for_clause();

            state._fsp--;


            pushFollow(FOLLOW_pivot_in_clause_in_pivot_clause7170);
            pivot_in_clause();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "pivot_clause"



    // $ANTLR start "pivot_element"
    // PLSQLWalker.g:901:1: pivot_element : ^( PIVOT_ELEMENT ( alias )? expression ) ;
    public final void pivot_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:902:5: ( ^( PIVOT_ELEMENT ( alias )? expression ) )
            // PLSQLWalker.g:902:10: ^( PIVOT_ELEMENT ( alias )? expression )
            {
            match(input,PIVOT_ELEMENT,FOLLOW_PIVOT_ELEMENT_in_pivot_element7192); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:902:26: ( alias )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==ALIAS) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // PLSQLWalker.g:902:26: alias
                    {
                    pushFollow(FOLLOW_alias_in_pivot_element7194);
                    alias();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_expression_in_pivot_element7197);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "pivot_element"



    // $ANTLR start "pivot_for_clause"
    // PLSQLWalker.g:905:1: pivot_for_clause : ^( SQL92_RESERVED_FOR ( column_name )+ ) ;
    public final void pivot_for_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:906:5: ( ^( SQL92_RESERVED_FOR ( column_name )+ ) )
            // PLSQLWalker.g:906:10: ^( SQL92_RESERVED_FOR ( column_name )+ )
            {
            match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause7219); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:906:31: ( column_name )+
            int cnt244=0;
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==COLUMN_NAME) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // PLSQLWalker.g:906:31: column_name
            	    {
            	    pushFollow(FOLLOW_column_name_in_pivot_for_clause7221);
            	    column_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt244 >= 1 ) break loop244;
                        EarlyExitException eee =
                            new EarlyExitException(244, input);
                        throw eee;
                }
                cnt244++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "pivot_for_clause"



    // $ANTLR start "pivot_in_clause"
    // PLSQLWalker.g:909:1: pivot_in_clause : ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) ;
    public final void pivot_in_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:910:5: ( ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) )
            // PLSQLWalker.g:910:10: ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
            {
            match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause7244); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:911:9: ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
            int alt247=3;
            switch ( input.LA(1) ) {
            case SUBQUERY:
                {
                alt247=1;
                }
                break;
            case ANY_MODE:
                {
                alt247=2;
                }
                break;
            case ELEMENTS_MODE:
                {
                alt247=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;

            }

            switch (alt247) {
                case 1 :
                    // PLSQLWalker.g:911:14: subquery
                    {
                    pushFollow(FOLLOW_subquery_in_pivot_in_clause7260);
                    subquery();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:912:14: ^( ANY_MODE ( SQL92_RESERVED_ANY )+ )
                    {
                    match(input,ANY_MODE,FOLLOW_ANY_MODE_in_pivot_in_clause7276); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:912:25: ( SQL92_RESERVED_ANY )+
                    int cnt245=0;
                    loop245:
                    do {
                        int alt245=2;
                        int LA245_0 = input.LA(1);

                        if ( (LA245_0==SQL92_RESERVED_ANY) ) {
                            alt245=1;
                        }


                        switch (alt245) {
                    	case 1 :
                    	    // PLSQLWalker.g:912:25: SQL92_RESERVED_ANY
                    	    {
                    	    match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause7278); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt245 >= 1 ) break loop245;
                                EarlyExitException eee =
                                    new EarlyExitException(245, input);
                                throw eee;
                        }
                        cnt245++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:913:14: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
                    {
                    match(input,ELEMENTS_MODE,FOLLOW_ELEMENTS_MODE_in_pivot_in_clause7296); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:913:30: ( pivot_in_clause_element )+
                    int cnt246=0;
                    loop246:
                    do {
                        int alt246=2;
                        int LA246_0 = input.LA(1);

                        if ( (LA246_0==PIVOT_IN_ELEMENT) ) {
                            alt246=1;
                        }


                        switch (alt246) {
                    	case 1 :
                    	    // PLSQLWalker.g:913:30: pivot_in_clause_element
                    	    {
                    	    pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause7298);
                    	    pivot_in_clause_element();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt246 >= 1 ) break loop246;
                                EarlyExitException eee =
                                    new EarlyExitException(246, input);
                                throw eee;
                        }
                        cnt246++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "pivot_in_clause"



    // $ANTLR start "pivot_in_clause_element"
    // PLSQLWalker.g:918:1: pivot_in_clause_element : ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) ;
    public final void pivot_in_clause_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:919:5: ( ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) )
            // PLSQLWalker.g:919:10: ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) )
            {
            match(input,PIVOT_IN_ELEMENT,FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element7341); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:919:29: ( alias )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==ALIAS) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // PLSQLWalker.g:919:29: alias
                    {
                    pushFollow(FOLLOW_alias_in_pivot_in_clause_element7343);
                    alias();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:919:36: ( expression | expression_list )
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==EXPR||LA249_0==LOGIC_EXPR) ) {
                alt249=1;
            }
            else if ( (LA249_0==EXPR_LIST) ) {
                alt249=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;

            }
            switch (alt249) {
                case 1 :
                    // PLSQLWalker.g:919:37: expression
                    {
                    pushFollow(FOLLOW_expression_in_pivot_in_clause_element7347);
                    expression();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:919:48: expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_pivot_in_clause_element7349);
                    expression_list();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "pivot_in_clause_element"



    // $ANTLR start "unpivot_clause"
    // PLSQLWalker.g:922:1: unpivot_clause : ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) ;
    public final void unpivot_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:923:5: ( ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) )
            // PLSQLWalker.g:923:10: ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause )
            {
            match(input,UNPIVOT_VK,FOLLOW_UNPIVOT_VK_in_unpivot_clause7372); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:923:23: ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==EXCLUDE_VK||LA251_0==INCLUDE_VK) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // PLSQLWalker.g:923:24: ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )?
                    {
                    if ( input.LA(1)==EXCLUDE_VK||input.LA(1)==INCLUDE_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // PLSQLWalker.g:923:48: ( NULLS_VK )?
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==NULLS_VK) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            // PLSQLWalker.g:923:48: NULLS_VK
                            {
                            match(input,NULLS_VK,FOLLOW_NULLS_VK_in_unpivot_clause7381); 

                            }
                            break;

                    }


                    }
                    break;

            }


            // PLSQLWalker.g:923:60: ( column_name )+
            int cnt252=0;
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( (LA252_0==COLUMN_NAME) ) {
                    alt252=1;
                }


                switch (alt252) {
            	case 1 :
            	    // PLSQLWalker.g:923:60: column_name
            	    {
            	    pushFollow(FOLLOW_column_name_in_unpivot_clause7386);
            	    column_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt252 >= 1 ) break loop252;
                        EarlyExitException eee =
                            new EarlyExitException(252, input);
                        throw eee;
                }
                cnt252++;
            } while (true);


            pushFollow(FOLLOW_pivot_for_clause_in_unpivot_clause7389);
            pivot_for_clause();

            state._fsp--;


            pushFollow(FOLLOW_unpivot_in_clause_in_unpivot_clause7391);
            unpivot_in_clause();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "unpivot_clause"



    // $ANTLR start "unpivot_in_clause"
    // PLSQLWalker.g:926:1: unpivot_in_clause : ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) ;
    public final void unpivot_in_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:927:5: ( ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) )
            // PLSQLWalker.g:927:10: ^( SQL92_RESERVED_IN ( unpivot_in_element )+ )
            {
            match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause7413); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:927:30: ( unpivot_in_element )+
            int cnt253=0;
            loop253:
            do {
                int alt253=2;
                int LA253_0 = input.LA(1);

                if ( (LA253_0==UNPIVOT_IN_ELEMENT) ) {
                    alt253=1;
                }


                switch (alt253) {
            	case 1 :
            	    // PLSQLWalker.g:927:30: unpivot_in_element
            	    {
            	    pushFollow(FOLLOW_unpivot_in_element_in_unpivot_in_clause7415);
            	    unpivot_in_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt253 >= 1 ) break loop253;
                        EarlyExitException eee =
                            new EarlyExitException(253, input);
                        throw eee;
                }
                cnt253++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "unpivot_in_clause"



    // $ANTLR start "unpivot_in_element"
    // PLSQLWalker.g:930:1: unpivot_in_element : ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) ;
    public final void unpivot_in_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:931:5: ( ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) )
            // PLSQLWalker.g:931:10: ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) )
            {
            match(input,UNPIVOT_IN_ELEMENT,FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element7438); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:931:31: ( column_name )+
            int cnt254=0;
            loop254:
            do {
                int alt254=2;
                int LA254_0 = input.LA(1);

                if ( (LA254_0==COLUMN_NAME) ) {
                    alt254=1;
                }


                switch (alt254) {
            	case 1 :
            	    // PLSQLWalker.g:931:31: column_name
            	    {
            	    pushFollow(FOLLOW_column_name_in_unpivot_in_element7440);
            	    column_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt254 >= 1 ) break loop254;
                        EarlyExitException eee =
                            new EarlyExitException(254, input);
                        throw eee;
                }
                cnt254++;
            } while (true);


            match(input,PIVOT_ALIAS,FOLLOW_PIVOT_ALIAS_in_unpivot_in_element7444); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:931:58: ( expression | expression_list )
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==EXPR||LA255_0==LOGIC_EXPR) ) {
                alt255=1;
            }
            else if ( (LA255_0==EXPR_LIST) ) {
                alt255=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;

            }
            switch (alt255) {
                case 1 :
                    // PLSQLWalker.g:931:59: expression
                    {
                    pushFollow(FOLLOW_expression_in_unpivot_in_element7447);
                    expression();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:931:70: expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_unpivot_in_element7449);
                    expression_list();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "unpivot_in_element"



    // $ANTLR start "hierarchical_query_clause"
    // PLSQLWalker.g:934:1: hierarchical_query_clause : ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) ;
    public final void hierarchical_query_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:935:5: ( ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) )
            // PLSQLWalker.g:935:10: ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) )
            {
            match(input,HIERARCHICAL,FOLLOW_HIERARCHICAL_in_hierarchical_query_clause7473); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:935:25: ( start_part )?
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==PLSQL_RESERVED_START) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    // PLSQLWalker.g:935:25: start_part
                    {
                    pushFollow(FOLLOW_start_part_in_hierarchical_query_clause7475);
                    start_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input,SQL92_RESERVED_CONNECT,FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause7479); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:935:62: ( NOCYCLE_VK )?
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==NOCYCLE_VK) ) {
                alt257=1;
            }
            switch (alt257) {
                case 1 :
                    // PLSQLWalker.g:935:62: NOCYCLE_VK
                    {
                    match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause7481); 

                    }
                    break;

            }


            pushFollow(FOLLOW_expression_in_hierarchical_query_clause7484);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "hierarchical_query_clause"



    // $ANTLR start "start_part"
    // PLSQLWalker.g:938:1: start_part : ^( PLSQL_RESERVED_START expression ) ;
    public final void start_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:939:5: ( ^( PLSQL_RESERVED_START expression ) )
            // PLSQLWalker.g:939:10: ^( PLSQL_RESERVED_START expression )
            {
            match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_start_part7507); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_start_part7509);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "start_part"



    // $ANTLR start "group_by_clause"
    // PLSQLWalker.g:942:1: group_by_clause : ^( SQL92_RESERVED_GROUP ( group_by_element )+ ) ;
    public final void group_by_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:943:5: ( ^( SQL92_RESERVED_GROUP ( group_by_element )+ ) )
            // PLSQLWalker.g:943:10: ^( SQL92_RESERVED_GROUP ( group_by_element )+ )
            {
            match(input,SQL92_RESERVED_GROUP,FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause7531); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:943:33: ( group_by_element )+
            int cnt258=0;
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);

                if ( (LA258_0==GROUP_BY_ELEMENT) ) {
                    alt258=1;
                }


                switch (alt258) {
            	case 1 :
            	    // PLSQLWalker.g:943:33: group_by_element
            	    {
            	    pushFollow(FOLLOW_group_by_element_in_group_by_clause7533);
            	    group_by_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt258 >= 1 ) break loop258;
                        EarlyExitException eee =
                            new EarlyExitException(258, input);
                        throw eee;
                }
                cnt258++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "group_by_clause"



    // $ANTLR start "group_by_element"
    // PLSQLWalker.g:946:1: group_by_element : ^( GROUP_BY_ELEMENT group_by_elements ) ;
    public final void group_by_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:947:5: ( ^( GROUP_BY_ELEMENT group_by_elements ) )
            // PLSQLWalker.g:947:10: ^( GROUP_BY_ELEMENT group_by_elements )
            {
            match(input,GROUP_BY_ELEMENT,FOLLOW_GROUP_BY_ELEMENT_in_group_by_element7556); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_group_by_elements_in_group_by_element7558);
            group_by_elements();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "group_by_element"



    // $ANTLR start "group_by_elements"
    // PLSQLWalker.g:950:1: group_by_elements : ( ^( GROUPING_VK ( groupin_set )+ ) | grouping_element );
    public final void group_by_elements() throws RecognitionException {
        try {
            // PLSQLWalker.g:951:5: ( ^( GROUPING_VK ( groupin_set )+ ) | grouping_element )
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==GROUPING_VK) ) {
                alt260=1;
            }
            else if ( (LA260_0==CUBE_VK||(LA260_0 >= EXPR && LA260_0 <= EXPR_LIST)||LA260_0==LOGIC_EXPR||LA260_0==ROLLUP_VK) ) {
                alt260=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                throw nvae;

            }
            switch (alt260) {
                case 1 :
                    // PLSQLWalker.g:951:10: ^( GROUPING_VK ( groupin_set )+ )
                    {
                    match(input,GROUPING_VK,FOLLOW_GROUPING_VK_in_group_by_elements7580); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:951:24: ( groupin_set )+
                    int cnt259=0;
                    loop259:
                    do {
                        int alt259=2;
                        int LA259_0 = input.LA(1);

                        if ( (LA259_0==GROUPIN_SET) ) {
                            alt259=1;
                        }


                        switch (alt259) {
                    	case 1 :
                    	    // PLSQLWalker.g:951:24: groupin_set
                    	    {
                    	    pushFollow(FOLLOW_groupin_set_in_group_by_elements7582);
                    	    groupin_set();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt259 >= 1 ) break loop259;
                                EarlyExitException eee =
                                    new EarlyExitException(259, input);
                                throw eee;
                        }
                        cnt259++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:952:10: grouping_element
                    {
                    pushFollow(FOLLOW_grouping_element_in_group_by_elements7595);
                    grouping_element();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "group_by_elements"



    // $ANTLR start "groupin_set"
    // PLSQLWalker.g:955:1: groupin_set : ^( GROUPIN_SET grouping_element ) ;
    public final void groupin_set() throws RecognitionException {
        try {
            // PLSQLWalker.g:956:5: ( ^( GROUPIN_SET grouping_element ) )
            // PLSQLWalker.g:956:10: ^( GROUPIN_SET grouping_element )
            {
            match(input,GROUPIN_SET,FOLLOW_GROUPIN_SET_in_groupin_set7617); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_grouping_element_in_groupin_set7619);
            grouping_element();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "groupin_set"



    // $ANTLR start "grouping_element"
    // PLSQLWalker.g:959:1: grouping_element : ( ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ ) | expression_list | expression );
    public final void grouping_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:960:5: ( ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ ) | expression_list | expression )
            int alt262=3;
            switch ( input.LA(1) ) {
            case CUBE_VK:
            case ROLLUP_VK:
                {
                alt262=1;
                }
                break;
            case EXPR_LIST:
                {
                alt262=2;
                }
                break;
            case EXPR:
            case LOGIC_EXPR:
                {
                alt262=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;

            }

            switch (alt262) {
                case 1 :
                    // PLSQLWalker.g:960:10: ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ )
                    {
                    if ( input.LA(1)==CUBE_VK||input.LA(1)==ROLLUP_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:960:32: ( grouping_element )+
                    int cnt261=0;
                    loop261:
                    do {
                        int alt261=2;
                        int LA261_0 = input.LA(1);

                        if ( (LA261_0==CUBE_VK||(LA261_0 >= EXPR && LA261_0 <= EXPR_LIST)||LA261_0==LOGIC_EXPR||LA261_0==ROLLUP_VK) ) {
                            alt261=1;
                        }


                        switch (alt261) {
                    	case 1 :
                    	    // PLSQLWalker.g:960:32: grouping_element
                    	    {
                    	    pushFollow(FOLLOW_grouping_element_in_grouping_element7647);
                    	    grouping_element();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt261 >= 1 ) break loop261;
                                EarlyExitException eee =
                                    new EarlyExitException(261, input);
                                throw eee;
                        }
                        cnt261++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:961:10: expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_grouping_element7660);
                    expression_list();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:962:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_grouping_element7671);
                    expression();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "grouping_element"



    // $ANTLR start "having_clause"
    // PLSQLWalker.g:965:1: having_clause : ^( SQL92_RESERVED_HAVING expression ) ;
    public final void having_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:966:5: ( ^( SQL92_RESERVED_HAVING expression ) )
            // PLSQLWalker.g:966:10: ^( SQL92_RESERVED_HAVING expression )
            {
            match(input,SQL92_RESERVED_HAVING,FOLLOW_SQL92_RESERVED_HAVING_in_having_clause7693); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_having_clause7695);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "having_clause"



    // $ANTLR start "model_clause"
    // PLSQLWalker.g:969:1: model_clause : ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) ;
    public final void model_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:970:5: ( ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) )
            // PLSQLWalker.g:970:10: ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
            {
            match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause7717); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_main_model_in_model_clause7719);
            main_model();

            state._fsp--;


            // PLSQLWalker.g:970:48: ( cell_reference_options )*
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);

                if ( (LA263_0==IGNORE_VK||LA263_0==KEEP_VK||LA263_0==SQL92_RESERVED_UNIQUE) ) {
                    alt263=1;
                }


                switch (alt263) {
            	case 1 :
            	    // PLSQLWalker.g:970:48: cell_reference_options
            	    {
            	    pushFollow(FOLLOW_cell_reference_options_in_model_clause7721);
            	    cell_reference_options();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop263;
                }
            } while (true);


            // PLSQLWalker.g:970:72: ( return_rows_clause )?
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==RETURN_VK) ) {
                alt264=1;
            }
            switch (alt264) {
                case 1 :
                    // PLSQLWalker.g:970:72: return_rows_clause
                    {
                    pushFollow(FOLLOW_return_rows_clause_in_model_clause7724);
                    return_rows_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:970:92: ( reference_model )*
            loop265:
            do {
                int alt265=2;
                int LA265_0 = input.LA(1);

                if ( (LA265_0==REFERENCE_VK) ) {
                    alt265=1;
                }


                switch (alt265) {
            	case 1 :
            	    // PLSQLWalker.g:970:92: reference_model
            	    {
            	    pushFollow(FOLLOW_reference_model_in_model_clause7727);
            	    reference_model();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop265;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_clause"



    // $ANTLR start "cell_reference_options"
    // PLSQLWalker.g:973:1: cell_reference_options : ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) );
    public final void cell_reference_options() throws RecognitionException {
        try {
            // PLSQLWalker.g:974:5: ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) )
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==IGNORE_VK||LA266_0==KEEP_VK) ) {
                alt266=1;
            }
            else if ( (LA266_0==SQL92_RESERVED_UNIQUE) ) {
                alt266=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;

            }
            switch (alt266) {
                case 1 :
                    // PLSQLWalker.g:974:10: ^( ( IGNORE_VK | KEEP_VK ) NAV_VK )
                    {
                    if ( input.LA(1)==IGNORE_VK||input.LA(1)==KEEP_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    match(input,NAV_VK,FOLLOW_NAV_VK_in_cell_reference_options7756); 

                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:975:10: ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) )
                    {
                    match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options7769); 

                    match(input, Token.DOWN, null); 
                    if ( input.LA(1)==DIMENSION_VK||input.LA(1)==SINGLE_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "cell_reference_options"



    // $ANTLR start "return_rows_clause"
    // PLSQLWalker.g:978:1: return_rows_clause : ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) ;
    public final void return_rows_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:979:5: ( ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) )
            // PLSQLWalker.g:979:10: ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) )
            {
            match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_rows_clause7797); 

            match(input, Token.DOWN, null); 
            if ( input.LA(1)==SQL92_RESERVED_ALL||input.LA(1)==UPDATED_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "return_rows_clause"



    // $ANTLR start "reference_model"
    // PLSQLWalker.g:982:1: reference_model : ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) ;
    public final void reference_model() throws RecognitionException {
        try {
            // PLSQLWalker.g:983:5: ( ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) )
            // PLSQLWalker.g:983:10: ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* )
            {
            match(input,REFERENCE_VK,FOLLOW_REFERENCE_VK_in_reference_model7825); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_reference_model_name_in_reference_model7827);
            reference_model_name();

            state._fsp--;


            pushFollow(FOLLOW_subquery_in_reference_model7829);
            subquery();

            state._fsp--;


            pushFollow(FOLLOW_model_column_clauses_in_reference_model7831);
            model_column_clauses();

            state._fsp--;


            // PLSQLWalker.g:983:76: ( cell_reference_options )*
            loop267:
            do {
                int alt267=2;
                int LA267_0 = input.LA(1);

                if ( (LA267_0==IGNORE_VK||LA267_0==KEEP_VK||LA267_0==SQL92_RESERVED_UNIQUE) ) {
                    alt267=1;
                }


                switch (alt267) {
            	case 1 :
            	    // PLSQLWalker.g:983:76: cell_reference_options
            	    {
            	    pushFollow(FOLLOW_cell_reference_options_in_reference_model7833);
            	    cell_reference_options();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop267;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "reference_model"



    // $ANTLR start "main_model"
    // PLSQLWalker.g:986:1: main_model : ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) ;
    public final void main_model() throws RecognitionException {
        try {
            // PLSQLWalker.g:987:5: ( ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) )
            // PLSQLWalker.g:987:10: ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
            {
            match(input,MAIN_MODEL,FOLLOW_MAIN_MODEL_in_main_model7856); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:987:23: ( main_model_name )?
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==MAIN_MODEL_NAME) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    // PLSQLWalker.g:987:23: main_model_name
                    {
                    pushFollow(FOLLOW_main_model_name_in_main_model7858);
                    main_model_name();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_model_column_clauses_in_main_model7861);
            model_column_clauses();

            state._fsp--;


            pushFollow(FOLLOW_model_rules_clause_in_main_model7863);
            model_rules_clause();

            state._fsp--;


            // PLSQLWalker.g:987:80: ( cell_reference_options )*
            loop269:
            do {
                int alt269=2;
                int LA269_0 = input.LA(1);

                if ( (LA269_0==IGNORE_VK||LA269_0==KEEP_VK||LA269_0==SQL92_RESERVED_UNIQUE) ) {
                    alt269=1;
                }


                switch (alt269) {
            	case 1 :
            	    // PLSQLWalker.g:987:80: cell_reference_options
            	    {
            	    pushFollow(FOLLOW_cell_reference_options_in_main_model7865);
            	    cell_reference_options();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    break loop269;
                }
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "main_model"



    // $ANTLR start "model_column_clauses"
    // PLSQLWalker.g:990:1: model_column_clauses : ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) ;
    public final void model_column_clauses() throws RecognitionException {
        try {
            // PLSQLWalker.g:991:5: ( ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) )
            // PLSQLWalker.g:991:10: ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? )
            {
            match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column_clauses7888); 

            match(input, Token.DOWN, null); 
            match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_model_column_clauses7891); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_model_column_list_in_model_column_clauses7893);
            model_column_list();

            state._fsp--;


            match(input, Token.UP, null); 


            match(input,MEASURES_VK,FOLLOW_MEASURES_VK_in_model_column_clauses7897); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_model_column_list_in_model_column_clauses7899);
            model_column_list();

            state._fsp--;


            match(input, Token.UP, null); 


            // PLSQLWalker.g:991:92: ( model_column_partition_part )?
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==PARTITION_VK) ) {
                alt270=1;
            }
            switch (alt270) {
                case 1 :
                    // PLSQLWalker.g:991:92: model_column_partition_part
                    {
                    pushFollow(FOLLOW_model_column_partition_part_in_model_column_clauses7902);
                    model_column_partition_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_column_clauses"



    // $ANTLR start "model_column_partition_part"
    // PLSQLWalker.g:994:1: model_column_partition_part : ^( PARTITION_VK model_column_list ) ;
    public final void model_column_partition_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:995:5: ( ^( PARTITION_VK model_column_list ) )
            // PLSQLWalker.g:995:10: ^( PARTITION_VK model_column_list )
            {
            match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_model_column_partition_part7925); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_model_column_list_in_model_column_partition_part7927);
            model_column_list();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_column_partition_part"



    // $ANTLR start "model_column_list"
    // PLSQLWalker.g:998:1: model_column_list : ^( MODEL_COLUMNS ( model_column )+ ) ;
    public final void model_column_list() throws RecognitionException {
        try {
            // PLSQLWalker.g:999:5: ( ^( MODEL_COLUMNS ( model_column )+ ) )
            // PLSQLWalker.g:999:10: ^( MODEL_COLUMNS ( model_column )+ )
            {
            match(input,MODEL_COLUMNS,FOLLOW_MODEL_COLUMNS_in_model_column_list7949); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:999:26: ( model_column )+
            int cnt271=0;
            loop271:
            do {
                int alt271=2;
                int LA271_0 = input.LA(1);

                if ( (LA271_0==MODEL_COLUMN) ) {
                    alt271=1;
                }


                switch (alt271) {
            	case 1 :
            	    // PLSQLWalker.g:999:26: model_column
            	    {
            	    pushFollow(FOLLOW_model_column_in_model_column_list7951);
            	    model_column();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt271 >= 1 ) break loop271;
                        EarlyExitException eee =
                            new EarlyExitException(271, input);
                        throw eee;
                }
                cnt271++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_column_list"



    // $ANTLR start "model_column"
    // PLSQLWalker.g:1002:1: model_column : ^( MODEL_COLUMN ( alias )? expression ) ;
    public final void model_column() throws RecognitionException {
        try {
            // PLSQLWalker.g:1003:5: ( ^( MODEL_COLUMN ( alias )? expression ) )
            // PLSQLWalker.g:1003:10: ^( MODEL_COLUMN ( alias )? expression )
            {
            match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column7974); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1003:25: ( alias )?
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==ALIAS) ) {
                alt272=1;
            }
            switch (alt272) {
                case 1 :
                    // PLSQLWalker.g:1003:25: alias
                    {
                    pushFollow(FOLLOW_alias_in_model_column7976);
                    alias();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_expression_in_model_column7979);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_column"



    // $ANTLR start "model_rules_clause"
    // PLSQLWalker.g:1006:1: model_rules_clause : ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) ;
    public final void model_rules_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1007:5: ( ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) )
            // PLSQLWalker.g:1007:10: ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
            {
            match(input,MODEL_RULES,FOLLOW_MODEL_RULES_in_model_rules_clause8002); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1007:24: ( model_rules_element )+
            int cnt273=0;
            loop273:
            do {
                int alt273=2;
                int LA273_0 = input.LA(1);

                if ( (LA273_0==MODEL_RULE) ) {
                    alt273=1;
                }


                switch (alt273) {
            	case 1 :
            	    // PLSQLWalker.g:1007:24: model_rules_element
            	    {
            	    pushFollow(FOLLOW_model_rules_element_in_model_rules_clause8004);
            	    model_rules_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt273 >= 1 ) break loop273;
                        EarlyExitException eee =
                            new EarlyExitException(273, input);
                        throw eee;
                }
                cnt273++;
            } while (true);


            // PLSQLWalker.g:1007:45: ( model_rules_part )?
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==RULES_VK) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    // PLSQLWalker.g:1007:45: model_rules_part
                    {
                    pushFollow(FOLLOW_model_rules_part_in_model_rules_clause8007);
                    model_rules_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_rules_clause"



    // $ANTLR start "model_rules_part"
    // PLSQLWalker.g:1010:1: model_rules_part : ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) ;
    public final void model_rules_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1011:5: ( ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) )
            // PLSQLWalker.g:1011:10: ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? )
            {
            match(input,RULES_VK,FOLLOW_RULES_VK_in_model_rules_part8030); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1012:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
                int alt276=3;
                int LA276_0 = input.LA(1);

                if ( (LA276_0==SQL92_RESERVED_UPDATE) ) {
                    alt276=1;
                }
                else if ( (LA276_0==UPSERT_VK) ) {
                    alt276=2;
                }
                switch (alt276) {
                    case 1 :
                        // PLSQLWalker.g:1012:14: SQL92_RESERVED_UPDATE
                        {
                        match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part8046); 

                        }
                        break;
                    case 2 :
                        // PLSQLWalker.g:1012:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
                        {
                        match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_part8048); 

                        // PLSQLWalker.g:1012:46: ( SQL92_RESERVED_ALL )?
                        int alt275=2;
                        int LA275_0 = input.LA(1);

                        if ( (LA275_0==SQL92_RESERVED_ALL) ) {
                            alt275=1;
                        }
                        switch (alt275) {
                            case 1 :
                                // PLSQLWalker.g:1012:46: SQL92_RESERVED_ALL
                                {
                                match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part8050); 

                                }
                                break;

                        }


                        }
                        break;

                }


                // PLSQLWalker.g:1013:13: ( AUTOMATIC_VK | SEQUENTIAL_VK )?
                int alt277=2;
                int LA277_0 = input.LA(1);

                if ( (LA277_0==AUTOMATIC_VK||LA277_0==SEQUENTIAL_VK) ) {
                    alt277=1;
                }
                switch (alt277) {
                    case 1 :
                        // PLSQLWalker.g:
                        {
                        if ( input.LA(1)==AUTOMATIC_VK||input.LA(1)==SEQUENTIAL_VK ) {
                            input.consume();
                            state.errorRecovery=false;
                        }
                        else {
                            MismatchedSetException mse = new MismatchedSetException(null,input);
                            throw mse;
                        }


                        }
                        break;

                }


                // PLSQLWalker.g:1014:13: ( model_iterate_clause )?
                int alt278=2;
                int LA278_0 = input.LA(1);

                if ( (LA278_0==ITERATE_VK) ) {
                    alt278=1;
                }
                switch (alt278) {
                    case 1 :
                        // PLSQLWalker.g:1014:13: model_iterate_clause
                        {
                        pushFollow(FOLLOW_model_iterate_clause_in_model_rules_part8088);
                        model_iterate_clause();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_rules_part"



    // $ANTLR start "model_rules_element"
    // PLSQLWalker.g:1018:1: model_rules_element : ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) ;
    public final void model_rules_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1019:5: ( ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) )
            // PLSQLWalker.g:1019:10: ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? )
            {
            match(input,MODEL_RULE,FOLLOW_MODEL_RULE_in_model_rules_element8120); 

            match(input, Token.DOWN, null); 
            match(input,ASSIGN,FOLLOW_ASSIGN_in_model_rules_element8136); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_model_expression_in_model_rules_element8138);
            model_expression();

            state._fsp--;


            pushFollow(FOLLOW_expression_in_model_rules_element8140);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            // PLSQLWalker.g:1021:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
            int alt280=3;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==SQL92_RESERVED_UPDATE) ) {
                alt280=1;
            }
            else if ( (LA280_0==UPSERT_VK) ) {
                alt280=2;
            }
            switch (alt280) {
                case 1 :
                    // PLSQLWalker.g:1021:14: SQL92_RESERVED_UPDATE
                    {
                    match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element8157); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1021:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
                    {
                    match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_element8159); 

                    // PLSQLWalker.g:1021:46: ( SQL92_RESERVED_ALL )?
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==SQL92_RESERVED_ALL) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            // PLSQLWalker.g:1021:46: SQL92_RESERVED_ALL
                            {
                            match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element8161); 

                            }
                            break;

                    }


                    }
                    break;

            }


            // PLSQLWalker.g:1022:13: ( order_by_clause )?
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==SQL92_RESERVED_ORDER) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    // PLSQLWalker.g:1022:13: order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_model_rules_element8179);
                    order_by_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_rules_element"



    // $ANTLR start "model_iterate_clause"
    // PLSQLWalker.g:1026:1: model_iterate_clause : ^( ITERATE_VK expression ( until_part )? ) ;
    public final void model_iterate_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1027:5: ( ^( ITERATE_VK expression ( until_part )? ) )
            // PLSQLWalker.g:1027:10: ^( ITERATE_VK expression ( until_part )? )
            {
            match(input,ITERATE_VK,FOLLOW_ITERATE_VK_in_model_iterate_clause8211); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_model_iterate_clause8213);
            expression();

            state._fsp--;


            // PLSQLWalker.g:1027:34: ( until_part )?
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==UNTIL_VK) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    // PLSQLWalker.g:1027:34: until_part
                    {
                    pushFollow(FOLLOW_until_part_in_model_iterate_clause8215);
                    until_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_iterate_clause"



    // $ANTLR start "until_part"
    // PLSQLWalker.g:1030:1: until_part : ^( UNTIL_VK expression ) ;
    public final void until_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1031:5: ( ^( UNTIL_VK expression ) )
            // PLSQLWalker.g:1031:10: ^( UNTIL_VK expression )
            {
            match(input,UNTIL_VK,FOLLOW_UNTIL_VK_in_until_part8238); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_until_part8240);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "until_part"



    // $ANTLR start "order_by_clause"
    // PLSQLWalker.g:1034:1: order_by_clause : ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) ;
    public final void order_by_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1035:5: ( ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) )
            // PLSQLWalker.g:1035:10: ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
            {
            match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause8262); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1035:33: ( SIBLINGS_VK )?
            int alt283=2;
            int LA283_0 = input.LA(1);

            if ( (LA283_0==SIBLINGS_VK) ) {
                alt283=1;
            }
            switch (alt283) {
                case 1 :
                    // PLSQLWalker.g:1035:33: SIBLINGS_VK
                    {
                    match(input,SIBLINGS_VK,FOLLOW_SIBLINGS_VK_in_order_by_clause8264); 

                    }
                    break;

            }


            match(input,ORDER_BY_ELEMENTS,FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause8268); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1035:66: ( order_by_elements )+
            int cnt284=0;
            loop284:
            do {
                int alt284=2;
                int LA284_0 = input.LA(1);

                if ( (LA284_0==ORDER_BY_ELEMENT) ) {
                    alt284=1;
                }


                switch (alt284) {
            	case 1 :
            	    // PLSQLWalker.g:1035:66: order_by_elements
            	    {
            	    pushFollow(FOLLOW_order_by_elements_in_order_by_clause8270);
            	    order_by_elements();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt284 >= 1 ) break loop284;
                        EarlyExitException eee =
                            new EarlyExitException(284, input);
                        throw eee;
                }
                cnt284++;
            } while (true);


            match(input, Token.UP, null); 


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "order_by_clause"



    // $ANTLR start "order_by_elements"
    // PLSQLWalker.g:1038:1: order_by_elements : ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) ;
    public final void order_by_elements() throws RecognitionException {
        try {
            // PLSQLWalker.g:1039:5: ( ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) )
            // PLSQLWalker.g:1039:10: ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? )
            {
            match(input,ORDER_BY_ELEMENT,FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements8294); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_order_by_elements8296);
            expression();

            state._fsp--;


            // PLSQLWalker.g:1039:40: ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )?
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==SQL92_RESERVED_ASC||LA285_0==SQL92_RESERVED_DESC) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==SQL92_RESERVED_ASC||input.LA(1)==SQL92_RESERVED_DESC ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            // PLSQLWalker.g:1039:82: ( NULLS_VK ( FIRST_VK | LAST_VK ) )?
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==NULLS_VK) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    // PLSQLWalker.g:1039:83: NULLS_VK ( FIRST_VK | LAST_VK )
                    {
                    match(input,NULLS_VK,FOLLOW_NULLS_VK_in_order_by_elements8306); 

                    if ( input.LA(1)==FIRST_VK||input.LA(1)==LAST_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "order_by_elements"



    // $ANTLR start "for_update_clause"
    // PLSQLWalker.g:1042:1: for_update_clause : ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) ;
    public final void for_update_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1043:5: ( ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) )
            // PLSQLWalker.g:1043:10: ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? )
            {
            match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause8336); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1043:31: ( for_update_of_part )?
                int alt287=2;
                int LA287_0 = input.LA(1);

                if ( (LA287_0==SQL92_RESERVED_OF) ) {
                    alt287=1;
                }
                switch (alt287) {
                    case 1 :
                        // PLSQLWalker.g:1043:31: for_update_of_part
                        {
                        pushFollow(FOLLOW_for_update_of_part_in_for_update_clause8338);
                        for_update_of_part();

                        state._fsp--;


                        }
                        break;

                }


                // PLSQLWalker.g:1043:51: ( for_update_options )?
                int alt288=2;
                int LA288_0 = input.LA(1);

                if ( (LA288_0==PLSQL_RESERVED_NOWAIT||LA288_0==SKIP_VK||LA288_0==WAIT_VK) ) {
                    alt288=1;
                }
                switch (alt288) {
                    case 1 :
                        // PLSQLWalker.g:1043:51: for_update_options
                        {
                        pushFollow(FOLLOW_for_update_options_in_for_update_clause8341);
                        for_update_options();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "for_update_clause"



    // $ANTLR start "for_update_of_part"
    // PLSQLWalker.g:1046:1: for_update_of_part : ^( SQL92_RESERVED_OF ( column_name )+ ) ;
    public final void for_update_of_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1047:5: ( ^( SQL92_RESERVED_OF ( column_name )+ ) )
            // PLSQLWalker.g:1047:10: ^( SQL92_RESERVED_OF ( column_name )+ )
            {
            match(input,SQL92_RESERVED_OF,FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part8364); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1047:30: ( column_name )+
            int cnt289=0;
            loop289:
            do {
                int alt289=2;
                int LA289_0 = input.LA(1);

                if ( (LA289_0==COLUMN_NAME) ) {
                    alt289=1;
                }


                switch (alt289) {
            	case 1 :
            	    // PLSQLWalker.g:1047:30: column_name
            	    {
            	    pushFollow(FOLLOW_column_name_in_for_update_of_part8366);
            	    column_name();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt289 >= 1 ) break loop289;
                        EarlyExitException eee =
                            new EarlyExitException(289, input);
                        throw eee;
                }
                cnt289++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "for_update_of_part"



    // $ANTLR start "for_update_options"
    // PLSQLWalker.g:1050:1: for_update_options : ( SKIP_VK | PLSQL_RESERVED_NOWAIT | ^( WAIT_VK expression ) );
    public final void for_update_options() throws RecognitionException {
        try {
            // PLSQLWalker.g:1051:5: ( SKIP_VK | PLSQL_RESERVED_NOWAIT | ^( WAIT_VK expression ) )
            int alt290=3;
            switch ( input.LA(1) ) {
            case SKIP_VK:
                {
                alt290=1;
                }
                break;
            case PLSQL_RESERVED_NOWAIT:
                {
                alt290=2;
                }
                break;
            case WAIT_VK:
                {
                alt290=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 290, 0, input);

                throw nvae;

            }

            switch (alt290) {
                case 1 :
                    // PLSQLWalker.g:1051:10: SKIP_VK
                    {
                    match(input,SKIP_VK,FOLLOW_SKIP_VK_in_for_update_options8388); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1052:10: PLSQL_RESERVED_NOWAIT
                    {
                    match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options8399); 

                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1053:10: ^( WAIT_VK expression )
                    {
                    match(input,WAIT_VK,FOLLOW_WAIT_VK_in_for_update_options8411); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_for_update_options8413);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "for_update_options"



    // $ANTLR start "update_statement"
    // PLSQLWalker.g:1058:1: update_statement : ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) ;
    public final void update_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1059:5: ( ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) )
            // PLSQLWalker.g:1059:10: ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
            {
            match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement8437); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_general_table_ref_in_update_statement8439);
            general_table_ref();

            state._fsp--;


            pushFollow(FOLLOW_update_set_clause_in_update_statement8453);
            update_set_clause();

            state._fsp--;


            // PLSQLWalker.g:1061:13: ( where_clause )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==SQL92_RESERVED_WHERE) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    // PLSQLWalker.g:1061:13: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_update_statement8467);
                    where_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1061:27: ( static_returning_clause )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==STATIC_RETURNING) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    // PLSQLWalker.g:1061:27: static_returning_clause
                    {
                    pushFollow(FOLLOW_static_returning_clause_in_update_statement8470);
                    static_returning_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1061:52: ( error_logging_clause )?
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==LOG_VK) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    // PLSQLWalker.g:1061:52: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_update_statement8473);
                    error_logging_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "update_statement"



    // $ANTLR start "update_set_clause"
    // PLSQLWalker.g:1066:1: update_set_clause : ^( SET_VK ( update_set_elements )+ ) ;
    public final void update_set_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1067:5: ( ^( SET_VK ( update_set_elements )+ ) )
            // PLSQLWalker.g:1067:10: ^( SET_VK ( update_set_elements )+ )
            {
            match(input,SET_VK,FOLLOW_SET_VK_in_update_set_clause8506); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1067:19: ( update_set_elements )+
            int cnt294=0;
            loop294:
            do {
                int alt294=2;
                int LA294_0 = input.LA(1);

                if ( (LA294_0==ASSIGN||LA294_0==VALUE_VK) ) {
                    alt294=1;
                }


                switch (alt294) {
            	case 1 :
            	    // PLSQLWalker.g:1067:19: update_set_elements
            	    {
            	    pushFollow(FOLLOW_update_set_elements_in_update_set_clause8508);
            	    update_set_elements();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt294 >= 1 ) break loop294;
                        EarlyExitException eee =
                            new EarlyExitException(294, input);
                        throw eee;
                }
                cnt294++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "update_set_clause"



    // $ANTLR start "update_set_elements"
    // PLSQLWalker.g:1070:1: update_set_elements : ( ^( ASSIGN column_name expression ) | ^( ASSIGN ( column_name )+ subquery ) | ^( VALUE_VK ( char_set_name )? ID expression ) );
    public final void update_set_elements() throws RecognitionException {
        try {
            // PLSQLWalker.g:1071:5: ( ^( ASSIGN column_name expression ) | ^( ASSIGN ( column_name )+ subquery ) | ^( VALUE_VK ( char_set_name )? ID expression ) )
            int alt297=3;
            alt297 = dfa297.predict(input);
            switch (alt297) {
                case 1 :
                    // PLSQLWalker.g:1071:10: ^( ASSIGN column_name expression )
                    {
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements8531); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_column_name_in_update_set_elements8533);
                    column_name();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_in_update_set_elements8535);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1072:10: ^( ASSIGN ( column_name )+ subquery )
                    {
                    match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements8548); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1072:19: ( column_name )+
                    int cnt295=0;
                    loop295:
                    do {
                        int alt295=2;
                        int LA295_0 = input.LA(1);

                        if ( (LA295_0==COLUMN_NAME) ) {
                            alt295=1;
                        }


                        switch (alt295) {
                    	case 1 :
                    	    // PLSQLWalker.g:1072:19: column_name
                    	    {
                    	    pushFollow(FOLLOW_column_name_in_update_set_elements8550);
                    	    column_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt295 >= 1 ) break loop295;
                                EarlyExitException eee =
                                    new EarlyExitException(295, input);
                                throw eee;
                        }
                        cnt295++;
                    } while (true);


                    pushFollow(FOLLOW_subquery_in_update_set_elements8553);
                    subquery();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1073:10: ^( VALUE_VK ( char_set_name )? ID expression )
                    {
                    match(input,VALUE_VK,FOLLOW_VALUE_VK_in_update_set_elements8566); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1073:21: ( char_set_name )?
                    int alt296=2;
                    int LA296_0 = input.LA(1);

                    if ( (LA296_0==CHAR_SET_NAME) ) {
                        alt296=1;
                    }
                    switch (alt296) {
                        case 1 :
                            // PLSQLWalker.g:1073:21: char_set_name
                            {
                            pushFollow(FOLLOW_char_set_name_in_update_set_elements8568);
                            char_set_name();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input,ID,FOLLOW_ID_in_update_set_elements8571); 

                    pushFollow(FOLLOW_expression_in_update_set_elements8573);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "update_set_elements"



    // $ANTLR start "delete_statement"
    // PLSQLWalker.g:1078:1: delete_statement : ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) ;
    public final void delete_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1079:5: ( ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) )
            // PLSQLWalker.g:1079:10: ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
            {
            match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement8597); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_general_table_ref_in_delete_statement8599);
            general_table_ref();

            state._fsp--;


            // PLSQLWalker.g:1080:13: ( where_clause )?
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==SQL92_RESERVED_WHERE) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    // PLSQLWalker.g:1080:13: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_delete_statement8613);
                    where_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1080:27: ( static_returning_clause )?
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==STATIC_RETURNING) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    // PLSQLWalker.g:1080:27: static_returning_clause
                    {
                    pushFollow(FOLLOW_static_returning_clause_in_delete_statement8616);
                    static_returning_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1080:52: ( error_logging_clause )?
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==LOG_VK) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    // PLSQLWalker.g:1080:52: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_delete_statement8619);
                    error_logging_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "delete_statement"



    // $ANTLR start "insert_statement"
    // PLSQLWalker.g:1083:1: insert_statement : ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) ) ;
    public final void insert_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1084:5: ( ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) ) )
            // PLSQLWalker.g:1084:10: ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) )
            {
            match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement8642); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1085:9: ( single_table_insert | multi_table_insert )
            int alt301=2;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==SINGLE_TABLE_MODE) ) {
                alt301=1;
            }
            else if ( (LA301_0==MULTI_TABLE_MODE) ) {
                alt301=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);

                throw nvae;

            }
            switch (alt301) {
                case 1 :
                    // PLSQLWalker.g:1085:14: single_table_insert
                    {
                    pushFollow(FOLLOW_single_table_insert_in_insert_statement8657);
                    single_table_insert();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1086:14: multi_table_insert
                    {
                    pushFollow(FOLLOW_multi_table_insert_in_insert_statement8672);
                    multi_table_insert();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "insert_statement"



    // $ANTLR start "single_table_insert"
    // PLSQLWalker.g:1093:1: single_table_insert : ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) ;
    public final void single_table_insert() throws RecognitionException {
        try {
            // PLSQLWalker.g:1094:5: ( ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) )
            // PLSQLWalker.g:1094:10: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? )
            {
            match(input,SINGLE_TABLE_MODE,FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert8715); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_insert_into_clause_in_single_table_insert8717);
            insert_into_clause();

            state._fsp--;


            // PLSQLWalker.g:1094:49: ( values_clause ( static_returning_clause )? | select_statement )
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==SQL92_RESERVED_VALUES) ) {
                alt303=1;
            }
            else if ( (LA303_0==SELECT_STATEMENT) ) {
                alt303=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 303, 0, input);

                throw nvae;

            }
            switch (alt303) {
                case 1 :
                    // PLSQLWalker.g:1094:50: values_clause ( static_returning_clause )?
                    {
                    pushFollow(FOLLOW_values_clause_in_single_table_insert8720);
                    values_clause();

                    state._fsp--;


                    // PLSQLWalker.g:1094:64: ( static_returning_clause )?
                    int alt302=2;
                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==STATIC_RETURNING) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            // PLSQLWalker.g:1094:64: static_returning_clause
                            {
                            pushFollow(FOLLOW_static_returning_clause_in_single_table_insert8722);
                            static_returning_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1094:90: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_single_table_insert8726);
                    select_statement();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1094:108: ( error_logging_clause )?
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( (LA304_0==LOG_VK) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    // PLSQLWalker.g:1094:108: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_single_table_insert8729);
                    error_logging_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "single_table_insert"



    // $ANTLR start "multi_table_insert"
    // PLSQLWalker.g:1097:1: multi_table_insert : ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) ;
    public final void multi_table_insert() throws RecognitionException {
        try {
            // PLSQLWalker.g:1098:5: ( ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) )
            // PLSQLWalker.g:1098:10: ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) )
            {
            match(input,MULTI_TABLE_MODE,FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert8752); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_select_statement_in_multi_table_insert8754);
            select_statement();

            state._fsp--;


            // PLSQLWalker.g:1098:46: ( conditional_insert_clause | ( multi_table_element )+ )
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==CONDITIONAL_INSERT) ) {
                alt306=1;
            }
            else if ( (LA306_0==TABLE_ELEMENT) ) {
                alt306=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 306, 0, input);

                throw nvae;

            }
            switch (alt306) {
                case 1 :
                    // PLSQLWalker.g:1098:47: conditional_insert_clause
                    {
                    pushFollow(FOLLOW_conditional_insert_clause_in_multi_table_insert8757);
                    conditional_insert_clause();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1098:73: ( multi_table_element )+
                    {
                    // PLSQLWalker.g:1098:73: ( multi_table_element )+
                    int cnt305=0;
                    loop305:
                    do {
                        int alt305=2;
                        int LA305_0 = input.LA(1);

                        if ( (LA305_0==TABLE_ELEMENT) ) {
                            alt305=1;
                        }


                        switch (alt305) {
                    	case 1 :
                    	    // PLSQLWalker.g:1098:73: multi_table_element
                    	    {
                    	    pushFollow(FOLLOW_multi_table_element_in_multi_table_insert8759);
                    	    multi_table_element();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt305 >= 1 ) break loop305;
                                EarlyExitException eee =
                                    new EarlyExitException(305, input);
                                throw eee;
                        }
                        cnt305++;
                    } while (true);


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "multi_table_insert"



    // $ANTLR start "multi_table_element"
    // PLSQLWalker.g:1101:1: multi_table_element : ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) ;
    public final void multi_table_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1102:5: ( ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) )
            // PLSQLWalker.g:1102:10: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
            {
            match(input,TABLE_ELEMENT,FOLLOW_TABLE_ELEMENT_in_multi_table_element8783); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_insert_into_clause_in_multi_table_element8785);
            insert_into_clause();

            state._fsp--;


            // PLSQLWalker.g:1102:45: ( values_clause )?
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( (LA307_0==SQL92_RESERVED_VALUES) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    // PLSQLWalker.g:1102:45: values_clause
                    {
                    pushFollow(FOLLOW_values_clause_in_multi_table_element8787);
                    values_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1102:60: ( error_logging_clause )?
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( (LA308_0==LOG_VK) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    // PLSQLWalker.g:1102:60: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_multi_table_element8790);
                    error_logging_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "multi_table_element"



    // $ANTLR start "conditional_insert_clause"
    // PLSQLWalker.g:1105:1: conditional_insert_clause : ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) ;
    public final void conditional_insert_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1106:5: ( ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) )
            // PLSQLWalker.g:1106:10: ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
            {
            match(input,CONDITIONAL_INSERT,FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause8813); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1106:31: ( SQL92_RESERVED_ALL | FIRST_VK )?
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==FIRST_VK||LA309_0==SQL92_RESERVED_ALL) ) {
                alt309=1;
            }
            switch (alt309) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==FIRST_VK||input.LA(1)==SQL92_RESERVED_ALL ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            // PLSQLWalker.g:1106:62: ( conditional_insert_when_part )+
            int cnt310=0;
            loop310:
            do {
                int alt310=2;
                int LA310_0 = input.LA(1);

                if ( (LA310_0==SQL92_RESERVED_WHEN) ) {
                    alt310=1;
                }


                switch (alt310) {
            	case 1 :
            	    // PLSQLWalker.g:1106:62: conditional_insert_when_part
            	    {
            	    pushFollow(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause8822);
            	    conditional_insert_when_part();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt310 >= 1 ) break loop310;
                        EarlyExitException eee =
                            new EarlyExitException(310, input);
                        throw eee;
                }
                cnt310++;
            } while (true);


            // PLSQLWalker.g:1106:92: ( conditional_insert_else_part )?
            int alt311=2;
            int LA311_0 = input.LA(1);

            if ( (LA311_0==SQL92_RESERVED_ELSE) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    // PLSQLWalker.g:1106:92: conditional_insert_else_part
                    {
                    pushFollow(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause8825);
                    conditional_insert_else_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "conditional_insert_clause"



    // $ANTLR start "conditional_insert_when_part"
    // PLSQLWalker.g:1109:1: conditional_insert_when_part : ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) ;
    public final void conditional_insert_when_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1110:5: ( ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) )
            // PLSQLWalker.g:1110:10: ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ )
            {
            match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part8849); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_conditional_insert_when_part8851);
            expression();

            state._fsp--;


            // PLSQLWalker.g:1110:43: ( multi_table_element )+
            int cnt312=0;
            loop312:
            do {
                int alt312=2;
                int LA312_0 = input.LA(1);

                if ( (LA312_0==TABLE_ELEMENT) ) {
                    alt312=1;
                }


                switch (alt312) {
            	case 1 :
            	    // PLSQLWalker.g:1110:43: multi_table_element
            	    {
            	    pushFollow(FOLLOW_multi_table_element_in_conditional_insert_when_part8853);
            	    multi_table_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt312 >= 1 ) break loop312;
                        EarlyExitException eee =
                            new EarlyExitException(312, input);
                        throw eee;
                }
                cnt312++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "conditional_insert_when_part"



    // $ANTLR start "conditional_insert_else_part"
    // PLSQLWalker.g:1113:1: conditional_insert_else_part : ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) ;
    public final void conditional_insert_else_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1114:5: ( ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) )
            // PLSQLWalker.g:1114:10: ^( SQL92_RESERVED_ELSE ( multi_table_element )+ )
            {
            match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part8876); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1114:32: ( multi_table_element )+
            int cnt313=0;
            loop313:
            do {
                int alt313=2;
                int LA313_0 = input.LA(1);

                if ( (LA313_0==TABLE_ELEMENT) ) {
                    alt313=1;
                }


                switch (alt313) {
            	case 1 :
            	    // PLSQLWalker.g:1114:32: multi_table_element
            	    {
            	    pushFollow(FOLLOW_multi_table_element_in_conditional_insert_else_part8878);
            	    multi_table_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt313 >= 1 ) break loop313;
                        EarlyExitException eee =
                            new EarlyExitException(313, input);
                        throw eee;
                }
                cnt313++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "conditional_insert_else_part"



    // $ANTLR start "insert_into_clause"
    // PLSQLWalker.g:1117:1: insert_into_clause : ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) ) ;
    public final void insert_into_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1118:5: ( ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) ) )
            // PLSQLWalker.g:1118:10: ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) )
            {
            match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause8901); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_general_table_ref_in_insert_into_clause8903);
            general_table_ref();

            state._fsp--;


            match(input,COLUMNS,FOLLOW_COLUMNS_in_insert_into_clause8906); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1118:60: ( column_name )*
                loop314:
                do {
                    int alt314=2;
                    int LA314_0 = input.LA(1);

                    if ( (LA314_0==COLUMN_NAME) ) {
                        alt314=1;
                    }


                    switch (alt314) {
                	case 1 :
                	    // PLSQLWalker.g:1118:60: column_name
                	    {
                	    pushFollow(FOLLOW_column_name_in_insert_into_clause8908);
                	    column_name();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop314;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "insert_into_clause"



    // $ANTLR start "values_clause"
    // PLSQLWalker.g:1121:1: values_clause : ^( SQL92_RESERVED_VALUES expression_list ) ;
    public final void values_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1122:5: ( ^( SQL92_RESERVED_VALUES expression_list ) )
            // PLSQLWalker.g:1122:10: ^( SQL92_RESERVED_VALUES expression_list )
            {
            match(input,SQL92_RESERVED_VALUES,FOLLOW_SQL92_RESERVED_VALUES_in_values_clause8932); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_list_in_values_clause8934);
            expression_list();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "values_clause"



    // $ANTLR start "merge_statement"
    // PLSQLWalker.g:1126:1: merge_statement : ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) ;
    public final void merge_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1127:5: ( ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) )
            // PLSQLWalker.g:1127:10: ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
            {
            match(input,MERGE_VK,FOLLOW_MERGE_VK_in_merge_statement8957); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1127:21: ( alias )?
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==ALIAS) ) {
                alt315=1;
            }
            switch (alt315) {
                case 1 :
                    // PLSQLWalker.g:1127:21: alias
                    {
                    pushFollow(FOLLOW_alias_in_merge_statement8959);
                    alias();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_tableview_name_in_merge_statement8962);
            tableview_name();

            state._fsp--;


            match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement8978); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_selected_tableview_in_merge_statement8980);
            selected_tableview();

            state._fsp--;


            pushFollow(FOLLOW_expression_in_merge_statement8982);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            // PLSQLWalker.g:1129:14: ( merge_update_clause )?
            int alt316=2;
            int LA316_0 = input.LA(1);

            if ( (LA316_0==MERGE_UPDATE) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    // PLSQLWalker.g:1129:14: merge_update_clause
                    {
                    pushFollow(FOLLOW_merge_update_clause_in_merge_statement8998);
                    merge_update_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1129:35: ( merge_insert_clause )?
            int alt317=2;
            int LA317_0 = input.LA(1);

            if ( (LA317_0==MERGE_INSERT) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    // PLSQLWalker.g:1129:35: merge_insert_clause
                    {
                    pushFollow(FOLLOW_merge_insert_clause_in_merge_statement9001);
                    merge_insert_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1129:56: ( error_logging_clause )?
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==LOG_VK) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    // PLSQLWalker.g:1129:56: error_logging_clause
                    {
                    pushFollow(FOLLOW_error_logging_clause_in_merge_statement9004);
                    error_logging_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "merge_statement"



    // $ANTLR start "merge_update_clause"
    // PLSQLWalker.g:1134:1: merge_update_clause : ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) ;
    public final void merge_update_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1135:5: ( ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) )
            // PLSQLWalker.g:1135:10: ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
            {
            match(input,MERGE_UPDATE,FOLLOW_MERGE_UPDATE_in_merge_update_clause9029); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1135:25: ( merge_element )+
            int cnt319=0;
            loop319:
            do {
                int alt319=2;
                int LA319_0 = input.LA(1);

                if ( (LA319_0==ASSIGN) ) {
                    alt319=1;
                }


                switch (alt319) {
            	case 1 :
            	    // PLSQLWalker.g:1135:25: merge_element
            	    {
            	    pushFollow(FOLLOW_merge_element_in_merge_update_clause9031);
            	    merge_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt319 >= 1 ) break loop319;
                        EarlyExitException eee =
                            new EarlyExitException(319, input);
                        throw eee;
                }
                cnt319++;
            } while (true);


            // PLSQLWalker.g:1135:40: ( where_clause )?
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==SQL92_RESERVED_WHERE) ) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    // PLSQLWalker.g:1135:40: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_merge_update_clause9034);
                    where_clause();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1135:54: ( merge_update_delete_part )?
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==SQL92_RESERVED_DELETE) ) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    // PLSQLWalker.g:1135:54: merge_update_delete_part
                    {
                    pushFollow(FOLLOW_merge_update_delete_part_in_merge_update_clause9037);
                    merge_update_delete_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "merge_update_clause"



    // $ANTLR start "merge_element"
    // PLSQLWalker.g:1138:1: merge_element : ^( ASSIGN column_name expression ) ;
    public final void merge_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1139:5: ( ^( ASSIGN column_name expression ) )
            // PLSQLWalker.g:1139:10: ^( ASSIGN column_name expression )
            {
            match(input,ASSIGN,FOLLOW_ASSIGN_in_merge_element9060); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_column_name_in_merge_element9062);
            column_name();

            state._fsp--;


            pushFollow(FOLLOW_expression_in_merge_element9064);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "merge_element"



    // $ANTLR start "merge_update_delete_part"
    // PLSQLWalker.g:1142:1: merge_update_delete_part : ^( SQL92_RESERVED_DELETE where_clause ) ;
    public final void merge_update_delete_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1143:5: ( ^( SQL92_RESERVED_DELETE where_clause ) )
            // PLSQLWalker.g:1143:10: ^( SQL92_RESERVED_DELETE where_clause )
            {
            match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part9086); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_where_clause_in_merge_update_delete_part9088);
            where_clause();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "merge_update_delete_part"



    // $ANTLR start "merge_insert_clause"
    // PLSQLWalker.g:1146:1: merge_insert_clause : ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) ;
    public final void merge_insert_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1147:5: ( ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) )
            // PLSQLWalker.g:1147:10: ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? )
            {
            match(input,MERGE_INSERT,FOLLOW_MERGE_INSERT_in_merge_insert_clause9110); 

            match(input, Token.DOWN, null); 
            match(input,COLUMNS,FOLLOW_COLUMNS_in_merge_insert_clause9113); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1147:35: ( column_name )*
                loop322:
                do {
                    int alt322=2;
                    int LA322_0 = input.LA(1);

                    if ( (LA322_0==COLUMN_NAME) ) {
                        alt322=1;
                    }


                    switch (alt322) {
                	case 1 :
                	    // PLSQLWalker.g:1147:35: column_name
                	    {
                	    pushFollow(FOLLOW_column_name_in_merge_insert_clause9115);
                	    column_name();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop322;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            pushFollow(FOLLOW_expression_list_in_merge_insert_clause9119);
            expression_list();

            state._fsp--;


            // PLSQLWalker.g:1147:65: ( where_clause )?
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==SQL92_RESERVED_WHERE) ) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    // PLSQLWalker.g:1147:65: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_merge_insert_clause9121);
                    where_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "merge_insert_clause"



    // $ANTLR start "selected_tableview"
    // PLSQLWalker.g:1150:1: selected_tableview : ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | subquery ) ) ;
    public final void selected_tableview() throws RecognitionException {
        try {
            // PLSQLWalker.g:1151:5: ( ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | subquery ) ) )
            // PLSQLWalker.g:1151:10: ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | subquery ) )
            {
            match(input,SELECTED_TABLEVIEW,FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview9145); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1151:31: ( alias )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==ALIAS) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    // PLSQLWalker.g:1151:31: alias
                    {
                    pushFollow(FOLLOW_alias_in_selected_tableview9147);
                    alias();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1151:38: ( tableview_name | subquery )
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==TABLEVIEW_NAME) ) {
                alt325=1;
            }
            else if ( (LA325_0==SUBQUERY) ) {
                alt325=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 325, 0, input);

                throw nvae;

            }
            switch (alt325) {
                case 1 :
                    // PLSQLWalker.g:1151:39: tableview_name
                    {
                    pushFollow(FOLLOW_tableview_name_in_selected_tableview9151);
                    tableview_name();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1151:54: subquery
                    {
                    pushFollow(FOLLOW_subquery_in_selected_tableview9153);
                    subquery();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "selected_tableview"



    // $ANTLR start "lock_table_statement"
    // PLSQLWalker.g:1156:1: lock_table_statement : ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) ;
    public final void lock_table_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1157:5: ( ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) )
            // PLSQLWalker.g:1157:10: ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
            {
            match(input,PLSQL_RESERVED_LOCK,FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement9178); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1157:32: ( lock_table_element )+
            int cnt326=0;
            loop326:
            do {
                int alt326=2;
                int LA326_0 = input.LA(1);

                if ( (LA326_0==LOCK_TABLE_ELEMENT) ) {
                    alt326=1;
                }


                switch (alt326) {
            	case 1 :
            	    // PLSQLWalker.g:1157:32: lock_table_element
            	    {
            	    pushFollow(FOLLOW_lock_table_element_in_lock_table_statement9180);
            	    lock_table_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt326 >= 1 ) break loop326;
                        EarlyExitException eee =
                            new EarlyExitException(326, input);
                        throw eee;
                }
                cnt326++;
            } while (true);


            pushFollow(FOLLOW_lock_mode_in_lock_table_statement9183);
            lock_mode();

            state._fsp--;


            // PLSQLWalker.g:1157:62: ( wait_nowait_part )?
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==PLSQL_RESERVED_NOWAIT||LA327_0==WAIT_VK) ) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    // PLSQLWalker.g:1157:62: wait_nowait_part
                    {
                    pushFollow(FOLLOW_wait_nowait_part_in_lock_table_statement9185);
                    wait_nowait_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "lock_table_statement"



    // $ANTLR start "wait_nowait_part"
    // PLSQLWalker.g:1160:1: wait_nowait_part : ( ^( WAIT_VK expression ) | PLSQL_RESERVED_NOWAIT );
    public final void wait_nowait_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1161:5: ( ^( WAIT_VK expression ) | PLSQL_RESERVED_NOWAIT )
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==WAIT_VK) ) {
                alt328=1;
            }
            else if ( (LA328_0==PLSQL_RESERVED_NOWAIT) ) {
                alt328=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);

                throw nvae;

            }
            switch (alt328) {
                case 1 :
                    // PLSQLWalker.g:1161:10: ^( WAIT_VK expression )
                    {
                    match(input,WAIT_VK,FOLLOW_WAIT_VK_in_wait_nowait_part9208); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_wait_nowait_part9210);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1162:10: PLSQL_RESERVED_NOWAIT
                    {
                    match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part9222); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "wait_nowait_part"



    // $ANTLR start "lock_table_element"
    // PLSQLWalker.g:1167:1: lock_table_element : ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) ;
    public final void lock_table_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1168:5: ( ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) )
            // PLSQLWalker.g:1168:10: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
            {
            match(input,LOCK_TABLE_ELEMENT,FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element9245); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_tableview_name_in_lock_table_element9247);
            tableview_name();

            state._fsp--;


            // PLSQLWalker.g:1168:46: ( partition_extension_clause )?
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==PARTITION_VK||LA329_0==SUBPARTITION_VK) ) {
                alt329=1;
            }
            switch (alt329) {
                case 1 :
                    // PLSQLWalker.g:1168:46: partition_extension_clause
                    {
                    pushFollow(FOLLOW_partition_extension_clause_in_lock_table_element9249);
                    partition_extension_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "lock_table_element"



    // $ANTLR start "lock_mode"
    // PLSQLWalker.g:1171:1: lock_mode : ( ROW_VK PLSQL_RESERVED_SHARE | ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? | PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_EXCLUSIVE );
    public final void lock_mode() throws RecognitionException {
        try {
            // PLSQLWalker.g:1172:5: ( ROW_VK PLSQL_RESERVED_SHARE | ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? | PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_EXCLUSIVE )
            int alt331=5;
            switch ( input.LA(1) ) {
            case ROW_VK:
                {
                int LA331_1 = input.LA(2);

                if ( (LA331_1==PLSQL_RESERVED_SHARE) ) {
                    alt331=1;
                }
                else if ( (LA331_1==PLSQL_RESERVED_EXCLUSIVE) ) {
                    alt331=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 331, 1, input);

                    throw nvae;

                }
                }
                break;
            case PLSQL_RESERVED_SHARE:
                {
                int LA331_2 = input.LA(2);

                if ( (LA331_2==ROW_VK) ) {
                    alt331=4;
                }
                else if ( (LA331_2==UP||LA331_2==PLSQL_RESERVED_NOWAIT||LA331_2==SQL92_RESERVED_UPDATE||LA331_2==WAIT_VK) ) {
                    alt331=3;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 331, 2, input);

                    throw nvae;

                }
                }
                break;
            case PLSQL_RESERVED_EXCLUSIVE:
                {
                alt331=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 331, 0, input);

                throw nvae;

            }

            switch (alt331) {
                case 1 :
                    // PLSQLWalker.g:1172:10: ROW_VK PLSQL_RESERVED_SHARE
                    {
                    match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9271); 

                    match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9273); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1173:10: ROW_VK PLSQL_RESERVED_EXCLUSIVE
                    {
                    match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9284); 

                    match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9286); 

                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1174:10: PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )?
                    {
                    match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9297); 

                    // PLSQLWalker.g:1174:31: ( SQL92_RESERVED_UPDATE )?
                    int alt330=2;
                    int LA330_0 = input.LA(1);

                    if ( (LA330_0==SQL92_RESERVED_UPDATE) ) {
                        alt330=1;
                    }
                    switch (alt330) {
                        case 1 :
                            // PLSQLWalker.g:1174:31: SQL92_RESERVED_UPDATE
                            {
                            match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode9299); 

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:1175:10: PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE
                    {
                    match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9311); 

                    match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9313); 

                    match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9315); 

                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:1176:10: PLSQL_RESERVED_EXCLUSIVE
                    {
                    match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9326); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "lock_mode"



    // $ANTLR start "general_table_ref"
    // PLSQLWalker.g:1182:1: general_table_ref : ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) ;
    public final void general_table_ref() throws RecognitionException {
        try {
            // PLSQLWalker.g:1183:5: ( ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) )
            // PLSQLWalker.g:1183:10: ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? )
            {
            match(input,TABLE_REF,FOLLOW_TABLE_REF_in_general_table_ref9350); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1183:22: ( alias )?
            int alt332=2;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==ALIAS) ) {
                alt332=1;
            }
            switch (alt332) {
                case 1 :
                    // PLSQLWalker.g:1183:22: alias
                    {
                    pushFollow(FOLLOW_alias_in_general_table_ref9352);
                    alias();

                    state._fsp--;


                    }
                    break;

            }


            pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref9355);
            dml_table_expression_clause();

            state._fsp--;


            // PLSQLWalker.g:1183:57: ( ONLY_VK )?
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==ONLY_VK) ) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    // PLSQLWalker.g:1183:57: ONLY_VK
                    {
                    match(input,ONLY_VK,FOLLOW_ONLY_VK_in_general_table_ref9357); 

                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "general_table_ref"



    // $ANTLR start "static_returning_clause"
    // PLSQLWalker.g:1186:1: static_returning_clause : ^( STATIC_RETURNING ( expression )+ into_clause ) ;
    public final void static_returning_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1187:5: ( ^( STATIC_RETURNING ( expression )+ into_clause ) )
            // PLSQLWalker.g:1187:10: ^( STATIC_RETURNING ( expression )+ into_clause )
            {
            match(input,STATIC_RETURNING,FOLLOW_STATIC_RETURNING_in_static_returning_clause9380); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1187:29: ( expression )+
            int cnt334=0;
            loop334:
            do {
                int alt334=2;
                int LA334_0 = input.LA(1);

                if ( (LA334_0==EXPR||LA334_0==LOGIC_EXPR) ) {
                    alt334=1;
                }


                switch (alt334) {
            	case 1 :
            	    // PLSQLWalker.g:1187:29: expression
            	    {
            	    pushFollow(FOLLOW_expression_in_static_returning_clause9382);
            	    expression();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt334 >= 1 ) break loop334;
                        EarlyExitException eee =
                            new EarlyExitException(334, input);
                        throw eee;
                }
                cnt334++;
            } while (true);


            pushFollow(FOLLOW_into_clause_in_static_returning_clause9385);
            into_clause();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "static_returning_clause"



    // $ANTLR start "error_logging_clause"
    // PLSQLWalker.g:1190:1: error_logging_clause : ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) ;
    public final void error_logging_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1191:5: ( ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) )
            // PLSQLWalker.g:1191:10: ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? )
            {
            match(input,LOG_VK,FOLLOW_LOG_VK_in_error_logging_clause9407); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1191:19: ( error_logging_into_part )?
                int alt335=2;
                int LA335_0 = input.LA(1);

                if ( (LA335_0==SQL92_RESERVED_INTO) ) {
                    alt335=1;
                }
                switch (alt335) {
                    case 1 :
                        // PLSQLWalker.g:1191:19: error_logging_into_part
                        {
                        pushFollow(FOLLOW_error_logging_into_part_in_error_logging_clause9409);
                        error_logging_into_part();

                        state._fsp--;


                        }
                        break;

                }


                // PLSQLWalker.g:1191:44: ( expression )?
                int alt336=2;
                int LA336_0 = input.LA(1);

                if ( (LA336_0==EXPR||LA336_0==LOGIC_EXPR) ) {
                    alt336=1;
                }
                switch (alt336) {
                    case 1 :
                        // PLSQLWalker.g:1191:44: expression
                        {
                        pushFollow(FOLLOW_expression_in_error_logging_clause9412);
                        expression();

                        state._fsp--;


                        }
                        break;

                }


                // PLSQLWalker.g:1191:56: ( error_logging_reject_part )?
                int alt337=2;
                int LA337_0 = input.LA(1);

                if ( (LA337_0==REJECT_VK) ) {
                    alt337=1;
                }
                switch (alt337) {
                    case 1 :
                        // PLSQLWalker.g:1191:56: error_logging_reject_part
                        {
                        pushFollow(FOLLOW_error_logging_reject_part_in_error_logging_clause9415);
                        error_logging_reject_part();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "error_logging_clause"



    // $ANTLR start "error_logging_into_part"
    // PLSQLWalker.g:1194:1: error_logging_into_part : ^( SQL92_RESERVED_INTO tableview_name ) ;
    public final void error_logging_into_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1195:5: ( ^( SQL92_RESERVED_INTO tableview_name ) )
            // PLSQLWalker.g:1195:10: ^( SQL92_RESERVED_INTO tableview_name )
            {
            match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part9438); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_tableview_name_in_error_logging_into_part9440);
            tableview_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "error_logging_into_part"



    // $ANTLR start "error_logging_reject_part"
    // PLSQLWalker.g:1198:1: error_logging_reject_part : ^( REJECT_VK ( UNLIMITED_VK | expression ) ) ;
    public final void error_logging_reject_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1199:5: ( ^( REJECT_VK ( UNLIMITED_VK | expression ) ) )
            // PLSQLWalker.g:1199:10: ^( REJECT_VK ( UNLIMITED_VK | expression ) )
            {
            match(input,REJECT_VK,FOLLOW_REJECT_VK_in_error_logging_reject_part9462); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1199:22: ( UNLIMITED_VK | expression )
            int alt338=2;
            int LA338_0 = input.LA(1);

            if ( (LA338_0==UNLIMITED_VK) ) {
                alt338=1;
            }
            else if ( (LA338_0==EXPR||LA338_0==LOGIC_EXPR) ) {
                alt338=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 338, 0, input);

                throw nvae;

            }
            switch (alt338) {
                case 1 :
                    // PLSQLWalker.g:1199:23: UNLIMITED_VK
                    {
                    match(input,UNLIMITED_VK,FOLLOW_UNLIMITED_VK_in_error_logging_reject_part9465); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1199:36: expression
                    {
                    pushFollow(FOLLOW_expression_in_error_logging_reject_part9467);
                    expression();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "error_logging_reject_part"



    // $ANTLR start "dml_table_expression_clause"
    // PLSQLWalker.g:1202:1: dml_table_expression_clause : ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) ) ;
    public final void dml_table_expression_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1203:5: ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) ) )
            // PLSQLWalker.g:1203:10: ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) ) )
            {
            match(input,TABLE_EXPRESSION,FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause9490); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1204:9: ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) )
            int alt342=3;
            switch ( input.LA(1) ) {
            case COLLECTION_MODE:
                {
                alt342=1;
                }
                break;
            case SELECT_MODE:
                {
                alt342=2;
                }
                break;
            case DIRECT_MODE:
                {
                alt342=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);

                throw nvae;

            }

            switch (alt342) {
                case 1 :
                    // PLSQLWalker.g:1204:14: ^( COLLECTION_MODE expression ( PLUS_SIGN )? )
                    {
                    match(input,COLLECTION_MODE,FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause9507); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_dml_table_expression_clause9509);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1204:43: ( PLUS_SIGN )?
                    int alt339=2;
                    int LA339_0 = input.LA(1);

                    if ( (LA339_0==PLUS_SIGN) ) {
                        alt339=1;
                    }
                    switch (alt339) {
                        case 1 :
                            // PLSQLWalker.g:1204:43: PLUS_SIGN
                            {
                            match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_dml_table_expression_clause9511); 

                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1205:14: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
                    {
                    match(input,SELECT_MODE,FOLLOW_SELECT_MODE_in_dml_table_expression_clause9529); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_select_statement_in_dml_table_expression_clause9531);
                    select_statement();

                    state._fsp--;


                    // PLSQLWalker.g:1205:45: ( subquery_restriction_clause )?
                    int alt340=2;
                    int LA340_0 = input.LA(1);

                    if ( (LA340_0==SQL92_RESERVED_WITH) ) {
                        alt340=1;
                    }
                    switch (alt340) {
                        case 1 :
                            // PLSQLWalker.g:1205:45: subquery_restriction_clause
                            {
                            pushFollow(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause9533);
                            subquery_restriction_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1206:14: ^( DIRECT_MODE tableview_name ( sample_clause )? )
                    {
                    match(input,DIRECT_MODE,FOLLOW_DIRECT_MODE_in_dml_table_expression_clause9551); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_tableview_name_in_dml_table_expression_clause9553);
                    tableview_name();

                    state._fsp--;


                    // PLSQLWalker.g:1206:43: ( sample_clause )?
                    int alt341=2;
                    int LA341_0 = input.LA(1);

                    if ( (LA341_0==SAMPLE_VK) ) {
                        alt341=1;
                    }
                    switch (alt341) {
                        case 1 :
                            // PLSQLWalker.g:1206:43: sample_clause
                            {
                            pushFollow(FOLLOW_sample_clause_in_dml_table_expression_clause9555);
                            sample_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "dml_table_expression_clause"



    // $ANTLR start "subquery_restriction_clause"
    // PLSQLWalker.g:1211:1: subquery_restriction_clause : ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) ;
    public final void subquery_restriction_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1212:5: ( ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) )
            // PLSQLWalker.g:1212:10: ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) )
            {
            match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause9598); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1212:32: ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? )
            int alt344=2;
            int LA344_0 = input.LA(1);

            if ( (LA344_0==READ_VK) ) {
                alt344=1;
            }
            else if ( (LA344_0==SQL92_RESERVED_CHECK) ) {
                alt344=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 0, input);

                throw nvae;

            }
            switch (alt344) {
                case 1 :
                    // PLSQLWalker.g:1212:33: READ_VK
                    {
                    match(input,READ_VK,FOLLOW_READ_VK_in_subquery_restriction_clause9601); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1212:41: SQL92_RESERVED_CHECK ( constraint_name )?
                    {
                    match(input,SQL92_RESERVED_CHECK,FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause9603); 

                    // PLSQLWalker.g:1212:62: ( constraint_name )?
                    int alt343=2;
                    int LA343_0 = input.LA(1);

                    if ( (LA343_0==CONSTRAINT_NAME) ) {
                        alt343=1;
                    }
                    switch (alt343) {
                        case 1 :
                            // PLSQLWalker.g:1212:62: constraint_name
                            {
                            pushFollow(FOLLOW_constraint_name_in_subquery_restriction_clause9605);
                            constraint_name();

                            state._fsp--;


                            }
                            break;

                    }


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "subquery_restriction_clause"



    // $ANTLR start "sample_clause"
    // PLSQLWalker.g:1215:1: sample_clause : ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) ;
    public final void sample_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1216:5: ( ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) )
            // PLSQLWalker.g:1216:10: ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? )
            {
            match(input,SAMPLE_VK,FOLLOW_SAMPLE_VK_in_sample_clause9629); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1216:22: ( BLOCK_VK )?
            int alt345=2;
            int LA345_0 = input.LA(1);

            if ( (LA345_0==BLOCK_VK) ) {
                alt345=1;
            }
            switch (alt345) {
                case 1 :
                    // PLSQLWalker.g:1216:22: BLOCK_VK
                    {
                    match(input,BLOCK_VK,FOLLOW_BLOCK_VK_in_sample_clause9631); 

                    }
                    break;

            }


            pushFollow(FOLLOW_expression_in_sample_clause9634);
            expression();

            state._fsp--;


            // PLSQLWalker.g:1216:43: ( seed_part )?
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==SEED_VK) ) {
                alt346=1;
            }
            switch (alt346) {
                case 1 :
                    // PLSQLWalker.g:1216:43: seed_part
                    {
                    pushFollow(FOLLOW_seed_part_in_sample_clause9636);
                    seed_part();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "sample_clause"



    // $ANTLR start "seed_part"
    // PLSQLWalker.g:1219:1: seed_part : ^( SEED_VK expression ) ;
    public final void seed_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1220:5: ( ^( SEED_VK expression ) )
            // PLSQLWalker.g:1220:10: ^( SEED_VK expression )
            {
            match(input,SEED_VK,FOLLOW_SEED_VK_in_seed_part9660); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_seed_part9662);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "seed_part"



    // $ANTLR start "cursor_manipulation_statements"
    // PLSQLWalker.g:1229:1: cursor_manipulation_statements : ( close_statement | open_statement | fetch_statement | open_for_statement );
    public final void cursor_manipulation_statements() throws RecognitionException {
        try {
            // PLSQLWalker.g:1230:5: ( close_statement | open_statement | fetch_statement | open_for_statement )
            int alt347=4;
            switch ( input.LA(1) ) {
            case CLOSE_VK:
                {
                alt347=1;
                }
                break;
            case OPEN_VK:
                {
                int LA347_2 = input.LA(2);

                if ( (LA347_2==DOWN) ) {
                    int LA347_4 = input.LA(3);

                    if ( (LA347_4==CURSOR_NAME) ) {
                        alt347=2;
                    }
                    else if ( (LA347_4==HOSTED_VARIABLE_NAME||LA347_4==VARIABLE_NAME) ) {
                        alt347=4;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 347, 4, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 347, 2, input);

                    throw nvae;

                }
                }
                break;
            case SQL92_RESERVED_FETCH:
                {
                alt347=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 347, 0, input);

                throw nvae;

            }

            switch (alt347) {
                case 1 :
                    // PLSQLWalker.g:1230:10: close_statement
                    {
                    pushFollow(FOLLOW_close_statement_in_cursor_manipulation_statements9689);
                    close_statement();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1231:10: open_statement
                    {
                    pushFollow(FOLLOW_open_statement_in_cursor_manipulation_statements9700);
                    open_statement();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1232:10: fetch_statement
                    {
                    pushFollow(FOLLOW_fetch_statement_in_cursor_manipulation_statements9711);
                    fetch_statement();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:1233:10: open_for_statement
                    {
                    pushFollow(FOLLOW_open_for_statement_in_cursor_manipulation_statements9722);
                    open_for_statement();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "cursor_manipulation_statements"



    // $ANTLR start "close_statement"
    // PLSQLWalker.g:1236:1: close_statement : ^( CLOSE_VK variable_name ) ;
    public final void close_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1237:5: ( ^( CLOSE_VK variable_name ) )
            // PLSQLWalker.g:1237:11: ^( CLOSE_VK variable_name )
            {
            match(input,CLOSE_VK,FOLLOW_CLOSE_VK_in_close_statement9744); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_variable_name_in_close_statement9746);
            variable_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "close_statement"



    // $ANTLR start "open_statement"
    // PLSQLWalker.g:1240:1: open_statement : ^( OPEN_VK cursor_name ( expression_list )? ) ;
    public final void open_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1241:5: ( ^( OPEN_VK cursor_name ( expression_list )? ) )
            // PLSQLWalker.g:1241:10: ^( OPEN_VK cursor_name ( expression_list )? )
            {
            match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_statement9769); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_cursor_name_in_open_statement9771);
            cursor_name();

            state._fsp--;


            // PLSQLWalker.g:1241:32: ( expression_list )?
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==EXPR_LIST) ) {
                alt348=1;
            }
            switch (alt348) {
                case 1 :
                    // PLSQLWalker.g:1241:32: expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_open_statement9773);
                    expression_list();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "open_statement"



    // $ANTLR start "fetch_statement"
    // PLSQLWalker.g:1244:1: fetch_statement : ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) ) ;
    public final void fetch_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1245:5: ( ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) ) )
            // PLSQLWalker.g:1245:10: ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) )
            {
            match(input,SQL92_RESERVED_FETCH,FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement9796); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_cursor_name_in_fetch_statement9798);
            cursor_name();

            state._fsp--;


            // PLSQLWalker.g:1246:13: ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) )
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( (LA351_0==SQL92_RESERVED_INTO) ) {
                alt351=1;
            }
            else if ( (LA351_0==BULK_VK) ) {
                alt351=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 351, 0, input);

                throw nvae;

            }
            switch (alt351) {
                case 1 :
                    // PLSQLWalker.g:1246:18: ^( SQL92_RESERVED_INTO ( variable_name )+ )
                    {
                    match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_fetch_statement9819); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1246:40: ( variable_name )+
                    int cnt349=0;
                    loop349:
                    do {
                        int alt349=2;
                        int LA349_0 = input.LA(1);

                        if ( (LA349_0==HOSTED_VARIABLE_NAME||LA349_0==VARIABLE_NAME) ) {
                            alt349=1;
                        }


                        switch (alt349) {
                    	case 1 :
                    	    // PLSQLWalker.g:1246:40: variable_name
                    	    {
                    	    pushFollow(FOLLOW_variable_name_in_fetch_statement9821);
                    	    variable_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt349 >= 1 ) break loop349;
                                EarlyExitException eee =
                                    new EarlyExitException(349, input);
                                throw eee;
                        }
                        cnt349++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1247:18: ^( BULK_VK ( variable_name )+ )
                    {
                    match(input,BULK_VK,FOLLOW_BULK_VK_in_fetch_statement9843); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1247:28: ( variable_name )+
                    int cnt350=0;
                    loop350:
                    do {
                        int alt350=2;
                        int LA350_0 = input.LA(1);

                        if ( (LA350_0==HOSTED_VARIABLE_NAME||LA350_0==VARIABLE_NAME) ) {
                            alt350=1;
                        }


                        switch (alt350) {
                    	case 1 :
                    	    // PLSQLWalker.g:1247:28: variable_name
                    	    {
                    	    pushFollow(FOLLOW_variable_name_in_fetch_statement9845);
                    	    variable_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt350 >= 1 ) break loop350;
                                EarlyExitException eee =
                                    new EarlyExitException(350, input);
                                throw eee;
                        }
                        cnt350++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "fetch_statement"



    // $ANTLR start "open_for_statement"
    // PLSQLWalker.g:1252:1: open_for_statement : ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? ) ;
    public final void open_for_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1253:5: ( ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? ) )
            // PLSQLWalker.g:1253:10: ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? )
            {
            match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_for_statement9892); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_variable_name_in_open_for_statement9894);
            variable_name();

            state._fsp--;


            // PLSQLWalker.g:1253:34: ( expression | select_statement )
            int alt352=2;
            int LA352_0 = input.LA(1);

            if ( (LA352_0==EXPR||LA352_0==LOGIC_EXPR) ) {
                alt352=1;
            }
            else if ( (LA352_0==SELECT_STATEMENT) ) {
                alt352=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 352, 0, input);

                throw nvae;

            }
            switch (alt352) {
                case 1 :
                    // PLSQLWalker.g:1253:35: expression
                    {
                    pushFollow(FOLLOW_expression_in_open_for_statement9897);
                    expression();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1253:46: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_open_for_statement9899);
                    select_statement();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1253:64: ( using_clause )?
            int alt353=2;
            int LA353_0 = input.LA(1);

            if ( (LA353_0==PLSQL_NON_RESERVED_USING) ) {
                alt353=1;
            }
            switch (alt353) {
                case 1 :
                    // PLSQLWalker.g:1253:64: using_clause
                    {
                    pushFollow(FOLLOW_using_clause_in_open_for_statement9902);
                    using_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "open_for_statement"



    // $ANTLR start "transaction_control_statements"
    // PLSQLWalker.g:1260:1: transaction_control_statements : ( set_transaction_command | set_constraint_command | commit_statement | rollback_statement | savepoint_statement );
    public final void transaction_control_statements() throws RecognitionException {
        try {
            // PLSQLWalker.g:1261:5: ( set_transaction_command | set_constraint_command | commit_statement | rollback_statement | savepoint_statement )
            int alt354=5;
            switch ( input.LA(1) ) {
            case SET_TRANSACTION:
                {
                alt354=1;
                }
                break;
            case SET_CONSTRAINT:
                {
                alt354=2;
                }
                break;
            case COMMIT_VK:
                {
                alt354=3;
                }
                break;
            case ROLLBACK_VK:
                {
                alt354=4;
                }
                break;
            case SAVEPOINT_VK:
                {
                alt354=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);

                throw nvae;

            }

            switch (alt354) {
                case 1 :
                    // PLSQLWalker.g:1261:10: set_transaction_command
                    {
                    pushFollow(FOLLOW_set_transaction_command_in_transaction_control_statements9928);
                    set_transaction_command();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1262:10: set_constraint_command
                    {
                    pushFollow(FOLLOW_set_constraint_command_in_transaction_control_statements9939);
                    set_constraint_command();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1263:10: commit_statement
                    {
                    pushFollow(FOLLOW_commit_statement_in_transaction_control_statements9950);
                    commit_statement();

                    state._fsp--;


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:1264:10: rollback_statement
                    {
                    pushFollow(FOLLOW_rollback_statement_in_transaction_control_statements9961);
                    rollback_statement();

                    state._fsp--;


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:1265:10: savepoint_statement
                    {
                    pushFollow(FOLLOW_savepoint_statement_in_transaction_control_statements9972);
                    savepoint_statement();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "transaction_control_statements"



    // $ANTLR start "set_transaction_command"
    // PLSQLWalker.g:1268:1: set_transaction_command : ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) ;
    public final void set_transaction_command() throws RecognitionException {
        try {
            // PLSQLWalker.g:1269:5: ( ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) )
            // PLSQLWalker.g:1269:10: ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? )
            {
            match(input,SET_TRANSACTION,FOLLOW_SET_TRANSACTION_in_set_transaction_command9993); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1269:28: ( CHAR_STRING )?
                int alt355=2;
                int LA355_0 = input.LA(1);

                if ( (LA355_0==CHAR_STRING) ) {
                    alt355=1;
                }
                switch (alt355) {
                    case 1 :
                        // PLSQLWalker.g:1269:28: CHAR_STRING
                        {
                        match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_set_transaction_command9995); 

                        }
                        break;

                }


                // PLSQLWalker.g:1270:13: ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )?
                int alt356=4;
                switch ( input.LA(1) ) {
                    case READ_VK:
                        {
                        alt356=1;
                        }
                        break;
                    case ISOLATION_VK:
                        {
                        alt356=2;
                        }
                        break;
                    case ROLLBACK_VK:
                        {
                        alt356=3;
                        }
                        break;
                }

                switch (alt356) {
                    case 1 :
                        // PLSQLWalker.g:1270:18: ^( READ_VK ( ONLY_VK | WRITE_VK ) )
                        {
                        match(input,READ_VK,FOLLOW_READ_VK_in_set_transaction_command10016); 

                        match(input, Token.DOWN, null); 
                        if ( input.LA(1)==ONLY_VK||input.LA(1)==WRITE_VK ) {
                            input.consume();
                            state.errorRecovery=false;
                        }
                        else {
                            MismatchedSetException mse = new MismatchedSetException(null,input);
                            throw mse;
                        }


                        match(input, Token.UP, null); 


                        }
                        break;
                    case 2 :
                        // PLSQLWalker.g:1271:18: ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) )
                        {
                        match(input,ISOLATION_VK,FOLLOW_ISOLATION_VK_in_set_transaction_command10043); 

                        match(input, Token.DOWN, null); 
                        if ( input.LA(1)==COMMITTED_VK||input.LA(1)==SERIALIZABLE_VK ) {
                            input.consume();
                            state.errorRecovery=false;
                        }
                        else {
                            MismatchedSetException mse = new MismatchedSetException(null,input);
                            throw mse;
                        }


                        match(input, Token.UP, null); 


                        }
                        break;
                    case 3 :
                        // PLSQLWalker.g:1272:18: ^( ROLLBACK_VK rollback_segment_name )
                        {
                        match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_set_transaction_command10070); 

                        match(input, Token.DOWN, null); 
                        pushFollow(FOLLOW_rollback_segment_name_in_set_transaction_command10072);
                        rollback_segment_name();

                        state._fsp--;


                        match(input, Token.UP, null); 


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "set_transaction_command"



    // $ANTLR start "set_constraint_command"
    // PLSQLWalker.g:1277:1: set_constraint_command : ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) ;
    public final void set_constraint_command() throws RecognitionException {
        try {
            // PLSQLWalker.g:1278:5: ( ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) )
            // PLSQLWalker.g:1278:10: ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) )
            {
            match(input,SET_CONSTRAINT,FOLLOW_SET_CONSTRAINT_in_set_constraint_command10119); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1278:27: ( SQL92_RESERVED_ALL | ( constraint_name )+ )
            int alt358=2;
            int LA358_0 = input.LA(1);

            if ( (LA358_0==SQL92_RESERVED_ALL) ) {
                alt358=1;
            }
            else if ( (LA358_0==CONSTRAINT_NAME) ) {
                alt358=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 358, 0, input);

                throw nvae;

            }
            switch (alt358) {
                case 1 :
                    // PLSQLWalker.g:1278:28: SQL92_RESERVED_ALL
                    {
                    match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command10122); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1278:47: ( constraint_name )+
                    {
                    // PLSQLWalker.g:1278:47: ( constraint_name )+
                    int cnt357=0;
                    loop357:
                    do {
                        int alt357=2;
                        int LA357_0 = input.LA(1);

                        if ( (LA357_0==CONSTRAINT_NAME) ) {
                            alt357=1;
                        }


                        switch (alt357) {
                    	case 1 :
                    	    // PLSQLWalker.g:1278:47: constraint_name
                    	    {
                    	    pushFollow(FOLLOW_constraint_name_in_set_constraint_command10124);
                    	    constraint_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt357 >= 1 ) break loop357;
                                EarlyExitException eee =
                                    new EarlyExitException(357, input);
                                throw eee;
                        }
                        cnt357++;
                    } while (true);


                    }
                    break;

            }


            if ( input.LA(1)==DEFERRED_VK||input.LA(1)==IMMEDIATE_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "set_constraint_command"



    // $ANTLR start "commit_statement"
    // PLSQLWalker.g:1281:1: commit_statement : ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? ) ;
    public final void commit_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1282:5: ( ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? ) )
            // PLSQLWalker.g:1282:11: ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? )
            {
            match(input,COMMIT_VK,FOLLOW_COMMIT_VK_in_commit_statement10155); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1282:23: ( WORK_VK )?
                int alt359=2;
                int LA359_0 = input.LA(1);

                if ( (LA359_0==WORK_VK) ) {
                    alt359=1;
                }
                switch (alt359) {
                    case 1 :
                        // PLSQLWalker.g:1282:23: WORK_VK
                        {
                        match(input,WORK_VK,FOLLOW_WORK_VK_in_commit_statement10157); 

                        }
                        break;

                }


                // PLSQLWalker.g:1283:13: ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )?
                int alt362=3;
                int LA362_0 = input.LA(1);

                if ( (LA362_0==COMMENT_VK) ) {
                    alt362=1;
                }
                else if ( (LA362_0==FORCE_VK) ) {
                    alt362=2;
                }
                switch (alt362) {
                    case 1 :
                        // PLSQLWalker.g:1283:18: ^( COMMENT_VK expression )
                        {
                        match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_commit_statement10179); 

                        match(input, Token.DOWN, null); 
                        pushFollow(FOLLOW_expression_in_commit_statement10181);
                        expression();

                        state._fsp--;


                        match(input, Token.UP, null); 


                        }
                        break;
                    case 2 :
                        // PLSQLWalker.g:1284:18: ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) )
                        {
                        match(input,FORCE_VK,FOLLOW_FORCE_VK_in_commit_statement10202); 

                        match(input, Token.DOWN, null); 
                        // PLSQLWalker.g:1284:29: ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? )
                        int alt361=3;
                        switch ( input.LA(1) ) {
                        case CORRUPT_XID_VK:
                            {
                            alt361=1;
                            }
                            break;
                        case CORRUPT_XID_ALL_VK:
                            {
                            alt361=2;
                            }
                            break;
                        case EXPR:
                        case LOGIC_EXPR:
                            {
                            alt361=3;
                            }
                            break;
                        default:
                            NoViableAltException nvae =
                                new NoViableAltException("", 361, 0, input);

                            throw nvae;

                        }

                        switch (alt361) {
                            case 1 :
                                // PLSQLWalker.g:1284:30: CORRUPT_XID_VK expression
                                {
                                match(input,CORRUPT_XID_VK,FOLLOW_CORRUPT_XID_VK_in_commit_statement10205); 

                                pushFollow(FOLLOW_expression_in_commit_statement10207);
                                expression();

                                state._fsp--;


                                }
                                break;
                            case 2 :
                                // PLSQLWalker.g:1284:56: CORRUPT_XID_ALL_VK
                                {
                                match(input,CORRUPT_XID_ALL_VK,FOLLOW_CORRUPT_XID_ALL_VK_in_commit_statement10209); 

                                }
                                break;
                            case 3 :
                                // PLSQLWalker.g:1284:75: expression ( expression )?
                                {
                                pushFollow(FOLLOW_expression_in_commit_statement10211);
                                expression();

                                state._fsp--;


                                // PLSQLWalker.g:1284:86: ( expression )?
                                int alt360=2;
                                int LA360_0 = input.LA(1);

                                if ( (LA360_0==EXPR||LA360_0==LOGIC_EXPR) ) {
                                    alt360=1;
                                }
                                switch (alt360) {
                                    case 1 :
                                        // PLSQLWalker.g:1284:86: expression
                                        {
                                        pushFollow(FOLLOW_expression_in_commit_statement10213);
                                        expression();

                                        state._fsp--;


                                        }
                                        break;

                                }


                                }
                                break;

                        }


                        match(input, Token.UP, null); 


                        }
                        break;

                }


                // PLSQLWalker.g:1286:13: ( write_clause )?
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==WRITE_VK) ) {
                    alt363=1;
                }
                switch (alt363) {
                    case 1 :
                        // PLSQLWalker.g:1286:13: write_clause
                        {
                        pushFollow(FOLLOW_write_clause_in_commit_statement10245);
                        write_clause();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "commit_statement"



    // $ANTLR start "write_clause"
    // PLSQLWalker.g:1290:1: write_clause : ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) ;
    public final void write_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1291:5: ( ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) )
            // PLSQLWalker.g:1291:10: ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? )
            {
            match(input,WRITE_VK,FOLLOW_WRITE_VK_in_write_clause10277); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1291:21: ( WAIT_VK | PLSQL_RESERVED_NOWAIT )?
                int alt364=2;
                int LA364_0 = input.LA(1);

                if ( (LA364_0==PLSQL_RESERVED_NOWAIT||LA364_0==WAIT_VK) ) {
                    alt364=1;
                }
                switch (alt364) {
                    case 1 :
                        // PLSQLWalker.g:
                        {
                        if ( input.LA(1)==PLSQL_RESERVED_NOWAIT||input.LA(1)==WAIT_VK ) {
                            input.consume();
                            state.errorRecovery=false;
                        }
                        else {
                            MismatchedSetException mse = new MismatchedSetException(null,input);
                            throw mse;
                        }


                        }
                        break;

                }


                // PLSQLWalker.g:1291:54: ( IMMEDIATE_VK | BATCH_VK )?
                int alt365=2;
                int LA365_0 = input.LA(1);

                if ( (LA365_0==BATCH_VK||LA365_0==IMMEDIATE_VK) ) {
                    alt365=1;
                }
                switch (alt365) {
                    case 1 :
                        // PLSQLWalker.g:
                        {
                        if ( input.LA(1)==BATCH_VK||input.LA(1)==IMMEDIATE_VK ) {
                            input.consume();
                            state.errorRecovery=false;
                        }
                        else {
                            MismatchedSetException mse = new MismatchedSetException(null,input);
                            throw mse;
                        }


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "write_clause"



    // $ANTLR start "rollback_statement"
    // PLSQLWalker.g:1294:1: rollback_statement : ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) ;
    public final void rollback_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1295:5: ( ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) )
            // PLSQLWalker.g:1295:11: ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? )
            {
            match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_rollback_statement10314); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1295:25: ( WORK_VK )?
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==WORK_VK) ) {
                    alt366=1;
                }
                switch (alt366) {
                    case 1 :
                        // PLSQLWalker.g:1295:25: WORK_VK
                        {
                        match(input,WORK_VK,FOLLOW_WORK_VK_in_rollback_statement10316); 

                        }
                        break;

                }


                // PLSQLWalker.g:1296:13: ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )?
                int alt367=3;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==SQL92_RESERVED_TO) ) {
                    alt367=1;
                }
                else if ( (LA367_0==FORCE_VK) ) {
                    alt367=2;
                }
                switch (alt367) {
                    case 1 :
                        // PLSQLWalker.g:1296:18: ^( SQL92_RESERVED_TO savepoint_name )
                        {
                        match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_rollback_statement10338); 

                        match(input, Token.DOWN, null); 
                        pushFollow(FOLLOW_savepoint_name_in_rollback_statement10340);
                        savepoint_name();

                        state._fsp--;


                        match(input, Token.UP, null); 


                        }
                        break;
                    case 2 :
                        // PLSQLWalker.g:1297:18: ^( FORCE_VK CHAR_STRING )
                        {
                        match(input,FORCE_VK,FOLLOW_FORCE_VK_in_rollback_statement10361); 

                        match(input, Token.DOWN, null); 
                        match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_rollback_statement10363); 

                        match(input, Token.UP, null); 


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "rollback_statement"



    // $ANTLR start "savepoint_statement"
    // PLSQLWalker.g:1302:1: savepoint_statement : ^( SAVEPOINT_VK savepoint_name ) ;
    public final void savepoint_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1303:5: ( ^( SAVEPOINT_VK savepoint_name ) )
            // PLSQLWalker.g:1303:10: ^( SAVEPOINT_VK savepoint_name )
            {
            match(input,SAVEPOINT_VK,FOLLOW_SAVEPOINT_VK_in_savepoint_statement10410); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_savepoint_name_in_savepoint_statement10412);
            savepoint_name();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "savepoint_statement"



    // $ANTLR start "expression_list"
    // PLSQLWalker.g:1310:1: expression_list : ^( EXPR_LIST ( expression )* ) ;
    public final void expression_list() throws RecognitionException {
        try {
            // PLSQLWalker.g:1311:5: ( ^( EXPR_LIST ( expression )* ) )
            // PLSQLWalker.g:1311:10: ^( EXPR_LIST ( expression )* )
            {
            match(input,EXPR_LIST,FOLLOW_EXPR_LIST_in_expression_list10439); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1311:22: ( expression )*
                loop368:
                do {
                    int alt368=2;
                    int LA368_0 = input.LA(1);

                    if ( (LA368_0==EXPR||LA368_0==LOGIC_EXPR) ) {
                        alt368=1;
                    }


                    switch (alt368) {
                	case 1 :
                	    // PLSQLWalker.g:1311:22: expression
                	    {
                	    pushFollow(FOLLOW_expression_in_expression_list10441);
                	    expression();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop368;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "expression_list"



    // $ANTLR start "expression"
    // PLSQLWalker.g:1314:1: expression : ( ^( LOGIC_EXPR expression_element ) | ^( EXPR expression_element ) );
    public final void expression() throws RecognitionException {
        try {
            // PLSQLWalker.g:1315:5: ( ^( LOGIC_EXPR expression_element ) | ^( EXPR expression_element ) )
            int alt369=2;
            int LA369_0 = input.LA(1);

            if ( (LA369_0==LOGIC_EXPR) ) {
                alt369=1;
            }
            else if ( (LA369_0==EXPR) ) {
                alt369=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 369, 0, input);

                throw nvae;

            }
            switch (alt369) {
                case 1 :
                    // PLSQLWalker.g:1315:10: ^( LOGIC_EXPR expression_element )
                    {
                    match(input,LOGIC_EXPR,FOLLOW_LOGIC_EXPR_in_expression10464); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression10466);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1316:10: ^( EXPR expression_element )
                    {
                    match(input,EXPR,FOLLOW_EXPR_in_expression10479); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression10481);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "expression"



    // $ANTLR start "expression_element"
    // PLSQLWalker.g:1319:1: expression_element : ( ^( SQL92_RESERVED_OR expression_element expression_element ) | ^( SQL92_RESERVED_AND expression_element expression_element ) | ^( SQL92_RESERVED_NOT expression_element ) | ^( ( EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) expression_element expression_element ) | ^( IS_NOT_NULL expression_element ) | ^( IS_NULL expression_element ) | ^( IS_NOT_NAN expression_element ) | ^( IS_NAN expression_element ) | ^( IS_NOT_PRESENT expression_element ) | ^( IS_PRESENT expression_element ) | ^( IS_NOT_INFINITE expression_element ) | ^( IS_INFINITE expression_element ) | ^( IS_NOT_A_SET expression_element ) | ^( IS_A_SET expression_element ) | ^( IS_NOT_EMPTY expression_element ) | ^( IS_EMPTY expression_element ) | ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) | ^( IS_OF_TYPE expression_element ( type_spec )+ ) | ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) | ^( NOT_IN expression_element in_elements ) | ^( SQL92_RESERVED_IN expression_element in_elements ) | ^( NOT_BETWEEN expression_element expression_element expression_element ) | ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element ) | ^( NOT_LIKE expression_element expression_element ( expression_element )? ) | ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? ) | ^( CONCATENATION_OP expression_element expression_element ) | ^( PLUS_SIGN expression_element expression_element ) | ^( MINUS_SIGN expression_element expression_element ) | ^( ASTERISK expression_element expression_element ) | ^( SOLIDUS expression_element expression_element ) | ^( UNARY_OPERATOR expression_element ) | ^( SQL92_RESERVED_PRIOR expression_element ) | ^( NEW_VK expression ) | ^( SQL92_RESERVED_DISTINCT expression_element ) | ^( STANDARD_FUNCTION standard_function ) | ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element ) | ^( VECTOR_EXPR ( expression_element )+ ) | ^( DATETIME_OP expression_element datetime_element ) | model_expression | ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) | ^( DOT_ASTERISK tableview_name ) | case_statement | constant | general_element | subquery );
    public final void expression_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1320:5: ( ^( SQL92_RESERVED_OR expression_element expression_element ) | ^( SQL92_RESERVED_AND expression_element expression_element ) | ^( SQL92_RESERVED_NOT expression_element ) | ^( ( EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) expression_element expression_element ) | ^( IS_NOT_NULL expression_element ) | ^( IS_NULL expression_element ) | ^( IS_NOT_NAN expression_element ) | ^( IS_NAN expression_element ) | ^( IS_NOT_PRESENT expression_element ) | ^( IS_PRESENT expression_element ) | ^( IS_NOT_INFINITE expression_element ) | ^( IS_INFINITE expression_element ) | ^( IS_NOT_A_SET expression_element ) | ^( IS_A_SET expression_element ) | ^( IS_NOT_EMPTY expression_element ) | ^( IS_EMPTY expression_element ) | ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) | ^( IS_OF_TYPE expression_element ( type_spec )+ ) | ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) | ^( NOT_IN expression_element in_elements ) | ^( SQL92_RESERVED_IN expression_element in_elements ) | ^( NOT_BETWEEN expression_element expression_element expression_element ) | ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element ) | ^( NOT_LIKE expression_element expression_element ( expression_element )? ) | ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? ) | ^( CONCATENATION_OP expression_element expression_element ) | ^( PLUS_SIGN expression_element expression_element ) | ^( MINUS_SIGN expression_element expression_element ) | ^( ASTERISK expression_element expression_element ) | ^( SOLIDUS expression_element expression_element ) | ^( UNARY_OPERATOR expression_element ) | ^( SQL92_RESERVED_PRIOR expression_element ) | ^( NEW_VK expression ) | ^( SQL92_RESERVED_DISTINCT expression_element ) | ^( STANDARD_FUNCTION standard_function ) | ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element ) | ^( VECTOR_EXPR ( expression_element )+ ) | ^( DATETIME_OP expression_element datetime_element ) | model_expression | ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) | ^( DOT_ASTERISK tableview_name ) | case_statement | constant | general_element | subquery )
            int alt376=45;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_OR:
                {
                alt376=1;
                }
                break;
            case SQL92_RESERVED_AND:
                {
                alt376=2;
                }
                break;
            case SQL92_RESERVED_NOT:
                {
                alt376=3;
                }
                break;
            case EQUALS_OP:
            case GREATER_THAN_OP:
            case GREATER_THAN_OR_EQUALS_OP:
            case LESS_THAN_OP:
            case LESS_THAN_OR_EQUALS_OP:
            case NOT_EQUAL_OP:
                {
                alt376=4;
                }
                break;
            case IS_NOT_NULL:
                {
                alt376=5;
                }
                break;
            case IS_NULL:
                {
                alt376=6;
                }
                break;
            case IS_NOT_NAN:
                {
                alt376=7;
                }
                break;
            case IS_NAN:
                {
                alt376=8;
                }
                break;
            case IS_NOT_PRESENT:
                {
                alt376=9;
                }
                break;
            case IS_PRESENT:
                {
                alt376=10;
                }
                break;
            case IS_NOT_INFINITE:
                {
                alt376=11;
                }
                break;
            case IS_INFINITE:
                {
                alt376=12;
                }
                break;
            case IS_NOT_A_SET:
                {
                alt376=13;
                }
                break;
            case IS_A_SET:
                {
                alt376=14;
                }
                break;
            case IS_NOT_EMPTY:
                {
                alt376=15;
                }
                break;
            case IS_EMPTY:
                {
                alt376=16;
                }
                break;
            case IS_NOT_OF_TYPE:
                {
                alt376=17;
                }
                break;
            case IS_OF_TYPE:
                {
                alt376=18;
                }
                break;
            case MEMBER_VK:
            case SUBMULTISET_VK:
                {
                alt376=19;
                }
                break;
            case NOT_IN:
                {
                alt376=20;
                }
                break;
            case SQL92_RESERVED_IN:
                {
                alt376=21;
                }
                break;
            case NOT_BETWEEN:
                {
                alt376=22;
                }
                break;
            case SQL92_RESERVED_BETWEEN:
                {
                alt376=23;
                }
                break;
            case NOT_LIKE:
                {
                alt376=24;
                }
                break;
            case LIKE2_VK:
            case LIKE4_VK:
            case LIKEC_VK:
            case SQL92_RESERVED_LIKE:
                {
                alt376=25;
                }
                break;
            case CONCATENATION_OP:
                {
                alt376=26;
                }
                break;
            case PLUS_SIGN:
                {
                alt376=27;
                }
                break;
            case MINUS_SIGN:
                {
                alt376=28;
                }
                break;
            case ASTERISK:
                {
                alt376=29;
                }
                break;
            case SOLIDUS:
                {
                alt376=30;
                }
                break;
            case UNARY_OPERATOR:
                {
                alt376=31;
                }
                break;
            case SQL92_RESERVED_PRIOR:
                {
                alt376=32;
                }
                break;
            case NEW_VK:
                {
                alt376=33;
                }
                break;
            case SQL92_RESERVED_DISTINCT:
                {
                alt376=34;
                }
                break;
            case STANDARD_FUNCTION:
                {
                alt376=35;
                }
                break;
            case SOME_VK:
            case SQL92_RESERVED_ALL:
            case SQL92_RESERVED_ANY:
            case SQL92_RESERVED_EXISTS:
                {
                alt376=36;
                }
                break;
            case VECTOR_EXPR:
                {
                alt376=37;
                }
                break;
            case DATETIME_OP:
                {
                alt376=38;
                }
                break;
            case MODEL_EXPRESSION:
                {
                alt376=39;
                }
                break;
            case KEEP_VK:
                {
                alt376=40;
                }
                break;
            case DOT_ASTERISK:
                {
                alt376=41;
                }
                break;
            case SEARCHED_CASE:
            case SIMPLE_CASE:
                {
                alt376=42;
                }
                break;
            case APPROXIMATE_NUM_LIT:
            case CHAR_STRING:
            case DBTIMEZONE_VK:
            case EXACT_NUM_LIT:
            case MAXVALUE_VK:
            case MINVALUE_VK:
            case SESSIONTIMEZONE_VK:
            case SQL92_RESERVED_DEFAULT:
            case SQL92_RESERVED_FALSE:
            case SQL92_RESERVED_NULL:
            case SQL92_RESERVED_TRUE:
            case UNSIGNED_INTEGER:
                {
                alt376=43;
                }
                break;
            case ANY_ELEMENT:
            case CASCATED_ELEMENT:
            case HOSTED_VARIABLE:
            case HOSTED_VARIABLE_ROUTINE_CALL:
            case ROUTINE_CALL:
                {
                alt376=44;
                }
                break;
            case SUBQUERY:
                {
                alt376=45;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 376, 0, input);

                throw nvae;

            }

            switch (alt376) {
                case 1 :
                    // PLSQLWalker.g:1320:10: ^( SQL92_RESERVED_OR expression_element expression_element )
                    {
                    match(input,SQL92_RESERVED_OR,FOLLOW_SQL92_RESERVED_OR_in_expression_element10503); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10505);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10507);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1321:10: ^( SQL92_RESERVED_AND expression_element expression_element )
                    {
                    match(input,SQL92_RESERVED_AND,FOLLOW_SQL92_RESERVED_AND_in_expression_element10520); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10522);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10524);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1322:10: ^( SQL92_RESERVED_NOT expression_element )
                    {
                    match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_expression_element10537); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10539);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:1323:10: ^( ( EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) expression_element expression_element )
                    {
                    if ( input.LA(1)==EQUALS_OP||(input.LA(1) >= GREATER_THAN_OP && input.LA(1) <= GREATER_THAN_OR_EQUALS_OP)||(input.LA(1) >= LESS_THAN_OP && input.LA(1) <= LESS_THAN_OR_EQUALS_OP)||input.LA(1)==NOT_EQUAL_OP ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10566);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10568);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:1325:10: ^( IS_NOT_NULL expression_element )
                    {
                    match(input,IS_NOT_NULL,FOLLOW_IS_NOT_NULL_in_expression_element10582); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10584);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:1326:10: ^( IS_NULL expression_element )
                    {
                    match(input,IS_NULL,FOLLOW_IS_NULL_in_expression_element10597); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10599);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 7 :
                    // PLSQLWalker.g:1327:10: ^( IS_NOT_NAN expression_element )
                    {
                    match(input,IS_NOT_NAN,FOLLOW_IS_NOT_NAN_in_expression_element10612); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10614);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 8 :
                    // PLSQLWalker.g:1328:10: ^( IS_NAN expression_element )
                    {
                    match(input,IS_NAN,FOLLOW_IS_NAN_in_expression_element10627); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10629);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 9 :
                    // PLSQLWalker.g:1329:10: ^( IS_NOT_PRESENT expression_element )
                    {
                    match(input,IS_NOT_PRESENT,FOLLOW_IS_NOT_PRESENT_in_expression_element10642); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10644);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 10 :
                    // PLSQLWalker.g:1330:10: ^( IS_PRESENT expression_element )
                    {
                    match(input,IS_PRESENT,FOLLOW_IS_PRESENT_in_expression_element10657); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10659);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 11 :
                    // PLSQLWalker.g:1331:10: ^( IS_NOT_INFINITE expression_element )
                    {
                    match(input,IS_NOT_INFINITE,FOLLOW_IS_NOT_INFINITE_in_expression_element10672); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10674);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 12 :
                    // PLSQLWalker.g:1332:10: ^( IS_INFINITE expression_element )
                    {
                    match(input,IS_INFINITE,FOLLOW_IS_INFINITE_in_expression_element10687); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10689);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 13 :
                    // PLSQLWalker.g:1333:10: ^( IS_NOT_A_SET expression_element )
                    {
                    match(input,IS_NOT_A_SET,FOLLOW_IS_NOT_A_SET_in_expression_element10702); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10704);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 14 :
                    // PLSQLWalker.g:1334:10: ^( IS_A_SET expression_element )
                    {
                    match(input,IS_A_SET,FOLLOW_IS_A_SET_in_expression_element10717); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10719);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 15 :
                    // PLSQLWalker.g:1335:10: ^( IS_NOT_EMPTY expression_element )
                    {
                    match(input,IS_NOT_EMPTY,FOLLOW_IS_NOT_EMPTY_in_expression_element10732); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10734);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 16 :
                    // PLSQLWalker.g:1336:10: ^( IS_EMPTY expression_element )
                    {
                    match(input,IS_EMPTY,FOLLOW_IS_EMPTY_in_expression_element10747); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10749);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 17 :
                    // PLSQLWalker.g:1337:10: ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ )
                    {
                    match(input,IS_NOT_OF_TYPE,FOLLOW_IS_NOT_OF_TYPE_in_expression_element10762); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10764);
                    expression_element();

                    state._fsp--;


                    // PLSQLWalker.g:1337:46: ( type_spec )+
                    int cnt370=0;
                    loop370:
                    do {
                        int alt370=2;
                        int LA370_0 = input.LA(1);

                        if ( (LA370_0==CUSTOM_TYPE||LA370_0==INTERVAL_DATATYPE||LA370_0==NATIVE_DATATYPE) ) {
                            alt370=1;
                        }


                        switch (alt370) {
                    	case 1 :
                    	    // PLSQLWalker.g:1337:46: type_spec
                    	    {
                    	    pushFollow(FOLLOW_type_spec_in_expression_element10766);
                    	    type_spec();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt370 >= 1 ) break loop370;
                                EarlyExitException eee =
                                    new EarlyExitException(370, input);
                                throw eee;
                        }
                        cnt370++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 18 :
                    // PLSQLWalker.g:1338:10: ^( IS_OF_TYPE expression_element ( type_spec )+ )
                    {
                    match(input,IS_OF_TYPE,FOLLOW_IS_OF_TYPE_in_expression_element10780); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10782);
                    expression_element();

                    state._fsp--;


                    // PLSQLWalker.g:1338:42: ( type_spec )+
                    int cnt371=0;
                    loop371:
                    do {
                        int alt371=2;
                        int LA371_0 = input.LA(1);

                        if ( (LA371_0==CUSTOM_TYPE||LA371_0==INTERVAL_DATATYPE||LA371_0==NATIVE_DATATYPE) ) {
                            alt371=1;
                        }


                        switch (alt371) {
                    	case 1 :
                    	    // PLSQLWalker.g:1338:42: type_spec
                    	    {
                    	    pushFollow(FOLLOW_type_spec_in_expression_element10784);
                    	    type_spec();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt371 >= 1 ) break loop371;
                                EarlyExitException eee =
                                    new EarlyExitException(371, input);
                                throw eee;
                        }
                        cnt371++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 19 :
                    // PLSQLWalker.g:1340:10: ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element )
                    {
                    if ( input.LA(1)==MEMBER_VK||input.LA(1)==SUBMULTISET_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10805);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10807);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 20 :
                    // PLSQLWalker.g:1342:10: ^( NOT_IN expression_element in_elements )
                    {
                    match(input,NOT_IN,FOLLOW_NOT_IN_in_expression_element10821); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10823);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_in_elements_in_expression_element10825);
                    in_elements();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 21 :
                    // PLSQLWalker.g:1343:10: ^( SQL92_RESERVED_IN expression_element in_elements )
                    {
                    match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_expression_element10838); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10840);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_in_elements_in_expression_element10842);
                    in_elements();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 22 :
                    // PLSQLWalker.g:1344:10: ^( NOT_BETWEEN expression_element expression_element expression_element )
                    {
                    match(input,NOT_BETWEEN,FOLLOW_NOT_BETWEEN_in_expression_element10855); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10857);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10859);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10861);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 23 :
                    // PLSQLWalker.g:1345:10: ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element )
                    {
                    match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element10874); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10876);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10878);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10880);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 24 :
                    // PLSQLWalker.g:1346:10: ^( NOT_LIKE expression_element expression_element ( expression_element )? )
                    {
                    match(input,NOT_LIKE,FOLLOW_NOT_LIKE_in_expression_element10893); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10895);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10897);
                    expression_element();

                    state._fsp--;


                    // PLSQLWalker.g:1346:59: ( expression_element )?
                    int alt372=2;
                    int LA372_0 = input.LA(1);

                    if ( (LA372_0==ANY_ELEMENT||LA372_0==APPROXIMATE_NUM_LIT||LA372_0==ASTERISK||LA372_0==CASCATED_ELEMENT||LA372_0==CHAR_STRING||LA372_0==CONCATENATION_OP||LA372_0==DATETIME_OP||LA372_0==DBTIMEZONE_VK||LA372_0==DOT_ASTERISK||LA372_0==EQUALS_OP||LA372_0==EXACT_NUM_LIT||(LA372_0 >= GREATER_THAN_OP && LA372_0 <= GREATER_THAN_OR_EQUALS_OP)||LA372_0==HOSTED_VARIABLE||LA372_0==HOSTED_VARIABLE_ROUTINE_CALL||(LA372_0 >= IS_A_SET && LA372_0 <= IS_PRESENT)||LA372_0==KEEP_VK||(LA372_0 >= LESS_THAN_OP && LA372_0 <= LESS_THAN_OR_EQUALS_OP)||(LA372_0 >= LIKE2_VK && LA372_0 <= LIKEC_VK)||LA372_0==MAXVALUE_VK||LA372_0==MEMBER_VK||LA372_0==MINUS_SIGN||LA372_0==MINVALUE_VK||LA372_0==MODEL_EXPRESSION||LA372_0==NEW_VK||(LA372_0 >= NOT_BETWEEN && LA372_0 <= NOT_LIKE)||LA372_0==PLUS_SIGN||LA372_0==ROUTINE_CALL||LA372_0==SEARCHED_CASE||LA372_0==SESSIONTIMEZONE_VK||LA372_0==SIMPLE_CASE||(LA372_0 >= SOLIDUS && LA372_0 <= SOME_VK)||LA372_0==SQL92_RESERVED_ALL||(LA372_0 >= SQL92_RESERVED_AND && LA372_0 <= SQL92_RESERVED_ANY)||LA372_0==SQL92_RESERVED_BETWEEN||LA372_0==SQL92_RESERVED_DEFAULT||LA372_0==SQL92_RESERVED_DISTINCT||(LA372_0 >= SQL92_RESERVED_EXISTS && LA372_0 <= SQL92_RESERVED_FALSE)||LA372_0==SQL92_RESERVED_IN||(LA372_0 >= SQL92_RESERVED_LIKE && LA372_0 <= SQL92_RESERVED_NULL)||LA372_0==SQL92_RESERVED_OR||LA372_0==SQL92_RESERVED_PRIOR||LA372_0==SQL92_RESERVED_TRUE||LA372_0==STANDARD_FUNCTION||LA372_0==SUBMULTISET_VK||LA372_0==SUBQUERY||LA372_0==UNARY_OPERATOR||LA372_0==UNSIGNED_INTEGER||LA372_0==VECTOR_EXPR) ) {
                        alt372=1;
                    }
                    switch (alt372) {
                        case 1 :
                            // PLSQLWalker.g:1346:59: expression_element
                            {
                            pushFollow(FOLLOW_expression_element_in_expression_element10899);
                            expression_element();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 25 :
                    // PLSQLWalker.g:1347:10: ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? )
                    {
                    if ( (input.LA(1) >= LIKE2_VK && input.LA(1) <= LIKEC_VK)||input.LA(1)==SQL92_RESERVED_LIKE ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10923);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10925);
                    expression_element();

                    state._fsp--;


                    // PLSQLWalker.g:1347:99: ( expression_element )?
                    int alt373=2;
                    int LA373_0 = input.LA(1);

                    if ( (LA373_0==ANY_ELEMENT||LA373_0==APPROXIMATE_NUM_LIT||LA373_0==ASTERISK||LA373_0==CASCATED_ELEMENT||LA373_0==CHAR_STRING||LA373_0==CONCATENATION_OP||LA373_0==DATETIME_OP||LA373_0==DBTIMEZONE_VK||LA373_0==DOT_ASTERISK||LA373_0==EQUALS_OP||LA373_0==EXACT_NUM_LIT||(LA373_0 >= GREATER_THAN_OP && LA373_0 <= GREATER_THAN_OR_EQUALS_OP)||LA373_0==HOSTED_VARIABLE||LA373_0==HOSTED_VARIABLE_ROUTINE_CALL||(LA373_0 >= IS_A_SET && LA373_0 <= IS_PRESENT)||LA373_0==KEEP_VK||(LA373_0 >= LESS_THAN_OP && LA373_0 <= LESS_THAN_OR_EQUALS_OP)||(LA373_0 >= LIKE2_VK && LA373_0 <= LIKEC_VK)||LA373_0==MAXVALUE_VK||LA373_0==MEMBER_VK||LA373_0==MINUS_SIGN||LA373_0==MINVALUE_VK||LA373_0==MODEL_EXPRESSION||LA373_0==NEW_VK||(LA373_0 >= NOT_BETWEEN && LA373_0 <= NOT_LIKE)||LA373_0==PLUS_SIGN||LA373_0==ROUTINE_CALL||LA373_0==SEARCHED_CASE||LA373_0==SESSIONTIMEZONE_VK||LA373_0==SIMPLE_CASE||(LA373_0 >= SOLIDUS && LA373_0 <= SOME_VK)||LA373_0==SQL92_RESERVED_ALL||(LA373_0 >= SQL92_RESERVED_AND && LA373_0 <= SQL92_RESERVED_ANY)||LA373_0==SQL92_RESERVED_BETWEEN||LA373_0==SQL92_RESERVED_DEFAULT||LA373_0==SQL92_RESERVED_DISTINCT||(LA373_0 >= SQL92_RESERVED_EXISTS && LA373_0 <= SQL92_RESERVED_FALSE)||LA373_0==SQL92_RESERVED_IN||(LA373_0 >= SQL92_RESERVED_LIKE && LA373_0 <= SQL92_RESERVED_NULL)||LA373_0==SQL92_RESERVED_OR||LA373_0==SQL92_RESERVED_PRIOR||LA373_0==SQL92_RESERVED_TRUE||LA373_0==STANDARD_FUNCTION||LA373_0==SUBMULTISET_VK||LA373_0==SUBQUERY||LA373_0==UNARY_OPERATOR||LA373_0==UNSIGNED_INTEGER||LA373_0==VECTOR_EXPR) ) {
                        alt373=1;
                    }
                    switch (alt373) {
                        case 1 :
                            // PLSQLWalker.g:1347:99: expression_element
                            {
                            pushFollow(FOLLOW_expression_element_in_expression_element10927);
                            expression_element();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 26 :
                    // PLSQLWalker.g:1349:10: ^( CONCATENATION_OP expression_element expression_element )
                    {
                    match(input,CONCATENATION_OP,FOLLOW_CONCATENATION_OP_in_expression_element10942); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10944);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10946);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 27 :
                    // PLSQLWalker.g:1350:10: ^( PLUS_SIGN expression_element expression_element )
                    {
                    match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_expression_element10959); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10961);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10963);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 28 :
                    // PLSQLWalker.g:1351:10: ^( MINUS_SIGN expression_element expression_element )
                    {
                    match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_expression_element10976); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10978);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10980);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 29 :
                    // PLSQLWalker.g:1352:10: ^( ASTERISK expression_element expression_element )
                    {
                    match(input,ASTERISK,FOLLOW_ASTERISK_in_expression_element10993); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element10995);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element10997);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 30 :
                    // PLSQLWalker.g:1353:10: ^( SOLIDUS expression_element expression_element )
                    {
                    match(input,SOLIDUS,FOLLOW_SOLIDUS_in_expression_element11010); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element11012);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_expression_element_in_expression_element11014);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 31 :
                    // PLSQLWalker.g:1355:10: ^( UNARY_OPERATOR expression_element )
                    {
                    match(input,UNARY_OPERATOR,FOLLOW_UNARY_OPERATOR_in_expression_element11028); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element11030);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 32 :
                    // PLSQLWalker.g:1356:10: ^( SQL92_RESERVED_PRIOR expression_element )
                    {
                    match(input,SQL92_RESERVED_PRIOR,FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element11043); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element11045);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 33 :
                    // PLSQLWalker.g:1357:10: ^( NEW_VK expression )
                    {
                    match(input,NEW_VK,FOLLOW_NEW_VK_in_expression_element11058); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_expression_element11060);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 34 :
                    // PLSQLWalker.g:1358:10: ^( SQL92_RESERVED_DISTINCT expression_element )
                    {
                    match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element11073); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element11075);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 35 :
                    // PLSQLWalker.g:1359:10: ^( STANDARD_FUNCTION standard_function )
                    {
                    match(input,STANDARD_FUNCTION,FOLLOW_STANDARD_FUNCTION_in_expression_element11088); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_standard_function_in_expression_element11090);
                    standard_function();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 36 :
                    // PLSQLWalker.g:1360:10: ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element )
                    {
                    if ( input.LA(1)==SOME_VK||input.LA(1)==SQL92_RESERVED_ALL||input.LA(1)==SQL92_RESERVED_ANY||input.LA(1)==SQL92_RESERVED_EXISTS ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element11113);
                    expression_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 37 :
                    // PLSQLWalker.g:1361:10: ^( VECTOR_EXPR ( expression_element )+ )
                    {
                    match(input,VECTOR_EXPR,FOLLOW_VECTOR_EXPR_in_expression_element11126); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1361:24: ( expression_element )+
                    int cnt374=0;
                    loop374:
                    do {
                        int alt374=2;
                        int LA374_0 = input.LA(1);

                        if ( (LA374_0==ANY_ELEMENT||LA374_0==APPROXIMATE_NUM_LIT||LA374_0==ASTERISK||LA374_0==CASCATED_ELEMENT||LA374_0==CHAR_STRING||LA374_0==CONCATENATION_OP||LA374_0==DATETIME_OP||LA374_0==DBTIMEZONE_VK||LA374_0==DOT_ASTERISK||LA374_0==EQUALS_OP||LA374_0==EXACT_NUM_LIT||(LA374_0 >= GREATER_THAN_OP && LA374_0 <= GREATER_THAN_OR_EQUALS_OP)||LA374_0==HOSTED_VARIABLE||LA374_0==HOSTED_VARIABLE_ROUTINE_CALL||(LA374_0 >= IS_A_SET && LA374_0 <= IS_PRESENT)||LA374_0==KEEP_VK||(LA374_0 >= LESS_THAN_OP && LA374_0 <= LESS_THAN_OR_EQUALS_OP)||(LA374_0 >= LIKE2_VK && LA374_0 <= LIKEC_VK)||LA374_0==MAXVALUE_VK||LA374_0==MEMBER_VK||LA374_0==MINUS_SIGN||LA374_0==MINVALUE_VK||LA374_0==MODEL_EXPRESSION||LA374_0==NEW_VK||(LA374_0 >= NOT_BETWEEN && LA374_0 <= NOT_LIKE)||LA374_0==PLUS_SIGN||LA374_0==ROUTINE_CALL||LA374_0==SEARCHED_CASE||LA374_0==SESSIONTIMEZONE_VK||LA374_0==SIMPLE_CASE||(LA374_0 >= SOLIDUS && LA374_0 <= SOME_VK)||LA374_0==SQL92_RESERVED_ALL||(LA374_0 >= SQL92_RESERVED_AND && LA374_0 <= SQL92_RESERVED_ANY)||LA374_0==SQL92_RESERVED_BETWEEN||LA374_0==SQL92_RESERVED_DEFAULT||LA374_0==SQL92_RESERVED_DISTINCT||(LA374_0 >= SQL92_RESERVED_EXISTS && LA374_0 <= SQL92_RESERVED_FALSE)||LA374_0==SQL92_RESERVED_IN||(LA374_0 >= SQL92_RESERVED_LIKE && LA374_0 <= SQL92_RESERVED_NULL)||LA374_0==SQL92_RESERVED_OR||LA374_0==SQL92_RESERVED_PRIOR||LA374_0==SQL92_RESERVED_TRUE||LA374_0==STANDARD_FUNCTION||LA374_0==SUBMULTISET_VK||LA374_0==SUBQUERY||LA374_0==UNARY_OPERATOR||LA374_0==UNSIGNED_INTEGER||LA374_0==VECTOR_EXPR) ) {
                            alt374=1;
                        }


                        switch (alt374) {
                    	case 1 :
                    	    // PLSQLWalker.g:1361:24: expression_element
                    	    {
                    	    pushFollow(FOLLOW_expression_element_in_expression_element11128);
                    	    expression_element();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt374 >= 1 ) break loop374;
                                EarlyExitException eee =
                                    new EarlyExitException(374, input);
                                throw eee;
                        }
                        cnt374++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 38 :
                    // PLSQLWalker.g:1363:10: ^( DATETIME_OP expression_element datetime_element )
                    {
                    match(input,DATETIME_OP,FOLLOW_DATETIME_OP_in_expression_element11143); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element11145);
                    expression_element();

                    state._fsp--;


                    pushFollow(FOLLOW_datetime_element_in_expression_element11147);
                    datetime_element();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 39 :
                    // PLSQLWalker.g:1364:10: model_expression
                    {
                    pushFollow(FOLLOW_model_expression_in_expression_element11159);
                    model_expression();

                    state._fsp--;


                    }
                    break;
                case 40 :
                    // PLSQLWalker.g:1365:10: ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? )
                    {
                    match(input,KEEP_VK,FOLLOW_KEEP_VK_in_expression_element11171); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_expression_element11173);
                    expression_element();

                    state._fsp--;


                    match(input,DENSE_RANK_VK,FOLLOW_DENSE_RANK_VK_in_expression_element11175); 

                    if ( input.LA(1)==FIRST_VK||input.LA(1)==LAST_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_order_by_clause_in_expression_element11183);
                    order_by_clause();

                    state._fsp--;


                    // PLSQLWalker.g:1365:88: ( over_clause )?
                    int alt375=2;
                    int LA375_0 = input.LA(1);

                    if ( (LA375_0==OVER_VK) ) {
                        alt375=1;
                    }
                    switch (alt375) {
                        case 1 :
                            // PLSQLWalker.g:1365:88: over_clause
                            {
                            pushFollow(FOLLOW_over_clause_in_expression_element11185);
                            over_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 41 :
                    // PLSQLWalker.g:1367:10: ^( DOT_ASTERISK tableview_name )
                    {
                    match(input,DOT_ASTERISK,FOLLOW_DOT_ASTERISK_in_expression_element11200); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_tableview_name_in_expression_element11202);
                    tableview_name();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 42 :
                    // PLSQLWalker.g:1369:10: case_statement
                    {
                    pushFollow(FOLLOW_case_statement_in_expression_element11215);
                    case_statement();

                    state._fsp--;


                    }
                    break;
                case 43 :
                    // PLSQLWalker.g:1370:10: constant
                    {
                    pushFollow(FOLLOW_constant_in_expression_element11226);
                    constant();

                    state._fsp--;


                    }
                    break;
                case 44 :
                    // PLSQLWalker.g:1371:10: general_element
                    {
                    pushFollow(FOLLOW_general_element_in_expression_element11237);
                    general_element();

                    state._fsp--;


                    }
                    break;
                case 45 :
                    // PLSQLWalker.g:1372:10: subquery
                    {
                    pushFollow(FOLLOW_subquery_in_expression_element11248);
                    subquery();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "expression_element"



    // $ANTLR start "in_elements"
    // PLSQLWalker.g:1375:1: in_elements : ( subquery | expression_list );
    public final void in_elements() throws RecognitionException {
        try {
            // PLSQLWalker.g:1376:5: ( subquery | expression_list )
            int alt377=2;
            int LA377_0 = input.LA(1);

            if ( (LA377_0==SUBQUERY) ) {
                alt377=1;
            }
            else if ( (LA377_0==EXPR_LIST) ) {
                alt377=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 377, 0, input);

                throw nvae;

            }
            switch (alt377) {
                case 1 :
                    // PLSQLWalker.g:1376:10: subquery
                    {
                    pushFollow(FOLLOW_subquery_in_in_elements11268);
                    subquery();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1377:10: expression_list
                    {
                    pushFollow(FOLLOW_expression_list_in_in_elements11279);
                    expression_list();

                    state._fsp--;


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "in_elements"



    // $ANTLR start "datetime_element"
    // PLSQLWalker.g:1380:1: datetime_element : ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) | ^( DAY_VK SECOND_VK ( expression )* ) | ^( YEAR_VK MONTH_VK expression ) );
    public final void datetime_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1381:5: ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) | ^( DAY_VK SECOND_VK ( expression )* ) | ^( YEAR_VK MONTH_VK expression ) )
            int alt380=3;
            switch ( input.LA(1) ) {
            case AT_VK:
                {
                alt380=1;
                }
                break;
            case DAY_VK:
                {
                alt380=2;
                }
                break;
            case YEAR_VK:
                {
                alt380=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 380, 0, input);

                throw nvae;

            }

            switch (alt380) {
                case 1 :
                    // PLSQLWalker.g:1381:10: ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) )
                    {
                    match(input,AT_VK,FOLLOW_AT_VK_in_datetime_element11300); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_element_in_datetime_element11302);
                    expression_element();

                    state._fsp--;


                    // PLSQLWalker.g:1381:37: ( LOCAL_VK | TIME_VK expression )
                    int alt378=2;
                    int LA378_0 = input.LA(1);

                    if ( (LA378_0==LOCAL_VK) ) {
                        alt378=1;
                    }
                    else if ( (LA378_0==TIME_VK) ) {
                        alt378=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 378, 0, input);

                        throw nvae;

                    }
                    switch (alt378) {
                        case 1 :
                            // PLSQLWalker.g:1381:38: LOCAL_VK
                            {
                            match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_datetime_element11305); 

                            }
                            break;
                        case 2 :
                            // PLSQLWalker.g:1381:47: TIME_VK expression
                            {
                            match(input,TIME_VK,FOLLOW_TIME_VK_in_datetime_element11307); 

                            pushFollow(FOLLOW_expression_in_datetime_element11309);
                            expression();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1382:10: ^( DAY_VK SECOND_VK ( expression )* )
                    {
                    match(input,DAY_VK,FOLLOW_DAY_VK_in_datetime_element11323); 

                    match(input, Token.DOWN, null); 
                    match(input,SECOND_VK,FOLLOW_SECOND_VK_in_datetime_element11325); 

                    // PLSQLWalker.g:1382:29: ( expression )*
                    loop379:
                    do {
                        int alt379=2;
                        int LA379_0 = input.LA(1);

                        if ( (LA379_0==EXPR||LA379_0==LOGIC_EXPR) ) {
                            alt379=1;
                        }


                        switch (alt379) {
                    	case 1 :
                    	    // PLSQLWalker.g:1382:29: expression
                    	    {
                    	    pushFollow(FOLLOW_expression_in_datetime_element11327);
                    	    expression();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop379;
                        }
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1383:10: ^( YEAR_VK MONTH_VK expression )
                    {
                    match(input,YEAR_VK,FOLLOW_YEAR_VK_in_datetime_element11341); 

                    match(input, Token.DOWN, null); 
                    match(input,MONTH_VK,FOLLOW_MONTH_VK_in_datetime_element11343); 

                    pushFollow(FOLLOW_expression_in_datetime_element11345);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "datetime_element"



    // $ANTLR start "model_expression"
    // PLSQLWalker.g:1386:1: model_expression : ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) ;
    public final void model_expression() throws RecognitionException {
        try {
            // PLSQLWalker.g:1387:5: ( ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) )
            // PLSQLWalker.g:1387:10: ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ )
            {
            match(input,MODEL_EXPRESSION,FOLLOW_MODEL_EXPRESSION_in_model_expression11367); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_element_in_model_expression11369);
            expression_element();

            state._fsp--;


            // PLSQLWalker.g:1387:48: ( model_expression_element )+
            int cnt381=0;
            loop381:
            do {
                int alt381=2;
                int LA381_0 = input.LA(1);

                if ( (LA381_0==EXPR||(LA381_0 >= FOR_MULTI_COLUMN && LA381_0 <= FOR_SINGLE_COLUMN)||LA381_0==LOGIC_EXPR||LA381_0==SQL92_RESERVED_ANY) ) {
                    alt381=1;
                }


                switch (alt381) {
            	case 1 :
            	    // PLSQLWalker.g:1387:48: model_expression_element
            	    {
            	    pushFollow(FOLLOW_model_expression_element_in_model_expression11371);
            	    model_expression_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt381 >= 1 ) break loop381;
                        EarlyExitException eee =
                            new EarlyExitException(381, input);
                        throw eee;
                }
                cnt381++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_expression"



    // $ANTLR start "model_expression_element"
    // PLSQLWalker.g:1390:1: model_expression_element : ( SQL92_RESERVED_ANY | expression | ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) | ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) );
    public final void model_expression_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1391:5: ( SQL92_RESERVED_ANY | expression | ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) | ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) )
            int alt386=4;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_ANY:
                {
                alt386=1;
                }
                break;
            case EXPR:
            case LOGIC_EXPR:
                {
                alt386=2;
                }
                break;
            case FOR_SINGLE_COLUMN:
                {
                alt386=3;
                }
                break;
            case FOR_MULTI_COLUMN:
                {
                alt386=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 386, 0, input);

                throw nvae;

            }

            switch (alt386) {
                case 1 :
                    // PLSQLWalker.g:1391:10: SQL92_RESERVED_ANY
                    {
                    match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element11393); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1392:10: expression
                    {
                    pushFollow(FOLLOW_expression_in_model_expression_element11404);
                    expression();

                    state._fsp--;


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1393:10: ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? )
                    {
                    match(input,FOR_SINGLE_COLUMN,FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element11416); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_column_name_in_model_expression_element11418);
                    column_name();

                    state._fsp--;


                    pushFollow(FOLLOW_for_single_column_element_in_model_expression_element11420);
                    for_single_column_element();

                    state._fsp--;


                    // PLSQLWalker.g:1393:68: ( for_like_part )?
                    int alt382=2;
                    int LA382_0 = input.LA(1);

                    if ( (LA382_0==SQL92_RESERVED_LIKE) ) {
                        alt382=1;
                    }
                    switch (alt382) {
                        case 1 :
                            // PLSQLWalker.g:1393:68: for_like_part
                            {
                            pushFollow(FOLLOW_for_like_part_in_model_expression_element11422);
                            for_like_part();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:1394:10: ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) )
                    {
                    match(input,FOR_MULTI_COLUMN,FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element11436); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1394:29: ( column_name )+
                    int cnt383=0;
                    loop383:
                    do {
                        int alt383=2;
                        int LA383_0 = input.LA(1);

                        if ( (LA383_0==COLUMN_NAME) ) {
                            alt383=1;
                        }


                        switch (alt383) {
                    	case 1 :
                    	    // PLSQLWalker.g:1394:29: column_name
                    	    {
                    	    pushFollow(FOLLOW_column_name_in_model_expression_element11438);
                    	    column_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt383 >= 1 ) break loop383;
                                EarlyExitException eee =
                                    new EarlyExitException(383, input);
                                throw eee;
                        }
                        cnt383++;
                    } while (true);


                    match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_model_expression_element11442); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1394:62: ( subquery | ( expression_list )+ )
                    int alt385=2;
                    int LA385_0 = input.LA(1);

                    if ( (LA385_0==SUBQUERY) ) {
                        alt385=1;
                    }
                    else if ( (LA385_0==EXPR_LIST) ) {
                        alt385=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 385, 0, input);

                        throw nvae;

                    }
                    switch (alt385) {
                        case 1 :
                            // PLSQLWalker.g:1394:63: subquery
                            {
                            pushFollow(FOLLOW_subquery_in_model_expression_element11445);
                            subquery();

                            state._fsp--;


                            }
                            break;
                        case 2 :
                            // PLSQLWalker.g:1394:72: ( expression_list )+
                            {
                            // PLSQLWalker.g:1394:72: ( expression_list )+
                            int cnt384=0;
                            loop384:
                            do {
                                int alt384=2;
                                int LA384_0 = input.LA(1);

                                if ( (LA384_0==EXPR_LIST) ) {
                                    alt384=1;
                                }


                                switch (alt384) {
                            	case 1 :
                            	    // PLSQLWalker.g:1394:72: expression_list
                            	    {
                            	    pushFollow(FOLLOW_expression_list_in_model_expression_element11447);
                            	    expression_list();

                            	    state._fsp--;


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt384 >= 1 ) break loop384;
                                        EarlyExitException eee =
                                            new EarlyExitException(384, input);
                                        throw eee;
                                }
                                cnt384++;
                            } while (true);


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "model_expression_element"



    // $ANTLR start "for_single_column_element"
    // PLSQLWalker.g:1397:1: for_single_column_element : ( ^( SQL92_RESERVED_IN expression_list ) | ^( SQL92_RESERVED_FROM expression ) | ^( SQL92_RESERVED_TO expression ) | ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) );
    public final void for_single_column_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1398:5: ( ^( SQL92_RESERVED_IN expression_list ) | ^( SQL92_RESERVED_FROM expression ) | ^( SQL92_RESERVED_TO expression ) | ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) )
            int alt387=4;
            switch ( input.LA(1) ) {
            case SQL92_RESERVED_IN:
                {
                alt387=1;
                }
                break;
            case SQL92_RESERVED_FROM:
                {
                alt387=2;
                }
                break;
            case SQL92_RESERVED_TO:
                {
                alt387=3;
                }
                break;
            case DECREMENT_VK:
            case INCREMENT_VK:
                {
                alt387=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 387, 0, input);

                throw nvae;

            }

            switch (alt387) {
                case 1 :
                    // PLSQLWalker.g:1398:10: ^( SQL92_RESERVED_IN expression_list )
                    {
                    match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element11472); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_list_in_for_single_column_element11474);
                    expression_list();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1399:10: ^( SQL92_RESERVED_FROM expression )
                    {
                    match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element11487); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_for_single_column_element11489);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1400:10: ^( SQL92_RESERVED_TO expression )
                    {
                    match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element11503); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_for_single_column_element11505);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:1401:10: ^( ( INCREMENT_VK | DECREMENT_VK ) expression )
                    {
                    if ( input.LA(1)==DECREMENT_VK||input.LA(1)==INCREMENT_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_for_single_column_element11525);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "for_single_column_element"



    // $ANTLR start "for_like_part"
    // PLSQLWalker.g:1404:1: for_like_part : ^( SQL92_RESERVED_LIKE expression ) ;
    public final void for_like_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1405:5: ( ^( SQL92_RESERVED_LIKE expression ) )
            // PLSQLWalker.g:1405:10: ^( SQL92_RESERVED_LIKE expression )
            {
            match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part11548); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_for_like_part11550);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "for_like_part"



    // $ANTLR start "case_statement"
    // PLSQLWalker.g:1408:1: case_statement : ( ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? ) | ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? ) );
    public final void case_statement() throws RecognitionException {
        try {
            // PLSQLWalker.g:1409:5: ( ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? ) | ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? ) )
            int alt394=2;
            int LA394_0 = input.LA(1);

            if ( (LA394_0==SIMPLE_CASE) ) {
                alt394=1;
            }
            else if ( (LA394_0==SEARCHED_CASE) ) {
                alt394=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 394, 0, input);

                throw nvae;

            }
            switch (alt394) {
                case 1 :
                    // PLSQLWalker.g:1409:10: ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? )
                    {
                    match(input,SIMPLE_CASE,FOLLOW_SIMPLE_CASE_in_case_statement11572); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1409:24: ( label_name )*
                    loop388:
                    do {
                        int alt388=2;
                        int LA388_0 = input.LA(1);

                        if ( (LA388_0==LABEL_NAME) ) {
                            alt388=1;
                        }


                        switch (alt388) {
                    	case 1 :
                    	    // PLSQLWalker.g:1409:24: label_name
                    	    {
                    	    pushFollow(FOLLOW_label_name_in_case_statement11574);
                    	    label_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop388;
                        }
                    } while (true);


                    pushFollow(FOLLOW_expression_in_case_statement11577);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1409:47: ( case_when_part )+
                    int cnt389=0;
                    loop389:
                    do {
                        int alt389=2;
                        int LA389_0 = input.LA(1);

                        if ( (LA389_0==SQL92_RESERVED_WHEN) ) {
                            alt389=1;
                        }


                        switch (alt389) {
                    	case 1 :
                    	    // PLSQLWalker.g:1409:47: case_when_part
                    	    {
                    	    pushFollow(FOLLOW_case_when_part_in_case_statement11579);
                    	    case_when_part();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt389 >= 1 ) break loop389;
                                EarlyExitException eee =
                                    new EarlyExitException(389, input);
                                throw eee;
                        }
                        cnt389++;
                    } while (true);


                    // PLSQLWalker.g:1409:63: ( case_else_part )?
                    int alt390=2;
                    int LA390_0 = input.LA(1);

                    if ( (LA390_0==SQL92_RESERVED_ELSE) ) {
                        alt390=1;
                    }
                    switch (alt390) {
                        case 1 :
                            // PLSQLWalker.g:1409:63: case_else_part
                            {
                            pushFollow(FOLLOW_case_else_part_in_case_statement11582);
                            case_else_part();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1410:10: ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? )
                    {
                    match(input,SEARCHED_CASE,FOLLOW_SEARCHED_CASE_in_case_statement11598); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1410:26: ( label_name )*
                    loop391:
                    do {
                        int alt391=2;
                        int LA391_0 = input.LA(1);

                        if ( (LA391_0==LABEL_NAME) ) {
                            alt391=1;
                        }


                        switch (alt391) {
                    	case 1 :
                    	    // PLSQLWalker.g:1410:26: label_name
                    	    {
                    	    pushFollow(FOLLOW_label_name_in_case_statement11600);
                    	    label_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop391;
                        }
                    } while (true);


                    // PLSQLWalker.g:1410:38: ( case_when_part )+
                    int cnt392=0;
                    loop392:
                    do {
                        int alt392=2;
                        int LA392_0 = input.LA(1);

                        if ( (LA392_0==SQL92_RESERVED_WHEN) ) {
                            alt392=1;
                        }


                        switch (alt392) {
                    	case 1 :
                    	    // PLSQLWalker.g:1410:38: case_when_part
                    	    {
                    	    pushFollow(FOLLOW_case_when_part_in_case_statement11603);
                    	    case_when_part();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt392 >= 1 ) break loop392;
                                EarlyExitException eee =
                                    new EarlyExitException(392, input);
                                throw eee;
                        }
                        cnt392++;
                    } while (true);


                    // PLSQLWalker.g:1410:54: ( case_else_part )?
                    int alt393=2;
                    int LA393_0 = input.LA(1);

                    if ( (LA393_0==SQL92_RESERVED_ELSE) ) {
                        alt393=1;
                    }
                    switch (alt393) {
                        case 1 :
                            // PLSQLWalker.g:1410:54: case_else_part
                            {
                            pushFollow(FOLLOW_case_else_part_in_case_statement11606);
                            case_else_part();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "case_statement"



    // $ANTLR start "case_when_part"
    // PLSQLWalker.g:1415:1: case_when_part : ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) ) ;
    public final void case_when_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1416:5: ( ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) ) )
            // PLSQLWalker.g:1416:10: ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) )
            {
            match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part11632); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_case_when_part11634);
            expression();

            state._fsp--;


            // PLSQLWalker.g:1416:43: ( seq_of_statements | expression )
            int alt395=2;
            int LA395_0 = input.LA(1);

            if ( (LA395_0==STATEMENTS) ) {
                alt395=1;
            }
            else if ( (LA395_0==EXPR||LA395_0==LOGIC_EXPR) ) {
                alt395=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 395, 0, input);

                throw nvae;

            }
            switch (alt395) {
                case 1 :
                    // PLSQLWalker.g:1416:44: seq_of_statements
                    {
                    pushFollow(FOLLOW_seq_of_statements_in_case_when_part11637);
                    seq_of_statements();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1416:62: expression
                    {
                    pushFollow(FOLLOW_expression_in_case_when_part11639);
                    expression();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "case_when_part"



    // $ANTLR start "case_else_part"
    // PLSQLWalker.g:1419:1: case_else_part : ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) ) ;
    public final void case_else_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1420:5: ( ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) ) )
            // PLSQLWalker.g:1420:10: ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) )
            {
            match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part11662); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1420:32: ( seq_of_statements | expression )
            int alt396=2;
            int LA396_0 = input.LA(1);

            if ( (LA396_0==STATEMENTS) ) {
                alt396=1;
            }
            else if ( (LA396_0==EXPR||LA396_0==LOGIC_EXPR) ) {
                alt396=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 396, 0, input);

                throw nvae;

            }
            switch (alt396) {
                case 1 :
                    // PLSQLWalker.g:1420:33: seq_of_statements
                    {
                    pushFollow(FOLLOW_seq_of_statements_in_case_else_part11665);
                    seq_of_statements();

                    state._fsp--;


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1420:51: expression
                    {
                    pushFollow(FOLLOW_expression_in_case_else_part11667);
                    expression();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "case_else_part"



    // $ANTLR start "standard_function"
    // PLSQLWalker.g:1424:1: standard_function : ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) | ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) | ^( COUNT_VK ( ASTERISK | expression ) ( over_clause )? ) | ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec ) | ^( CHR_VK expression NCHAR_CS_VK ) | ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) | ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) | ^( EXTRACT_VK REGULAR_ID expression ) | ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) | ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) | ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* ) | ^( TREAT_VK expression ( REF_VK )? type_spec ) | ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression ( expression )? ) | ^( XMLAGG_VK expression ( order_by_clause )? ) | ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) | ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) | ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) | ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) | ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) | ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* ) | ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* ) | ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) | ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) );
    public final void standard_function() throws RecognitionException {
        try {
            // PLSQLWalker.g:1425:5: ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) | ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) | ^( COUNT_VK ( ASTERISK | expression ) ( over_clause )? ) | ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec ) | ^( CHR_VK expression NCHAR_CS_VK ) | ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) | ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) | ^( EXTRACT_VK REGULAR_ID expression ) | ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) | ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) | ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* ) | ^( TREAT_VK expression ( REF_VK )? type_spec ) | ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression ( expression )? ) | ^( XMLAGG_VK expression ( order_by_clause )? ) | ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) | ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) | ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) | ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) | ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) | ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* ) | ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* ) | ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) | ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) )
            int alt438=24;
            switch ( input.LA(1) ) {
            case FUNCTION_ENABLING_OVER:
                {
                alt438=1;
                }
                break;
            case FUNCTION_ENABLING_USING:
                {
                alt438=2;
                }
                break;
            case COUNT_VK:
                {
                alt438=3;
                }
                break;
            case CAST_VK:
            case XMLCAST_VK:
                {
                alt438=4;
                }
                break;
            case CHR_VK:
                {
                alt438=5;
                }
                break;
            case COLLECT_VK:
                {
                alt438=6;
                }
                break;
            case FUNCTION_ENABLING_WITHIN_OR_OVER:
                {
                alt438=7;
                }
                break;
            case DECOMPOSE_VK:
                {
                alt438=8;
                }
                break;
            case EXTRACT_VK:
                {
                alt438=9;
                }
                break;
            case FIRST_VALUE_VK:
            case LAST_VALUE_VK:
                {
                alt438=10;
                }
                break;
            case PREDICTION_FUNCTION:
                {
                alt438=11;
                }
                break;
            case TRANSLATE_VK:
                {
                alt438=12;
                }
                break;
            case TREAT_VK:
                {
                alt438=13;
                }
                break;
            case TRIM_VK:
                {
                alt438=14;
                }
                break;
            case XMLAGG_VK:
                {
                alt438=15;
                }
                break;
            case XMLCOLATTVAL_VK:
            case XMLFOREST_VK:
                {
                alt438=16;
                }
                break;
            case XMLEXISTS_VK:
                {
                alt438=17;
                }
                break;
            case XMLPARSE_VK:
                {
                alt438=18;
                }
                break;
            case XMLQUERY_VK:
                {
                alt438=19;
                }
                break;
            case XMLROOT_VK:
                {
                alt438=20;
                }
                break;
            case XMLTABLE_VK:
                {
                alt438=21;
                }
                break;
            case XMLELEMENT_VK:
                {
                alt438=22;
                }
                break;
            case XMLPI_VK:
                {
                alt438=23;
                }
                break;
            case XMLSERIALIZE_VK:
                {
                alt438=24;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 438, 0, input);

                throw nvae;

            }

            switch (alt438) {
                case 1 :
                    // PLSQLWalker.g:1425:10: ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? )
                    {
                    match(input,FUNCTION_ENABLING_OVER,FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function11691); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_function_argument_in_standard_function11693);
                    function_argument();

                    state._fsp--;


                    // PLSQLWalker.g:1425:53: ( over_clause )?
                    int alt397=2;
                    int LA397_0 = input.LA(1);

                    if ( (LA397_0==OVER_VK) ) {
                        alt397=1;
                    }
                    switch (alt397) {
                        case 1 :
                            // PLSQLWalker.g:1425:53: over_clause
                            {
                            pushFollow(FOLLOW_over_clause_in_standard_function11695);
                            over_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1426:10: ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? )
                    {
                    match(input,FUNCTION_ENABLING_USING,FOLLOW_FUNCTION_ENABLING_USING_in_standard_function11709); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_function_argument_in_standard_function11711);
                    function_argument();

                    state._fsp--;


                    // PLSQLWalker.g:1426:54: ( using_clause )?
                    int alt398=2;
                    int LA398_0 = input.LA(1);

                    if ( (LA398_0==PLSQL_NON_RESERVED_USING) ) {
                        alt398=1;
                    }
                    switch (alt398) {
                        case 1 :
                            // PLSQLWalker.g:1426:54: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_standard_function11713);
                            using_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1427:10: ^( COUNT_VK ( ASTERISK | expression ) ( over_clause )? )
                    {
                    match(input,COUNT_VK,FOLLOW_COUNT_VK_in_standard_function11727); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1427:21: ( ASTERISK | expression )
                    int alt399=2;
                    int LA399_0 = input.LA(1);

                    if ( (LA399_0==ASTERISK) ) {
                        alt399=1;
                    }
                    else if ( (LA399_0==EXPR||LA399_0==LOGIC_EXPR) ) {
                        alt399=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 399, 0, input);

                        throw nvae;

                    }
                    switch (alt399) {
                        case 1 :
                            // PLSQLWalker.g:1427:23: ASTERISK
                            {
                            match(input,ASTERISK,FOLLOW_ASTERISK_in_standard_function11731); 

                            }
                            break;
                        case 2 :
                            // PLSQLWalker.g:1427:34: expression
                            {
                            pushFollow(FOLLOW_expression_in_standard_function11735);
                            expression();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1427:47: ( over_clause )?
                    int alt400=2;
                    int LA400_0 = input.LA(1);

                    if ( (LA400_0==OVER_VK) ) {
                        alt400=1;
                    }
                    switch (alt400) {
                        case 1 :
                            // PLSQLWalker.g:1427:47: over_clause
                            {
                            pushFollow(FOLLOW_over_clause_in_standard_function11739);
                            over_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:1428:10: ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec )
                    {
                    if ( input.LA(1)==CAST_VK||input.LA(1)==XMLCAST_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1428:33: ( subquery | expression )
                    int alt401=2;
                    int LA401_0 = input.LA(1);

                    if ( (LA401_0==SUBQUERY) ) {
                        alt401=1;
                    }
                    else if ( (LA401_0==EXPR||LA401_0==LOGIC_EXPR) ) {
                        alt401=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 401, 0, input);

                        throw nvae;

                    }
                    switch (alt401) {
                        case 1 :
                            // PLSQLWalker.g:1428:34: subquery
                            {
                            pushFollow(FOLLOW_subquery_in_standard_function11760);
                            subquery();

                            state._fsp--;


                            }
                            break;
                        case 2 :
                            // PLSQLWalker.g:1428:43: expression
                            {
                            pushFollow(FOLLOW_expression_in_standard_function11762);
                            expression();

                            state._fsp--;


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_spec_in_standard_function11765);
                    type_spec();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:1429:10: ^( CHR_VK expression NCHAR_CS_VK )
                    {
                    match(input,CHR_VK,FOLLOW_CHR_VK_in_standard_function11778); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_standard_function11780);
                    expression();

                    state._fsp--;


                    match(input,NCHAR_CS_VK,FOLLOW_NCHAR_CS_VK_in_standard_function11782); 

                    match(input, Token.UP, null); 


                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:1430:10: ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? )
                    {
                    match(input,COLLECT_VK,FOLLOW_COLLECT_VK_in_standard_function11795); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1430:23: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
                    int alt402=2;
                    int LA402_0 = input.LA(1);

                    if ( (LA402_0==SQL92_RESERVED_DISTINCT||LA402_0==SQL92_RESERVED_UNIQUE) ) {
                        alt402=1;
                    }
                    switch (alt402) {
                        case 1 :
                            // PLSQLWalker.g:
                            {
                            if ( input.LA(1)==SQL92_RESERVED_DISTINCT||input.LA(1)==SQL92_RESERVED_UNIQUE ) {
                                input.consume();
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    pushFollow(FOLLOW_column_name_in_standard_function11804);
                    column_name();

                    state._fsp--;


                    // PLSQLWalker.g:1430:84: ( collect_order_by_part )?
                    int alt403=2;
                    int LA403_0 = input.LA(1);

                    if ( (LA403_0==SQL92_RESERVED_ORDER) ) {
                        alt403=1;
                    }
                    switch (alt403) {
                        case 1 :
                            // PLSQLWalker.g:1430:84: collect_order_by_part
                            {
                            pushFollow(FOLLOW_collect_order_by_part_in_standard_function11806);
                            collect_order_by_part();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 7 :
                    // PLSQLWalker.g:1431:10: ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ )
                    {
                    match(input,FUNCTION_ENABLING_WITHIN_OR_OVER,FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function11820); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_function_argument_in_standard_function11822);
                    function_argument();

                    state._fsp--;


                    // PLSQLWalker.g:1431:63: ( within_clause | over_clause )+
                    int cnt404=0;
                    loop404:
                    do {
                        int alt404=3;
                        int LA404_0 = input.LA(1);

                        if ( (LA404_0==WITHIN_VK) ) {
                            alt404=1;
                        }
                        else if ( (LA404_0==OVER_VK) ) {
                            alt404=2;
                        }


                        switch (alt404) {
                    	case 1 :
                    	    // PLSQLWalker.g:1431:64: within_clause
                    	    {
                    	    pushFollow(FOLLOW_within_clause_in_standard_function11825);
                    	    within_clause();

                    	    state._fsp--;


                    	    }
                    	    break;
                    	case 2 :
                    	    // PLSQLWalker.g:1431:78: over_clause
                    	    {
                    	    pushFollow(FOLLOW_over_clause_in_standard_function11827);
                    	    over_clause();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt404 >= 1 ) break loop404;
                                EarlyExitException eee =
                                    new EarlyExitException(404, input);
                                throw eee;
                        }
                        cnt404++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 8 :
                    // PLSQLWalker.g:1432:10: ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? )
                    {
                    match(input,DECOMPOSE_VK,FOLLOW_DECOMPOSE_VK_in_standard_function11843); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_standard_function11845);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1432:36: ( CANONICAL_VK | COMPATIBILITY_VK )?
                    int alt405=2;
                    int LA405_0 = input.LA(1);

                    if ( (LA405_0==CANONICAL_VK||LA405_0==COMPATIBILITY_VK) ) {
                        alt405=1;
                    }
                    switch (alt405) {
                        case 1 :
                            // PLSQLWalker.g:
                            {
                            if ( input.LA(1)==CANONICAL_VK||input.LA(1)==COMPATIBILITY_VK ) {
                                input.consume();
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 9 :
                    // PLSQLWalker.g:1433:10: ^( EXTRACT_VK REGULAR_ID expression )
                    {
                    match(input,EXTRACT_VK,FOLLOW_EXTRACT_VK_in_standard_function11866); 

                    match(input, Token.DOWN, null); 
                    match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_standard_function11868); 

                    pushFollow(FOLLOW_expression_in_standard_function11870);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 10 :
                    // PLSQLWalker.g:1434:10: ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause )
                    {
                    if ( input.LA(1)==FIRST_VALUE_VK||input.LA(1)==LAST_VALUE_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_standard_function11889);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1434:54: ( NULLS_VK )?
                    int alt406=2;
                    int LA406_0 = input.LA(1);

                    if ( (LA406_0==NULLS_VK) ) {
                        alt406=1;
                    }
                    switch (alt406) {
                        case 1 :
                            // PLSQLWalker.g:1434:54: NULLS_VK
                            {
                            match(input,NULLS_VK,FOLLOW_NULLS_VK_in_standard_function11891); 

                            }
                            break;

                    }


                    pushFollow(FOLLOW_over_clause_in_standard_function11894);
                    over_clause();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 11 :
                    // PLSQLWalker.g:1435:10: ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? )
                    {
                    match(input,PREDICTION_FUNCTION,FOLLOW_PREDICTION_FUNCTION_in_standard_function11908); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1435:32: ( expression )+
                    int cnt407=0;
                    loop407:
                    do {
                        int alt407=2;
                        int LA407_0 = input.LA(1);

                        if ( (LA407_0==EXPR||LA407_0==LOGIC_EXPR) ) {
                            alt407=1;
                        }


                        switch (alt407) {
                    	case 1 :
                    	    // PLSQLWalker.g:1435:32: expression
                    	    {
                    	    pushFollow(FOLLOW_expression_in_standard_function11910);
                    	    expression();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt407 >= 1 ) break loop407;
                                EarlyExitException eee =
                                    new EarlyExitException(407, input);
                                throw eee;
                        }
                        cnt407++;
                    } while (true);


                    // PLSQLWalker.g:1435:44: ( cost_matrix_clause )?
                    int alt408=2;
                    int LA408_0 = input.LA(1);

                    if ( (LA408_0==COST_VK) ) {
                        alt408=1;
                    }
                    switch (alt408) {
                        case 1 :
                            // PLSQLWalker.g:1435:44: cost_matrix_clause
                            {
                            pushFollow(FOLLOW_cost_matrix_clause_in_standard_function11913);
                            cost_matrix_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1435:64: ( using_clause )?
                    int alt409=2;
                    int LA409_0 = input.LA(1);

                    if ( (LA409_0==PLSQL_NON_RESERVED_USING) ) {
                        alt409=1;
                    }
                    switch (alt409) {
                        case 1 :
                            // PLSQLWalker.g:1435:64: using_clause
                            {
                            pushFollow(FOLLOW_using_clause_in_standard_function11916);
                            using_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 12 :
                    // PLSQLWalker.g:1436:10: ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* )
                    {
                    match(input,TRANSLATE_VK,FOLLOW_TRANSLATE_VK_in_standard_function11930); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_standard_function11932);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1436:36: ( CHAR_CS_VK | NCHAR_CS_VK )?
                    int alt410=2;
                    int LA410_0 = input.LA(1);

                    if ( (LA410_0==CHAR_CS_VK||LA410_0==NCHAR_CS_VK) ) {
                        alt410=1;
                    }
                    switch (alt410) {
                        case 1 :
                            // PLSQLWalker.g:
                            {
                            if ( input.LA(1)==CHAR_CS_VK||input.LA(1)==NCHAR_CS_VK ) {
                                input.consume();
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    // PLSQLWalker.g:1436:62: ( expression )*
                    loop411:
                    do {
                        int alt411=2;
                        int LA411_0 = input.LA(1);

                        if ( (LA411_0==EXPR||LA411_0==LOGIC_EXPR) ) {
                            alt411=1;
                        }


                        switch (alt411) {
                    	case 1 :
                    	    // PLSQLWalker.g:1436:62: expression
                    	    {
                    	    pushFollow(FOLLOW_expression_in_standard_function11941);
                    	    expression();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop411;
                        }
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 13 :
                    // PLSQLWalker.g:1437:10: ^( TREAT_VK expression ( REF_VK )? type_spec )
                    {
                    match(input,TREAT_VK,FOLLOW_TREAT_VK_in_standard_function11955); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_standard_function11957);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1437:32: ( REF_VK )?
                    int alt412=2;
                    int LA412_0 = input.LA(1);

                    if ( (LA412_0==REF_VK) ) {
                        alt412=1;
                    }
                    switch (alt412) {
                        case 1 :
                            // PLSQLWalker.g:1437:32: REF_VK
                            {
                            match(input,REF_VK,FOLLOW_REF_VK_in_standard_function11959); 

                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_spec_in_standard_function11962);
                    type_spec();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 14 :
                    // PLSQLWalker.g:1438:10: ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression ( expression )? )
                    {
                    match(input,TRIM_VK,FOLLOW_TRIM_VK_in_standard_function11975); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1438:20: ( LEADING_VK | TRAILING_VK | BOTH_VK )?
                    int alt413=2;
                    int LA413_0 = input.LA(1);

                    if ( (LA413_0==BOTH_VK||LA413_0==LEADING_VK||LA413_0==TRAILING_VK) ) {
                        alt413=1;
                    }
                    switch (alt413) {
                        case 1 :
                            // PLSQLWalker.g:
                            {
                            if ( input.LA(1)==BOTH_VK||input.LA(1)==LEADING_VK||input.LA(1)==TRAILING_VK ) {
                                input.consume();
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_standard_function11986);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1438:65: ( expression )?
                    int alt414=2;
                    int LA414_0 = input.LA(1);

                    if ( (LA414_0==EXPR||LA414_0==LOGIC_EXPR) ) {
                        alt414=1;
                    }
                    switch (alt414) {
                        case 1 :
                            // PLSQLWalker.g:1438:65: expression
                            {
                            pushFollow(FOLLOW_expression_in_standard_function11988);
                            expression();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 15 :
                    // PLSQLWalker.g:1440:10: ^( XMLAGG_VK expression ( order_by_clause )? )
                    {
                    match(input,XMLAGG_VK,FOLLOW_XMLAGG_VK_in_standard_function12004); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_standard_function12006);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1440:33: ( order_by_clause )?
                    int alt415=2;
                    int LA415_0 = input.LA(1);

                    if ( (LA415_0==SQL92_RESERVED_ORDER) ) {
                        alt415=1;
                    }
                    switch (alt415) {
                        case 1 :
                            // PLSQLWalker.g:1440:33: order_by_clause
                            {
                            pushFollow(FOLLOW_order_by_clause_in_standard_function12008);
                            order_by_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 16 :
                    // PLSQLWalker.g:1441:10: ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ )
                    {
                    if ( input.LA(1)==XMLCOLATTVAL_VK||input.LA(1)==XMLFOREST_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1441:43: ( xml_multiuse_expression_element )+
                    int cnt416=0;
                    loop416:
                    do {
                        int alt416=2;
                        int LA416_0 = input.LA(1);

                        if ( (LA416_0==XML_ELEMENT) ) {
                            alt416=1;
                        }


                        switch (alt416) {
                    	case 1 :
                    	    // PLSQLWalker.g:1441:43: xml_multiuse_expression_element
                    	    {
                    	    pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function12028);
                    	    xml_multiuse_expression_element();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt416 >= 1 ) break loop416;
                                EarlyExitException eee =
                                    new EarlyExitException(416, input);
                                throw eee;
                        }
                        cnt416++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 17 :
                    // PLSQLWalker.g:1442:10: ^( XMLEXISTS_VK expression ( xml_passing_clause )? )
                    {
                    match(input,XMLEXISTS_VK,FOLLOW_XMLEXISTS_VK_in_standard_function12042); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_standard_function12044);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1442:36: ( xml_passing_clause )?
                    int alt417=2;
                    int LA417_0 = input.LA(1);

                    if ( (LA417_0==PASSING_VK) ) {
                        alt417=1;
                    }
                    switch (alt417) {
                        case 1 :
                            // PLSQLWalker.g:1442:36: xml_passing_clause
                            {
                            pushFollow(FOLLOW_xml_passing_clause_in_standard_function12046);
                            xml_passing_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 18 :
                    // PLSQLWalker.g:1443:10: ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? )
                    {
                    match(input,XMLPARSE_VK,FOLLOW_XMLPARSE_VK_in_standard_function12060); 

                    match(input, Token.DOWN, null); 
                    if ( input.LA(1)==CONTENT_VK||input.LA(1)==DOCUMENT_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_expression_in_standard_function12068);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1443:60: ( WELLFORMED_VK )?
                    int alt418=2;
                    int LA418_0 = input.LA(1);

                    if ( (LA418_0==WELLFORMED_VK) ) {
                        alt418=1;
                    }
                    switch (alt418) {
                        case 1 :
                            // PLSQLWalker.g:1443:60: WELLFORMED_VK
                            {
                            match(input,WELLFORMED_VK,FOLLOW_WELLFORMED_VK_in_standard_function12070); 

                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 19 :
                    // PLSQLWalker.g:1444:10: ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? )
                    {
                    match(input,XMLQUERY_VK,FOLLOW_XMLQUERY_VK_in_standard_function12084); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_standard_function12086);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1444:35: ( xml_passing_clause )?
                    int alt419=2;
                    int LA419_0 = input.LA(1);

                    if ( (LA419_0==PASSING_VK) ) {
                        alt419=1;
                    }
                    switch (alt419) {
                        case 1 :
                            // PLSQLWalker.g:1444:35: xml_passing_clause
                            {
                            pushFollow(FOLLOW_xml_passing_clause_in_standard_function12088);
                            xml_passing_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1444:55: ( SQL92_RESERVED_NULL )?
                    int alt420=2;
                    int LA420_0 = input.LA(1);

                    if ( (LA420_0==SQL92_RESERVED_NULL) ) {
                        alt420=1;
                    }
                    switch (alt420) {
                        case 1 :
                            // PLSQLWalker.g:1444:55: SQL92_RESERVED_NULL
                            {
                            match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_standard_function12091); 

                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 20 :
                    // PLSQLWalker.g:1445:10: ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? )
                    {
                    match(input,XMLROOT_VK,FOLLOW_XMLROOT_VK_in_standard_function12105); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_standard_function12107);
                    expression();

                    state._fsp--;


                    pushFollow(FOLLOW_xml_param_version_part_in_standard_function12109);
                    xml_param_version_part();

                    state._fsp--;


                    // PLSQLWalker.g:1445:57: ( xmlroot_param_standalone_part )?
                    int alt421=2;
                    int LA421_0 = input.LA(1);

                    if ( (LA421_0==STANDALONE_VK) ) {
                        alt421=1;
                    }
                    switch (alt421) {
                        case 1 :
                            // PLSQLWalker.g:1445:57: xmlroot_param_standalone_part
                            {
                            pushFollow(FOLLOW_xmlroot_param_standalone_part_in_standard_function12111);
                            xmlroot_param_standalone_part();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 21 :
                    // PLSQLWalker.g:1446:10: ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* )
                    {
                    match(input,XMLTABLE_VK,FOLLOW_XMLTABLE_VK_in_standard_function12125); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1446:24: ( xml_namespaces_clause )?
                    int alt422=2;
                    int LA422_0 = input.LA(1);

                    if ( (LA422_0==XMLNAMESPACES_VK) ) {
                        alt422=1;
                    }
                    switch (alt422) {
                        case 1 :
                            // PLSQLWalker.g:1446:24: xml_namespaces_clause
                            {
                            pushFollow(FOLLOW_xml_namespaces_clause_in_standard_function12127);
                            xml_namespaces_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_standard_function12130);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1446:58: ( xml_passing_clause )?
                    int alt423=2;
                    int LA423_0 = input.LA(1);

                    if ( (LA423_0==PASSING_VK) ) {
                        alt423=1;
                    }
                    switch (alt423) {
                        case 1 :
                            // PLSQLWalker.g:1446:58: xml_passing_clause
                            {
                            pushFollow(FOLLOW_xml_passing_clause_in_standard_function12132);
                            xml_passing_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1446:78: ( xml_table_column )*
                    loop424:
                    do {
                        int alt424=2;
                        int LA424_0 = input.LA(1);

                        if ( (LA424_0==XML_COLUMN) ) {
                            alt424=1;
                        }


                        switch (alt424) {
                    	case 1 :
                    	    // PLSQLWalker.g:1446:78: xml_table_column
                    	    {
                    	    pushFollow(FOLLOW_xml_table_column_in_standard_function12135);
                    	    xml_table_column();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop424;
                        }
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 22 :
                    // PLSQLWalker.g:1447:10: ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* )
                    {
                    match(input,XMLELEMENT_VK,FOLLOW_XMLELEMENT_VK_in_standard_function12149); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1448:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
                    int alt425=2;
                    int LA425_0 = input.LA(1);

                    if ( (LA425_0==ENTITYESCAPING_VK||LA425_0==NOENTITYESCAPING_VK) ) {
                        alt425=1;
                    }
                    switch (alt425) {
                        case 1 :
                            // PLSQLWalker.g:
                            {
                            if ( input.LA(1)==ENTITYESCAPING_VK||input.LA(1)==NOENTITYESCAPING_VK ) {
                                input.consume();
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    // PLSQLWalker.g:1449:13: ( NAME_VK | EVALNAME_VK )?
                    int alt426=2;
                    int LA426_0 = input.LA(1);

                    if ( (LA426_0==EVALNAME_VK||LA426_0==NAME_VK) ) {
                        alt426=1;
                    }
                    switch (alt426) {
                        case 1 :
                            // PLSQLWalker.g:
                            {
                            if ( input.LA(1)==EVALNAME_VK||input.LA(1)==NAME_VK ) {
                                input.consume();
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_standard_function12189);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1450:13: ( xml_attributes_clause )?
                    int alt427=2;
                    int LA427_0 = input.LA(1);

                    if ( (LA427_0==XMLATTRIBUTES_VK) ) {
                        alt427=1;
                    }
                    switch (alt427) {
                        case 1 :
                            // PLSQLWalker.g:1450:13: xml_attributes_clause
                            {
                            pushFollow(FOLLOW_xml_attributes_clause_in_standard_function12203);
                            xml_attributes_clause();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1450:36: ( expression ( alias )? )*
                    loop429:
                    do {
                        int alt429=2;
                        int LA429_0 = input.LA(1);

                        if ( (LA429_0==EXPR||LA429_0==LOGIC_EXPR) ) {
                            alt429=1;
                        }


                        switch (alt429) {
                    	case 1 :
                    	    // PLSQLWalker.g:1450:37: expression ( alias )?
                    	    {
                    	    pushFollow(FOLLOW_expression_in_standard_function12207);
                    	    expression();

                    	    state._fsp--;


                    	    // PLSQLWalker.g:1450:48: ( alias )?
                    	    int alt428=2;
                    	    int LA428_0 = input.LA(1);

                    	    if ( (LA428_0==ALIAS) ) {
                    	        alt428=1;
                    	    }
                    	    switch (alt428) {
                    	        case 1 :
                    	            // PLSQLWalker.g:1450:48: alias
                    	            {
                    	            pushFollow(FOLLOW_alias_in_standard_function12209);
                    	            alias();

                    	            state._fsp--;


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop429;
                        }
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 23 :
                    // PLSQLWalker.g:1452:10: ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? )
                    {
                    match(input,XMLPI_VK,FOLLOW_XMLPI_VK_in_standard_function12234); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1453:17: ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression )
                    int alt431=2;
                    int LA431_0 = input.LA(1);

                    if ( (LA431_0==NAME_VK) ) {
                        alt431=1;
                    }
                    else if ( (LA431_0==EVALNAME_VK) ) {
                        alt431=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 431, 0, input);

                        throw nvae;

                    }
                    switch (alt431) {
                        case 1 :
                            // PLSQLWalker.g:1453:22: NAME_VK ( char_set_name )? ID
                            {
                            match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function12257); 

                            // PLSQLWalker.g:1453:30: ( char_set_name )?
                            int alt430=2;
                            int LA430_0 = input.LA(1);

                            if ( (LA430_0==CHAR_SET_NAME) ) {
                                alt430=1;
                            }
                            switch (alt430) {
                                case 1 :
                                    // PLSQLWalker.g:1453:30: char_set_name
                                    {
                                    pushFollow(FOLLOW_char_set_name_in_standard_function12259);
                                    char_set_name();

                                    state._fsp--;


                                    }
                                    break;

                            }


                            match(input,ID,FOLLOW_ID_in_standard_function12262); 

                            }
                            break;
                        case 2 :
                            // PLSQLWalker.g:1454:22: EVALNAME_VK expression
                            {
                            match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function12285); 

                            pushFollow(FOLLOW_expression_in_standard_function12287);
                            expression();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1456:17: ( expression )?
                    int alt432=2;
                    int LA432_0 = input.LA(1);

                    if ( (LA432_0==EXPR||LA432_0==LOGIC_EXPR) ) {
                        alt432=1;
                    }
                    switch (alt432) {
                        case 1 :
                            // PLSQLWalker.g:1456:17: expression
                            {
                            pushFollow(FOLLOW_expression_in_standard_function12323);
                            expression();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 24 :
                    // PLSQLWalker.g:1458:10: ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? )
                    {
                    match(input,XMLSERIALIZE_VK,FOLLOW_XMLSERIALIZE_VK_in_standard_function12346); 

                    match(input, Token.DOWN, null); 
                    if ( input.LA(1)==CONTENT_VK||input.LA(1)==DOCUMENT_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_expression_in_standard_function12386);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1460:28: ( type_spec )?
                    int alt433=2;
                    int LA433_0 = input.LA(1);

                    if ( (LA433_0==CUSTOM_TYPE||LA433_0==INTERVAL_DATATYPE||LA433_0==NATIVE_DATATYPE) ) {
                        alt433=1;
                    }
                    switch (alt433) {
                        case 1 :
                            // PLSQLWalker.g:1460:28: type_spec
                            {
                            pushFollow(FOLLOW_type_spec_in_standard_function12388);
                            type_spec();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1461:17: ( xmlserialize_param_enconding_part )?
                    int alt434=2;
                    int LA434_0 = input.LA(1);

                    if ( (LA434_0==ENCODING_VK) ) {
                        alt434=1;
                    }
                    switch (alt434) {
                        case 1 :
                            // PLSQLWalker.g:1461:17: xmlserialize_param_enconding_part
                            {
                            pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_standard_function12407);
                            xmlserialize_param_enconding_part();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1462:17: ( xml_param_version_part )?
                    int alt435=2;
                    int LA435_0 = input.LA(1);

                    if ( (LA435_0==VERSION_VK) ) {
                        alt435=1;
                    }
                    switch (alt435) {
                        case 1 :
                            // PLSQLWalker.g:1462:17: xml_param_version_part
                            {
                            pushFollow(FOLLOW_xml_param_version_part_in_standard_function12426);
                            xml_param_version_part();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1463:17: ( xmlserialize_param_ident_part )?
                    int alt436=2;
                    int LA436_0 = input.LA(1);

                    if ( (LA436_0==INDENT_VK||LA436_0==NO_VK) ) {
                        alt436=1;
                    }
                    switch (alt436) {
                        case 1 :
                            // PLSQLWalker.g:1463:17: xmlserialize_param_ident_part
                            {
                            pushFollow(FOLLOW_xmlserialize_param_ident_part_in_standard_function12445);
                            xmlserialize_param_ident_part();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1464:17: ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )?
                    int alt437=2;
                    int LA437_0 = input.LA(1);

                    if ( (LA437_0==HIDE_VK||LA437_0==SHOW_VK) ) {
                        alt437=1;
                    }
                    switch (alt437) {
                        case 1 :
                            // PLSQLWalker.g:1464:18: ( HIDE_VK | SHOW_VK ) DEFAULTS_VK
                            {
                            if ( input.LA(1)==HIDE_VK||input.LA(1)==SHOW_VK ) {
                                input.consume();
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            match(input,DEFAULTS_VK,FOLLOW_DEFAULTS_VK_in_standard_function12471); 

                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "standard_function"



    // $ANTLR start "over_clause"
    // PLSQLWalker.g:1468:1: over_clause : ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) ;
    public final void over_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1469:5: ( ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) )
            // PLSQLWalker.g:1469:10: ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? )
            {
            match(input,OVER_VK,FOLLOW_OVER_VK_in_over_clause12504); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1469:20: ( query_partition_clause )?
                int alt439=2;
                int LA439_0 = input.LA(1);

                if ( (LA439_0==PARTITION_VK) ) {
                    alt439=1;
                }
                switch (alt439) {
                    case 1 :
                        // PLSQLWalker.g:1469:20: query_partition_clause
                        {
                        pushFollow(FOLLOW_query_partition_clause_in_over_clause12506);
                        query_partition_clause();

                        state._fsp--;


                        }
                        break;

                }


                // PLSQLWalker.g:1469:44: ( order_by_clause ( windowing_clause )? )?
                int alt441=2;
                int LA441_0 = input.LA(1);

                if ( (LA441_0==SQL92_RESERVED_ORDER) ) {
                    alt441=1;
                }
                switch (alt441) {
                    case 1 :
                        // PLSQLWalker.g:1469:45: order_by_clause ( windowing_clause )?
                        {
                        pushFollow(FOLLOW_order_by_clause_in_over_clause12510);
                        order_by_clause();

                        state._fsp--;


                        // PLSQLWalker.g:1469:61: ( windowing_clause )?
                        int alt440=2;
                        int LA440_0 = input.LA(1);

                        if ( (LA440_0==RANGE_VK||LA440_0==ROWS_VK) ) {
                            alt440=1;
                        }
                        switch (alt440) {
                            case 1 :
                                // PLSQLWalker.g:1469:61: windowing_clause
                                {
                                pushFollow(FOLLOW_windowing_clause_in_over_clause12512);
                                windowing_clause();

                                state._fsp--;


                                }
                                break;

                        }


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "over_clause"



    // $ANTLR start "windowing_clause"
    // PLSQLWalker.g:1472:1: windowing_clause : ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) ) ;
    public final void windowing_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1473:5: ( ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) ) )
            // PLSQLWalker.g:1473:10: ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) )
            {
            if ( input.LA(1)==RANGE_VK||input.LA(1)==ROWS_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1474:13: ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ )
            int alt443=2;
            int LA443_0 = input.LA(1);

            if ( (LA443_0==SQL92_RESERVED_BETWEEN) ) {
                alt443=1;
            }
            else if ( (LA443_0==CURRENT_VK||LA443_0==FOLLOWING_VK||LA443_0==PRECEDING_VK||LA443_0==UNBOUNDED_VK) ) {
                alt443=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 443, 0, input);

                throw nvae;

            }
            switch (alt443) {
                case 1 :
                    // PLSQLWalker.g:1474:18: ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements )
                    {
                    match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause12561); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_windowing_elements_in_windowing_clause12563);
                    windowing_elements();

                    state._fsp--;


                    pushFollow(FOLLOW_windowing_elements_in_windowing_clause12565);
                    windowing_elements();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1475:18: ( windowing_elements )+
                    {
                    // PLSQLWalker.g:1475:18: ( windowing_elements )+
                    int cnt442=0;
                    loop442:
                    do {
                        int alt442=2;
                        int LA442_0 = input.LA(1);

                        if ( (LA442_0==CURRENT_VK||LA442_0==FOLLOWING_VK||LA442_0==PRECEDING_VK||LA442_0==UNBOUNDED_VK) ) {
                            alt442=1;
                        }


                        switch (alt442) {
                    	case 1 :
                    	    // PLSQLWalker.g:1475:18: windowing_elements
                    	    {
                    	    pushFollow(FOLLOW_windowing_elements_in_windowing_clause12585);
                    	    windowing_elements();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt442 >= 1 ) break loop442;
                                EarlyExitException eee =
                                    new EarlyExitException(442, input);
                                throw eee;
                        }
                        cnt442++;
                    } while (true);


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "windowing_clause"



    // $ANTLR start "windowing_elements"
    // PLSQLWalker.g:1480:1: windowing_elements : ( ^( UNBOUNDED_VK PRECEDING_VK ) | ^( CURRENT_VK ROW_VK ) | ^( ( PRECEDING_VK | FOLLOWING_VK ) expression ) );
    public final void windowing_elements() throws RecognitionException {
        try {
            // PLSQLWalker.g:1481:5: ( ^( UNBOUNDED_VK PRECEDING_VK ) | ^( CURRENT_VK ROW_VK ) | ^( ( PRECEDING_VK | FOLLOWING_VK ) expression ) )
            int alt444=3;
            switch ( input.LA(1) ) {
            case UNBOUNDED_VK:
                {
                alt444=1;
                }
                break;
            case CURRENT_VK:
                {
                alt444=2;
                }
                break;
            case FOLLOWING_VK:
            case PRECEDING_VK:
                {
                alt444=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 444, 0, input);

                throw nvae;

            }

            switch (alt444) {
                case 1 :
                    // PLSQLWalker.g:1481:10: ^( UNBOUNDED_VK PRECEDING_VK )
                    {
                    match(input,UNBOUNDED_VK,FOLLOW_UNBOUNDED_VK_in_windowing_elements12631); 

                    match(input, Token.DOWN, null); 
                    match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements12633); 

                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1482:10: ^( CURRENT_VK ROW_VK )
                    {
                    match(input,CURRENT_VK,FOLLOW_CURRENT_VK_in_windowing_elements12646); 

                    match(input, Token.DOWN, null); 
                    match(input,ROW_VK,FOLLOW_ROW_VK_in_windowing_elements12648); 

                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1483:10: ^( ( PRECEDING_VK | FOLLOWING_VK ) expression )
                    {
                    if ( input.LA(1)==FOLLOWING_VK||input.LA(1)==PRECEDING_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_windowing_elements12667);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "windowing_elements"



    // $ANTLR start "using_clause"
    // PLSQLWalker.g:1486:1: using_clause : ^( PLSQL_NON_RESERVED_USING ( using_element )+ ) ;
    public final void using_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1487:5: ( ^( PLSQL_NON_RESERVED_USING ( using_element )+ ) )
            // PLSQLWalker.g:1487:10: ^( PLSQL_NON_RESERVED_USING ( using_element )+ )
            {
            match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause12689); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1487:37: ( using_element )+
            int cnt445=0;
            loop445:
            do {
                int alt445=2;
                int LA445_0 = input.LA(1);

                if ( (LA445_0==ASTERISK||LA445_0==ELEMENT) ) {
                    alt445=1;
                }


                switch (alt445) {
            	case 1 :
            	    // PLSQLWalker.g:1487:37: using_element
            	    {
            	    pushFollow(FOLLOW_using_element_in_using_clause12691);
            	    using_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt445 >= 1 ) break loop445;
                        EarlyExitException eee =
                            new EarlyExitException(445, input);
                        throw eee;
                }
                cnt445++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "using_clause"



    // $ANTLR start "using_element"
    // PLSQLWalker.g:1490:1: using_element : ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) | ASTERISK );
    public final void using_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1491:5: ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) | ASTERISK )
            int alt449=2;
            int LA449_0 = input.LA(1);

            if ( (LA449_0==ELEMENT) ) {
                alt449=1;
            }
            else if ( (LA449_0==ASTERISK) ) {
                alt449=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 449, 0, input);

                throw nvae;

            }
            switch (alt449) {
                case 1 :
                    // PLSQLWalker.g:1491:10: ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? )
                    {
                    match(input,ELEMENT,FOLLOW_ELEMENT_in_using_element12714); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1491:20: ( SQL92_RESERVED_IN )?
                    int alt446=2;
                    int LA446_0 = input.LA(1);

                    if ( (LA446_0==SQL92_RESERVED_IN) ) {
                        alt446=1;
                    }
                    switch (alt446) {
                        case 1 :
                            // PLSQLWalker.g:1491:20: SQL92_RESERVED_IN
                            {
                            match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_using_element12716); 

                            }
                            break;

                    }


                    // PLSQLWalker.g:1491:39: ( OUT_VK )?
                    int alt447=2;
                    int LA447_0 = input.LA(1);

                    if ( (LA447_0==OUT_VK) ) {
                        alt447=1;
                    }
                    switch (alt447) {
                        case 1 :
                            // PLSQLWalker.g:1491:39: OUT_VK
                            {
                            match(input,OUT_VK,FOLLOW_OUT_VK_in_using_element12719); 

                            }
                            break;

                    }


                    pushFollow(FOLLOW_expression_in_using_element12722);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1491:58: ( alias )?
                    int alt448=2;
                    int LA448_0 = input.LA(1);

                    if ( (LA448_0==ALIAS) ) {
                        alt448=1;
                    }
                    switch (alt448) {
                        case 1 :
                            // PLSQLWalker.g:1491:58: alias
                            {
                            pushFollow(FOLLOW_alias_in_using_element12724);
                            alias();

                            state._fsp--;


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1492:10: ASTERISK
                    {
                    match(input,ASTERISK,FOLLOW_ASTERISK_in_using_element12737); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "using_element"



    // $ANTLR start "collect_order_by_part"
    // PLSQLWalker.g:1495:1: collect_order_by_part : ^( SQL92_RESERVED_ORDER expression ) ;
    public final void collect_order_by_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1496:5: ( ^( SQL92_RESERVED_ORDER expression ) )
            // PLSQLWalker.g:1496:10: ^( SQL92_RESERVED_ORDER expression )
            {
            match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part12758); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_collect_order_by_part12760);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "collect_order_by_part"



    // $ANTLR start "within_clause"
    // PLSQLWalker.g:1499:1: within_clause : ^( WITHIN_VK order_by_clause ) ;
    public final void within_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1500:5: ( ^( WITHIN_VK order_by_clause ) )
            // PLSQLWalker.g:1500:10: ^( WITHIN_VK order_by_clause )
            {
            match(input,WITHIN_VK,FOLLOW_WITHIN_VK_in_within_clause12782); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_order_by_clause_in_within_clause12784);
            order_by_clause();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "within_clause"



    // $ANTLR start "cost_matrix_clause"
    // PLSQLWalker.g:1503:1: cost_matrix_clause : ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) ;
    public final void cost_matrix_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1504:5: ( ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) )
            // PLSQLWalker.g:1504:10: ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) )
            {
            match(input,COST_VK,FOLLOW_COST_VK_in_cost_matrix_clause12806); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1505:13: ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list )
            int alt452=2;
            int LA452_0 = input.LA(1);

            if ( (LA452_0==PLSQL_NON_RESERVED_MODEL) ) {
                alt452=1;
            }
            else if ( (LA452_0==COST_CLASS_NAME) ) {
                alt452=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 452, 0, input);

                throw nvae;

            }
            switch (alt452) {
                case 1 :
                    // PLSQLWalker.g:1505:18: PLSQL_NON_RESERVED_MODEL ( AUTO_VK )?
                    {
                    match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause12825); 

                    // PLSQLWalker.g:1505:43: ( AUTO_VK )?
                    int alt450=2;
                    int LA450_0 = input.LA(1);

                    if ( (LA450_0==AUTO_VK) ) {
                        alt450=1;
                    }
                    switch (alt450) {
                        case 1 :
                            // PLSQLWalker.g:1505:43: AUTO_VK
                            {
                            match(input,AUTO_VK,FOLLOW_AUTO_VK_in_cost_matrix_clause12827); 

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1506:18: ( cost_class_name )+ expression_list
                    {
                    // PLSQLWalker.g:1506:18: ( cost_class_name )+
                    int cnt451=0;
                    loop451:
                    do {
                        int alt451=2;
                        int LA451_0 = input.LA(1);

                        if ( (LA451_0==COST_CLASS_NAME) ) {
                            alt451=1;
                        }


                        switch (alt451) {
                    	case 1 :
                    	    // PLSQLWalker.g:1506:18: cost_class_name
                    	    {
                    	    pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause12847);
                    	    cost_class_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt451 >= 1 ) break loop451;
                                EarlyExitException eee =
                                    new EarlyExitException(451, input);
                                throw eee;
                        }
                        cnt451++;
                    } while (true);


                    pushFollow(FOLLOW_expression_list_in_cost_matrix_clause12850);
                    expression_list();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "cost_matrix_clause"



    // $ANTLR start "xml_passing_clause"
    // PLSQLWalker.g:1511:1: xml_passing_clause : ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? ) ;
    public final void xml_passing_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1512:5: ( ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? ) )
            // PLSQLWalker.g:1512:10: ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? )
            {
            match(input,PASSING_VK,FOLLOW_PASSING_VK_in_xml_passing_clause12895); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1512:23: ( VALUE_VK )?
            int alt453=2;
            int LA453_0 = input.LA(1);

            if ( (LA453_0==VALUE_VK) ) {
                alt453=1;
            }
            switch (alt453) {
                case 1 :
                    // PLSQLWalker.g:1512:23: VALUE_VK
                    {
                    match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_passing_clause12897); 

                    }
                    break;

            }


            pushFollow(FOLLOW_expression_in_xml_passing_clause12900);
            expression();

            state._fsp--;


            // PLSQLWalker.g:1512:44: ( alias )?
            int alt454=2;
            int LA454_0 = input.LA(1);

            if ( (LA454_0==ALIAS) ) {
                alt454=1;
            }
            switch (alt454) {
                case 1 :
                    // PLSQLWalker.g:1512:44: alias
                    {
                    pushFollow(FOLLOW_alias_in_xml_passing_clause12902);
                    alias();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1512:51: ( expression ( alias )? )?
            int alt456=2;
            int LA456_0 = input.LA(1);

            if ( (LA456_0==EXPR||LA456_0==LOGIC_EXPR) ) {
                alt456=1;
            }
            switch (alt456) {
                case 1 :
                    // PLSQLWalker.g:1512:52: expression ( alias )?
                    {
                    pushFollow(FOLLOW_expression_in_xml_passing_clause12906);
                    expression();

                    state._fsp--;


                    // PLSQLWalker.g:1512:63: ( alias )?
                    int alt455=2;
                    int LA455_0 = input.LA(1);

                    if ( (LA455_0==ALIAS) ) {
                        alt455=1;
                    }
                    switch (alt455) {
                        case 1 :
                            // PLSQLWalker.g:1512:63: alias
                            {
                            pushFollow(FOLLOW_alias_in_xml_passing_clause12908);
                            alias();

                            state._fsp--;


                            }
                            break;

                    }


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xml_passing_clause"



    // $ANTLR start "xml_attributes_clause"
    // PLSQLWalker.g:1515:1: xml_attributes_clause : ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ ) ;
    public final void xml_attributes_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1516:5: ( ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ ) )
            // PLSQLWalker.g:1516:10: ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ )
            {
            match(input,XMLATTRIBUTES_VK,FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause12933); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1517:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
            int alt457=2;
            int LA457_0 = input.LA(1);

            if ( (LA457_0==ENTITYESCAPING_VK||LA457_0==NOENTITYESCAPING_VK) ) {
                alt457=1;
            }
            switch (alt457) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==ENTITYESCAPING_VK||input.LA(1)==NOENTITYESCAPING_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            // PLSQLWalker.g:1518:13: ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )?
            int alt458=2;
            int LA458_0 = input.LA(1);

            if ( (LA458_0==NOSCHEMACHECK_VK||LA458_0==SCHEMACHECK_VK) ) {
                alt458=1;
            }
            switch (alt458) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==NOSCHEMACHECK_VK||input.LA(1)==SCHEMACHECK_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            // PLSQLWalker.g:1519:13: ( xml_multiuse_expression_element )+
            int cnt459=0;
            loop459:
            do {
                int alt459=2;
                int LA459_0 = input.LA(1);

                if ( (LA459_0==XML_ELEMENT) ) {
                    alt459=1;
                }


                switch (alt459) {
            	case 1 :
            	    // PLSQLWalker.g:1519:13: xml_multiuse_expression_element
            	    {
            	    pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause12985);
            	    xml_multiuse_expression_element();

            	    state._fsp--;


            	    }
            	    break;

            	default :
            	    if ( cnt459 >= 1 ) break loop459;
                        EarlyExitException eee =
                            new EarlyExitException(459, input);
                        throw eee;
                }
                cnt459++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xml_attributes_clause"



    // $ANTLR start "xml_namespaces_clause"
    // PLSQLWalker.g:1523:1: xml_namespaces_clause : ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) ;
    public final void xml_namespaces_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1524:5: ( ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) )
            // PLSQLWalker.g:1524:10: ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? )
            {
            match(input,XMLNAMESPACES_VK,FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause13017); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1525:13: ( expression ( alias )? )*
                loop461:
                do {
                    int alt461=2;
                    int LA461_0 = input.LA(1);

                    if ( (LA461_0==EXPR||LA461_0==LOGIC_EXPR) ) {
                        alt461=1;
                    }


                    switch (alt461) {
                	case 1 :
                	    // PLSQLWalker.g:1525:14: expression ( alias )?
                	    {
                	    pushFollow(FOLLOW_expression_in_xml_namespaces_clause13032);
                	    expression();

                	    state._fsp--;


                	    // PLSQLWalker.g:1525:25: ( alias )?
                	    int alt460=2;
                	    int LA460_0 = input.LA(1);

                	    if ( (LA460_0==ALIAS) ) {
                	        alt460=1;
                	    }
                	    switch (alt460) {
                	        case 1 :
                	            // PLSQLWalker.g:1525:25: alias
                	            {
                	            pushFollow(FOLLOW_alias_in_xml_namespaces_clause13034);
                	            alias();

                	            state._fsp--;


                	            }
                	            break;

                	    }


                	    }
                	    break;

                	default :
                	    break loop461;
                    }
                } while (true);


                // PLSQLWalker.g:1525:34: ( xml_general_default_part )?
                int alt462=2;
                int LA462_0 = input.LA(1);

                if ( (LA462_0==SQL92_RESERVED_DEFAULT) ) {
                    alt462=1;
                }
                switch (alt462) {
                    case 1 :
                        // PLSQLWalker.g:1525:34: xml_general_default_part
                        {
                        pushFollow(FOLLOW_xml_general_default_part_in_xml_namespaces_clause13039);
                        xml_general_default_part();

                        state._fsp--;


                        }
                        break;

                }


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xml_namespaces_clause"



    // $ANTLR start "xml_table_column"
    // PLSQLWalker.g:1529:1: xml_table_column : ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) ) ;
    public final void xml_table_column() throws RecognitionException {
        try {
            // PLSQLWalker.g:1530:5: ( ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) ) )
            // PLSQLWalker.g:1530:10: ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) )
            {
            match(input,XML_COLUMN,FOLLOW_XML_COLUMN_in_xml_table_column13071); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_xml_column_name_in_xml_table_column13073);
            xml_column_name();

            state._fsp--;


            // PLSQLWalker.g:1530:39: ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? )
            int alt465=2;
            int LA465_0 = input.LA(1);

            if ( (LA465_0==ORDINALITY_VK) ) {
                alt465=1;
            }
            else if ( (LA465_0==CUSTOM_TYPE||LA465_0==INTERVAL_DATATYPE||LA465_0==NATIVE_DATATYPE) ) {
                alt465=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 465, 0, input);

                throw nvae;

            }
            switch (alt465) {
                case 1 :
                    // PLSQLWalker.g:1530:40: ORDINALITY_VK
                    {
                    match(input,ORDINALITY_VK,FOLLOW_ORDINALITY_VK_in_xml_table_column13076); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1530:54: type_spec ( expression )? ( xml_general_default_part )?
                    {
                    pushFollow(FOLLOW_type_spec_in_xml_table_column13078);
                    type_spec();

                    state._fsp--;


                    // PLSQLWalker.g:1530:64: ( expression )?
                    int alt463=2;
                    int LA463_0 = input.LA(1);

                    if ( (LA463_0==EXPR||LA463_0==LOGIC_EXPR) ) {
                        alt463=1;
                    }
                    switch (alt463) {
                        case 1 :
                            // PLSQLWalker.g:1530:64: expression
                            {
                            pushFollow(FOLLOW_expression_in_xml_table_column13080);
                            expression();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1530:76: ( xml_general_default_part )?
                    int alt464=2;
                    int LA464_0 = input.LA(1);

                    if ( (LA464_0==SQL92_RESERVED_DEFAULT) ) {
                        alt464=1;
                    }
                    switch (alt464) {
                        case 1 :
                            // PLSQLWalker.g:1530:76: xml_general_default_part
                            {
                            pushFollow(FOLLOW_xml_general_default_part_in_xml_table_column13083);
                            xml_general_default_part();

                            state._fsp--;


                            }
                            break;

                    }


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xml_table_column"



    // $ANTLR start "xml_general_default_part"
    // PLSQLWalker.g:1533:1: xml_general_default_part : ^( SQL92_RESERVED_DEFAULT expression ) ;
    public final void xml_general_default_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1534:5: ( ^( SQL92_RESERVED_DEFAULT expression ) )
            // PLSQLWalker.g:1534:10: ^( SQL92_RESERVED_DEFAULT expression )
            {
            match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part13108); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_xml_general_default_part13110);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xml_general_default_part"



    // $ANTLR start "xml_multiuse_expression_element"
    // PLSQLWalker.g:1537:1: xml_multiuse_expression_element : ^( XML_ELEMENT expression ( xml_alias )? ) ;
    public final void xml_multiuse_expression_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1538:5: ( ^( XML_ELEMENT expression ( xml_alias )? ) )
            // PLSQLWalker.g:1538:10: ^( XML_ELEMENT expression ( xml_alias )? )
            {
            match(input,XML_ELEMENT,FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element13132); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_xml_multiuse_expression_element13134);
            expression();

            state._fsp--;


            // PLSQLWalker.g:1538:35: ( xml_alias )?
            int alt466=2;
            int LA466_0 = input.LA(1);

            if ( (LA466_0==XML_ALIAS) ) {
                alt466=1;
            }
            switch (alt466) {
                case 1 :
                    // PLSQLWalker.g:1538:35: xml_alias
                    {
                    pushFollow(FOLLOW_xml_alias_in_xml_multiuse_expression_element13136);
                    xml_alias();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xml_multiuse_expression_element"



    // $ANTLR start "xml_alias"
    // PLSQLWalker.g:1541:1: xml_alias : ( ^( XML_ALIAS ID ) | ^( XML_ALIAS ^( EVALNAME_VK expression ) ) );
    public final void xml_alias() throws RecognitionException {
        try {
            // PLSQLWalker.g:1542:5: ( ^( XML_ALIAS ID ) | ^( XML_ALIAS ^( EVALNAME_VK expression ) ) )
            int alt467=2;
            int LA467_0 = input.LA(1);

            if ( (LA467_0==XML_ALIAS) ) {
                int LA467_1 = input.LA(2);

                if ( (LA467_1==DOWN) ) {
                    int LA467_2 = input.LA(3);

                    if ( (LA467_2==ID) ) {
                        alt467=1;
                    }
                    else if ( (LA467_2==EVALNAME_VK) ) {
                        alt467=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 467, 2, input);

                        throw nvae;

                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 467, 1, input);

                    throw nvae;

                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 467, 0, input);

                throw nvae;

            }
            switch (alt467) {
                case 1 :
                    // PLSQLWalker.g:1542:10: ^( XML_ALIAS ID )
                    {
                    match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias13159); 

                    match(input, Token.DOWN, null); 
                    match(input,ID,FOLLOW_ID_in_xml_alias13161); 

                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1543:10: ^( XML_ALIAS ^( EVALNAME_VK expression ) )
                    {
                    match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias13174); 

                    match(input, Token.DOWN, null); 
                    match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_xml_alias13177); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_expression_in_xml_alias13179);
                    expression();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xml_alias"



    // $ANTLR start "xml_param_version_part"
    // PLSQLWalker.g:1546:1: xml_param_version_part : ^( VERSION_VK ( NO_VK VALUE_VK | expression ) ) ;
    public final void xml_param_version_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1547:5: ( ^( VERSION_VK ( NO_VK VALUE_VK | expression ) ) )
            // PLSQLWalker.g:1547:10: ^( VERSION_VK ( NO_VK VALUE_VK | expression ) )
            {
            match(input,VERSION_VK,FOLLOW_VERSION_VK_in_xml_param_version_part13202); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1547:23: ( NO_VK VALUE_VK | expression )
            int alt468=2;
            int LA468_0 = input.LA(1);

            if ( (LA468_0==NO_VK) ) {
                alt468=1;
            }
            else if ( (LA468_0==EXPR||LA468_0==LOGIC_EXPR) ) {
                alt468=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 468, 0, input);

                throw nvae;

            }
            switch (alt468) {
                case 1 :
                    // PLSQLWalker.g:1547:24: NO_VK VALUE_VK
                    {
                    match(input,NO_VK,FOLLOW_NO_VK_in_xml_param_version_part13205); 

                    match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_param_version_part13207); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1547:39: expression
                    {
                    pushFollow(FOLLOW_expression_in_xml_param_version_part13209);
                    expression();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xml_param_version_part"



    // $ANTLR start "xmlroot_param_standalone_part"
    // PLSQLWalker.g:1550:1: xmlroot_param_standalone_part : ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) ) ;
    public final void xmlroot_param_standalone_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1551:5: ( ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) ) )
            // PLSQLWalker.g:1551:10: ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) )
            {
            match(input,STANDALONE_VK,FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part13232); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1551:26: ( YES_VK | NO_VK ( VALUE_VK )? )
            int alt470=2;
            int LA470_0 = input.LA(1);

            if ( (LA470_0==YES_VK) ) {
                alt470=1;
            }
            else if ( (LA470_0==NO_VK) ) {
                alt470=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 470, 0, input);

                throw nvae;

            }
            switch (alt470) {
                case 1 :
                    // PLSQLWalker.g:1551:27: YES_VK
                    {
                    match(input,YES_VK,FOLLOW_YES_VK_in_xmlroot_param_standalone_part13235); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1551:34: NO_VK ( VALUE_VK )?
                    {
                    match(input,NO_VK,FOLLOW_NO_VK_in_xmlroot_param_standalone_part13237); 

                    // PLSQLWalker.g:1551:40: ( VALUE_VK )?
                    int alt469=2;
                    int LA469_0 = input.LA(1);

                    if ( (LA469_0==VALUE_VK) ) {
                        alt469=1;
                    }
                    switch (alt469) {
                        case 1 :
                            // PLSQLWalker.g:1551:40: VALUE_VK
                            {
                            match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part13239); 

                            }
                            break;

                    }


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xmlroot_param_standalone_part"



    // $ANTLR start "xmlserialize_param_enconding_part"
    // PLSQLWalker.g:1554:1: xmlserialize_param_enconding_part : ^( ENCODING_VK expression ) ;
    public final void xmlserialize_param_enconding_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1555:5: ( ^( ENCODING_VK expression ) )
            // PLSQLWalker.g:1555:10: ^( ENCODING_VK expression )
            {
            match(input,ENCODING_VK,FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part13263); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_xmlserialize_param_enconding_part13265);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xmlserialize_param_enconding_part"



    // $ANTLR start "xmlserialize_param_ident_part"
    // PLSQLWalker.g:1558:1: xmlserialize_param_ident_part : ( NO_VK INDENT_VK | ^( INDENT_VK ( expression )? ) );
    public final void xmlserialize_param_ident_part() throws RecognitionException {
        try {
            // PLSQLWalker.g:1559:5: ( NO_VK INDENT_VK | ^( INDENT_VK ( expression )? ) )
            int alt472=2;
            int LA472_0 = input.LA(1);

            if ( (LA472_0==NO_VK) ) {
                alt472=1;
            }
            else if ( (LA472_0==INDENT_VK) ) {
                alt472=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 472, 0, input);

                throw nvae;

            }
            switch (alt472) {
                case 1 :
                    // PLSQLWalker.g:1559:10: NO_VK INDENT_VK
                    {
                    match(input,NO_VK,FOLLOW_NO_VK_in_xmlserialize_param_ident_part13286); 

                    match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13288); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1560:10: ^( INDENT_VK ( expression )? )
                    {
                    match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13300); 

                    if ( input.LA(1)==Token.DOWN ) {
                        match(input, Token.DOWN, null); 
                        // PLSQLWalker.g:1560:22: ( expression )?
                        int alt471=2;
                        int LA471_0 = input.LA(1);

                        if ( (LA471_0==EXPR||LA471_0==LOGIC_EXPR) ) {
                            alt471=1;
                        }
                        switch (alt471) {
                            case 1 :
                                // PLSQLWalker.g:1560:22: expression
                                {
                                pushFollow(FOLLOW_expression_in_xmlserialize_param_ident_part13302);
                                expression();

                                state._fsp--;


                                }
                                break;

                        }


                        match(input, Token.UP, null); 
                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xmlserialize_param_ident_part"



    // $ANTLR start "partition_extension_clause"
    // PLSQLWalker.g:1567:1: partition_extension_clause : ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) ;
    public final void partition_extension_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1568:5: ( ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) )
            // PLSQLWalker.g:1568:10: ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list )
            {
            if ( input.LA(1)==PARTITION_VK||input.LA(1)==SUBPARTITION_VK ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_list_in_partition_extension_clause13335);
            expression_list();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "partition_extension_clause"



    // $ANTLR start "alias"
    // PLSQLWalker.g:1571:1: alias : ^( ALIAS ( char_set_name )? ID ) ;
    public final void alias() throws RecognitionException {
        try {
            // PLSQLWalker.g:1572:5: ( ^( ALIAS ( char_set_name )? ID ) )
            // PLSQLWalker.g:1572:10: ^( ALIAS ( char_set_name )? ID )
            {
            match(input,ALIAS,FOLLOW_ALIAS_in_alias13357); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1572:18: ( char_set_name )?
            int alt473=2;
            int LA473_0 = input.LA(1);

            if ( (LA473_0==CHAR_SET_NAME) ) {
                alt473=1;
            }
            switch (alt473) {
                case 1 :
                    // PLSQLWalker.g:1572:18: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_alias13359);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_alias13362); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "alias"



    // $ANTLR start "where_clause"
    // PLSQLWalker.g:1575:1: where_clause : ^( SQL92_RESERVED_WHERE expression ) ;
    public final void where_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1576:5: ( ^( SQL92_RESERVED_WHERE expression ) )
            // PLSQLWalker.g:1576:10: ^( SQL92_RESERVED_WHERE expression )
            {
            match(input,SQL92_RESERVED_WHERE,FOLLOW_SQL92_RESERVED_WHERE_in_where_clause13384); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_where_clause13386);
            expression();

            state._fsp--;


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "where_clause"



    // $ANTLR start "into_clause"
    // PLSQLWalker.g:1579:1: into_clause : ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) );
    public final void into_clause() throws RecognitionException {
        try {
            // PLSQLWalker.g:1580:5: ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) )
            int alt476=2;
            int LA476_0 = input.LA(1);

            if ( (LA476_0==SQL92_RESERVED_INTO) ) {
                alt476=1;
            }
            else if ( (LA476_0==BULK_VK) ) {
                alt476=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 476, 0, input);

                throw nvae;

            }
            switch (alt476) {
                case 1 :
                    // PLSQLWalker.g:1580:10: ^( SQL92_RESERVED_INTO ( variable_name )+ )
                    {
                    match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_into_clause13408); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1580:32: ( variable_name )+
                    int cnt474=0;
                    loop474:
                    do {
                        int alt474=2;
                        int LA474_0 = input.LA(1);

                        if ( (LA474_0==HOSTED_VARIABLE_NAME||LA474_0==VARIABLE_NAME) ) {
                            alt474=1;
                        }


                        switch (alt474) {
                    	case 1 :
                    	    // PLSQLWalker.g:1580:32: variable_name
                    	    {
                    	    pushFollow(FOLLOW_variable_name_in_into_clause13410);
                    	    variable_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt474 >= 1 ) break loop474;
                                EarlyExitException eee =
                                    new EarlyExitException(474, input);
                                throw eee;
                        }
                        cnt474++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1581:10: ^( BULK_VK ( variable_name )+ )
                    {
                    match(input,BULK_VK,FOLLOW_BULK_VK_in_into_clause13425); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1581:20: ( variable_name )+
                    int cnt475=0;
                    loop475:
                    do {
                        int alt475=2;
                        int LA475_0 = input.LA(1);

                        if ( (LA475_0==HOSTED_VARIABLE_NAME||LA475_0==VARIABLE_NAME) ) {
                            alt475=1;
                        }


                        switch (alt475) {
                    	case 1 :
                    	    // PLSQLWalker.g:1581:20: variable_name
                    	    {
                    	    pushFollow(FOLLOW_variable_name_in_into_clause13427);
                    	    variable_name();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt475 >= 1 ) break loop475;
                                EarlyExitException eee =
                                    new EarlyExitException(475, input);
                                throw eee;
                        }
                        cnt475++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "into_clause"



    // $ANTLR start "xml_column_name"
    // PLSQLWalker.g:1588:1: xml_column_name : ^( XML_COLUMN_NAME ( char_set_name )? ID ) ;
    public final void xml_column_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1589:5: ( ^( XML_COLUMN_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1589:10: ^( XML_COLUMN_NAME ( char_set_name )? ID )
            {
            match(input,XML_COLUMN_NAME,FOLLOW_XML_COLUMN_NAME_in_xml_column_name13455); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1589:28: ( char_set_name )?
            int alt477=2;
            int LA477_0 = input.LA(1);

            if ( (LA477_0==CHAR_SET_NAME) ) {
                alt477=1;
            }
            switch (alt477) {
                case 1 :
                    // PLSQLWalker.g:1589:28: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_xml_column_name13457);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_xml_column_name13460); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "xml_column_name"



    // $ANTLR start "cost_class_name"
    // PLSQLWalker.g:1592:1: cost_class_name : ^( COST_CLASS_NAME ( char_set_name )? ID ) ;
    public final void cost_class_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1593:5: ( ^( COST_CLASS_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1593:10: ^( COST_CLASS_NAME ( char_set_name )? ID )
            {
            match(input,COST_CLASS_NAME,FOLLOW_COST_CLASS_NAME_in_cost_class_name13482); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1593:28: ( char_set_name )?
            int alt478=2;
            int LA478_0 = input.LA(1);

            if ( (LA478_0==CHAR_SET_NAME) ) {
                alt478=1;
            }
            switch (alt478) {
                case 1 :
                    // PLSQLWalker.g:1593:28: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_cost_class_name13484);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_cost_class_name13487); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "cost_class_name"



    // $ANTLR start "attribute_name"
    // PLSQLWalker.g:1596:1: attribute_name : ^( ATTRIBUTE_NAME ( char_set_name )? ID ) ;
    public final void attribute_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1597:5: ( ^( ATTRIBUTE_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1597:10: ^( ATTRIBUTE_NAME ( char_set_name )? ID )
            {
            match(input,ATTRIBUTE_NAME,FOLLOW_ATTRIBUTE_NAME_in_attribute_name13509); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1597:27: ( char_set_name )?
            int alt479=2;
            int LA479_0 = input.LA(1);

            if ( (LA479_0==CHAR_SET_NAME) ) {
                alt479=1;
            }
            switch (alt479) {
                case 1 :
                    // PLSQLWalker.g:1597:27: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_attribute_name13511);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_attribute_name13514); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "attribute_name"



    // $ANTLR start "savepoint_name"
    // PLSQLWalker.g:1600:1: savepoint_name : ^( SAVEPOINT_NAME ( char_set_name )? ID ) ;
    public final void savepoint_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1601:5: ( ^( SAVEPOINT_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1601:10: ^( SAVEPOINT_NAME ( char_set_name )? ID )
            {
            match(input,SAVEPOINT_NAME,FOLLOW_SAVEPOINT_NAME_in_savepoint_name13536); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1601:27: ( char_set_name )?
            int alt480=2;
            int LA480_0 = input.LA(1);

            if ( (LA480_0==CHAR_SET_NAME) ) {
                alt480=1;
            }
            switch (alt480) {
                case 1 :
                    // PLSQLWalker.g:1601:27: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_savepoint_name13538);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_savepoint_name13541); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "savepoint_name"



    // $ANTLR start "rollback_segment_name"
    // PLSQLWalker.g:1604:1: rollback_segment_name : ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) ;
    public final void rollback_segment_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1605:5: ( ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1605:10: ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID )
            {
            match(input,ROLLBACK_SEGMENT_NAME,FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name13563); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1605:34: ( char_set_name )?
            int alt481=2;
            int LA481_0 = input.LA(1);

            if ( (LA481_0==CHAR_SET_NAME) ) {
                alt481=1;
            }
            switch (alt481) {
                case 1 :
                    // PLSQLWalker.g:1605:34: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_rollback_segment_name13565);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_rollback_segment_name13568); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "rollback_segment_name"



    // $ANTLR start "table_var_name"
    // PLSQLWalker.g:1609:1: table_var_name : ^( TABLE_VAR_NAME ( char_set_name )? ID ) ;
    public final void table_var_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1610:5: ( ^( TABLE_VAR_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1610:10: ^( TABLE_VAR_NAME ( char_set_name )? ID )
            {
            match(input,TABLE_VAR_NAME,FOLLOW_TABLE_VAR_NAME_in_table_var_name13591); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1610:27: ( char_set_name )?
            int alt482=2;
            int LA482_0 = input.LA(1);

            if ( (LA482_0==CHAR_SET_NAME) ) {
                alt482=1;
            }
            switch (alt482) {
                case 1 :
                    // PLSQLWalker.g:1610:27: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_table_var_name13593);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_table_var_name13596); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "table_var_name"



    // $ANTLR start "schema_name"
    // PLSQLWalker.g:1613:1: schema_name : ^( SCHEMA_NAME ( char_set_name )? ID ) ;
    public final void schema_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1614:5: ( ^( SCHEMA_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1614:10: ^( SCHEMA_NAME ( char_set_name )? ID )
            {
            match(input,SCHEMA_NAME,FOLLOW_SCHEMA_NAME_in_schema_name13618); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1614:24: ( char_set_name )?
            int alt483=2;
            int LA483_0 = input.LA(1);

            if ( (LA483_0==CHAR_SET_NAME) ) {
                alt483=1;
            }
            switch (alt483) {
                case 1 :
                    // PLSQLWalker.g:1614:24: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_schema_name13620);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_schema_name13623); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "schema_name"



    // $ANTLR start "routine_name"
    // PLSQLWalker.g:1617:1: routine_name : ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) ;
    public final void routine_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1618:5: ( ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) )
            // PLSQLWalker.g:1618:10: ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? )
            {
            match(input,ROUTINE_NAME,FOLLOW_ROUTINE_NAME_in_routine_name13645); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1618:25: ( char_set_name )?
            int alt484=2;
            int LA484_0 = input.LA(1);

            if ( (LA484_0==CHAR_SET_NAME) ) {
                alt484=1;
            }
            switch (alt484) {
                case 1 :
                    // PLSQLWalker.g:1618:25: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_routine_name13647);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1618:40: ( ID )+
            int cnt485=0;
            loop485:
            do {
                int alt485=2;
                int LA485_0 = input.LA(1);

                if ( (LA485_0==ID) ) {
                    alt485=1;
                }


                switch (alt485) {
            	case 1 :
            	    // PLSQLWalker.g:1618:40: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_routine_name13650); 

            	    }
            	    break;

            	default :
            	    if ( cnt485 >= 1 ) break loop485;
                        EarlyExitException eee =
                            new EarlyExitException(485, input);
                        throw eee;
                }
                cnt485++;
            } while (true);


            // PLSQLWalker.g:1618:44: ( link_name )?
            int alt486=2;
            int LA486_0 = input.LA(1);

            if ( (LA486_0==LINK_NAME) ) {
                alt486=1;
            }
            switch (alt486) {
                case 1 :
                    // PLSQLWalker.g:1618:44: link_name
                    {
                    pushFollow(FOLLOW_link_name_in_routine_name13653);
                    link_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "routine_name"



    // $ANTLR start "package_name"
    // PLSQLWalker.g:1621:1: package_name : ^( PACKAGE_NAME ( char_set_name )? ID ) ;
    public final void package_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1622:5: ( ^( PACKAGE_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1622:10: ^( PACKAGE_NAME ( char_set_name )? ID )
            {
            match(input,PACKAGE_NAME,FOLLOW_PACKAGE_NAME_in_package_name13676); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1622:25: ( char_set_name )?
            int alt487=2;
            int LA487_0 = input.LA(1);

            if ( (LA487_0==CHAR_SET_NAME) ) {
                alt487=1;
            }
            switch (alt487) {
                case 1 :
                    // PLSQLWalker.g:1622:25: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_package_name13678);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_package_name13681); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "package_name"



    // $ANTLR start "implementation_type_name"
    // PLSQLWalker.g:1625:1: implementation_type_name : ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? ( ID )+ ) ;
    public final void implementation_type_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1626:5: ( ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? ( ID )+ ) )
            // PLSQLWalker.g:1626:10: ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? ( ID )+ )
            {
            match(input,IMPLEMENTATION_TYPE_NAME,FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name13703); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1626:37: ( char_set_name )?
            int alt488=2;
            int LA488_0 = input.LA(1);

            if ( (LA488_0==CHAR_SET_NAME) ) {
                alt488=1;
            }
            switch (alt488) {
                case 1 :
                    // PLSQLWalker.g:1626:37: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_implementation_type_name13705);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1626:52: ( ID )+
            int cnt489=0;
            loop489:
            do {
                int alt489=2;
                int LA489_0 = input.LA(1);

                if ( (LA489_0==ID) ) {
                    alt489=1;
                }


                switch (alt489) {
            	case 1 :
            	    // PLSQLWalker.g:1626:52: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_implementation_type_name13708); 

            	    }
            	    break;

            	default :
            	    if ( cnt489 >= 1 ) break loop489;
                        EarlyExitException eee =
                            new EarlyExitException(489, input);
                        throw eee;
                }
                cnt489++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "implementation_type_name"



    // $ANTLR start "parameter_name"
    // PLSQLWalker.g:1629:1: parameter_name : ^( PARAMETER_NAME ( char_set_name )? ID ) ;
    public final void parameter_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1630:5: ( ^( PARAMETER_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1630:10: ^( PARAMETER_NAME ( char_set_name )? ID )
            {
            match(input,PARAMETER_NAME,FOLLOW_PARAMETER_NAME_in_parameter_name13731); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1630:27: ( char_set_name )?
            int alt490=2;
            int LA490_0 = input.LA(1);

            if ( (LA490_0==CHAR_SET_NAME) ) {
                alt490=1;
            }
            switch (alt490) {
                case 1 :
                    // PLSQLWalker.g:1630:27: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_parameter_name13733);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_parameter_name13736); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "parameter_name"



    // $ANTLR start "reference_model_name"
    // PLSQLWalker.g:1633:1: reference_model_name : ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) ;
    public final void reference_model_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1634:5: ( ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1634:10: ^( REFERENCE_MODEL_NAME ( char_set_name )? ID )
            {
            match(input,REFERENCE_MODEL_NAME,FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name13758); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1634:33: ( char_set_name )?
            int alt491=2;
            int LA491_0 = input.LA(1);

            if ( (LA491_0==CHAR_SET_NAME) ) {
                alt491=1;
            }
            switch (alt491) {
                case 1 :
                    // PLSQLWalker.g:1634:33: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_reference_model_name13760);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_reference_model_name13763); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "reference_model_name"



    // $ANTLR start "main_model_name"
    // PLSQLWalker.g:1637:1: main_model_name : ^( MAIN_MODEL_NAME ( char_set_name )? ID ) ;
    public final void main_model_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1638:5: ( ^( MAIN_MODEL_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1638:10: ^( MAIN_MODEL_NAME ( char_set_name )? ID )
            {
            match(input,MAIN_MODEL_NAME,FOLLOW_MAIN_MODEL_NAME_in_main_model_name13785); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1638:28: ( char_set_name )?
            int alt492=2;
            int LA492_0 = input.LA(1);

            if ( (LA492_0==CHAR_SET_NAME) ) {
                alt492=1;
            }
            switch (alt492) {
                case 1 :
                    // PLSQLWalker.g:1638:28: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_main_model_name13787);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_main_model_name13790); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "main_model_name"



    // $ANTLR start "query_name"
    // PLSQLWalker.g:1641:1: query_name : ^( QUERY_NAME ( char_set_name )? ID ) ;
    public final void query_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1642:5: ( ^( QUERY_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1642:10: ^( QUERY_NAME ( char_set_name )? ID )
            {
            match(input,QUERY_NAME,FOLLOW_QUERY_NAME_in_query_name13812); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1642:23: ( char_set_name )?
            int alt493=2;
            int LA493_0 = input.LA(1);

            if ( (LA493_0==CHAR_SET_NAME) ) {
                alt493=1;
            }
            switch (alt493) {
                case 1 :
                    // PLSQLWalker.g:1642:23: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_query_name13814);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_query_name13817); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "query_name"



    // $ANTLR start "constraint_name"
    // PLSQLWalker.g:1645:1: constraint_name : ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) ;
    public final void constraint_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1646:5: ( ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) )
            // PLSQLWalker.g:1646:10: ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? )
            {
            match(input,CONSTRAINT_NAME,FOLLOW_CONSTRAINT_NAME_in_constraint_name13839); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1646:28: ( char_set_name )?
            int alt494=2;
            int LA494_0 = input.LA(1);

            if ( (LA494_0==CHAR_SET_NAME) ) {
                alt494=1;
            }
            switch (alt494) {
                case 1 :
                    // PLSQLWalker.g:1646:28: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_constraint_name13841);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1646:43: ( ID )+
            int cnt495=0;
            loop495:
            do {
                int alt495=2;
                int LA495_0 = input.LA(1);

                if ( (LA495_0==ID) ) {
                    alt495=1;
                }


                switch (alt495) {
            	case 1 :
            	    // PLSQLWalker.g:1646:43: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_constraint_name13844); 

            	    }
            	    break;

            	default :
            	    if ( cnt495 >= 1 ) break loop495;
                        EarlyExitException eee =
                            new EarlyExitException(495, input);
                        throw eee;
                }
                cnt495++;
            } while (true);


            // PLSQLWalker.g:1646:47: ( link_name )?
            int alt496=2;
            int LA496_0 = input.LA(1);

            if ( (LA496_0==LINK_NAME) ) {
                alt496=1;
            }
            switch (alt496) {
                case 1 :
                    // PLSQLWalker.g:1646:47: link_name
                    {
                    pushFollow(FOLLOW_link_name_in_constraint_name13847);
                    link_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "constraint_name"



    // $ANTLR start "label_name"
    // PLSQLWalker.g:1649:1: label_name : ^( LABEL_NAME ID ) ;
    public final void label_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1650:5: ( ^( LABEL_NAME ID ) )
            // PLSQLWalker.g:1650:10: ^( LABEL_NAME ID )
            {
            match(input,LABEL_NAME,FOLLOW_LABEL_NAME_in_label_name13870); 

            match(input, Token.DOWN, null); 
            match(input,ID,FOLLOW_ID_in_label_name13872); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "label_name"



    // $ANTLR start "type_name"
    // PLSQLWalker.g:1653:1: type_name : ^( TYPE_NAME ( ID )+ ) ;
    public final void type_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1654:5: ( ^( TYPE_NAME ( ID )+ ) )
            // PLSQLWalker.g:1654:10: ^( TYPE_NAME ( ID )+ )
            {
            match(input,TYPE_NAME,FOLLOW_TYPE_NAME_in_type_name13894); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1654:22: ( ID )+
            int cnt497=0;
            loop497:
            do {
                int alt497=2;
                int LA497_0 = input.LA(1);

                if ( (LA497_0==ID) ) {
                    alt497=1;
                }


                switch (alt497) {
            	case 1 :
            	    // PLSQLWalker.g:1654:22: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_type_name13896); 

            	    }
            	    break;

            	default :
            	    if ( cnt497 >= 1 ) break loop497;
                        EarlyExitException eee =
                            new EarlyExitException(497, input);
                        throw eee;
                }
                cnt497++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "type_name"



    // $ANTLR start "sequence_name"
    // PLSQLWalker.g:1657:1: sequence_name : ^( SEQUENCE_NAME ( ID )+ ) ;
    public final void sequence_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1658:5: ( ^( SEQUENCE_NAME ( ID )+ ) )
            // PLSQLWalker.g:1658:10: ^( SEQUENCE_NAME ( ID )+ )
            {
            match(input,SEQUENCE_NAME,FOLLOW_SEQUENCE_NAME_in_sequence_name13919); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1658:26: ( ID )+
            int cnt498=0;
            loop498:
            do {
                int alt498=2;
                int LA498_0 = input.LA(1);

                if ( (LA498_0==ID) ) {
                    alt498=1;
                }


                switch (alt498) {
            	case 1 :
            	    // PLSQLWalker.g:1658:26: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_sequence_name13921); 

            	    }
            	    break;

            	default :
            	    if ( cnt498 >= 1 ) break loop498;
                        EarlyExitException eee =
                            new EarlyExitException(498, input);
                        throw eee;
                }
                cnt498++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "sequence_name"



    // $ANTLR start "exception_name"
    // PLSQLWalker.g:1661:1: exception_name : ^( EXCEPTION_NAME ( char_set_name )? ( ID )+ ) ;
    public final void exception_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1662:5: ( ^( EXCEPTION_NAME ( char_set_name )? ( ID )+ ) )
            // PLSQLWalker.g:1662:10: ^( EXCEPTION_NAME ( char_set_name )? ( ID )+ )
            {
            match(input,EXCEPTION_NAME,FOLLOW_EXCEPTION_NAME_in_exception_name13944); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1662:27: ( char_set_name )?
            int alt499=2;
            int LA499_0 = input.LA(1);

            if ( (LA499_0==CHAR_SET_NAME) ) {
                alt499=1;
            }
            switch (alt499) {
                case 1 :
                    // PLSQLWalker.g:1662:27: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_exception_name13946);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1662:42: ( ID )+
            int cnt500=0;
            loop500:
            do {
                int alt500=2;
                int LA500_0 = input.LA(1);

                if ( (LA500_0==ID) ) {
                    alt500=1;
                }


                switch (alt500) {
            	case 1 :
            	    // PLSQLWalker.g:1662:42: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_exception_name13949); 

            	    }
            	    break;

            	default :
            	    if ( cnt500 >= 1 ) break loop500;
                        EarlyExitException eee =
                            new EarlyExitException(500, input);
                        throw eee;
                }
                cnt500++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "exception_name"



    // $ANTLR start "function_name"
    // PLSQLWalker.g:1665:1: function_name : ^( FUNCTION_NAME ( char_set_name )? ( ID )+ ) ;
    public final void function_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1666:5: ( ^( FUNCTION_NAME ( char_set_name )? ( ID )+ ) )
            // PLSQLWalker.g:1666:10: ^( FUNCTION_NAME ( char_set_name )? ( ID )+ )
            {
            match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_function_name13972); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1666:26: ( char_set_name )?
            int alt501=2;
            int LA501_0 = input.LA(1);

            if ( (LA501_0==CHAR_SET_NAME) ) {
                alt501=1;
            }
            switch (alt501) {
                case 1 :
                    // PLSQLWalker.g:1666:26: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_function_name13974);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1666:41: ( ID )+
            int cnt502=0;
            loop502:
            do {
                int alt502=2;
                int LA502_0 = input.LA(1);

                if ( (LA502_0==ID) ) {
                    alt502=1;
                }


                switch (alt502) {
            	case 1 :
            	    // PLSQLWalker.g:1666:41: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_function_name13977); 

            	    }
            	    break;

            	default :
            	    if ( cnt502 >= 1 ) break loop502;
                        EarlyExitException eee =
                            new EarlyExitException(502, input);
                        throw eee;
                }
                cnt502++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "function_name"



    // $ANTLR start "procedure_name"
    // PLSQLWalker.g:1669:1: procedure_name : ^( PROCEDURE_NAME ( char_set_name )? ( ID )+ ) ;
    public final void procedure_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1670:5: ( ^( PROCEDURE_NAME ( char_set_name )? ( ID )+ ) )
            // PLSQLWalker.g:1670:10: ^( PROCEDURE_NAME ( char_set_name )? ( ID )+ )
            {
            match(input,PROCEDURE_NAME,FOLLOW_PROCEDURE_NAME_in_procedure_name14000); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1670:27: ( char_set_name )?
            int alt503=2;
            int LA503_0 = input.LA(1);

            if ( (LA503_0==CHAR_SET_NAME) ) {
                alt503=1;
            }
            switch (alt503) {
                case 1 :
                    // PLSQLWalker.g:1670:27: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_procedure_name14002);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1670:42: ( ID )+
            int cnt504=0;
            loop504:
            do {
                int alt504=2;
                int LA504_0 = input.LA(1);

                if ( (LA504_0==ID) ) {
                    alt504=1;
                }


                switch (alt504) {
            	case 1 :
            	    // PLSQLWalker.g:1670:42: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_procedure_name14005); 

            	    }
            	    break;

            	default :
            	    if ( cnt504 >= 1 ) break loop504;
                        EarlyExitException eee =
                            new EarlyExitException(504, input);
                        throw eee;
                }
                cnt504++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "procedure_name"



    // $ANTLR start "trigger_name"
    // PLSQLWalker.g:1673:1: trigger_name : ^( TRIGGER_NAME ( char_set_name )? ( ID )+ ) ;
    public final void trigger_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1674:5: ( ^( TRIGGER_NAME ( char_set_name )? ( ID )+ ) )
            // PLSQLWalker.g:1674:10: ^( TRIGGER_NAME ( char_set_name )? ( ID )+ )
            {
            match(input,TRIGGER_NAME,FOLLOW_TRIGGER_NAME_in_trigger_name14028); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1674:25: ( char_set_name )?
            int alt505=2;
            int LA505_0 = input.LA(1);

            if ( (LA505_0==CHAR_SET_NAME) ) {
                alt505=1;
            }
            switch (alt505) {
                case 1 :
                    // PLSQLWalker.g:1674:25: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_trigger_name14030);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1674:40: ( ID )+
            int cnt506=0;
            loop506:
            do {
                int alt506=2;
                int LA506_0 = input.LA(1);

                if ( (LA506_0==ID) ) {
                    alt506=1;
                }


                switch (alt506) {
            	case 1 :
            	    // PLSQLWalker.g:1674:40: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_trigger_name14033); 

            	    }
            	    break;

            	default :
            	    if ( cnt506 >= 1 ) break loop506;
                        EarlyExitException eee =
                            new EarlyExitException(506, input);
                        throw eee;
                }
                cnt506++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "trigger_name"



    // $ANTLR start "variable_name"
    // PLSQLWalker.g:1677:1: variable_name : ( ^( HOSTED_VARIABLE_NAME ( char_set_name )? ( ID )+ ) | ^( VARIABLE_NAME ( char_set_name )? ( ID )+ ) );
    public final void variable_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1678:5: ( ^( HOSTED_VARIABLE_NAME ( char_set_name )? ( ID )+ ) | ^( VARIABLE_NAME ( char_set_name )? ( ID )+ ) )
            int alt511=2;
            int LA511_0 = input.LA(1);

            if ( (LA511_0==HOSTED_VARIABLE_NAME) ) {
                alt511=1;
            }
            else if ( (LA511_0==VARIABLE_NAME) ) {
                alt511=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 511, 0, input);

                throw nvae;

            }
            switch (alt511) {
                case 1 :
                    // PLSQLWalker.g:1678:10: ^( HOSTED_VARIABLE_NAME ( char_set_name )? ( ID )+ )
                    {
                    match(input,HOSTED_VARIABLE_NAME,FOLLOW_HOSTED_VARIABLE_NAME_in_variable_name14056); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1678:33: ( char_set_name )?
                    int alt507=2;
                    int LA507_0 = input.LA(1);

                    if ( (LA507_0==CHAR_SET_NAME) ) {
                        alt507=1;
                    }
                    switch (alt507) {
                        case 1 :
                            // PLSQLWalker.g:1678:33: char_set_name
                            {
                            pushFollow(FOLLOW_char_set_name_in_variable_name14058);
                            char_set_name();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1678:48: ( ID )+
                    int cnt508=0;
                    loop508:
                    do {
                        int alt508=2;
                        int LA508_0 = input.LA(1);

                        if ( (LA508_0==ID) ) {
                            alt508=1;
                        }


                        switch (alt508) {
                    	case 1 :
                    	    // PLSQLWalker.g:1678:48: ID
                    	    {
                    	    match(input,ID,FOLLOW_ID_in_variable_name14061); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt508 >= 1 ) break loop508;
                                EarlyExitException eee =
                                    new EarlyExitException(508, input);
                                throw eee;
                        }
                        cnt508++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1679:10: ^( VARIABLE_NAME ( char_set_name )? ( ID )+ )
                    {
                    match(input,VARIABLE_NAME,FOLLOW_VARIABLE_NAME_in_variable_name14075); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1679:26: ( char_set_name )?
                    int alt509=2;
                    int LA509_0 = input.LA(1);

                    if ( (LA509_0==CHAR_SET_NAME) ) {
                        alt509=1;
                    }
                    switch (alt509) {
                        case 1 :
                            // PLSQLWalker.g:1679:26: char_set_name
                            {
                            pushFollow(FOLLOW_char_set_name_in_variable_name14077);
                            char_set_name();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1679:41: ( ID )+
                    int cnt510=0;
                    loop510:
                    do {
                        int alt510=2;
                        int LA510_0 = input.LA(1);

                        if ( (LA510_0==ID) ) {
                            alt510=1;
                        }


                        switch (alt510) {
                    	case 1 :
                    	    // PLSQLWalker.g:1679:41: ID
                    	    {
                    	    match(input,ID,FOLLOW_ID_in_variable_name14080); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt510 >= 1 ) break loop510;
                                EarlyExitException eee =
                                    new EarlyExitException(510, input);
                                throw eee;
                        }
                        cnt510++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "variable_name"



    // $ANTLR start "index_name"
    // PLSQLWalker.g:1682:1: index_name : ^( INDEX_NAME ( char_set_name )? ID ) ;
    public final void index_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1683:5: ( ^( INDEX_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1683:10: ^( INDEX_NAME ( char_set_name )? ID )
            {
            match(input,INDEX_NAME,FOLLOW_INDEX_NAME_in_index_name14103); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1683:23: ( char_set_name )?
            int alt512=2;
            int LA512_0 = input.LA(1);

            if ( (LA512_0==CHAR_SET_NAME) ) {
                alt512=1;
            }
            switch (alt512) {
                case 1 :
                    // PLSQLWalker.g:1683:23: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_index_name14105);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_index_name14108); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "index_name"



    // $ANTLR start "cursor_name"
    // PLSQLWalker.g:1686:1: cursor_name : ^( CURSOR_NAME ( char_set_name )? ID ) ;
    public final void cursor_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1687:5: ( ^( CURSOR_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1687:10: ^( CURSOR_NAME ( char_set_name )? ID )
            {
            match(input,CURSOR_NAME,FOLLOW_CURSOR_NAME_in_cursor_name14130); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1687:24: ( char_set_name )?
            int alt513=2;
            int LA513_0 = input.LA(1);

            if ( (LA513_0==CHAR_SET_NAME) ) {
                alt513=1;
            }
            switch (alt513) {
                case 1 :
                    // PLSQLWalker.g:1687:24: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_cursor_name14132);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_cursor_name14135); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "cursor_name"



    // $ANTLR start "record_name"
    // PLSQLWalker.g:1690:1: record_name : ^( RECORD_NAME ( char_set_name )? ID ) ;
    public final void record_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1691:5: ( ^( RECORD_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1691:10: ^( RECORD_NAME ( char_set_name )? ID )
            {
            match(input,RECORD_NAME,FOLLOW_RECORD_NAME_in_record_name14157); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1691:24: ( char_set_name )?
            int alt514=2;
            int LA514_0 = input.LA(1);

            if ( (LA514_0==CHAR_SET_NAME) ) {
                alt514=1;
            }
            switch (alt514) {
                case 1 :
                    // PLSQLWalker.g:1691:24: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_record_name14159);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_record_name14162); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "record_name"



    // $ANTLR start "collection_name"
    // PLSQLWalker.g:1694:1: collection_name : ^( COLLECTION_NAME ( char_set_name )? ( ID )+ ) ;
    public final void collection_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1695:5: ( ^( COLLECTION_NAME ( char_set_name )? ( ID )+ ) )
            // PLSQLWalker.g:1695:10: ^( COLLECTION_NAME ( char_set_name )? ( ID )+ )
            {
            match(input,COLLECTION_NAME,FOLLOW_COLLECTION_NAME_in_collection_name14184); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1695:28: ( char_set_name )?
            int alt515=2;
            int LA515_0 = input.LA(1);

            if ( (LA515_0==CHAR_SET_NAME) ) {
                alt515=1;
            }
            switch (alt515) {
                case 1 :
                    // PLSQLWalker.g:1695:28: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_collection_name14186);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1695:43: ( ID )+
            int cnt516=0;
            loop516:
            do {
                int alt516=2;
                int LA516_0 = input.LA(1);

                if ( (LA516_0==ID) ) {
                    alt516=1;
                }


                switch (alt516) {
            	case 1 :
            	    // PLSQLWalker.g:1695:43: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_collection_name14189); 

            	    }
            	    break;

            	default :
            	    if ( cnt516 >= 1 ) break loop516;
                        EarlyExitException eee =
                            new EarlyExitException(516, input);
                        throw eee;
                }
                cnt516++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "collection_name"



    // $ANTLR start "link_name"
    // PLSQLWalker.g:1698:1: link_name : ^( LINK_NAME ( char_set_name )? ID ) ;
    public final void link_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1699:5: ( ^( LINK_NAME ( char_set_name )? ID ) )
            // PLSQLWalker.g:1699:10: ^( LINK_NAME ( char_set_name )? ID )
            {
            match(input,LINK_NAME,FOLLOW_LINK_NAME_in_link_name14212); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1699:22: ( char_set_name )?
            int alt517=2;
            int LA517_0 = input.LA(1);

            if ( (LA517_0==CHAR_SET_NAME) ) {
                alt517=1;
            }
            switch (alt517) {
                case 1 :
                    // PLSQLWalker.g:1699:22: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_link_name14214);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_link_name14217); 

            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "link_name"



    // $ANTLR start "column_name"
    // PLSQLWalker.g:1702:1: column_name : ^( COLUMN_NAME ( char_set_name )? ( ID )+ ) ;
    public final void column_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1703:5: ( ^( COLUMN_NAME ( char_set_name )? ( ID )+ ) )
            // PLSQLWalker.g:1703:10: ^( COLUMN_NAME ( char_set_name )? ( ID )+ )
            {
            match(input,COLUMN_NAME,FOLLOW_COLUMN_NAME_in_column_name14239); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1703:24: ( char_set_name )?
            int alt518=2;
            int LA518_0 = input.LA(1);

            if ( (LA518_0==CHAR_SET_NAME) ) {
                alt518=1;
            }
            switch (alt518) {
                case 1 :
                    // PLSQLWalker.g:1703:24: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_column_name14241);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1703:39: ( ID )+
            int cnt519=0;
            loop519:
            do {
                int alt519=2;
                int LA519_0 = input.LA(1);

                if ( (LA519_0==ID) ) {
                    alt519=1;
                }


                switch (alt519) {
            	case 1 :
            	    // PLSQLWalker.g:1703:39: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_column_name14244); 

            	    }
            	    break;

            	default :
            	    if ( cnt519 >= 1 ) break loop519;
                        EarlyExitException eee =
                            new EarlyExitException(519, input);
                        throw eee;
                }
                cnt519++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "column_name"



    // $ANTLR start "tableview_name"
    // PLSQLWalker.g:1706:1: tableview_name : ^( TABLEVIEW_NAME ( char_set_name )? ( ID )+ ( link_name )? ( partition_extension_clause )? ) ;
    public final void tableview_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1707:5: ( ^( TABLEVIEW_NAME ( char_set_name )? ( ID )+ ( link_name )? ( partition_extension_clause )? ) )
            // PLSQLWalker.g:1707:10: ^( TABLEVIEW_NAME ( char_set_name )? ( ID )+ ( link_name )? ( partition_extension_clause )? )
            {
            match(input,TABLEVIEW_NAME,FOLLOW_TABLEVIEW_NAME_in_tableview_name14267); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1707:27: ( char_set_name )?
            int alt520=2;
            int LA520_0 = input.LA(1);

            if ( (LA520_0==CHAR_SET_NAME) ) {
                alt520=1;
            }
            switch (alt520) {
                case 1 :
                    // PLSQLWalker.g:1707:27: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_tableview_name14269);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1707:42: ( ID )+
            int cnt521=0;
            loop521:
            do {
                int alt521=2;
                int LA521_0 = input.LA(1);

                if ( (LA521_0==ID) ) {
                    alt521=1;
                }


                switch (alt521) {
            	case 1 :
            	    // PLSQLWalker.g:1707:42: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_tableview_name14272); 

            	    }
            	    break;

            	default :
            	    if ( cnt521 >= 1 ) break loop521;
                        EarlyExitException eee =
                            new EarlyExitException(521, input);
                        throw eee;
                }
                cnt521++;
            } while (true);


            // PLSQLWalker.g:1707:46: ( link_name )?
            int alt522=2;
            int LA522_0 = input.LA(1);

            if ( (LA522_0==LINK_NAME) ) {
                alt522=1;
            }
            switch (alt522) {
                case 1 :
                    // PLSQLWalker.g:1707:46: link_name
                    {
                    pushFollow(FOLLOW_link_name_in_tableview_name14275);
                    link_name();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1707:57: ( partition_extension_clause )?
            int alt523=2;
            int LA523_0 = input.LA(1);

            if ( (LA523_0==PARTITION_VK||LA523_0==SUBPARTITION_VK) ) {
                alt523=1;
            }
            switch (alt523) {
                case 1 :
                    // PLSQLWalker.g:1707:57: partition_extension_clause
                    {
                    pushFollow(FOLLOW_partition_extension_clause_in_tableview_name14278);
                    partition_extension_clause();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "tableview_name"



    // $ANTLR start "char_set_name"
    // PLSQLWalker.g:1710:1: char_set_name : ^( CHAR_SET_NAME ( ID )+ ) ;
    public final void char_set_name() throws RecognitionException {
        try {
            // PLSQLWalker.g:1711:5: ( ^( CHAR_SET_NAME ( ID )+ ) )
            // PLSQLWalker.g:1711:10: ^( CHAR_SET_NAME ( ID )+ )
            {
            match(input,CHAR_SET_NAME,FOLLOW_CHAR_SET_NAME_in_char_set_name14301); 

            match(input, Token.DOWN, null); 
            // PLSQLWalker.g:1711:26: ( ID )+
            int cnt524=0;
            loop524:
            do {
                int alt524=2;
                int LA524_0 = input.LA(1);

                if ( (LA524_0==ID) ) {
                    alt524=1;
                }


                switch (alt524) {
            	case 1 :
            	    // PLSQLWalker.g:1711:26: ID
            	    {
            	    match(input,ID,FOLLOW_ID_in_char_set_name14303); 

            	    }
            	    break;

            	default :
            	    if ( cnt524 >= 1 ) break loop524;
                        EarlyExitException eee =
                            new EarlyExitException(524, input);
                        throw eee;
                }
                cnt524++;
            } while (true);


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "char_set_name"



    // $ANTLR start "function_argument"
    // PLSQLWalker.g:1718:1: function_argument : ^( ARGUMENTS ( argument )* ) ;
    public final void function_argument() throws RecognitionException {
        try {
            // PLSQLWalker.g:1719:5: ( ^( ARGUMENTS ( argument )* ) )
            // PLSQLWalker.g:1719:10: ^( ARGUMENTS ( argument )* )
            {
            match(input,ARGUMENTS,FOLLOW_ARGUMENTS_in_function_argument14330); 

            if ( input.LA(1)==Token.DOWN ) {
                match(input, Token.DOWN, null); 
                // PLSQLWalker.g:1719:22: ( argument )*
                loop525:
                do {
                    int alt525=2;
                    int LA525_0 = input.LA(1);

                    if ( (LA525_0==ARGUMENT) ) {
                        alt525=1;
                    }


                    switch (alt525) {
                	case 1 :
                	    // PLSQLWalker.g:1719:22: argument
                	    {
                	    pushFollow(FOLLOW_argument_in_function_argument14332);
                	    argument();

                	    state._fsp--;


                	    }
                	    break;

                	default :
                	    break loop525;
                    }
                } while (true);


                match(input, Token.UP, null); 
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "function_argument"



    // $ANTLR start "argument"
    // PLSQLWalker.g:1722:1: argument : ^( ARGUMENT expression ( parameter_name )? ) ;
    public final void argument() throws RecognitionException {
        try {
            // PLSQLWalker.g:1723:5: ( ^( ARGUMENT expression ( parameter_name )? ) )
            // PLSQLWalker.g:1723:10: ^( ARGUMENT expression ( parameter_name )? )
            {
            match(input,ARGUMENT,FOLLOW_ARGUMENT_in_argument14355); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_expression_in_argument14357);
            expression();

            state._fsp--;


            // PLSQLWalker.g:1723:32: ( parameter_name )?
            int alt526=2;
            int LA526_0 = input.LA(1);

            if ( (LA526_0==PARAMETER_NAME) ) {
                alt526=1;
            }
            switch (alt526) {
                case 1 :
                    // PLSQLWalker.g:1723:32: parameter_name
                    {
                    pushFollow(FOLLOW_parameter_name_in_argument14359);
                    parameter_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "argument"



    // $ANTLR start "type_spec"
    // PLSQLWalker.g:1726:1: type_spec : ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) | ^( NATIVE_DATATYPE native_datatype_element ( type_precision )? ( TIME_VK ( LOCAL_VK )? )? ) | ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* ) );
    public final void type_spec() throws RecognitionException {
        try {
            // PLSQLWalker.g:1727:5: ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) | ^( NATIVE_DATATYPE native_datatype_element ( type_precision )? ( TIME_VK ( LOCAL_VK )? )? ) | ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* ) )
            int alt533=3;
            switch ( input.LA(1) ) {
            case CUSTOM_TYPE:
                {
                alt533=1;
                }
                break;
            case NATIVE_DATATYPE:
                {
                alt533=2;
                }
                break;
            case INTERVAL_DATATYPE:
                {
                alt533=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 533, 0, input);

                throw nvae;

            }

            switch (alt533) {
                case 1 :
                    // PLSQLWalker.g:1727:11: ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? )
                    {
                    match(input,CUSTOM_TYPE,FOLLOW_CUSTOM_TYPE_in_type_spec14383); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_type_name_in_type_spec14385);
                    type_name();

                    state._fsp--;


                    // PLSQLWalker.g:1727:35: ( REF_VK )?
                    int alt527=2;
                    int LA527_0 = input.LA(1);

                    if ( (LA527_0==REF_VK) ) {
                        alt527=1;
                    }
                    switch (alt527) {
                        case 1 :
                            // PLSQLWalker.g:1727:35: REF_VK
                            {
                            match(input,REF_VK,FOLLOW_REF_VK_in_type_spec14387); 

                            }
                            break;

                    }


                    // PLSQLWalker.g:1727:43: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )?
                    int alt528=2;
                    int LA528_0 = input.LA(1);

                    if ( ((LA528_0 >= PERCENT_ROWTYPE_VK && LA528_0 <= PERCENT_TYPE_VK)) ) {
                        alt528=1;
                    }
                    switch (alt528) {
                        case 1 :
                            // PLSQLWalker.g:
                            {
                            if ( (input.LA(1) >= PERCENT_ROWTYPE_VK && input.LA(1) <= PERCENT_TYPE_VK) ) {
                                input.consume();
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1728:10: ^( NATIVE_DATATYPE native_datatype_element ( type_precision )? ( TIME_VK ( LOCAL_VK )? )? )
                    {
                    match(input,NATIVE_DATATYPE,FOLLOW_NATIVE_DATATYPE_in_type_spec14408); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_native_datatype_element_in_type_spec14410);
                    native_datatype_element();

                    state._fsp--;


                    // PLSQLWalker.g:1728:52: ( type_precision )?
                    int alt529=2;
                    int LA529_0 = input.LA(1);

                    if ( (LA529_0==PRECISION) ) {
                        alt529=1;
                    }
                    switch (alt529) {
                        case 1 :
                            // PLSQLWalker.g:1728:52: type_precision
                            {
                            pushFollow(FOLLOW_type_precision_in_type_spec14412);
                            type_precision();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1728:68: ( TIME_VK ( LOCAL_VK )? )?
                    int alt531=2;
                    int LA531_0 = input.LA(1);

                    if ( (LA531_0==TIME_VK) ) {
                        alt531=1;
                    }
                    switch (alt531) {
                        case 1 :
                            // PLSQLWalker.g:1728:69: TIME_VK ( LOCAL_VK )?
                            {
                            match(input,TIME_VK,FOLLOW_TIME_VK_in_type_spec14416); 

                            // PLSQLWalker.g:1728:77: ( LOCAL_VK )?
                            int alt530=2;
                            int LA530_0 = input.LA(1);

                            if ( (LA530_0==LOCAL_VK) ) {
                                alt530=1;
                            }
                            switch (alt530) {
                                case 1 :
                                    // PLSQLWalker.g:1728:77: LOCAL_VK
                                    {
                                    match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_type_spec14418); 

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1729:10: ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* )
                    {
                    match(input,INTERVAL_DATATYPE,FOLLOW_INTERVAL_DATATYPE_in_type_spec14434); 

                    match(input, Token.DOWN, null); 
                    if ( input.LA(1)==DAY_VK||input.LA(1)==YEAR_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    if ( input.LA(1)==MONTH_VK||input.LA(1)==SECOND_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    // PLSQLWalker.g:1729:68: ( expression )*
                    loop532:
                    do {
                        int alt532=2;
                        int LA532_0 = input.LA(1);

                        if ( (LA532_0==EXPR||LA532_0==LOGIC_EXPR) ) {
                            alt532=1;
                        }


                        switch (alt532) {
                    	case 1 :
                    	    // PLSQLWalker.g:1729:68: expression
                    	    {
                    	    pushFollow(FOLLOW_expression_in_type_spec14448);
                    	    expression();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    break loop532;
                        }
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "type_spec"



    // $ANTLR start "type_precision"
    // PLSQLWalker.g:1732:1: type_precision : ^( PRECISION constant ( constant )? ( CHAR_VK | BYTE_VK )? ( TIME_VK ( LOCAL_VK )? )? ) ;
    public final void type_precision() throws RecognitionException {
        try {
            // PLSQLWalker.g:1733:5: ( ^( PRECISION constant ( constant )? ( CHAR_VK | BYTE_VK )? ( TIME_VK ( LOCAL_VK )? )? ) )
            // PLSQLWalker.g:1733:10: ^( PRECISION constant ( constant )? ( CHAR_VK | BYTE_VK )? ( TIME_VK ( LOCAL_VK )? )? )
            {
            match(input,PRECISION,FOLLOW_PRECISION_in_type_precision14471); 

            match(input, Token.DOWN, null); 
            pushFollow(FOLLOW_constant_in_type_precision14473);
            constant();

            state._fsp--;


            // PLSQLWalker.g:1733:31: ( constant )?
            int alt534=2;
            int LA534_0 = input.LA(1);

            if ( (LA534_0==APPROXIMATE_NUM_LIT||LA534_0==CHAR_STRING||LA534_0==DBTIMEZONE_VK||LA534_0==EXACT_NUM_LIT||LA534_0==MAXVALUE_VK||LA534_0==MINVALUE_VK||LA534_0==SESSIONTIMEZONE_VK||LA534_0==SQL92_RESERVED_DEFAULT||LA534_0==SQL92_RESERVED_FALSE||LA534_0==SQL92_RESERVED_NULL||LA534_0==SQL92_RESERVED_TRUE||LA534_0==UNSIGNED_INTEGER) ) {
                alt534=1;
            }
            switch (alt534) {
                case 1 :
                    // PLSQLWalker.g:1733:31: constant
                    {
                    pushFollow(FOLLOW_constant_in_type_precision14475);
                    constant();

                    state._fsp--;


                    }
                    break;

            }


            // PLSQLWalker.g:1733:41: ( CHAR_VK | BYTE_VK )?
            int alt535=2;
            int LA535_0 = input.LA(1);

            if ( (LA535_0==BYTE_VK||LA535_0==CHAR_VK) ) {
                alt535=1;
            }
            switch (alt535) {
                case 1 :
                    // PLSQLWalker.g:
                    {
                    if ( input.LA(1)==BYTE_VK||input.LA(1)==CHAR_VK ) {
                        input.consume();
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            // PLSQLWalker.g:1733:60: ( TIME_VK ( LOCAL_VK )? )?
            int alt537=2;
            int LA537_0 = input.LA(1);

            if ( (LA537_0==TIME_VK) ) {
                alt537=1;
            }
            switch (alt537) {
                case 1 :
                    // PLSQLWalker.g:1733:61: TIME_VK ( LOCAL_VK )?
                    {
                    match(input,TIME_VK,FOLLOW_TIME_VK_in_type_precision14486); 

                    // PLSQLWalker.g:1733:69: ( LOCAL_VK )?
                    int alt536=2;
                    int LA536_0 = input.LA(1);

                    if ( (LA536_0==LOCAL_VK) ) {
                        alt536=1;
                    }
                    switch (alt536) {
                        case 1 :
                            // PLSQLWalker.g:1733:69: LOCAL_VK
                            {
                            match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_type_precision14488); 

                            }
                            break;

                    }


                    }
                    break;

            }


            match(input, Token.UP, null); 


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "type_precision"



    // $ANTLR start "native_datatype_element"
    // PLSQLWalker.g:1736:1: native_datatype_element : ( BINARY_INTEGER_VK | PLS_INTEGER_VK | NATURAL_VK | BINARY_FLOAT_VK | BINARY_DOUBLE_VK | NATURALN_VK | POSITIVE_VK | POSITIVEN_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | NVARCHAR2_VK | DEC_VK | INTEGER_VK | INT_VK | NUMERIC_VK | SMALLINT_VK | NUMBER_VK | DECIMAL_VK | DOUBLE_VK ( PRECISION_VK )? | FLOAT_VK | REAL_VK | NCHAR_VK | LONG_VK ( RAW_VK )? | CHAR_VK | CHARACTER_VK | VARCHAR2_VK | VARCHAR_VK | STRING_VK | RAW_VK | BOOLEAN_VK | DATE_VK | ROWID_VK | UROWID_VK | YEAR_VK | MONTH_VK | DAY_VK | HOUR_VK | MINUTE_VK | SECOND_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | TIMEZONE_ABBR_VK | TIMESTAMP_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | YMINTERVAL_UNCONSTRAINED_VK | DSINTERVAL_UNCONSTRAINED_VK | BFILE_VK | BLOB_VK | CLOB_VK | NCLOB_VK | MLSLABEL_VK );
    public final void native_datatype_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1737:5: ( BINARY_INTEGER_VK | PLS_INTEGER_VK | NATURAL_VK | BINARY_FLOAT_VK | BINARY_DOUBLE_VK | NATURALN_VK | POSITIVE_VK | POSITIVEN_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | NVARCHAR2_VK | DEC_VK | INTEGER_VK | INT_VK | NUMERIC_VK | SMALLINT_VK | NUMBER_VK | DECIMAL_VK | DOUBLE_VK ( PRECISION_VK )? | FLOAT_VK | REAL_VK | NCHAR_VK | LONG_VK ( RAW_VK )? | CHAR_VK | CHARACTER_VK | VARCHAR2_VK | VARCHAR_VK | STRING_VK | RAW_VK | BOOLEAN_VK | DATE_VK | ROWID_VK | UROWID_VK | YEAR_VK | MONTH_VK | DAY_VK | HOUR_VK | MINUTE_VK | SECOND_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | TIMEZONE_ABBR_VK | TIMESTAMP_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | YMINTERVAL_UNCONSTRAINED_VK | DSINTERVAL_UNCONSTRAINED_VK | BFILE_VK | BLOB_VK | CLOB_VK | NCLOB_VK | MLSLABEL_VK )
            int alt540=54;
            switch ( input.LA(1) ) {
            case BINARY_INTEGER_VK:
                {
                alt540=1;
                }
                break;
            case PLS_INTEGER_VK:
                {
                alt540=2;
                }
                break;
            case NATURAL_VK:
                {
                alt540=3;
                }
                break;
            case BINARY_FLOAT_VK:
                {
                alt540=4;
                }
                break;
            case BINARY_DOUBLE_VK:
                {
                alt540=5;
                }
                break;
            case NATURALN_VK:
                {
                alt540=6;
                }
                break;
            case POSITIVE_VK:
                {
                alt540=7;
                }
                break;
            case POSITIVEN_VK:
                {
                alt540=8;
                }
                break;
            case SIGNTYPE_VK:
                {
                alt540=9;
                }
                break;
            case SIMPLE_INTEGER_VK:
                {
                alt540=10;
                }
                break;
            case NVARCHAR2_VK:
                {
                alt540=11;
                }
                break;
            case DEC_VK:
                {
                alt540=12;
                }
                break;
            case INTEGER_VK:
                {
                alt540=13;
                }
                break;
            case INT_VK:
                {
                alt540=14;
                }
                break;
            case NUMERIC_VK:
                {
                alt540=15;
                }
                break;
            case SMALLINT_VK:
                {
                alt540=16;
                }
                break;
            case NUMBER_VK:
                {
                alt540=17;
                }
                break;
            case DECIMAL_VK:
                {
                alt540=18;
                }
                break;
            case DOUBLE_VK:
                {
                alt540=19;
                }
                break;
            case FLOAT_VK:
                {
                alt540=20;
                }
                break;
            case REAL_VK:
                {
                alt540=21;
                }
                break;
            case NCHAR_VK:
                {
                alt540=22;
                }
                break;
            case LONG_VK:
                {
                alt540=23;
                }
                break;
            case CHAR_VK:
                {
                alt540=24;
                }
                break;
            case CHARACTER_VK:
                {
                alt540=25;
                }
                break;
            case VARCHAR2_VK:
                {
                alt540=26;
                }
                break;
            case VARCHAR_VK:
                {
                alt540=27;
                }
                break;
            case STRING_VK:
                {
                alt540=28;
                }
                break;
            case RAW_VK:
                {
                alt540=29;
                }
                break;
            case BOOLEAN_VK:
                {
                alt540=30;
                }
                break;
            case DATE_VK:
                {
                alt540=31;
                }
                break;
            case ROWID_VK:
                {
                alt540=32;
                }
                break;
            case UROWID_VK:
                {
                alt540=33;
                }
                break;
            case YEAR_VK:
                {
                alt540=34;
                }
                break;
            case MONTH_VK:
                {
                alt540=35;
                }
                break;
            case DAY_VK:
                {
                alt540=36;
                }
                break;
            case HOUR_VK:
                {
                alt540=37;
                }
                break;
            case MINUTE_VK:
                {
                alt540=38;
                }
                break;
            case SECOND_VK:
                {
                alt540=39;
                }
                break;
            case TIMEZONE_HOUR_VK:
                {
                alt540=40;
                }
                break;
            case TIMEZONE_MINUTE_VK:
                {
                alt540=41;
                }
                break;
            case TIMEZONE_REGION_VK:
                {
                alt540=42;
                }
                break;
            case TIMEZONE_ABBR_VK:
                {
                alt540=43;
                }
                break;
            case TIMESTAMP_VK:
                {
                alt540=44;
                }
                break;
            case TIMESTAMP_UNCONSTRAINED_VK:
                {
                alt540=45;
                }
                break;
            case TIMESTAMP_TZ_UNCONSTRAINED_VK:
                {
                alt540=46;
                }
                break;
            case TIMESTAMP_LTZ_UNCONSTRAINED_VK:
                {
                alt540=47;
                }
                break;
            case YMINTERVAL_UNCONSTRAINED_VK:
                {
                alt540=48;
                }
                break;
            case DSINTERVAL_UNCONSTRAINED_VK:
                {
                alt540=49;
                }
                break;
            case BFILE_VK:
                {
                alt540=50;
                }
                break;
            case BLOB_VK:
                {
                alt540=51;
                }
                break;
            case CLOB_VK:
                {
                alt540=52;
                }
                break;
            case NCLOB_VK:
                {
                alt540=53;
                }
                break;
            case MLSLABEL_VK:
                {
                alt540=54;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 540, 0, input);

                throw nvae;

            }

            switch (alt540) {
                case 1 :
                    // PLSQLWalker.g:1737:10: BINARY_INTEGER_VK
                    {
                    match(input,BINARY_INTEGER_VK,FOLLOW_BINARY_INTEGER_VK_in_native_datatype_element14512); 

                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1738:10: PLS_INTEGER_VK
                    {
                    match(input,PLS_INTEGER_VK,FOLLOW_PLS_INTEGER_VK_in_native_datatype_element14523); 

                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1739:10: NATURAL_VK
                    {
                    match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_native_datatype_element14534); 

                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:1740:10: BINARY_FLOAT_VK
                    {
                    match(input,BINARY_FLOAT_VK,FOLLOW_BINARY_FLOAT_VK_in_native_datatype_element14545); 

                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:1741:10: BINARY_DOUBLE_VK
                    {
                    match(input,BINARY_DOUBLE_VK,FOLLOW_BINARY_DOUBLE_VK_in_native_datatype_element14556); 

                    }
                    break;
                case 6 :
                    // PLSQLWalker.g:1742:10: NATURALN_VK
                    {
                    match(input,NATURALN_VK,FOLLOW_NATURALN_VK_in_native_datatype_element14567); 

                    }
                    break;
                case 7 :
                    // PLSQLWalker.g:1743:10: POSITIVE_VK
                    {
                    match(input,POSITIVE_VK,FOLLOW_POSITIVE_VK_in_native_datatype_element14578); 

                    }
                    break;
                case 8 :
                    // PLSQLWalker.g:1744:10: POSITIVEN_VK
                    {
                    match(input,POSITIVEN_VK,FOLLOW_POSITIVEN_VK_in_native_datatype_element14589); 

                    }
                    break;
                case 9 :
                    // PLSQLWalker.g:1745:10: SIGNTYPE_VK
                    {
                    match(input,SIGNTYPE_VK,FOLLOW_SIGNTYPE_VK_in_native_datatype_element14600); 

                    }
                    break;
                case 10 :
                    // PLSQLWalker.g:1746:10: SIMPLE_INTEGER_VK
                    {
                    match(input,SIMPLE_INTEGER_VK,FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_element14611); 

                    }
                    break;
                case 11 :
                    // PLSQLWalker.g:1747:10: NVARCHAR2_VK
                    {
                    match(input,NVARCHAR2_VK,FOLLOW_NVARCHAR2_VK_in_native_datatype_element14622); 

                    }
                    break;
                case 12 :
                    // PLSQLWalker.g:1748:10: DEC_VK
                    {
                    match(input,DEC_VK,FOLLOW_DEC_VK_in_native_datatype_element14633); 

                    }
                    break;
                case 13 :
                    // PLSQLWalker.g:1749:10: INTEGER_VK
                    {
                    match(input,INTEGER_VK,FOLLOW_INTEGER_VK_in_native_datatype_element14644); 

                    }
                    break;
                case 14 :
                    // PLSQLWalker.g:1750:10: INT_VK
                    {
                    match(input,INT_VK,FOLLOW_INT_VK_in_native_datatype_element14655); 

                    }
                    break;
                case 15 :
                    // PLSQLWalker.g:1751:10: NUMERIC_VK
                    {
                    match(input,NUMERIC_VK,FOLLOW_NUMERIC_VK_in_native_datatype_element14666); 

                    }
                    break;
                case 16 :
                    // PLSQLWalker.g:1752:10: SMALLINT_VK
                    {
                    match(input,SMALLINT_VK,FOLLOW_SMALLINT_VK_in_native_datatype_element14677); 

                    }
                    break;
                case 17 :
                    // PLSQLWalker.g:1753:10: NUMBER_VK
                    {
                    match(input,NUMBER_VK,FOLLOW_NUMBER_VK_in_native_datatype_element14688); 

                    }
                    break;
                case 18 :
                    // PLSQLWalker.g:1754:10: DECIMAL_VK
                    {
                    match(input,DECIMAL_VK,FOLLOW_DECIMAL_VK_in_native_datatype_element14699); 

                    }
                    break;
                case 19 :
                    // PLSQLWalker.g:1755:10: DOUBLE_VK ( PRECISION_VK )?
                    {
                    match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_element14711); 

                    // PLSQLWalker.g:1755:20: ( PRECISION_VK )?
                    int alt538=2;
                    int LA538_0 = input.LA(1);

                    if ( (LA538_0==PRECISION_VK) ) {
                        alt538=1;
                    }
                    switch (alt538) {
                        case 1 :
                            // PLSQLWalker.g:1755:20: PRECISION_VK
                            {
                            match(input,PRECISION_VK,FOLLOW_PRECISION_VK_in_native_datatype_element14713); 

                            }
                            break;

                    }


                    }
                    break;
                case 20 :
                    // PLSQLWalker.g:1756:10: FLOAT_VK
                    {
                    match(input,FLOAT_VK,FOLLOW_FLOAT_VK_in_native_datatype_element14725); 

                    }
                    break;
                case 21 :
                    // PLSQLWalker.g:1757:10: REAL_VK
                    {
                    match(input,REAL_VK,FOLLOW_REAL_VK_in_native_datatype_element14736); 

                    }
                    break;
                case 22 :
                    // PLSQLWalker.g:1758:10: NCHAR_VK
                    {
                    match(input,NCHAR_VK,FOLLOW_NCHAR_VK_in_native_datatype_element14747); 

                    }
                    break;
                case 23 :
                    // PLSQLWalker.g:1759:10: LONG_VK ( RAW_VK )?
                    {
                    match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_element14758); 

                    // PLSQLWalker.g:1759:18: ( RAW_VK )?
                    int alt539=2;
                    int LA539_0 = input.LA(1);

                    if ( (LA539_0==RAW_VK) ) {
                        alt539=1;
                    }
                    switch (alt539) {
                        case 1 :
                            // PLSQLWalker.g:1759:18: RAW_VK
                            {
                            match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_element14760); 

                            }
                            break;

                    }


                    }
                    break;
                case 24 :
                    // PLSQLWalker.g:1760:10: CHAR_VK
                    {
                    match(input,CHAR_VK,FOLLOW_CHAR_VK_in_native_datatype_element14772); 

                    }
                    break;
                case 25 :
                    // PLSQLWalker.g:1761:10: CHARACTER_VK
                    {
                    match(input,CHARACTER_VK,FOLLOW_CHARACTER_VK_in_native_datatype_element14785); 

                    }
                    break;
                case 26 :
                    // PLSQLWalker.g:1762:10: VARCHAR2_VK
                    {
                    match(input,VARCHAR2_VK,FOLLOW_VARCHAR2_VK_in_native_datatype_element14797); 

                    }
                    break;
                case 27 :
                    // PLSQLWalker.g:1763:10: VARCHAR_VK
                    {
                    match(input,VARCHAR_VK,FOLLOW_VARCHAR_VK_in_native_datatype_element14808); 

                    }
                    break;
                case 28 :
                    // PLSQLWalker.g:1764:10: STRING_VK
                    {
                    match(input,STRING_VK,FOLLOW_STRING_VK_in_native_datatype_element14819); 

                    }
                    break;
                case 29 :
                    // PLSQLWalker.g:1765:10: RAW_VK
                    {
                    match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_element14830); 

                    }
                    break;
                case 30 :
                    // PLSQLWalker.g:1766:10: BOOLEAN_VK
                    {
                    match(input,BOOLEAN_VK,FOLLOW_BOOLEAN_VK_in_native_datatype_element14841); 

                    }
                    break;
                case 31 :
                    // PLSQLWalker.g:1767:10: DATE_VK
                    {
                    match(input,DATE_VK,FOLLOW_DATE_VK_in_native_datatype_element14852); 

                    }
                    break;
                case 32 :
                    // PLSQLWalker.g:1768:10: ROWID_VK
                    {
                    match(input,ROWID_VK,FOLLOW_ROWID_VK_in_native_datatype_element14863); 

                    }
                    break;
                case 33 :
                    // PLSQLWalker.g:1769:10: UROWID_VK
                    {
                    match(input,UROWID_VK,FOLLOW_UROWID_VK_in_native_datatype_element14874); 

                    }
                    break;
                case 34 :
                    // PLSQLWalker.g:1770:10: YEAR_VK
                    {
                    match(input,YEAR_VK,FOLLOW_YEAR_VK_in_native_datatype_element14885); 

                    }
                    break;
                case 35 :
                    // PLSQLWalker.g:1771:10: MONTH_VK
                    {
                    match(input,MONTH_VK,FOLLOW_MONTH_VK_in_native_datatype_element14896); 

                    }
                    break;
                case 36 :
                    // PLSQLWalker.g:1772:10: DAY_VK
                    {
                    match(input,DAY_VK,FOLLOW_DAY_VK_in_native_datatype_element14907); 

                    }
                    break;
                case 37 :
                    // PLSQLWalker.g:1773:10: HOUR_VK
                    {
                    match(input,HOUR_VK,FOLLOW_HOUR_VK_in_native_datatype_element14918); 

                    }
                    break;
                case 38 :
                    // PLSQLWalker.g:1774:10: MINUTE_VK
                    {
                    match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_native_datatype_element14929); 

                    }
                    break;
                case 39 :
                    // PLSQLWalker.g:1775:10: SECOND_VK
                    {
                    match(input,SECOND_VK,FOLLOW_SECOND_VK_in_native_datatype_element14940); 

                    }
                    break;
                case 40 :
                    // PLSQLWalker.g:1776:10: TIMEZONE_HOUR_VK
                    {
                    match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_element14951); 

                    }
                    break;
                case 41 :
                    // PLSQLWalker.g:1777:10: TIMEZONE_MINUTE_VK
                    {
                    match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_element14962); 

                    }
                    break;
                case 42 :
                    // PLSQLWalker.g:1778:10: TIMEZONE_REGION_VK
                    {
                    match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_element14973); 

                    }
                    break;
                case 43 :
                    // PLSQLWalker.g:1779:10: TIMEZONE_ABBR_VK
                    {
                    match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_element14984); 

                    }
                    break;
                case 44 :
                    // PLSQLWalker.g:1780:10: TIMESTAMP_VK
                    {
                    match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_native_datatype_element14995); 

                    }
                    break;
                case 45 :
                    // PLSQLWalker.g:1781:10: TIMESTAMP_UNCONSTRAINED_VK
                    {
                    match(input,TIMESTAMP_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_element15006); 

                    }
                    break;
                case 46 :
                    // PLSQLWalker.g:1782:10: TIMESTAMP_TZ_UNCONSTRAINED_VK
                    {
                    match(input,TIMESTAMP_TZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_element15017); 

                    }
                    break;
                case 47 :
                    // PLSQLWalker.g:1783:10: TIMESTAMP_LTZ_UNCONSTRAINED_VK
                    {
                    match(input,TIMESTAMP_LTZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_element15028); 

                    }
                    break;
                case 48 :
                    // PLSQLWalker.g:1784:10: YMINTERVAL_UNCONSTRAINED_VK
                    {
                    match(input,YMINTERVAL_UNCONSTRAINED_VK,FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15039); 

                    }
                    break;
                case 49 :
                    // PLSQLWalker.g:1785:10: DSINTERVAL_UNCONSTRAINED_VK
                    {
                    match(input,DSINTERVAL_UNCONSTRAINED_VK,FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15050); 

                    }
                    break;
                case 50 :
                    // PLSQLWalker.g:1786:10: BFILE_VK
                    {
                    match(input,BFILE_VK,FOLLOW_BFILE_VK_in_native_datatype_element15061); 

                    }
                    break;
                case 51 :
                    // PLSQLWalker.g:1787:10: BLOB_VK
                    {
                    match(input,BLOB_VK,FOLLOW_BLOB_VK_in_native_datatype_element15072); 

                    }
                    break;
                case 52 :
                    // PLSQLWalker.g:1788:10: CLOB_VK
                    {
                    match(input,CLOB_VK,FOLLOW_CLOB_VK_in_native_datatype_element15083); 

                    }
                    break;
                case 53 :
                    // PLSQLWalker.g:1789:10: NCLOB_VK
                    {
                    match(input,NCLOB_VK,FOLLOW_NCLOB_VK_in_native_datatype_element15094); 

                    }
                    break;
                case 54 :
                    // PLSQLWalker.g:1790:10: MLSLABEL_VK
                    {
                    match(input,MLSLABEL_VK,FOLLOW_MLSLABEL_VK_in_native_datatype_element15105); 

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "native_datatype_element"



    // $ANTLR start "general_element"
    // PLSQLWalker.g:1793:1: general_element : ( ^( CASCATED_ELEMENT ( general_element )+ ) | ^( HOSTED_VARIABLE_ROUTINE_CALL routine_name function_argument ) | ^( HOSTED_VARIABLE ( char_set_name )? ( ID )+ ) | ^( ROUTINE_CALL routine_name function_argument ) | ^( ANY_ELEMENT ( char_set_name )? ( ID )+ ) );
    public final void general_element() throws RecognitionException {
        try {
            // PLSQLWalker.g:1794:5: ( ^( CASCATED_ELEMENT ( general_element )+ ) | ^( HOSTED_VARIABLE_ROUTINE_CALL routine_name function_argument ) | ^( HOSTED_VARIABLE ( char_set_name )? ( ID )+ ) | ^( ROUTINE_CALL routine_name function_argument ) | ^( ANY_ELEMENT ( char_set_name )? ( ID )+ ) )
            int alt546=5;
            switch ( input.LA(1) ) {
            case CASCATED_ELEMENT:
                {
                alt546=1;
                }
                break;
            case HOSTED_VARIABLE_ROUTINE_CALL:
                {
                alt546=2;
                }
                break;
            case HOSTED_VARIABLE:
                {
                alt546=3;
                }
                break;
            case ROUTINE_CALL:
                {
                alt546=4;
                }
                break;
            case ANY_ELEMENT:
                {
                alt546=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 546, 0, input);

                throw nvae;

            }

            switch (alt546) {
                case 1 :
                    // PLSQLWalker.g:1794:10: ^( CASCATED_ELEMENT ( general_element )+ )
                    {
                    match(input,CASCATED_ELEMENT,FOLLOW_CASCATED_ELEMENT_in_general_element15126); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1794:29: ( general_element )+
                    int cnt541=0;
                    loop541:
                    do {
                        int alt541=2;
                        int LA541_0 = input.LA(1);

                        if ( (LA541_0==ANY_ELEMENT||LA541_0==CASCATED_ELEMENT||LA541_0==HOSTED_VARIABLE||LA541_0==HOSTED_VARIABLE_ROUTINE_CALL||LA541_0==ROUTINE_CALL) ) {
                            alt541=1;
                        }


                        switch (alt541) {
                    	case 1 :
                    	    // PLSQLWalker.g:1794:29: general_element
                    	    {
                    	    pushFollow(FOLLOW_general_element_in_general_element15128);
                    	    general_element();

                    	    state._fsp--;


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt541 >= 1 ) break loop541;
                                EarlyExitException eee =
                                    new EarlyExitException(541, input);
                                throw eee;
                        }
                        cnt541++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 2 :
                    // PLSQLWalker.g:1795:10: ^( HOSTED_VARIABLE_ROUTINE_CALL routine_name function_argument )
                    {
                    match(input,HOSTED_VARIABLE_ROUTINE_CALL,FOLLOW_HOSTED_VARIABLE_ROUTINE_CALL_in_general_element15142); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_routine_name_in_general_element15144);
                    routine_name();

                    state._fsp--;


                    pushFollow(FOLLOW_function_argument_in_general_element15146);
                    function_argument();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 3 :
                    // PLSQLWalker.g:1796:10: ^( HOSTED_VARIABLE ( char_set_name )? ( ID )+ )
                    {
                    match(input,HOSTED_VARIABLE,FOLLOW_HOSTED_VARIABLE_in_general_element15159); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1796:28: ( char_set_name )?
                    int alt542=2;
                    int LA542_0 = input.LA(1);

                    if ( (LA542_0==CHAR_SET_NAME) ) {
                        alt542=1;
                    }
                    switch (alt542) {
                        case 1 :
                            // PLSQLWalker.g:1796:28: char_set_name
                            {
                            pushFollow(FOLLOW_char_set_name_in_general_element15161);
                            char_set_name();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1796:43: ( ID )+
                    int cnt543=0;
                    loop543:
                    do {
                        int alt543=2;
                        int LA543_0 = input.LA(1);

                        if ( (LA543_0==ID) ) {
                            alt543=1;
                        }


                        switch (alt543) {
                    	case 1 :
                    	    // PLSQLWalker.g:1796:43: ID
                    	    {
                    	    match(input,ID,FOLLOW_ID_in_general_element15164); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt543 >= 1 ) break loop543;
                                EarlyExitException eee =
                                    new EarlyExitException(543, input);
                                throw eee;
                        }
                        cnt543++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;
                case 4 :
                    // PLSQLWalker.g:1797:10: ^( ROUTINE_CALL routine_name function_argument )
                    {
                    match(input,ROUTINE_CALL,FOLLOW_ROUTINE_CALL_in_general_element15178); 

                    match(input, Token.DOWN, null); 
                    pushFollow(FOLLOW_routine_name_in_general_element15180);
                    routine_name();

                    state._fsp--;


                    pushFollow(FOLLOW_function_argument_in_general_element15182);
                    function_argument();

                    state._fsp--;


                    match(input, Token.UP, null); 


                    }
                    break;
                case 5 :
                    // PLSQLWalker.g:1798:10: ^( ANY_ELEMENT ( char_set_name )? ( ID )+ )
                    {
                    match(input,ANY_ELEMENT,FOLLOW_ANY_ELEMENT_in_general_element15195); 

                    match(input, Token.DOWN, null); 
                    // PLSQLWalker.g:1798:24: ( char_set_name )?
                    int alt544=2;
                    int LA544_0 = input.LA(1);

                    if ( (LA544_0==CHAR_SET_NAME) ) {
                        alt544=1;
                    }
                    switch (alt544) {
                        case 1 :
                            // PLSQLWalker.g:1798:24: char_set_name
                            {
                            pushFollow(FOLLOW_char_set_name_in_general_element15197);
                            char_set_name();

                            state._fsp--;


                            }
                            break;

                    }


                    // PLSQLWalker.g:1798:39: ( ID )+
                    int cnt545=0;
                    loop545:
                    do {
                        int alt545=2;
                        int LA545_0 = input.LA(1);

                        if ( (LA545_0==ID) ) {
                            alt545=1;
                        }


                        switch (alt545) {
                    	case 1 :
                    	    // PLSQLWalker.g:1798:39: ID
                    	    {
                    	    match(input,ID,FOLLOW_ID_in_general_element15200); 

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt545 >= 1 ) break loop545;
                                EarlyExitException eee =
                                    new EarlyExitException(545, input);
                                throw eee;
                        }
                        cnt545++;
                    } while (true);


                    match(input, Token.UP, null); 


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "general_element"



    // $ANTLR start "constant"
    // PLSQLWalker.g:1805:1: constant : ( UNSIGNED_INTEGER | EXACT_NUM_LIT | APPROXIMATE_NUM_LIT | CHAR_STRING | SQL92_RESERVED_NULL | SQL92_RESERVED_TRUE | SQL92_RESERVED_FALSE | DBTIMEZONE_VK | SESSIONTIMEZONE_VK | MINVALUE_VK | MAXVALUE_VK | SQL92_RESERVED_DEFAULT );
    public final void constant() throws RecognitionException {
        try {
            // PLSQLWalker.g:1806:5: ( UNSIGNED_INTEGER | EXACT_NUM_LIT | APPROXIMATE_NUM_LIT | CHAR_STRING | SQL92_RESERVED_NULL | SQL92_RESERVED_TRUE | SQL92_RESERVED_FALSE | DBTIMEZONE_VK | SESSIONTIMEZONE_VK | MINVALUE_VK | MAXVALUE_VK | SQL92_RESERVED_DEFAULT )
            // PLSQLWalker.g:
            {
            if ( input.LA(1)==APPROXIMATE_NUM_LIT||input.LA(1)==CHAR_STRING||input.LA(1)==DBTIMEZONE_VK||input.LA(1)==EXACT_NUM_LIT||input.LA(1)==MAXVALUE_VK||input.LA(1)==MINVALUE_VK||input.LA(1)==SESSIONTIMEZONE_VK||input.LA(1)==SQL92_RESERVED_DEFAULT||input.LA(1)==SQL92_RESERVED_FALSE||input.LA(1)==SQL92_RESERVED_NULL||input.LA(1)==SQL92_RESERVED_TRUE||input.LA(1)==UNSIGNED_INTEGER ) {
                input.consume();
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "constant"



    // $ANTLR start "id"
    // PLSQLWalker.g:1822:1: id : ( char_set_name )? ID ;
    public final void id() throws RecognitionException {
        try {
            // PLSQLWalker.g:1823:5: ( ( char_set_name )? ID )
            // PLSQLWalker.g:1823:10: ( char_set_name )? ID
            {
            // PLSQLWalker.g:1823:10: ( char_set_name )?
            int alt547=2;
            int LA547_0 = input.LA(1);

            if ( (LA547_0==CHAR_SET_NAME) ) {
                alt547=1;
            }
            switch (alt547) {
                case 1 :
                    // PLSQLWalker.g:1823:10: char_set_name
                    {
                    pushFollow(FOLLOW_char_set_name_in_id15370);
                    char_set_name();

                    state._fsp--;


                    }
                    break;

            }


            match(input,ID,FOLLOW_ID_in_id15373); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "id"

    // Delegated rules


    protected DFA297 dfa297 = new DFA297(this);
    static final String DFA297_eotS =
        "\16\uffff";
    static final String DFA297_eofS =
        "\16\uffff";
    static final String DFA297_minS =
        "\1\33\1\2\1\uffff\1\115\1\2\1\102\1\2\1\3\1\u00d2\1\115\1\3\2\uffff"+
        "\1\u00d2";
    static final String DFA297_maxS =
        "\1\u0232\1\2\1\uffff\1\115\1\2\1\u00d2\1\2\2\u00d2\1\u0206\1\u00d2"+
        "\2\uffff\1\u00d2";
    static final String DFA297_acceptS =
        "\2\uffff\1\3\10\uffff\1\1\1\2\1\uffff";
    static final String DFA297_specialS =
        "\16\uffff}>";
    static final String[] DFA297_transitionS = {
            "\1\1\u0216\uffff\1\2",
            "\1\3",
            "",
            "\1\4",
            "\1\5",
            "\1\6\u008f\uffff\1\7",
            "\1\10",
            "\1\11\u00ce\uffff\1\7",
            "\1\12",
            "\1\14\137\uffff\1\13\135\uffff\1\13\u00fa\uffff\1\14",
            "\1\15\u00ce\uffff\1\12",
            "",
            "",
            "\1\7"
    };

    static final short[] DFA297_eot = DFA.unpackEncodedString(DFA297_eotS);
    static final short[] DFA297_eof = DFA.unpackEncodedString(DFA297_eofS);
    static final char[] DFA297_min = DFA.unpackEncodedStringToUnsignedChars(DFA297_minS);
    static final char[] DFA297_max = DFA.unpackEncodedStringToUnsignedChars(DFA297_maxS);
    static final short[] DFA297_accept = DFA.unpackEncodedString(DFA297_acceptS);
    static final short[] DFA297_special = DFA.unpackEncodedString(DFA297_specialS);
    static final short[][] DFA297_transition;

    static {
        int numStates = DFA297_transitionS.length;
        DFA297_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA297_transition[i] = DFA.unpackEncodedString(DFA297_transitionS[i]);
        }
    }

    class DFA297 extends DFA {

        public DFA297(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 297;
            this.eot = DFA297_eot;
            this.eof = DFA297_eof;
            this.min = DFA297_min;
            this.max = DFA297_max;
            this.accept = DFA297_accept;
            this.special = DFA297_special;
            this.transition = DFA297_transition;
        }
        public String getDescription() {
            return "1070:1: update_set_elements : ( ^( ASSIGN column_name expression ) | ^( ASSIGN ( column_name )+ subquery ) | ^( VALUE_VK ( char_set_name )? ID expression ) );";
        }
    }
 

    public static final BitSet FOLLOW_COMPILATION_UNIT_in_compilation_unit51 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unit_statement_in_compilation_unit53 = new BitSet(new long[]{0x00000000001F2008L,0x00003FC000000000L,0x0000000007E00000L});
    public static final BitSet FOLLOW_SQL_SCRIPT_in_sql_script76 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_serveroutput_declaration_in_sql_script78 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_seq_of_statements_in_sql_script81 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration103 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_serveroutput_declaration105 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_alter_function_in_unit_statement130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_package_in_unit_statement141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_procedure_in_unit_statement152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_sequence_in_unit_statement163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_trigger_in_unit_statement174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alter_type_in_unit_statement185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_function_body_in_unit_statement196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_procedure_body_in_unit_statement207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_package_in_unit_statement218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_sequence_in_unit_statement229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_trigger_in_unit_statement240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_type_in_unit_statement251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_function_in_unit_statement262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_package_in_unit_statement273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_procedure_in_unit_statement284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_sequence_in_unit_statement295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_trigger_in_unit_statement306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_drop_type_in_unit_statement317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_FUNCTION_in_drop_function342 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_name_in_drop_function344 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALTER_FUNCTION_in_alter_function366 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_name_in_alter_function368 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_DEBUG_VK_in_alter_function370 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_REUSE_VK_in_alter_function373 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L});
    public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_function376 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L});
    public static final BitSet FOLLOW_CREATE_FUNCTION_in_create_function_body399 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_REPLACE_VK_in_create_function_body401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_function_name_in_create_function_body404 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_create_function_body406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_PARAMETERS_in_create_function_body409 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_in_create_function_body411 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_invoker_rights_clause_in_create_function_body427 = new BitSet(new long[]{0x0408000800000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000004000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_parallel_enable_clause_in_create_function_body430 = new BitSet(new long[]{0x0408000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000004000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_result_cache_clause_in_create_function_body433 = new BitSet(new long[]{0x0408000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_DETERMINISTIC_VK_in_create_function_body436 = new BitSet(new long[]{0x0408000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_USING_MODE_in_create_function_body457 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body459 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_AGGREGATE_VK_in_create_function_body462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_implementation_type_name_in_create_function_body465 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CALL_MODE_in_create_function_body486 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_call_spec_in_create_function_body491 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BODY_MODE_in_create_function_body512 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body514 = new BitSet(new long[]{0x0004000000000000L,0x0008024000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x000000000000000CL,0x0000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_declare_spec_in_create_function_body517 = new BitSet(new long[]{0x0004000000000000L,0x0008024000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x000000000000000CL,0x0000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_body_in_create_function_body520 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause568 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_partition_by_clause_in_parallel_enable_clause570 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARTITION_VK_in_partition_by_clause593 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_partition_by_clause595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause615 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_HASH_VK_in_partition_by_clause635 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause638 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_partition_by_clause640 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002000L});
    public static final BitSet FOLLOW_RANGE_VK_in_partition_by_clause663 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause666 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_partition_by_clause668 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002000L});
    public static final BitSet FOLLOW_streaming_clause_in_partition_by_clause700 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RESULT_CACHE_VK_in_result_cache_clause732 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_relies_on_part_in_result_cache_clause734 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RELIES_ON_VK_in_relies_on_part757 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tableview_name_in_relies_on_part759 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STREAMING_CLAUSE_in_streaming_clause782 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_streaming_clause784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_streaming_clause790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COLUMNS_in_streaming_clause793 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_streaming_clause795 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002000L});
    public static final BitSet FOLLOW_DROP_PACKAGE_in_drop_package824 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_package_name_in_drop_package826 = new BitSet(new long[]{0x0010000000000008L});
    public static final BitSet FOLLOW_BODY_VK_in_drop_package828 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALTER_PACKAGE_in_alter_package851 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_package_name_in_alter_package853 = new BitSet(new long[]{0x0010000000000008L,0x0000000000080000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000010000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DEBUG_VK_in_alter_package855 = new BitSet(new long[]{0x0010000000000008L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000010000L,0x0000000000000020L});
    public static final BitSet FOLLOW_REUSE_VK_in_alter_package858 = new BitSet(new long[]{0x0010000000000008L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_package887 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L});
    public static final BitSet FOLLOW_CREATE_PACKAGE_SPEC_in_create_package910 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_REPLACE_VK_in_create_package912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_package_name_in_create_package915 = new BitSet(new long[]{0x0000000800000008L,0x0008000000000000L,0x0000008000000000L,0x0000000000000020L,0x0000000000000000L,0x0400000000100000L,0x000000000000000CL,0x0000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_invoker_rights_clause_in_create_package918 = new BitSet(new long[]{0x0000000000000008L,0x0008000000000000L,0x0000008000000000L,0x0000000000000020L,0x0000000000000000L,0x0400000000000000L,0x000000000000000CL,0x0000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_package_obj_spec_in_create_package921 = new BitSet(new long[]{0x0000000000000008L,0x0008000000000000L,0x0000008000000000L,0x0000000000000020L,0x0000000000000000L,0x0400000000000000L,0x000000000000000CL,0x0000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_CREATE_PACKAGE_BODY_in_create_package936 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_REPLACE_VK_in_create_package938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_package_name_in_create_package941 = new BitSet(new long[]{0x0000000000000008L,0x0008024000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x000000000000000CL,0x4000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_package_obj_body_in_create_package944 = new BitSet(new long[]{0x0000000000000008L,0x0008024000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL,0x4000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_seq_of_statements_in_create_package947 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec1007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_spec1019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_declaration_in_package_obj_spec1031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec1043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_package_obj_spec1055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_SPEC_in_procedure_spec1077 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec1079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_PARAMETERS_in_procedure_spec1082 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_in_procedure_spec1084 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_CALL_MODE_in_procedure_spec1102 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_call_spec_in_procedure_spec1104 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNCTION_SPEC_in_function_spec1135 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_name_in_function_spec1137 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_type_spec_in_function_spec1140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_SELF_VK_in_function_spec1142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_PARAMETERS_in_function_spec1146 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_in_function_spec1148 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_CALL_MODE_in_function_spec1170 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_call_spec_in_function_spec1172 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXTERNAL_VK_in_function_spec1193 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_function_spec1195 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_body1242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body1255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body1268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_body1281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_body1294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_declaration_in_package_obj_body1306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_procedure_body_in_package_obj_body1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_function_body_in_package_obj_body1330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_PROCEDURE_in_drop_procedure1358 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_procedure_name_in_drop_procedure1360 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALTER_PROCEDURE_in_alter_procedure1382 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_procedure_name_in_alter_procedure1384 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L,0x0000000000000001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_DEBUG_VK_in_alter_procedure1386 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_REUSE_VK_in_alter_procedure1389 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L});
    public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_procedure1392 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L});
    public static final BitSet FOLLOW_CREATE_PROCEDURE_in_create_procedure_body1415 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_REPLACE_VK_in_create_procedure_body1417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_procedure_name_in_create_procedure_body1420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_PARAMETERS_in_create_procedure_body1423 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_in_create_procedure_body1425 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_invoker_rights_clause_in_create_procedure_body1429 = new BitSet(new long[]{0x0408000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_EXTERNAL_VK_in_create_procedure_body1449 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CALL_MODE_in_create_procedure_body1469 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_call_spec_in_create_procedure_body1471 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BODY_MODE_in_create_procedure_body1492 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_declare_spec_in_create_procedure_body1494 = new BitSet(new long[]{0x0004000000000000L,0x0008024000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x000000000000000CL,0x0000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_body_in_create_procedure_body1497 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DROP_TRIGGER_in_drop_trigger1547 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_trigger_name_in_drop_trigger1549 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALTER_TRIGGER_in_alter_trigger1571 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_trigger_name_in_alter_trigger1573 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L,0x0000000100004001L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010800L});
    public static final BitSet FOLLOW_set_in_alter_trigger1593 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RENAME_VK_in_alter_trigger1617 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_trigger_name_in_alter_trigger1619 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DEBUG_VK_in_alter_trigger1639 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_REUSE_VK_in_alter_trigger1642 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L});
    public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_trigger1645 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L});
    public static final BitSet FOLLOW_CREATE_TRIGGER_in_create_trigger1691 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_REPLACE_VK_in_create_trigger1693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_trigger_name_in_create_trigger1696 = new BitSet(new long[]{0x0808000000000000L,0x0000000000600000L,0x0200000100004000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x2000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_simple_dml_trigger_in_create_trigger1712 = new BitSet(new long[]{0x0808000000000000L,0x0000000000600000L,0x0200000100004000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_compound_dml_trigger_in_create_trigger1715 = new BitSet(new long[]{0x0808000000000000L,0x0000000000400000L,0x0200000100004000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_non_dml_trigger_in_create_trigger1718 = new BitSet(new long[]{0x0808000000000000L,0x0000000000400000L,0x0200000100004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_trigger_follows_clause_in_create_trigger1733 = new BitSet(new long[]{0x0808000000000000L,0x0000000000400000L,0x0000000100004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_trigger_when_clause_in_create_trigger1743 = new BitSet(new long[]{0x0808000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_trigger_body_in_create_trigger1746 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOLLOWS_VK_in_trigger_follows_clause1768 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause1770 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause1793 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_trigger_when_clause1795 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SIMPLE_DML_in_simple_dml_trigger1818 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_simple_dml_trigger1820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger1828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_referencing_clause_in_simple_dml_trigger1831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_dml_event_clause_in_simple_dml_trigger1834 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COMPOUND_DML_in_compound_dml_trigger1856 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger1858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger1861 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NON_DML_in_non_dml_trigger1883 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_non_dml_trigger1885 = new BitSet(new long[]{0x0000000410200000L,0xC200000000004000L,0x0200000000008000L,0x0000000000000000L,0x0004000000003000L,0x0000000000000000L,0x0102000200000800L,0x1000100020108080L,0x0000000100000100L});
    public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger1891 = new BitSet(new long[]{0x0000000410200000L,0xC200000000004000L,0x0200000000008000L,0x0000000000000000L,0x0004000000003000L,0x0000000000000000L,0x0102000300000800L,0x1000100020108080L,0x0000000100000100L});
    public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_trigger1895 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_schema_name_in_non_dml_trigger1897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_trigger1900 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COMPOUND_VK_in_trigger_body1923 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_trigger_name_in_trigger_body1925 = new BitSet(new long[]{0x0000030000000060L,0x0008024000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x000000000000000CL,0x0000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_declare_spec_in_trigger_body1927 = new BitSet(new long[]{0x0000030000000060L,0x0008024000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x000000000000000CL,0x0000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_timing_point_section_in_trigger_body1930 = new BitSet(new long[]{0x0000030000000068L});
    public static final BitSet FOLLOW_CALL_VK_in_trigger_body1944 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_routine_name_in_trigger_body1946 = new BitSet(new long[]{0x0000000004000008L});
    public static final BitSet FOLLOW_function_argument_in_trigger_body1948 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BODY_MODE_in_trigger_body1963 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_trigger_body1965 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BEFORE_STATEMENT_in_timing_point_section1987 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_timing_point_section1989 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BEFORE_EACH_ROW_in_timing_point_section2002 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_timing_point_section2004 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AFTER_STATEMENT_in_timing_point_section2017 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_timing_point_section2019 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AFTER_EACH_ROW_in_timing_point_section2032 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_timing_point_section2034 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event2055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANALYZE_VK_in_non_dml_event2066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSOCIATE_VK_in_non_dml_event2077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event2079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUDIT_VK_in_non_dml_event2090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_VK_in_non_dml_event2101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event2112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISASSOCIATE_VK_in_non_dml_event2123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event2125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event2136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event2147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOAUDIT_VK_in_non_dml_event2158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RENAME_VK_in_non_dml_event2169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event2180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRUNCATE_VK_in_non_dml_event2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DDL_VK_in_non_dml_event2202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STARTUP_VK_in_non_dml_event2213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SHUTDOWN_VK_in_non_dml_event2224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event2235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGON_VK_in_non_dml_event2246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGOFF_VK_in_non_dml_event2257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SERVERERROR_VK_in_non_dml_event2268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUSPEND_VK_in_non_dml_event2279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_event2290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_event2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWS_VK_in_non_dml_event2312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DML_EVENT_in_dml_event_clause2333 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause2335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause2339 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tableview_name_in_dml_event_clause2341 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_dml_event_nested_clause_in_dml_event_clause2343 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element2369 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_dml_event_element2371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COLUMNS_in_dml_event_element2380 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_dml_event_element2382 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002000L});
    public static final BitSet FOLLOW_NESTED_VK_in_dml_event_nested_clause2406 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tableview_name_in_dml_event_nested_clause2408 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_REFERENCING_VK_in_referencing_clause2430 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_referencing_element_in_referencing_clause2432 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000008000200L});
    public static final BitSet FOLLOW_set_in_referencing_element2455 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_referencing_element2463 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DROP_TYPE_in_drop_type2490 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_name_in_drop_type2492 = new BitSet(new long[]{0x0010000000000008L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_BODY_VK_in_drop_type2494 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_FORCE_VK_in_drop_type2497 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_VALIDATE_VK_in_drop_type2500 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALTER_TYPE_in_alter_type2523 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_name_in_alter_type2525 = new BitSet(new long[]{0x0000000000005800L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_REPLACE_VK_in_alter_type2546 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_OBJECT_MEMBERS_in_alter_type2549 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_element_spec_in_alter_type2551 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_invoker_rights_clause_in_alter_type2555 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALTER_ATTRIBUTE_in_alter_type2577 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_alter_type2579 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_ATTRIBUTES_in_alter_type2588 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attribute_definition_in_alter_type2590 = new BitSet(new long[]{0x0000000040000008L});
    public static final BitSet FOLLOW_ALTER_METHOD_in_alter_type2613 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alter_method_element_in_alter_type2615 = new BitSet(new long[]{0x0000000000008008L});
    public static final BitSet FOLLOW_alter_collection_clauses_in_alter_type2636 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_modifier_clause_in_alter_type2655 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_COMPILE_VK_in_alter_type2675 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_DEBUG_VK_in_alter_type2684 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_REUSE_VK_in_alter_type2687 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L});
    public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_type2690 = new BitSet(new long[]{0x0000000000000008L,0x0000000000080000L});
    public static final BitSet FOLLOW_dependent_handling_clause_in_alter_type2721 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element2755 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_alter_method_element2757 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000480000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_map_order_function_spec_in_alter_method_element2763 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_subprogram_spec_in_alter_method_element2766 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_attribute_definition2789 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_attribute_name_in_attribute_definition2791 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_attribute_definition2793 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses2816 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_TYPE_VK_in_alter_collection_clauses2837 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_spec_in_alter_collection_clauses2839 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LIMIT_VK_in_alter_collection_clauses2860 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_alter_collection_clauses2862 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause2909 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_INVALIDATE_VK_in_dependent_handling_clause2929 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CASCADE_VK_in_dependent_handling_clause2949 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CONVERT_VK_in_dependent_handling_clause2977 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause3004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INCLUDING_VK_in_dependent_handling_clause3007 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part3093 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_FORCE_VK_in_dependent_exceptions_part3095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_tableview_name_in_dependent_exceptions_part3098 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CREATE_TYPE_BODY_in_create_type3122 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_REPLACE_VK_in_create_type3124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_type_name_in_create_type3127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_TYPE_BODY_ELEMENTS_in_create_type3130 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_body_elements_in_create_type3132 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000480000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_CREATE_TYPE_SPEC_in_create_type3147 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_REPLACE_VK_in_create_type3149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_type_name_in_create_type3152 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_CHAR_STRING_in_create_type3154 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_object_type_def_in_create_type3157 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OBJECT_TYPE_DEF_in_object_type_def3180 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_object_as_part_in_object_type_def3183 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000800000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_object_under_part_in_object_type_def3185 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000800000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_invoker_rights_clause_in_object_type_def3188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000800000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_sqlj_object_type_in_object_type_def3204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_modifier_clause_in_object_type_def3207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_OBJECT_MEMBERS_in_object_type_def3211 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_element_spec_in_object_type_def3213 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_OBJECT_AS_in_object_as_part3239 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_OBJECT_VK_in_object_as_part3242 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_varray_type_def_in_object_as_part3244 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_nested_table_type_def_in_object_as_part3246 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNDER_VK_in_object_under_part3269 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_spec_in_object_under_part3271 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def3293 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_spec_in_nested_table_type_def3295 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def3297 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_JAVA_VK_in_sqlj_object_type3321 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_sqlj_object_type3323 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_set_in_sqlj_object_type3325 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_elements3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subprog_decl_in_type_in_type_body_elements3363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_map_order_func_declaration3384 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_create_function_body_in_map_order_func_declaration3390 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_subprog_decl_in_type3412 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_create_procedure_body_in_subprog_decl_in_type3435 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_create_function_body_in_subprog_decl_in_type3454 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_constructor_declaration_in_subprog_decl_in_type3473 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration3518 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_spec_in_constructor_declaration3520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_FINAL_VK_in_constructor_declaration3522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_declaration3525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_PARAMETERS_in_constructor_declaration3529 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration3531 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_CALL_MODE_in_constructor_declaration3554 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_call_spec_in_constructor_declaration3556 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BODY_MODE_in_constructor_declaration3577 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_declare_spec_in_constructor_declaration3579 = new BitSet(new long[]{0x0004000000000000L,0x0008024000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x000000000000000CL,0x0000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_body_in_constructor_declaration3582 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MODIFIER_in_modifier_clause3632 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause3634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_set_in_modifier_clause3637 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr3665 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_sqlj_object_type_attr3667 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ELEMENT_SPEC_in_element_spec3689 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_element_spec_options_in_element_spec3691 = new BitSet(new long[]{0x0000000000000008L,0x0000000008000000L,0x0008000000000000L,0x0000000000000000L,0x0000000800480000L,0x0010000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_modifier_clause_in_element_spec3694 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_pragma_clause_in_element_spec3697 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_subprogram_spec_in_element_spec_options3719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructor_spec_in_element_spec_options3730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_map_order_function_spec_in_element_spec_options3741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIELD_SPEC_in_element_spec_options3753 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_id_in_element_spec_options3755 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_element_spec_options3757 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_sqlj_object_type_attr_in_element_spec_options3759 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_subprogram_spec3782 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec3805 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_function_spec_in_subprogram_spec3824 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec3869 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_spec_in_constructor_spec3871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_FINAL_VK_in_constructor_spec3873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_spec3876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_PARAMETERS_in_constructor_spec3880 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec3882 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_constructor_call_mode_in_constructor_spec3886 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CALL_MODE_in_constructor_call_mode3909 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_call_spec_in_constructor_call_mode3911 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_map_order_function_spec3933 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_spec_in_map_order_function_spec3939 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PRAGMA_VK_in_pragma_clause3961 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_pragma_elements_in_pragma_clause3963 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L,0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_id_in_pragma_elements3985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements3996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARAMETER_in_type_elements_parameter4017 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_name_in_type_elements_parameter4019 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_type_elements_parameter4021 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DROP_SEQUENCE_in_drop_sequence4048 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_sequence_name_in_drop_sequence4050 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALTER_SEQUENCE_in_alter_sequence4072 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_sequence_name_in_alter_sequence4074 = new BitSet(new long[]{0x0200000000000000L,0x0080000000000000L,0x0000000000000000L,0x0000000001000000L,0x02D8000010100000L,0x0000000000008000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_sequence_spec_in_alter_sequence4076 = new BitSet(new long[]{0x0200000000000008L,0x0080000000000000L,0x0000000000000000L,0x0000000001000000L,0x02D8000010100000L,0x0000000000008000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_CREATE_SEQUENCE_in_create_sequence4099 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_sequence_name_in_create_sequence4101 = new BitSet(new long[]{0x0200000000000008L,0x0080000000000000L,0x0000000000000000L,0x0000000001000000L,0x02D8000010100000L,0x0000000000008000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_sequence_spec_in_create_sequence4103 = new BitSet(new long[]{0x0200000000000008L,0x0080000000000000L,0x0000000000000000L,0x0000000001000000L,0x02D8000010100000L,0x0000000000008000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_START_VK_in_sequence_spec4128 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4130 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INCREMENT_VK_in_sequence_spec4143 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4145 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAXVALUE_VK_in_sequence_spec4158 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4160 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINVALUE_VK_in_sequence_spec4173 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4175 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CACHE_VK_in_sequence_spec4188 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4190 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOMAXVALUE_VK_in_sequence_spec4202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOMINVALUE_VK_in_sequence_spec4213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CYCLE_VK_in_sequence_spec4224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOCYCLE_VK_in_sequence_spec4235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOCACHE_VK_in_sequence_spec4246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_VK_in_sequence_spec4257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOORDER_VK_in_sequence_spec4268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AUTHID_VK_in_invoker_rights_clause4295 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_invoker_rights_clause4297 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause4323 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ASSIGN_in_compiler_parameters_clause4326 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_id_in_compiler_parameters_clause4328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_compiler_parameters_clause4330 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LANGUAGE_VK_in_call_spec4353 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_java_spec_in_call_spec4357 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_c_spec_in_call_spec4361 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_JAVA_VK_in_java_spec4387 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CHAR_STRING_in_java_spec4389 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_C_VK_in_c_spec4411 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CHAR_STRING_in_c_spec4413 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_CONTEXT_VK_in_c_spec4416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_LIBRARY_VK_in_c_spec4420 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_id_in_c_spec4422 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_c_agent_in_clause_in_c_spec4425 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_c_parameters_clause_in_c_spec4428 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AGENT_VK_in_c_agent_in_clause4451 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_c_agent_in_clause4453 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_PARAMETERS_VK_in_c_parameters_clause4476 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_THREE_DOTS_in_c_parameters_clause4479 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_c_parameters_clause4481 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_PARAMETER_in_parameter4507 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_name_in_parameter4509 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000040L,0x0000001100000000L,0x0000010000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_type_spec_in_parameter4520 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_default_value_part_in_parameter4523 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DEFAULT_VALUE_in_default_value_part4546 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_default_value_part4548 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_variable_declaration_in_declare_spec4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_declare_spec4587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_declare_spec4599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_declare_spec4611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_declare_spec4623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_declare_spec4635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_declaration_in_declare_spec4647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_procedure_body_in_declare_spec4659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_function_body_in_declare_spec4671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_DECLARE_in_variable_declaration4693 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_name_in_variable_declaration4695 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_variable_declaration4697 = new BitSet(new long[]{0x0000000000000008L,0x0000000002000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_CONSTANT_VK_in_variable_declaration4699 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration4702 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_default_value_part_in_variable_declaration4705 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration4734 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_name_in_subtype_declaration4736 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_subtype_declaration4738 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration4740 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_subtype_range_in_subtype_declaration4743 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RANGE_VK_in_subtype_range4768 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_subtype_range4770 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_CURSOR_DECLARE_in_cursor_declaration4794 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_declaration4796 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L,0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_type_spec_in_cursor_declaration4798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_declaration4801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_PARAMETERS_in_cursor_declaration4805 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration4807 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_PARAMETER_in_parameter_spec4832 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_name_in_parameter_spec4834 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000040L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_parameter_spec4836 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_default_value_part_in_parameter_spec4839 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXCEPTION_DECLARE_in_exception_declaration4863 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_exception_name_in_exception_declaration4865 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PRAGMA_DECLARE_in_pragma_declaration4900 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration4920 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration4940 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration4960 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_exception_name_in_pragma_declaration4962 = new BitSet(new long[]{0x0000000001000000L,0x2000000000000008L,0x0000002000000000L,0x0000000000000000L,0x0000000010100000L,0x0000000000000000L,0x0004000000000000L,0x0001004001010000L,0x0000040000000000L});
    public static final BitSet FOLLOW_constant_in_pragma_declaration4964 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INLINE_VK_in_pragma_declaration4985 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_id_in_pragma_declaration4987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_pragma_declaration4989 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration5010 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration5012 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_id_in_pragma_declaration5015 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000004L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_record_type_dec_in_record_declaration5061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_var_dec_in_record_declaration5072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec5096 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_name_in_record_type_dec5098 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0004000000000000L,0x0000001000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_REF_VK_in_record_type_dec5100 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0004000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_record_type_dec5103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_FIELDS_in_record_type_dec5107 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_field_spec_in_record_type_dec5109 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_FIELD_SPEC_in_field_spec5133 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_field_spec5135 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000040L,0x0000001000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_type_spec_in_field_spec5137 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_field_spec5140 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_default_value_part_in_field_spec5143 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec5166 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_record_name_in_record_var_dec5168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_type_name_in_record_var_dec5170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_set_in_record_var_dec5172 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_table_type_dec_in_table_declaration5199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_var_dec_in_table_declaration5210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec5231 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_name_in_table_type_dec5233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000404000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_varray_type_def_in_table_type_dec5253 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec5272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec5276 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_spec_in_table_type_dec5278 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_table_indexed_by_part_in_table_type_dec5280 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDEXED_BY_in_table_indexed_by_part5327 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_spec_in_table_indexed_by_part5329 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def5350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_VARR_ARRAY_DEF_in_varray_type_def5354 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_varray_type_def5356 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_varray_type_def5358 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec5380 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_table_var_name_in_table_var_dec5382 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_table_var_dec5384 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATEMENTS_in_seq_of_statements5411 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_statement_in_seq_of_statements5413 = new BitSet(new long[]{0x0005000008000008L,0x0000000080010080L,0x2400180000000000L,0x0400000000000000L,0x0000000002010000L,0x1000060000000800L,0x1028080840508000L,0x0008004212020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_label_declaration_in_statement5435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_statement_in_statement5446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_statement_in_statement5457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statement5468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statement5479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statement5490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statement5501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forall_statement_in_statement5512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_statement_in_statement5523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statement5534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statement5545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_statement5556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statement_in_statement5567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_statement5578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_body_in_statement5589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement5600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LABEL_DECLARE_in_label_declaration5621 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_label_name_in_label_declaration5623 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASSIGN_in_assignment_statement5646 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_general_element_in_assignment_statement5648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_assignment_statement5650 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONTINUE_VK_in_continue_statement5672 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_label_name_in_continue_statement5674 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_general_when_in_continue_statement5677 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_general_when5700 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_general_when5702 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXIT_VK_in_exit_statement5724 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_label_name_in_exit_statement5726 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_general_when_in_exit_statement5729 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement5752 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_label_name_in_goto_statement5754 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_IF_in_if_statement5776 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_if_statement5778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement5780 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_elsif_part_in_if_statement5782 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_else_part_in_if_statement5785 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part5808 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_elsif_part5810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_seq_of_statements_in_elsif_part5812 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_else_part5834 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_seq_of_statements_in_else_part5836 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_WHILE_LOOP_in_loop_statement5858 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_label_name_in_loop_statement5860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0800000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_loop_statement5863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_seq_of_statements_in_loop_statement5865 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOR_LOOP_in_loop_statement5878 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_label_name_in_loop_statement5880 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0800000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement5883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_seq_of_statements_in_loop_statement5885 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LOOP_VK_in_loop_statement5898 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_label_name_in_loop_statement5900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_seq_of_statements_in_loop_statement5903 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDEXED_FOR_in_cursor_loop_param5927 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_index_name_in_cursor_loop_param5929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000020000L});
    public static final BitSet FOLLOW_REVERSE_VK_in_cursor_loop_param5931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SIMPLE_BOUND_in_cursor_loop_param5935 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_cursor_loop_param5937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_cursor_loop_param5939 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param5953 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_record_name_in_cursor_loop_param5955 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_loop_param5957 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_expression_list_in_cursor_loop_param5959 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param5973 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_record_name_in_cursor_loop_param5975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_loop_param5977 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FORALL_VK_in_forall_statement6001 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_index_name_in_forall_statement6003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_bounds_clause_in_forall_statement6005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010080L,0x0000080000000000L,0x0000000000000000L,0x0000000002000000L,0x0000040000000800L,0x0028080040100000L,0x0008000202020000L});
    public static final BitSet FOLLOW_sql_statement_in_forall_statement6007 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_EXCEPTIONS_VK_in_forall_statement6009 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SIMPLE_BOUND_in_bounds_clause6032 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_bounds_clause6034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_bounds_clause6036 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INDICES_BOUND_in_bounds_clause6049 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_collection_name_in_bounds_clause6051 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_between_bound_in_bounds_clause6053 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VALUES_BOUND_in_bounds_clause6067 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_index_name_in_bounds_clause6069 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound6092 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_between_bound6094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_between_bound6096 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_null_statement6117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAISE_VK_in_raise_statement6138 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_exception_name_in_raise_statement6140 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RETURN_VK_in_return_statement6163 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_return_statement6165 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ROUTINE_CALL_in_function_call6188 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_routine_name_in_function_call6190 = new BitSet(new long[]{0x0000000004000008L});
    public static final BitSet FOLLOW_function_argument_in_function_call6192 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BODY_in_body6215 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_label_name_in_body6217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_seq_of_statements_in_body6220 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_clause_in_body6222 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause6248 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_exception_handler_in_exception_clause6250 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler6273 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_exception_name_in_exception_handler6275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_seq_of_statements_in_exception_handler6278 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BLOCK_in_block6302 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_declare_spec_in_block6304 = new BitSet(new long[]{0x0004000000000000L,0x0008024000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x000000000000000CL,0x0000000000000000L,0x002000000000C080L});
    public static final BitSet FOLLOW_body_in_block6307 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_execute_immediate_in_sql_statement6332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_data_manipulation_language_statements_in_sql_statement6343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_manipulation_statements_in_sql_statement6354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_transaction_control_statements_in_sql_statement6365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXECUTE_VK_in_execute_immediate6386 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_execute_immediate6388 = new BitSet(new long[]{0x0080000000000008L,0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_into_clause_in_execute_immediate6391 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_using_clause_in_execute_immediate6393 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate6395 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause6421 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_into_clause_in_dynamic_returning_clause6423 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_merge_statement_in_data_manipulation_language_statements6448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_data_manipulation_language_statements6459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_statement_in_data_manipulation_language_statements6470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_statement_in_data_manipulation_language_statements6482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_statement_in_data_manipulation_language_statements6494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_statement_in_data_manipulation_language_statements6505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_STATEMENT_in_select_statement6526 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_subquery_factoring_clause_in_select_statement6528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_select_statement6531 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040004000000L});
    public static final BitSet FOLLOW_for_update_clause_in_select_statement6533 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040004000000L});
    public static final BitSet FOLLOW_order_by_clause_in_select_statement6536 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause6562 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause6564 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_FACTORING_in_factoring_element6587 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_query_name_in_factoring_element6589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_factoring_element6591 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUBQUERY_in_subquery6613 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_subquery_basic_elements_in_subquery6615 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0002000400000000L});
    public static final BitSet FOLLOW_subquery_operation_part_in_subquery6617 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0002000400000000L});
    public static final BitSet FOLLOW_set_in_subquery_operation_part6640 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part6648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_basic_elements_in_subquery_operation_part6651 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_query_block_in_subquery_basic_elements6672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_in_subquery_basic_elements6683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_SELECT_in_query_block6704 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_from_clause_in_query_block6719 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0004000000080040L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_query_block6741 = new BitSet(new long[]{0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_query_block6762 = new BitSet(new long[]{0x0080000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x00400008C0000000L});
    public static final BitSet FOLLOW_SELECT_LIST_in_query_block6782 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_selected_element_in_query_block6784 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_into_clause_in_query_block6814 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x00400000C0000000L});
    public static final BitSet FOLLOW_where_clause_in_query_block6817 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_query_block6820 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_group_by_clause_in_query_block6836 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_having_clause_in_query_block6839 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_model_clause_in_query_block6842 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SELECT_ITEM_in_selected_element6874 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_selected_element6876 = new BitSet(new long[]{0x0000000000000408L});
    public static final BitSet FOLLOW_alias_in_selected_element6878 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_from_clause6901 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_table_ref_in_from_clause6903 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_TABLE_REF_in_table_ref6926 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_table_ref_aux_in_table_ref6928 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_join_clause_in_table_ref6930 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux6953 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_table_ref_aux6955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux6958 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000400L,0x0000000000000000L,0x0000000000000400L,0x0200020000000000L});
    public static final BitSet FOLLOW_ONLY_VK_in_table_ref_aux6960 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000000000000400L,0x0200020000000000L});
    public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux6963 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0200020000000000L});
    public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux6966 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0200000000000000L});
    public static final BitSet FOLLOW_flashback_query_clause_in_table_ref_aux6969 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0200000000000000L});
    public static final BitSet FOLLOW_JOIN_DEF_in_join_clause6992 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_table_ref_aux_in_join_clause7012 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008010000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_query_partition_clause_in_join_clause7014 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008010000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_join_on_part_in_join_clause7018 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_join_using_part_in_join_clause7020 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_join_on_part7045 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_join_on_part7047 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part7070 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_join_using_part7072 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002000L});
    public static final BitSet FOLLOW_PARTITION_VK_in_query_partition_clause7095 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_list_in_query_partition_clause7098 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_query_partition_clause7100 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_set_in_flashback_query_clause7124 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_flashback_query_clause7137 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PIVOT_VK_in_pivot_clause7160 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_XML_VK_in_pivot_clause7162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_pivot_element_in_pivot_clause7165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_pivot_for_clause_in_pivot_clause7168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_pivot_in_clause_in_pivot_clause7170 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PIVOT_ELEMENT_in_pivot_element7192 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_pivot_element7194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_pivot_element7197 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause7219 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_pivot_for_clause7221 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause7244 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_subquery_in_pivot_in_clause7260 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ANY_MODE_in_pivot_in_clause7276 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause7278 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ELEMENTS_MODE_in_pivot_in_clause7296 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause7298 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element7341 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_pivot_in_clause_element7343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000600000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_pivot_in_clause_element7347 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_list_in_pivot_in_clause_element7349 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNPIVOT_VK_in_unpivot_clause7372 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_unpivot_clause7375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_NULLS_VK_in_unpivot_clause7381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_column_name_in_unpivot_clause7386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_pivot_for_clause_in_unpivot_clause7389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_unpivot_in_clause_in_unpivot_clause7391 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause7413 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_unpivot_in_element_in_unpivot_in_clause7415 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element7438 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_unpivot_in_element7440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_PIVOT_ALIAS_in_unpivot_in_element7444 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_unpivot_in_element7447 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_list_in_unpivot_in_element7449 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_HIERARCHICAL_in_hierarchical_query_clause7473 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause7475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause7479 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause7481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_hierarchical_query_clause7484 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_start_part7507 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_start_part7509 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause7531 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_group_by_element_in_group_by_clause7533 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_GROUP_BY_ELEMENT_in_group_by_element7556 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_group_by_elements_in_group_by_element7558 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GROUPING_VK_in_group_by_elements7580 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_groupin_set_in_group_by_elements7582 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_grouping_element_in_group_by_elements7595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUPIN_SET_in_groupin_set7617 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_grouping_element_in_groupin_set7619 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_grouping_element7641 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_grouping_element_in_grouping_element7647 = new BitSet(new long[]{0x0000000000000008L,0x0000800000000000L,0x0000600000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_expression_list_in_grouping_element7660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_grouping_element7671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_HAVING_in_having_clause7693 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_having_clause7695 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause7717 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_main_model_in_model_clause7719 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0200000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L,0x0004000000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_model_clause7721 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0200000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L,0x0004000000000000L});
    public static final BitSet FOLLOW_return_rows_clause_in_model_clause7724 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_reference_model_in_model_clause7727 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_set_in_cell_reference_options7750 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NAV_VK_in_cell_reference_options7756 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options7769 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_cell_reference_options7771 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RETURN_VK_in_return_rows_clause7797 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_return_rows_clause7799 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_REFERENCE_VK_in_reference_model7825 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_reference_model_name_in_reference_model7827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_reference_model7829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_model_column_clauses_in_reference_model7831 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0200000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_reference_model7833 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0200000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_MAIN_MODEL_in_main_model7856 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_main_model_name_in_main_model7858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_model_column_clauses_in_main_model7861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_model_rules_clause_in_main_model7863 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0200000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_main_model7865 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0200000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column_clauses7888 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_DIMENSION_VK_in_model_column_clauses7891 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_model_column_list_in_model_column_clauses7893 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MEASURES_VK_in_model_column_clauses7897 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_model_column_list_in_model_column_clauses7899 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_model_column_partition_part_in_model_column_clauses7902 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PARTITION_VK_in_model_column_partition_part7925 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_model_column_list_in_model_column_partition_part7927 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MODEL_COLUMNS_in_model_column_list7949 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_model_column_in_model_column_list7951 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column7974 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_model_column7976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_model_column7979 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MODEL_RULES_in_model_rules_clause8002 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause8004 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_model_rules_part_in_model_rules_clause8007 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RULES_VK_in_model_rules_part8030 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part8046 = new BitSet(new long[]{0x0000001000000008L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_part8048 = new BitSet(new long[]{0x0000001000000008L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part8050 = new BitSet(new long[]{0x0000001000000008L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_model_iterate_clause_in_model_rules_part8088 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MODEL_RULE_in_model_rules_element8120 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ASSIGN_in_model_rules_element8136 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_model_expression_in_model_rules_element8138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_model_rules_element8140 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element8157 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_element8159 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000040L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element8161 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_order_by_clause_in_model_rules_element8179 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ITERATE_VK_in_model_iterate_clause8211 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_model_iterate_clause8213 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_until_part_in_model_iterate_clause8215 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNTIL_VK_in_until_part8238 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_until_part8240 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause8262 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SIBLINGS_VK_in_order_by_clause8264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause8268 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_order_by_elements_in_order_by_clause8270 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements8294 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_order_by_elements8296 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L,0x0000000000000000L,0x0000000000040800L});
    public static final BitSet FOLLOW_NULLS_VK_in_order_by_elements8306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_set_in_order_by_elements8308 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause8336 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_for_update_of_part_in_for_update_clause8338 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_for_update_options_in_for_update_clause8341 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part8364 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_for_update_of_part8366 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002000L});
    public static final BitSet FOLLOW_SKIP_VK_in_for_update_options8388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options8399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WAIT_VK_in_for_update_options8411 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_for_update_options8413 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement8437 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_general_table_ref_in_update_statement8439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_update_set_clause_in_update_statement8453 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_where_clause_in_update_statement8467 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_static_returning_clause_in_update_statement8470 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_error_logging_clause_in_update_statement8473 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SET_VK_in_update_set_clause8506 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_update_set_elements_in_update_set_clause8508 = new BitSet(new long[]{0x0000000008000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_update_set_elements8531 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_update_set_elements8533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_update_set_elements8535 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASSIGN_in_update_set_elements8548 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_update_set_elements8550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_subquery_in_update_set_elements8553 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VALUE_VK_in_update_set_elements8566 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_update_set_elements8568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_update_set_elements8571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_update_set_elements8573 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement8597 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_general_table_ref_in_delete_statement8599 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x8040000000000000L});
    public static final BitSet FOLLOW_where_clause_in_delete_statement8613 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_static_returning_clause_in_delete_statement8616 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_error_logging_clause_in_delete_statement8619 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement8642 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_single_table_insert_in_insert_statement8657 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_multi_table_insert_in_insert_statement8672 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert8715 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_insert_into_clause_in_single_table_insert8717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_values_clause_in_single_table_insert8720 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_static_returning_clause_in_single_table_insert8722 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_select_statement_in_single_table_insert8726 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_error_logging_clause_in_single_table_insert8729 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert8752 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_select_statement_in_multi_table_insert8754 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_conditional_insert_clause_in_multi_table_insert8757 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_multi_table_element_in_multi_table_insert8759 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_TABLE_ELEMENT_in_multi_table_element8783 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_insert_into_clause_in_multi_table_element8785 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_values_clause_in_multi_table_element8787 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_error_logging_clause_in_multi_table_element8790 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause8813 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_conditional_insert_when_part_in_conditional_insert_clause8822 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000200000L});
    public static final BitSet FOLLOW_conditional_insert_else_part_in_conditional_insert_clause8825 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part8849 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_conditional_insert_when_part8851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_when_part8853 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part8876 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_else_part8878 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause8901 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_general_table_ref_in_insert_into_clause8903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_COLUMNS_in_insert_into_clause8906 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_insert_into_clause8908 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_VALUES_in_values_clause8932 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_list_in_values_clause8934 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MERGE_VK_in_merge_statement8957 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_merge_statement8959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_tableview_name_in_merge_statement8962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement8978 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_selected_tableview_in_merge_statement8980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_merge_statement8982 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_merge_update_clause_in_merge_statement8998 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000804000L});
    public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement9001 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_error_logging_clause_in_merge_statement9004 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MERGE_UPDATE_in_merge_update_clause9029 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_merge_element_in_merge_update_clause9031 = new BitSet(new long[]{0x0000000008000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000020000L});
    public static final BitSet FOLLOW_where_clause_in_merge_update_clause9034 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_merge_update_delete_part_in_merge_update_clause9037 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASSIGN_in_merge_element9060 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_merge_element9062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_merge_element9064 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part9086 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_where_clause_in_merge_update_delete_part9088 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MERGE_INSERT_in_merge_insert_clause9110 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_COLUMNS_in_merge_insert_clause9113 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_merge_insert_clause9115 = new BitSet(new long[]{0x0000000000000008L,0x0000000000002000L});
    public static final BitSet FOLLOW_expression_list_in_merge_insert_clause9119 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_where_clause_in_merge_insert_clause9121 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview9145 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_selected_tableview9147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_tableview_name_in_selected_tableview9151 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_subquery_in_selected_tableview9153 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement9178 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement9180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000210000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_lock_mode_in_lock_table_statement9183 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_wait_nowait_part_in_lock_table_statement9185 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_WAIT_VK_in_wait_nowait_part9208 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_wait_nowait_part9210 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part9222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element9245 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tableview_name_in_lock_table_element9247 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_partition_extension_clause_in_lock_table_element9249 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ROW_VK_in_lock_mode9271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROW_VK_in_lock_mode9284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode9299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_ROW_VK_in_lock_mode9313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_REF_in_general_table_ref9350 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_alias_in_general_table_ref9352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref9355 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ONLY_VK_in_general_table_ref9357 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STATIC_RETURNING_in_static_returning_clause9380 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_static_returning_clause9382 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_into_clause_in_static_returning_clause9385 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LOG_VK_in_error_logging_clause9407 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_error_logging_into_part_in_error_logging_clause9409 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_error_logging_clause9412 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_error_logging_reject_part_in_error_logging_clause9415 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part9438 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tableview_name_in_error_logging_into_part9440 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_REJECT_VK_in_error_logging_reject_part9462 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_UNLIMITED_VK_in_error_logging_reject_part9465 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_error_logging_reject_part9467 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause9490 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause9507 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_dml_table_expression_clause9509 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_PLUS_SIGN_in_dml_table_expression_clause9511 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SELECT_MODE_in_dml_table_expression_clause9529 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_select_statement_in_dml_table_expression_clause9531 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause9533 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIRECT_MODE_in_dml_table_expression_clause9551 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tableview_name_in_dml_table_expression_clause9553 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_sample_clause_in_dml_table_expression_clause9555 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause9598 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_READ_VK_in_subquery_restriction_clause9601 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause9603 = new BitSet(new long[]{0x0000000000000008L,0x0000000004000000L});
    public static final BitSet FOLLOW_constraint_name_in_subquery_restriction_clause9605 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SAMPLE_VK_in_sample_clause9629 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_BLOCK_VK_in_sample_clause9631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_sample_clause9634 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_seed_part_in_sample_clause9636 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SEED_VK_in_seed_part9660 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_seed_part9662 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_close_statement_in_cursor_manipulation_statements9689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_cursor_manipulation_statements9700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_cursor_manipulation_statements9711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_for_statement_in_cursor_manipulation_statements9722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOSE_VK_in_close_statement9744 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_name_in_close_statement9746 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OPEN_VK_in_open_statement9769 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cursor_name_in_open_statement9771 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_expression_list_in_open_statement9773 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement9796 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_cursor_name_in_fetch_statement9798 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_fetch_statement9819 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_name_in_fetch_statement9821 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_BULK_VK_in_fetch_statement9843 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_name_in_fetch_statement9845 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_OPEN_VK_in_open_for_statement9892 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_name_in_open_for_statement9894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_expression_in_open_for_statement9897 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_select_statement_in_open_for_statement9899 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_open_for_statement9902 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_transaction_command_in_transaction_control_statements9928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_constraint_command_in_transaction_control_statements9939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_transaction_control_statements9950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_transaction_control_statements9961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_transaction_control_statements9972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_TRANSACTION_in_set_transaction_command9993 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CHAR_STRING_in_set_transaction_command9995 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_READ_VK_in_set_transaction_command10016 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_set_transaction_command10018 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ISOLATION_VK_in_set_transaction_command10043 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_set_transaction_command10045 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ROLLBACK_VK_in_set_transaction_command10070 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_rollback_segment_name_in_set_transaction_command10072 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SET_CONSTRAINT_in_set_constraint_command10119 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command10122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000100000L});
    public static final BitSet FOLLOW_constraint_name_in_set_constraint_command10124 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000000000000080L,0x0000000000100000L});
    public static final BitSet FOLLOW_set_in_set_constraint_command10128 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COMMIT_VK_in_commit_statement10155 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_WORK_VK_in_commit_statement10157 = new BitSet(new long[]{0x0000000000000008L,0x0000000000004000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_COMMENT_VK_in_commit_statement10179 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_commit_statement10181 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FORCE_VK_in_commit_statement10202 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CORRUPT_XID_VK_in_commit_statement10205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_commit_statement10207 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CORRUPT_XID_ALL_VK_in_commit_statement10209 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_commit_statement10211 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_commit_statement10213 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_write_clause_in_commit_statement10245 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_WRITE_VK_in_write_clause10277 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ROLLBACK_VK_in_rollback_statement10314 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_WORK_VK_in_rollback_statement10316 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_rollback_statement10338 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_savepoint_name_in_rollback_statement10340 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FORCE_VK_in_rollback_statement10361 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_CHAR_STRING_in_rollback_statement10363 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SAVEPOINT_VK_in_savepoint_statement10410 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement10412 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXPR_LIST_in_expression_list10439 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_expression_list10441 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_LOGIC_EXPR_in_expression10464 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression10466 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_EXPR_in_expression10479 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression10481 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_OR_in_expression_element10503 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10505 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10507 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_AND_in_expression_element10520 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10522 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10524 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_expression_element10537 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10539 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_expression_element10552 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10566 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10568 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_NOT_NULL_in_expression_element10582 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10584 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_NULL_in_expression_element10597 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10599 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_NOT_NAN_in_expression_element10612 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10614 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_NAN_in_expression_element10627 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10629 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_NOT_PRESENT_in_expression_element10642 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10644 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_PRESENT_in_expression_element10657 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10659 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_NOT_INFINITE_in_expression_element10672 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10674 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_INFINITE_in_expression_element10687 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10689 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_NOT_A_SET_in_expression_element10702 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10704 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_A_SET_in_expression_element10717 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10719 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_NOT_EMPTY_in_expression_element10732 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10734 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_EMPTY_in_expression_element10747 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10749 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IS_NOT_OF_TYPE_in_expression_element10762 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10764 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_expression_element10766 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_IS_OF_TYPE_in_expression_element10780 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10782 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_expression_element10784 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_set_in_expression_element10799 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10805 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10807 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_IN_in_expression_element10821 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_in_elements_in_expression_element10825 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_expression_element10838 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_in_elements_in_expression_element10842 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_BETWEEN_in_expression_element10855 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10857 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10859 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10861 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element10874 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10876 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10878 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10880 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_LIKE_in_expression_element10893 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10895 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10897 = new BitSet(new long[]{0x4000000021400008L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10899 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_expression_element10913 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10923 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10925 = new BitSet(new long[]{0x4000000021400008L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10927 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONCATENATION_OP_in_expression_element10942 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10944 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10946 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PLUS_SIGN_in_expression_element10959 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10961 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10963 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_expression_element10976 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10978 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10980 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASTERISK_in_expression_element10993 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10995 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element10997 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SOLIDUS_in_expression_element11010 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element11012 = new BitSet(new long[]{0x4000000021400000L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_expression_element_in_expression_element11014 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_UNARY_OPERATOR_in_expression_element11028 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element11030 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element11043 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element11045 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NEW_VK_in_expression_element11058 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_expression_element11060 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element11073 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element11075 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STANDARD_FUNCTION_in_expression_element11088 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_standard_function_in_expression_element11090 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_expression_element11103 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element11113 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VECTOR_EXPR_in_expression_element11126 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element11128 = new BitSet(new long[]{0x4000000021400008L,0x2400000000800008L,0x0000002800080000L,0x023FFF00000140C0L,0x7802000114500076L,0x0001000000000000L,0x1004000800400000L,0x08010A7101891358L,0x0100041000000050L});
    public static final BitSet FOLLOW_DATETIME_OP_in_expression_element11143 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element11145 = new BitSet(new long[]{0x0000000200000000L,0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_datetime_element_in_expression_element11147 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_model_expression_in_expression_element11159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KEEP_VK_in_expression_element11171 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_expression_element11173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DENSE_RANK_VK_in_expression_element11175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_set_in_expression_element11177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_order_by_clause_in_expression_element11183 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_over_clause_in_expression_element11185 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DOT_ASTERISK_in_expression_element11200 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_tableview_name_in_expression_element11202 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_case_statement_in_expression_element11215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_expression_element11226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_general_element_in_expression_element11237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_in_expression_element11248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_in_in_elements11268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_in_elements11279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_VK_in_datetime_element11300 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_datetime_element11302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_LOCAL_VK_in_datetime_element11305 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TIME_VK_in_datetime_element11307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_datetime_element11309 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DAY_VK_in_datetime_element11323 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SECOND_VK_in_datetime_element11325 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_datetime_element11327 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_YEAR_VK_in_datetime_element11341 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_MONTH_VK_in_datetime_element11343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_datetime_element11345 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MODEL_EXPRESSION_in_model_expression11367 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_element_in_model_expression11369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xC000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_model_expression_element_in_model_expression11371 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0xC000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element11393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_model_expression_element11404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element11416 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_model_expression_element11418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000001000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800108000000L});
    public static final BitSet FOLLOW_for_single_column_element_in_model_expression_element11420 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_for_like_part_in_model_expression_element11422 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element11436 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_model_expression_element11438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_model_expression_element11442 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_subquery_in_model_expression_element11445 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_list_in_model_expression_element11447 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element11472 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_list_in_for_single_column_element11474 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element11487 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_for_single_column_element11489 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element11503 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_for_single_column_element11505 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_for_single_column_element11519 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_for_single_column_element11525 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part11548 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_for_like_part11550 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SIMPLE_CASE_in_case_statement11572 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_label_name_in_case_statement11574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0800000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_case_statement11577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_case_when_part_in_case_statement11579 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000200000L});
    public static final BitSet FOLLOW_case_else_part_in_case_statement11582 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SEARCHED_CASE_in_case_statement11598 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_label_name_in_case_statement11600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_case_when_part_in_case_statement11603 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000200000L});
    public static final BitSet FOLLOW_case_else_part_in_case_statement11606 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part11632 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_case_when_part11634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_seq_of_statements_in_case_when_part11637 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_case_when_part11639 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part11662 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_seq_of_statements_in_case_else_part11665 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_case_else_part11667 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function11691 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_argument_in_standard_function11693 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11695 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNCTION_ENABLING_USING_in_standard_function11709 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_argument_in_standard_function11711 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_standard_function11713 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COUNT_VK_in_standard_function11727 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ASTERISK_in_standard_function11731 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_expression_in_standard_function11735 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11739 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_standard_function11753 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_subquery_in_standard_function11760 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_expression_in_standard_function11762 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_standard_function11765 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CHR_VK_in_standard_function11778 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function11780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_NCHAR_CS_VK_in_standard_function11782 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COLLECT_VK_in_standard_function11795 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_column_name_in_standard_function11804 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_collect_order_by_part_in_standard_function11806 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function11820 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_function_argument_in_standard_function11822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_within_clause_in_standard_function11825 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11827 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_DECOMPOSE_VK_in_standard_function11843 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function11845 = new BitSet(new long[]{0x1000000000000008L,0x0000000000020000L});
    public static final BitSet FOLLOW_EXTRACT_VK_in_standard_function11866 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_REGULAR_ID_in_standard_function11868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_standard_function11870 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_standard_function11883 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function11889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080001L});
    public static final BitSet FOLLOW_NULLS_VK_in_standard_function11891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_over_clause_in_standard_function11894 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PREDICTION_FUNCTION_in_standard_function11908 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function11910 = new BitSet(new long[]{0x0000000000000008L,0x0000001000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000008000000000L});
    public static final BitSet FOLLOW_cost_matrix_clause_in_standard_function11913 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_using_clause_in_standard_function11916 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TRANSLATE_VK_in_standard_function11930 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function11932 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000002L,0x0000200000000000L,0x0000000000000000L,0x0000100000000800L});
    public static final BitSet FOLLOW_expression_in_standard_function11941 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_TREAT_VK_in_standard_function11955 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function11957 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_REF_VK_in_standard_function11959 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_type_spec_in_standard_function11962 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TRIM_VK_in_standard_function11975 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function11986 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_standard_function11988 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XMLAGG_VK_in_standard_function12004 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function12006 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_order_by_clause_in_standard_function12008 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_standard_function12022 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function12028 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_XMLEXISTS_VK_in_standard_function12042 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function12044 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12046 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XMLPARSE_VK_in_standard_function12060 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_standard_function12062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_standard_function12068 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_WELLFORMED_VK_in_standard_function12070 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XMLQUERY_VK_in_standard_function12084 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function12086 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12088 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_standard_function12091 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XMLROOT_VK_in_standard_function12105 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function12107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_param_version_part_in_standard_function12109 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_standard_function12111 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XMLTABLE_VK_in_standard_function12125 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_xml_namespaces_clause_in_standard_function12127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_standard_function12130 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12132 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_xml_table_column_in_standard_function12135 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_XMLELEMENT_VK_in_standard_function12149 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_standard_function12189 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_xml_attributes_clause_in_standard_function12203 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_standard_function12207 = new BitSet(new long[]{0x0000000000000408L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_alias_in_standard_function12209 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_XMLPI_VK_in_standard_function12234 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NAME_VK_in_standard_function12257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_char_set_name_in_standard_function12259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_standard_function12262 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function12285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_standard_function12287 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_standard_function12323 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XMLSERIALIZE_VK_in_standard_function12346 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_standard_function12364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_standard_function12386 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000200000000L,0x0000001002001000L,0x8000010000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_type_spec_in_standard_function12388 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000002001000L,0x8000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_standard_function12407 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000002001000L,0x8000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_xml_param_version_part_in_standard_function12426 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000002001000L,0x8000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_standard_function12445 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_set_in_standard_function12465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DEFAULTS_VK_in_standard_function12471 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OVER_VK_in_over_clause12504 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_query_partition_clause_in_over_clause12506 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_order_by_clause_in_over_clause12510 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_windowing_clause_in_over_clause12512 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_windowing_clause12537 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause12561 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_windowing_elements_in_windowing_clause12563 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_windowing_elements_in_windowing_clause12565 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_windowing_elements_in_windowing_clause12585 = new BitSet(new long[]{0x0000000000000008L,0x0002000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_UNBOUNDED_VK_in_windowing_elements12631 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements12633 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CURRENT_VK_in_windowing_elements12646 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ROW_VK_in_windowing_elements12648 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_windowing_elements12661 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_windowing_elements12667 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause12689 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_using_element_in_using_clause12691 = new BitSet(new long[]{0x0000000020000008L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ELEMENT_in_using_element12714 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_using_element12716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000020000L});
    public static final BitSet FOLLOW_OUT_VK_in_using_element12719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_using_element12722 = new BitSet(new long[]{0x0000000000000408L});
    public static final BitSet FOLLOW_alias_in_using_element12724 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASTERISK_in_using_element12737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part12758 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_collect_order_by_part12760 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_WITHIN_VK_in_within_clause12782 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_order_by_clause_in_within_clause12784 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COST_VK_in_cost_matrix_clause12806 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause12825 = new BitSet(new long[]{0x0000004000000008L});
    public static final BitSet FOLLOW_AUTO_VK_in_cost_matrix_clause12827 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause12847 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_expression_list_in_cost_matrix_clause12850 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PASSING_VK_in_xml_passing_clause12895 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_VALUE_VK_in_xml_passing_clause12897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_xml_passing_clause12900 = new BitSet(new long[]{0x0000000000000408L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_alias_in_xml_passing_clause12902 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_xml_passing_clause12906 = new BitSet(new long[]{0x0000000000000408L});
    public static final BitSet FOLLOW_alias_in_xml_passing_clause12908 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause12933 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause12985 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause13017 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_xml_namespaces_clause13032 = new BitSet(new long[]{0x0000000000000408L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_alias_in_xml_namespaces_clause13034 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_xml_general_default_part_in_xml_namespaces_clause13039 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XML_COLUMN_in_xml_table_column13071 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_xml_column_name_in_xml_table_column13073 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000010000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_ORDINALITY_VK_in_xml_table_column13076 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_type_spec_in_xml_table_column13078 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_expression_in_xml_table_column13080 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_xml_general_default_part_in_xml_table_column13083 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part13108 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_xml_general_default_part13110 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element13132 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_xml_multiuse_expression_element13134 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_xml_alias_in_xml_multiuse_expression_element13136 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias13159 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_xml_alias13161 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias13174 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_EVALNAME_VK_in_xml_alias13177 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_xml_alias13179 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_VERSION_VK_in_xml_param_version_part13202 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_NO_VK_in_xml_param_version_part13205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_VALUE_VK_in_xml_param_version_part13207 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_expression_in_xml_param_version_part13209 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part13232 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_YES_VK_in_xmlroot_param_standalone_part13235 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NO_VK_in_xmlroot_param_standalone_part13237 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part13239 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part13263 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_xmlserialize_param_enconding_part13265 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NO_VK_in_xmlserialize_param_ident_part13286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13300 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_xmlserialize_param_ident_part13302 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_set_in_partition_extension_clause13329 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_list_in_partition_extension_clause13335 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ALIAS_in_alias13357 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_alias13359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_alias13362 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_WHERE_in_where_clause13384 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_where_clause13386 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_into_clause13408 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_name_in_into_clause13410 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_BULK_VK_in_into_clause13425 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_variable_name_in_into_clause13427 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_XML_COLUMN_NAME_in_xml_column_name13455 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_xml_column_name13457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_xml_column_name13460 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COST_CLASS_NAME_in_cost_class_name13482 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_cost_class_name13484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_cost_class_name13487 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ATTRIBUTE_NAME_in_attribute_name13509 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_attribute_name13511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_attribute_name13514 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SAVEPOINT_NAME_in_savepoint_name13536 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_savepoint_name13538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_savepoint_name13541 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name13563 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_rollback_segment_name13565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_rollback_segment_name13568 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TABLE_VAR_NAME_in_table_var_name13591 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_table_var_name13593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_table_var_name13596 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SCHEMA_NAME_in_schema_name13618 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_schema_name13620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_schema_name13623 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ROUTINE_NAME_in_routine_name13645 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_routine_name13647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_routine_name13650 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000100L});
    public static final BitSet FOLLOW_link_name_in_routine_name13653 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PACKAGE_NAME_in_package_name13676 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_package_name13678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_package_name13681 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name13703 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_implementation_type_name13705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_implementation_type_name13708 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_PARAMETER_NAME_in_parameter_name13731 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_parameter_name13733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_parameter_name13736 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name13758 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_reference_model_name13760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_reference_model_name13763 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MAIN_MODEL_NAME_in_main_model_name13785 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_main_model_name13787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_main_model_name13790 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_QUERY_NAME_in_query_name13812 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_query_name13814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_query_name13817 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CONSTRAINT_NAME_in_constraint_name13839 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_constraint_name13841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_constraint_name13844 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000100L});
    public static final BitSet FOLLOW_link_name_in_constraint_name13847 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_LABEL_NAME_in_label_name13870 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_label_name13872 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TYPE_NAME_in_type_name13894 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_type_name13896 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SEQUENCE_NAME_in_sequence_name13919 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_sequence_name13921 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_EXCEPTION_NAME_in_exception_name13944 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_exception_name13946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_exception_name13949 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_FUNCTION_NAME_in_function_name13972 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_function_name13974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_function_name13977 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_PROCEDURE_NAME_in_procedure_name14000 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_procedure_name14002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_procedure_name14005 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_TRIGGER_NAME_in_trigger_name14028 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_trigger_name14030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_trigger_name14033 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_HOSTED_VARIABLE_NAME_in_variable_name14056 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_variable_name14058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_variable_name14061 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_VARIABLE_NAME_in_variable_name14075 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_variable_name14077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_variable_name14080 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_INDEX_NAME_in_index_name14103 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_index_name14105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_index_name14108 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CURSOR_NAME_in_cursor_name14130 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_cursor_name14132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_cursor_name14135 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_RECORD_NAME_in_record_name14157 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_record_name14159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_record_name14162 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COLLECTION_NAME_in_collection_name14184 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_collection_name14186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_collection_name14189 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LINK_NAME_in_link_name14212 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_link_name14214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_link_name14217 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_COLUMN_NAME_in_column_name14239 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_column_name14241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_column_name14244 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_TABLEVIEW_NAME_in_tableview_name14267 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_tableview_name14269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_tableview_name14272 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000100L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_link_name_in_tableview_name14275 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_partition_extension_clause_in_tableview_name14278 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CHAR_SET_NAME_in_char_set_name14301 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_char_set_name14303 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ARGUMENTS_in_function_argument14330 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_argument_in_function_argument14332 = new BitSet(new long[]{0x0000000002000008L});
    public static final BitSet FOLLOW_ARGUMENT_in_argument14355 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_argument14357 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parameter_name_in_argument14359 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CUSTOM_TYPE_in_type_spec14383 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_type_name_in_type_spec14385 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_REF_VK_in_type_spec14387 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_NATIVE_DATATYPE_in_type_spec14408 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_native_datatype_element_in_type_spec14410 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_type_precision_in_type_spec14412 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_TIME_VK_in_type_spec14416 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LOCAL_VK_in_type_spec14418 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_INTERVAL_DATATYPE_in_type_spec14434 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_set_in_type_spec14436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_set_in_type_spec14442 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_expression_in_type_spec14448 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_PRECISION_in_type_precision14471 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_constant_in_type_precision14473 = new BitSet(new long[]{0x0100000001000008L,0x2000000000000018L,0x0000002000000000L,0x0000000000000000L,0x0000000010100000L,0x0000000000000000L,0x0004000000000000L,0x0001004001010000L,0x0000040004000000L});
    public static final BitSet FOLLOW_constant_in_type_precision14475 = new BitSet(new long[]{0x0100000000000008L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_TIME_VK_in_type_precision14486 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LOCAL_VK_in_type_precision14488 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BINARY_INTEGER_VK_in_native_datatype_element14512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLS_INTEGER_VK_in_native_datatype_element14523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATURAL_VK_in_native_datatype_element14534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_FLOAT_VK_in_native_datatype_element14545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_DOUBLE_VK_in_native_datatype_element14556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NATURALN_VK_in_native_datatype_element14567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POSITIVE_VK_in_native_datatype_element14578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_POSITIVEN_VK_in_native_datatype_element14589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIGNTYPE_VK_in_native_datatype_element14600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_element14611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NVARCHAR2_VK_in_native_datatype_element14622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEC_VK_in_native_datatype_element14633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INTEGER_VK_in_native_datatype_element14644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_VK_in_native_datatype_element14655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMERIC_VK_in_native_datatype_element14666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLINT_VK_in_native_datatype_element14677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_VK_in_native_datatype_element14688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_VK_in_native_datatype_element14699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_element14711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_PRECISION_VK_in_native_datatype_element14713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_VK_in_native_datatype_element14725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_VK_in_native_datatype_element14736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCHAR_VK_in_native_datatype_element14747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONG_VK_in_native_datatype_element14758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_RAW_VK_in_native_datatype_element14760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_VK_in_native_datatype_element14772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHARACTER_VK_in_native_datatype_element14785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARCHAR2_VK_in_native_datatype_element14797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARCHAR_VK_in_native_datatype_element14808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_VK_in_native_datatype_element14819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAW_VK_in_native_datatype_element14830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_VK_in_native_datatype_element14841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DATE_VK_in_native_datatype_element14852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWID_VK_in_native_datatype_element14863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UROWID_VK_in_native_datatype_element14874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YEAR_VK_in_native_datatype_element14885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MONTH_VK_in_native_datatype_element14896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DAY_VK_in_native_datatype_element14907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HOUR_VK_in_native_datatype_element14918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUTE_VK_in_native_datatype_element14929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SECOND_VK_in_native_datatype_element14940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_element14951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_element14962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_element14973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_element14984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_VK_in_native_datatype_element14995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_element15006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_element15017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_element15028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BFILE_VK_in_native_datatype_element15061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BLOB_VK_in_native_datatype_element15072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLOB_VK_in_native_datatype_element15083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NCLOB_VK_in_native_datatype_element15094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MLSLABEL_VK_in_native_datatype_element15105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASCATED_ELEMENT_in_general_element15126 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_general_element_in_general_element15128 = new BitSet(new long[]{0x4000000000400008L,0x0000000000000000L,0x0000000000000000L,0x0000000000014000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_HOSTED_VARIABLE_ROUTINE_CALL_in_general_element15142 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_routine_name_in_general_element15144 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_function_argument_in_general_element15146 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_HOSTED_VARIABLE_in_general_element15159 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_general_element15161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_general_element15164 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ROUTINE_CALL_in_general_element15178 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_routine_name_in_general_element15180 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_function_argument_in_general_element15182 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ANY_ELEMENT_in_general_element15195 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_char_set_name_in_general_element15197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_general_element15200 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_char_set_name_in_id15370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ID_in_id15373 = new BitSet(new long[]{0x0000000000000002L});

}